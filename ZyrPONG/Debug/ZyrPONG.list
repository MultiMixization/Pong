
ZyrPONG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa0c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fe4  0800fbc0  0800fbc0  0001fbc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011ba4  08011ba4  0003027c  2**0
                  CONTENTS
  4 .ARM          00000008  08011ba4  08011ba4  00021ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011bac  08011bac  0003027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011bac  08011bac  00021bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011bb0  08011bb0  00021bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000027c  20000000  08011bb4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003027c  2**0
                  CONTENTS
 10 .bss          000089e8  2000027c  2000027c  0003027c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008c64  20008c64  0003027c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003027c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027afb  00000000  00000000  000302ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000050a4  00000000  00000000  00057da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020f0  00000000  00000000  0005ce50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ee0  00000000  00000000  0005ef40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002aa63  00000000  00000000  00060e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025708  00000000  00000000  0008b883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f640e  00000000  00000000  000b0f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a7399  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a038  00000000  00000000  001a73ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000027c 	.word	0x2000027c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800fba4 	.word	0x0800fba4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000280 	.word	0x20000280
 80001ec:	0800fba4 	.word	0x0800fba4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4a07      	ldr	r2, [pc, #28]	; (8001078 <vApplicationGetIdleTaskMemory+0x2c>)
 800105c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	4a06      	ldr	r2, [pc, #24]	; (800107c <vApplicationGetIdleTaskMemory+0x30>)
 8001062:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2280      	movs	r2, #128	; 0x80
 8001068:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800106a:	bf00      	nop
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000298 	.word	0x20000298
 800107c:	20000350 	.word	0x20000350

08001080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001080:	b5b0      	push	{r4, r5, r7, lr}
 8001082:	b08e      	sub	sp, #56	; 0x38
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001086:	f003 fb53 	bl	8004730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108a:	f000 f85d 	bl	8001148 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108e:	f000 fad1 	bl	8001634 <MX_GPIO_Init>
  MX_CRC_Init();
 8001092:	f000 f8c9 	bl	8001228 <MX_CRC_Init>
  MX_DMA2D_Init();
 8001096:	f000 f8db 	bl	8001250 <MX_DMA2D_Init>
  MX_FMC_Init();
 800109a:	f000 fa7b 	bl	8001594 <MX_FMC_Init>
  MX_LTDC_Init();
 800109e:	f000 f949 	bl	8001334 <MX_LTDC_Init>
  MX_SPI5_Init();
 80010a2:	f000 f9c7 	bl	8001434 <MX_SPI5_Init>
  MX_TIM1_Init();
 80010a6:	f000 f9fb 	bl	80014a0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80010aa:	f000 fa49 	bl	8001540 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 80010ae:	f000 f901 	bl	80012b4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  BSP_GYRO_Init();
 80010b2:	f002 fa4d 	bl	8003550 <BSP_GYRO_Init>

  BSP_LCD_Init();
 80010b6:	f002 fac9 	bl	800364c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);	//Warstwa spodnia
 80010ba:	491e      	ldr	r1, [pc, #120]	; (8001134 <main+0xb4>)
 80010bc:	2000      	movs	r0, #0
 80010be:	f002 fb47 	bl	8003750 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 80010c2:	2000      	movs	r0, #0
 80010c4:	f002 fba8 	bl	8003818 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 80010c8:	f002 ff7c 	bl	8003fc4 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80010cc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80010d0:	f002 fc14 	bl	80038fc <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	f002 fbae 	bl	8003838 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80010dc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80010e0:	f002 fbc2 	bl	8003868 <BSP_LCD_SetBackColor>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <main+0xb8>)
 80010e6:	f107 041c 	add.w	r4, r7, #28
 80010ea:	461d      	mov	r5, r3
 80010ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f008 fdb1 	bl	8009c66 <osThreadCreate>
 8001104:	4603      	mov	r3, r0
 8001106:	4a0d      	ldr	r2, [pc, #52]	; (800113c <main+0xbc>)
 8001108:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(DataGathering, StartDataGathering, osPriorityHigh, 0, 2048);
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <main+0xc0>)
 800110c:	463c      	mov	r4, r7
 800110e:	461d      	mov	r5, r3
 8001110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001114:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001118:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SecondaryTaskHandle = osThreadCreate(osThread(DataGathering), NULL);
 800111c:	463b      	mov	r3, r7
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f008 fda0 	bl	8009c66 <osThreadCreate>
 8001126:	4603      	mov	r3, r0
 8001128:	4a06      	ldr	r2, [pc, #24]	; (8001144 <main+0xc4>)
 800112a:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800112c:	f008 fd94 	bl	8009c58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001130:	e7fe      	b.n	8001130 <main+0xb0>
 8001132:	bf00      	nop
 8001134:	d0130000 	.word	0xd0130000
 8001138:	0800fbdc 	.word	0x0800fbdc
 800113c:	200007ac 	.word	0x200007ac
 8001140:	0800fbf8 	.word	0x0800fbf8
 8001144:	20000850 	.word	0x20000850

08001148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b094      	sub	sp, #80	; 0x50
 800114c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114e:	f107 0320 	add.w	r3, r7, #32
 8001152:	2230      	movs	r2, #48	; 0x30
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f00a f945 	bl	800b3e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800116c:	2300      	movs	r3, #0
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	4b2b      	ldr	r3, [pc, #172]	; (8001220 <SystemClock_Config+0xd8>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	4a2a      	ldr	r2, [pc, #168]	; (8001220 <SystemClock_Config+0xd8>)
 8001176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117a:	6413      	str	r3, [r2, #64]	; 0x40
 800117c:	4b28      	ldr	r3, [pc, #160]	; (8001220 <SystemClock_Config+0xd8>)
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001188:	2300      	movs	r3, #0
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	4b25      	ldr	r3, [pc, #148]	; (8001224 <SystemClock_Config+0xdc>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a24      	ldr	r2, [pc, #144]	; (8001224 <SystemClock_Config+0xdc>)
 8001192:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	4b22      	ldr	r3, [pc, #136]	; (8001224 <SystemClock_Config+0xdc>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011a4:	2302      	movs	r3, #2
 80011a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a8:	2301      	movs	r3, #1
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ac:	2310      	movs	r3, #16
 80011ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b0:	2302      	movs	r3, #2
 80011b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011b4:	2300      	movs	r3, #0
 80011b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011b8:	2308      	movs	r3, #8
 80011ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80011bc:	23b4      	movs	r3, #180	; 0xb4
 80011be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011c0:	2302      	movs	r3, #2
 80011c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80011c4:	2303      	movs	r3, #3
 80011c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c8:	f107 0320 	add.w	r3, r7, #32
 80011cc:	4618      	mov	r0, r3
 80011ce:	f005 fa81 	bl	80066d4 <HAL_RCC_OscConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011d8:	f000 fe8a 	bl	8001ef0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011dc:	f005 fa2a 	bl	8006634 <HAL_PWREx_EnableOverDrive>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80011e6:	f000 fe83 	bl	8001ef0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ea:	230f      	movs	r3, #15
 80011ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ee:	2302      	movs	r3, #2
 80011f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001200:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001202:	f107 030c 	add.w	r3, r7, #12
 8001206:	2105      	movs	r1, #5
 8001208:	4618      	mov	r0, r3
 800120a:	f005 fcdb 	bl	8006bc4 <HAL_RCC_ClockConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001214:	f000 fe6c 	bl	8001ef0 <Error_Handler>
  }
}
 8001218:	bf00      	nop
 800121a:	3750      	adds	r7, #80	; 0x50
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40023800 	.word	0x40023800
 8001224:	40007000 	.word	0x40007000

08001228 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_CRC_Init+0x20>)
 800122e:	4a07      	ldr	r2, [pc, #28]	; (800124c <MX_CRC_Init+0x24>)
 8001230:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_CRC_Init+0x20>)
 8001234:	f003 fbc4 	bl	80049c0 <HAL_CRC_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800123e:	f000 fe57 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000550 	.word	0x20000550
 800124c:	40023000 	.word	0x40023000

08001250 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <MX_DMA2D_Init+0x5c>)
 8001256:	4a16      	ldr	r2, [pc, #88]	; (80012b0 <MX_DMA2D_Init+0x60>)
 8001258:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <MX_DMA2D_Init+0x5c>)
 800125c:	2200      	movs	r2, #0
 800125e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_DMA2D_Init+0x5c>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_DMA2D_Init+0x5c>)
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_DMA2D_Init+0x5c>)
 800126e:	2200      	movs	r2, #0
 8001270:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_DMA2D_Init+0x5c>)
 8001274:	2200      	movs	r2, #0
 8001276:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_DMA2D_Init+0x5c>)
 800127a:	2200      	movs	r2, #0
 800127c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <MX_DMA2D_Init+0x5c>)
 8001280:	2200      	movs	r2, #0
 8001282:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001284:	4809      	ldr	r0, [pc, #36]	; (80012ac <MX_DMA2D_Init+0x5c>)
 8001286:	f003 fe07 	bl	8004e98 <HAL_DMA2D_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001290:	f000 fe2e 	bl	8001ef0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001294:	2101      	movs	r1, #1
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_DMA2D_Init+0x5c>)
 8001298:	f004 f86c 	bl	8005374 <HAL_DMA2D_ConfigLayer>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80012a2:	f000 fe25 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000558 	.word	0x20000558
 80012b0:	4002b000 	.word	0x4002b000

080012b4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <MX_I2C3_Init+0x74>)
 80012ba:	4a1c      	ldr	r2, [pc, #112]	; (800132c <MX_I2C3_Init+0x78>)
 80012bc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80012be:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <MX_I2C3_Init+0x74>)
 80012c0:	4a1b      	ldr	r2, [pc, #108]	; (8001330 <MX_I2C3_Init+0x7c>)
 80012c2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <MX_I2C3_Init+0x74>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80012ca:	4b17      	ldr	r3, [pc, #92]	; (8001328 <MX_I2C3_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <MX_I2C3_Init+0x74>)
 80012d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012d6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d8:	4b13      	ldr	r3, [pc, #76]	; (8001328 <MX_I2C3_Init+0x74>)
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <MX_I2C3_Init+0x74>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <MX_I2C3_Init+0x74>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_I2C3_Init+0x74>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80012f0:	480d      	ldr	r0, [pc, #52]	; (8001328 <MX_I2C3_Init+0x74>)
 80012f2:	f004 fc57 	bl	8005ba4 <HAL_I2C_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80012fc:	f000 fdf8 	bl	8001ef0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001300:	2100      	movs	r1, #0
 8001302:	4809      	ldr	r0, [pc, #36]	; (8001328 <MX_I2C3_Init+0x74>)
 8001304:	f004 fd92 	bl	8005e2c <HAL_I2CEx_ConfigAnalogFilter>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800130e:	f000 fdef 	bl	8001ef0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001312:	2100      	movs	r1, #0
 8001314:	4804      	ldr	r0, [pc, #16]	; (8001328 <MX_I2C3_Init+0x74>)
 8001316:	f004 fdc5 	bl	8005ea4 <HAL_I2CEx_ConfigDigitalFilter>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001320:	f000 fde6 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000598 	.word	0x20000598
 800132c:	40005c00 	.word	0x40005c00
 8001330:	000186a0 	.word	0x000186a0

08001334 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08e      	sub	sp, #56	; 0x38
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	2234      	movs	r2, #52	; 0x34
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f00a f850 	bl	800b3e6 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001346:	4b39      	ldr	r3, [pc, #228]	; (800142c <MX_LTDC_Init+0xf8>)
 8001348:	4a39      	ldr	r2, [pc, #228]	; (8001430 <MX_LTDC_Init+0xfc>)
 800134a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800134c:	4b37      	ldr	r3, [pc, #220]	; (800142c <MX_LTDC_Init+0xf8>)
 800134e:	2200      	movs	r2, #0
 8001350:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001352:	4b36      	ldr	r3, [pc, #216]	; (800142c <MX_LTDC_Init+0xf8>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001358:	4b34      	ldr	r3, [pc, #208]	; (800142c <MX_LTDC_Init+0xf8>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800135e:	4b33      	ldr	r3, [pc, #204]	; (800142c <MX_LTDC_Init+0xf8>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8001364:	4b31      	ldr	r3, [pc, #196]	; (800142c <MX_LTDC_Init+0xf8>)
 8001366:	2209      	movs	r2, #9
 8001368:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800136a:	4b30      	ldr	r3, [pc, #192]	; (800142c <MX_LTDC_Init+0xf8>)
 800136c:	2201      	movs	r2, #1
 800136e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8001370:	4b2e      	ldr	r3, [pc, #184]	; (800142c <MX_LTDC_Init+0xf8>)
 8001372:	221d      	movs	r2, #29
 8001374:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8001376:	4b2d      	ldr	r3, [pc, #180]	; (800142c <MX_LTDC_Init+0xf8>)
 8001378:	2203      	movs	r2, #3
 800137a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 800137c:	4b2b      	ldr	r3, [pc, #172]	; (800142c <MX_LTDC_Init+0xf8>)
 800137e:	f240 120d 	movw	r2, #269	; 0x10d
 8001382:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8001384:	4b29      	ldr	r3, [pc, #164]	; (800142c <MX_LTDC_Init+0xf8>)
 8001386:	f240 1243 	movw	r2, #323	; 0x143
 800138a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 800138c:	4b27      	ldr	r3, [pc, #156]	; (800142c <MX_LTDC_Init+0xf8>)
 800138e:	f240 1217 	movw	r2, #279	; 0x117
 8001392:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8001394:	4b25      	ldr	r3, [pc, #148]	; (800142c <MX_LTDC_Init+0xf8>)
 8001396:	f240 1247 	movw	r2, #327	; 0x147
 800139a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800139c:	4b23      	ldr	r3, [pc, #140]	; (800142c <MX_LTDC_Init+0xf8>)
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80013a4:	4b21      	ldr	r3, [pc, #132]	; (800142c <MX_LTDC_Init+0xf8>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80013ac:	4b1f      	ldr	r3, [pc, #124]	; (800142c <MX_LTDC_Init+0xf8>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80013b4:	481d      	ldr	r0, [pc, #116]	; (800142c <MX_LTDC_Init+0xf8>)
 80013b6:	f004 fdb5 	bl	8005f24 <HAL_LTDC_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80013c0:	f000 fd96 	bl	8001ef0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80013c8:	23f0      	movs	r3, #240	; 0xf0
 80013ca:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80013d0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80013d4:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80013d6:	2302      	movs	r3, #2
 80013d8:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80013da:	23ff      	movs	r3, #255	; 0xff
 80013dc:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80013e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013e6:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80013e8:	2307      	movs	r3, #7
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80013ec:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80013f2:	23f0      	movs	r3, #240	; 0xf0
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80013f6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80013fa:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	2200      	movs	r2, #0
 8001412:	4619      	mov	r1, r3
 8001414:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_LTDC_Init+0xf8>)
 8001416:	f004 ff0d 	bl	8006234 <HAL_LTDC_ConfigLayer>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8001420:	f000 fd66 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	3738      	adds	r7, #56	; 0x38
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	200005ec 	.word	0x200005ec
 8001430:	40016800 	.word	0x40016800

08001434 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001438:	4b17      	ldr	r3, [pc, #92]	; (8001498 <MX_SPI5_Init+0x64>)
 800143a:	4a18      	ldr	r2, [pc, #96]	; (800149c <MX_SPI5_Init+0x68>)
 800143c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800143e:	4b16      	ldr	r3, [pc, #88]	; (8001498 <MX_SPI5_Init+0x64>)
 8001440:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001444:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <MX_SPI5_Init+0x64>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <MX_SPI5_Init+0x64>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_SPI5_Init+0x64>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <MX_SPI5_Init+0x64>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_SPI5_Init+0x64>)
 8001460:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001464:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001466:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_SPI5_Init+0x64>)
 8001468:	2200      	movs	r2, #0
 800146a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <MX_SPI5_Init+0x64>)
 800146e:	2200      	movs	r2, #0
 8001470:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_SPI5_Init+0x64>)
 8001474:	2200      	movs	r2, #0
 8001476:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001478:	4b07      	ldr	r3, [pc, #28]	; (8001498 <MX_SPI5_Init+0x64>)
 800147a:	2200      	movs	r2, #0
 800147c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_SPI5_Init+0x64>)
 8001480:	220a      	movs	r2, #10
 8001482:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001484:	4804      	ldr	r0, [pc, #16]	; (8001498 <MX_SPI5_Init+0x64>)
 8001486:	f006 f840 	bl	800750a <HAL_SPI_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001490:	f000 fd2e 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000694 	.word	0x20000694
 800149c:	40015000 	.word	0x40015000

080014a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a6:	f107 0308 	add.w	r3, r7, #8
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b4:	463b      	mov	r3, r7
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014bc:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <MX_TIM1_Init+0x98>)
 80014be:	4a1f      	ldr	r2, [pc, #124]	; (800153c <MX_TIM1_Init+0x9c>)
 80014c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014c2:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <MX_TIM1_Init+0x98>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c8:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <MX_TIM1_Init+0x98>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014ce:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <MX_TIM1_Init+0x98>)
 80014d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d6:	4b18      	ldr	r3, [pc, #96]	; (8001538 <MX_TIM1_Init+0x98>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014dc:	4b16      	ldr	r3, [pc, #88]	; (8001538 <MX_TIM1_Init+0x98>)
 80014de:	2200      	movs	r2, #0
 80014e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <MX_TIM1_Init+0x98>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014e8:	4813      	ldr	r0, [pc, #76]	; (8001538 <MX_TIM1_Init+0x98>)
 80014ea:	f006 fded 	bl	80080c8 <HAL_TIM_Base_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80014f4:	f000 fcfc 	bl	8001ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	4619      	mov	r1, r3
 8001504:	480c      	ldr	r0, [pc, #48]	; (8001538 <MX_TIM1_Init+0x98>)
 8001506:	f006 ffa7 	bl	8008458 <HAL_TIM_ConfigClockSource>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001510:	f000 fcee 	bl	8001ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001514:	2300      	movs	r3, #0
 8001516:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800151c:	463b      	mov	r3, r7
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_TIM1_Init+0x98>)
 8001522:	f007 f9c3 	bl	80088ac <HAL_TIMEx_MasterConfigSynchronization>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800152c:	f000 fce0 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	200006ec 	.word	0x200006ec
 800153c:	40010000 	.word	0x40010000

08001540 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_USART1_UART_Init+0x4c>)
 8001546:	4a12      	ldr	r2, [pc, #72]	; (8001590 <MX_USART1_UART_Init+0x50>)
 8001548:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <MX_USART1_UART_Init+0x4c>)
 800154c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001550:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_USART1_UART_Init+0x4c>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_USART1_UART_Init+0x4c>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <MX_USART1_UART_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_USART1_UART_Init+0x4c>)
 8001566:	220c      	movs	r2, #12
 8001568:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <MX_USART1_UART_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <MX_USART1_UART_Init+0x4c>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_USART1_UART_Init+0x4c>)
 8001578:	f007 fa28 	bl	80089cc <HAL_UART_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001582:	f000 fcb5 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000734 	.word	0x20000734
 8001590:	40011000 	.word	0x40011000

08001594 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
 80015a8:	615a      	str	r2, [r3, #20]
 80015aa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80015ac:	4b1f      	ldr	r3, [pc, #124]	; (800162c <MX_FMC_Init+0x98>)
 80015ae:	4a20      	ldr	r2, [pc, #128]	; (8001630 <MX_FMC_Init+0x9c>)
 80015b0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80015b2:	4b1e      	ldr	r3, [pc, #120]	; (800162c <MX_FMC_Init+0x98>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80015b8:	4b1c      	ldr	r3, [pc, #112]	; (800162c <MX_FMC_Init+0x98>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80015be:	4b1b      	ldr	r3, [pc, #108]	; (800162c <MX_FMC_Init+0x98>)
 80015c0:	2204      	movs	r2, #4
 80015c2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80015c4:	4b19      	ldr	r3, [pc, #100]	; (800162c <MX_FMC_Init+0x98>)
 80015c6:	2210      	movs	r2, #16
 80015c8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80015ca:	4b18      	ldr	r3, [pc, #96]	; (800162c <MX_FMC_Init+0x98>)
 80015cc:	2240      	movs	r2, #64	; 0x40
 80015ce:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80015d0:	4b16      	ldr	r3, [pc, #88]	; (800162c <MX_FMC_Init+0x98>)
 80015d2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80015d6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <MX_FMC_Init+0x98>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <MX_FMC_Init+0x98>)
 80015e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015e4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <MX_FMC_Init+0x98>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <MX_FMC_Init+0x98>)
 80015ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80015f4:	2302      	movs	r3, #2
 80015f6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80015f8:	2307      	movs	r3, #7
 80015fa:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80015fc:	2304      	movs	r3, #4
 80015fe:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001600:	2307      	movs	r3, #7
 8001602:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001604:	2303      	movs	r3, #3
 8001606:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001608:	2302      	movs	r3, #2
 800160a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800160c:	2302      	movs	r3, #2
 800160e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	4619      	mov	r1, r3
 8001614:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_FMC_Init+0x98>)
 8001616:	f005 fee7 	bl	80073e8 <HAL_SDRAM_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001620:	f000 fc66 	bl	8001ef0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001624:	bf00      	nop
 8001626:	3720      	adds	r7, #32
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000778 	.word	0x20000778
 8001630:	a0000140 	.word	0xa0000140

08001634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08e      	sub	sp, #56	; 0x38
 8001638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
 8001648:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
 800164e:	4b8a      	ldr	r3, [pc, #552]	; (8001878 <MX_GPIO_Init+0x244>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a89      	ldr	r2, [pc, #548]	; (8001878 <MX_GPIO_Init+0x244>)
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b87      	ldr	r3, [pc, #540]	; (8001878 <MX_GPIO_Init+0x244>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	623b      	str	r3, [r7, #32]
 8001664:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
 800166a:	4b83      	ldr	r3, [pc, #524]	; (8001878 <MX_GPIO_Init+0x244>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a82      	ldr	r2, [pc, #520]	; (8001878 <MX_GPIO_Init+0x244>)
 8001670:	f043 0320 	orr.w	r3, r3, #32
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b80      	ldr	r3, [pc, #512]	; (8001878 <MX_GPIO_Init+0x244>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0320 	and.w	r3, r3, #32
 800167e:	61fb      	str	r3, [r7, #28]
 8001680:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
 8001686:	4b7c      	ldr	r3, [pc, #496]	; (8001878 <MX_GPIO_Init+0x244>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a7b      	ldr	r2, [pc, #492]	; (8001878 <MX_GPIO_Init+0x244>)
 800168c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b79      	ldr	r3, [pc, #484]	; (8001878 <MX_GPIO_Init+0x244>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169a:	61bb      	str	r3, [r7, #24]
 800169c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	4b75      	ldr	r3, [pc, #468]	; (8001878 <MX_GPIO_Init+0x244>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a74      	ldr	r2, [pc, #464]	; (8001878 <MX_GPIO_Init+0x244>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b72      	ldr	r3, [pc, #456]	; (8001878 <MX_GPIO_Init+0x244>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	4b6e      	ldr	r3, [pc, #440]	; (8001878 <MX_GPIO_Init+0x244>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a6d      	ldr	r2, [pc, #436]	; (8001878 <MX_GPIO_Init+0x244>)
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b6b      	ldr	r3, [pc, #428]	; (8001878 <MX_GPIO_Init+0x244>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b67      	ldr	r3, [pc, #412]	; (8001878 <MX_GPIO_Init+0x244>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a66      	ldr	r2, [pc, #408]	; (8001878 <MX_GPIO_Init+0x244>)
 80016e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b64      	ldr	r3, [pc, #400]	; (8001878 <MX_GPIO_Init+0x244>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	4b60      	ldr	r3, [pc, #384]	; (8001878 <MX_GPIO_Init+0x244>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a5f      	ldr	r2, [pc, #380]	; (8001878 <MX_GPIO_Init+0x244>)
 80016fc:	f043 0310 	orr.w	r3, r3, #16
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b5d      	ldr	r3, [pc, #372]	; (8001878 <MX_GPIO_Init+0x244>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0310 	and.w	r3, r3, #16
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	4b59      	ldr	r3, [pc, #356]	; (8001878 <MX_GPIO_Init+0x244>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a58      	ldr	r2, [pc, #352]	; (8001878 <MX_GPIO_Init+0x244>)
 8001718:	f043 0308 	orr.w	r3, r3, #8
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b56      	ldr	r3, [pc, #344]	; (8001878 <MX_GPIO_Init+0x244>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	2116      	movs	r1, #22
 800172e:	4853      	ldr	r0, [pc, #332]	; (800187c <MX_GPIO_Init+0x248>)
 8001730:	f004 fa1e 	bl	8005b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2180      	movs	r1, #128	; 0x80
 8001738:	4851      	ldr	r0, [pc, #324]	; (8001880 <MX_GPIO_Init+0x24c>)
 800173a:	f004 fa19 	bl	8005b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001744:	484f      	ldr	r0, [pc, #316]	; (8001884 <MX_GPIO_Init+0x250>)
 8001746:	f004 fa13 	bl	8005b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800174a:	2200      	movs	r2, #0
 800174c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001750:	484d      	ldr	r0, [pc, #308]	; (8001888 <MX_GPIO_Init+0x254>)
 8001752:	f004 fa0d 	bl	8005b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001756:	2316      	movs	r3, #22
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175a:	2301      	movs	r3, #1
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176a:	4619      	mov	r1, r3
 800176c:	4843      	ldr	r0, [pc, #268]	; (800187c <MX_GPIO_Init+0x248>)
 800176e:	f003 ff2f 	bl	80055d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001772:	f248 0307 	movw	r3, #32775	; 0x8007
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001778:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001786:	4619      	mov	r1, r3
 8001788:	483d      	ldr	r0, [pc, #244]	; (8001880 <MX_GPIO_Init+0x24c>)
 800178a:	f003 ff21 	bl	80055d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001792:	2301      	movs	r3, #1
 8001794:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800179e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a2:	4619      	mov	r1, r3
 80017a4:	4836      	ldr	r0, [pc, #216]	; (8001880 <MX_GPIO_Init+0x24c>)
 80017a6:	f003 ff13 	bl	80055d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80017aa:	2320      	movs	r3, #32
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017ae:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80017b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017bc:	4619      	mov	r1, r3
 80017be:	482f      	ldr	r0, [pc, #188]	; (800187c <MX_GPIO_Init+0x248>)
 80017c0:	f003 ff06 	bl	80055d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80017c4:	2304      	movs	r3, #4
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80017d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d4:	4619      	mov	r1, r3
 80017d6:	482d      	ldr	r0, [pc, #180]	; (800188c <MX_GPIO_Init+0x258>)
 80017d8:	f003 fefa 	bl	80055d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80017dc:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80017ee:	230c      	movs	r3, #12
 80017f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f6:	4619      	mov	r1, r3
 80017f8:	4824      	ldr	r0, [pc, #144]	; (800188c <MX_GPIO_Init+0x258>)
 80017fa:	f003 fee9 	bl	80055d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80017fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001804:	2300      	movs	r3, #0
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800180c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001810:	4619      	mov	r1, r3
 8001812:	481e      	ldr	r0, [pc, #120]	; (800188c <MX_GPIO_Init+0x258>)
 8001814:	f003 fedc 	bl	80055d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001818:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181e:	2300      	movs	r3, #0
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182a:	4619      	mov	r1, r3
 800182c:	4815      	ldr	r0, [pc, #84]	; (8001884 <MX_GPIO_Init+0x250>)
 800182e:	f003 fecf 	bl	80055d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001832:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001838:	2301      	movs	r3, #1
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001848:	4619      	mov	r1, r3
 800184a:	480e      	ldr	r0, [pc, #56]	; (8001884 <MX_GPIO_Init+0x250>)
 800184c:	f003 fec0 	bl	80055d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001850:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001856:	2301      	movs	r3, #1
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001866:	4619      	mov	r1, r3
 8001868:	4807      	ldr	r0, [pc, #28]	; (8001888 <MX_GPIO_Init+0x254>)
 800186a:	f003 feb1 	bl	80055d0 <HAL_GPIO_Init>

}
 800186e:	bf00      	nop
 8001870:	3738      	adds	r7, #56	; 0x38
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	40020800 	.word	0x40020800
 8001880:	40020000 	.word	0x40020000
 8001884:	40020c00 	.word	0x40020c00
 8001888:	40021800 	.word	0x40021800
 800188c:	40020400 	.word	0x40020400

08001890 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	b29a      	uxth	r2, r3
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295
 80018a4:	68b9      	ldr	r1, [r7, #8]
 80018a6:	4804      	ldr	r0, [pc, #16]	; (80018b8 <_write+0x28>)
 80018a8:	f007 f8dd 	bl	8008a66 <HAL_UART_Transmit>
	return len;
 80018ac:	687b      	ldr	r3, [r7, #4]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000734 	.word	0x20000734

080018bc <HAL_LTDC_ReloadEventCallback>:

void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  ReloadFlag = 1;
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <HAL_LTDC_ReloadEventCallback+0x1c>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	601a      	str	r2, [r3, #0]
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	200007b0 	.word	0x200007b0

080018dc <Rewrite_History>:

void Rewrite_History()
{
 80018dc:	b5b0      	push	{r4, r5, r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
	float newx_average = 0;
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
	float newy_average = 0;
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
	float newz_average = 0;
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	607b      	str	r3, [r7, #4]
	for(int i=1; i<=9; i++)
 80018f4:	2301      	movs	r3, #1
 80018f6:	603b      	str	r3, [r7, #0]
 80018f8:	e047      	b.n	800198a <Rewrite_History+0xae>
	{
		x_history[i-1] = x_history[i];
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	49a0      	ldr	r1, [pc, #640]	; (8001b80 <Rewrite_History+0x2a4>)
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	0092      	lsls	r2, r2, #2
 8001904:	440a      	add	r2, r1
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	499d      	ldr	r1, [pc, #628]	; (8001b80 <Rewrite_History+0x2a4>)
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	601a      	str	r2, [r3, #0]
		y_history[i-1] = y_history[i];
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	3b01      	subs	r3, #1
 8001914:	499b      	ldr	r1, [pc, #620]	; (8001b84 <Rewrite_History+0x2a8>)
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	0092      	lsls	r2, r2, #2
 800191a:	440a      	add	r2, r1
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	4999      	ldr	r1, [pc, #612]	; (8001b84 <Rewrite_History+0x2a8>)
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	440b      	add	r3, r1
 8001924:	601a      	str	r2, [r3, #0]
		z_history[i-1] = z_history[i];
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	3b01      	subs	r3, #1
 800192a:	4997      	ldr	r1, [pc, #604]	; (8001b88 <Rewrite_History+0x2ac>)
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	0092      	lsls	r2, r2, #2
 8001930:	440a      	add	r2, r1
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	4994      	ldr	r1, [pc, #592]	; (8001b88 <Rewrite_History+0x2ac>)
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	601a      	str	r2, [r3, #0]
		newx_average += x_history[i];
 800193c:	4a90      	ldr	r2, [pc, #576]	; (8001b80 <Rewrite_History+0x2a4>)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	edd3 7a00 	vldr	s15, [r3]
 8001948:	ed97 7a03 	vldr	s14, [r7, #12]
 800194c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001950:	edc7 7a03 	vstr	s15, [r7, #12]
		newy_average += y_history[i];
 8001954:	4a8b      	ldr	r2, [pc, #556]	; (8001b84 <Rewrite_History+0x2a8>)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	edd3 7a00 	vldr	s15, [r3]
 8001960:	ed97 7a02 	vldr	s14, [r7, #8]
 8001964:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001968:	edc7 7a02 	vstr	s15, [r7, #8]
		newz_average += z_history[i];
 800196c:	4a86      	ldr	r2, [pc, #536]	; (8001b88 <Rewrite_History+0x2ac>)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	edd3 7a00 	vldr	s15, [r3]
 8001978:	ed97 7a01 	vldr	s14, [r7, #4]
 800197c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001980:	edc7 7a01 	vstr	s15, [r7, #4]
	for(int i=1; i<=9; i++)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	3301      	adds	r3, #1
 8001988:	603b      	str	r3, [r7, #0]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	2b09      	cmp	r3, #9
 800198e:	ddb4      	ble.n	80018fa <Rewrite_History+0x1e>
	}
	BSP_GYRO_GetXYZ(gyroscope);
 8001990:	487e      	ldr	r0, [pc, #504]	; (8001b8c <Rewrite_History+0x2b0>)
 8001992:	f001 fe47 	bl	8003624 <BSP_GYRO_GetXYZ>
	newx_average += gyroscope[1];
 8001996:	4b7d      	ldr	r3, [pc, #500]	; (8001b8c <Rewrite_History+0x2b0>)
 8001998:	edd3 7a01 	vldr	s15, [r3, #4]
 800199c:	ed97 7a03 	vldr	s14, [r7, #12]
 80019a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a4:	edc7 7a03 	vstr	s15, [r7, #12]
	newy_average += gyroscope[2];
 80019a8:	4b78      	ldr	r3, [pc, #480]	; (8001b8c <Rewrite_History+0x2b0>)
 80019aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80019ae:	ed97 7a02 	vldr	s14, [r7, #8]
 80019b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b6:	edc7 7a02 	vstr	s15, [r7, #8]
	newz_average += gyroscope[3];
 80019ba:	4b74      	ldr	r3, [pc, #464]	; (8001b8c <Rewrite_History+0x2b0>)
 80019bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80019c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80019c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c8:	edc7 7a01 	vstr	s15, [r7, #4]

	x_history[10] = gyroscope[0];
 80019cc:	4b6f      	ldr	r3, [pc, #444]	; (8001b8c <Rewrite_History+0x2b0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a6b      	ldr	r2, [pc, #428]	; (8001b80 <Rewrite_History+0x2a4>)
 80019d2:	6293      	str	r3, [r2, #40]	; 0x28
	y_history[10] = gyroscope[1];
 80019d4:	4b6d      	ldr	r3, [pc, #436]	; (8001b8c <Rewrite_History+0x2b0>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	4a6a      	ldr	r2, [pc, #424]	; (8001b84 <Rewrite_History+0x2a8>)
 80019da:	6293      	str	r3, [r2, #40]	; 0x28
	z_history[10] = gyroscope[2];
 80019dc:	4b6b      	ldr	r3, [pc, #428]	; (8001b8c <Rewrite_History+0x2b0>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	4a69      	ldr	r2, [pc, #420]	; (8001b88 <Rewrite_History+0x2ac>)
 80019e2:	6293      	str	r3, [r2, #40]	; 0x28

	x_average = (newx_average / 10.0) / 1000.0 - 3.0;
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f7fe fdbf 	bl	8000568 <__aeabi_f2d>
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	4b68      	ldr	r3, [pc, #416]	; (8001b90 <Rewrite_History+0x2b4>)
 80019f0:	f7fe ff3c 	bl	800086c <__aeabi_ddiv>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	4b64      	ldr	r3, [pc, #400]	; (8001b94 <Rewrite_History+0x2b8>)
 8001a02:	f7fe ff33 	bl	800086c <__aeabi_ddiv>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	4b61      	ldr	r3, [pc, #388]	; (8001b98 <Rewrite_History+0x2bc>)
 8001a14:	f7fe fc48 	bl	80002a8 <__aeabi_dsub>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f7ff f8f2 	bl	8000c08 <__aeabi_d2f>
 8001a24:	4603      	mov	r3, r0
 8001a26:	4a5d      	ldr	r2, [pc, #372]	; (8001b9c <Rewrite_History+0x2c0>)
 8001a28:	6013      	str	r3, [r2, #0]
	y_average = (newy_average / 10.0) / 1000.0 - 3.0;
 8001a2a:	68b8      	ldr	r0, [r7, #8]
 8001a2c:	f7fe fd9c 	bl	8000568 <__aeabi_f2d>
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	4b56      	ldr	r3, [pc, #344]	; (8001b90 <Rewrite_History+0x2b4>)
 8001a36:	f7fe ff19 	bl	800086c <__aeabi_ddiv>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4610      	mov	r0, r2
 8001a40:	4619      	mov	r1, r3
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	4b53      	ldr	r3, [pc, #332]	; (8001b94 <Rewrite_History+0x2b8>)
 8001a48:	f7fe ff10 	bl	800086c <__aeabi_ddiv>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4610      	mov	r0, r2
 8001a52:	4619      	mov	r1, r3
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	4b4f      	ldr	r3, [pc, #316]	; (8001b98 <Rewrite_History+0x2bc>)
 8001a5a:	f7fe fc25 	bl	80002a8 <__aeabi_dsub>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4610      	mov	r0, r2
 8001a64:	4619      	mov	r1, r3
 8001a66:	f7ff f8cf 	bl	8000c08 <__aeabi_d2f>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4a4c      	ldr	r2, [pc, #304]	; (8001ba0 <Rewrite_History+0x2c4>)
 8001a6e:	6013      	str	r3, [r2, #0]
	z_average = (newz_average / 10.0) / 1000.0 - 3.0;
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7fe fd79 	bl	8000568 <__aeabi_f2d>
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	4b45      	ldr	r3, [pc, #276]	; (8001b90 <Rewrite_History+0x2b4>)
 8001a7c:	f7fe fef6 	bl	800086c <__aeabi_ddiv>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	4b41      	ldr	r3, [pc, #260]	; (8001b94 <Rewrite_History+0x2b8>)
 8001a8e:	f7fe feed 	bl	800086c <__aeabi_ddiv>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	4b3e      	ldr	r3, [pc, #248]	; (8001b98 <Rewrite_History+0x2bc>)
 8001aa0:	f7fe fc02 	bl	80002a8 <__aeabi_dsub>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f7ff f8ac 	bl	8000c08 <__aeabi_d2f>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4a3c      	ldr	r2, [pc, #240]	; (8001ba4 <Rewrite_History+0x2c8>)
 8001ab4:	6013      	str	r3, [r2, #0]

	AngleX += (x_average / 100.0);
 8001ab6:	4b3c      	ldr	r3, [pc, #240]	; (8001ba8 <Rewrite_History+0x2cc>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fd54 	bl	8000568 <__aeabi_f2d>
 8001ac0:	4604      	mov	r4, r0
 8001ac2:	460d      	mov	r5, r1
 8001ac4:	4b35      	ldr	r3, [pc, #212]	; (8001b9c <Rewrite_History+0x2c0>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fd4d 	bl	8000568 <__aeabi_f2d>
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	4b36      	ldr	r3, [pc, #216]	; (8001bac <Rewrite_History+0x2d0>)
 8001ad4:	f7fe feca 	bl	800086c <__aeabi_ddiv>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4620      	mov	r0, r4
 8001ade:	4629      	mov	r1, r5
 8001ae0:	f7fe fbe4 	bl	80002ac <__adddf3>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	f7ff f88c 	bl	8000c08 <__aeabi_d2f>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4a2d      	ldr	r2, [pc, #180]	; (8001ba8 <Rewrite_History+0x2cc>)
 8001af4:	6013      	str	r3, [r2, #0]
	AngleY += (y_average / 100.0);
 8001af6:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <Rewrite_History+0x2d4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fd34 	bl	8000568 <__aeabi_f2d>
 8001b00:	4604      	mov	r4, r0
 8001b02:	460d      	mov	r5, r1
 8001b04:	4b26      	ldr	r3, [pc, #152]	; (8001ba0 <Rewrite_History+0x2c4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fd2d 	bl	8000568 <__aeabi_f2d>
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	4b26      	ldr	r3, [pc, #152]	; (8001bac <Rewrite_History+0x2d0>)
 8001b14:	f7fe feaa 	bl	800086c <__aeabi_ddiv>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	4629      	mov	r1, r5
 8001b20:	f7fe fbc4 	bl	80002ac <__adddf3>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f7ff f86c 	bl	8000c08 <__aeabi_d2f>
 8001b30:	4603      	mov	r3, r0
 8001b32:	4a1f      	ldr	r2, [pc, #124]	; (8001bb0 <Rewrite_History+0x2d4>)
 8001b34:	6013      	str	r3, [r2, #0]
	AngleZ += (z_average / 100.0);
 8001b36:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <Rewrite_History+0x2d8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fd14 	bl	8000568 <__aeabi_f2d>
 8001b40:	4604      	mov	r4, r0
 8001b42:	460d      	mov	r5, r1
 8001b44:	4b17      	ldr	r3, [pc, #92]	; (8001ba4 <Rewrite_History+0x2c8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fd0d 	bl	8000568 <__aeabi_f2d>
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	4b16      	ldr	r3, [pc, #88]	; (8001bac <Rewrite_History+0x2d0>)
 8001b54:	f7fe fe8a 	bl	800086c <__aeabi_ddiv>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	4629      	mov	r1, r5
 8001b60:	f7fe fba4 	bl	80002ac <__adddf3>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4610      	mov	r0, r2
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	f7ff f84c 	bl	8000c08 <__aeabi_d2f>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4a10      	ldr	r2, [pc, #64]	; (8001bb4 <Rewrite_History+0x2d8>)
 8001b74:	6013      	str	r3, [r2, #0]
}
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200007b4 	.word	0x200007b4
 8001b84:	200007d8 	.word	0x200007d8
 8001b88:	200007fc 	.word	0x200007fc
 8001b8c:	20000820 	.word	0x20000820
 8001b90:	40240000 	.word	0x40240000
 8001b94:	408f4000 	.word	0x408f4000
 8001b98:	40080000 	.word	0x40080000
 8001b9c:	2000082c 	.word	0x2000082c
 8001ba0:	20000830 	.word	0x20000830
 8001ba4:	20000834 	.word	0x20000834
 8001ba8:	20000844 	.word	0x20000844
 8001bac:	40590000 	.word	0x40590000
 8001bb0:	20000840 	.word	0x20000840
 8001bb4:	20000848 	.word	0x20000848

08001bb8 <StartDataGathering>:

void StartDataGathering(void const * argument)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Rewrite_History();
 8001bc0:	f7ff fe8c 	bl	80018dc <Rewrite_History>
		osDelay(2);
 8001bc4:	2002      	movs	r0, #2
 8001bc6:	f008 f89a 	bl	8009cfe <osDelay>
		Rewrite_History();
 8001bca:	e7f9      	b.n	8001bc0 <StartDataGathering+0x8>

08001bcc <CheckForBoundaries>:
	}
}

void CheckForBoundaries()
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
	if(RightYPos <= 0)
 8001bd0:	4b35      	ldr	r3, [pc, #212]	; (8001ca8 <CheckForBoundaries+0xdc>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	dc06      	bgt.n	8001be6 <CheckForBoundaries+0x1a>
	{
		RightYPos = 0;
 8001bd8:	4b33      	ldr	r3, [pc, #204]	; (8001ca8 <CheckForBoundaries+0xdc>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
		RightYSpeed = 0;
 8001bde:	4b33      	ldr	r3, [pc, #204]	; (8001cac <CheckForBoundaries+0xe0>)
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
	}
	if(RightYPos >= 270)
 8001be6:	4b30      	ldr	r3, [pc, #192]	; (8001ca8 <CheckForBoundaries+0xdc>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001bee:	db07      	blt.n	8001c00 <CheckForBoundaries+0x34>
	{
		RightYPos = 270;
 8001bf0:	4b2d      	ldr	r3, [pc, #180]	; (8001ca8 <CheckForBoundaries+0xdc>)
 8001bf2:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001bf6:	601a      	str	r2, [r3, #0]
		RightYSpeed = 0;
 8001bf8:	4b2c      	ldr	r3, [pc, #176]	; (8001cac <CheckForBoundaries+0xe0>)
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
	}

	if(LeftYPos <= 0)
 8001c00:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <CheckForBoundaries+0xe4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	dc06      	bgt.n	8001c16 <CheckForBoundaries+0x4a>
	{
		LeftYPos = 0;
 8001c08:	4b29      	ldr	r3, [pc, #164]	; (8001cb0 <CheckForBoundaries+0xe4>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
		LeftYSpeed = 0;
 8001c0e:	4b29      	ldr	r3, [pc, #164]	; (8001cb4 <CheckForBoundaries+0xe8>)
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
	}
	if(LeftYPos >= 270)
 8001c16:	4b26      	ldr	r3, [pc, #152]	; (8001cb0 <CheckForBoundaries+0xe4>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001c1e:	db07      	blt.n	8001c30 <CheckForBoundaries+0x64>
	{
		LeftYPos = 270;
 8001c20:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <CheckForBoundaries+0xe4>)
 8001c22:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001c26:	601a      	str	r2, [r3, #0]
		LeftYSpeed = 0;
 8001c28:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <CheckForBoundaries+0xe8>)
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
	}

	if(BallXPos <= BALL_DIAMETER)
 8001c30:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <CheckForBoundaries+0xec>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b0a      	cmp	r3, #10
 8001c36:	dc0e      	bgt.n	8001c56 <CheckForBoundaries+0x8a>
	{
		score++;
 8001c38:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <CheckForBoundaries+0xf0>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	4a1f      	ldr	r2, [pc, #124]	; (8001cbc <CheckForBoundaries+0xf0>)
 8001c40:	6013      	str	r3, [r2, #0]
		BallXSpeed = 2;
 8001c42:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <CheckForBoundaries+0xf4>)
 8001c44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c48:	601a      	str	r2, [r3, #0]
		BallXPos = 120;
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <CheckForBoundaries+0xec>)
 8001c4c:	2278      	movs	r2, #120	; 0x78
 8001c4e:	601a      	str	r2, [r3, #0]
		BallYPos = 160;
 8001c50:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <CheckForBoundaries+0xf8>)
 8001c52:	22a0      	movs	r2, #160	; 0xa0
 8001c54:	601a      	str	r2, [r3, #0]
	}
	if(BallXPos >= 240 - BALL_DIAMETER)
 8001c56:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <CheckForBoundaries+0xec>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2be5      	cmp	r3, #229	; 0xe5
 8001c5c:	dd0e      	ble.n	8001c7c <CheckForBoundaries+0xb0>
	{
		score--;
 8001c5e:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <CheckForBoundaries+0xf0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	4a15      	ldr	r2, [pc, #84]	; (8001cbc <CheckForBoundaries+0xf0>)
 8001c66:	6013      	str	r3, [r2, #0]
		BallXSpeed = -2;
 8001c68:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <CheckForBoundaries+0xf4>)
 8001c6a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8001c6e:	601a      	str	r2, [r3, #0]
		BallXPos = 120;
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <CheckForBoundaries+0xec>)
 8001c72:	2278      	movs	r2, #120	; 0x78
 8001c74:	601a      	str	r2, [r3, #0]
		BallYPos = 160;
 8001c76:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <CheckForBoundaries+0xf8>)
 8001c78:	22a0      	movs	r2, #160	; 0xa0
 8001c7a:	601a      	str	r2, [r3, #0]
	}
	if(BallYPos <= BALL_DIAMETER || BallYPos >= 320 - BALL_DIAMETER)
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <CheckForBoundaries+0xf8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b0a      	cmp	r3, #10
 8001c82:	dd04      	ble.n	8001c8e <CheckForBoundaries+0xc2>
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <CheckForBoundaries+0xf8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8001c8c:	db07      	blt.n	8001c9e <CheckForBoundaries+0xd2>
	{
		BallYSpeed = -BallYSpeed;
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <CheckForBoundaries+0xfc>)
 8001c90:	edd3 7a00 	vldr	s15, [r3]
 8001c94:	eef1 7a67 	vneg.f32	s15, s15
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <CheckForBoundaries+0xfc>)
 8001c9a:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001c9e:	bf00      	nop
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	2000000c 	.word	0x2000000c
 8001cac:	2000083c 	.word	0x2000083c
 8001cb0:	20000004 	.word	0x20000004
 8001cb4:	20000838 	.word	0x20000838
 8001cb8:	20000010 	.word	0x20000010
 8001cbc:	2000084c 	.word	0x2000084c
 8001cc0:	20000018 	.word	0x20000018
 8001cc4:	20000014 	.word	0x20000014
 8001cc8:	2000001c 	.word	0x2000001c

08001ccc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ccc:	b5b0      	push	{r4, r5, r7, lr}
 8001cce:	b096      	sub	sp, #88	; 0x58
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
	char line3[MAX_LINE_LENGTH];

  /* Infinite loop */
  for(;;)
  {
	  osDelay(33);
 8001cd4:	2021      	movs	r0, #33	; 0x21
 8001cd6:	f008 f812 	bl	8009cfe <osDelay>
	  RightYSpeed += AngleX / 25.0;
 8001cda:	4b67      	ldr	r3, [pc, #412]	; (8001e78 <StartDefaultTask+0x1ac>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fc42 	bl	8000568 <__aeabi_f2d>
 8001ce4:	4604      	mov	r4, r0
 8001ce6:	460d      	mov	r5, r1
 8001ce8:	4b64      	ldr	r3, [pc, #400]	; (8001e7c <StartDefaultTask+0x1b0>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fc3b 	bl	8000568 <__aeabi_f2d>
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	4b62      	ldr	r3, [pc, #392]	; (8001e80 <StartDefaultTask+0x1b4>)
 8001cf8:	f7fe fdb8 	bl	800086c <__aeabi_ddiv>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4620      	mov	r0, r4
 8001d02:	4629      	mov	r1, r5
 8001d04:	f7fe fad2 	bl	80002ac <__adddf3>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f7fe ff7a 	bl	8000c08 <__aeabi_d2f>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4a58      	ldr	r2, [pc, #352]	; (8001e78 <StartDefaultTask+0x1ac>)
 8001d18:	6013      	str	r3, [r2, #0]

	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	4859      	ldr	r0, [pc, #356]	; (8001e84 <StartDefaultTask+0x1b8>)
 8001d1e:	f003 ff0f 	bl	8005b40 <HAL_GPIO_ReadPin>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d00b      	beq.n	8001d40 <StartDefaultTask+0x74>
	  {
		  AngleX = 0;
 8001d28:	4b54      	ldr	r3, [pc, #336]	; (8001e7c <StartDefaultTask+0x1b0>)
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
		  AngleY = 0;
 8001d30:	4b55      	ldr	r3, [pc, #340]	; (8001e88 <StartDefaultTask+0x1bc>)
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
		  AngleZ = 0;
 8001d38:	4b54      	ldr	r3, [pc, #336]	; (8001e8c <StartDefaultTask+0x1c0>)
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
	  }

	  sprintf(line0, "%d", score);
 8001d40:	4b53      	ldr	r3, [pc, #332]	; (8001e90 <StartDefaultTask+0x1c4>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d48:	4952      	ldr	r1, [pc, #328]	; (8001e94 <StartDefaultTask+0x1c8>)
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f00a fae2 	bl	800c314 <siprintf>
	  sprintf(line1, "%.5f", x_average);
 8001d50:	4b51      	ldr	r3, [pc, #324]	; (8001e98 <StartDefaultTask+0x1cc>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fc07 	bl	8000568 <__aeabi_f2d>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001d62:	494e      	ldr	r1, [pc, #312]	; (8001e9c <StartDefaultTask+0x1d0>)
 8001d64:	f00a fad6 	bl	800c314 <siprintf>
	  sprintf(line2, "%.5f", y_average);
 8001d68:	4b4d      	ldr	r3, [pc, #308]	; (8001ea0 <StartDefaultTask+0x1d4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fbfb 	bl	8000568 <__aeabi_f2d>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	f107 001c 	add.w	r0, r7, #28
 8001d7a:	4948      	ldr	r1, [pc, #288]	; (8001e9c <StartDefaultTask+0x1d0>)
 8001d7c:	f00a faca 	bl	800c314 <siprintf>
	  sprintf(line3, "%.5f", z_average);
 8001d80:	4b48      	ldr	r3, [pc, #288]	; (8001ea4 <StartDefaultTask+0x1d8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fbef 	bl	8000568 <__aeabi_f2d>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	f107 0008 	add.w	r0, r7, #8
 8001d92:	4942      	ldr	r1, [pc, #264]	; (8001e9c <StartDefaultTask+0x1d0>)
 8001d94:	f00a fabe 	bl	800c314 <siprintf>

	  RightYPos += RightYSpeed;
 8001d98:	4b43      	ldr	r3, [pc, #268]	; (8001ea8 <StartDefaultTask+0x1dc>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	ee07 3a90 	vmov	s15, r3
 8001da0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001da4:	4b34      	ldr	r3, [pc, #208]	; (8001e78 <StartDefaultTask+0x1ac>)
 8001da6:	edd3 7a00 	vldr	s15, [r3]
 8001daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001db2:	ee17 2a90 	vmov	r2, s15
 8001db6:	4b3c      	ldr	r3, [pc, #240]	; (8001ea8 <StartDefaultTask+0x1dc>)
 8001db8:	601a      	str	r2, [r3, #0]
	  LeftYPos += LeftYSpeed;
 8001dba:	4b3c      	ldr	r3, [pc, #240]	; (8001eac <StartDefaultTask+0x1e0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	ee07 3a90 	vmov	s15, r3
 8001dc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dc6:	4b3a      	ldr	r3, [pc, #232]	; (8001eb0 <StartDefaultTask+0x1e4>)
 8001dc8:	edd3 7a00 	vldr	s15, [r3]
 8001dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dd4:	ee17 2a90 	vmov	r2, s15
 8001dd8:	4b34      	ldr	r3, [pc, #208]	; (8001eac <StartDefaultTask+0x1e0>)
 8001dda:	601a      	str	r2, [r3, #0]
	  BallXPos += BallXSpeed;
 8001ddc:	4b35      	ldr	r3, [pc, #212]	; (8001eb4 <StartDefaultTask+0x1e8>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	ee07 3a90 	vmov	s15, r3
 8001de4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001de8:	4b33      	ldr	r3, [pc, #204]	; (8001eb8 <StartDefaultTask+0x1ec>)
 8001dea:	edd3 7a00 	vldr	s15, [r3]
 8001dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001df6:	ee17 2a90 	vmov	r2, s15
 8001dfa:	4b2e      	ldr	r3, [pc, #184]	; (8001eb4 <StartDefaultTask+0x1e8>)
 8001dfc:	601a      	str	r2, [r3, #0]
	  BallYPos += BallYSpeed;
 8001dfe:	4b2f      	ldr	r3, [pc, #188]	; (8001ebc <StartDefaultTask+0x1f0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	ee07 3a90 	vmov	s15, r3
 8001e06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <StartDefaultTask+0x1f4>)
 8001e0c:	edd3 7a00 	vldr	s15, [r3]
 8001e10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e18:	ee17 2a90 	vmov	r2, s15
 8001e1c:	4b27      	ldr	r3, [pc, #156]	; (8001ebc <StartDefaultTask+0x1f0>)
 8001e1e:	601a      	str	r2, [r3, #0]
	  CheckForBoundaries();
 8001e20:	f7ff fed4 	bl	8001bcc <CheckForBoundaries>

	  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001e24:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001e28:	f001 fd68 	bl	80038fc <BSP_LCD_Clear>
	  BSP_LCD_DisplayStringAtLine(0, line0);
 8001e2c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e30:	4619      	mov	r1, r3
 8001e32:	2000      	movs	r0, #0
 8001e34:	f001 fe8c 	bl	8003b50 <BSP_LCD_DisplayStringAtLine>
	  //BSP_LCD_DisplayStringAtLine(1, line1);
	  //BSP_LCD_DisplayStringAtLine(2, line2);
	  //BSP_LCD_DisplayStringAtLine(3, line3);
	  BSP_LCD_FillCircle(BallXPos, BallYPos, BALL_DIAMETER);
 8001e38:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <StartDefaultTask+0x1e8>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	4a1f      	ldr	r2, [pc, #124]	; (8001ebc <StartDefaultTask+0x1f0>)
 8001e40:	6812      	ldr	r2, [r2, #0]
 8001e42:	b291      	uxth	r1, r2
 8001e44:	220a      	movs	r2, #10
 8001e46:	4618      	mov	r0, r3
 8001e48:	f002 f81c 	bl	8003e84 <BSP_LCD_FillCircle>
	  BSP_LCD_FillRect( LeftXPos, LeftYPos, 10, 50);
 8001e4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <StartDefaultTask+0x1f8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	b298      	uxth	r0, r3
 8001e52:	4b16      	ldr	r3, [pc, #88]	; (8001eac <StartDefaultTask+0x1e0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	b299      	uxth	r1, r3
 8001e58:	2332      	movs	r3, #50	; 0x32
 8001e5a:	220a      	movs	r2, #10
 8001e5c:	f001 ffb8 	bl	8003dd0 <BSP_LCD_FillRect>
	  BSP_LCD_FillRect( RightXPos, RightYPos, 10, 50);
 8001e60:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <StartDefaultTask+0x1fc>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	b298      	uxth	r0, r3
 8001e66:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <StartDefaultTask+0x1dc>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	b299      	uxth	r1, r3
 8001e6c:	2332      	movs	r3, #50	; 0x32
 8001e6e:	220a      	movs	r2, #10
 8001e70:	f001 ffae 	bl	8003dd0 <BSP_LCD_FillRect>
	  osDelay(33);
 8001e74:	e72e      	b.n	8001cd4 <StartDefaultTask+0x8>
 8001e76:	bf00      	nop
 8001e78:	2000083c 	.word	0x2000083c
 8001e7c:	20000844 	.word	0x20000844
 8001e80:	40390000 	.word	0x40390000
 8001e84:	40020000 	.word	0x40020000
 8001e88:	20000840 	.word	0x20000840
 8001e8c:	20000848 	.word	0x20000848
 8001e90:	2000084c 	.word	0x2000084c
 8001e94:	0800fc14 	.word	0x0800fc14
 8001e98:	2000082c 	.word	0x2000082c
 8001e9c:	0800fc18 	.word	0x0800fc18
 8001ea0:	20000830 	.word	0x20000830
 8001ea4:	20000834 	.word	0x20000834
 8001ea8:	2000000c 	.word	0x2000000c
 8001eac:	20000004 	.word	0x20000004
 8001eb0:	20000838 	.word	0x20000838
 8001eb4:	20000010 	.word	0x20000010
 8001eb8:	20000018 	.word	0x20000018
 8001ebc:	20000014 	.word	0x20000014
 8001ec0:	2000001c 	.word	0x2000001c
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	20000008 	.word	0x20000008

08001ecc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a04      	ldr	r2, [pc, #16]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d101      	bne.n	8001ee2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ede:	f002 fc49 	bl	8004774 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40001000 	.word	0x40001000

08001ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef4:	b672      	cpsid	i
}
 8001ef6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <Error_Handler+0x8>
	...

08001efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	607b      	str	r3, [r7, #4]
 8001f06:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <HAL_MspInit+0x54>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	4a11      	ldr	r2, [pc, #68]	; (8001f50 <HAL_MspInit+0x54>)
 8001f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f10:	6453      	str	r3, [r2, #68]	; 0x44
 8001f12:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <HAL_MspInit+0x54>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	603b      	str	r3, [r7, #0]
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <HAL_MspInit+0x54>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	4a0a      	ldr	r2, [pc, #40]	; (8001f50 <HAL_MspInit+0x54>)
 8001f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2e:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <HAL_MspInit+0x54>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	210f      	movs	r1, #15
 8001f3e:	f06f 0001 	mvn.w	r0, #1
 8001f42:	f002 fd13 	bl	800496c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800

08001f54 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a0b      	ldr	r2, [pc, #44]	; (8001f90 <HAL_CRC_MspInit+0x3c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d10d      	bne.n	8001f82 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <HAL_CRC_MspInit+0x40>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	4a09      	ldr	r2, [pc, #36]	; (8001f94 <HAL_CRC_MspInit+0x40>)
 8001f70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f74:	6313      	str	r3, [r2, #48]	; 0x30
 8001f76:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <HAL_CRC_MspInit+0x40>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001f82:	bf00      	nop
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40023000 	.word	0x40023000
 8001f94:	40023800 	.word	0x40023800

08001f98 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0e      	ldr	r2, [pc, #56]	; (8001fe0 <HAL_DMA2D_MspInit+0x48>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d115      	bne.n	8001fd6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <HAL_DMA2D_MspInit+0x4c>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	4a0c      	ldr	r2, [pc, #48]	; (8001fe4 <HAL_DMA2D_MspInit+0x4c>)
 8001fb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fba:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <HAL_DMA2D_MspInit+0x4c>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2105      	movs	r1, #5
 8001fca:	205a      	movs	r0, #90	; 0x5a
 8001fcc:	f002 fcce 	bl	800496c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001fd0:	205a      	movs	r0, #90	; 0x5a
 8001fd2:	f002 fce7 	bl	80049a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001fd6:	bf00      	nop
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	4002b000 	.word	0x4002b000
 8001fe4:	40023800 	.word	0x40023800

08001fe8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	; 0x28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a29      	ldr	r2, [pc, #164]	; (80020ac <HAL_I2C_MspInit+0xc4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d14b      	bne.n	80020a2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	4b28      	ldr	r3, [pc, #160]	; (80020b0 <HAL_I2C_MspInit+0xc8>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a27      	ldr	r2, [pc, #156]	; (80020b0 <HAL_I2C_MspInit+0xc8>)
 8002014:	f043 0304 	orr.w	r3, r3, #4
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b25      	ldr	r3, [pc, #148]	; (80020b0 <HAL_I2C_MspInit+0xc8>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	4b21      	ldr	r3, [pc, #132]	; (80020b0 <HAL_I2C_MspInit+0xc8>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	4a20      	ldr	r2, [pc, #128]	; (80020b0 <HAL_I2C_MspInit+0xc8>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	6313      	str	r3, [r2, #48]	; 0x30
 8002036:	4b1e      	ldr	r3, [pc, #120]	; (80020b0 <HAL_I2C_MspInit+0xc8>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002042:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002048:	2312      	movs	r3, #18
 800204a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800204c:	2301      	movs	r3, #1
 800204e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002050:	2300      	movs	r3, #0
 8002052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002054:	2304      	movs	r3, #4
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	4619      	mov	r1, r3
 800205e:	4815      	ldr	r0, [pc, #84]	; (80020b4 <HAL_I2C_MspInit+0xcc>)
 8002060:	f003 fab6 	bl	80055d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002064:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800206a:	2312      	movs	r3, #18
 800206c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800206e:	2301      	movs	r3, #1
 8002070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002072:	2300      	movs	r3, #0
 8002074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002076:	2304      	movs	r3, #4
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800207a:	f107 0314 	add.w	r3, r7, #20
 800207e:	4619      	mov	r1, r3
 8002080:	480d      	ldr	r0, [pc, #52]	; (80020b8 <HAL_I2C_MspInit+0xd0>)
 8002082:	f003 faa5 	bl	80055d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <HAL_I2C_MspInit+0xc8>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	4a08      	ldr	r2, [pc, #32]	; (80020b0 <HAL_I2C_MspInit+0xc8>)
 8002090:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002094:	6413      	str	r3, [r2, #64]	; 0x40
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_I2C_MspInit+0xc8>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80020a2:	bf00      	nop
 80020a4:	3728      	adds	r7, #40	; 0x28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40005c00 	.word	0x40005c00
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40020800 	.word	0x40020800
 80020b8:	40020000 	.word	0x40020000

080020bc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b09a      	sub	sp, #104	; 0x68
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d8:	2230      	movs	r2, #48	; 0x30
 80020da:	2100      	movs	r1, #0
 80020dc:	4618      	mov	r0, r3
 80020de:	f009 f982 	bl	800b3e6 <memset>
  if(hltdc->Instance==LTDC)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a85      	ldr	r2, [pc, #532]	; (80022fc <HAL_LTDC_MspInit+0x240>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	f040 8103 	bne.w	80022f4 <HAL_LTDC_MspInit+0x238>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80020ee:	2308      	movs	r3, #8
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80020f2:	23c0      	movs	r3, #192	; 0xc0
 80020f4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80020f6:	2304      	movs	r3, #4
 80020f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 80020fa:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80020fe:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002104:	4618      	mov	r0, r3
 8002106:	f004 ffaf 	bl	8007068 <HAL_RCCEx_PeriphCLKConfig>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002110:	f7ff feee 	bl	8001ef0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002114:	2300      	movs	r3, #0
 8002116:	623b      	str	r3, [r7, #32]
 8002118:	4b79      	ldr	r3, [pc, #484]	; (8002300 <HAL_LTDC_MspInit+0x244>)
 800211a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211c:	4a78      	ldr	r2, [pc, #480]	; (8002300 <HAL_LTDC_MspInit+0x244>)
 800211e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002122:	6453      	str	r3, [r2, #68]	; 0x44
 8002124:	4b76      	ldr	r3, [pc, #472]	; (8002300 <HAL_LTDC_MspInit+0x244>)
 8002126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002128:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800212c:	623b      	str	r3, [r7, #32]
 800212e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002130:	2300      	movs	r3, #0
 8002132:	61fb      	str	r3, [r7, #28]
 8002134:	4b72      	ldr	r3, [pc, #456]	; (8002300 <HAL_LTDC_MspInit+0x244>)
 8002136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002138:	4a71      	ldr	r2, [pc, #452]	; (8002300 <HAL_LTDC_MspInit+0x244>)
 800213a:	f043 0320 	orr.w	r3, r3, #32
 800213e:	6313      	str	r3, [r2, #48]	; 0x30
 8002140:	4b6f      	ldr	r3, [pc, #444]	; (8002300 <HAL_LTDC_MspInit+0x244>)
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	f003 0320 	and.w	r3, r3, #32
 8002148:	61fb      	str	r3, [r7, #28]
 800214a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214c:	2300      	movs	r3, #0
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	4b6b      	ldr	r3, [pc, #428]	; (8002300 <HAL_LTDC_MspInit+0x244>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	4a6a      	ldr	r2, [pc, #424]	; (8002300 <HAL_LTDC_MspInit+0x244>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	6313      	str	r3, [r2, #48]	; 0x30
 800215c:	4b68      	ldr	r3, [pc, #416]	; (8002300 <HAL_LTDC_MspInit+0x244>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	61bb      	str	r3, [r7, #24]
 8002166:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	4b64      	ldr	r3, [pc, #400]	; (8002300 <HAL_LTDC_MspInit+0x244>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	4a63      	ldr	r2, [pc, #396]	; (8002300 <HAL_LTDC_MspInit+0x244>)
 8002172:	f043 0302 	orr.w	r3, r3, #2
 8002176:	6313      	str	r3, [r2, #48]	; 0x30
 8002178:	4b61      	ldr	r3, [pc, #388]	; (8002300 <HAL_LTDC_MspInit+0x244>)
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002184:	2300      	movs	r3, #0
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	4b5d      	ldr	r3, [pc, #372]	; (8002300 <HAL_LTDC_MspInit+0x244>)
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	4a5c      	ldr	r2, [pc, #368]	; (8002300 <HAL_LTDC_MspInit+0x244>)
 800218e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002192:	6313      	str	r3, [r2, #48]	; 0x30
 8002194:	4b5a      	ldr	r3, [pc, #360]	; (8002300 <HAL_LTDC_MspInit+0x244>)
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	4b56      	ldr	r3, [pc, #344]	; (8002300 <HAL_LTDC_MspInit+0x244>)
 80021a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a8:	4a55      	ldr	r2, [pc, #340]	; (8002300 <HAL_LTDC_MspInit+0x244>)
 80021aa:	f043 0304 	orr.w	r3, r3, #4
 80021ae:	6313      	str	r3, [r2, #48]	; 0x30
 80021b0:	4b53      	ldr	r3, [pc, #332]	; (8002300 <HAL_LTDC_MspInit+0x244>)
 80021b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021bc:	2300      	movs	r3, #0
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	4b4f      	ldr	r3, [pc, #316]	; (8002300 <HAL_LTDC_MspInit+0x244>)
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	4a4e      	ldr	r2, [pc, #312]	; (8002300 <HAL_LTDC_MspInit+0x244>)
 80021c6:	f043 0308 	orr.w	r3, r3, #8
 80021ca:	6313      	str	r3, [r2, #48]	; 0x30
 80021cc:	4b4c      	ldr	r3, [pc, #304]	; (8002300 <HAL_LTDC_MspInit+0x244>)
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80021d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021dc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021de:	2302      	movs	r3, #2
 80021e0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e6:	2300      	movs	r3, #0
 80021e8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021ea:	230e      	movs	r3, #14
 80021ec:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80021ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021f2:	4619      	mov	r1, r3
 80021f4:	4843      	ldr	r0, [pc, #268]	; (8002304 <HAL_LTDC_MspInit+0x248>)
 80021f6:	f003 f9eb 	bl	80055d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80021fa:	f641 0358 	movw	r3, #6232	; 0x1858
 80021fe:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800220c:	230e      	movs	r3, #14
 800220e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002210:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002214:	4619      	mov	r1, r3
 8002216:	483c      	ldr	r0, [pc, #240]	; (8002308 <HAL_LTDC_MspInit+0x24c>)
 8002218:	f003 f9da 	bl	80055d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800221c:	2303      	movs	r3, #3
 800221e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002220:	2302      	movs	r3, #2
 8002222:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002228:	2300      	movs	r3, #0
 800222a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800222c:	2309      	movs	r3, #9
 800222e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002230:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002234:	4619      	mov	r1, r3
 8002236:	4835      	ldr	r0, [pc, #212]	; (800230c <HAL_LTDC_MspInit+0x250>)
 8002238:	f003 f9ca 	bl	80055d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800223c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002240:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002242:	2302      	movs	r3, #2
 8002244:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224a:	2300      	movs	r3, #0
 800224c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800224e:	230e      	movs	r3, #14
 8002250:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002252:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002256:	4619      	mov	r1, r3
 8002258:	482c      	ldr	r0, [pc, #176]	; (800230c <HAL_LTDC_MspInit+0x250>)
 800225a:	f003 f9b9 	bl	80055d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800225e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002262:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226c:	2300      	movs	r3, #0
 800226e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002270:	230e      	movs	r3, #14
 8002272:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002274:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002278:	4619      	mov	r1, r3
 800227a:	4825      	ldr	r0, [pc, #148]	; (8002310 <HAL_LTDC_MspInit+0x254>)
 800227c:	f003 f9a8 	bl	80055d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002280:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002284:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002286:	2302      	movs	r3, #2
 8002288:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228e:	2300      	movs	r3, #0
 8002290:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002292:	230e      	movs	r3, #14
 8002294:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002296:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800229a:	4619      	mov	r1, r3
 800229c:	481d      	ldr	r0, [pc, #116]	; (8002314 <HAL_LTDC_MspInit+0x258>)
 800229e:	f003 f997 	bl	80055d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80022a2:	2348      	movs	r3, #72	; 0x48
 80022a4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a6:	2302      	movs	r3, #2
 80022a8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ae:	2300      	movs	r3, #0
 80022b0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022b2:	230e      	movs	r3, #14
 80022b4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022ba:	4619      	mov	r1, r3
 80022bc:	4816      	ldr	r0, [pc, #88]	; (8002318 <HAL_LTDC_MspInit+0x25c>)
 80022be:	f003 f987 	bl	80055d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80022c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022c6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c8:	2302      	movs	r3, #2
 80022ca:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d0:	2300      	movs	r3, #0
 80022d2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80022d4:	2309      	movs	r3, #9
 80022d6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022dc:	4619      	mov	r1, r3
 80022de:	480c      	ldr	r0, [pc, #48]	; (8002310 <HAL_LTDC_MspInit+0x254>)
 80022e0:	f003 f976 	bl	80055d0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80022e4:	2200      	movs	r2, #0
 80022e6:	2105      	movs	r1, #5
 80022e8:	2058      	movs	r0, #88	; 0x58
 80022ea:	f002 fb3f 	bl	800496c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80022ee:	2058      	movs	r0, #88	; 0x58
 80022f0:	f002 fb58 	bl	80049a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80022f4:	bf00      	nop
 80022f6:	3768      	adds	r7, #104	; 0x68
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40016800 	.word	0x40016800
 8002300:	40023800 	.word	0x40023800
 8002304:	40021400 	.word	0x40021400
 8002308:	40020000 	.word	0x40020000
 800230c:	40020400 	.word	0x40020400
 8002310:	40021800 	.word	0x40021800
 8002314:	40020800 	.word	0x40020800
 8002318:	40020c00 	.word	0x40020c00

0800231c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	; 0x28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a19      	ldr	r2, [pc, #100]	; (80023a0 <HAL_SPI_MspInit+0x84>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d12c      	bne.n	8002398 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <HAL_SPI_MspInit+0x88>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	4a17      	ldr	r2, [pc, #92]	; (80023a4 <HAL_SPI_MspInit+0x88>)
 8002348:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800234c:	6453      	str	r3, [r2, #68]	; 0x44
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <HAL_SPI_MspInit+0x88>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <HAL_SPI_MspInit+0x88>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	4a10      	ldr	r2, [pc, #64]	; (80023a4 <HAL_SPI_MspInit+0x88>)
 8002364:	f043 0320 	orr.w	r3, r3, #32
 8002368:	6313      	str	r3, [r2, #48]	; 0x30
 800236a:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <HAL_SPI_MspInit+0x88>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	f003 0320 	and.w	r3, r3, #32
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002376:	f44f 7360 	mov.w	r3, #896	; 0x380
 800237a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237c:	2302      	movs	r3, #2
 800237e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002384:	2300      	movs	r3, #0
 8002386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002388:	2305      	movs	r3, #5
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	4619      	mov	r1, r3
 8002392:	4805      	ldr	r0, [pc, #20]	; (80023a8 <HAL_SPI_MspInit+0x8c>)
 8002394:	f003 f91c 	bl	80055d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002398:	bf00      	nop
 800239a:	3728      	adds	r7, #40	; 0x28
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40015000 	.word	0x40015000
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40021400 	.word	0x40021400

080023ac <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a08      	ldr	r2, [pc, #32]	; (80023dc <HAL_SPI_MspDeInit+0x30>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d10a      	bne.n	80023d4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80023be:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <HAL_SPI_MspDeInit+0x34>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	4a07      	ldr	r2, [pc, #28]	; (80023e0 <HAL_SPI_MspDeInit+0x34>)
 80023c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80023c8:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80023ca:	f44f 7160 	mov.w	r1, #896	; 0x380
 80023ce:	4805      	ldr	r0, [pc, #20]	; (80023e4 <HAL_SPI_MspDeInit+0x38>)
 80023d0:	f003 faaa 	bl	8005928 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80023d4:	bf00      	nop
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40015000 	.word	0x40015000
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40021400 	.word	0x40021400

080023e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a0b      	ldr	r2, [pc, #44]	; (8002424 <HAL_TIM_Base_MspInit+0x3c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d10d      	bne.n	8002416 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <HAL_TIM_Base_MspInit+0x40>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	4a09      	ldr	r2, [pc, #36]	; (8002428 <HAL_TIM_Base_MspInit+0x40>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6453      	str	r3, [r2, #68]	; 0x44
 800240a:	4b07      	ldr	r3, [pc, #28]	; (8002428 <HAL_TIM_Base_MspInit+0x40>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002416:	bf00      	nop
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40010000 	.word	0x40010000
 8002428:	40023800 	.word	0x40023800

0800242c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08a      	sub	sp, #40	; 0x28
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002434:	f107 0314 	add.w	r3, r7, #20
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a1d      	ldr	r2, [pc, #116]	; (80024c0 <HAL_UART_MspInit+0x94>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d134      	bne.n	80024b8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	613b      	str	r3, [r7, #16]
 8002452:	4b1c      	ldr	r3, [pc, #112]	; (80024c4 <HAL_UART_MspInit+0x98>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	4a1b      	ldr	r2, [pc, #108]	; (80024c4 <HAL_UART_MspInit+0x98>)
 8002458:	f043 0310 	orr.w	r3, r3, #16
 800245c:	6453      	str	r3, [r2, #68]	; 0x44
 800245e:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <HAL_UART_MspInit+0x98>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	f003 0310 	and.w	r3, r3, #16
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <HAL_UART_MspInit+0x98>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	4a14      	ldr	r2, [pc, #80]	; (80024c4 <HAL_UART_MspInit+0x98>)
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	6313      	str	r3, [r2, #48]	; 0x30
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_UART_MspInit+0x98>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002486:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800248a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248c:	2302      	movs	r3, #2
 800248e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002494:	2303      	movs	r3, #3
 8002496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002498:	2307      	movs	r3, #7
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249c:	f107 0314 	add.w	r3, r7, #20
 80024a0:	4619      	mov	r1, r3
 80024a2:	4809      	ldr	r0, [pc, #36]	; (80024c8 <HAL_UART_MspInit+0x9c>)
 80024a4:	f003 f894 	bl	80055d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80024a8:	2200      	movs	r2, #0
 80024aa:	2105      	movs	r1, #5
 80024ac:	2025      	movs	r0, #37	; 0x25
 80024ae:	f002 fa5d 	bl	800496c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024b2:	2025      	movs	r0, #37	; 0x25
 80024b4:	f002 fa76 	bl	80049a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80024b8:	bf00      	nop
 80024ba:	3728      	adds	r7, #40	; 0x28
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40011000 	.word	0x40011000
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40020000 	.word	0x40020000

080024cc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80024d2:	1d3b      	adds	r3, r7, #4
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80024e0:	4b3b      	ldr	r3, [pc, #236]	; (80025d0 <HAL_FMC_MspInit+0x104>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d16f      	bne.n	80025c8 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80024e8:	4b39      	ldr	r3, [pc, #228]	; (80025d0 <HAL_FMC_MspInit+0x104>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	603b      	str	r3, [r7, #0]
 80024f2:	4b38      	ldr	r3, [pc, #224]	; (80025d4 <HAL_FMC_MspInit+0x108>)
 80024f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f6:	4a37      	ldr	r2, [pc, #220]	; (80025d4 <HAL_FMC_MspInit+0x108>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	6393      	str	r3, [r2, #56]	; 0x38
 80024fe:	4b35      	ldr	r3, [pc, #212]	; (80025d4 <HAL_FMC_MspInit+0x108>)
 8002500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800250a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800250e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002510:	2302      	movs	r3, #2
 8002512:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002518:	2303      	movs	r3, #3
 800251a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800251c:	230c      	movs	r3, #12
 800251e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002520:	1d3b      	adds	r3, r7, #4
 8002522:	4619      	mov	r1, r3
 8002524:	482c      	ldr	r0, [pc, #176]	; (80025d8 <HAL_FMC_MspInit+0x10c>)
 8002526:	f003 f853 	bl	80055d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800252a:	2301      	movs	r3, #1
 800252c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252e:	2302      	movs	r3, #2
 8002530:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002536:	2303      	movs	r3, #3
 8002538:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800253a:	230c      	movs	r3, #12
 800253c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800253e:	1d3b      	adds	r3, r7, #4
 8002540:	4619      	mov	r1, r3
 8002542:	4826      	ldr	r0, [pc, #152]	; (80025dc <HAL_FMC_MspInit+0x110>)
 8002544:	f003 f844 	bl	80055d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002548:	f248 1333 	movw	r3, #33075	; 0x8133
 800254c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254e:	2302      	movs	r3, #2
 8002550:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002556:	2303      	movs	r3, #3
 8002558:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800255a:	230c      	movs	r3, #12
 800255c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	4619      	mov	r1, r3
 8002562:	481f      	ldr	r0, [pc, #124]	; (80025e0 <HAL_FMC_MspInit+0x114>)
 8002564:	f003 f834 	bl	80055d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002568:	f64f 7383 	movw	r3, #65411	; 0xff83
 800256c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256e:	2302      	movs	r3, #2
 8002570:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002576:	2303      	movs	r3, #3
 8002578:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800257a:	230c      	movs	r3, #12
 800257c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800257e:	1d3b      	adds	r3, r7, #4
 8002580:	4619      	mov	r1, r3
 8002582:	4818      	ldr	r0, [pc, #96]	; (80025e4 <HAL_FMC_MspInit+0x118>)
 8002584:	f003 f824 	bl	80055d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002588:	f24c 7303 	movw	r3, #50947	; 0xc703
 800258c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002596:	2303      	movs	r3, #3
 8002598:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800259a:	230c      	movs	r3, #12
 800259c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800259e:	1d3b      	adds	r3, r7, #4
 80025a0:	4619      	mov	r1, r3
 80025a2:	4811      	ldr	r0, [pc, #68]	; (80025e8 <HAL_FMC_MspInit+0x11c>)
 80025a4:	f003 f814 	bl	80055d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80025a8:	2360      	movs	r3, #96	; 0x60
 80025aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ac:	2302      	movs	r3, #2
 80025ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b4:	2303      	movs	r3, #3
 80025b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025b8:	230c      	movs	r3, #12
 80025ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	4619      	mov	r1, r3
 80025c0:	480a      	ldr	r0, [pc, #40]	; (80025ec <HAL_FMC_MspInit+0x120>)
 80025c2:	f003 f805 	bl	80055d0 <HAL_GPIO_Init>
 80025c6:	e000      	b.n	80025ca <HAL_FMC_MspInit+0xfe>
    return;
 80025c8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20000854 	.word	0x20000854
 80025d4:	40023800 	.word	0x40023800
 80025d8:	40021400 	.word	0x40021400
 80025dc:	40020800 	.word	0x40020800
 80025e0:	40021800 	.word	0x40021800
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40020c00 	.word	0x40020c00
 80025ec:	40020400 	.word	0x40020400

080025f0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80025f8:	f7ff ff68 	bl	80024cc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b08c      	sub	sp, #48	; 0x30
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002610:	2300      	movs	r3, #0
 8002612:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002614:	2200      	movs	r2, #0
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	2036      	movs	r0, #54	; 0x36
 800261a:	f002 f9a7 	bl	800496c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800261e:	2036      	movs	r0, #54	; 0x36
 8002620:	f002 f9c0 	bl	80049a4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	4b1f      	ldr	r3, [pc, #124]	; (80026a8 <HAL_InitTick+0xa4>)
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	4a1e      	ldr	r2, [pc, #120]	; (80026a8 <HAL_InitTick+0xa4>)
 800262e:	f043 0310 	orr.w	r3, r3, #16
 8002632:	6413      	str	r3, [r2, #64]	; 0x40
 8002634:	4b1c      	ldr	r3, [pc, #112]	; (80026a8 <HAL_InitTick+0xa4>)
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	f003 0310 	and.w	r3, r3, #16
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002640:	f107 0210 	add.w	r2, r7, #16
 8002644:	f107 0314 	add.w	r3, r7, #20
 8002648:	4611      	mov	r1, r2
 800264a:	4618      	mov	r0, r3
 800264c:	f004 fcda 	bl	8007004 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002650:	f004 fcb0 	bl	8006fb4 <HAL_RCC_GetPCLK1Freq>
 8002654:	4603      	mov	r3, r0
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800265a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265c:	4a13      	ldr	r2, [pc, #76]	; (80026ac <HAL_InitTick+0xa8>)
 800265e:	fba2 2303 	umull	r2, r3, r2, r3
 8002662:	0c9b      	lsrs	r3, r3, #18
 8002664:	3b01      	subs	r3, #1
 8002666:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002668:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <HAL_InitTick+0xac>)
 800266a:	4a12      	ldr	r2, [pc, #72]	; (80026b4 <HAL_InitTick+0xb0>)
 800266c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800266e:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <HAL_InitTick+0xac>)
 8002670:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002674:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002676:	4a0e      	ldr	r2, [pc, #56]	; (80026b0 <HAL_InitTick+0xac>)
 8002678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800267c:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <HAL_InitTick+0xac>)
 800267e:	2200      	movs	r2, #0
 8002680:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002682:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_InitTick+0xac>)
 8002684:	2200      	movs	r2, #0
 8002686:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002688:	4809      	ldr	r0, [pc, #36]	; (80026b0 <HAL_InitTick+0xac>)
 800268a:	f005 fd1d 	bl	80080c8 <HAL_TIM_Base_Init>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d104      	bne.n	800269e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002694:	4806      	ldr	r0, [pc, #24]	; (80026b0 <HAL_InitTick+0xac>)
 8002696:	f005 fd67 	bl	8008168 <HAL_TIM_Base_Start_IT>
 800269a:	4603      	mov	r3, r0
 800269c:	e000      	b.n	80026a0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3730      	adds	r7, #48	; 0x30
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40023800 	.word	0x40023800
 80026ac:	431bde83 	.word	0x431bde83
 80026b0:	20000858 	.word	0x20000858
 80026b4:	40001000 	.word	0x40001000

080026b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026bc:	e7fe      	b.n	80026bc <NMI_Handler+0x4>

080026be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026be:	b480      	push	{r7}
 80026c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026c2:	e7fe      	b.n	80026c2 <HardFault_Handler+0x4>

080026c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026c8:	e7fe      	b.n	80026c8 <MemManage_Handler+0x4>

080026ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026ca:	b480      	push	{r7}
 80026cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ce:	e7fe      	b.n	80026ce <BusFault_Handler+0x4>

080026d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026d4:	e7fe      	b.n	80026d4 <UsageFault_Handler+0x4>

080026d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026e8:	4802      	ldr	r0, [pc, #8]	; (80026f4 <USART1_IRQHandler+0x10>)
 80026ea:	f006 fa4f 	bl	8008b8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000734 	.word	0x20000734

080026f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80026fc:	4802      	ldr	r0, [pc, #8]	; (8002708 <TIM6_DAC_IRQHandler+0x10>)
 80026fe:	f005 fda3 	bl	8008248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20000858 	.word	0x20000858

0800270c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002710:	4802      	ldr	r0, [pc, #8]	; (800271c <LTDC_IRQHandler+0x10>)
 8002712:	f003 fcd7 	bl	80060c4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	200005ec 	.word	0x200005ec

08002720 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002724:	4802      	ldr	r0, [pc, #8]	; (8002730 <DMA2D_IRQHandler+0x10>)
 8002726:	f002 fd14 	bl	8005152 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20000558 	.word	0x20000558

08002734 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
	return 1;
 8002738:	2301      	movs	r3, #1
}
 800273a:	4618      	mov	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <_kill>:

int _kill(int pid, int sig)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800274e:	f008 fd19 	bl	800b184 <__errno>
 8002752:	4603      	mov	r3, r0
 8002754:	2216      	movs	r2, #22
 8002756:	601a      	str	r2, [r3, #0]
	return -1;
 8002758:	f04f 33ff 	mov.w	r3, #4294967295
}
 800275c:	4618      	mov	r0, r3
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <_exit>:

void _exit (int status)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800276c:	f04f 31ff 	mov.w	r1, #4294967295
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7ff ffe7 	bl	8002744 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002776:	e7fe      	b.n	8002776 <_exit+0x12>

08002778 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	e00a      	b.n	80027a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800278a:	f3af 8000 	nop.w
 800278e:	4601      	mov	r1, r0
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	60ba      	str	r2, [r7, #8]
 8002796:	b2ca      	uxtb	r2, r1
 8002798:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	3301      	adds	r3, #1
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	dbf0      	blt.n	800278a <_read+0x12>
	}

return len;
 80027a8:	687b      	ldr	r3, [r7, #4]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
	return -1;
 80027ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027be:	4618      	mov	r0, r3
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027da:	605a      	str	r2, [r3, #4]
	return 0;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <_isatty>:

int _isatty(int file)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
	return 1;
 80027f2:	2301      	movs	r3, #1
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
	return 0;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002824:	4a14      	ldr	r2, [pc, #80]	; (8002878 <_sbrk+0x5c>)
 8002826:	4b15      	ldr	r3, [pc, #84]	; (800287c <_sbrk+0x60>)
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002830:	4b13      	ldr	r3, [pc, #76]	; (8002880 <_sbrk+0x64>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d102      	bne.n	800283e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002838:	4b11      	ldr	r3, [pc, #68]	; (8002880 <_sbrk+0x64>)
 800283a:	4a12      	ldr	r2, [pc, #72]	; (8002884 <_sbrk+0x68>)
 800283c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800283e:	4b10      	ldr	r3, [pc, #64]	; (8002880 <_sbrk+0x64>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4413      	add	r3, r2
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	429a      	cmp	r2, r3
 800284a:	d207      	bcs.n	800285c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800284c:	f008 fc9a 	bl	800b184 <__errno>
 8002850:	4603      	mov	r3, r0
 8002852:	220c      	movs	r2, #12
 8002854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002856:	f04f 33ff 	mov.w	r3, #4294967295
 800285a:	e009      	b.n	8002870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800285c:	4b08      	ldr	r3, [pc, #32]	; (8002880 <_sbrk+0x64>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002862:	4b07      	ldr	r3, [pc, #28]	; (8002880 <_sbrk+0x64>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	4a05      	ldr	r2, [pc, #20]	; (8002880 <_sbrk+0x64>)
 800286c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800286e:	68fb      	ldr	r3, [r7, #12]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20030000 	.word	0x20030000
 800287c:	00000400 	.word	0x00000400
 8002880:	200008a0 	.word	0x200008a0
 8002884:	20008c68 	.word	0x20008c68

08002888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800288c:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <SystemInit+0x20>)
 800288e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002892:	4a05      	ldr	r2, [pc, #20]	; (80028a8 <SystemInit+0x20>)
 8002894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	e000ed00 	.word	0xe000ed00

080028ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80028ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028e4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028b0:	480d      	ldr	r0, [pc, #52]	; (80028e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028b2:	490e      	ldr	r1, [pc, #56]	; (80028ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028b4:	4a0e      	ldr	r2, [pc, #56]	; (80028f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028b8:	e002      	b.n	80028c0 <LoopCopyDataInit>

080028ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028be:	3304      	adds	r3, #4

080028c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028c4:	d3f9      	bcc.n	80028ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028c6:	4a0b      	ldr	r2, [pc, #44]	; (80028f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028c8:	4c0b      	ldr	r4, [pc, #44]	; (80028f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80028ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028cc:	e001      	b.n	80028d2 <LoopFillZerobss>

080028ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028d0:	3204      	adds	r2, #4

080028d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028d4:	d3fb      	bcc.n	80028ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028d6:	f7ff ffd7 	bl	8002888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028da:	f008 fd4f 	bl	800b37c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028de:	f7fe fbcf 	bl	8001080 <main>
  bx  lr    
 80028e2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80028e4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80028e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028ec:	2000027c 	.word	0x2000027c
  ldr r2, =_sidata
 80028f0:	08011bb4 	.word	0x08011bb4
  ldr r2, =_sbss
 80028f4:	2000027c 	.word	0x2000027c
  ldr r4, =_ebss
 80028f8:	20008c64 	.word	0x20008c64

080028fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028fc:	e7fe      	b.n	80028fc <ADC_IRQHandler>

080028fe <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002902:	f000 fc73 	bl	80031ec <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8002906:	20ca      	movs	r0, #202	; 0xca
 8002908:	f000 f95d 	bl	8002bc6 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 800290c:	20c3      	movs	r0, #195	; 0xc3
 800290e:	f000 f967 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8002912:	2008      	movs	r0, #8
 8002914:	f000 f964 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002918:	2050      	movs	r0, #80	; 0x50
 800291a:	f000 f961 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800291e:	20cf      	movs	r0, #207	; 0xcf
 8002920:	f000 f951 	bl	8002bc6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002924:	2000      	movs	r0, #0
 8002926:	f000 f95b 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800292a:	20c1      	movs	r0, #193	; 0xc1
 800292c:	f000 f958 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002930:	2030      	movs	r0, #48	; 0x30
 8002932:	f000 f955 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8002936:	20ed      	movs	r0, #237	; 0xed
 8002938:	f000 f945 	bl	8002bc6 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 800293c:	2064      	movs	r0, #100	; 0x64
 800293e:	f000 f94f 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8002942:	2003      	movs	r0, #3
 8002944:	f000 f94c 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002948:	2012      	movs	r0, #18
 800294a:	f000 f949 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800294e:	2081      	movs	r0, #129	; 0x81
 8002950:	f000 f946 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8002954:	20e8      	movs	r0, #232	; 0xe8
 8002956:	f000 f936 	bl	8002bc6 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 800295a:	2085      	movs	r0, #133	; 0x85
 800295c:	f000 f940 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002960:	2000      	movs	r0, #0
 8002962:	f000 f93d 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002966:	2078      	movs	r0, #120	; 0x78
 8002968:	f000 f93a 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 800296c:	20cb      	movs	r0, #203	; 0xcb
 800296e:	f000 f92a 	bl	8002bc6 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002972:	2039      	movs	r0, #57	; 0x39
 8002974:	f000 f934 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002978:	202c      	movs	r0, #44	; 0x2c
 800297a:	f000 f931 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800297e:	2000      	movs	r0, #0
 8002980:	f000 f92e 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002984:	2034      	movs	r0, #52	; 0x34
 8002986:	f000 f92b 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800298a:	2002      	movs	r0, #2
 800298c:	f000 f928 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002990:	20f7      	movs	r0, #247	; 0xf7
 8002992:	f000 f918 	bl	8002bc6 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8002996:	2020      	movs	r0, #32
 8002998:	f000 f922 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 800299c:	20ea      	movs	r0, #234	; 0xea
 800299e:	f000 f912 	bl	8002bc6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80029a2:	2000      	movs	r0, #0
 80029a4:	f000 f91c 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80029a8:	2000      	movs	r0, #0
 80029aa:	f000 f919 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80029ae:	20b1      	movs	r0, #177	; 0xb1
 80029b0:	f000 f909 	bl	8002bc6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80029b4:	2000      	movs	r0, #0
 80029b6:	f000 f913 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80029ba:	201b      	movs	r0, #27
 80029bc:	f000 f910 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80029c0:	20b6      	movs	r0, #182	; 0xb6
 80029c2:	f000 f900 	bl	8002bc6 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80029c6:	200a      	movs	r0, #10
 80029c8:	f000 f90a 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80029cc:	20a2      	movs	r0, #162	; 0xa2
 80029ce:	f000 f907 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80029d2:	20c0      	movs	r0, #192	; 0xc0
 80029d4:	f000 f8f7 	bl	8002bc6 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80029d8:	2010      	movs	r0, #16
 80029da:	f000 f901 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80029de:	20c1      	movs	r0, #193	; 0xc1
 80029e0:	f000 f8f1 	bl	8002bc6 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80029e4:	2010      	movs	r0, #16
 80029e6:	f000 f8fb 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80029ea:	20c5      	movs	r0, #197	; 0xc5
 80029ec:	f000 f8eb 	bl	8002bc6 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80029f0:	2045      	movs	r0, #69	; 0x45
 80029f2:	f000 f8f5 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80029f6:	2015      	movs	r0, #21
 80029f8:	f000 f8f2 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80029fc:	20c7      	movs	r0, #199	; 0xc7
 80029fe:	f000 f8e2 	bl	8002bc6 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002a02:	2090      	movs	r0, #144	; 0x90
 8002a04:	f000 f8ec 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002a08:	2036      	movs	r0, #54	; 0x36
 8002a0a:	f000 f8dc 	bl	8002bc6 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002a0e:	20c8      	movs	r0, #200	; 0xc8
 8002a10:	f000 f8e6 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002a14:	20f2      	movs	r0, #242	; 0xf2
 8002a16:	f000 f8d6 	bl	8002bc6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	f000 f8e0 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002a20:	20b0      	movs	r0, #176	; 0xb0
 8002a22:	f000 f8d0 	bl	8002bc6 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8002a26:	20c2      	movs	r0, #194	; 0xc2
 8002a28:	f000 f8da 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002a2c:	20b6      	movs	r0, #182	; 0xb6
 8002a2e:	f000 f8ca 	bl	8002bc6 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002a32:	200a      	movs	r0, #10
 8002a34:	f000 f8d4 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002a38:	20a7      	movs	r0, #167	; 0xa7
 8002a3a:	f000 f8d1 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002a3e:	2027      	movs	r0, #39	; 0x27
 8002a40:	f000 f8ce 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002a44:	2004      	movs	r0, #4
 8002a46:	f000 f8cb 	bl	8002be0 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002a4a:	202a      	movs	r0, #42	; 0x2a
 8002a4c:	f000 f8bb 	bl	8002bc6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002a50:	2000      	movs	r0, #0
 8002a52:	f000 f8c5 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002a56:	2000      	movs	r0, #0
 8002a58:	f000 f8c2 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f000 f8bf 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002a62:	20ef      	movs	r0, #239	; 0xef
 8002a64:	f000 f8bc 	bl	8002be0 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002a68:	202b      	movs	r0, #43	; 0x2b
 8002a6a:	f000 f8ac 	bl	8002bc6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f000 f8b6 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002a74:	2000      	movs	r0, #0
 8002a76:	f000 f8b3 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002a7a:	2001      	movs	r0, #1
 8002a7c:	f000 f8b0 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002a80:	203f      	movs	r0, #63	; 0x3f
 8002a82:	f000 f8ad 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8002a86:	20f6      	movs	r0, #246	; 0xf6
 8002a88:	f000 f89d 	bl	8002bc6 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	f000 f8a7 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002a92:	2000      	movs	r0, #0
 8002a94:	f000 f8a4 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002a98:	2006      	movs	r0, #6
 8002a9a:	f000 f8a1 	bl	8002be0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002a9e:	202c      	movs	r0, #44	; 0x2c
 8002aa0:	f000 f891 	bl	8002bc6 <ili9341_WriteReg>
  LCD_Delay(200);
 8002aa4:	20c8      	movs	r0, #200	; 0xc8
 8002aa6:	f000 fc8f 	bl	80033c8 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002aaa:	2026      	movs	r0, #38	; 0x26
 8002aac:	f000 f88b 	bl	8002bc6 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	f000 f895 	bl	8002be0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8002ab6:	20e0      	movs	r0, #224	; 0xe0
 8002ab8:	f000 f885 	bl	8002bc6 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002abc:	200f      	movs	r0, #15
 8002abe:	f000 f88f 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002ac2:	2029      	movs	r0, #41	; 0x29
 8002ac4:	f000 f88c 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002ac8:	2024      	movs	r0, #36	; 0x24
 8002aca:	f000 f889 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002ace:	200c      	movs	r0, #12
 8002ad0:	f000 f886 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002ad4:	200e      	movs	r0, #14
 8002ad6:	f000 f883 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002ada:	2009      	movs	r0, #9
 8002adc:	f000 f880 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002ae0:	204e      	movs	r0, #78	; 0x4e
 8002ae2:	f000 f87d 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002ae6:	2078      	movs	r0, #120	; 0x78
 8002ae8:	f000 f87a 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002aec:	203c      	movs	r0, #60	; 0x3c
 8002aee:	f000 f877 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002af2:	2009      	movs	r0, #9
 8002af4:	f000 f874 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002af8:	2013      	movs	r0, #19
 8002afa:	f000 f871 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002afe:	2005      	movs	r0, #5
 8002b00:	f000 f86e 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002b04:	2017      	movs	r0, #23
 8002b06:	f000 f86b 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002b0a:	2011      	movs	r0, #17
 8002b0c:	f000 f868 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002b10:	2000      	movs	r0, #0
 8002b12:	f000 f865 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8002b16:	20e1      	movs	r0, #225	; 0xe1
 8002b18:	f000 f855 	bl	8002bc6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f000 f85f 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8002b22:	2016      	movs	r0, #22
 8002b24:	f000 f85c 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002b28:	201b      	movs	r0, #27
 8002b2a:	f000 f859 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002b2e:	2004      	movs	r0, #4
 8002b30:	f000 f856 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002b34:	2011      	movs	r0, #17
 8002b36:	f000 f853 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002b3a:	2007      	movs	r0, #7
 8002b3c:	f000 f850 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002b40:	2031      	movs	r0, #49	; 0x31
 8002b42:	f000 f84d 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8002b46:	2033      	movs	r0, #51	; 0x33
 8002b48:	f000 f84a 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002b4c:	2042      	movs	r0, #66	; 0x42
 8002b4e:	f000 f847 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002b52:	2005      	movs	r0, #5
 8002b54:	f000 f844 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002b58:	200c      	movs	r0, #12
 8002b5a:	f000 f841 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002b5e:	200a      	movs	r0, #10
 8002b60:	f000 f83e 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8002b64:	2028      	movs	r0, #40	; 0x28
 8002b66:	f000 f83b 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002b6a:	202f      	movs	r0, #47	; 0x2f
 8002b6c:	f000 f838 	bl	8002be0 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002b70:	200f      	movs	r0, #15
 8002b72:	f000 f835 	bl	8002be0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8002b76:	2011      	movs	r0, #17
 8002b78:	f000 f825 	bl	8002bc6 <ili9341_WriteReg>
  LCD_Delay(200);
 8002b7c:	20c8      	movs	r0, #200	; 0xc8
 8002b7e:	f000 fc23 	bl	80033c8 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002b82:	2029      	movs	r0, #41	; 0x29
 8002b84:	f000 f81f 	bl	8002bc6 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002b88:	202c      	movs	r0, #44	; 0x2c
 8002b8a:	f000 f81c 	bl	8002bc6 <ili9341_WriteReg>
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002b96:	f000 fb29 	bl	80031ec <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8002b9a:	2103      	movs	r1, #3
 8002b9c:	20d3      	movs	r0, #211	; 0xd3
 8002b9e:	f000 f82c 	bl	8002bfa <ili9341_ReadData>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	b29b      	uxth	r3, r3
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002bae:	2029      	movs	r0, #41	; 0x29
 8002bb0:	f000 f809 	bl	8002bc6 <ili9341_WriteReg>
}
 8002bb4:	bf00      	nop
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002bbc:	2028      	movs	r0, #40	; 0x28
 8002bbe:	f000 f802 	bl	8002bc6 <ili9341_WriteReg>
}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	4603      	mov	r3, r0
 8002bce:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 fba4 	bl	8003320 <LCD_IO_WriteReg>
}
 8002bd8:	bf00      	nop
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002bea:	88fb      	ldrh	r3, [r7, #6]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 fb75 	bl	80032dc <LCD_IO_WriteData>
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	4603      	mov	r3, r0
 8002c02:	460a      	mov	r2, r1
 8002c04:	80fb      	strh	r3, [r7, #6]
 8002c06:	4613      	mov	r3, r2
 8002c08:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002c0a:	797a      	ldrb	r2, [r7, #5]
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	4611      	mov	r1, r2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 fba7 	bl	8003364 <LCD_IO_ReadData>
 8002c16:	4603      	mov	r3, r0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002c24:	23f0      	movs	r3, #240	; 0xf0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002c34:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b084      	sub	sp, #16
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	4603      	mov	r3, r0
 8002c4a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 8002c50:	f000 fbc6 	bl	80033e0 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8002c54:	88fb      	ldrh	r3, [r7, #6]
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8002c5a:	f107 030f 	add.w	r3, r7, #15
 8002c5e:	2201      	movs	r2, #1
 8002c60:	2120      	movs	r1, #32
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 fc08 	bl	8003478 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct >> 8);
 8002c68:	88fb      	ldrh	r3, [r7, #6]
 8002c6a:	0a1b      	lsrs	r3, r3, #8
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8002c72:	f107 030f 	add.w	r3, r7, #15
 8002c76:	2201      	movs	r2, #1
 8002c78:	2123      	movs	r1, #35	; 0x23
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 fbfc 	bl	8003478 <GYRO_IO_Write>
}
 8002c80:	bf00      	nop
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
}
 8002c8c:	bf00      	nop
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 8002c9c:	f000 fba0 	bl	80033e0 <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8002ca0:	1dfb      	adds	r3, r7, #7
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	210f      	movs	r1, #15
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 fc18 	bl	80034dc <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 8002cac:	79fb      	ldrb	r3, [r7, #7]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002cbc:	1dfb      	adds	r3, r7, #7
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	2124      	movs	r1, #36	; 0x24
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 fc0a 	bl	80034dc <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8002cc8:	79fb      	ldrb	r3, [r7, #7]
 8002cca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002cd2:	1dfb      	adds	r3, r7, #7
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	2124      	movs	r1, #36	; 0x24
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 fbcd 	bl	8003478 <GYRO_IO_Write>
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b084      	sub	sp, #16
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4603      	mov	r3, r0
 8002cee:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8002cf4:	88fb      	ldrh	r3, [r7, #6]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8002cfa:	f107 030f 	add.w	r3, r7, #15
 8002cfe:	2201      	movs	r2, #1
 8002d00:	2120      	movs	r1, #32
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 fbb8 	bl	8003478 <GYRO_IO_Write>
}
 8002d08:	bf00      	nop
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	73fb      	strb	r3, [r7, #15]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8002d22:	f107 030f 	add.w	r3, r7, #15
 8002d26:	2201      	movs	r2, #1
 8002d28:	2130      	movs	r1, #48	; 0x30
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 fbd6 	bl	80034dc <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8002d30:	f107 030e 	add.w	r3, r7, #14
 8002d34:	2201      	movs	r2, #1
 8002d36:	2122      	movs	r1, #34	; 0x22
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 fbcf 	bl	80034dc <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
 8002d40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8002d48:	88fb      	ldrh	r3, [r7, #6]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	121b      	asrs	r3, r3, #8
 8002d4e:	b25a      	sxtb	r2, r3
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
 8002d52:	b25b      	sxtb	r3, r3
 8002d54:	4313      	orrs	r3, r2
 8002d56:	b25b      	sxtb	r3, r3
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 8002d5c:	7bbb      	ldrb	r3, [r7, #14]
 8002d5e:	f023 0320 	bic.w	r3, r3, #32
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 8002d66:	88fb      	ldrh	r3, [r7, #6]
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	7bbb      	ldrb	r3, [r7, #14]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8002d72:	f107 030f 	add.w	r3, r7, #15
 8002d76:	2201      	movs	r2, #1
 8002d78:	2130      	movs	r1, #48	; 0x30
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 fb7c 	bl	8003478 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8002d80:	f107 030e 	add.w	r3, r7, #14
 8002d84:	2201      	movs	r2, #1
 8002d86:	2122      	movs	r1, #34	; 0x22
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 fb75 	bl	8003478 <GYRO_IO_Write>
}
 8002d8e:	bf00      	nop
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b084      	sub	sp, #16
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8002da0:	f107 030f 	add.w	r3, r7, #15
 8002da4:	2201      	movs	r2, #1
 8002da6:	2122      	movs	r1, #34	; 0x22
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 fb97 	bl	80034dc <GYRO_IO_Read>

  if(IntSel == L3GD20_INT1)
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10a      	bne.n	8002dca <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
 8002dc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	73fb      	strb	r3, [r7, #15]
 8002dc8:	e00c      	b.n	8002de4 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d109      	bne.n	8002de4 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
 8002dd2:	f023 0308 	bic.w	r3, r3, #8
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
 8002ddc:	f043 0308 	orr.w	r3, r3, #8
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8002de4:	f107 030f 	add.w	r3, r7, #15
 8002de8:	2201      	movs	r2, #1
 8002dea:	2122      	movs	r1, #34	; 0x22
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 fb43 	bl	8003478 <GYRO_IO_Write>
}
 8002df2:	bf00      	nop
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b084      	sub	sp, #16
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	4603      	mov	r3, r0
 8002e02:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8002e04:	f107 030f 	add.w	r3, r7, #15
 8002e08:	2201      	movs	r2, #1
 8002e0a:	2122      	movs	r1, #34	; 0x22
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 fb65 	bl	80034dc <GYRO_IO_Read>

  if(IntSel == L3GD20_INT1)
 8002e12:	79fb      	ldrb	r3, [r7, #7]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d107      	bne.n	8002e28 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
 8002e24:	73fb      	strb	r3, [r7, #15]
 8002e26:	e009      	b.n	8002e3c <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d106      	bne.n	8002e3c <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	f023 0308 	bic.w	r3, r3, #8
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8002e3c:	f107 030f 	add.w	r3, r7, #15
 8002e40:	2201      	movs	r2, #1
 8002e42:	2122      	movs	r1, #34	; 0x22
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 fb17 	bl	8003478 <GYRO_IO_Write>
}
 8002e4a:	bf00      	nop
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b084      	sub	sp, #16
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	4603      	mov	r3, r0
 8002e5a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8002e5c:	f107 030f 	add.w	r3, r7, #15
 8002e60:	2201      	movs	r2, #1
 8002e62:	2121      	movs	r1, #33	; 0x21
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 fb39 	bl	80034dc <GYRO_IO_Read>

  tmpreg &= 0xC0;
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
 8002e6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8002e74:	7bfa      	ldrb	r2, [r7, #15]
 8002e76:	79fb      	ldrb	r3, [r7, #7]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8002e7e:	f107 030f 	add.w	r3, r7, #15
 8002e82:	2201      	movs	r2, #1
 8002e84:	2121      	movs	r1, #33	; 0x21
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 faf6 	bl	8003478 <GYRO_IO_Write>
}
 8002e8c:	bf00      	nop
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002e9e:	f107 030f 	add.w	r3, r7, #15
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	2124      	movs	r1, #36	; 0x24
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 fb18 	bl	80034dc <GYRO_IO_Read>

  tmpreg &= 0xEF;
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	f023 0310 	bic.w	r3, r3, #16
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 8002eb6:	7bfa      	ldrb	r2, [r7, #15]
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002ec0:	f107 030f 	add.w	r3, r7, #15
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	2124      	movs	r1, #36	; 0x24
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 fad5 	bl	8003478 <GYRO_IO_Write>
}
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08a      	sub	sp, #40	; 0x28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61bb      	str	r3, [r7, #24]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8002ee8:	f107 0310 	add.w	r3, r7, #16
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8002f00:	f107 030f 	add.w	r3, r7, #15
 8002f04:	2201      	movs	r2, #1
 8002f06:	2123      	movs	r1, #35	; 0x23
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 fae7 	bl	80034dc <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8002f0e:	f107 0318 	add.w	r3, r7, #24
 8002f12:	2206      	movs	r2, #6
 8002f14:	2128      	movs	r1, #40	; 0x28
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 fae0 	bl	80034dc <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d123      	bne.n	8002f6e <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 8002f26:	2300      	movs	r3, #0
 8002f28:	623b      	str	r3, [r7, #32]
 8002f2a:	e01c      	b.n	8002f66 <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	3301      	adds	r3, #1
 8002f32:	3328      	adds	r3, #40	; 0x28
 8002f34:	443b      	add	r3, r7
 8002f36:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	021b      	lsls	r3, r3, #8
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	3328      	adds	r3, #40	; 0x28
 8002f46:	443b      	add	r3, r7
 8002f48:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	4413      	add	r3, r2
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	b21a      	sxth	r2, r3
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	3328      	adds	r3, #40	; 0x28
 8002f5a:	443b      	add	r3, r7
 8002f5c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	3301      	adds	r3, #1
 8002f64:	623b      	str	r3, [r7, #32]
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	dddf      	ble.n	8002f2c <L3GD20_ReadXYZAngRate+0x54>
 8002f6c:	e022      	b.n	8002fb4 <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8002f6e:	2300      	movs	r3, #0
 8002f70:	623b      	str	r3, [r7, #32]
 8002f72:	e01c      	b.n	8002fae <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	3328      	adds	r3, #40	; 0x28
 8002f7a:	443b      	add	r3, r7
 8002f7c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	021b      	lsls	r3, r3, #8
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	3328      	adds	r3, #40	; 0x28
 8002f8e:	443b      	add	r3, r7
 8002f90:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	4413      	add	r3, r2
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	b21a      	sxth	r2, r3
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	3328      	adds	r3, #40	; 0x28
 8002fa2:	443b      	add	r3, r7
 8002fa4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	3301      	adds	r3, #1
 8002fac:	623b      	str	r3, [r7, #32]
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	dddf      	ble.n	8002f74 <L3GD20_ReadXYZAngRate+0x9c>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
 8002fb6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002fba:	2b20      	cmp	r3, #32
 8002fbc:	d00c      	beq.n	8002fd8 <L3GD20_ReadXYZAngRate+0x100>
 8002fbe:	2b20      	cmp	r3, #32
 8002fc0:	dc0d      	bgt.n	8002fde <L3GD20_ReadXYZAngRate+0x106>
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <L3GD20_ReadXYZAngRate+0xf4>
 8002fc6:	2b10      	cmp	r3, #16
 8002fc8:	d003      	beq.n	8002fd2 <L3GD20_ReadXYZAngRate+0xfa>
 8002fca:	e008      	b.n	8002fde <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8002fcc:	4b15      	ldr	r3, [pc, #84]	; (8003024 <L3GD20_ReadXYZAngRate+0x14c>)
 8002fce:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8002fd0:	e005      	b.n	8002fde <L3GD20_ReadXYZAngRate+0x106>

  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8002fd2:	4b15      	ldr	r3, [pc, #84]	; (8003028 <L3GD20_ReadXYZAngRate+0x150>)
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8002fd6:	e002      	b.n	8002fde <L3GD20_ReadXYZAngRate+0x106>

  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8002fd8:	4b14      	ldr	r3, [pc, #80]	; (800302c <L3GD20_ReadXYZAngRate+0x154>)
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8002fdc:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8002fde:	2300      	movs	r3, #0
 8002fe0:	623b      	str	r3, [r7, #32]
 8002fe2:	e016      	b.n	8003012 <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	3328      	adds	r3, #40	; 0x28
 8002fea:	443b      	add	r3, r7
 8002fec:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8002ff0:	ee07 3a90 	vmov	s15, r3
 8002ff4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	4413      	add	r3, r2
 8003000:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003008:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	3301      	adds	r3, #1
 8003010:	623b      	str	r3, [r7, #32]
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	2b02      	cmp	r3, #2
 8003016:	dde5      	ble.n	8002fe4 <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8003018:	bf00      	nop
 800301a:	bf00      	nop
 800301c:	3728      	adds	r7, #40	; 0x28
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	410c0000 	.word	0x410c0000
 8003028:	418c0000 	.word	0x418c0000
 800302c:	428c0000 	.word	0x428c0000

08003030 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003034:	4819      	ldr	r0, [pc, #100]	; (800309c <SPIx_Init+0x6c>)
 8003036:	f004 ff08 	bl	8007e4a <HAL_SPI_GetState>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d12b      	bne.n	8003098 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8003040:	4b16      	ldr	r3, [pc, #88]	; (800309c <SPIx_Init+0x6c>)
 8003042:	4a17      	ldr	r2, [pc, #92]	; (80030a0 <SPIx_Init+0x70>)
 8003044:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003046:	4b15      	ldr	r3, [pc, #84]	; (800309c <SPIx_Init+0x6c>)
 8003048:	2218      	movs	r2, #24
 800304a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800304c:	4b13      	ldr	r3, [pc, #76]	; (800309c <SPIx_Init+0x6c>)
 800304e:	2200      	movs	r2, #0
 8003050:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8003052:	4b12      	ldr	r3, [pc, #72]	; (800309c <SPIx_Init+0x6c>)
 8003054:	2200      	movs	r2, #0
 8003056:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003058:	4b10      	ldr	r3, [pc, #64]	; (800309c <SPIx_Init+0x6c>)
 800305a:	2200      	movs	r2, #0
 800305c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800305e:	4b0f      	ldr	r3, [pc, #60]	; (800309c <SPIx_Init+0x6c>)
 8003060:	2200      	movs	r2, #0
 8003062:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003064:	4b0d      	ldr	r3, [pc, #52]	; (800309c <SPIx_Init+0x6c>)
 8003066:	2207      	movs	r2, #7
 8003068:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800306a:	4b0c      	ldr	r3, [pc, #48]	; (800309c <SPIx_Init+0x6c>)
 800306c:	2200      	movs	r2, #0
 800306e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003070:	4b0a      	ldr	r3, [pc, #40]	; (800309c <SPIx_Init+0x6c>)
 8003072:	2200      	movs	r2, #0
 8003074:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8003076:	4b09      	ldr	r3, [pc, #36]	; (800309c <SPIx_Init+0x6c>)
 8003078:	f44f 7200 	mov.w	r2, #512	; 0x200
 800307c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800307e:	4b07      	ldr	r3, [pc, #28]	; (800309c <SPIx_Init+0x6c>)
 8003080:	2200      	movs	r2, #0
 8003082:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003084:	4b05      	ldr	r3, [pc, #20]	; (800309c <SPIx_Init+0x6c>)
 8003086:	f44f 7282 	mov.w	r2, #260	; 0x104
 800308a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 800308c:	4803      	ldr	r0, [pc, #12]	; (800309c <SPIx_Init+0x6c>)
 800308e:	f000 f873 	bl	8003178 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8003092:	4802      	ldr	r0, [pc, #8]	; (800309c <SPIx_Init+0x6c>)
 8003094:	f004 fa39 	bl	800750a <HAL_SPI_Init>
  } 
}
 8003098:	bf00      	nop
 800309a:	bd80      	pop	{r7, pc}
 800309c:	200008a4 	.word	0x200008a4
 80030a0:	40015000 	.word	0x40015000

080030a4 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80030b2:	79fb      	ldrb	r3, [r7, #7]
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	4b09      	ldr	r3, [pc, #36]	; (80030dc <SPIx_Read+0x38>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f107 0108 	add.w	r1, r7, #8
 80030be:	4808      	ldr	r0, [pc, #32]	; (80030e0 <SPIx_Read+0x3c>)
 80030c0:	f004 fc10 	bl	80078e4 <HAL_SPI_Receive>
 80030c4:	4603      	mov	r3, r0
 80030c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80030ce:	f000 f847 	bl	8003160 <SPIx_Error>
  }
  
  return readvalue;
 80030d2:	68bb      	ldr	r3, [r7, #8]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	20000090 	.word	0x20000090
 80030e0:	200008a4 	.word	0x200008a4

080030e4 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80030f2:	4b09      	ldr	r3, [pc, #36]	; (8003118 <SPIx_Write+0x34>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	1db9      	adds	r1, r7, #6
 80030f8:	2201      	movs	r2, #1
 80030fa:	4808      	ldr	r0, [pc, #32]	; (800311c <SPIx_Write+0x38>)
 80030fc:	f004 fab6 	bl	800766c <HAL_SPI_Transmit>
 8003100:	4603      	mov	r3, r0
 8003102:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800310a:	f000 f829 	bl	8003160 <SPIx_Error>
  }
}
 800310e:	bf00      	nop
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20000090 	.word	0x20000090
 800311c:	200008a4 	.word	0x200008a4

08003120 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af02      	add	r7, sp, #8
 8003126:	4603      	mov	r3, r0
 8003128:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 800312a:	2300      	movs	r3, #0
 800312c:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800312e:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <SPIx_WriteRead+0x38>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f107 020f 	add.w	r2, r7, #15
 8003136:	1df9      	adds	r1, r7, #7
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	2301      	movs	r3, #1
 800313c:	4807      	ldr	r0, [pc, #28]	; (800315c <SPIx_WriteRead+0x3c>)
 800313e:	f004 fce2 	bl	8007b06 <HAL_SPI_TransmitReceive>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8003148:	f000 f80a 	bl	8003160 <SPIx_Error>
  }
  
  return receivedbyte;
 800314c:	7bfb      	ldrb	r3, [r7, #15]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	20000090 	.word	0x20000090
 800315c:	200008a4 	.word	0x200008a4

08003160 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003164:	4803      	ldr	r0, [pc, #12]	; (8003174 <SPIx_Error+0x14>)
 8003166:	f004 fa59 	bl	800761c <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800316a:	f7ff ff61 	bl	8003030 <SPIx_Init>
}
 800316e:	bf00      	nop
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	200008a4 	.word	0x200008a4

08003178 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08a      	sub	sp, #40	; 0x28
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8003180:	2300      	movs	r3, #0
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	4b17      	ldr	r3, [pc, #92]	; (80031e4 <SPIx_MspInit+0x6c>)
 8003186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003188:	4a16      	ldr	r2, [pc, #88]	; (80031e4 <SPIx_MspInit+0x6c>)
 800318a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800318e:	6453      	str	r3, [r2, #68]	; 0x44
 8003190:	4b14      	ldr	r3, [pc, #80]	; (80031e4 <SPIx_MspInit+0x6c>)
 8003192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003194:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800319c:	2300      	movs	r3, #0
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <SPIx_MspInit+0x6c>)
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	4a0f      	ldr	r2, [pc, #60]	; (80031e4 <SPIx_MspInit+0x6c>)
 80031a6:	f043 0320 	orr.w	r3, r3, #32
 80031aa:	6313      	str	r3, [r2, #48]	; 0x30
 80031ac:	4b0d      	ldr	r3, [pc, #52]	; (80031e4 <SPIx_MspInit+0x6c>)
 80031ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b0:	f003 0320 	and.w	r3, r3, #32
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80031b8:	f44f 7360 	mov.w	r3, #896	; 0x380
 80031bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80031be:	2302      	movs	r3, #2
 80031c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80031c2:	2302      	movs	r3, #2
 80031c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80031c6:	2301      	movs	r3, #1
 80031c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80031ca:	2305      	movs	r3, #5
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80031ce:	f107 0314 	add.w	r3, r7, #20
 80031d2:	4619      	mov	r1, r3
 80031d4:	4804      	ldr	r0, [pc, #16]	; (80031e8 <SPIx_MspInit+0x70>)
 80031d6:	f002 f9fb 	bl	80055d0 <HAL_GPIO_Init>
}
 80031da:	bf00      	nop
 80031dc:	3728      	adds	r7, #40	; 0x28
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40021400 	.word	0x40021400

080031ec <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80031f2:	4b36      	ldr	r3, [pc, #216]	; (80032cc <LCD_IO_Init+0xe0>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d164      	bne.n	80032c4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80031fa:	4b34      	ldr	r3, [pc, #208]	; (80032cc <LCD_IO_Init+0xe0>)
 80031fc:	2201      	movs	r2, #1
 80031fe:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003200:	2300      	movs	r3, #0
 8003202:	60bb      	str	r3, [r7, #8]
 8003204:	4b32      	ldr	r3, [pc, #200]	; (80032d0 <LCD_IO_Init+0xe4>)
 8003206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003208:	4a31      	ldr	r2, [pc, #196]	; (80032d0 <LCD_IO_Init+0xe4>)
 800320a:	f043 0308 	orr.w	r3, r3, #8
 800320e:	6313      	str	r3, [r2, #48]	; 0x30
 8003210:	4b2f      	ldr	r3, [pc, #188]	; (80032d0 <LCD_IO_Init+0xe4>)
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800321c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003220:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003222:	2301      	movs	r3, #1
 8003224:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800322a:	2302      	movs	r3, #2
 800322c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800322e:	f107 030c 	add.w	r3, r7, #12
 8003232:	4619      	mov	r1, r3
 8003234:	4827      	ldr	r0, [pc, #156]	; (80032d4 <LCD_IO_Init+0xe8>)
 8003236:	f002 f9cb 	bl	80055d0 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	607b      	str	r3, [r7, #4]
 800323e:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <LCD_IO_Init+0xe4>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	4a23      	ldr	r2, [pc, #140]	; (80032d0 <LCD_IO_Init+0xe4>)
 8003244:	f043 0308 	orr.w	r3, r3, #8
 8003248:	6313      	str	r3, [r2, #48]	; 0x30
 800324a:	4b21      	ldr	r3, [pc, #132]	; (80032d0 <LCD_IO_Init+0xe4>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	607b      	str	r3, [r7, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003256:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800325a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800325c:	2301      	movs	r3, #1
 800325e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003264:	2302      	movs	r3, #2
 8003266:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003268:	f107 030c 	add.w	r3, r7, #12
 800326c:	4619      	mov	r1, r3
 800326e:	4819      	ldr	r0, [pc, #100]	; (80032d4 <LCD_IO_Init+0xe8>)
 8003270:	f002 f9ae 	bl	80055d0 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003274:	2300      	movs	r3, #0
 8003276:	603b      	str	r3, [r7, #0]
 8003278:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <LCD_IO_Init+0xe4>)
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	4a14      	ldr	r2, [pc, #80]	; (80032d0 <LCD_IO_Init+0xe4>)
 800327e:	f043 0304 	orr.w	r3, r3, #4
 8003282:	6313      	str	r3, [r2, #48]	; 0x30
 8003284:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <LCD_IO_Init+0xe4>)
 8003286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	603b      	str	r3, [r7, #0]
 800328e:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003290:	2304      	movs	r3, #4
 8003292:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003294:	2301      	movs	r3, #1
 8003296:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800329c:	2302      	movs	r3, #2
 800329e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80032a0:	f107 030c 	add.w	r3, r7, #12
 80032a4:	4619      	mov	r1, r3
 80032a6:	480c      	ldr	r0, [pc, #48]	; (80032d8 <LCD_IO_Init+0xec>)
 80032a8:	f002 f992 	bl	80055d0 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80032ac:	2200      	movs	r2, #0
 80032ae:	2104      	movs	r1, #4
 80032b0:	4809      	ldr	r0, [pc, #36]	; (80032d8 <LCD_IO_Init+0xec>)
 80032b2:	f002 fc5d 	bl	8005b70 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80032b6:	2201      	movs	r2, #1
 80032b8:	2104      	movs	r1, #4
 80032ba:	4807      	ldr	r0, [pc, #28]	; (80032d8 <LCD_IO_Init+0xec>)
 80032bc:	f002 fc58 	bl	8005b70 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80032c0:	f7ff feb6 	bl	8003030 <SPIx_Init>
  }
}
 80032c4:	bf00      	nop
 80032c6:	3720      	adds	r7, #32
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	200008fc 	.word	0x200008fc
 80032d0:	40023800 	.word	0x40023800
 80032d4:	40020c00 	.word	0x40020c00
 80032d8:	40020800 	.word	0x40020800

080032dc <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80032e6:	2201      	movs	r2, #1
 80032e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032ec:	480a      	ldr	r0, [pc, #40]	; (8003318 <LCD_IO_WriteData+0x3c>)
 80032ee:	f002 fc3f 	bl	8005b70 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80032f2:	2200      	movs	r2, #0
 80032f4:	2104      	movs	r1, #4
 80032f6:	4809      	ldr	r0, [pc, #36]	; (800331c <LCD_IO_WriteData+0x40>)
 80032f8:	f002 fc3a 	bl	8005b70 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80032fc:	88fb      	ldrh	r3, [r7, #6]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff fef0 	bl	80030e4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003304:	2201      	movs	r2, #1
 8003306:	2104      	movs	r1, #4
 8003308:	4804      	ldr	r0, [pc, #16]	; (800331c <LCD_IO_WriteData+0x40>)
 800330a:	f002 fc31 	bl	8005b70 <HAL_GPIO_WritePin>
}
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40020c00 	.word	0x40020c00
 800331c:	40020800 	.word	0x40020800

08003320 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800332a:	2200      	movs	r2, #0
 800332c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003330:	480a      	ldr	r0, [pc, #40]	; (800335c <LCD_IO_WriteReg+0x3c>)
 8003332:	f002 fc1d 	bl	8005b70 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003336:	2200      	movs	r2, #0
 8003338:	2104      	movs	r1, #4
 800333a:	4809      	ldr	r0, [pc, #36]	; (8003360 <LCD_IO_WriteReg+0x40>)
 800333c:	f002 fc18 	bl	8005b70 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8003340:	79fb      	ldrb	r3, [r7, #7]
 8003342:	b29b      	uxth	r3, r3
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff fecd 	bl	80030e4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800334a:	2201      	movs	r2, #1
 800334c:	2104      	movs	r1, #4
 800334e:	4804      	ldr	r0, [pc, #16]	; (8003360 <LCD_IO_WriteReg+0x40>)
 8003350:	f002 fc0e 	bl	8005b70 <HAL_GPIO_WritePin>
}
 8003354:	bf00      	nop
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40020c00 	.word	0x40020c00
 8003360:	40020800 	.word	0x40020800

08003364 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	460a      	mov	r2, r1
 800336e:	80fb      	strh	r3, [r7, #6]
 8003370:	4613      	mov	r3, r2
 8003372:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8003378:	2200      	movs	r2, #0
 800337a:	2104      	movs	r1, #4
 800337c:	4810      	ldr	r0, [pc, #64]	; (80033c0 <LCD_IO_ReadData+0x5c>)
 800337e:	f002 fbf7 	bl	8005b70 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003382:	2200      	movs	r2, #0
 8003384:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003388:	480e      	ldr	r0, [pc, #56]	; (80033c4 <LCD_IO_ReadData+0x60>)
 800338a:	f002 fbf1 	bl	8005b70 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff fea7 	bl	80030e4 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8003396:	797b      	ldrb	r3, [r7, #5]
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff fe83 	bl	80030a4 <SPIx_Read>
 800339e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80033a0:	2201      	movs	r2, #1
 80033a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033a6:	4807      	ldr	r0, [pc, #28]	; (80033c4 <LCD_IO_ReadData+0x60>)
 80033a8:	f002 fbe2 	bl	8005b70 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80033ac:	2201      	movs	r2, #1
 80033ae:	2104      	movs	r1, #4
 80033b0:	4803      	ldr	r0, [pc, #12]	; (80033c0 <LCD_IO_ReadData+0x5c>)
 80033b2:	f002 fbdd 	bl	8005b70 <HAL_GPIO_WritePin>
  
  return readvalue;
 80033b6:	68fb      	ldr	r3, [r7, #12]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40020800 	.word	0x40020800
 80033c4:	40020c00 	.word	0x40020c00

080033c8 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f001 f9ef 	bl	80047b4 <HAL_Delay>
}
 80033d6:	bf00      	nop
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 80033e6:	2300      	movs	r3, #0
 80033e8:	60bb      	str	r3, [r7, #8]
 80033ea:	4b20      	ldr	r3, [pc, #128]	; (800346c <GYRO_IO_Init+0x8c>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	4a1f      	ldr	r2, [pc, #124]	; (800346c <GYRO_IO_Init+0x8c>)
 80033f0:	f043 0304 	orr.w	r3, r3, #4
 80033f4:	6313      	str	r3, [r2, #48]	; 0x30
 80033f6:	4b1d      	ldr	r3, [pc, #116]	; (800346c <GYRO_IO_Init+0x8c>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	60bb      	str	r3, [r7, #8]
 8003400:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8003402:	2302      	movs	r3, #2
 8003404:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8003406:	2301      	movs	r3, #1
 8003408:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 800340e:	2301      	movs	r3, #1
 8003410:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8003412:	f107 030c 	add.w	r3, r7, #12
 8003416:	4619      	mov	r1, r3
 8003418:	4815      	ldr	r0, [pc, #84]	; (8003470 <GYRO_IO_Init+0x90>)
 800341a:	f002 f8d9 	bl	80055d0 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 800341e:	2201      	movs	r2, #1
 8003420:	2102      	movs	r1, #2
 8003422:	4813      	ldr	r0, [pc, #76]	; (8003470 <GYRO_IO_Init+0x90>)
 8003424:	f002 fba4 	bl	8005b70 <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8003428:	2300      	movs	r3, #0
 800342a:	607b      	str	r3, [r7, #4]
 800342c:	4b0f      	ldr	r3, [pc, #60]	; (800346c <GYRO_IO_Init+0x8c>)
 800342e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003430:	4a0e      	ldr	r2, [pc, #56]	; (800346c <GYRO_IO_Init+0x8c>)
 8003432:	f043 0301 	orr.w	r3, r3, #1
 8003436:	6313      	str	r3, [r2, #48]	; 0x30
 8003438:	4b0c      	ldr	r3, [pc, #48]	; (800346c <GYRO_IO_Init+0x8c>)
 800343a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	607b      	str	r3, [r7, #4]
 8003442:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8003444:	2306      	movs	r3, #6
 8003446:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8003448:	2300      	movs	r3, #0
 800344a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800344c:	2302      	movs	r3, #2
 800344e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8003450:	2300      	movs	r3, #0
 8003452:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8003454:	f107 030c 	add.w	r3, r7, #12
 8003458:	4619      	mov	r1, r3
 800345a:	4806      	ldr	r0, [pc, #24]	; (8003474 <GYRO_IO_Init+0x94>)
 800345c:	f002 f8b8 	bl	80055d0 <HAL_GPIO_Init>

  SPIx_Init();
 8003460:	f7ff fde6 	bl	8003030 <SPIx_Init>
}
 8003464:	bf00      	nop
 8003466:	3720      	adds	r7, #32
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40023800 	.word	0x40023800
 8003470:	40020800 	.word	0x40020800
 8003474:	40020000 	.word	0x40020000

08003478 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	70fb      	strb	r3, [r7, #3]
 8003484:	4613      	mov	r3, r2
 8003486:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8003488:	883b      	ldrh	r3, [r7, #0]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d903      	bls.n	8003496 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003494:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8003496:	2200      	movs	r2, #0
 8003498:	2102      	movs	r1, #2
 800349a:	480f      	ldr	r0, [pc, #60]	; (80034d8 <GYRO_IO_Write+0x60>)
 800349c:	f002 fb68 	bl	8005b70 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff fe3c 	bl	8003120 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80034a8:	e00a      	b.n	80034c0 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff fe36 	bl	8003120 <SPIx_WriteRead>
    NumByteToWrite--;
 80034b4:	883b      	ldrh	r3, [r7, #0]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3301      	adds	r3, #1
 80034be:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 80034c0:	883b      	ldrh	r3, [r7, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f1      	bne.n	80034aa <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80034c6:	2201      	movs	r2, #1
 80034c8:	2102      	movs	r1, #2
 80034ca:	4803      	ldr	r0, [pc, #12]	; (80034d8 <GYRO_IO_Write+0x60>)
 80034cc:	f002 fb50 	bl	8005b70 <HAL_GPIO_WritePin>
}
 80034d0:	bf00      	nop
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40020800 	.word	0x40020800

080034dc <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	70fb      	strb	r3, [r7, #3]
 80034e8:	4613      	mov	r3, r2
 80034ea:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 80034ec:	883b      	ldrh	r3, [r7, #0]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d904      	bls.n	80034fc <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80034f2:	78fb      	ldrb	r3, [r7, #3]
 80034f4:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80034f8:	70fb      	strb	r3, [r7, #3]
 80034fa:	e003      	b.n	8003504 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80034fc:	78fb      	ldrb	r3, [r7, #3]
 80034fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003502:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8003504:	2200      	movs	r2, #0
 8003506:	2102      	movs	r1, #2
 8003508:	4810      	ldr	r0, [pc, #64]	; (800354c <GYRO_IO_Read+0x70>)
 800350a:	f002 fb31 	bl	8005b70 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800350e:	78fb      	ldrb	r3, [r7, #3]
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff fe05 	bl	8003120 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8003516:	e00c      	b.n	8003532 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8003518:	2000      	movs	r0, #0
 800351a:	f7ff fe01 	bl	8003120 <SPIx_WriteRead>
 800351e:	4603      	mov	r3, r0
 8003520:	461a      	mov	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8003526:	883b      	ldrh	r3, [r7, #0]
 8003528:	3b01      	subs	r3, #1
 800352a:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3301      	adds	r3, #1
 8003530:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8003532:	883b      	ldrh	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1ef      	bne.n	8003518 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8003538:	2201      	movs	r2, #1
 800353a:	2102      	movs	r1, #2
 800353c:	4803      	ldr	r0, [pc, #12]	; (800354c <GYRO_IO_Read+0x70>)
 800353e:	f002 fb17 	bl	8005b70 <HAL_GPIO_WritePin>
}  
 8003542:	bf00      	nop
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40020800 	.word	0x40020800

08003550 <BSP_GYRO_Init>:
  * @brief  Set Gyroscope Initialization.
  * @param  None
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800355a:	2300      	movs	r3, #0
 800355c:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure={0,0};
 800355e:	2300      	movs	r3, #0
 8003560:	703b      	strb	r3, [r7, #0]
 8003562:	2300      	movs	r3, #0
 8003564:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8003566:	4b2d      	ldr	r3, [pc, #180]	; (800361c <BSP_GYRO_Init+0xcc>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	4798      	blx	r3
 800356c:	4603      	mov	r3, r0
 800356e:	2bd4      	cmp	r3, #212	; 0xd4
 8003570:	d005      	beq.n	800357e <BSP_GYRO_Init+0x2e>
 8003572:	4b2a      	ldr	r3, [pc, #168]	; (800361c <BSP_GYRO_Init+0xcc>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	4798      	blx	r3
 8003578:	4603      	mov	r3, r0
 800357a:	2bd5      	cmp	r3, #213	; 0xd5
 800357c:	d146      	bne.n	800360c <BSP_GYRO_Init+0xbc>
  {	
    /* Initialize the Gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 800357e:	4b28      	ldr	r3, [pc, #160]	; (8003620 <BSP_GYRO_Init+0xd0>)
 8003580:	4a26      	ldr	r2, [pc, #152]	; (800361c <BSP_GYRO_Init+0xcc>)
 8003582:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the Gyroscope structure */
    L3GD20_InitStructure.Power_Mode = L3GD20_MODE_ACTIVE;
 8003584:	2308      	movs	r3, #8
 8003586:	713b      	strb	r3, [r7, #4]
    L3GD20_InitStructure.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 8003588:	2300      	movs	r3, #0
 800358a:	717b      	strb	r3, [r7, #5]
    L3GD20_InitStructure.Axes_Enable = L3GD20_AXES_ENABLE;
 800358c:	2307      	movs	r3, #7
 800358e:	71bb      	strb	r3, [r7, #6]
    L3GD20_InitStructure.Band_Width = L3GD20_BANDWIDTH_4;
 8003590:	2330      	movs	r3, #48	; 0x30
 8003592:	71fb      	strb	r3, [r7, #7]
    L3GD20_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8003594:	2300      	movs	r3, #0
 8003596:	723b      	strb	r3, [r7, #8]
    L3GD20_InitStructure.Endianness = L3GD20_BLE_LSB;
 8003598:	2300      	movs	r3, #0
 800359a:	727b      	strb	r3, [r7, #9]
    L3GD20_InitStructure.Full_Scale = L3GD20_FULLSCALE_500; 
 800359c:	2310      	movs	r3, #16
 800359e:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 80035a0:	793a      	ldrb	r2, [r7, #4]
 80035a2:	797b      	ldrb	r3, [r7, #5]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	b2da      	uxtb	r2, r3
                       L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 80035a8:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 80035aa:	4313      	orrs	r3, r2
 80035ac:	b2da      	uxtb	r2, r3
                       L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 80035ae:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 80035b0:	4313      	orrs	r3, r2
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 80035b6:	7a3a      	ldrb	r2, [r7, #8]
 80035b8:	7a7b      	ldrb	r3, [r7, #9]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	b2da      	uxtb	r2, r3
                         L3GD20_InitStructure.Full_Scale) << 8);
 80035be:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 80035c0:	4313      	orrs	r3, r2
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	021b      	lsls	r3, r3, #8
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	89bb      	ldrh	r3, [r7, #12]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	81bb      	strh	r3, [r7, #12]
    
    /* Configure the Gyroscope main parameters */	 
    GyroscopeDrv->Init(ctrl);
 80035d0:	4b13      	ldr	r3, [pc, #76]	; (8003620 <BSP_GYRO_Init+0xd0>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	89ba      	ldrh	r2, [r7, #12]
 80035d8:	4610      	mov	r0, r2
 80035da:	4798      	blx	r3

    L3GD20_FilterStructure.HighPassFilter_Mode_Selection = L3GD20_HPM_NORMAL_MODE_RES;
 80035dc:	2300      	movs	r3, #0
 80035de:	703b      	strb	r3, [r7, #0]
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 80035e0:	2300      	movs	r3, #0
 80035e2:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
 80035e4:	783a      	ldrb	r2, [r7, #0]
                       L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));
 80035e6:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
 80035e8:	4313      	orrs	r3, r2
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	81bb      	strh	r3, [r7, #12]

    /* Configure the Gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 80035ee:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <BSP_GYRO_Init+0xd0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f4:	89ba      	ldrh	r2, [r7, #12]
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	4610      	mov	r0, r2
 80035fa:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 80035fc:	4b08      	ldr	r3, [pc, #32]	; (8003620 <BSP_GYRO_Init+0xd0>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003602:	2010      	movs	r0, #16
 8003604:	4798      	blx	r3

    ret = GYRO_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	73fb      	strb	r3, [r7, #15]
 800360a:	e001      	b.n	8003610 <BSP_GYRO_Init+0xc0>
  }
  else
  {
    ret = GYRO_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8003610:	7bfb      	ldrb	r3, [r7, #15]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	2000005c 	.word	0x2000005c
 8003620:	20000900 	.word	0x20000900

08003624 <BSP_GYRO_GetXYZ>:
  * @brief  Gets XYZ angular acceleration/
  * @param  pfData: pointer on floating array         
  * @retval None
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 800362c:	4b06      	ldr	r3, [pc, #24]	; (8003648 <BSP_GYRO_GetXYZ+0x24>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	2b00      	cmp	r3, #0
 8003634:	d004      	beq.n	8003640 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8003636:	4b04      	ldr	r3, [pc, #16]	; (8003648 <BSP_GYRO_GetXYZ+0x24>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	4798      	blx	r3
  }
}
 8003640:	bf00      	nop
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	20000900 	.word	0x20000900

0800364c <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8003650:	4b2d      	ldr	r3, [pc, #180]	; (8003708 <BSP_LCD_Init+0xbc>)
 8003652:	4a2e      	ldr	r2, [pc, #184]	; (800370c <BSP_LCD_Init+0xc0>)
 8003654:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8003656:	4b2c      	ldr	r3, [pc, #176]	; (8003708 <BSP_LCD_Init+0xbc>)
 8003658:	2209      	movs	r2, #9
 800365a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 800365c:	4b2a      	ldr	r3, [pc, #168]	; (8003708 <BSP_LCD_Init+0xbc>)
 800365e:	2201      	movs	r2, #1
 8003660:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8003662:	4b29      	ldr	r3, [pc, #164]	; (8003708 <BSP_LCD_Init+0xbc>)
 8003664:	221d      	movs	r2, #29
 8003666:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8003668:	4b27      	ldr	r3, [pc, #156]	; (8003708 <BSP_LCD_Init+0xbc>)
 800366a:	2203      	movs	r2, #3
 800366c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800366e:	4b26      	ldr	r3, [pc, #152]	; (8003708 <BSP_LCD_Init+0xbc>)
 8003670:	f240 120d 	movw	r2, #269	; 0x10d
 8003674:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8003676:	4b24      	ldr	r3, [pc, #144]	; (8003708 <BSP_LCD_Init+0xbc>)
 8003678:	f240 1243 	movw	r2, #323	; 0x143
 800367c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800367e:	4b22      	ldr	r3, [pc, #136]	; (8003708 <BSP_LCD_Init+0xbc>)
 8003680:	f240 1217 	movw	r2, #279	; 0x117
 8003684:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8003686:	4b20      	ldr	r3, [pc, #128]	; (8003708 <BSP_LCD_Init+0xbc>)
 8003688:	f240 1247 	movw	r2, #327	; 0x147
 800368c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800368e:	4b1e      	ldr	r3, [pc, #120]	; (8003708 <BSP_LCD_Init+0xbc>)
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8003696:	4b1c      	ldr	r3, [pc, #112]	; (8003708 <BSP_LCD_Init+0xbc>)
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800369e:	4b1a      	ldr	r3, [pc, #104]	; (8003708 <BSP_LCD_Init+0xbc>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80036a6:	4b1a      	ldr	r3, [pc, #104]	; (8003710 <BSP_LCD_Init+0xc4>)
 80036a8:	2208      	movs	r2, #8
 80036aa:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80036ac:	4b18      	ldr	r3, [pc, #96]	; (8003710 <BSP_LCD_Init+0xc4>)
 80036ae:	22c0      	movs	r2, #192	; 0xc0
 80036b0:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80036b2:	4b17      	ldr	r3, [pc, #92]	; (8003710 <BSP_LCD_Init+0xc4>)
 80036b4:	2204      	movs	r2, #4
 80036b6:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80036b8:	4b15      	ldr	r3, [pc, #84]	; (8003710 <BSP_LCD_Init+0xc4>)
 80036ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036be:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80036c0:	4813      	ldr	r0, [pc, #76]	; (8003710 <BSP_LCD_Init+0xc4>)
 80036c2:	f003 fcd1 	bl	8007068 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80036c6:	4b10      	ldr	r3, [pc, #64]	; (8003708 <BSP_LCD_Init+0xbc>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80036cc:	4b0e      	ldr	r3, [pc, #56]	; (8003708 <BSP_LCD_Init+0xbc>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80036d2:	4b0d      	ldr	r3, [pc, #52]	; (8003708 <BSP_LCD_Init+0xbc>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80036d8:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <BSP_LCD_Init+0xbc>)
 80036da:	2200      	movs	r2, #0
 80036dc:	611a      	str	r2, [r3, #16]
    
    MspInit();
 80036de:	f000 fc81 	bl	8003fe4 <MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80036e2:	4809      	ldr	r0, [pc, #36]	; (8003708 <BSP_LCD_Init+0xbc>)
 80036e4:	f002 fc1e 	bl	8005f24 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80036e8:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <BSP_LCD_Init+0xc8>)
 80036ea:	4a0b      	ldr	r2, [pc, #44]	; (8003718 <BSP_LCD_Init+0xcc>)
 80036ec:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80036ee:	4b09      	ldr	r3, [pc, #36]	; (8003714 <BSP_LCD_Init+0xc8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80036f6:	f000 fe63 	bl	80043c0 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80036fa:	4808      	ldr	r0, [pc, #32]	; (800371c <BSP_LCD_Init+0xd0>)
 80036fc:	f000 f8ce 	bl	800389c <BSP_LCD_SetFont>

  return LCD_OK;
 8003700:	2300      	movs	r3, #0
}  
 8003702:	4618      	mov	r0, r3
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20000904 	.word	0x20000904
 800370c:	40016800 	.word	0x40016800
 8003710:	200009ec 	.word	0x200009ec
 8003714:	20000a38 	.word	0x20000a38
 8003718:	20000024 	.word	0x20000024
 800371c:	20000094 	.word	0x20000094

08003720 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8003724:	4b03      	ldr	r3, [pc, #12]	; (8003734 <BSP_LCD_GetXSize+0x14>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372a:	4798      	blx	r3
 800372c:	4603      	mov	r3, r0
}
 800372e:	4618      	mov	r0, r3
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	20000a38 	.word	0x20000a38

08003738 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None    
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 800373c:	4b03      	ldr	r3, [pc, #12]	; (800374c <BSP_LCD_GetYSize+0x14>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003742:	4798      	blx	r3
 8003744:	4603      	mov	r3, r0
}
 8003746:	4618      	mov	r0, r3
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	20000a38 	.word	0x20000a38

08003750 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003750:	b580      	push	{r7, lr}
 8003752:	b090      	sub	sp, #64	; 0x40
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	6039      	str	r1, [r7, #0]
 800375a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 800375c:	2300      	movs	r3, #0
 800375e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8003760:	f7ff ffde 	bl	8003720 <BSP_LCD_GetXSize>
 8003764:	4603      	mov	r3, r0
 8003766:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800376c:	f7ff ffe4 	bl	8003738 <BSP_LCD_GetYSize>
 8003770:	4603      	mov	r3, r0
 8003772:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003774:	2300      	movs	r3, #0
 8003776:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800377c:	23ff      	movs	r3, #255	; 0xff
 800377e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8003780:	2300      	movs	r3, #0
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8003784:	2300      	movs	r3, #0
 8003786:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800378a:	2300      	movs	r3, #0
 800378c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8003790:	2300      	movs	r3, #0
 8003792:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003796:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800379a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800379c:	2307      	movs	r3, #7
 800379e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80037a0:	f7ff ffbe 	bl	8003720 <BSP_LCD_GetXSize>
 80037a4:	4603      	mov	r3, r0
 80037a6:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80037a8:	f7ff ffc6 	bl	8003738 <BSP_LCD_GetYSize>
 80037ac:	4603      	mov	r3, r0
 80037ae:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80037b0:	88fa      	ldrh	r2, [r7, #6]
 80037b2:	f107 030c 	add.w	r3, r7, #12
 80037b6:	4619      	mov	r1, r3
 80037b8:	4814      	ldr	r0, [pc, #80]	; (800380c <BSP_LCD_LayerDefaultInit+0xbc>)
 80037ba:	f002 fd3b 	bl	8006234 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80037be:	88fa      	ldrh	r2, [r7, #6]
 80037c0:	4913      	ldr	r1, [pc, #76]	; (8003810 <BSP_LCD_LayerDefaultInit+0xc0>)
 80037c2:	4613      	mov	r3, r2
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	4413      	add	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	440b      	add	r3, r1
 80037cc:	3304      	adds	r3, #4
 80037ce:	f04f 32ff 	mov.w	r2, #4294967295
 80037d2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80037d4:	88fa      	ldrh	r2, [r7, #6]
 80037d6:	490e      	ldr	r1, [pc, #56]	; (8003810 <BSP_LCD_LayerDefaultInit+0xc0>)
 80037d8:	4613      	mov	r3, r2
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	4413      	add	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	3308      	adds	r3, #8
 80037e4:	4a0b      	ldr	r2, [pc, #44]	; (8003814 <BSP_LCD_LayerDefaultInit+0xc4>)
 80037e6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80037e8:	88fa      	ldrh	r2, [r7, #6]
 80037ea:	4909      	ldr	r1, [pc, #36]	; (8003810 <BSP_LCD_LayerDefaultInit+0xc0>)
 80037ec:	4613      	mov	r3, r2
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	4413      	add	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80037fa:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80037fc:	4803      	ldr	r0, [pc, #12]	; (800380c <BSP_LCD_LayerDefaultInit+0xbc>)
 80037fe:	f002 fd57 	bl	80062b0 <HAL_LTDC_EnableDither>
}
 8003802:	bf00      	nop
 8003804:	3740      	adds	r7, #64	; 0x40
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	20000904 	.word	0x20000904
 8003810:	20000a20 	.word	0x20000a20
 8003814:	20000094 	.word	0x20000094

08003818 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003820:	4a04      	ldr	r2, [pc, #16]	; (8003834 <BSP_LCD_SelectLayer+0x1c>)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6013      	str	r3, [r2, #0]
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	20000a1c 	.word	0x20000a1c

08003838 <BSP_LCD_SetTextColor>:
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003840:	4b07      	ldr	r3, [pc, #28]	; (8003860 <BSP_LCD_SetTextColor+0x28>)
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	4907      	ldr	r1, [pc, #28]	; (8003864 <BSP_LCD_SetTextColor+0x2c>)
 8003846:	4613      	mov	r3, r2
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	601a      	str	r2, [r3, #0]
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	20000a1c 	.word	0x20000a1c
 8003864:	20000a20 	.word	0x20000a20

08003868 <BSP_LCD_SetBackColor>:
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003870:	4b08      	ldr	r3, [pc, #32]	; (8003894 <BSP_LCD_SetBackColor+0x2c>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	4908      	ldr	r1, [pc, #32]	; (8003898 <BSP_LCD_SetBackColor+0x30>)
 8003876:	4613      	mov	r3, r2
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	4413      	add	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	3304      	adds	r3, #4
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	601a      	str	r2, [r3, #0]
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20000a1c 	.word	0x20000a1c
 8003898:	20000a20 	.word	0x20000a20

0800389c <BSP_LCD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80038a4:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <BSP_LCD_SetFont+0x2c>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	4908      	ldr	r1, [pc, #32]	; (80038cc <BSP_LCD_SetFont+0x30>)
 80038aa:	4613      	mov	r3, r2
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	4413      	add	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	440b      	add	r3, r1
 80038b4:	3308      	adds	r3, #8
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	601a      	str	r2, [r3, #0]
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	20000a1c 	.word	0x20000a1c
 80038cc:	20000a20 	.word	0x20000a20

080038d0 <BSP_LCD_GetFont>:
  * @brief  Gets the Text Font.
  * @param  None
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80038d4:	4b07      	ldr	r3, [pc, #28]	; (80038f4 <BSP_LCD_GetFont+0x24>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	4907      	ldr	r1, [pc, #28]	; (80038f8 <BSP_LCD_GetFont+0x28>)
 80038da:	4613      	mov	r3, r2
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	4413      	add	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	3308      	adds	r3, #8
 80038e6:	681b      	ldr	r3, [r3, #0]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	20000a1c 	.word	0x20000a1c
 80038f8:	20000a20 	.word	0x20000a20

080038fc <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80038fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038fe:	b085      	sub	sp, #20
 8003900:	af02      	add	r7, sp, #8
 8003902:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003904:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <BSP_LCD_Clear+0x48>)
 8003906:	681c      	ldr	r4, [r3, #0]
 8003908:	4b0e      	ldr	r3, [pc, #56]	; (8003944 <BSP_LCD_Clear+0x48>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a0e      	ldr	r2, [pc, #56]	; (8003948 <BSP_LCD_Clear+0x4c>)
 800390e:	2134      	movs	r1, #52	; 0x34
 8003910:	fb01 f303 	mul.w	r3, r1, r3
 8003914:	4413      	add	r3, r2
 8003916:	335c      	adds	r3, #92	; 0x5c
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	461e      	mov	r6, r3
 800391c:	f7ff ff00 	bl	8003720 <BSP_LCD_GetXSize>
 8003920:	4605      	mov	r5, r0
 8003922:	f7ff ff09 	bl	8003738 <BSP_LCD_GetYSize>
 8003926:	4602      	mov	r2, r0
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	9301      	str	r3, [sp, #4]
 800392c:	2300      	movs	r3, #0
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	4613      	mov	r3, r2
 8003932:	462a      	mov	r2, r5
 8003934:	4631      	mov	r1, r6
 8003936:	4620      	mov	r0, r4
 8003938:	f000 fd0a 	bl	8004350 <FillBuffer>
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003944:	20000a1c 	.word	0x20000a1c
 8003948:	20000904 	.word	0x20000904

0800394c <BSP_LCD_DisplayChar>:
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800394c:	b590      	push	{r4, r7, lr}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	80fb      	strh	r3, [r7, #6]
 8003956:	460b      	mov	r3, r1
 8003958:	80bb      	strh	r3, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800395e:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <BSP_LCD_DisplayChar+0x80>)
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	491b      	ldr	r1, [pc, #108]	; (80039d0 <BSP_LCD_DisplayChar+0x84>)
 8003964:	4613      	mov	r3, r2
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	4413      	add	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	3308      	adds	r3, #8
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6819      	ldr	r1, [r3, #0]
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800397a:	4b14      	ldr	r3, [pc, #80]	; (80039cc <BSP_LCD_DisplayChar+0x80>)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	4c14      	ldr	r4, [pc, #80]	; (80039d0 <BSP_LCD_DisplayChar+0x84>)
 8003980:	4613      	mov	r3, r2
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	4413      	add	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4423      	add	r3, r4
 800398a:	3308      	adds	r3, #8
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003990:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003994:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <BSP_LCD_DisplayChar+0x80>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	4c0d      	ldr	r4, [pc, #52]	; (80039d0 <BSP_LCD_DisplayChar+0x84>)
 800399a:	4613      	mov	r3, r2
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	4413      	add	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4423      	add	r3, r4
 80039a4:	3308      	adds	r3, #8
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	889b      	ldrh	r3, [r3, #4]
 80039aa:	3307      	adds	r3, #7
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	da00      	bge.n	80039b2 <BSP_LCD_DisplayChar+0x66>
 80039b0:	3307      	adds	r3, #7
 80039b2:	10db      	asrs	r3, r3, #3
 80039b4:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80039b8:	18ca      	adds	r2, r1, r3
 80039ba:	88b9      	ldrh	r1, [r7, #4]
 80039bc:	88fb      	ldrh	r3, [r7, #6]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fc0c 	bl	80041dc <DrawChar>
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd90      	pop	{r4, r7, pc}
 80039cc:	20000a1c 	.word	0x20000a1c
 80039d0:	20000a20 	.word	0x20000a20

080039d4 <BSP_LCD_DisplayStringAt>:
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80039d4:	b5b0      	push	{r4, r5, r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60ba      	str	r2, [r7, #8]
 80039dc:	461a      	mov	r2, r3
 80039de:	4603      	mov	r3, r0
 80039e0:	81fb      	strh	r3, [r7, #14]
 80039e2:	460b      	mov	r3, r1
 80039e4:	81bb      	strh	r3, [r7, #12]
 80039e6:	4613      	mov	r3, r2
 80039e8:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80039ea:	2301      	movs	r3, #1
 80039ec:	83fb      	strh	r3, [r7, #30]
 80039ee:	2300      	movs	r3, #0
 80039f0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80039f2:	2300      	movs	r3, #0
 80039f4:	61bb      	str	r3, [r7, #24]
 80039f6:	2300      	movs	r3, #0
 80039f8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80039fe:	e002      	b.n	8003a06 <BSP_LCD_DisplayStringAt+0x32>
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	3301      	adds	r3, #1
 8003a04:	61bb      	str	r3, [r7, #24]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	617a      	str	r2, [r7, #20]
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f6      	bne.n	8003a00 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003a12:	f7ff fe85 	bl	8003720 <BSP_LCD_GetXSize>
 8003a16:	4601      	mov	r1, r0
 8003a18:	4b4b      	ldr	r3, [pc, #300]	; (8003b48 <BSP_LCD_DisplayStringAt+0x174>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	484b      	ldr	r0, [pc, #300]	; (8003b4c <BSP_LCD_DisplayStringAt+0x178>)
 8003a1e:	4613      	mov	r3, r2
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	4413      	add	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4403      	add	r3, r0
 8003a28:	3308      	adds	r3, #8
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	889b      	ldrh	r3, [r3, #4]
 8003a2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a32:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8003a34:	79fb      	ldrb	r3, [r7, #7]
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d01c      	beq.n	8003a74 <BSP_LCD_DisplayStringAt+0xa0>
 8003a3a:	2b03      	cmp	r3, #3
 8003a3c:	dc33      	bgt.n	8003aa6 <BSP_LCD_DisplayStringAt+0xd2>
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d002      	beq.n	8003a48 <BSP_LCD_DisplayStringAt+0x74>
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d019      	beq.n	8003a7a <BSP_LCD_DisplayStringAt+0xa6>
 8003a46:	e02e      	b.n	8003aa6 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	1ad1      	subs	r1, r2, r3
 8003a4e:	4b3e      	ldr	r3, [pc, #248]	; (8003b48 <BSP_LCD_DisplayStringAt+0x174>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	483e      	ldr	r0, [pc, #248]	; (8003b4c <BSP_LCD_DisplayStringAt+0x178>)
 8003a54:	4613      	mov	r3, r2
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	4413      	add	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4403      	add	r3, r0
 8003a5e:	3308      	adds	r3, #8
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	889b      	ldrh	r3, [r3, #4]
 8003a64:	fb01 f303 	mul.w	r3, r1, r3
 8003a68:	085b      	lsrs	r3, r3, #1
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	89fb      	ldrh	r3, [r7, #14]
 8003a6e:	4413      	add	r3, r2
 8003a70:	83fb      	strh	r3, [r7, #30]
      break;
 8003a72:	e01b      	b.n	8003aac <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8003a74:	89fb      	ldrh	r3, [r7, #14]
 8003a76:	83fb      	strh	r3, [r7, #30]
      break;
 8003a78:	e018      	b.n	8003aac <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	b299      	uxth	r1, r3
 8003a82:	4b31      	ldr	r3, [pc, #196]	; (8003b48 <BSP_LCD_DisplayStringAt+0x174>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	4831      	ldr	r0, [pc, #196]	; (8003b4c <BSP_LCD_DisplayStringAt+0x178>)
 8003a88:	4613      	mov	r3, r2
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4403      	add	r3, r0
 8003a92:	3308      	adds	r3, #8
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	889b      	ldrh	r3, [r3, #4]
 8003a98:	fb11 f303 	smulbb	r3, r1, r3
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	89fb      	ldrh	r3, [r7, #14]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	83fb      	strh	r3, [r7, #30]
      break;
 8003aa4:	e002      	b.n	8003aac <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8003aa6:	89fb      	ldrh	r3, [r7, #14]
 8003aa8:	83fb      	strh	r3, [r7, #30]
      break;
 8003aaa:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003aac:	e01a      	b.n	8003ae4 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	781a      	ldrb	r2, [r3, #0]
 8003ab2:	89b9      	ldrh	r1, [r7, #12]
 8003ab4:	8bfb      	ldrh	r3, [r7, #30]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff ff48 	bl	800394c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003abc:	4b22      	ldr	r3, [pc, #136]	; (8003b48 <BSP_LCD_DisplayStringAt+0x174>)
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	4922      	ldr	r1, [pc, #136]	; (8003b4c <BSP_LCD_DisplayStringAt+0x178>)
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	4413      	add	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	440b      	add	r3, r1
 8003acc:	3308      	adds	r3, #8
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	889a      	ldrh	r2, [r3, #4]
 8003ad2:	8bfb      	ldrh	r3, [r7, #30]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	3301      	adds	r3, #1
 8003adc:	60bb      	str	r3, [r7, #8]
    i++;
 8003ade:	8bbb      	ldrh	r3, [r7, #28]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	bf14      	ite	ne
 8003aec:	2301      	movne	r3, #1
 8003aee:	2300      	moveq	r3, #0
 8003af0:	b2dc      	uxtb	r4, r3
 8003af2:	f7ff fe15 	bl	8003720 <BSP_LCD_GetXSize>
 8003af6:	8bb9      	ldrh	r1, [r7, #28]
 8003af8:	4b13      	ldr	r3, [pc, #76]	; (8003b48 <BSP_LCD_DisplayStringAt+0x174>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	4d13      	ldr	r5, [pc, #76]	; (8003b4c <BSP_LCD_DisplayStringAt+0x178>)
 8003afe:	4613      	mov	r3, r2
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	442b      	add	r3, r5
 8003b08:	3308      	adds	r3, #8
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	889b      	ldrh	r3, [r3, #4]
 8003b0e:	fb01 f303 	mul.w	r3, r1, r3
 8003b12:	1ac3      	subs	r3, r0, r3
 8003b14:	b299      	uxth	r1, r3
 8003b16:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <BSP_LCD_DisplayStringAt+0x174>)
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	480c      	ldr	r0, [pc, #48]	; (8003b4c <BSP_LCD_DisplayStringAt+0x178>)
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4403      	add	r3, r0
 8003b26:	3308      	adds	r3, #8
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	889b      	ldrh	r3, [r3, #4]
 8003b2c:	4299      	cmp	r1, r3
 8003b2e:	bf2c      	ite	cs
 8003b30:	2301      	movcs	r3, #1
 8003b32:	2300      	movcc	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	4023      	ands	r3, r4
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1b7      	bne.n	8003aae <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8003b3e:	bf00      	nop
 8003b40:	bf00      	nop
 8003b42:	3720      	adds	r7, #32
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bdb0      	pop	{r4, r5, r7, pc}
 8003b48:	20000a1c 	.word	0x20000a1c
 8003b4c:	20000a20 	.word	0x20000a20

08003b50 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	4603      	mov	r3, r0
 8003b58:	6039      	str	r1, [r7, #0]
 8003b5a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8003b5c:	f7ff feb8 	bl	80038d0 <BSP_LCD_GetFont>
 8003b60:	4603      	mov	r3, r0
 8003b62:	88db      	ldrh	r3, [r3, #6]
 8003b64:	88fa      	ldrh	r2, [r7, #6]
 8003b66:	fb12 f303 	smulbb	r3, r2, r3
 8003b6a:	b299      	uxth	r1, r3
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	2000      	movs	r0, #0
 8003b72:	f7ff ff2f 	bl	80039d4 <BSP_LCD_DisplayStringAt>
}
 8003b76:	bf00      	nop
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <BSP_LCD_DrawHLine>:
  * @param  Ypos: the Y position
  * @param  Length: line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003b80:	b5b0      	push	{r4, r5, r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af02      	add	r7, sp, #8
 8003b86:	4603      	mov	r3, r0
 8003b88:	80fb      	strh	r3, [r7, #6]
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	80bb      	strh	r3, [r7, #4]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003b96:	4b16      	ldr	r3, [pc, #88]	; (8003bf0 <BSP_LCD_DrawHLine+0x70>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a16      	ldr	r2, [pc, #88]	; (8003bf4 <BSP_LCD_DrawHLine+0x74>)
 8003b9c:	2134      	movs	r1, #52	; 0x34
 8003b9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	335c      	adds	r3, #92	; 0x5c
 8003ba6:	681c      	ldr	r4, [r3, #0]
 8003ba8:	f7ff fdba 	bl	8003720 <BSP_LCD_GetXSize>
 8003bac:	4602      	mov	r2, r0
 8003bae:	88bb      	ldrh	r3, [r7, #4]
 8003bb0:	fb03 f202 	mul.w	r2, r3, r2
 8003bb4:	88fb      	ldrh	r3, [r7, #6]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4423      	add	r3, r4
 8003bbc:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8003bbe:	4b0c      	ldr	r3, [pc, #48]	; (8003bf0 <BSP_LCD_DrawHLine+0x70>)
 8003bc0:	6818      	ldr	r0, [r3, #0]
 8003bc2:	68f9      	ldr	r1, [r7, #12]
 8003bc4:	887c      	ldrh	r4, [r7, #2]
 8003bc6:	4b0a      	ldr	r3, [pc, #40]	; (8003bf0 <BSP_LCD_DrawHLine+0x70>)
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	4d0b      	ldr	r5, [pc, #44]	; (8003bf8 <BSP_LCD_DrawHLine+0x78>)
 8003bcc:	4613      	mov	r3, r2
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	442b      	add	r3, r5
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	9301      	str	r3, [sp, #4]
 8003bda:	2300      	movs	r3, #0
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	2301      	movs	r3, #1
 8003be0:	4622      	mov	r2, r4
 8003be2:	f000 fbb5 	bl	8004350 <FillBuffer>
}
 8003be6:	bf00      	nop
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bdb0      	pop	{r4, r5, r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20000a1c 	.word	0x20000a1c
 8003bf4:	20000904 	.word	0x20000904
 8003bf8:	20000a20 	.word	0x20000a20

08003bfc <BSP_LCD_DrawCircle>:
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003bfc:	b590      	push	{r4, r7, lr}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	80fb      	strh	r3, [r7, #6]
 8003c06:	460b      	mov	r3, r1
 8003c08:	80bb      	strh	r3, [r7, #4]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8003c0e:	887b      	ldrh	r3, [r7, #2]
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	f1c3 0303 	rsb	r3, r3, #3
 8003c16:	617b      	str	r3, [r7, #20]
  curx = 0;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003c1c:	887b      	ldrh	r3, [r7, #2]
 8003c1e:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8003c20:	e0c7      	b.n	8003db2 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	88fb      	ldrh	r3, [r7, #6]
 8003c28:	4413      	add	r3, r2
 8003c2a:	b298      	uxth	r0, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	88ba      	ldrh	r2, [r7, #4]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	b299      	uxth	r1, r3
 8003c36:	4b64      	ldr	r3, [pc, #400]	; (8003dc8 <BSP_LCD_DrawCircle+0x1cc>)
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	4c64      	ldr	r4, [pc, #400]	; (8003dcc <BSP_LCD_DrawCircle+0x1d0>)
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	4413      	add	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4423      	add	r3, r4
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	f000 faa1 	bl	8004190 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	88fa      	ldrh	r2, [r7, #6]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	b298      	uxth	r0, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	88ba      	ldrh	r2, [r7, #4]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	b299      	uxth	r1, r3
 8003c62:	4b59      	ldr	r3, [pc, #356]	; (8003dc8 <BSP_LCD_DrawCircle+0x1cc>)
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	4c59      	ldr	r4, [pc, #356]	; (8003dcc <BSP_LCD_DrawCircle+0x1d0>)
 8003c68:	4613      	mov	r3, r2
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4423      	add	r3, r4
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	461a      	mov	r2, r3
 8003c76:	f000 fa8b 	bl	8004190 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	88fb      	ldrh	r3, [r7, #6]
 8003c80:	4413      	add	r3, r2
 8003c82:	b298      	uxth	r0, r3
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	88ba      	ldrh	r2, [r7, #4]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	b299      	uxth	r1, r3
 8003c8e:	4b4e      	ldr	r3, [pc, #312]	; (8003dc8 <BSP_LCD_DrawCircle+0x1cc>)
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	4c4e      	ldr	r4, [pc, #312]	; (8003dcc <BSP_LCD_DrawCircle+0x1d0>)
 8003c94:	4613      	mov	r3, r2
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	4413      	add	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4423      	add	r3, r4
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	f000 fa75 	bl	8004190 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	88fa      	ldrh	r2, [r7, #6]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	b298      	uxth	r0, r3
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	88ba      	ldrh	r2, [r7, #4]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	b299      	uxth	r1, r3
 8003cba:	4b43      	ldr	r3, [pc, #268]	; (8003dc8 <BSP_LCD_DrawCircle+0x1cc>)
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	4c43      	ldr	r4, [pc, #268]	; (8003dcc <BSP_LCD_DrawCircle+0x1d0>)
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4423      	add	r3, r4
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	f000 fa5f 	bl	8004190 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	88fb      	ldrh	r3, [r7, #6]
 8003cd8:	4413      	add	r3, r2
 8003cda:	b298      	uxth	r0, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	88bb      	ldrh	r3, [r7, #4]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	b299      	uxth	r1, r3
 8003ce6:	4b38      	ldr	r3, [pc, #224]	; (8003dc8 <BSP_LCD_DrawCircle+0x1cc>)
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	4c38      	ldr	r4, [pc, #224]	; (8003dcc <BSP_LCD_DrawCircle+0x1d0>)
 8003cec:	4613      	mov	r3, r2
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	4413      	add	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4423      	add	r3, r4
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	f000 fa49 	bl	8004190 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	88fa      	ldrh	r2, [r7, #6]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	b298      	uxth	r0, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	88bb      	ldrh	r3, [r7, #4]
 8003d0e:	4413      	add	r3, r2
 8003d10:	b299      	uxth	r1, r3
 8003d12:	4b2d      	ldr	r3, [pc, #180]	; (8003dc8 <BSP_LCD_DrawCircle+0x1cc>)
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	4c2d      	ldr	r4, [pc, #180]	; (8003dcc <BSP_LCD_DrawCircle+0x1d0>)
 8003d18:	4613      	mov	r3, r2
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4423      	add	r3, r4
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	461a      	mov	r2, r3
 8003d26:	f000 fa33 	bl	8004190 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	88fb      	ldrh	r3, [r7, #6]
 8003d30:	4413      	add	r3, r2
 8003d32:	b298      	uxth	r0, r3
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	88bb      	ldrh	r3, [r7, #4]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	b299      	uxth	r1, r3
 8003d3e:	4b22      	ldr	r3, [pc, #136]	; (8003dc8 <BSP_LCD_DrawCircle+0x1cc>)
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	4c22      	ldr	r4, [pc, #136]	; (8003dcc <BSP_LCD_DrawCircle+0x1d0>)
 8003d44:	4613      	mov	r3, r2
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	4413      	add	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4423      	add	r3, r4
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	461a      	mov	r2, r3
 8003d52:	f000 fa1d 	bl	8004190 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	88fa      	ldrh	r2, [r7, #6]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	b298      	uxth	r0, r3
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	88bb      	ldrh	r3, [r7, #4]
 8003d66:	4413      	add	r3, r2
 8003d68:	b299      	uxth	r1, r3
 8003d6a:	4b17      	ldr	r3, [pc, #92]	; (8003dc8 <BSP_LCD_DrawCircle+0x1cc>)
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	4c17      	ldr	r4, [pc, #92]	; (8003dcc <BSP_LCD_DrawCircle+0x1d0>)
 8003d70:	4613      	mov	r3, r2
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	4413      	add	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4423      	add	r3, r4
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	f000 fa07 	bl	8004190 <BSP_LCD_DrawPixel>

    if (d < 0)
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	da06      	bge.n	8003d96 <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	009a      	lsls	r2, r3, #2
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	4413      	add	r3, r2
 8003d90:	3306      	adds	r3, #6
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	e00a      	b.n	8003dac <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	009a      	lsls	r2, r3, #2
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	4413      	add	r3, r2
 8003da2:	330a      	adds	r3, #10
 8003da4:	617b      	str	r3, [r7, #20]
      cury--;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	3b01      	subs	r3, #1
 8003daa:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	3301      	adds	r3, #1
 8003db0:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	f67f af33 	bls.w	8003c22 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003dbc:	bf00      	nop
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd90      	pop	{r4, r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20000a1c 	.word	0x20000a1c
 8003dcc:	20000a20 	.word	0x20000a20

08003dd0 <BSP_LCD_FillRect>:
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dd4:	b086      	sub	sp, #24
 8003dd6:	af02      	add	r7, sp, #8
 8003dd8:	4604      	mov	r4, r0
 8003dda:	4608      	mov	r0, r1
 8003ddc:	4611      	mov	r1, r2
 8003dde:	461a      	mov	r2, r3
 8003de0:	4623      	mov	r3, r4
 8003de2:	80fb      	strh	r3, [r7, #6]
 8003de4:	4603      	mov	r3, r0
 8003de6:	80bb      	strh	r3, [r7, #4]
 8003de8:	460b      	mov	r3, r1
 8003dea:	807b      	strh	r3, [r7, #2]
 8003dec:	4613      	mov	r3, r2
 8003dee:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8003df0:	2300      	movs	r3, #0
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003df4:	4b20      	ldr	r3, [pc, #128]	; (8003e78 <BSP_LCD_FillRect+0xa8>)
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	4920      	ldr	r1, [pc, #128]	; (8003e7c <BSP_LCD_FillRect+0xac>)
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff fd16 	bl	8003838 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003e0c:	4b1a      	ldr	r3, [pc, #104]	; (8003e78 <BSP_LCD_FillRect+0xa8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a1b      	ldr	r2, [pc, #108]	; (8003e80 <BSP_LCD_FillRect+0xb0>)
 8003e12:	2134      	movs	r1, #52	; 0x34
 8003e14:	fb01 f303 	mul.w	r3, r1, r3
 8003e18:	4413      	add	r3, r2
 8003e1a:	335c      	adds	r3, #92	; 0x5c
 8003e1c:	681c      	ldr	r4, [r3, #0]
 8003e1e:	f7ff fc7f 	bl	8003720 <BSP_LCD_GetXSize>
 8003e22:	4602      	mov	r2, r0
 8003e24:	88bb      	ldrh	r3, [r7, #4]
 8003e26:	fb03 f202 	mul.w	r2, r3, r2
 8003e2a:	88fb      	ldrh	r3, [r7, #6]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4423      	add	r3, r4
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003e34:	4b10      	ldr	r3, [pc, #64]	; (8003e78 <BSP_LCD_FillRect+0xa8>)
 8003e36:	681c      	ldr	r4, [r3, #0]
 8003e38:	68fd      	ldr	r5, [r7, #12]
 8003e3a:	887e      	ldrh	r6, [r7, #2]
 8003e3c:	f8b7 8000 	ldrh.w	r8, [r7]
 8003e40:	f7ff fc6e 	bl	8003720 <BSP_LCD_GetXSize>
 8003e44:	4602      	mov	r2, r0
 8003e46:	887b      	ldrh	r3, [r7, #2]
 8003e48:	1ad1      	subs	r1, r2, r3
 8003e4a:	4b0b      	ldr	r3, [pc, #44]	; (8003e78 <BSP_LCD_FillRect+0xa8>)
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	480b      	ldr	r0, [pc, #44]	; (8003e7c <BSP_LCD_FillRect+0xac>)
 8003e50:	4613      	mov	r3, r2
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4403      	add	r3, r0
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	9301      	str	r3, [sp, #4]
 8003e5e:	9100      	str	r1, [sp, #0]
 8003e60:	4643      	mov	r3, r8
 8003e62:	4632      	mov	r2, r6
 8003e64:	4629      	mov	r1, r5
 8003e66:	4620      	mov	r0, r4
 8003e68:	f000 fa72 	bl	8004350 <FillBuffer>
}
 8003e6c:	bf00      	nop
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e76:	bf00      	nop
 8003e78:	20000a1c 	.word	0x20000a1c
 8003e7c:	20000a20 	.word	0x20000a20
 8003e80:	20000904 	.word	0x20000904

08003e84 <BSP_LCD_FillCircle>:
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	80fb      	strh	r3, [r7, #6]
 8003e8e:	460b      	mov	r3, r1
 8003e90:	80bb      	strh	r3, [r7, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8003e96:	887b      	ldrh	r3, [r7, #2]
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	f1c3 0303 	rsb	r3, r3, #3
 8003e9e:	617b      	str	r3, [r7, #20]

  curx = 0;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003ea4:	887b      	ldrh	r3, [r7, #2]
 8003ea6:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003ea8:	4b44      	ldr	r3, [pc, #272]	; (8003fbc <BSP_LCD_FillCircle+0x138>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	4944      	ldr	r1, [pc, #272]	; (8003fc0 <BSP_LCD_FillCircle+0x13c>)
 8003eae:	4613      	mov	r3, r2
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	4413      	add	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff fcbc 	bl	8003838 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8003ec0:	e061      	b.n	8003f86 <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d021      	beq.n	8003f0c <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	88fa      	ldrh	r2, [r7, #6]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	b298      	uxth	r0, r3
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	88bb      	ldrh	r3, [r7, #4]
 8003ed8:	4413      	add	r3, r2
 8003eda:	b299      	uxth	r1, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	f7ff fe4b 	bl	8003b80 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	88fa      	ldrh	r2, [r7, #6]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	b298      	uxth	r0, r3
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	88ba      	ldrh	r2, [r7, #4]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	b299      	uxth	r1, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	461a      	mov	r2, r3
 8003f08:	f7ff fe3a 	bl	8003b80 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d021      	beq.n	8003f56 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	88fa      	ldrh	r2, [r7, #6]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	b298      	uxth	r0, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	88ba      	ldrh	r2, [r7, #4]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	b299      	uxth	r1, r3
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f7ff fe26 	bl	8003b80 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	88fa      	ldrh	r2, [r7, #6]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	b298      	uxth	r0, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	88bb      	ldrh	r3, [r7, #4]
 8003f44:	4413      	add	r3, r2
 8003f46:	b299      	uxth	r1, r3
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	461a      	mov	r2, r3
 8003f52:	f7ff fe15 	bl	8003b80 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	da06      	bge.n	8003f6a <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	009a      	lsls	r2, r3, #2
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	4413      	add	r3, r2
 8003f64:	3306      	adds	r3, #6
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	e00a      	b.n	8003f80 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	009a      	lsls	r2, r3, #2
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	4413      	add	r3, r2
 8003f76:	330a      	adds	r3, #10
 8003f78:	617b      	str	r3, [r7, #20]
      cury--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	3301      	adds	r3, #1
 8003f84:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d999      	bls.n	8003ec2 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003f8e:	4b0b      	ldr	r3, [pc, #44]	; (8003fbc <BSP_LCD_FillCircle+0x138>)
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	490b      	ldr	r1, [pc, #44]	; (8003fc0 <BSP_LCD_FillCircle+0x13c>)
 8003f94:	4613      	mov	r3, r2
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	4413      	add	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff fc49 	bl	8003838 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003fa6:	887a      	ldrh	r2, [r7, #2]
 8003fa8:	88b9      	ldrh	r1, [r7, #4]
 8003faa:	88fb      	ldrh	r3, [r7, #6]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff fe25 	bl	8003bfc <BSP_LCD_DrawCircle>
}
 8003fb2:	bf00      	nop
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000a1c 	.word	0x20000a1c
 8003fc0:	20000a20 	.word	0x20000a20

08003fc4 <BSP_LCD_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003fc8:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <BSP_LCD_DisplayOn+0x1c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003fd2:	4b03      	ldr	r3, [pc, #12]	; (8003fe0 <BSP_LCD_DisplayOn+0x1c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	4798      	blx	r3
  }
}
 8003fda:	bf00      	nop
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	20000a38 	.word	0x20000a38

08003fe4 <MspInit>:
  * @brief  Initializes the LTDC MSP.
  * @param  None
  * @retval None
  */
static void MspInit(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08e      	sub	sp, #56	; 0x38
 8003fe8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __LTDC_CLK_ENABLE();
 8003fea:	2300      	movs	r3, #0
 8003fec:	623b      	str	r3, [r7, #32]
 8003fee:	4b61      	ldr	r3, [pc, #388]	; (8004174 <MspInit+0x190>)
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff2:	4a60      	ldr	r2, [pc, #384]	; (8004174 <MspInit+0x190>)
 8003ff4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8003ffa:	4b5e      	ldr	r3, [pc, #376]	; (8004174 <MspInit+0x190>)
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004002:	623b      	str	r3, [r7, #32]
 8004004:	6a3b      	ldr	r3, [r7, #32]
  __DMA2D_CLK_ENABLE(); 
 8004006:	2300      	movs	r3, #0
 8004008:	61fb      	str	r3, [r7, #28]
 800400a:	4b5a      	ldr	r3, [pc, #360]	; (8004174 <MspInit+0x190>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	4a59      	ldr	r2, [pc, #356]	; (8004174 <MspInit+0x190>)
 8004010:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004014:	6313      	str	r3, [r2, #48]	; 0x30
 8004016:	4b57      	ldr	r3, [pc, #348]	; (8004174 <MspInit+0x190>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800401e:	61fb      	str	r3, [r7, #28]
 8004020:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __GPIOA_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	61bb      	str	r3, [r7, #24]
 8004026:	4b53      	ldr	r3, [pc, #332]	; (8004174 <MspInit+0x190>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	4a52      	ldr	r2, [pc, #328]	; (8004174 <MspInit+0x190>)
 800402c:	f043 0301 	orr.w	r3, r3, #1
 8004030:	6313      	str	r3, [r2, #48]	; 0x30
 8004032:	4b50      	ldr	r3, [pc, #320]	; (8004174 <MspInit+0x190>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	61bb      	str	r3, [r7, #24]
 800403c:	69bb      	ldr	r3, [r7, #24]
  __GPIOB_CLK_ENABLE();
 800403e:	2300      	movs	r3, #0
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	4b4c      	ldr	r3, [pc, #304]	; (8004174 <MspInit+0x190>)
 8004044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004046:	4a4b      	ldr	r2, [pc, #300]	; (8004174 <MspInit+0x190>)
 8004048:	f043 0302 	orr.w	r3, r3, #2
 800404c:	6313      	str	r3, [r2, #48]	; 0x30
 800404e:	4b49      	ldr	r3, [pc, #292]	; (8004174 <MspInit+0x190>)
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	697b      	ldr	r3, [r7, #20]
  __GPIOC_CLK_ENABLE();
 800405a:	2300      	movs	r3, #0
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	4b45      	ldr	r3, [pc, #276]	; (8004174 <MspInit+0x190>)
 8004060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004062:	4a44      	ldr	r2, [pc, #272]	; (8004174 <MspInit+0x190>)
 8004064:	f043 0304 	orr.w	r3, r3, #4
 8004068:	6313      	str	r3, [r2, #48]	; 0x30
 800406a:	4b42      	ldr	r3, [pc, #264]	; (8004174 <MspInit+0x190>)
 800406c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	613b      	str	r3, [r7, #16]
 8004074:	693b      	ldr	r3, [r7, #16]
  __GPIOD_CLK_ENABLE();
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	4b3e      	ldr	r3, [pc, #248]	; (8004174 <MspInit+0x190>)
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	4a3d      	ldr	r2, [pc, #244]	; (8004174 <MspInit+0x190>)
 8004080:	f043 0308 	orr.w	r3, r3, #8
 8004084:	6313      	str	r3, [r2, #48]	; 0x30
 8004086:	4b3b      	ldr	r3, [pc, #236]	; (8004174 <MspInit+0x190>)
 8004088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408a:	f003 0308 	and.w	r3, r3, #8
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	68fb      	ldr	r3, [r7, #12]
  __GPIOF_CLK_ENABLE();
 8004092:	2300      	movs	r3, #0
 8004094:	60bb      	str	r3, [r7, #8]
 8004096:	4b37      	ldr	r3, [pc, #220]	; (8004174 <MspInit+0x190>)
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	4a36      	ldr	r2, [pc, #216]	; (8004174 <MspInit+0x190>)
 800409c:	f043 0320 	orr.w	r3, r3, #32
 80040a0:	6313      	str	r3, [r2, #48]	; 0x30
 80040a2:	4b34      	ldr	r3, [pc, #208]	; (8004174 <MspInit+0x190>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	60bb      	str	r3, [r7, #8]
 80040ac:	68bb      	ldr	r3, [r7, #8]
  __GPIOG_CLK_ENABLE();
 80040ae:	2300      	movs	r3, #0
 80040b0:	607b      	str	r3, [r7, #4]
 80040b2:	4b30      	ldr	r3, [pc, #192]	; (8004174 <MspInit+0x190>)
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	4a2f      	ldr	r2, [pc, #188]	; (8004174 <MspInit+0x190>)
 80040b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040bc:	6313      	str	r3, [r2, #48]	; 0x30
 80040be:	4b2d      	ldr	r3, [pc, #180]	; (8004174 <MspInit+0x190>)
 80040c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c6:	607b      	str	r3, [r7, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80040ca:	f641 0358 	movw	r3, #6232	; 0x1858
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80040d0:	2302      	movs	r3, #2
 80040d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80040d8:	2302      	movs	r3, #2
 80040da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80040dc:	230e      	movs	r3, #14
 80040de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80040e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040e4:	4619      	mov	r1, r3
 80040e6:	4824      	ldr	r0, [pc, #144]	; (8004178 <MspInit+0x194>)
 80040e8:	f001 fa72 	bl	80055d0 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80040ec:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80040f0:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80040f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040f6:	4619      	mov	r1, r3
 80040f8:	4820      	ldr	r0, [pc, #128]	; (800417c <MspInit+0x198>)
 80040fa:	f001 fa69 	bl	80055d0 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80040fe:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004108:	4619      	mov	r1, r3
 800410a:	481d      	ldr	r0, [pc, #116]	; (8004180 <MspInit+0x19c>)
 800410c:	f001 fa60 	bl	80055d0 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8004110:	2348      	movs	r3, #72	; 0x48
 8004112:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004118:	4619      	mov	r1, r3
 800411a:	481a      	ldr	r0, [pc, #104]	; (8004184 <MspInit+0x1a0>)
 800411c:	f001 fa58 	bl	80055d0 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8004120:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8004126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800412a:	4619      	mov	r1, r3
 800412c:	4816      	ldr	r0, [pc, #88]	; (8004188 <MspInit+0x1a4>)
 800412e:	f001 fa4f 	bl	80055d0 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8004132:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8004136:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800413c:	4619      	mov	r1, r3
 800413e:	4813      	ldr	r0, [pc, #76]	; (800418c <MspInit+0x1a8>)
 8004140:	f001 fa46 	bl	80055d0 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8004144:	2303      	movs	r3, #3
 8004146:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8004148:	2309      	movs	r3, #9
 800414a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800414c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004150:	4619      	mov	r1, r3
 8004152:	480a      	ldr	r0, [pc, #40]	; (800417c <MspInit+0x198>)
 8004154:	f001 fa3c 	bl	80055d0 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8004158:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800415e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004162:	4619      	mov	r1, r3
 8004164:	4809      	ldr	r0, [pc, #36]	; (800418c <MspInit+0x1a8>)
 8004166:	f001 fa33 	bl	80055d0 <HAL_GPIO_Init>
}
 800416a:	bf00      	nop
 800416c:	3738      	adds	r7, #56	; 0x38
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40023800 	.word	0x40023800
 8004178:	40020000 	.word	0x40020000
 800417c:	40020400 	.word	0x40020400
 8004180:	40020800 	.word	0x40020800
 8004184:	40020c00 	.word	0x40020c00
 8004188:	40021400 	.word	0x40021400
 800418c:	40021800 	.word	0x40021800

08004190 <BSP_LCD_DrawPixel>:
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004190:	b5b0      	push	{r4, r5, r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	4603      	mov	r3, r0
 8004198:	603a      	str	r2, [r7, #0]
 800419a:	80fb      	strh	r3, [r7, #6]
 800419c:	460b      	mov	r3, r1
 800419e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <BSP_LCD_DrawPixel+0x44>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a0c      	ldr	r2, [pc, #48]	; (80041d8 <BSP_LCD_DrawPixel+0x48>)
 80041a6:	2134      	movs	r1, #52	; 0x34
 80041a8:	fb01 f303 	mul.w	r3, r1, r3
 80041ac:	4413      	add	r3, r2
 80041ae:	335c      	adds	r3, #92	; 0x5c
 80041b0:	681c      	ldr	r4, [r3, #0]
 80041b2:	88bd      	ldrh	r5, [r7, #4]
 80041b4:	f7ff fab4 	bl	8003720 <BSP_LCD_GetXSize>
 80041b8:	4603      	mov	r3, r0
 80041ba:	fb03 f205 	mul.w	r2, r3, r5
 80041be:	88fb      	ldrh	r3, [r7, #6]
 80041c0:	4413      	add	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4423      	add	r3, r4
 80041c6:	461a      	mov	r2, r3
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	6013      	str	r3, [r2, #0]
}
 80041cc:	bf00      	nop
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bdb0      	pop	{r4, r5, r7, pc}
 80041d4:	20000a1c 	.word	0x20000a1c
 80041d8:	20000904 	.word	0x20000904

080041dc <DrawChar>:
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4603      	mov	r3, r0
 80041e4:	603a      	str	r2, [r7, #0]
 80041e6:	80fb      	strh	r3, [r7, #6]
 80041e8:	460b      	mov	r3, r1
 80041ea:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80041ec:	2300      	movs	r3, #0
 80041ee:	61fb      	str	r3, [r7, #28]
 80041f0:	2300      	movs	r3, #0
 80041f2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80041f8:	4b53      	ldr	r3, [pc, #332]	; (8004348 <DrawChar+0x16c>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	4953      	ldr	r1, [pc, #332]	; (800434c <DrawChar+0x170>)
 80041fe:	4613      	mov	r3, r2
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	4413      	add	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	440b      	add	r3, r1
 8004208:	3308      	adds	r3, #8
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	88db      	ldrh	r3, [r3, #6]
 800420e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004210:	4b4d      	ldr	r3, [pc, #308]	; (8004348 <DrawChar+0x16c>)
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	494d      	ldr	r1, [pc, #308]	; (800434c <DrawChar+0x170>)
 8004216:	4613      	mov	r3, r2
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	4413      	add	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	440b      	add	r3, r1
 8004220:	3308      	adds	r3, #8
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	889b      	ldrh	r3, [r3, #4]
 8004226:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8004228:	8a3b      	ldrh	r3, [r7, #16]
 800422a:	3307      	adds	r3, #7
 800422c:	2b00      	cmp	r3, #0
 800422e:	da00      	bge.n	8004232 <DrawChar+0x56>
 8004230:	3307      	adds	r3, #7
 8004232:	10db      	asrs	r3, r3, #3
 8004234:	b2db      	uxtb	r3, r3
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	b2da      	uxtb	r2, r3
 800423a:	8a3b      	ldrh	r3, [r7, #16]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8004242:	2300      	movs	r3, #0
 8004244:	61fb      	str	r3, [r7, #28]
 8004246:	e076      	b.n	8004336 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004248:	8a3b      	ldrh	r3, [r7, #16]
 800424a:	3307      	adds	r3, #7
 800424c:	2b00      	cmp	r3, #0
 800424e:	da00      	bge.n	8004252 <DrawChar+0x76>
 8004250:	3307      	adds	r3, #7
 8004252:	10db      	asrs	r3, r3, #3
 8004254:	461a      	mov	r2, r3
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	fb02 f303 	mul.w	r3, r2, r3
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	4413      	add	r3, r2
 8004260:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8004262:	8a3b      	ldrh	r3, [r7, #16]
 8004264:	3307      	adds	r3, #7
 8004266:	2b00      	cmp	r3, #0
 8004268:	da00      	bge.n	800426c <DrawChar+0x90>
 800426a:	3307      	adds	r3, #7
 800426c:	10db      	asrs	r3, r3, #3
 800426e:	2b01      	cmp	r3, #1
 8004270:	d002      	beq.n	8004278 <DrawChar+0x9c>
 8004272:	2b02      	cmp	r3, #2
 8004274:	d004      	beq.n	8004280 <DrawChar+0xa4>
 8004276:	e00c      	b.n	8004292 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	617b      	str	r3, [r7, #20]
      break;
 800427e:	e016      	b.n	80042ae <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	021b      	lsls	r3, r3, #8
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	3201      	adds	r2, #1
 800428a:	7812      	ldrb	r2, [r2, #0]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]
      break;
 8004290:	e00d      	b.n	80042ae <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	041a      	lsls	r2, r3, #16
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	3301      	adds	r3, #1
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	021b      	lsls	r3, r3, #8
 80042a0:	4313      	orrs	r3, r2
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	3202      	adds	r2, #2
 80042a6:	7812      	ldrb	r2, [r2, #0]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	617b      	str	r3, [r7, #20]
      break;
 80042ac:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80042ae:	2300      	movs	r3, #0
 80042b0:	61bb      	str	r3, [r7, #24]
 80042b2:	e036      	b.n	8004322 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80042b4:	8a3a      	ldrh	r2, [r7, #16]
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	1ad2      	subs	r2, r2, r3
 80042ba:	7bfb      	ldrb	r3, [r7, #15]
 80042bc:	4413      	add	r3, r2
 80042be:	3b01      	subs	r3, #1
 80042c0:	2201      	movs	r2, #1
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	461a      	mov	r2, r3
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d012      	beq.n	80042f6 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	88fb      	ldrh	r3, [r7, #6]
 80042d6:	4413      	add	r3, r2
 80042d8:	b298      	uxth	r0, r3
 80042da:	4b1b      	ldr	r3, [pc, #108]	; (8004348 <DrawChar+0x16c>)
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	491b      	ldr	r1, [pc, #108]	; (800434c <DrawChar+0x170>)
 80042e0:	4613      	mov	r3, r2
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	4413      	add	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	440b      	add	r3, r1
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	88bb      	ldrh	r3, [r7, #4]
 80042ee:	4619      	mov	r1, r3
 80042f0:	f7ff ff4e 	bl	8004190 <BSP_LCD_DrawPixel>
 80042f4:	e012      	b.n	800431c <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	88fb      	ldrh	r3, [r7, #6]
 80042fc:	4413      	add	r3, r2
 80042fe:	b298      	uxth	r0, r3
 8004300:	4b11      	ldr	r3, [pc, #68]	; (8004348 <DrawChar+0x16c>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	4911      	ldr	r1, [pc, #68]	; (800434c <DrawChar+0x170>)
 8004306:	4613      	mov	r3, r2
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	4413      	add	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	440b      	add	r3, r1
 8004310:	3304      	adds	r3, #4
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	88bb      	ldrh	r3, [r7, #4]
 8004316:	4619      	mov	r1, r3
 8004318:	f7ff ff3a 	bl	8004190 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	3301      	adds	r3, #1
 8004320:	61bb      	str	r3, [r7, #24]
 8004322:	8a3b      	ldrh	r3, [r7, #16]
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	429a      	cmp	r2, r3
 8004328:	d3c4      	bcc.n	80042b4 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 800432a:	88bb      	ldrh	r3, [r7, #4]
 800432c:	3301      	adds	r3, #1
 800432e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	3301      	adds	r3, #1
 8004334:	61fb      	str	r3, [r7, #28]
 8004336:	8a7b      	ldrh	r3, [r7, #18]
 8004338:	69fa      	ldr	r2, [r7, #28]
 800433a:	429a      	cmp	r2, r3
 800433c:	d384      	bcc.n	8004248 <DrawChar+0x6c>
  }
}
 800433e:	bf00      	nop
 8004340:	bf00      	nop
 8004342:	3720      	adds	r7, #32
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	20000a1c 	.word	0x20000a1c
 800434c:	20000a20 	.word	0x20000a20

08004350 <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  * @retval None
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af02      	add	r7, sp, #8
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
 800435c:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800435e:	4b16      	ldr	r3, [pc, #88]	; (80043b8 <FillBuffer+0x68>)
 8004360:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004364:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004366:	4b14      	ldr	r3, [pc, #80]	; (80043b8 <FillBuffer+0x68>)
 8004368:	2200      	movs	r2, #0
 800436a:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 800436c:	4a12      	ldr	r2, [pc, #72]	; (80043b8 <FillBuffer+0x68>)
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8004372:	4b11      	ldr	r3, [pc, #68]	; (80043b8 <FillBuffer+0x68>)
 8004374:	4a11      	ldr	r2, [pc, #68]	; (80043bc <FillBuffer+0x6c>)
 8004376:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8004378:	480f      	ldr	r0, [pc, #60]	; (80043b8 <FillBuffer+0x68>)
 800437a:	f000 fd8d 	bl	8004e98 <HAL_DMA2D_Init>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d115      	bne.n	80043b0 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8004384:	68f9      	ldr	r1, [r7, #12]
 8004386:	480c      	ldr	r0, [pc, #48]	; (80043b8 <FillBuffer+0x68>)
 8004388:	f000 fff4 	bl	8005374 <HAL_DMA2D_ConfigLayer>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10e      	bne.n	80043b0 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	69f9      	ldr	r1, [r7, #28]
 800439c:	4806      	ldr	r0, [pc, #24]	; (80043b8 <FillBuffer+0x68>)
 800439e:	f000 fdc4 	bl	8004f2a <HAL_DMA2D_Start>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d103      	bne.n	80043b0 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80043a8:	210a      	movs	r1, #10
 80043aa:	4803      	ldr	r0, [pc, #12]	; (80043b8 <FillBuffer+0x68>)
 80043ac:	f000 fde8 	bl	8004f80 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80043b0:	bf00      	nop
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	200009ac 	.word	0x200009ac
 80043bc:	4002b000 	.word	0x4002b000

080043c0 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param  None
  * @retval None
  */
void BSP_SDRAM_Init(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80043c4:	4b22      	ldr	r3, [pc, #136]	; (8004450 <BSP_SDRAM_Init+0x90>)
 80043c6:	4a23      	ldr	r2, [pc, #140]	; (8004454 <BSP_SDRAM_Init+0x94>)
 80043c8:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80043ca:	4b23      	ldr	r3, [pc, #140]	; (8004458 <BSP_SDRAM_Init+0x98>)
 80043cc:	2202      	movs	r2, #2
 80043ce:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80043d0:	4b21      	ldr	r3, [pc, #132]	; (8004458 <BSP_SDRAM_Init+0x98>)
 80043d2:	2207      	movs	r2, #7
 80043d4:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80043d6:	4b20      	ldr	r3, [pc, #128]	; (8004458 <BSP_SDRAM_Init+0x98>)
 80043d8:	2204      	movs	r2, #4
 80043da:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80043dc:	4b1e      	ldr	r3, [pc, #120]	; (8004458 <BSP_SDRAM_Init+0x98>)
 80043de:	2207      	movs	r2, #7
 80043e0:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80043e2:	4b1d      	ldr	r3, [pc, #116]	; (8004458 <BSP_SDRAM_Init+0x98>)
 80043e4:	2202      	movs	r2, #2
 80043e6:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80043e8:	4b1b      	ldr	r3, [pc, #108]	; (8004458 <BSP_SDRAM_Init+0x98>)
 80043ea:	2202      	movs	r2, #2
 80043ec:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80043ee:	4b1a      	ldr	r3, [pc, #104]	; (8004458 <BSP_SDRAM_Init+0x98>)
 80043f0:	2202      	movs	r2, #2
 80043f2:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80043f4:	4b16      	ldr	r3, [pc, #88]	; (8004450 <BSP_SDRAM_Init+0x90>)
 80043f6:	2201      	movs	r2, #1
 80043f8:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80043fa:	4b15      	ldr	r3, [pc, #84]	; (8004450 <BSP_SDRAM_Init+0x90>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004400:	4b13      	ldr	r3, [pc, #76]	; (8004450 <BSP_SDRAM_Init+0x90>)
 8004402:	2204      	movs	r2, #4
 8004404:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004406:	4b12      	ldr	r3, [pc, #72]	; (8004450 <BSP_SDRAM_Init+0x90>)
 8004408:	2210      	movs	r2, #16
 800440a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800440c:	4b10      	ldr	r3, [pc, #64]	; (8004450 <BSP_SDRAM_Init+0x90>)
 800440e:	2240      	movs	r2, #64	; 0x40
 8004410:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8004412:	4b0f      	ldr	r3, [pc, #60]	; (8004450 <BSP_SDRAM_Init+0x90>)
 8004414:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8004418:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800441a:	4b0d      	ldr	r3, [pc, #52]	; (8004450 <BSP_SDRAM_Init+0x90>)
 800441c:	2200      	movs	r2, #0
 800441e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004420:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <BSP_SDRAM_Init+0x90>)
 8004422:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004426:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8004428:	4b09      	ldr	r3, [pc, #36]	; (8004450 <BSP_SDRAM_Init+0x90>)
 800442a:	2200      	movs	r2, #0
 800442c:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800442e:	4b08      	ldr	r3, [pc, #32]	; (8004450 <BSP_SDRAM_Init+0x90>)
 8004430:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004434:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  MspInit();
 8004436:	f000 f871 	bl	800451c <MspInit>
  HAL_SDRAM_Init(&SdramHandle, &Timing);
 800443a:	4907      	ldr	r1, [pc, #28]	; (8004458 <BSP_SDRAM_Init+0x98>)
 800443c:	4804      	ldr	r0, [pc, #16]	; (8004450 <BSP_SDRAM_Init+0x90>)
 800443e:	f002 ffd3 	bl	80073e8 <HAL_SDRAM_Init>
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004442:	f240 506a 	movw	r0, #1386	; 0x56a
 8004446:	f000 f809 	bl	800445c <BSP_SDRAM_Initialization_sequence>
}
 800444a:	bf00      	nop
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	20000a3c 	.word	0x20000a3c
 8004454:	a0000140 	.word	0xa0000140
 8004458:	20000a70 	.word	0x20000a70

0800445c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8004464:	2300      	movs	r3, #0
 8004466:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8004468:	4b2a      	ldr	r3, [pc, #168]	; (8004514 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800446a:	2201      	movs	r2, #1
 800446c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800446e:	4b29      	ldr	r3, [pc, #164]	; (8004514 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004470:	2208      	movs	r2, #8
 8004472:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004474:	4b27      	ldr	r3, [pc, #156]	; (8004514 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004476:	2201      	movs	r2, #1
 8004478:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800447a:	4b26      	ldr	r3, [pc, #152]	; (8004514 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800447c:	2200      	movs	r2, #0
 800447e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004480:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004484:	4923      	ldr	r1, [pc, #140]	; (8004514 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004486:	4824      	ldr	r0, [pc, #144]	; (8004518 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004488:	f002 ffe2 	bl	8007450 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800448c:	2001      	movs	r0, #1
 800448e:	f000 f991 	bl	80047b4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8004492:	4b20      	ldr	r3, [pc, #128]	; (8004514 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004494:	2202      	movs	r2, #2
 8004496:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004498:	4b1e      	ldr	r3, [pc, #120]	; (8004514 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800449a:	2208      	movs	r2, #8
 800449c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800449e:	4b1d      	ldr	r3, [pc, #116]	; (8004514 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044a0:	2201      	movs	r2, #1
 80044a2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80044a4:	4b1b      	ldr	r3, [pc, #108]	; (8004514 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80044aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044ae:	4919      	ldr	r1, [pc, #100]	; (8004514 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044b0:	4819      	ldr	r0, [pc, #100]	; (8004518 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80044b2:	f002 ffcd 	bl	8007450 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80044b6:	4b17      	ldr	r3, [pc, #92]	; (8004514 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044b8:	2203      	movs	r2, #3
 80044ba:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80044bc:	4b15      	ldr	r3, [pc, #84]	; (8004514 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044be:	2208      	movs	r2, #8
 80044c0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80044c2:	4b14      	ldr	r3, [pc, #80]	; (8004514 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044c4:	2204      	movs	r2, #4
 80044c6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80044c8:	4b12      	ldr	r3, [pc, #72]	; (8004514 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80044ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044d2:	4910      	ldr	r1, [pc, #64]	; (8004514 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044d4:	4810      	ldr	r0, [pc, #64]	; (8004518 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80044d6:	f002 ffbb 	bl	8007450 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80044da:	f44f 730c 	mov.w	r3, #560	; 0x230
 80044de:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80044e0:	4b0c      	ldr	r3, [pc, #48]	; (8004514 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044e2:	2204      	movs	r2, #4
 80044e4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80044e6:	4b0b      	ldr	r3, [pc, #44]	; (8004514 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044e8:	2208      	movs	r2, #8
 80044ea:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80044ec:	4b09      	ldr	r3, [pc, #36]	; (8004514 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044ee:	2201      	movs	r2, #1
 80044f0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	4a07      	ldr	r2, [pc, #28]	; (8004514 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044f6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80044f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044fc:	4905      	ldr	r1, [pc, #20]	; (8004514 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80044fe:	4806      	ldr	r0, [pc, #24]	; (8004518 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004500:	f002 ffa6 	bl	8007450 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	4804      	ldr	r0, [pc, #16]	; (8004518 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004508:	f002 ffd7 	bl	80074ba <HAL_SDRAM_ProgramRefreshRate>
}
 800450c:	bf00      	nop
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	20000a8c 	.word	0x20000a8c
 8004518:	20000a3c 	.word	0x20000a3c

0800451c <MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  None
  * @retval None
  */
static void MspInit(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08e      	sub	sp, #56	; 0x38
 8004520:	af00      	add	r7, sp, #0
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;
  SDRAM_HandleTypeDef  *hsdram = &SdramHandle;
 8004522:	4b79      	ldr	r3, [pc, #484]	; (8004708 <MspInit+0x1ec>)
 8004524:	637b      	str	r3, [r7, #52]	; 0x34

  /* Enable FMC clock */
  __FMC_CLK_ENABLE();
 8004526:	2300      	movs	r3, #0
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	4b78      	ldr	r3, [pc, #480]	; (800470c <MspInit+0x1f0>)
 800452c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452e:	4a77      	ldr	r2, [pc, #476]	; (800470c <MspInit+0x1f0>)
 8004530:	f043 0301 	orr.w	r3, r3, #1
 8004534:	6393      	str	r3, [r2, #56]	; 0x38
 8004536:	4b75      	ldr	r3, [pc, #468]	; (800470c <MspInit+0x1f0>)
 8004538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	61fb      	str	r3, [r7, #28]
 8004540:	69fb      	ldr	r3, [r7, #28]

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004542:	2300      	movs	r3, #0
 8004544:	61bb      	str	r3, [r7, #24]
 8004546:	4b71      	ldr	r3, [pc, #452]	; (800470c <MspInit+0x1f0>)
 8004548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454a:	4a70      	ldr	r2, [pc, #448]	; (800470c <MspInit+0x1f0>)
 800454c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004550:	6313      	str	r3, [r2, #48]	; 0x30
 8004552:	4b6e      	ldr	r3, [pc, #440]	; (800470c <MspInit+0x1f0>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800455a:	61bb      	str	r3, [r7, #24]
 800455c:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __GPIOB_CLK_ENABLE();
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]
 8004562:	4b6a      	ldr	r3, [pc, #424]	; (800470c <MspInit+0x1f0>)
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	4a69      	ldr	r2, [pc, #420]	; (800470c <MspInit+0x1f0>)
 8004568:	f043 0302 	orr.w	r3, r3, #2
 800456c:	6313      	str	r3, [r2, #48]	; 0x30
 800456e:	4b67      	ldr	r3, [pc, #412]	; (800470c <MspInit+0x1f0>)
 8004570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	697b      	ldr	r3, [r7, #20]
  __GPIOC_CLK_ENABLE();
 800457a:	2300      	movs	r3, #0
 800457c:	613b      	str	r3, [r7, #16]
 800457e:	4b63      	ldr	r3, [pc, #396]	; (800470c <MspInit+0x1f0>)
 8004580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004582:	4a62      	ldr	r2, [pc, #392]	; (800470c <MspInit+0x1f0>)
 8004584:	f043 0304 	orr.w	r3, r3, #4
 8004588:	6313      	str	r3, [r2, #48]	; 0x30
 800458a:	4b60      	ldr	r3, [pc, #384]	; (800470c <MspInit+0x1f0>)
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	f003 0304 	and.w	r3, r3, #4
 8004592:	613b      	str	r3, [r7, #16]
 8004594:	693b      	ldr	r3, [r7, #16]
  __GPIOD_CLK_ENABLE();
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	4b5c      	ldr	r3, [pc, #368]	; (800470c <MspInit+0x1f0>)
 800459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459e:	4a5b      	ldr	r2, [pc, #364]	; (800470c <MspInit+0x1f0>)
 80045a0:	f043 0308 	orr.w	r3, r3, #8
 80045a4:	6313      	str	r3, [r2, #48]	; 0x30
 80045a6:	4b59      	ldr	r3, [pc, #356]	; (800470c <MspInit+0x1f0>)
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	68fb      	ldr	r3, [r7, #12]
  __GPIOE_CLK_ENABLE();
 80045b2:	2300      	movs	r3, #0
 80045b4:	60bb      	str	r3, [r7, #8]
 80045b6:	4b55      	ldr	r3, [pc, #340]	; (800470c <MspInit+0x1f0>)
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	4a54      	ldr	r2, [pc, #336]	; (800470c <MspInit+0x1f0>)
 80045bc:	f043 0310 	orr.w	r3, r3, #16
 80045c0:	6313      	str	r3, [r2, #48]	; 0x30
 80045c2:	4b52      	ldr	r3, [pc, #328]	; (800470c <MspInit+0x1f0>)
 80045c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c6:	f003 0310 	and.w	r3, r3, #16
 80045ca:	60bb      	str	r3, [r7, #8]
 80045cc:	68bb      	ldr	r3, [r7, #8]
  __GPIOF_CLK_ENABLE();
 80045ce:	2300      	movs	r3, #0
 80045d0:	607b      	str	r3, [r7, #4]
 80045d2:	4b4e      	ldr	r3, [pc, #312]	; (800470c <MspInit+0x1f0>)
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	4a4d      	ldr	r2, [pc, #308]	; (800470c <MspInit+0x1f0>)
 80045d8:	f043 0320 	orr.w	r3, r3, #32
 80045dc:	6313      	str	r3, [r2, #48]	; 0x30
 80045de:	4b4b      	ldr	r3, [pc, #300]	; (800470c <MspInit+0x1f0>)
 80045e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	607b      	str	r3, [r7, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
  __GPIOG_CLK_ENABLE();
 80045ea:	2300      	movs	r3, #0
 80045ec:	603b      	str	r3, [r7, #0]
 80045ee:	4b47      	ldr	r3, [pc, #284]	; (800470c <MspInit+0x1f0>)
 80045f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f2:	4a46      	ldr	r2, [pc, #280]	; (800470c <MspInit+0x1f0>)
 80045f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045f8:	6313      	str	r3, [r2, #48]	; 0x30
 80045fa:	4b44      	ldr	r3, [pc, #272]	; (800470c <MspInit+0x1f0>)
 80045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004602:	603b      	str	r3, [r7, #0]
 8004604:	683b      	ldr	r3, [r7, #0]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8004606:	2302      	movs	r3, #2
 8004608:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800460a:	2302      	movs	r3, #2
 800460c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800460e:	2300      	movs	r3, #0
 8004610:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8004612:	230c      	movs	r3, #12
 8004614:	633b      	str	r3, [r7, #48]	; 0x30

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8004616:	2360      	movs	r3, #96	; 0x60
 8004618:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800461a:	f107 0320 	add.w	r3, r7, #32
 800461e:	4619      	mov	r1, r3
 8004620:	483b      	ldr	r0, [pc, #236]	; (8004710 <MspInit+0x1f4>)
 8004622:	f000 ffd5 	bl	80055d0 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8004626:	2301      	movs	r3, #1
 8004628:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800462a:	f107 0320 	add.w	r3, r7, #32
 800462e:	4619      	mov	r1, r3
 8004630:	4838      	ldr	r0, [pc, #224]	; (8004714 <MspInit+0x1f8>)
 8004632:	f000 ffcd 	bl	80055d0 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8004636:	f24c 7303 	movw	r3, #50947	; 0xc703
 800463a:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800463c:	f107 0320 	add.w	r3, r7, #32
 8004640:	4619      	mov	r1, r3
 8004642:	4835      	ldr	r0, [pc, #212]	; (8004718 <MspInit+0x1fc>)
 8004644:	f000 ffc4 	bl	80055d0 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8004648:	f64f 7383 	movw	r3, #65411	; 0xff83
 800464c:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800464e:	f107 0320 	add.w	r3, r7, #32
 8004652:	4619      	mov	r1, r3
 8004654:	4831      	ldr	r0, [pc, #196]	; (800471c <MspInit+0x200>)
 8004656:	f000 ffbb 	bl	80055d0 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800465a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800465e:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004660:	f107 0320 	add.w	r3, r7, #32
 8004664:	4619      	mov	r1, r3
 8004666:	482e      	ldr	r0, [pc, #184]	; (8004720 <MspInit+0x204>)
 8004668:	f000 ffb2 	bl	80055d0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800466c:	f248 1333 	movw	r3, #33075	; 0x8133
 8004670:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004672:	f107 0320 	add.w	r3, r7, #32
 8004676:	4619      	mov	r1, r3
 8004678:	482a      	ldr	r0, [pc, #168]	; (8004724 <MspInit+0x208>)
 800467a:	f000 ffa9 	bl	80055d0 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800467e:	4b2a      	ldr	r3, [pc, #168]	; (8004728 <MspInit+0x20c>)
 8004680:	2200      	movs	r2, #0
 8004682:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004684:	4b28      	ldr	r3, [pc, #160]	; (8004728 <MspInit+0x20c>)
 8004686:	2280      	movs	r2, #128	; 0x80
 8004688:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800468a:	4b27      	ldr	r3, [pc, #156]	; (8004728 <MspInit+0x20c>)
 800468c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004690:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8004692:	4b25      	ldr	r3, [pc, #148]	; (8004728 <MspInit+0x20c>)
 8004694:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004698:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800469a:	4b23      	ldr	r3, [pc, #140]	; (8004728 <MspInit+0x20c>)
 800469c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80046a0:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80046a2:	4b21      	ldr	r3, [pc, #132]	; (8004728 <MspInit+0x20c>)
 80046a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80046a8:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80046aa:	4b1f      	ldr	r3, [pc, #124]	; (8004728 <MspInit+0x20c>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80046b0:	4b1d      	ldr	r3, [pc, #116]	; (8004728 <MspInit+0x20c>)
 80046b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046b6:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80046b8:	4b1b      	ldr	r3, [pc, #108]	; (8004728 <MspInit+0x20c>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80046be:	4b1a      	ldr	r3, [pc, #104]	; (8004728 <MspInit+0x20c>)
 80046c0:	2203      	movs	r2, #3
 80046c2:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80046c4:	4b18      	ldr	r3, [pc, #96]	; (8004728 <MspInit+0x20c>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80046ca:	4b17      	ldr	r3, [pc, #92]	; (8004728 <MspInit+0x20c>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80046d0:	4b15      	ldr	r3, [pc, #84]	; (8004728 <MspInit+0x20c>)
 80046d2:	4a16      	ldr	r2, [pc, #88]	; (800472c <MspInit+0x210>)
 80046d4:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80046d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d8:	4a13      	ldr	r2, [pc, #76]	; (8004728 <MspInit+0x20c>)
 80046da:	631a      	str	r2, [r3, #48]	; 0x30
 80046dc:	4a12      	ldr	r2, [pc, #72]	; (8004728 <MspInit+0x20c>)
 80046de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80046e2:	4811      	ldr	r0, [pc, #68]	; (8004728 <MspInit+0x20c>)
 80046e4:	f000 fa36 	bl	8004b54 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80046e8:	480f      	ldr	r0, [pc, #60]	; (8004728 <MspInit+0x20c>)
 80046ea:	f000 f985 	bl	80049f8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0, 0);
 80046ee:	2200      	movs	r2, #0
 80046f0:	2100      	movs	r1, #0
 80046f2:	2038      	movs	r0, #56	; 0x38
 80046f4:	f000 f93a 	bl	800496c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80046f8:	2038      	movs	r0, #56	; 0x38
 80046fa:	f000 f953 	bl	80049a4 <HAL_NVIC_EnableIRQ>
}
 80046fe:	bf00      	nop
 8004700:	3738      	adds	r7, #56	; 0x38
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20000a3c 	.word	0x20000a3c
 800470c:	40023800 	.word	0x40023800
 8004710:	40020400 	.word	0x40020400
 8004714:	40020800 	.word	0x40020800
 8004718:	40020c00 	.word	0x40020c00
 800471c:	40021000 	.word	0x40021000
 8004720:	40021400 	.word	0x40021400
 8004724:	40021800 	.word	0x40021800
 8004728:	20000a9c 	.word	0x20000a9c
 800472c:	40026410 	.word	0x40026410

08004730 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004734:	4b0e      	ldr	r3, [pc, #56]	; (8004770 <HAL_Init+0x40>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a0d      	ldr	r2, [pc, #52]	; (8004770 <HAL_Init+0x40>)
 800473a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800473e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004740:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <HAL_Init+0x40>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a0a      	ldr	r2, [pc, #40]	; (8004770 <HAL_Init+0x40>)
 8004746:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800474a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800474c:	4b08      	ldr	r3, [pc, #32]	; (8004770 <HAL_Init+0x40>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a07      	ldr	r2, [pc, #28]	; (8004770 <HAL_Init+0x40>)
 8004752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004756:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004758:	2003      	movs	r0, #3
 800475a:	f000 f8fc 	bl	8004956 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800475e:	200f      	movs	r0, #15
 8004760:	f7fd ff50 	bl	8002604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004764:	f7fd fbca 	bl	8001efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	40023c00 	.word	0x40023c00

08004774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004778:	4b06      	ldr	r3, [pc, #24]	; (8004794 <HAL_IncTick+0x20>)
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	4b06      	ldr	r3, [pc, #24]	; (8004798 <HAL_IncTick+0x24>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4413      	add	r3, r2
 8004784:	4a04      	ldr	r2, [pc, #16]	; (8004798 <HAL_IncTick+0x24>)
 8004786:	6013      	str	r3, [r2, #0]
}
 8004788:	bf00      	nop
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	200000a0 	.word	0x200000a0
 8004798:	20000afc 	.word	0x20000afc

0800479c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  return uwTick;
 80047a0:	4b03      	ldr	r3, [pc, #12]	; (80047b0 <HAL_GetTick+0x14>)
 80047a2:	681b      	ldr	r3, [r3, #0]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	20000afc 	.word	0x20000afc

080047b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047bc:	f7ff ffee 	bl	800479c <HAL_GetTick>
 80047c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d005      	beq.n	80047da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047ce:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <HAL_Delay+0x44>)
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	461a      	mov	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4413      	add	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80047da:	bf00      	nop
 80047dc:	f7ff ffde 	bl	800479c <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d8f7      	bhi.n	80047dc <HAL_Delay+0x28>
  {
  }
}
 80047ec:	bf00      	nop
 80047ee:	bf00      	nop
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	200000a0 	.word	0x200000a0

080047fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800480c:	4b0c      	ldr	r3, [pc, #48]	; (8004840 <__NVIC_SetPriorityGrouping+0x44>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004818:	4013      	ands	r3, r2
 800481a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800482c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800482e:	4a04      	ldr	r2, [pc, #16]	; (8004840 <__NVIC_SetPriorityGrouping+0x44>)
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	60d3      	str	r3, [r2, #12]
}
 8004834:	bf00      	nop
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	e000ed00 	.word	0xe000ed00

08004844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004848:	4b04      	ldr	r3, [pc, #16]	; (800485c <__NVIC_GetPriorityGrouping+0x18>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	0a1b      	lsrs	r3, r3, #8
 800484e:	f003 0307 	and.w	r3, r3, #7
}
 8004852:	4618      	mov	r0, r3
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	e000ed00 	.word	0xe000ed00

08004860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	4603      	mov	r3, r0
 8004868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800486a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800486e:	2b00      	cmp	r3, #0
 8004870:	db0b      	blt.n	800488a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004872:	79fb      	ldrb	r3, [r7, #7]
 8004874:	f003 021f 	and.w	r2, r3, #31
 8004878:	4907      	ldr	r1, [pc, #28]	; (8004898 <__NVIC_EnableIRQ+0x38>)
 800487a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800487e:	095b      	lsrs	r3, r3, #5
 8004880:	2001      	movs	r0, #1
 8004882:	fa00 f202 	lsl.w	r2, r0, r2
 8004886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	e000e100 	.word	0xe000e100

0800489c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	4603      	mov	r3, r0
 80048a4:	6039      	str	r1, [r7, #0]
 80048a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	db0a      	blt.n	80048c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	490c      	ldr	r1, [pc, #48]	; (80048e8 <__NVIC_SetPriority+0x4c>)
 80048b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ba:	0112      	lsls	r2, r2, #4
 80048bc:	b2d2      	uxtb	r2, r2
 80048be:	440b      	add	r3, r1
 80048c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048c4:	e00a      	b.n	80048dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	4908      	ldr	r1, [pc, #32]	; (80048ec <__NVIC_SetPriority+0x50>)
 80048cc:	79fb      	ldrb	r3, [r7, #7]
 80048ce:	f003 030f 	and.w	r3, r3, #15
 80048d2:	3b04      	subs	r3, #4
 80048d4:	0112      	lsls	r2, r2, #4
 80048d6:	b2d2      	uxtb	r2, r2
 80048d8:	440b      	add	r3, r1
 80048da:	761a      	strb	r2, [r3, #24]
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	e000e100 	.word	0xe000e100
 80048ec:	e000ed00 	.word	0xe000ed00

080048f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b089      	sub	sp, #36	; 0x24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	f1c3 0307 	rsb	r3, r3, #7
 800490a:	2b04      	cmp	r3, #4
 800490c:	bf28      	it	cs
 800490e:	2304      	movcs	r3, #4
 8004910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	3304      	adds	r3, #4
 8004916:	2b06      	cmp	r3, #6
 8004918:	d902      	bls.n	8004920 <NVIC_EncodePriority+0x30>
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	3b03      	subs	r3, #3
 800491e:	e000      	b.n	8004922 <NVIC_EncodePriority+0x32>
 8004920:	2300      	movs	r3, #0
 8004922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004924:	f04f 32ff 	mov.w	r2, #4294967295
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	43da      	mvns	r2, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	401a      	ands	r2, r3
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004938:	f04f 31ff 	mov.w	r1, #4294967295
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	fa01 f303 	lsl.w	r3, r1, r3
 8004942:	43d9      	mvns	r1, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004948:	4313      	orrs	r3, r2
         );
}
 800494a:	4618      	mov	r0, r3
 800494c:	3724      	adds	r7, #36	; 0x24
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b082      	sub	sp, #8
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7ff ff4c 	bl	80047fc <__NVIC_SetPriorityGrouping>
}
 8004964:	bf00      	nop
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	4603      	mov	r3, r0
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
 8004978:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800497e:	f7ff ff61 	bl	8004844 <__NVIC_GetPriorityGrouping>
 8004982:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	68b9      	ldr	r1, [r7, #8]
 8004988:	6978      	ldr	r0, [r7, #20]
 800498a:	f7ff ffb1 	bl	80048f0 <NVIC_EncodePriority>
 800498e:	4602      	mov	r2, r0
 8004990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004994:	4611      	mov	r1, r2
 8004996:	4618      	mov	r0, r3
 8004998:	f7ff ff80 	bl	800489c <__NVIC_SetPriority>
}
 800499c:	bf00      	nop
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	4603      	mov	r3, r0
 80049ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff ff54 	bl	8004860 <__NVIC_EnableIRQ>
}
 80049b8:	bf00      	nop
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e00e      	b.n	80049f0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	795b      	ldrb	r3, [r3, #5]
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d105      	bne.n	80049e8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7fd fab6 	bl	8001f54 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a04:	f7ff feca 	bl	800479c <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e099      	b.n	8004b48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0201 	bic.w	r2, r2, #1
 8004a32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a34:	e00f      	b.n	8004a56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a36:	f7ff feb1 	bl	800479c <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b05      	cmp	r3, #5
 8004a42:	d908      	bls.n	8004a56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2220      	movs	r2, #32
 8004a48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2203      	movs	r2, #3
 8004a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e078      	b.n	8004b48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e8      	bne.n	8004a36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	4b38      	ldr	r3, [pc, #224]	; (8004b50 <HAL_DMA_Init+0x158>)
 8004a70:	4013      	ands	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d107      	bne.n	8004ac0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f023 0307 	bic.w	r3, r3, #7
 8004ad6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d117      	bne.n	8004b1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00e      	beq.n	8004b1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f94f 	bl	8004da0 <DMA_CheckFifoParam>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d008      	beq.n	8004b1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2240      	movs	r2, #64	; 0x40
 8004b0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004b16:	2301      	movs	r3, #1
 8004b18:	e016      	b.n	8004b48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f906 	bl	8004d34 <DMA_CalcBaseAndBitshift>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b30:	223f      	movs	r2, #63	; 0x3f
 8004b32:	409a      	lsls	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3718      	adds	r7, #24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	f010803f 	.word	0xf010803f

08004b54 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e050      	b.n	8004c08 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d101      	bne.n	8004b76 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004b72:	2302      	movs	r3, #2
 8004b74:	e048      	b.n	8004c08 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0201 	bic.w	r2, r2, #1
 8004b84:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2200      	movs	r2, #0
 8004b94:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2200      	movs	r2, #0
 8004bac:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2221      	movs	r2, #33	; 0x21
 8004bb4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f8bc 	bl	8004d34 <DMA_CalcBaseAndBitshift>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be8:	223f      	movs	r2, #63	; 0x3f
 8004bea:	409a      	lsls	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004c1e:	f7ff fdbd 	bl	800479c <HAL_GetTick>
 8004c22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d008      	beq.n	8004c42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2280      	movs	r2, #128	; 0x80
 8004c34:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e052      	b.n	8004ce8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 0216 	bic.w	r2, r2, #22
 8004c50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695a      	ldr	r2, [r3, #20]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d103      	bne.n	8004c72 <HAL_DMA_Abort+0x62>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d007      	beq.n	8004c82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0208 	bic.w	r2, r2, #8
 8004c80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0201 	bic.w	r2, r2, #1
 8004c90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c92:	e013      	b.n	8004cbc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c94:	f7ff fd82 	bl	800479c <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b05      	cmp	r3, #5
 8004ca0:	d90c      	bls.n	8004cbc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2203      	movs	r2, #3
 8004cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e015      	b.n	8004ce8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1e4      	bne.n	8004c94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cce:	223f      	movs	r2, #63	; 0x3f
 8004cd0:	409a      	lsls	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d004      	beq.n	8004d0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2280      	movs	r2, #128	; 0x80
 8004d08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e00c      	b.n	8004d28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2205      	movs	r2, #5
 8004d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0201 	bic.w	r2, r2, #1
 8004d24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	3b10      	subs	r3, #16
 8004d44:	4a14      	ldr	r2, [pc, #80]	; (8004d98 <DMA_CalcBaseAndBitshift+0x64>)
 8004d46:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4a:	091b      	lsrs	r3, r3, #4
 8004d4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d4e:	4a13      	ldr	r2, [pc, #76]	; (8004d9c <DMA_CalcBaseAndBitshift+0x68>)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4413      	add	r3, r2
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	461a      	mov	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b03      	cmp	r3, #3
 8004d60:	d909      	bls.n	8004d76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d6a:	f023 0303 	bic.w	r3, r3, #3
 8004d6e:	1d1a      	adds	r2, r3, #4
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	659a      	str	r2, [r3, #88]	; 0x58
 8004d74:	e007      	b.n	8004d86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d7e:	f023 0303 	bic.w	r3, r3, #3
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	aaaaaaab 	.word	0xaaaaaaab
 8004d9c:	080116f8 	.word	0x080116f8

08004da0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004da8:	2300      	movs	r3, #0
 8004daa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d11f      	bne.n	8004dfa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	2b03      	cmp	r3, #3
 8004dbe:	d856      	bhi.n	8004e6e <DMA_CheckFifoParam+0xce>
 8004dc0:	a201      	add	r2, pc, #4	; (adr r2, 8004dc8 <DMA_CheckFifoParam+0x28>)
 8004dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc6:	bf00      	nop
 8004dc8:	08004dd9 	.word	0x08004dd9
 8004dcc:	08004deb 	.word	0x08004deb
 8004dd0:	08004dd9 	.word	0x08004dd9
 8004dd4:	08004e6f 	.word	0x08004e6f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ddc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d046      	beq.n	8004e72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004de8:	e043      	b.n	8004e72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004df2:	d140      	bne.n	8004e76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004df8:	e03d      	b.n	8004e76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e02:	d121      	bne.n	8004e48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2b03      	cmp	r3, #3
 8004e08:	d837      	bhi.n	8004e7a <DMA_CheckFifoParam+0xda>
 8004e0a:	a201      	add	r2, pc, #4	; (adr r2, 8004e10 <DMA_CheckFifoParam+0x70>)
 8004e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e10:	08004e21 	.word	0x08004e21
 8004e14:	08004e27 	.word	0x08004e27
 8004e18:	08004e21 	.word	0x08004e21
 8004e1c:	08004e39 	.word	0x08004e39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	73fb      	strb	r3, [r7, #15]
      break;
 8004e24:	e030      	b.n	8004e88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d025      	beq.n	8004e7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e36:	e022      	b.n	8004e7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e40:	d11f      	bne.n	8004e82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e46:	e01c      	b.n	8004e82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d903      	bls.n	8004e56 <DMA_CheckFifoParam+0xb6>
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	2b03      	cmp	r3, #3
 8004e52:	d003      	beq.n	8004e5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e54:	e018      	b.n	8004e88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	73fb      	strb	r3, [r7, #15]
      break;
 8004e5a:	e015      	b.n	8004e88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00e      	beq.n	8004e86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e6c:	e00b      	b.n	8004e86 <DMA_CheckFifoParam+0xe6>
      break;
 8004e6e:	bf00      	nop
 8004e70:	e00a      	b.n	8004e88 <DMA_CheckFifoParam+0xe8>
      break;
 8004e72:	bf00      	nop
 8004e74:	e008      	b.n	8004e88 <DMA_CheckFifoParam+0xe8>
      break;
 8004e76:	bf00      	nop
 8004e78:	e006      	b.n	8004e88 <DMA_CheckFifoParam+0xe8>
      break;
 8004e7a:	bf00      	nop
 8004e7c:	e004      	b.n	8004e88 <DMA_CheckFifoParam+0xe8>
      break;
 8004e7e:	bf00      	nop
 8004e80:	e002      	b.n	8004e88 <DMA_CheckFifoParam+0xe8>
      break;   
 8004e82:	bf00      	nop
 8004e84:	e000      	b.n	8004e88 <DMA_CheckFifoParam+0xe8>
      break;
 8004e86:	bf00      	nop
    }
  } 
  
  return status; 
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop

08004e98 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e03b      	b.n	8004f22 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7fd f86a 	bl	8001f98 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee8:	f023 0107 	bic.w	r1, r3, #7
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004f02:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	68d1      	ldr	r1, [r2, #12]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6812      	ldr	r2, [r2, #0]
 8004f0e:	430b      	orrs	r3, r1
 8004f10:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b086      	sub	sp, #24
 8004f2e:	af02      	add	r7, sp, #8
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	607a      	str	r2, [r7, #4]
 8004f36:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d101      	bne.n	8004f46 <HAL_DMA2D_Start+0x1c>
 8004f42:	2302      	movs	r3, #2
 8004f44:	e018      	b.n	8004f78 <HAL_DMA2D_Start+0x4e>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2202      	movs	r2, #2
 8004f52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	68b9      	ldr	r1, [r7, #8]
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 fa99 	bl	8005498 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f042 0201 	orr.w	r2, r2, #1
 8004f74:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d056      	beq.n	800504a <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f9c:	f7ff fbfe 	bl	800479c <HAL_GetTick>
 8004fa0:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004fa2:	e04b      	b.n	800503c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d023      	beq.n	8004ffe <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f003 0320 	and.w	r3, r3, #32
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d005      	beq.n	8004fcc <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc4:	f043 0202 	orr.w	r2, r3, #2
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d005      	beq.n	8004fe2 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fda:	f043 0201 	orr.w	r2, r3, #1
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2221      	movs	r2, #33	; 0x21
 8004fe8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2204      	movs	r2, #4
 8004fee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e0a5      	b.n	800514a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005004:	d01a      	beq.n	800503c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005006:	f7ff fbc9 	bl	800479c <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d302      	bcc.n	800501c <HAL_DMA2D_PollForTransfer+0x9c>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10f      	bne.n	800503c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005020:	f043 0220 	orr.w	r2, r3, #32
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2203      	movs	r2, #3
 800502c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e086      	b.n	800514a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0ac      	beq.n	8004fa4 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69db      	ldr	r3, [r3, #28]
 8005050:	f003 0320 	and.w	r3, r3, #32
 8005054:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505c:	f003 0320 	and.w	r3, r3, #32
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	4313      	orrs	r3, r2
 8005064:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d061      	beq.n	8005130 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800506c:	f7ff fb96 	bl	800479c <HAL_GetTick>
 8005070:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005072:	e056      	b.n	8005122 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005082:	2b00      	cmp	r3, #0
 8005084:	d02e      	beq.n	80050e4 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f003 0308 	and.w	r3, r3, #8
 800508c:	2b00      	cmp	r3, #0
 800508e:	d005      	beq.n	800509c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005094:	f043 0204 	orr.w	r2, r3, #4
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f003 0320 	and.w	r3, r3, #32
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d005      	beq.n	80050b2 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050aa:	f043 0202 	orr.w	r2, r3, #2
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d005      	beq.n	80050c8 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c0:	f043 0201 	orr.w	r2, r3, #1
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2229      	movs	r2, #41	; 0x29
 80050ce:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2204      	movs	r2, #4
 80050d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e032      	b.n	800514a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ea:	d01a      	beq.n	8005122 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80050ec:	f7ff fb56 	bl	800479c <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d302      	bcc.n	8005102 <HAL_DMA2D_PollForTransfer+0x182>
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10f      	bne.n	8005122 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005106:	f043 0220 	orr.w	r2, r3, #32
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2203      	movs	r2, #3
 8005112:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e013      	b.n	800514a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f003 0310 	and.w	r3, r3, #16
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0a1      	beq.n	8005074 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2212      	movs	r2, #18
 8005136:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b084      	sub	sp, #16
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d026      	beq.n	80051c2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517a:	2b00      	cmp	r3, #0
 800517c:	d021      	beq.n	80051c2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800518c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005192:	f043 0201 	orr.w	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2201      	movs	r2, #1
 80051a0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2204      	movs	r2, #4
 80051a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f003 0320 	and.w	r3, r3, #32
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d026      	beq.n	800521a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d021      	beq.n	800521a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051e4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2220      	movs	r2, #32
 80051ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f2:	f043 0202 	orr.w	r2, r3, #2
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2204      	movs	r2, #4
 80051fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f003 0308 	and.w	r3, r3, #8
 8005220:	2b00      	cmp	r3, #0
 8005222:	d026      	beq.n	8005272 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800522a:	2b00      	cmp	r3, #0
 800522c:	d021      	beq.n	8005272 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800523c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2208      	movs	r2, #8
 8005244:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524a:	f043 0204 	orr.w	r2, r3, #4
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2204      	movs	r2, #4
 8005256:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b00      	cmp	r3, #0
 800527a:	d013      	beq.n	80052a4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00e      	beq.n	80052a4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005294:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2204      	movs	r2, #4
 800529c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f853 	bl	800534a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d024      	beq.n	80052f8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d01f      	beq.n	80052f8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80052c6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2202      	movs	r2, #2
 80052ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f003 0310 	and.w	r3, r3, #16
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d01f      	beq.n	8005342 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01a      	beq.n	8005342 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800531a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2210      	movs	r2, #16
 8005322:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f80e 	bl	800535e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005342:	bf00      	nop
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800534a:	b480      	push	{r7}
 800534c:	b083      	sub	sp, #12
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005352:	bf00      	nop
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800535e:	b480      	push	{r7}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005366:	bf00      	nop
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
	...

08005374 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_DMA2D_ConfigLayer+0x20>
 8005390:	2302      	movs	r3, #2
 8005392:	e079      	b.n	8005488 <HAL_DMA2D_ConfigLayer+0x114>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	3318      	adds	r3, #24
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	4413      	add	r3, r2
 80053ae:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	041b      	lsls	r3, r3, #16
 80053ba:	4313      	orrs	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80053be:	4b35      	ldr	r3, [pc, #212]	; (8005494 <HAL_DMA2D_ConfigLayer+0x120>)
 80053c0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	2b0a      	cmp	r3, #10
 80053c8:	d003      	beq.n	80053d2 <HAL_DMA2D_ConfigLayer+0x5e>
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	2b09      	cmp	r3, #9
 80053d0:	d107      	bne.n	80053e2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	4313      	orrs	r3, r2
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	e005      	b.n	80053ee <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	061b      	lsls	r3, r3, #24
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d120      	bne.n	8005436 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	43db      	mvns	r3, r3
 80053fe:	ea02 0103 	and.w	r1, r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	430a      	orrs	r2, r1
 800540a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	6812      	ldr	r2, [r2, #0]
 8005414:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2b0a      	cmp	r3, #10
 800541c:	d003      	beq.n	8005426 <HAL_DMA2D_ConfigLayer+0xb2>
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b09      	cmp	r3, #9
 8005424:	d127      	bne.n	8005476 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	68da      	ldr	r2, [r3, #12]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005432:	629a      	str	r2, [r3, #40]	; 0x28
 8005434:	e01f      	b.n	8005476 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	69da      	ldr	r2, [r3, #28]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	43db      	mvns	r3, r3
 8005440:	ea02 0103 	and.w	r1, r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	430a      	orrs	r2, r1
 800544c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	6812      	ldr	r2, [r2, #0]
 8005456:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	2b0a      	cmp	r3, #10
 800545e:	d003      	beq.n	8005468 <HAL_DMA2D_ConfigLayer+0xf4>
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	2b09      	cmp	r3, #9
 8005466:	d106      	bne.n	8005476 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	68da      	ldr	r2, [r3, #12]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005474:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	371c      	adds	r7, #28
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	ff03000f 	.word	0xff03000f

08005498 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005498:	b480      	push	{r7}
 800549a:	b08b      	sub	sp, #44	; 0x2c
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
 80054a4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ac:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	041a      	lsls	r2, r3, #16
 80054b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b6:	431a      	orrs	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054d0:	d174      	bne.n	80055bc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80054d8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80054e0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80054e8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d108      	bne.n	800550a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	431a      	orrs	r2, r3
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	4313      	orrs	r3, r2
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	4313      	orrs	r3, r2
 8005506:	627b      	str	r3, [r7, #36]	; 0x24
 8005508:	e053      	b.n	80055b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d106      	bne.n	8005520 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	4313      	orrs	r3, r2
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	4313      	orrs	r3, r2
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
 800551e:	e048      	b.n	80055b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	2b02      	cmp	r3, #2
 8005526:	d111      	bne.n	800554c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	0cdb      	lsrs	r3, r3, #19
 800552c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	0a9b      	lsrs	r3, r3, #10
 8005532:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	08db      	lsrs	r3, r3, #3
 8005538:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	02db      	lsls	r3, r3, #11
 8005542:	4313      	orrs	r3, r2
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	4313      	orrs	r3, r2
 8005548:	627b      	str	r3, [r7, #36]	; 0x24
 800554a:	e032      	b.n	80055b2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	2b03      	cmp	r3, #3
 8005552:	d117      	bne.n	8005584 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	0fdb      	lsrs	r3, r3, #31
 8005558:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	0cdb      	lsrs	r3, r3, #19
 800555e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	0adb      	lsrs	r3, r3, #11
 8005564:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	08db      	lsrs	r3, r3, #3
 800556a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	029b      	lsls	r3, r3, #10
 8005574:	431a      	orrs	r2, r3
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	03db      	lsls	r3, r3, #15
 800557a:	4313      	orrs	r3, r2
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	4313      	orrs	r3, r2
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
 8005582:	e016      	b.n	80055b2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	0f1b      	lsrs	r3, r3, #28
 8005588:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	0d1b      	lsrs	r3, r3, #20
 800558e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	0b1b      	lsrs	r3, r3, #12
 8005594:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	091b      	lsrs	r3, r3, #4
 800559a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	011a      	lsls	r2, r3, #4
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	021b      	lsls	r3, r3, #8
 80055a4:	431a      	orrs	r2, r3
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	031b      	lsls	r3, r3, #12
 80055aa:	4313      	orrs	r3, r2
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055b8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80055ba:	e003      	b.n	80055c4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	60da      	str	r2, [r3, #12]
}
 80055c4:	bf00      	nop
 80055c6:	372c      	adds	r7, #44	; 0x2c
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b089      	sub	sp, #36	; 0x24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80055da:	2300      	movs	r3, #0
 80055dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80055de:	2300      	movs	r3, #0
 80055e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055e6:	2300      	movs	r3, #0
 80055e8:	61fb      	str	r3, [r7, #28]
 80055ea:	e177      	b.n	80058dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80055ec:	2201      	movs	r2, #1
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	fa02 f303 	lsl.w	r3, r2, r3
 80055f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	4013      	ands	r3, r2
 80055fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	429a      	cmp	r2, r3
 8005606:	f040 8166 	bne.w	80058d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f003 0303 	and.w	r3, r3, #3
 8005612:	2b01      	cmp	r3, #1
 8005614:	d005      	beq.n	8005622 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800561e:	2b02      	cmp	r3, #2
 8005620:	d130      	bne.n	8005684 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	2203      	movs	r2, #3
 800562e:	fa02 f303 	lsl.w	r3, r2, r3
 8005632:	43db      	mvns	r3, r3
 8005634:	69ba      	ldr	r2, [r7, #24]
 8005636:	4013      	ands	r3, r2
 8005638:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	005b      	lsls	r3, r3, #1
 8005642:	fa02 f303 	lsl.w	r3, r2, r3
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	4313      	orrs	r3, r2
 800564a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	69ba      	ldr	r2, [r7, #24]
 8005650:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005658:	2201      	movs	r2, #1
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	fa02 f303 	lsl.w	r3, r2, r3
 8005660:	43db      	mvns	r3, r3
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	4013      	ands	r3, r2
 8005666:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	091b      	lsrs	r3, r3, #4
 800566e:	f003 0201 	and.w	r2, r3, #1
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	fa02 f303 	lsl.w	r3, r2, r3
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	4313      	orrs	r3, r2
 800567c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f003 0303 	and.w	r3, r3, #3
 800568c:	2b03      	cmp	r3, #3
 800568e:	d017      	beq.n	80056c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	2203      	movs	r2, #3
 800569c:	fa02 f303 	lsl.w	r3, r2, r3
 80056a0:	43db      	mvns	r3, r3
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	4013      	ands	r3, r2
 80056a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	fa02 f303 	lsl.w	r3, r2, r3
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f003 0303 	and.w	r3, r3, #3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d123      	bne.n	8005714 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	08da      	lsrs	r2, r3, #3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	3208      	adds	r2, #8
 80056d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	f003 0307 	and.w	r3, r3, #7
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	220f      	movs	r2, #15
 80056e4:	fa02 f303 	lsl.w	r3, r2, r3
 80056e8:	43db      	mvns	r3, r3
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	4013      	ands	r3, r2
 80056ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	691a      	ldr	r2, [r3, #16]
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	4313      	orrs	r3, r2
 8005704:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	08da      	lsrs	r2, r3, #3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	3208      	adds	r2, #8
 800570e:	69b9      	ldr	r1, [r7, #24]
 8005710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	2203      	movs	r2, #3
 8005720:	fa02 f303 	lsl.w	r3, r2, r3
 8005724:	43db      	mvns	r3, r3
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	4013      	ands	r3, r2
 800572a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f003 0203 	and.w	r2, r3, #3
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	005b      	lsls	r3, r3, #1
 8005738:	fa02 f303 	lsl.w	r3, r2, r3
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	4313      	orrs	r3, r2
 8005740:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 80c0 	beq.w	80058d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	4b66      	ldr	r3, [pc, #408]	; (80058f4 <HAL_GPIO_Init+0x324>)
 800575c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575e:	4a65      	ldr	r2, [pc, #404]	; (80058f4 <HAL_GPIO_Init+0x324>)
 8005760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005764:	6453      	str	r3, [r2, #68]	; 0x44
 8005766:	4b63      	ldr	r3, [pc, #396]	; (80058f4 <HAL_GPIO_Init+0x324>)
 8005768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800576a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005772:	4a61      	ldr	r2, [pc, #388]	; (80058f8 <HAL_GPIO_Init+0x328>)
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	089b      	lsrs	r3, r3, #2
 8005778:	3302      	adds	r3, #2
 800577a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800577e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	f003 0303 	and.w	r3, r3, #3
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	220f      	movs	r2, #15
 800578a:	fa02 f303 	lsl.w	r3, r2, r3
 800578e:	43db      	mvns	r3, r3
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	4013      	ands	r3, r2
 8005794:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a58      	ldr	r2, [pc, #352]	; (80058fc <HAL_GPIO_Init+0x32c>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d037      	beq.n	800580e <HAL_GPIO_Init+0x23e>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a57      	ldr	r2, [pc, #348]	; (8005900 <HAL_GPIO_Init+0x330>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d031      	beq.n	800580a <HAL_GPIO_Init+0x23a>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a56      	ldr	r2, [pc, #344]	; (8005904 <HAL_GPIO_Init+0x334>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d02b      	beq.n	8005806 <HAL_GPIO_Init+0x236>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a55      	ldr	r2, [pc, #340]	; (8005908 <HAL_GPIO_Init+0x338>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d025      	beq.n	8005802 <HAL_GPIO_Init+0x232>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a54      	ldr	r2, [pc, #336]	; (800590c <HAL_GPIO_Init+0x33c>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d01f      	beq.n	80057fe <HAL_GPIO_Init+0x22e>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a53      	ldr	r2, [pc, #332]	; (8005910 <HAL_GPIO_Init+0x340>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d019      	beq.n	80057fa <HAL_GPIO_Init+0x22a>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a52      	ldr	r2, [pc, #328]	; (8005914 <HAL_GPIO_Init+0x344>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d013      	beq.n	80057f6 <HAL_GPIO_Init+0x226>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a51      	ldr	r2, [pc, #324]	; (8005918 <HAL_GPIO_Init+0x348>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d00d      	beq.n	80057f2 <HAL_GPIO_Init+0x222>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a50      	ldr	r2, [pc, #320]	; (800591c <HAL_GPIO_Init+0x34c>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d007      	beq.n	80057ee <HAL_GPIO_Init+0x21e>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a4f      	ldr	r2, [pc, #316]	; (8005920 <HAL_GPIO_Init+0x350>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d101      	bne.n	80057ea <HAL_GPIO_Init+0x21a>
 80057e6:	2309      	movs	r3, #9
 80057e8:	e012      	b.n	8005810 <HAL_GPIO_Init+0x240>
 80057ea:	230a      	movs	r3, #10
 80057ec:	e010      	b.n	8005810 <HAL_GPIO_Init+0x240>
 80057ee:	2308      	movs	r3, #8
 80057f0:	e00e      	b.n	8005810 <HAL_GPIO_Init+0x240>
 80057f2:	2307      	movs	r3, #7
 80057f4:	e00c      	b.n	8005810 <HAL_GPIO_Init+0x240>
 80057f6:	2306      	movs	r3, #6
 80057f8:	e00a      	b.n	8005810 <HAL_GPIO_Init+0x240>
 80057fa:	2305      	movs	r3, #5
 80057fc:	e008      	b.n	8005810 <HAL_GPIO_Init+0x240>
 80057fe:	2304      	movs	r3, #4
 8005800:	e006      	b.n	8005810 <HAL_GPIO_Init+0x240>
 8005802:	2303      	movs	r3, #3
 8005804:	e004      	b.n	8005810 <HAL_GPIO_Init+0x240>
 8005806:	2302      	movs	r3, #2
 8005808:	e002      	b.n	8005810 <HAL_GPIO_Init+0x240>
 800580a:	2301      	movs	r3, #1
 800580c:	e000      	b.n	8005810 <HAL_GPIO_Init+0x240>
 800580e:	2300      	movs	r3, #0
 8005810:	69fa      	ldr	r2, [r7, #28]
 8005812:	f002 0203 	and.w	r2, r2, #3
 8005816:	0092      	lsls	r2, r2, #2
 8005818:	4093      	lsls	r3, r2
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	4313      	orrs	r3, r2
 800581e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005820:	4935      	ldr	r1, [pc, #212]	; (80058f8 <HAL_GPIO_Init+0x328>)
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	089b      	lsrs	r3, r3, #2
 8005826:	3302      	adds	r3, #2
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800582e:	4b3d      	ldr	r3, [pc, #244]	; (8005924 <HAL_GPIO_Init+0x354>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	43db      	mvns	r3, r3
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	4013      	ands	r3, r2
 800583c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d003      	beq.n	8005852 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	4313      	orrs	r3, r2
 8005850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005852:	4a34      	ldr	r2, [pc, #208]	; (8005924 <HAL_GPIO_Init+0x354>)
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005858:	4b32      	ldr	r3, [pc, #200]	; (8005924 <HAL_GPIO_Init+0x354>)
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	43db      	mvns	r3, r3
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	4013      	ands	r3, r2
 8005866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	4313      	orrs	r3, r2
 800587a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800587c:	4a29      	ldr	r2, [pc, #164]	; (8005924 <HAL_GPIO_Init+0x354>)
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005882:	4b28      	ldr	r3, [pc, #160]	; (8005924 <HAL_GPIO_Init+0x354>)
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	43db      	mvns	r3, r3
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	4013      	ands	r3, r2
 8005890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058a6:	4a1f      	ldr	r2, [pc, #124]	; (8005924 <HAL_GPIO_Init+0x354>)
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058ac:	4b1d      	ldr	r3, [pc, #116]	; (8005924 <HAL_GPIO_Init+0x354>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	43db      	mvns	r3, r3
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	4013      	ands	r3, r2
 80058ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d003      	beq.n	80058d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80058d0:	4a14      	ldr	r2, [pc, #80]	; (8005924 <HAL_GPIO_Init+0x354>)
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	3301      	adds	r3, #1
 80058da:	61fb      	str	r3, [r7, #28]
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	2b0f      	cmp	r3, #15
 80058e0:	f67f ae84 	bls.w	80055ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80058e4:	bf00      	nop
 80058e6:	bf00      	nop
 80058e8:	3724      	adds	r7, #36	; 0x24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	40023800 	.word	0x40023800
 80058f8:	40013800 	.word	0x40013800
 80058fc:	40020000 	.word	0x40020000
 8005900:	40020400 	.word	0x40020400
 8005904:	40020800 	.word	0x40020800
 8005908:	40020c00 	.word	0x40020c00
 800590c:	40021000 	.word	0x40021000
 8005910:	40021400 	.word	0x40021400
 8005914:	40021800 	.word	0x40021800
 8005918:	40021c00 	.word	0x40021c00
 800591c:	40022000 	.word	0x40022000
 8005920:	40022400 	.word	0x40022400
 8005924:	40013c00 	.word	0x40013c00

08005928 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005932:	2300      	movs	r3, #0
 8005934:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005936:	2300      	movs	r3, #0
 8005938:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800593a:	2300      	movs	r3, #0
 800593c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800593e:	2300      	movs	r3, #0
 8005940:	617b      	str	r3, [r7, #20]
 8005942:	e0d9      	b.n	8005af8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005944:	2201      	movs	r2, #1
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	fa02 f303 	lsl.w	r3, r2, r3
 800594c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	4013      	ands	r3, r2
 8005954:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	429a      	cmp	r2, r3
 800595c:	f040 80c9 	bne.w	8005af2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005960:	4a6b      	ldr	r2, [pc, #428]	; (8005b10 <HAL_GPIO_DeInit+0x1e8>)
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	089b      	lsrs	r3, r3, #2
 8005966:	3302      	adds	r3, #2
 8005968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800596c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f003 0303 	and.w	r3, r3, #3
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	220f      	movs	r2, #15
 8005978:	fa02 f303 	lsl.w	r3, r2, r3
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	4013      	ands	r3, r2
 8005980:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a63      	ldr	r2, [pc, #396]	; (8005b14 <HAL_GPIO_DeInit+0x1ec>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d037      	beq.n	80059fa <HAL_GPIO_DeInit+0xd2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a62      	ldr	r2, [pc, #392]	; (8005b18 <HAL_GPIO_DeInit+0x1f0>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d031      	beq.n	80059f6 <HAL_GPIO_DeInit+0xce>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a61      	ldr	r2, [pc, #388]	; (8005b1c <HAL_GPIO_DeInit+0x1f4>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d02b      	beq.n	80059f2 <HAL_GPIO_DeInit+0xca>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a60      	ldr	r2, [pc, #384]	; (8005b20 <HAL_GPIO_DeInit+0x1f8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d025      	beq.n	80059ee <HAL_GPIO_DeInit+0xc6>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a5f      	ldr	r2, [pc, #380]	; (8005b24 <HAL_GPIO_DeInit+0x1fc>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d01f      	beq.n	80059ea <HAL_GPIO_DeInit+0xc2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a5e      	ldr	r2, [pc, #376]	; (8005b28 <HAL_GPIO_DeInit+0x200>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d019      	beq.n	80059e6 <HAL_GPIO_DeInit+0xbe>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a5d      	ldr	r2, [pc, #372]	; (8005b2c <HAL_GPIO_DeInit+0x204>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d013      	beq.n	80059e2 <HAL_GPIO_DeInit+0xba>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a5c      	ldr	r2, [pc, #368]	; (8005b30 <HAL_GPIO_DeInit+0x208>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d00d      	beq.n	80059de <HAL_GPIO_DeInit+0xb6>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a5b      	ldr	r2, [pc, #364]	; (8005b34 <HAL_GPIO_DeInit+0x20c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d007      	beq.n	80059da <HAL_GPIO_DeInit+0xb2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a5a      	ldr	r2, [pc, #360]	; (8005b38 <HAL_GPIO_DeInit+0x210>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d101      	bne.n	80059d6 <HAL_GPIO_DeInit+0xae>
 80059d2:	2309      	movs	r3, #9
 80059d4:	e012      	b.n	80059fc <HAL_GPIO_DeInit+0xd4>
 80059d6:	230a      	movs	r3, #10
 80059d8:	e010      	b.n	80059fc <HAL_GPIO_DeInit+0xd4>
 80059da:	2308      	movs	r3, #8
 80059dc:	e00e      	b.n	80059fc <HAL_GPIO_DeInit+0xd4>
 80059de:	2307      	movs	r3, #7
 80059e0:	e00c      	b.n	80059fc <HAL_GPIO_DeInit+0xd4>
 80059e2:	2306      	movs	r3, #6
 80059e4:	e00a      	b.n	80059fc <HAL_GPIO_DeInit+0xd4>
 80059e6:	2305      	movs	r3, #5
 80059e8:	e008      	b.n	80059fc <HAL_GPIO_DeInit+0xd4>
 80059ea:	2304      	movs	r3, #4
 80059ec:	e006      	b.n	80059fc <HAL_GPIO_DeInit+0xd4>
 80059ee:	2303      	movs	r3, #3
 80059f0:	e004      	b.n	80059fc <HAL_GPIO_DeInit+0xd4>
 80059f2:	2302      	movs	r3, #2
 80059f4:	e002      	b.n	80059fc <HAL_GPIO_DeInit+0xd4>
 80059f6:	2301      	movs	r3, #1
 80059f8:	e000      	b.n	80059fc <HAL_GPIO_DeInit+0xd4>
 80059fa:	2300      	movs	r3, #0
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	f002 0203 	and.w	r2, r2, #3
 8005a02:	0092      	lsls	r2, r2, #2
 8005a04:	4093      	lsls	r3, r2
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d132      	bne.n	8005a72 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005a0c:	4b4b      	ldr	r3, [pc, #300]	; (8005b3c <HAL_GPIO_DeInit+0x214>)
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	43db      	mvns	r3, r3
 8005a14:	4949      	ldr	r1, [pc, #292]	; (8005b3c <HAL_GPIO_DeInit+0x214>)
 8005a16:	4013      	ands	r3, r2
 8005a18:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005a1a:	4b48      	ldr	r3, [pc, #288]	; (8005b3c <HAL_GPIO_DeInit+0x214>)
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	43db      	mvns	r3, r3
 8005a22:	4946      	ldr	r1, [pc, #280]	; (8005b3c <HAL_GPIO_DeInit+0x214>)
 8005a24:	4013      	ands	r3, r2
 8005a26:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005a28:	4b44      	ldr	r3, [pc, #272]	; (8005b3c <HAL_GPIO_DeInit+0x214>)
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	43db      	mvns	r3, r3
 8005a30:	4942      	ldr	r1, [pc, #264]	; (8005b3c <HAL_GPIO_DeInit+0x214>)
 8005a32:	4013      	ands	r3, r2
 8005a34:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005a36:	4b41      	ldr	r3, [pc, #260]	; (8005b3c <HAL_GPIO_DeInit+0x214>)
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	43db      	mvns	r3, r3
 8005a3e:	493f      	ldr	r1, [pc, #252]	; (8005b3c <HAL_GPIO_DeInit+0x214>)
 8005a40:	4013      	ands	r3, r2
 8005a42:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f003 0303 	and.w	r3, r3, #3
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	220f      	movs	r2, #15
 8005a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a52:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005a54:	4a2e      	ldr	r2, [pc, #184]	; (8005b10 <HAL_GPIO_DeInit+0x1e8>)
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	089b      	lsrs	r3, r3, #2
 8005a5a:	3302      	adds	r3, #2
 8005a5c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	43da      	mvns	r2, r3
 8005a64:	482a      	ldr	r0, [pc, #168]	; (8005b10 <HAL_GPIO_DeInit+0x1e8>)
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	089b      	lsrs	r3, r3, #2
 8005a6a:	400a      	ands	r2, r1
 8005a6c:	3302      	adds	r3, #2
 8005a6e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	2103      	movs	r1, #3
 8005a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a80:	43db      	mvns	r3, r3
 8005a82:	401a      	ands	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	08da      	lsrs	r2, r3, #3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	3208      	adds	r2, #8
 8005a90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	f003 0307 	and.w	r3, r3, #7
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	220f      	movs	r2, #15
 8005a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa2:	43db      	mvns	r3, r3
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	08d2      	lsrs	r2, r2, #3
 8005aa8:	4019      	ands	r1, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	3208      	adds	r2, #8
 8005aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	2103      	movs	r1, #3
 8005abc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac0:	43db      	mvns	r3, r3
 8005ac2:	401a      	ands	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	2101      	movs	r1, #1
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad4:	43db      	mvns	r3, r3
 8005ad6:	401a      	ands	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689a      	ldr	r2, [r3, #8]
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	2103      	movs	r1, #3
 8005ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8005aea:	43db      	mvns	r3, r3
 8005aec:	401a      	ands	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	3301      	adds	r3, #1
 8005af6:	617b      	str	r3, [r7, #20]
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	2b0f      	cmp	r3, #15
 8005afc:	f67f af22 	bls.w	8005944 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005b00:	bf00      	nop
 8005b02:	bf00      	nop
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	40013800 	.word	0x40013800
 8005b14:	40020000 	.word	0x40020000
 8005b18:	40020400 	.word	0x40020400
 8005b1c:	40020800 	.word	0x40020800
 8005b20:	40020c00 	.word	0x40020c00
 8005b24:	40021000 	.word	0x40021000
 8005b28:	40021400 	.word	0x40021400
 8005b2c:	40021800 	.word	0x40021800
 8005b30:	40021c00 	.word	0x40021c00
 8005b34:	40022000 	.word	0x40022000
 8005b38:	40022400 	.word	0x40022400
 8005b3c:	40013c00 	.word	0x40013c00

08005b40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	691a      	ldr	r2, [r3, #16]
 8005b50:	887b      	ldrh	r3, [r7, #2]
 8005b52:	4013      	ands	r3, r2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d002      	beq.n	8005b5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	73fb      	strb	r3, [r7, #15]
 8005b5c:	e001      	b.n	8005b62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3714      	adds	r7, #20
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	460b      	mov	r3, r1
 8005b7a:	807b      	strh	r3, [r7, #2]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b80:	787b      	ldrb	r3, [r7, #1]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b86:	887a      	ldrh	r2, [r7, #2]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b8c:	e003      	b.n	8005b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b8e:	887b      	ldrh	r3, [r7, #2]
 8005b90:	041a      	lsls	r2, r3, #16
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	619a      	str	r2, [r3, #24]
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
	...

08005ba4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e12b      	b.n	8005e0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d106      	bne.n	8005bd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7fc fa0c 	bl	8001fe8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2224      	movs	r2, #36	; 0x24
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 0201 	bic.w	r2, r2, #1
 8005be6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bf6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c08:	f001 f9d4 	bl	8006fb4 <HAL_RCC_GetPCLK1Freq>
 8005c0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	4a81      	ldr	r2, [pc, #516]	; (8005e18 <HAL_I2C_Init+0x274>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d807      	bhi.n	8005c28 <HAL_I2C_Init+0x84>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4a80      	ldr	r2, [pc, #512]	; (8005e1c <HAL_I2C_Init+0x278>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	bf94      	ite	ls
 8005c20:	2301      	movls	r3, #1
 8005c22:	2300      	movhi	r3, #0
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	e006      	b.n	8005c36 <HAL_I2C_Init+0x92>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4a7d      	ldr	r2, [pc, #500]	; (8005e20 <HAL_I2C_Init+0x27c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	bf94      	ite	ls
 8005c30:	2301      	movls	r3, #1
 8005c32:	2300      	movhi	r3, #0
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e0e7      	b.n	8005e0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	4a78      	ldr	r2, [pc, #480]	; (8005e24 <HAL_I2C_Init+0x280>)
 8005c42:	fba2 2303 	umull	r2, r3, r2, r3
 8005c46:	0c9b      	lsrs	r3, r3, #18
 8005c48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	4a6a      	ldr	r2, [pc, #424]	; (8005e18 <HAL_I2C_Init+0x274>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d802      	bhi.n	8005c78 <HAL_I2C_Init+0xd4>
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	3301      	adds	r3, #1
 8005c76:	e009      	b.n	8005c8c <HAL_I2C_Init+0xe8>
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	4a69      	ldr	r2, [pc, #420]	; (8005e28 <HAL_I2C_Init+0x284>)
 8005c84:	fba2 2303 	umull	r2, r3, r2, r3
 8005c88:	099b      	lsrs	r3, r3, #6
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6812      	ldr	r2, [r2, #0]
 8005c90:	430b      	orrs	r3, r1
 8005c92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005c9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	495c      	ldr	r1, [pc, #368]	; (8005e18 <HAL_I2C_Init+0x274>)
 8005ca8:	428b      	cmp	r3, r1
 8005caa:	d819      	bhi.n	8005ce0 <HAL_I2C_Init+0x13c>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	1e59      	subs	r1, r3, #1
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cba:	1c59      	adds	r1, r3, #1
 8005cbc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005cc0:	400b      	ands	r3, r1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00a      	beq.n	8005cdc <HAL_I2C_Init+0x138>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	1e59      	subs	r1, r3, #1
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cda:	e051      	b.n	8005d80 <HAL_I2C_Init+0x1dc>
 8005cdc:	2304      	movs	r3, #4
 8005cde:	e04f      	b.n	8005d80 <HAL_I2C_Init+0x1dc>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d111      	bne.n	8005d0c <HAL_I2C_Init+0x168>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	1e58      	subs	r0, r3, #1
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6859      	ldr	r1, [r3, #4]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	440b      	add	r3, r1
 8005cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	bf0c      	ite	eq
 8005d04:	2301      	moveq	r3, #1
 8005d06:	2300      	movne	r3, #0
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	e012      	b.n	8005d32 <HAL_I2C_Init+0x18e>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	1e58      	subs	r0, r3, #1
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6859      	ldr	r1, [r3, #4]
 8005d14:	460b      	mov	r3, r1
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	440b      	add	r3, r1
 8005d1a:	0099      	lsls	r1, r3, #2
 8005d1c:	440b      	add	r3, r1
 8005d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d22:	3301      	adds	r3, #1
 8005d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	bf0c      	ite	eq
 8005d2c:	2301      	moveq	r3, #1
 8005d2e:	2300      	movne	r3, #0
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <HAL_I2C_Init+0x196>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e022      	b.n	8005d80 <HAL_I2C_Init+0x1dc>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10e      	bne.n	8005d60 <HAL_I2C_Init+0x1bc>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	1e58      	subs	r0, r3, #1
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6859      	ldr	r1, [r3, #4]
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	440b      	add	r3, r1
 8005d50:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d54:	3301      	adds	r3, #1
 8005d56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d5e:	e00f      	b.n	8005d80 <HAL_I2C_Init+0x1dc>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	1e58      	subs	r0, r3, #1
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6859      	ldr	r1, [r3, #4]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	440b      	add	r3, r1
 8005d6e:	0099      	lsls	r1, r3, #2
 8005d70:	440b      	add	r3, r1
 8005d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d76:	3301      	adds	r3, #1
 8005d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d80:	6879      	ldr	r1, [r7, #4]
 8005d82:	6809      	ldr	r1, [r1, #0]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	69da      	ldr	r2, [r3, #28]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005dae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	6911      	ldr	r1, [r2, #16]
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	68d2      	ldr	r2, [r2, #12]
 8005dba:	4311      	orrs	r1, r2
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	6812      	ldr	r2, [r2, #0]
 8005dc0:	430b      	orrs	r3, r1
 8005dc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	695a      	ldr	r2, [r3, #20]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0201 	orr.w	r2, r2, #1
 8005dee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	000186a0 	.word	0x000186a0
 8005e1c:	001e847f 	.word	0x001e847f
 8005e20:	003d08ff 	.word	0x003d08ff
 8005e24:	431bde83 	.word	0x431bde83
 8005e28:	10624dd3 	.word	0x10624dd3

08005e2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b20      	cmp	r3, #32
 8005e40:	d129      	bne.n	8005e96 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2224      	movs	r2, #36	; 0x24
 8005e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 0201 	bic.w	r2, r2, #1
 8005e58:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 0210 	bic.w	r2, r2, #16
 8005e68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	430a      	orrs	r2, r1
 8005e78:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f042 0201 	orr.w	r2, r2, #1
 8005e88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	e000      	b.n	8005e98 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005e96:	2302      	movs	r3, #2
  }
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b20      	cmp	r3, #32
 8005ebc:	d12a      	bne.n	8005f14 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2224      	movs	r2, #36	; 0x24
 8005ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0201 	bic.w	r2, r2, #1
 8005ed4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005edc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005ede:	89fb      	ldrh	r3, [r7, #14]
 8005ee0:	f023 030f 	bic.w	r3, r3, #15
 8005ee4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	89fb      	ldrh	r3, [r7, #14]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	89fa      	ldrh	r2, [r7, #14]
 8005ef6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0201 	orr.w	r2, r2, #1
 8005f06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005f10:	2300      	movs	r3, #0
 8005f12:	e000      	b.n	8005f16 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005f14:	2302      	movs	r3, #2
  }
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
	...

08005f24 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e0bf      	b.n	80060b6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d106      	bne.n	8005f50 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7fc f8b6 	bl	80020bc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699a      	ldr	r2, [r3, #24]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005f66:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6999      	ldr	r1, [r3, #24]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f7c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6899      	ldr	r1, [r3, #8]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	4b4a      	ldr	r3, [pc, #296]	; (80060c0 <HAL_LTDC_Init+0x19c>)
 8005f98:	400b      	ands	r3, r1
 8005f9a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	041b      	lsls	r3, r3, #16
 8005fa2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6899      	ldr	r1, [r3, #8]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	699a      	ldr	r2, [r3, #24]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68d9      	ldr	r1, [r3, #12]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	4b3e      	ldr	r3, [pc, #248]	; (80060c0 <HAL_LTDC_Init+0x19c>)
 8005fc6:	400b      	ands	r3, r1
 8005fc8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	041b      	lsls	r3, r3, #16
 8005fd0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68d9      	ldr	r1, [r3, #12]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a1a      	ldr	r2, [r3, #32]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6919      	ldr	r1, [r3, #16]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	4b33      	ldr	r3, [pc, #204]	; (80060c0 <HAL_LTDC_Init+0x19c>)
 8005ff4:	400b      	ands	r3, r1
 8005ff6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	041b      	lsls	r3, r3, #16
 8005ffe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6919      	ldr	r1, [r3, #16]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	431a      	orrs	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6959      	ldr	r1, [r3, #20]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	4b27      	ldr	r3, [pc, #156]	; (80060c0 <HAL_LTDC_Init+0x19c>)
 8006022:	400b      	ands	r3, r1
 8006024:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602a:	041b      	lsls	r3, r3, #16
 800602c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6959      	ldr	r1, [r3, #20]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	431a      	orrs	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800604a:	021b      	lsls	r3, r3, #8
 800604c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006054:	041b      	lsls	r3, r3, #16
 8006056:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006066:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4313      	orrs	r3, r2
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800607a:	431a      	orrs	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0206 	orr.w	r2, r2, #6
 8006092:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	699a      	ldr	r2, [r3, #24]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0201 	orr.w	r2, r2, #1
 80060a2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	f000f800 	.word	0xf000f800

080060c4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060da:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f003 0304 	and.w	r3, r3, #4
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d023      	beq.n	800612e <HAL_LTDC_IRQHandler+0x6a>
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	f003 0304 	and.w	r3, r3, #4
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d01e      	beq.n	800612e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0204 	bic.w	r2, r2, #4
 80060fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2204      	movs	r2, #4
 8006106:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800610e:	f043 0201 	orr.w	r2, r3, #1
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2204      	movs	r2, #4
 800611c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f86f 	bl	800620c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d023      	beq.n	8006180 <HAL_LTDC_IRQHandler+0xbc>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d01e      	beq.n	8006180 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 0202 	bic.w	r2, r2, #2
 8006150:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2202      	movs	r2, #2
 8006158:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006160:	f043 0202 	orr.w	r2, r3, #2
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2204      	movs	r2, #4
 800616e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f846 	bl	800620c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	2b00      	cmp	r3, #0
 8006188:	d01b      	beq.n	80061c2 <HAL_LTDC_IRQHandler+0xfe>
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	f003 0301 	and.w	r3, r3, #1
 8006190:	2b00      	cmp	r3, #0
 8006192:	d016      	beq.n	80061c2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 0201 	bic.w	r2, r2, #1
 80061a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2201      	movs	r2, #1
 80061aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f82f 	bl	8006220 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f003 0308 	and.w	r3, r3, #8
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d01b      	beq.n	8006204 <HAL_LTDC_IRQHandler+0x140>
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f003 0308 	and.w	r3, r3, #8
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d016      	beq.n	8006204 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f022 0208 	bic.w	r2, r2, #8
 80061e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2208      	movs	r2, #8
 80061ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7fb fb5c 	bl	80018bc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006204:	bf00      	nop
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006234:	b5b0      	push	{r4, r5, r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006246:	2b01      	cmp	r3, #1
 8006248:	d101      	bne.n	800624e <HAL_LTDC_ConfigLayer+0x1a>
 800624a:	2302      	movs	r3, #2
 800624c:	e02c      	b.n	80062a8 <HAL_LTDC_ConfigLayer+0x74>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2202      	movs	r2, #2
 800625a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2134      	movs	r1, #52	; 0x34
 8006264:	fb01 f303 	mul.w	r3, r1, r3
 8006268:	4413      	add	r3, r2
 800626a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	4614      	mov	r4, r2
 8006272:	461d      	mov	r5, r3
 8006274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800627a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800627c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800627e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006280:	682b      	ldr	r3, [r5, #0]
 8006282:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	68b9      	ldr	r1, [r7, #8]
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 f83b 	bl	8006304 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2201      	movs	r2, #1
 8006294:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bdb0      	pop	{r4, r5, r7, pc}

080062b0 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d101      	bne.n	80062c6 <HAL_LTDC_EnableDither+0x16>
 80062c2:	2302      	movs	r3, #2
 80062c4:	e016      	b.n	80062f4 <HAL_LTDC_EnableDither+0x44>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2202      	movs	r2, #2
 80062d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80062d6:	4b0a      	ldr	r3, [pc, #40]	; (8006300 <HAL_LTDC_EnableDither+0x50>)
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	4a09      	ldr	r2, [pc, #36]	; (8006300 <HAL_LTDC_EnableDither+0x50>)
 80062dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062e0:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	40016800 	.word	0x40016800

08006304 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006304:	b480      	push	{r7}
 8006306:	b089      	sub	sp, #36	; 0x24
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	0c1b      	lsrs	r3, r3, #16
 800631c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006320:	4413      	add	r3, r2
 8006322:	041b      	lsls	r3, r3, #16
 8006324:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	461a      	mov	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	01db      	lsls	r3, r3, #7
 8006330:	4413      	add	r3, r2
 8006332:	3384      	adds	r3, #132	; 0x84
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	6812      	ldr	r2, [r2, #0]
 800633a:	4611      	mov	r1, r2
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	01d2      	lsls	r2, r2, #7
 8006340:	440a      	add	r2, r1
 8006342:	3284      	adds	r2, #132	; 0x84
 8006344:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006348:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	0c1b      	lsrs	r3, r3, #16
 8006356:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800635a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800635c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4619      	mov	r1, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	01db      	lsls	r3, r3, #7
 8006368:	440b      	add	r3, r1
 800636a:	3384      	adds	r3, #132	; 0x84
 800636c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006372:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	68da      	ldr	r2, [r3, #12]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006382:	4413      	add	r3, r2
 8006384:	041b      	lsls	r3, r3, #16
 8006386:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	461a      	mov	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	01db      	lsls	r3, r3, #7
 8006392:	4413      	add	r3, r2
 8006394:	3384      	adds	r3, #132	; 0x84
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	6812      	ldr	r2, [r2, #0]
 800639c:	4611      	mov	r1, r2
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	01d2      	lsls	r2, r2, #7
 80063a2:	440a      	add	r2, r1
 80063a4:	3284      	adds	r2, #132	; 0x84
 80063a6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80063aa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	689a      	ldr	r2, [r3, #8]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063ba:	4413      	add	r3, r2
 80063bc:	1c5a      	adds	r2, r3, #1
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4619      	mov	r1, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	01db      	lsls	r3, r3, #7
 80063c8:	440b      	add	r3, r1
 80063ca:	3384      	adds	r3, #132	; 0x84
 80063cc:	4619      	mov	r1, r3
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	461a      	mov	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	01db      	lsls	r3, r3, #7
 80063de:	4413      	add	r3, r2
 80063e0:	3384      	adds	r3, #132	; 0x84
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	6812      	ldr	r2, [r2, #0]
 80063e8:	4611      	mov	r1, r2
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	01d2      	lsls	r2, r2, #7
 80063ee:	440a      	add	r2, r1
 80063f0:	3284      	adds	r2, #132	; 0x84
 80063f2:	f023 0307 	bic.w	r3, r3, #7
 80063f6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	461a      	mov	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	01db      	lsls	r3, r3, #7
 8006402:	4413      	add	r3, r2
 8006404:	3384      	adds	r3, #132	; 0x84
 8006406:	461a      	mov	r2, r3
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006414:	021b      	lsls	r3, r3, #8
 8006416:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800641e:	041b      	lsls	r3, r3, #16
 8006420:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	061b      	lsls	r3, r3, #24
 8006428:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	01db      	lsls	r3, r3, #7
 8006434:	4413      	add	r3, r2
 8006436:	3384      	adds	r3, #132	; 0x84
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	461a      	mov	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	01db      	lsls	r3, r3, #7
 8006444:	4413      	add	r3, r2
 8006446:	3384      	adds	r3, #132	; 0x84
 8006448:	461a      	mov	r2, r3
 800644a:	2300      	movs	r3, #0
 800644c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006454:	461a      	mov	r2, r3
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	431a      	orrs	r2, r3
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	431a      	orrs	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4619      	mov	r1, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	01db      	lsls	r3, r3, #7
 8006468:	440b      	add	r3, r1
 800646a:	3384      	adds	r3, #132	; 0x84
 800646c:	4619      	mov	r1, r3
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	4313      	orrs	r3, r2
 8006472:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	461a      	mov	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	01db      	lsls	r3, r3, #7
 800647e:	4413      	add	r3, r2
 8006480:	3384      	adds	r3, #132	; 0x84
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	6812      	ldr	r2, [r2, #0]
 8006488:	4611      	mov	r1, r2
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	01d2      	lsls	r2, r2, #7
 800648e:	440a      	add	r2, r1
 8006490:	3284      	adds	r2, #132	; 0x84
 8006492:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006496:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	461a      	mov	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	01db      	lsls	r3, r3, #7
 80064a2:	4413      	add	r3, r2
 80064a4:	3384      	adds	r3, #132	; 0x84
 80064a6:	461a      	mov	r2, r3
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	01db      	lsls	r3, r3, #7
 80064b8:	4413      	add	r3, r2
 80064ba:	3384      	adds	r3, #132	; 0x84
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	6812      	ldr	r2, [r2, #0]
 80064c2:	4611      	mov	r1, r2
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	01d2      	lsls	r2, r2, #7
 80064c8:	440a      	add	r2, r1
 80064ca:	3284      	adds	r2, #132	; 0x84
 80064cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80064d0:	f023 0307 	bic.w	r3, r3, #7
 80064d4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	69da      	ldr	r2, [r3, #28]
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	68f9      	ldr	r1, [r7, #12]
 80064e0:	6809      	ldr	r1, [r1, #0]
 80064e2:	4608      	mov	r0, r1
 80064e4:	6879      	ldr	r1, [r7, #4]
 80064e6:	01c9      	lsls	r1, r1, #7
 80064e8:	4401      	add	r1, r0
 80064ea:	3184      	adds	r1, #132	; 0x84
 80064ec:	4313      	orrs	r3, r2
 80064ee:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	461a      	mov	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	01db      	lsls	r3, r3, #7
 80064fa:	4413      	add	r3, r2
 80064fc:	3384      	adds	r3, #132	; 0x84
 80064fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	461a      	mov	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	01db      	lsls	r3, r3, #7
 800650a:	4413      	add	r3, r2
 800650c:	3384      	adds	r3, #132	; 0x84
 800650e:	461a      	mov	r2, r3
 8006510:	2300      	movs	r3, #0
 8006512:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	461a      	mov	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	01db      	lsls	r3, r3, #7
 800651e:	4413      	add	r3, r2
 8006520:	3384      	adds	r3, #132	; 0x84
 8006522:	461a      	mov	r2, r3
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006528:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d102      	bne.n	8006538 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006532:	2304      	movs	r3, #4
 8006534:	61fb      	str	r3, [r7, #28]
 8006536:	e01b      	b.n	8006570 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d102      	bne.n	8006546 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006540:	2303      	movs	r3, #3
 8006542:	61fb      	str	r3, [r7, #28]
 8006544:	e014      	b.n	8006570 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	2b04      	cmp	r3, #4
 800654c:	d00b      	beq.n	8006566 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006552:	2b02      	cmp	r3, #2
 8006554:	d007      	beq.n	8006566 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800655a:	2b03      	cmp	r3, #3
 800655c:	d003      	beq.n	8006566 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006562:	2b07      	cmp	r3, #7
 8006564:	d102      	bne.n	800656c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006566:	2302      	movs	r3, #2
 8006568:	61fb      	str	r3, [r7, #28]
 800656a:	e001      	b.n	8006570 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800656c:	2301      	movs	r3, #1
 800656e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	461a      	mov	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	01db      	lsls	r3, r3, #7
 800657a:	4413      	add	r3, r2
 800657c:	3384      	adds	r3, #132	; 0x84
 800657e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	6812      	ldr	r2, [r2, #0]
 8006584:	4611      	mov	r1, r2
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	01d2      	lsls	r2, r2, #7
 800658a:	440a      	add	r2, r1
 800658c:	3284      	adds	r2, #132	; 0x84
 800658e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006592:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006598:	69fa      	ldr	r2, [r7, #28]
 800659a:	fb02 f303 	mul.w	r3, r2, r3
 800659e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	6859      	ldr	r1, [r3, #4]
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	1acb      	subs	r3, r1, r3
 80065aa:	69f9      	ldr	r1, [r7, #28]
 80065ac:	fb01 f303 	mul.w	r3, r1, r3
 80065b0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80065b2:	68f9      	ldr	r1, [r7, #12]
 80065b4:	6809      	ldr	r1, [r1, #0]
 80065b6:	4608      	mov	r0, r1
 80065b8:	6879      	ldr	r1, [r7, #4]
 80065ba:	01c9      	lsls	r1, r1, #7
 80065bc:	4401      	add	r1, r0
 80065be:	3184      	adds	r1, #132	; 0x84
 80065c0:	4313      	orrs	r3, r2
 80065c2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	461a      	mov	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	01db      	lsls	r3, r3, #7
 80065ce:	4413      	add	r3, r2
 80065d0:	3384      	adds	r3, #132	; 0x84
 80065d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	6812      	ldr	r2, [r2, #0]
 80065d8:	4611      	mov	r1, r2
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	01d2      	lsls	r2, r2, #7
 80065de:	440a      	add	r2, r1
 80065e0:	3284      	adds	r2, #132	; 0x84
 80065e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80065e6:	f023 0307 	bic.w	r3, r3, #7
 80065ea:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	461a      	mov	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	01db      	lsls	r3, r3, #7
 80065f6:	4413      	add	r3, r2
 80065f8:	3384      	adds	r3, #132	; 0x84
 80065fa:	461a      	mov	r2, r3
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006600:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	461a      	mov	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	01db      	lsls	r3, r3, #7
 800660c:	4413      	add	r3, r2
 800660e:	3384      	adds	r3, #132	; 0x84
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	6812      	ldr	r2, [r2, #0]
 8006616:	4611      	mov	r1, r2
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	01d2      	lsls	r2, r2, #7
 800661c:	440a      	add	r2, r1
 800661e:	3284      	adds	r2, #132	; 0x84
 8006620:	f043 0301 	orr.w	r3, r3, #1
 8006624:	6013      	str	r3, [r2, #0]
}
 8006626:	bf00      	nop
 8006628:	3724      	adds	r7, #36	; 0x24
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
	...

08006634 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800663e:	2300      	movs	r3, #0
 8006640:	603b      	str	r3, [r7, #0]
 8006642:	4b20      	ldr	r3, [pc, #128]	; (80066c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006646:	4a1f      	ldr	r2, [pc, #124]	; (80066c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800664c:	6413      	str	r3, [r2, #64]	; 0x40
 800664e:	4b1d      	ldr	r3, [pc, #116]	; (80066c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006656:	603b      	str	r3, [r7, #0]
 8006658:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800665a:	4b1b      	ldr	r3, [pc, #108]	; (80066c8 <HAL_PWREx_EnableOverDrive+0x94>)
 800665c:	2201      	movs	r2, #1
 800665e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006660:	f7fe f89c 	bl	800479c <HAL_GetTick>
 8006664:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006666:	e009      	b.n	800667c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006668:	f7fe f898 	bl	800479c <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006676:	d901      	bls.n	800667c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e01f      	b.n	80066bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800667c:	4b13      	ldr	r3, [pc, #76]	; (80066cc <HAL_PWREx_EnableOverDrive+0x98>)
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006688:	d1ee      	bne.n	8006668 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800668a:	4b11      	ldr	r3, [pc, #68]	; (80066d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800668c:	2201      	movs	r2, #1
 800668e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006690:	f7fe f884 	bl	800479c <HAL_GetTick>
 8006694:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006696:	e009      	b.n	80066ac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006698:	f7fe f880 	bl	800479c <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066a6:	d901      	bls.n	80066ac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e007      	b.n	80066bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80066ac:	4b07      	ldr	r3, [pc, #28]	; (80066cc <HAL_PWREx_EnableOverDrive+0x98>)
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066b8:	d1ee      	bne.n	8006698 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3708      	adds	r7, #8
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	40023800 	.word	0x40023800
 80066c8:	420e0040 	.word	0x420e0040
 80066cc:	40007000 	.word	0x40007000
 80066d0:	420e0044 	.word	0x420e0044

080066d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e267      	b.n	8006bb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d075      	beq.n	80067de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066f2:	4b88      	ldr	r3, [pc, #544]	; (8006914 <HAL_RCC_OscConfig+0x240>)
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f003 030c 	and.w	r3, r3, #12
 80066fa:	2b04      	cmp	r3, #4
 80066fc:	d00c      	beq.n	8006718 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066fe:	4b85      	ldr	r3, [pc, #532]	; (8006914 <HAL_RCC_OscConfig+0x240>)
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006706:	2b08      	cmp	r3, #8
 8006708:	d112      	bne.n	8006730 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800670a:	4b82      	ldr	r3, [pc, #520]	; (8006914 <HAL_RCC_OscConfig+0x240>)
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006716:	d10b      	bne.n	8006730 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006718:	4b7e      	ldr	r3, [pc, #504]	; (8006914 <HAL_RCC_OscConfig+0x240>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006720:	2b00      	cmp	r3, #0
 8006722:	d05b      	beq.n	80067dc <HAL_RCC_OscConfig+0x108>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d157      	bne.n	80067dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e242      	b.n	8006bb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006738:	d106      	bne.n	8006748 <HAL_RCC_OscConfig+0x74>
 800673a:	4b76      	ldr	r3, [pc, #472]	; (8006914 <HAL_RCC_OscConfig+0x240>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a75      	ldr	r2, [pc, #468]	; (8006914 <HAL_RCC_OscConfig+0x240>)
 8006740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006744:	6013      	str	r3, [r2, #0]
 8006746:	e01d      	b.n	8006784 <HAL_RCC_OscConfig+0xb0>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006750:	d10c      	bne.n	800676c <HAL_RCC_OscConfig+0x98>
 8006752:	4b70      	ldr	r3, [pc, #448]	; (8006914 <HAL_RCC_OscConfig+0x240>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a6f      	ldr	r2, [pc, #444]	; (8006914 <HAL_RCC_OscConfig+0x240>)
 8006758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800675c:	6013      	str	r3, [r2, #0]
 800675e:	4b6d      	ldr	r3, [pc, #436]	; (8006914 <HAL_RCC_OscConfig+0x240>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a6c      	ldr	r2, [pc, #432]	; (8006914 <HAL_RCC_OscConfig+0x240>)
 8006764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006768:	6013      	str	r3, [r2, #0]
 800676a:	e00b      	b.n	8006784 <HAL_RCC_OscConfig+0xb0>
 800676c:	4b69      	ldr	r3, [pc, #420]	; (8006914 <HAL_RCC_OscConfig+0x240>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a68      	ldr	r2, [pc, #416]	; (8006914 <HAL_RCC_OscConfig+0x240>)
 8006772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006776:	6013      	str	r3, [r2, #0]
 8006778:	4b66      	ldr	r3, [pc, #408]	; (8006914 <HAL_RCC_OscConfig+0x240>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a65      	ldr	r2, [pc, #404]	; (8006914 <HAL_RCC_OscConfig+0x240>)
 800677e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d013      	beq.n	80067b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800678c:	f7fe f806 	bl	800479c <HAL_GetTick>
 8006790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006792:	e008      	b.n	80067a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006794:	f7fe f802 	bl	800479c <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	2b64      	cmp	r3, #100	; 0x64
 80067a0:	d901      	bls.n	80067a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e207      	b.n	8006bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067a6:	4b5b      	ldr	r3, [pc, #364]	; (8006914 <HAL_RCC_OscConfig+0x240>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d0f0      	beq.n	8006794 <HAL_RCC_OscConfig+0xc0>
 80067b2:	e014      	b.n	80067de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067b4:	f7fd fff2 	bl	800479c <HAL_GetTick>
 80067b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067ba:	e008      	b.n	80067ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067bc:	f7fd ffee 	bl	800479c <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	2b64      	cmp	r3, #100	; 0x64
 80067c8:	d901      	bls.n	80067ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e1f3      	b.n	8006bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067ce:	4b51      	ldr	r3, [pc, #324]	; (8006914 <HAL_RCC_OscConfig+0x240>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1f0      	bne.n	80067bc <HAL_RCC_OscConfig+0xe8>
 80067da:	e000      	b.n	80067de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0302 	and.w	r3, r3, #2
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d063      	beq.n	80068b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067ea:	4b4a      	ldr	r3, [pc, #296]	; (8006914 <HAL_RCC_OscConfig+0x240>)
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f003 030c 	and.w	r3, r3, #12
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00b      	beq.n	800680e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067f6:	4b47      	ldr	r3, [pc, #284]	; (8006914 <HAL_RCC_OscConfig+0x240>)
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067fe:	2b08      	cmp	r3, #8
 8006800:	d11c      	bne.n	800683c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006802:	4b44      	ldr	r3, [pc, #272]	; (8006914 <HAL_RCC_OscConfig+0x240>)
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d116      	bne.n	800683c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800680e:	4b41      	ldr	r3, [pc, #260]	; (8006914 <HAL_RCC_OscConfig+0x240>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b00      	cmp	r3, #0
 8006818:	d005      	beq.n	8006826 <HAL_RCC_OscConfig+0x152>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d001      	beq.n	8006826 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e1c7      	b.n	8006bb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006826:	4b3b      	ldr	r3, [pc, #236]	; (8006914 <HAL_RCC_OscConfig+0x240>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	00db      	lsls	r3, r3, #3
 8006834:	4937      	ldr	r1, [pc, #220]	; (8006914 <HAL_RCC_OscConfig+0x240>)
 8006836:	4313      	orrs	r3, r2
 8006838:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800683a:	e03a      	b.n	80068b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d020      	beq.n	8006886 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006844:	4b34      	ldr	r3, [pc, #208]	; (8006918 <HAL_RCC_OscConfig+0x244>)
 8006846:	2201      	movs	r2, #1
 8006848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800684a:	f7fd ffa7 	bl	800479c <HAL_GetTick>
 800684e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006850:	e008      	b.n	8006864 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006852:	f7fd ffa3 	bl	800479c <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	2b02      	cmp	r3, #2
 800685e:	d901      	bls.n	8006864 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e1a8      	b.n	8006bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006864:	4b2b      	ldr	r3, [pc, #172]	; (8006914 <HAL_RCC_OscConfig+0x240>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0302 	and.w	r3, r3, #2
 800686c:	2b00      	cmp	r3, #0
 800686e:	d0f0      	beq.n	8006852 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006870:	4b28      	ldr	r3, [pc, #160]	; (8006914 <HAL_RCC_OscConfig+0x240>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	00db      	lsls	r3, r3, #3
 800687e:	4925      	ldr	r1, [pc, #148]	; (8006914 <HAL_RCC_OscConfig+0x240>)
 8006880:	4313      	orrs	r3, r2
 8006882:	600b      	str	r3, [r1, #0]
 8006884:	e015      	b.n	80068b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006886:	4b24      	ldr	r3, [pc, #144]	; (8006918 <HAL_RCC_OscConfig+0x244>)
 8006888:	2200      	movs	r2, #0
 800688a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800688c:	f7fd ff86 	bl	800479c <HAL_GetTick>
 8006890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006892:	e008      	b.n	80068a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006894:	f7fd ff82 	bl	800479c <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d901      	bls.n	80068a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e187      	b.n	8006bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068a6:	4b1b      	ldr	r3, [pc, #108]	; (8006914 <HAL_RCC_OscConfig+0x240>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1f0      	bne.n	8006894 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0308 	and.w	r3, r3, #8
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d036      	beq.n	800692c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d016      	beq.n	80068f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068c6:	4b15      	ldr	r3, [pc, #84]	; (800691c <HAL_RCC_OscConfig+0x248>)
 80068c8:	2201      	movs	r2, #1
 80068ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068cc:	f7fd ff66 	bl	800479c <HAL_GetTick>
 80068d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068d2:	e008      	b.n	80068e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068d4:	f7fd ff62 	bl	800479c <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d901      	bls.n	80068e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e167      	b.n	8006bb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068e6:	4b0b      	ldr	r3, [pc, #44]	; (8006914 <HAL_RCC_OscConfig+0x240>)
 80068e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d0f0      	beq.n	80068d4 <HAL_RCC_OscConfig+0x200>
 80068f2:	e01b      	b.n	800692c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068f4:	4b09      	ldr	r3, [pc, #36]	; (800691c <HAL_RCC_OscConfig+0x248>)
 80068f6:	2200      	movs	r2, #0
 80068f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068fa:	f7fd ff4f 	bl	800479c <HAL_GetTick>
 80068fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006900:	e00e      	b.n	8006920 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006902:	f7fd ff4b 	bl	800479c <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	2b02      	cmp	r3, #2
 800690e:	d907      	bls.n	8006920 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e150      	b.n	8006bb6 <HAL_RCC_OscConfig+0x4e2>
 8006914:	40023800 	.word	0x40023800
 8006918:	42470000 	.word	0x42470000
 800691c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006920:	4b88      	ldr	r3, [pc, #544]	; (8006b44 <HAL_RCC_OscConfig+0x470>)
 8006922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006924:	f003 0302 	and.w	r3, r3, #2
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1ea      	bne.n	8006902 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0304 	and.w	r3, r3, #4
 8006934:	2b00      	cmp	r3, #0
 8006936:	f000 8097 	beq.w	8006a68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800693a:	2300      	movs	r3, #0
 800693c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800693e:	4b81      	ldr	r3, [pc, #516]	; (8006b44 <HAL_RCC_OscConfig+0x470>)
 8006940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10f      	bne.n	800696a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800694a:	2300      	movs	r3, #0
 800694c:	60bb      	str	r3, [r7, #8]
 800694e:	4b7d      	ldr	r3, [pc, #500]	; (8006b44 <HAL_RCC_OscConfig+0x470>)
 8006950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006952:	4a7c      	ldr	r2, [pc, #496]	; (8006b44 <HAL_RCC_OscConfig+0x470>)
 8006954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006958:	6413      	str	r3, [r2, #64]	; 0x40
 800695a:	4b7a      	ldr	r3, [pc, #488]	; (8006b44 <HAL_RCC_OscConfig+0x470>)
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006962:	60bb      	str	r3, [r7, #8]
 8006964:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006966:	2301      	movs	r3, #1
 8006968:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800696a:	4b77      	ldr	r3, [pc, #476]	; (8006b48 <HAL_RCC_OscConfig+0x474>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006972:	2b00      	cmp	r3, #0
 8006974:	d118      	bne.n	80069a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006976:	4b74      	ldr	r3, [pc, #464]	; (8006b48 <HAL_RCC_OscConfig+0x474>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a73      	ldr	r2, [pc, #460]	; (8006b48 <HAL_RCC_OscConfig+0x474>)
 800697c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006980:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006982:	f7fd ff0b 	bl	800479c <HAL_GetTick>
 8006986:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006988:	e008      	b.n	800699c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800698a:	f7fd ff07 	bl	800479c <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	2b02      	cmp	r3, #2
 8006996:	d901      	bls.n	800699c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e10c      	b.n	8006bb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800699c:	4b6a      	ldr	r3, [pc, #424]	; (8006b48 <HAL_RCC_OscConfig+0x474>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d0f0      	beq.n	800698a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d106      	bne.n	80069be <HAL_RCC_OscConfig+0x2ea>
 80069b0:	4b64      	ldr	r3, [pc, #400]	; (8006b44 <HAL_RCC_OscConfig+0x470>)
 80069b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b4:	4a63      	ldr	r2, [pc, #396]	; (8006b44 <HAL_RCC_OscConfig+0x470>)
 80069b6:	f043 0301 	orr.w	r3, r3, #1
 80069ba:	6713      	str	r3, [r2, #112]	; 0x70
 80069bc:	e01c      	b.n	80069f8 <HAL_RCC_OscConfig+0x324>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	2b05      	cmp	r3, #5
 80069c4:	d10c      	bne.n	80069e0 <HAL_RCC_OscConfig+0x30c>
 80069c6:	4b5f      	ldr	r3, [pc, #380]	; (8006b44 <HAL_RCC_OscConfig+0x470>)
 80069c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ca:	4a5e      	ldr	r2, [pc, #376]	; (8006b44 <HAL_RCC_OscConfig+0x470>)
 80069cc:	f043 0304 	orr.w	r3, r3, #4
 80069d0:	6713      	str	r3, [r2, #112]	; 0x70
 80069d2:	4b5c      	ldr	r3, [pc, #368]	; (8006b44 <HAL_RCC_OscConfig+0x470>)
 80069d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d6:	4a5b      	ldr	r2, [pc, #364]	; (8006b44 <HAL_RCC_OscConfig+0x470>)
 80069d8:	f043 0301 	orr.w	r3, r3, #1
 80069dc:	6713      	str	r3, [r2, #112]	; 0x70
 80069de:	e00b      	b.n	80069f8 <HAL_RCC_OscConfig+0x324>
 80069e0:	4b58      	ldr	r3, [pc, #352]	; (8006b44 <HAL_RCC_OscConfig+0x470>)
 80069e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e4:	4a57      	ldr	r2, [pc, #348]	; (8006b44 <HAL_RCC_OscConfig+0x470>)
 80069e6:	f023 0301 	bic.w	r3, r3, #1
 80069ea:	6713      	str	r3, [r2, #112]	; 0x70
 80069ec:	4b55      	ldr	r3, [pc, #340]	; (8006b44 <HAL_RCC_OscConfig+0x470>)
 80069ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f0:	4a54      	ldr	r2, [pc, #336]	; (8006b44 <HAL_RCC_OscConfig+0x470>)
 80069f2:	f023 0304 	bic.w	r3, r3, #4
 80069f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d015      	beq.n	8006a2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a00:	f7fd fecc 	bl	800479c <HAL_GetTick>
 8006a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a06:	e00a      	b.n	8006a1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a08:	f7fd fec8 	bl	800479c <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e0cb      	b.n	8006bb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a1e:	4b49      	ldr	r3, [pc, #292]	; (8006b44 <HAL_RCC_OscConfig+0x470>)
 8006a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d0ee      	beq.n	8006a08 <HAL_RCC_OscConfig+0x334>
 8006a2a:	e014      	b.n	8006a56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a2c:	f7fd feb6 	bl	800479c <HAL_GetTick>
 8006a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a32:	e00a      	b.n	8006a4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a34:	f7fd feb2 	bl	800479c <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d901      	bls.n	8006a4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e0b5      	b.n	8006bb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a4a:	4b3e      	ldr	r3, [pc, #248]	; (8006b44 <HAL_RCC_OscConfig+0x470>)
 8006a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1ee      	bne.n	8006a34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a56:	7dfb      	ldrb	r3, [r7, #23]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d105      	bne.n	8006a68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a5c:	4b39      	ldr	r3, [pc, #228]	; (8006b44 <HAL_RCC_OscConfig+0x470>)
 8006a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a60:	4a38      	ldr	r2, [pc, #224]	; (8006b44 <HAL_RCC_OscConfig+0x470>)
 8006a62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f000 80a1 	beq.w	8006bb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a72:	4b34      	ldr	r3, [pc, #208]	; (8006b44 <HAL_RCC_OscConfig+0x470>)
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f003 030c 	and.w	r3, r3, #12
 8006a7a:	2b08      	cmp	r3, #8
 8006a7c:	d05c      	beq.n	8006b38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d141      	bne.n	8006b0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a86:	4b31      	ldr	r3, [pc, #196]	; (8006b4c <HAL_RCC_OscConfig+0x478>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a8c:	f7fd fe86 	bl	800479c <HAL_GetTick>
 8006a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a92:	e008      	b.n	8006aa6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a94:	f7fd fe82 	bl	800479c <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e087      	b.n	8006bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aa6:	4b27      	ldr	r3, [pc, #156]	; (8006b44 <HAL_RCC_OscConfig+0x470>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1f0      	bne.n	8006a94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	69da      	ldr	r2, [r3, #28]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	431a      	orrs	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	019b      	lsls	r3, r3, #6
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac8:	085b      	lsrs	r3, r3, #1
 8006aca:	3b01      	subs	r3, #1
 8006acc:	041b      	lsls	r3, r3, #16
 8006ace:	431a      	orrs	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad4:	061b      	lsls	r3, r3, #24
 8006ad6:	491b      	ldr	r1, [pc, #108]	; (8006b44 <HAL_RCC_OscConfig+0x470>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006adc:	4b1b      	ldr	r3, [pc, #108]	; (8006b4c <HAL_RCC_OscConfig+0x478>)
 8006ade:	2201      	movs	r2, #1
 8006ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ae2:	f7fd fe5b 	bl	800479c <HAL_GetTick>
 8006ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ae8:	e008      	b.n	8006afc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aea:	f7fd fe57 	bl	800479c <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d901      	bls.n	8006afc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e05c      	b.n	8006bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006afc:	4b11      	ldr	r3, [pc, #68]	; (8006b44 <HAL_RCC_OscConfig+0x470>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d0f0      	beq.n	8006aea <HAL_RCC_OscConfig+0x416>
 8006b08:	e054      	b.n	8006bb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b0a:	4b10      	ldr	r3, [pc, #64]	; (8006b4c <HAL_RCC_OscConfig+0x478>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b10:	f7fd fe44 	bl	800479c <HAL_GetTick>
 8006b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b16:	e008      	b.n	8006b2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b18:	f7fd fe40 	bl	800479c <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e045      	b.n	8006bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b2a:	4b06      	ldr	r3, [pc, #24]	; (8006b44 <HAL_RCC_OscConfig+0x470>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1f0      	bne.n	8006b18 <HAL_RCC_OscConfig+0x444>
 8006b36:	e03d      	b.n	8006bb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d107      	bne.n	8006b50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e038      	b.n	8006bb6 <HAL_RCC_OscConfig+0x4e2>
 8006b44:	40023800 	.word	0x40023800
 8006b48:	40007000 	.word	0x40007000
 8006b4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b50:	4b1b      	ldr	r3, [pc, #108]	; (8006bc0 <HAL_RCC_OscConfig+0x4ec>)
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d028      	beq.n	8006bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d121      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d11a      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b80:	4013      	ands	r3, r2
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d111      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b96:	085b      	lsrs	r3, r3, #1
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d107      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006baa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d001      	beq.n	8006bb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e000      	b.n	8006bb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3718      	adds	r7, #24
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	40023800 	.word	0x40023800

08006bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d101      	bne.n	8006bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e0cc      	b.n	8006d72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006bd8:	4b68      	ldr	r3, [pc, #416]	; (8006d7c <HAL_RCC_ClockConfig+0x1b8>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 030f 	and.w	r3, r3, #15
 8006be0:	683a      	ldr	r2, [r7, #0]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d90c      	bls.n	8006c00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006be6:	4b65      	ldr	r3, [pc, #404]	; (8006d7c <HAL_RCC_ClockConfig+0x1b8>)
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	b2d2      	uxtb	r2, r2
 8006bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bee:	4b63      	ldr	r3, [pc, #396]	; (8006d7c <HAL_RCC_ClockConfig+0x1b8>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 030f 	and.w	r3, r3, #15
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d001      	beq.n	8006c00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e0b8      	b.n	8006d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0302 	and.w	r3, r3, #2
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d020      	beq.n	8006c4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0304 	and.w	r3, r3, #4
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d005      	beq.n	8006c24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c18:	4b59      	ldr	r3, [pc, #356]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	4a58      	ldr	r2, [pc, #352]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0308 	and.w	r3, r3, #8
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d005      	beq.n	8006c3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c30:	4b53      	ldr	r3, [pc, #332]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	4a52      	ldr	r2, [pc, #328]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006c36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c3c:	4b50      	ldr	r3, [pc, #320]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	494d      	ldr	r1, [pc, #308]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d044      	beq.n	8006ce4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d107      	bne.n	8006c72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c62:	4b47      	ldr	r3, [pc, #284]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d119      	bne.n	8006ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e07f      	b.n	8006d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d003      	beq.n	8006c82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c7e:	2b03      	cmp	r3, #3
 8006c80:	d107      	bne.n	8006c92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c82:	4b3f      	ldr	r3, [pc, #252]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d109      	bne.n	8006ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e06f      	b.n	8006d72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c92:	4b3b      	ldr	r3, [pc, #236]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d101      	bne.n	8006ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e067      	b.n	8006d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ca2:	4b37      	ldr	r3, [pc, #220]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f023 0203 	bic.w	r2, r3, #3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	4934      	ldr	r1, [pc, #208]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006cb4:	f7fd fd72 	bl	800479c <HAL_GetTick>
 8006cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cba:	e00a      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cbc:	f7fd fd6e 	bl	800479c <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e04f      	b.n	8006d72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cd2:	4b2b      	ldr	r3, [pc, #172]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f003 020c 	and.w	r2, r3, #12
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d1eb      	bne.n	8006cbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ce4:	4b25      	ldr	r3, [pc, #148]	; (8006d7c <HAL_RCC_ClockConfig+0x1b8>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 030f 	and.w	r3, r3, #15
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d20c      	bcs.n	8006d0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cf2:	4b22      	ldr	r3, [pc, #136]	; (8006d7c <HAL_RCC_ClockConfig+0x1b8>)
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	b2d2      	uxtb	r2, r2
 8006cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cfa:	4b20      	ldr	r3, [pc, #128]	; (8006d7c <HAL_RCC_ClockConfig+0x1b8>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 030f 	and.w	r3, r3, #15
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d001      	beq.n	8006d0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e032      	b.n	8006d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0304 	and.w	r3, r3, #4
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d008      	beq.n	8006d2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d18:	4b19      	ldr	r3, [pc, #100]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	4916      	ldr	r1, [pc, #88]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0308 	and.w	r3, r3, #8
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d009      	beq.n	8006d4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d36:	4b12      	ldr	r3, [pc, #72]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	00db      	lsls	r3, r3, #3
 8006d44:	490e      	ldr	r1, [pc, #56]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006d46:	4313      	orrs	r3, r2
 8006d48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d4a:	f000 f821 	bl	8006d90 <HAL_RCC_GetSysClockFreq>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	4b0b      	ldr	r3, [pc, #44]	; (8006d80 <HAL_RCC_ClockConfig+0x1bc>)
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	091b      	lsrs	r3, r3, #4
 8006d56:	f003 030f 	and.w	r3, r3, #15
 8006d5a:	490a      	ldr	r1, [pc, #40]	; (8006d84 <HAL_RCC_ClockConfig+0x1c0>)
 8006d5c:	5ccb      	ldrb	r3, [r1, r3]
 8006d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d62:	4a09      	ldr	r2, [pc, #36]	; (8006d88 <HAL_RCC_ClockConfig+0x1c4>)
 8006d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d66:	4b09      	ldr	r3, [pc, #36]	; (8006d8c <HAL_RCC_ClockConfig+0x1c8>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7fb fc4a 	bl	8002604 <HAL_InitTick>

  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	40023c00 	.word	0x40023c00
 8006d80:	40023800 	.word	0x40023800
 8006d84:	0800fc28 	.word	0x0800fc28
 8006d88:	20000020 	.word	0x20000020
 8006d8c:	2000009c 	.word	0x2000009c

08006d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d94:	b094      	sub	sp, #80	; 0x50
 8006d96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	647b      	str	r3, [r7, #68]	; 0x44
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006da0:	2300      	movs	r3, #0
 8006da2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006da4:	2300      	movs	r3, #0
 8006da6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006da8:	4b79      	ldr	r3, [pc, #484]	; (8006f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f003 030c 	and.w	r3, r3, #12
 8006db0:	2b08      	cmp	r3, #8
 8006db2:	d00d      	beq.n	8006dd0 <HAL_RCC_GetSysClockFreq+0x40>
 8006db4:	2b08      	cmp	r3, #8
 8006db6:	f200 80e1 	bhi.w	8006f7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d002      	beq.n	8006dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8006dbe:	2b04      	cmp	r3, #4
 8006dc0:	d003      	beq.n	8006dca <HAL_RCC_GetSysClockFreq+0x3a>
 8006dc2:	e0db      	b.n	8006f7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006dc4:	4b73      	ldr	r3, [pc, #460]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x204>)
 8006dc6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006dc8:	e0db      	b.n	8006f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006dca:	4b73      	ldr	r3, [pc, #460]	; (8006f98 <HAL_RCC_GetSysClockFreq+0x208>)
 8006dcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006dce:	e0d8      	b.n	8006f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006dd0:	4b6f      	ldr	r3, [pc, #444]	; (8006f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dd8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006dda:	4b6d      	ldr	r3, [pc, #436]	; (8006f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d063      	beq.n	8006eae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006de6:	4b6a      	ldr	r3, [pc, #424]	; (8006f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	099b      	lsrs	r3, r3, #6
 8006dec:	2200      	movs	r2, #0
 8006dee:	63bb      	str	r3, [r7, #56]	; 0x38
 8006df0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006df8:	633b      	str	r3, [r7, #48]	; 0x30
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8006dfe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006e02:	4622      	mov	r2, r4
 8006e04:	462b      	mov	r3, r5
 8006e06:	f04f 0000 	mov.w	r0, #0
 8006e0a:	f04f 0100 	mov.w	r1, #0
 8006e0e:	0159      	lsls	r1, r3, #5
 8006e10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e14:	0150      	lsls	r0, r2, #5
 8006e16:	4602      	mov	r2, r0
 8006e18:	460b      	mov	r3, r1
 8006e1a:	4621      	mov	r1, r4
 8006e1c:	1a51      	subs	r1, r2, r1
 8006e1e:	6139      	str	r1, [r7, #16]
 8006e20:	4629      	mov	r1, r5
 8006e22:	eb63 0301 	sbc.w	r3, r3, r1
 8006e26:	617b      	str	r3, [r7, #20]
 8006e28:	f04f 0200 	mov.w	r2, #0
 8006e2c:	f04f 0300 	mov.w	r3, #0
 8006e30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e34:	4659      	mov	r1, fp
 8006e36:	018b      	lsls	r3, r1, #6
 8006e38:	4651      	mov	r1, sl
 8006e3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e3e:	4651      	mov	r1, sl
 8006e40:	018a      	lsls	r2, r1, #6
 8006e42:	4651      	mov	r1, sl
 8006e44:	ebb2 0801 	subs.w	r8, r2, r1
 8006e48:	4659      	mov	r1, fp
 8006e4a:	eb63 0901 	sbc.w	r9, r3, r1
 8006e4e:	f04f 0200 	mov.w	r2, #0
 8006e52:	f04f 0300 	mov.w	r3, #0
 8006e56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e62:	4690      	mov	r8, r2
 8006e64:	4699      	mov	r9, r3
 8006e66:	4623      	mov	r3, r4
 8006e68:	eb18 0303 	adds.w	r3, r8, r3
 8006e6c:	60bb      	str	r3, [r7, #8]
 8006e6e:	462b      	mov	r3, r5
 8006e70:	eb49 0303 	adc.w	r3, r9, r3
 8006e74:	60fb      	str	r3, [r7, #12]
 8006e76:	f04f 0200 	mov.w	r2, #0
 8006e7a:	f04f 0300 	mov.w	r3, #0
 8006e7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006e82:	4629      	mov	r1, r5
 8006e84:	024b      	lsls	r3, r1, #9
 8006e86:	4621      	mov	r1, r4
 8006e88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e8c:	4621      	mov	r1, r4
 8006e8e:	024a      	lsls	r2, r1, #9
 8006e90:	4610      	mov	r0, r2
 8006e92:	4619      	mov	r1, r3
 8006e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e96:	2200      	movs	r2, #0
 8006e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ea0:	f7f9 ff02 	bl	8000ca8 <__aeabi_uldivmod>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006eac:	e058      	b.n	8006f60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006eae:	4b38      	ldr	r3, [pc, #224]	; (8006f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	099b      	lsrs	r3, r3, #6
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	4611      	mov	r1, r2
 8006eba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ebe:	623b      	str	r3, [r7, #32]
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ec4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006ec8:	4642      	mov	r2, r8
 8006eca:	464b      	mov	r3, r9
 8006ecc:	f04f 0000 	mov.w	r0, #0
 8006ed0:	f04f 0100 	mov.w	r1, #0
 8006ed4:	0159      	lsls	r1, r3, #5
 8006ed6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006eda:	0150      	lsls	r0, r2, #5
 8006edc:	4602      	mov	r2, r0
 8006ede:	460b      	mov	r3, r1
 8006ee0:	4641      	mov	r1, r8
 8006ee2:	ebb2 0a01 	subs.w	sl, r2, r1
 8006ee6:	4649      	mov	r1, r9
 8006ee8:	eb63 0b01 	sbc.w	fp, r3, r1
 8006eec:	f04f 0200 	mov.w	r2, #0
 8006ef0:	f04f 0300 	mov.w	r3, #0
 8006ef4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006ef8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006efc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006f00:	ebb2 040a 	subs.w	r4, r2, sl
 8006f04:	eb63 050b 	sbc.w	r5, r3, fp
 8006f08:	f04f 0200 	mov.w	r2, #0
 8006f0c:	f04f 0300 	mov.w	r3, #0
 8006f10:	00eb      	lsls	r3, r5, #3
 8006f12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f16:	00e2      	lsls	r2, r4, #3
 8006f18:	4614      	mov	r4, r2
 8006f1a:	461d      	mov	r5, r3
 8006f1c:	4643      	mov	r3, r8
 8006f1e:	18e3      	adds	r3, r4, r3
 8006f20:	603b      	str	r3, [r7, #0]
 8006f22:	464b      	mov	r3, r9
 8006f24:	eb45 0303 	adc.w	r3, r5, r3
 8006f28:	607b      	str	r3, [r7, #4]
 8006f2a:	f04f 0200 	mov.w	r2, #0
 8006f2e:	f04f 0300 	mov.w	r3, #0
 8006f32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f36:	4629      	mov	r1, r5
 8006f38:	028b      	lsls	r3, r1, #10
 8006f3a:	4621      	mov	r1, r4
 8006f3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f40:	4621      	mov	r1, r4
 8006f42:	028a      	lsls	r2, r1, #10
 8006f44:	4610      	mov	r0, r2
 8006f46:	4619      	mov	r1, r3
 8006f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	61bb      	str	r3, [r7, #24]
 8006f4e:	61fa      	str	r2, [r7, #28]
 8006f50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f54:	f7f9 fea8 	bl	8000ca8 <__aeabi_uldivmod>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f60:	4b0b      	ldr	r3, [pc, #44]	; (8006f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	0c1b      	lsrs	r3, r3, #16
 8006f66:	f003 0303 	and.w	r3, r3, #3
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	005b      	lsls	r3, r3, #1
 8006f6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006f70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f7a:	e002      	b.n	8006f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f7c:	4b05      	ldr	r3, [pc, #20]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3750      	adds	r7, #80	; 0x50
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f8e:	bf00      	nop
 8006f90:	40023800 	.word	0x40023800
 8006f94:	00f42400 	.word	0x00f42400
 8006f98:	007a1200 	.word	0x007a1200

08006f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fa0:	4b03      	ldr	r3, [pc, #12]	; (8006fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	20000020 	.word	0x20000020

08006fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006fb8:	f7ff fff0 	bl	8006f9c <HAL_RCC_GetHCLKFreq>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	4b05      	ldr	r3, [pc, #20]	; (8006fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	0a9b      	lsrs	r3, r3, #10
 8006fc4:	f003 0307 	and.w	r3, r3, #7
 8006fc8:	4903      	ldr	r1, [pc, #12]	; (8006fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fca:	5ccb      	ldrb	r3, [r1, r3]
 8006fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	40023800 	.word	0x40023800
 8006fd8:	0800fc38 	.word	0x0800fc38

08006fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006fe0:	f7ff ffdc 	bl	8006f9c <HAL_RCC_GetHCLKFreq>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	4b05      	ldr	r3, [pc, #20]	; (8006ffc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	0b5b      	lsrs	r3, r3, #13
 8006fec:	f003 0307 	and.w	r3, r3, #7
 8006ff0:	4903      	ldr	r1, [pc, #12]	; (8007000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ff2:	5ccb      	ldrb	r3, [r1, r3]
 8006ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	40023800 	.word	0x40023800
 8007000:	0800fc38 	.word	0x0800fc38

08007004 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	220f      	movs	r2, #15
 8007012:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007014:	4b12      	ldr	r3, [pc, #72]	; (8007060 <HAL_RCC_GetClockConfig+0x5c>)
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	f003 0203 	and.w	r2, r3, #3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007020:	4b0f      	ldr	r3, [pc, #60]	; (8007060 <HAL_RCC_GetClockConfig+0x5c>)
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800702c:	4b0c      	ldr	r3, [pc, #48]	; (8007060 <HAL_RCC_GetClockConfig+0x5c>)
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007038:	4b09      	ldr	r3, [pc, #36]	; (8007060 <HAL_RCC_GetClockConfig+0x5c>)
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	08db      	lsrs	r3, r3, #3
 800703e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007046:	4b07      	ldr	r3, [pc, #28]	; (8007064 <HAL_RCC_GetClockConfig+0x60>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 020f 	and.w	r2, r3, #15
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	601a      	str	r2, [r3, #0]
}
 8007052:	bf00      	nop
 8007054:	370c      	adds	r7, #12
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	40023800 	.word	0x40023800
 8007064:	40023c00 	.word	0x40023c00

08007068 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b086      	sub	sp, #24
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007070:	2300      	movs	r3, #0
 8007072:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007074:	2300      	movs	r3, #0
 8007076:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10b      	bne.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800708c:	2b00      	cmp	r3, #0
 800708e:	d105      	bne.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007098:	2b00      	cmp	r3, #0
 800709a:	d075      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800709c:	4b91      	ldr	r3, [pc, #580]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800709e:	2200      	movs	r2, #0
 80070a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80070a2:	f7fd fb7b 	bl	800479c <HAL_GetTick>
 80070a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070a8:	e008      	b.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80070aa:	f7fd fb77 	bl	800479c <HAL_GetTick>
 80070ae:	4602      	mov	r2, r0
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d901      	bls.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e189      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070bc:	4b8a      	ldr	r3, [pc, #552]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1f0      	bne.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d009      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	019a      	lsls	r2, r3, #6
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	071b      	lsls	r3, r3, #28
 80070e0:	4981      	ldr	r1, [pc, #516]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0302 	and.w	r3, r3, #2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d01f      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80070f4:	4b7c      	ldr	r3, [pc, #496]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070fa:	0f1b      	lsrs	r3, r3, #28
 80070fc:	f003 0307 	and.w	r3, r3, #7
 8007100:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	019a      	lsls	r2, r3, #6
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	061b      	lsls	r3, r3, #24
 800710e:	431a      	orrs	r2, r3
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	071b      	lsls	r3, r3, #28
 8007114:	4974      	ldr	r1, [pc, #464]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007116:	4313      	orrs	r3, r2
 8007118:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800711c:	4b72      	ldr	r3, [pc, #456]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800711e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007122:	f023 021f 	bic.w	r2, r3, #31
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	69db      	ldr	r3, [r3, #28]
 800712a:	3b01      	subs	r3, #1
 800712c:	496e      	ldr	r1, [pc, #440]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800712e:	4313      	orrs	r3, r2
 8007130:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00d      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	019a      	lsls	r2, r3, #6
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	061b      	lsls	r3, r3, #24
 800714c:	431a      	orrs	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	071b      	lsls	r3, r3, #28
 8007154:	4964      	ldr	r1, [pc, #400]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007156:	4313      	orrs	r3, r2
 8007158:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800715c:	4b61      	ldr	r3, [pc, #388]	; (80072e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800715e:	2201      	movs	r2, #1
 8007160:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007162:	f7fd fb1b 	bl	800479c <HAL_GetTick>
 8007166:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007168:	e008      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800716a:	f7fd fb17 	bl	800479c <HAL_GetTick>
 800716e:	4602      	mov	r2, r0
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	2b02      	cmp	r3, #2
 8007176:	d901      	bls.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e129      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800717c:	4b5a      	ldr	r3, [pc, #360]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d0f0      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0304 	and.w	r3, r3, #4
 8007190:	2b00      	cmp	r3, #0
 8007192:	d105      	bne.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800719c:	2b00      	cmp	r3, #0
 800719e:	d079      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80071a0:	4b52      	ldr	r3, [pc, #328]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80071a2:	2200      	movs	r2, #0
 80071a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071a6:	f7fd faf9 	bl	800479c <HAL_GetTick>
 80071aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80071ac:	e008      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80071ae:	f7fd faf5 	bl	800479c <HAL_GetTick>
 80071b2:	4602      	mov	r2, r0
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d901      	bls.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071bc:	2303      	movs	r3, #3
 80071be:	e107      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80071c0:	4b49      	ldr	r3, [pc, #292]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071cc:	d0ef      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0304 	and.w	r3, r3, #4
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d020      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80071da:	4b43      	ldr	r3, [pc, #268]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071e0:	0f1b      	lsrs	r3, r3, #28
 80071e2:	f003 0307 	and.w	r3, r3, #7
 80071e6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	019a      	lsls	r2, r3, #6
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	061b      	lsls	r3, r3, #24
 80071f4:	431a      	orrs	r2, r3
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	071b      	lsls	r3, r3, #28
 80071fa:	493b      	ldr	r1, [pc, #236]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071fc:	4313      	orrs	r3, r2
 80071fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007202:	4b39      	ldr	r3, [pc, #228]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007208:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	3b01      	subs	r3, #1
 8007212:	021b      	lsls	r3, r3, #8
 8007214:	4934      	ldr	r1, [pc, #208]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007216:	4313      	orrs	r3, r2
 8007218:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0308 	and.w	r3, r3, #8
 8007224:	2b00      	cmp	r3, #0
 8007226:	d01e      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007228:	4b2f      	ldr	r3, [pc, #188]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800722a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800722e:	0e1b      	lsrs	r3, r3, #24
 8007230:	f003 030f 	and.w	r3, r3, #15
 8007234:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	019a      	lsls	r2, r3, #6
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	061b      	lsls	r3, r3, #24
 8007240:	431a      	orrs	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	071b      	lsls	r3, r3, #28
 8007248:	4927      	ldr	r1, [pc, #156]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800724a:	4313      	orrs	r3, r2
 800724c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007250:	4b25      	ldr	r3, [pc, #148]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007252:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007256:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725e:	4922      	ldr	r1, [pc, #136]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007260:	4313      	orrs	r3, r2
 8007262:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007266:	4b21      	ldr	r3, [pc, #132]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007268:	2201      	movs	r2, #1
 800726a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800726c:	f7fd fa96 	bl	800479c <HAL_GetTick>
 8007270:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007272:	e008      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007274:	f7fd fa92 	bl	800479c <HAL_GetTick>
 8007278:	4602      	mov	r2, r0
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	2b02      	cmp	r3, #2
 8007280:	d901      	bls.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e0a4      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007286:	4b18      	ldr	r3, [pc, #96]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800728e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007292:	d1ef      	bne.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0320 	and.w	r3, r3, #32
 800729c:	2b00      	cmp	r3, #0
 800729e:	f000 808b 	beq.w	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80072a2:	2300      	movs	r3, #0
 80072a4:	60fb      	str	r3, [r7, #12]
 80072a6:	4b10      	ldr	r3, [pc, #64]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072aa:	4a0f      	ldr	r2, [pc, #60]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072b0:	6413      	str	r3, [r2, #64]	; 0x40
 80072b2:	4b0d      	ldr	r3, [pc, #52]	; (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072ba:	60fb      	str	r3, [r7, #12]
 80072bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80072be:	4b0c      	ldr	r3, [pc, #48]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a0b      	ldr	r2, [pc, #44]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80072c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80072ca:	f7fd fa67 	bl	800479c <HAL_GetTick>
 80072ce:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80072d0:	e010      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80072d2:	f7fd fa63 	bl	800479c <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d909      	bls.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e075      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80072e4:	42470068 	.word	0x42470068
 80072e8:	40023800 	.word	0x40023800
 80072ec:	42470070 	.word	0x42470070
 80072f0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80072f4:	4b38      	ldr	r3, [pc, #224]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d0e8      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007300:	4b36      	ldr	r3, [pc, #216]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007308:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d02f      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	429a      	cmp	r2, r3
 800731c:	d028      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800731e:	4b2f      	ldr	r3, [pc, #188]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007326:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007328:	4b2d      	ldr	r3, [pc, #180]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800732a:	2201      	movs	r2, #1
 800732c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800732e:	4b2c      	ldr	r3, [pc, #176]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007330:	2200      	movs	r2, #0
 8007332:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007334:	4a29      	ldr	r2, [pc, #164]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800733a:	4b28      	ldr	r3, [pc, #160]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800733c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	2b01      	cmp	r3, #1
 8007344:	d114      	bne.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007346:	f7fd fa29 	bl	800479c <HAL_GetTick>
 800734a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800734c:	e00a      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800734e:	f7fd fa25 	bl	800479c <HAL_GetTick>
 8007352:	4602      	mov	r2, r0
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	f241 3288 	movw	r2, #5000	; 0x1388
 800735c:	4293      	cmp	r3, r2
 800735e:	d901      	bls.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	e035      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007364:	4b1d      	ldr	r3, [pc, #116]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007368:	f003 0302 	and.w	r3, r3, #2
 800736c:	2b00      	cmp	r3, #0
 800736e:	d0ee      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007374:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007378:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800737c:	d10d      	bne.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800737e:	4b17      	ldr	r3, [pc, #92]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800738a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800738e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007392:	4912      	ldr	r1, [pc, #72]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007394:	4313      	orrs	r3, r2
 8007396:	608b      	str	r3, [r1, #8]
 8007398:	e005      	b.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800739a:	4b10      	ldr	r3, [pc, #64]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	4a0f      	ldr	r2, [pc, #60]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80073a0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80073a4:	6093      	str	r3, [r2, #8]
 80073a6:	4b0d      	ldr	r3, [pc, #52]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80073a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073b2:	490a      	ldr	r1, [pc, #40]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 0310 	and.w	r3, r3, #16
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d004      	beq.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80073ca:	4b06      	ldr	r3, [pc, #24]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80073cc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3718      	adds	r7, #24
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	40007000 	.word	0x40007000
 80073dc:	40023800 	.word	0x40023800
 80073e0:	42470e40 	.word	0x42470e40
 80073e4:	424711e0 	.word	0x424711e0

080073e8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d101      	bne.n	80073fc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e025      	b.n	8007448 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b00      	cmp	r3, #0
 8007406:	d106      	bne.n	8007416 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f7fb f8ed 	bl	80025f0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2202      	movs	r2, #2
 800741a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	3304      	adds	r3, #4
 8007426:	4619      	mov	r1, r3
 8007428:	4610      	mov	r0, r2
 800742a:	f002 fae3 	bl	80099f4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6818      	ldr	r0, [r3, #0]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	461a      	mov	r2, r3
 8007438:	6839      	ldr	r1, [r7, #0]
 800743a:	f002 fb38 	bl	8009aae <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3708      	adds	r7, #8
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007462:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007464:	7dfb      	ldrb	r3, [r7, #23]
 8007466:	2b02      	cmp	r3, #2
 8007468:	d101      	bne.n	800746e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800746a:	2302      	movs	r3, #2
 800746c:	e021      	b.n	80074b2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800746e:	7dfb      	ldrb	r3, [r7, #23]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d002      	beq.n	800747a <HAL_SDRAM_SendCommand+0x2a>
 8007474:	7dfb      	ldrb	r3, [r7, #23]
 8007476:	2b05      	cmp	r3, #5
 8007478:	d118      	bne.n	80074ac <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2202      	movs	r2, #2
 800747e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	68b9      	ldr	r1, [r7, #8]
 800748a:	4618      	mov	r0, r3
 800748c:	f002 fb78 	bl	8009b80 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2b02      	cmp	r3, #2
 8007496:	d104      	bne.n	80074a2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2205      	movs	r2, #5
 800749c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80074a0:	e006      	b.n	80074b0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80074aa:	e001      	b.n	80074b0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e000      	b.n	80074b2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3718      	adds	r7, #24
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b082      	sub	sp, #8
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d101      	bne.n	80074d4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80074d0:	2302      	movs	r3, #2
 80074d2:	e016      	b.n	8007502 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d10f      	bne.n	8007500 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2202      	movs	r2, #2
 80074e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6839      	ldr	r1, [r7, #0]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f002 fb83 	bl	8009bfa <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
 80074fe:	e000      	b.n	8007502 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
}
 8007502:	4618      	mov	r0, r3
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b082      	sub	sp, #8
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e07b      	b.n	8007614 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007520:	2b00      	cmp	r3, #0
 8007522:	d108      	bne.n	8007536 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800752c:	d009      	beq.n	8007542 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	61da      	str	r2, [r3, #28]
 8007534:	e005      	b.n	8007542 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800754e:	b2db      	uxtb	r3, r3
 8007550:	2b00      	cmp	r3, #0
 8007552:	d106      	bne.n	8007562 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7fa fedd 	bl	800231c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2202      	movs	r2, #2
 8007566:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007578:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800758a:	431a      	orrs	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007594:	431a      	orrs	r2, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	431a      	orrs	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	695b      	ldr	r3, [r3, #20]
 80075a4:	f003 0301 	and.w	r3, r3, #1
 80075a8:	431a      	orrs	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	699b      	ldr	r3, [r3, #24]
 80075ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075b2:	431a      	orrs	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075bc:	431a      	orrs	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075c6:	ea42 0103 	orr.w	r1, r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	430a      	orrs	r2, r1
 80075d8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	0c1b      	lsrs	r3, r3, #16
 80075e0:	f003 0104 	and.w	r1, r3, #4
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e8:	f003 0210 	and.w	r2, r3, #16
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	430a      	orrs	r2, r1
 80075f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	69da      	ldr	r2, [r3, #28]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007602:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d101      	bne.n	800762e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e01a      	b.n	8007664 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2202      	movs	r2, #2
 8007632:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007644:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7fa feb0 	bl	80023ac <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b088      	sub	sp, #32
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	603b      	str	r3, [r7, #0]
 8007678:	4613      	mov	r3, r2
 800767a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800767c:	2300      	movs	r3, #0
 800767e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007686:	2b01      	cmp	r3, #1
 8007688:	d101      	bne.n	800768e <HAL_SPI_Transmit+0x22>
 800768a:	2302      	movs	r3, #2
 800768c:	e126      	b.n	80078dc <HAL_SPI_Transmit+0x270>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007696:	f7fd f881 	bl	800479c <HAL_GetTick>
 800769a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800769c:	88fb      	ldrh	r3, [r7, #6]
 800769e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d002      	beq.n	80076b2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80076ac:	2302      	movs	r3, #2
 80076ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80076b0:	e10b      	b.n	80078ca <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d002      	beq.n	80076be <HAL_SPI_Transmit+0x52>
 80076b8:	88fb      	ldrh	r3, [r7, #6]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d102      	bne.n	80076c4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80076c2:	e102      	b.n	80078ca <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2203      	movs	r2, #3
 80076c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	88fa      	ldrh	r2, [r7, #6]
 80076dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	88fa      	ldrh	r2, [r7, #6]
 80076e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800770a:	d10f      	bne.n	800772c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800771a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800772a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007736:	2b40      	cmp	r3, #64	; 0x40
 8007738:	d007      	beq.n	800774a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007748:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007752:	d14b      	bne.n	80077ec <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <HAL_SPI_Transmit+0xf6>
 800775c:	8afb      	ldrh	r3, [r7, #22]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d13e      	bne.n	80077e0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007766:	881a      	ldrh	r2, [r3, #0]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007772:	1c9a      	adds	r2, r3, #2
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800777c:	b29b      	uxth	r3, r3
 800777e:	3b01      	subs	r3, #1
 8007780:	b29a      	uxth	r2, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007786:	e02b      	b.n	80077e0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	f003 0302 	and.w	r3, r3, #2
 8007792:	2b02      	cmp	r3, #2
 8007794:	d112      	bne.n	80077bc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779a:	881a      	ldrh	r2, [r3, #0]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a6:	1c9a      	adds	r2, r3, #2
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	3b01      	subs	r3, #1
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80077ba:	e011      	b.n	80077e0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077bc:	f7fc ffee 	bl	800479c <HAL_GetTick>
 80077c0:	4602      	mov	r2, r0
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	683a      	ldr	r2, [r7, #0]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d803      	bhi.n	80077d4 <HAL_SPI_Transmit+0x168>
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d2:	d102      	bne.n	80077da <HAL_SPI_Transmit+0x16e>
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d102      	bne.n	80077e0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80077de:	e074      	b.n	80078ca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1ce      	bne.n	8007788 <HAL_SPI_Transmit+0x11c>
 80077ea:	e04c      	b.n	8007886 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d002      	beq.n	80077fa <HAL_SPI_Transmit+0x18e>
 80077f4:	8afb      	ldrh	r3, [r7, #22]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d140      	bne.n	800787c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	330c      	adds	r3, #12
 8007804:	7812      	ldrb	r2, [r2, #0]
 8007806:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780c:	1c5a      	adds	r2, r3, #1
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007816:	b29b      	uxth	r3, r3
 8007818:	3b01      	subs	r3, #1
 800781a:	b29a      	uxth	r2, r3
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007820:	e02c      	b.n	800787c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f003 0302 	and.w	r3, r3, #2
 800782c:	2b02      	cmp	r3, #2
 800782e:	d113      	bne.n	8007858 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	330c      	adds	r3, #12
 800783a:	7812      	ldrb	r2, [r2, #0]
 800783c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007842:	1c5a      	adds	r2, r3, #1
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800784c:	b29b      	uxth	r3, r3
 800784e:	3b01      	subs	r3, #1
 8007850:	b29a      	uxth	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	86da      	strh	r2, [r3, #54]	; 0x36
 8007856:	e011      	b.n	800787c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007858:	f7fc ffa0 	bl	800479c <HAL_GetTick>
 800785c:	4602      	mov	r2, r0
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	683a      	ldr	r2, [r7, #0]
 8007864:	429a      	cmp	r2, r3
 8007866:	d803      	bhi.n	8007870 <HAL_SPI_Transmit+0x204>
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800786e:	d102      	bne.n	8007876 <HAL_SPI_Transmit+0x20a>
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d102      	bne.n	800787c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007876:	2303      	movs	r3, #3
 8007878:	77fb      	strb	r3, [r7, #31]
          goto error;
 800787a:	e026      	b.n	80078ca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007880:	b29b      	uxth	r3, r3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1cd      	bne.n	8007822 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007886:	69ba      	ldr	r2, [r7, #24]
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f000 fbda 	bl	8008044 <SPI_EndRxTxTransaction>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2220      	movs	r2, #32
 800789a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10a      	bne.n	80078ba <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078a4:	2300      	movs	r3, #0
 80078a6:	613b      	str	r3, [r7, #16]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	613b      	str	r3, [r7, #16]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	613b      	str	r3, [r7, #16]
 80078b8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d002      	beq.n	80078c8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	77fb      	strb	r3, [r7, #31]
 80078c6:	e000      	b.n	80078ca <HAL_SPI_Transmit+0x25e>
  }

error:
 80078c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80078da:	7ffb      	ldrb	r3, [r7, #31]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3720      	adds	r7, #32
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b088      	sub	sp, #32
 80078e8:	af02      	add	r7, sp, #8
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	603b      	str	r3, [r7, #0]
 80078f0:	4613      	mov	r3, r2
 80078f2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007900:	d112      	bne.n	8007928 <HAL_SPI_Receive+0x44>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10e      	bne.n	8007928 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2204      	movs	r2, #4
 800790e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007912:	88fa      	ldrh	r2, [r7, #6]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	4613      	mov	r3, r2
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	68b9      	ldr	r1, [r7, #8]
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f000 f8f1 	bl	8007b06 <HAL_SPI_TransmitReceive>
 8007924:	4603      	mov	r3, r0
 8007926:	e0ea      	b.n	8007afe <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800792e:	2b01      	cmp	r3, #1
 8007930:	d101      	bne.n	8007936 <HAL_SPI_Receive+0x52>
 8007932:	2302      	movs	r3, #2
 8007934:	e0e3      	b.n	8007afe <HAL_SPI_Receive+0x21a>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800793e:	f7fc ff2d 	bl	800479c <HAL_GetTick>
 8007942:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2b01      	cmp	r3, #1
 800794e:	d002      	beq.n	8007956 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007950:	2302      	movs	r3, #2
 8007952:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007954:	e0ca      	b.n	8007aec <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d002      	beq.n	8007962 <HAL_SPI_Receive+0x7e>
 800795c:	88fb      	ldrh	r3, [r7, #6]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d102      	bne.n	8007968 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007966:	e0c1      	b.n	8007aec <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2204      	movs	r2, #4
 800796c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	88fa      	ldrh	r2, [r7, #6]
 8007980:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	88fa      	ldrh	r2, [r7, #6]
 8007986:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079ae:	d10f      	bne.n	80079d0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80079ce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079da:	2b40      	cmp	r3, #64	; 0x40
 80079dc:	d007      	beq.n	80079ee <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d162      	bne.n	8007abc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80079f6:	e02e      	b.n	8007a56 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d115      	bne.n	8007a32 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f103 020c 	add.w	r2, r3, #12
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a12:	7812      	ldrb	r2, [r2, #0]
 8007a14:	b2d2      	uxtb	r2, r2
 8007a16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1c:	1c5a      	adds	r2, r3, #1
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a30:	e011      	b.n	8007a56 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a32:	f7fc feb3 	bl	800479c <HAL_GetTick>
 8007a36:	4602      	mov	r2, r0
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d803      	bhi.n	8007a4a <HAL_SPI_Receive+0x166>
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a48:	d102      	bne.n	8007a50 <HAL_SPI_Receive+0x16c>
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d102      	bne.n	8007a56 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007a54:	e04a      	b.n	8007aec <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1cb      	bne.n	80079f8 <HAL_SPI_Receive+0x114>
 8007a60:	e031      	b.n	8007ac6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d113      	bne.n	8007a98 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	68da      	ldr	r2, [r3, #12]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7a:	b292      	uxth	r2, r2
 8007a7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a82:	1c9a      	adds	r2, r3, #2
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a96:	e011      	b.n	8007abc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a98:	f7fc fe80 	bl	800479c <HAL_GetTick>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	683a      	ldr	r2, [r7, #0]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d803      	bhi.n	8007ab0 <HAL_SPI_Receive+0x1cc>
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aae:	d102      	bne.n	8007ab6 <HAL_SPI_Receive+0x1d2>
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d102      	bne.n	8007abc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007aba:	e017      	b.n	8007aec <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1cd      	bne.n	8007a62 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ac6:	693a      	ldr	r2, [r7, #16]
 8007ac8:	6839      	ldr	r1, [r7, #0]
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f000 fa54 	bl	8007f78 <SPI_EndRxTransaction>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d002      	beq.n	8007adc <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	75fb      	strb	r3, [r7, #23]
 8007ae8:	e000      	b.n	8007aec <HAL_SPI_Receive+0x208>
  }

error :
 8007aea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3718      	adds	r7, #24
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b08c      	sub	sp, #48	; 0x30
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	60f8      	str	r0, [r7, #12]
 8007b0e:	60b9      	str	r1, [r7, #8]
 8007b10:	607a      	str	r2, [r7, #4]
 8007b12:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007b14:	2301      	movs	r3, #1
 8007b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d101      	bne.n	8007b2c <HAL_SPI_TransmitReceive+0x26>
 8007b28:	2302      	movs	r3, #2
 8007b2a:	e18a      	b.n	8007e42 <HAL_SPI_TransmitReceive+0x33c>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b34:	f7fc fe32 	bl	800479c <HAL_GetTick>
 8007b38:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007b4a:	887b      	ldrh	r3, [r7, #2]
 8007b4c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d00f      	beq.n	8007b76 <HAL_SPI_TransmitReceive+0x70>
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b5c:	d107      	bne.n	8007b6e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d103      	bne.n	8007b6e <HAL_SPI_TransmitReceive+0x68>
 8007b66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b6a:	2b04      	cmp	r3, #4
 8007b6c:	d003      	beq.n	8007b76 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007b6e:	2302      	movs	r3, #2
 8007b70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007b74:	e15b      	b.n	8007e2e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d005      	beq.n	8007b88 <HAL_SPI_TransmitReceive+0x82>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d002      	beq.n	8007b88 <HAL_SPI_TransmitReceive+0x82>
 8007b82:	887b      	ldrh	r3, [r7, #2]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d103      	bne.n	8007b90 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007b8e:	e14e      	b.n	8007e2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b04      	cmp	r3, #4
 8007b9a:	d003      	beq.n	8007ba4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2205      	movs	r2, #5
 8007ba0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	887a      	ldrh	r2, [r7, #2]
 8007bb4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	887a      	ldrh	r2, [r7, #2]
 8007bba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	68ba      	ldr	r2, [r7, #8]
 8007bc0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	887a      	ldrh	r2, [r7, #2]
 8007bc6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	887a      	ldrh	r2, [r7, #2]
 8007bcc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be4:	2b40      	cmp	r3, #64	; 0x40
 8007be6:	d007      	beq.n	8007bf8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bf6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c00:	d178      	bne.n	8007cf4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d002      	beq.n	8007c10 <HAL_SPI_TransmitReceive+0x10a>
 8007c0a:	8b7b      	ldrh	r3, [r7, #26]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d166      	bne.n	8007cde <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c14:	881a      	ldrh	r2, [r3, #0]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c20:	1c9a      	adds	r2, r3, #2
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c34:	e053      	b.n	8007cde <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	f003 0302 	and.w	r3, r3, #2
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d11b      	bne.n	8007c7c <HAL_SPI_TransmitReceive+0x176>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d016      	beq.n	8007c7c <HAL_SPI_TransmitReceive+0x176>
 8007c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d113      	bne.n	8007c7c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c58:	881a      	ldrh	r2, [r3, #0]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c64:	1c9a      	adds	r2, r3, #2
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	3b01      	subs	r3, #1
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f003 0301 	and.w	r3, r3, #1
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d119      	bne.n	8007cbe <HAL_SPI_TransmitReceive+0x1b8>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d014      	beq.n	8007cbe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68da      	ldr	r2, [r3, #12]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9e:	b292      	uxth	r2, r2
 8007ca0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca6:	1c9a      	adds	r2, r3, #2
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007cbe:	f7fc fd6d 	bl	800479c <HAL_GetTick>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d807      	bhi.n	8007cde <HAL_SPI_TransmitReceive+0x1d8>
 8007cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd4:	d003      	beq.n	8007cde <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007cdc:	e0a7      	b.n	8007e2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1a6      	bne.n	8007c36 <HAL_SPI_TransmitReceive+0x130>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1a1      	bne.n	8007c36 <HAL_SPI_TransmitReceive+0x130>
 8007cf2:	e07c      	b.n	8007dee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d002      	beq.n	8007d02 <HAL_SPI_TransmitReceive+0x1fc>
 8007cfc:	8b7b      	ldrh	r3, [r7, #26]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d16b      	bne.n	8007dda <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	330c      	adds	r3, #12
 8007d0c:	7812      	ldrb	r2, [r2, #0]
 8007d0e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d14:	1c5a      	adds	r2, r3, #1
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	3b01      	subs	r3, #1
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d28:	e057      	b.n	8007dda <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	f003 0302 	and.w	r3, r3, #2
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d11c      	bne.n	8007d72 <HAL_SPI_TransmitReceive+0x26c>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d017      	beq.n	8007d72 <HAL_SPI_TransmitReceive+0x26c>
 8007d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d114      	bne.n	8007d72 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	330c      	adds	r3, #12
 8007d52:	7812      	ldrb	r2, [r2, #0]
 8007d54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5a:	1c5a      	adds	r2, r3, #1
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	3b01      	subs	r3, #1
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f003 0301 	and.w	r3, r3, #1
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d119      	bne.n	8007db4 <HAL_SPI_TransmitReceive+0x2ae>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d014      	beq.n	8007db4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68da      	ldr	r2, [r3, #12]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d94:	b2d2      	uxtb	r2, r2
 8007d96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9c:	1c5a      	adds	r2, r3, #1
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	3b01      	subs	r3, #1
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007db0:	2301      	movs	r3, #1
 8007db2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007db4:	f7fc fcf2 	bl	800479c <HAL_GetTick>
 8007db8:	4602      	mov	r2, r0
 8007dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d803      	bhi.n	8007dcc <HAL_SPI_TransmitReceive+0x2c6>
 8007dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dca:	d102      	bne.n	8007dd2 <HAL_SPI_TransmitReceive+0x2cc>
 8007dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d103      	bne.n	8007dda <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007dd8:	e029      	b.n	8007e2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1a2      	bne.n	8007d2a <HAL_SPI_TransmitReceive+0x224>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d19d      	bne.n	8007d2a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007df0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f000 f926 	bl	8008044 <SPI_EndRxTxTransaction>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d006      	beq.n	8007e0c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2220      	movs	r2, #32
 8007e08:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007e0a:	e010      	b.n	8007e2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10b      	bne.n	8007e2c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e14:	2300      	movs	r3, #0
 8007e16:	617b      	str	r3, [r7, #20]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	617b      	str	r3, [r7, #20]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	617b      	str	r3, [r7, #20]
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	e000      	b.n	8007e2e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007e2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2201      	movs	r2, #1
 8007e32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007e3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3730      	adds	r7, #48	; 0x30
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b083      	sub	sp, #12
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e58:	b2db      	uxtb	r3, r3
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	370c      	adds	r7, #12
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
	...

08007e68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b088      	sub	sp, #32
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	603b      	str	r3, [r7, #0]
 8007e74:	4613      	mov	r3, r2
 8007e76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e78:	f7fc fc90 	bl	800479c <HAL_GetTick>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e80:	1a9b      	subs	r3, r3, r2
 8007e82:	683a      	ldr	r2, [r7, #0]
 8007e84:	4413      	add	r3, r2
 8007e86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e88:	f7fc fc88 	bl	800479c <HAL_GetTick>
 8007e8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e8e:	4b39      	ldr	r3, [pc, #228]	; (8007f74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	015b      	lsls	r3, r3, #5
 8007e94:	0d1b      	lsrs	r3, r3, #20
 8007e96:	69fa      	ldr	r2, [r7, #28]
 8007e98:	fb02 f303 	mul.w	r3, r2, r3
 8007e9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e9e:	e054      	b.n	8007f4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea6:	d050      	beq.n	8007f4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ea8:	f7fc fc78 	bl	800479c <HAL_GetTick>
 8007eac:	4602      	mov	r2, r0
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	69fa      	ldr	r2, [r7, #28]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d902      	bls.n	8007ebe <SPI_WaitFlagStateUntilTimeout+0x56>
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d13d      	bne.n	8007f3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	685a      	ldr	r2, [r3, #4]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ecc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ed6:	d111      	bne.n	8007efc <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ee0:	d004      	beq.n	8007eec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eea:	d107      	bne.n	8007efc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007efa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f04:	d10f      	bne.n	8007f26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f14:	601a      	str	r2, [r3, #0]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e017      	b.n	8007f6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d101      	bne.n	8007f44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f40:	2300      	movs	r3, #0
 8007f42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	3b01      	subs	r3, #1
 8007f48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	689a      	ldr	r2, [r3, #8]
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	4013      	ands	r3, r2
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	bf0c      	ite	eq
 8007f5a:	2301      	moveq	r3, #1
 8007f5c:	2300      	movne	r3, #0
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	461a      	mov	r2, r3
 8007f62:	79fb      	ldrb	r3, [r7, #7]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d19b      	bne.n	8007ea0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3720      	adds	r7, #32
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	20000020 	.word	0x20000020

08007f78 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af02      	add	r7, sp, #8
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f8c:	d111      	bne.n	8007fb2 <SPI_EndRxTransaction+0x3a>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f96:	d004      	beq.n	8007fa2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fa0:	d107      	bne.n	8007fb2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fb0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fba:	d12a      	bne.n	8008012 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fc4:	d012      	beq.n	8007fec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	2180      	movs	r1, #128	; 0x80
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f7ff ff49 	bl	8007e68 <SPI_WaitFlagStateUntilTimeout>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d02d      	beq.n	8008038 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe0:	f043 0220 	orr.w	r2, r3, #32
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007fe8:	2303      	movs	r3, #3
 8007fea:	e026      	b.n	800803a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	2101      	movs	r1, #1
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f7ff ff36 	bl	8007e68 <SPI_WaitFlagStateUntilTimeout>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d01a      	beq.n	8008038 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008006:	f043 0220 	orr.w	r2, r3, #32
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e013      	b.n	800803a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	2200      	movs	r2, #0
 800801a:	2101      	movs	r1, #1
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f7ff ff23 	bl	8007e68 <SPI_WaitFlagStateUntilTimeout>
 8008022:	4603      	mov	r3, r0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d007      	beq.n	8008038 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800802c:	f043 0220 	orr.w	r2, r3, #32
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	e000      	b.n	800803a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
	...

08008044 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b088      	sub	sp, #32
 8008048:	af02      	add	r7, sp, #8
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008050:	4b1b      	ldr	r3, [pc, #108]	; (80080c0 <SPI_EndRxTxTransaction+0x7c>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a1b      	ldr	r2, [pc, #108]	; (80080c4 <SPI_EndRxTxTransaction+0x80>)
 8008056:	fba2 2303 	umull	r2, r3, r2, r3
 800805a:	0d5b      	lsrs	r3, r3, #21
 800805c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008060:	fb02 f303 	mul.w	r3, r2, r3
 8008064:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800806e:	d112      	bne.n	8008096 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	2200      	movs	r2, #0
 8008078:	2180      	movs	r1, #128	; 0x80
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f7ff fef4 	bl	8007e68 <SPI_WaitFlagStateUntilTimeout>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d016      	beq.n	80080b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800808a:	f043 0220 	orr.w	r2, r3, #32
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e00f      	b.n	80080b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00a      	beq.n	80080b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	3b01      	subs	r3, #1
 80080a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080ac:	2b80      	cmp	r3, #128	; 0x80
 80080ae:	d0f2      	beq.n	8008096 <SPI_EndRxTxTransaction+0x52>
 80080b0:	e000      	b.n	80080b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80080b2:	bf00      	nop
  }

  return HAL_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3718      	adds	r7, #24
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	20000020 	.word	0x20000020
 80080c4:	165e9f81 	.word	0x165e9f81

080080c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d101      	bne.n	80080da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e041      	b.n	800815e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d106      	bne.n	80080f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f7fa f97a 	bl	80023e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2202      	movs	r2, #2
 80080f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	3304      	adds	r3, #4
 8008104:	4619      	mov	r1, r3
 8008106:	4610      	mov	r0, r2
 8008108:	f000 fa96 	bl	8008638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
	...

08008168 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b01      	cmp	r3, #1
 800817a:	d001      	beq.n	8008180 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e04e      	b.n	800821e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2202      	movs	r2, #2
 8008184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	68da      	ldr	r2, [r3, #12]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f042 0201 	orr.w	r2, r2, #1
 8008196:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a23      	ldr	r2, [pc, #140]	; (800822c <HAL_TIM_Base_Start_IT+0xc4>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d022      	beq.n	80081e8 <HAL_TIM_Base_Start_IT+0x80>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081aa:	d01d      	beq.n	80081e8 <HAL_TIM_Base_Start_IT+0x80>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a1f      	ldr	r2, [pc, #124]	; (8008230 <HAL_TIM_Base_Start_IT+0xc8>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d018      	beq.n	80081e8 <HAL_TIM_Base_Start_IT+0x80>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a1e      	ldr	r2, [pc, #120]	; (8008234 <HAL_TIM_Base_Start_IT+0xcc>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d013      	beq.n	80081e8 <HAL_TIM_Base_Start_IT+0x80>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a1c      	ldr	r2, [pc, #112]	; (8008238 <HAL_TIM_Base_Start_IT+0xd0>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d00e      	beq.n	80081e8 <HAL_TIM_Base_Start_IT+0x80>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a1b      	ldr	r2, [pc, #108]	; (800823c <HAL_TIM_Base_Start_IT+0xd4>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d009      	beq.n	80081e8 <HAL_TIM_Base_Start_IT+0x80>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a19      	ldr	r2, [pc, #100]	; (8008240 <HAL_TIM_Base_Start_IT+0xd8>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d004      	beq.n	80081e8 <HAL_TIM_Base_Start_IT+0x80>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a18      	ldr	r2, [pc, #96]	; (8008244 <HAL_TIM_Base_Start_IT+0xdc>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d111      	bne.n	800820c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	f003 0307 	and.w	r3, r3, #7
 80081f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2b06      	cmp	r3, #6
 80081f8:	d010      	beq.n	800821c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f042 0201 	orr.w	r2, r2, #1
 8008208:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800820a:	e007      	b.n	800821c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f042 0201 	orr.w	r2, r2, #1
 800821a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3714      	adds	r7, #20
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	40010000 	.word	0x40010000
 8008230:	40000400 	.word	0x40000400
 8008234:	40000800 	.word	0x40000800
 8008238:	40000c00 	.word	0x40000c00
 800823c:	40010400 	.word	0x40010400
 8008240:	40014000 	.word	0x40014000
 8008244:	40001800 	.word	0x40001800

08008248 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	f003 0302 	and.w	r3, r3, #2
 800825a:	2b02      	cmp	r3, #2
 800825c:	d122      	bne.n	80082a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	f003 0302 	and.w	r3, r3, #2
 8008268:	2b02      	cmp	r3, #2
 800826a:	d11b      	bne.n	80082a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f06f 0202 	mvn.w	r2, #2
 8008274:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	f003 0303 	and.w	r3, r3, #3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f9b5 	bl	80085fa <HAL_TIM_IC_CaptureCallback>
 8008290:	e005      	b.n	800829e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 f9a7 	bl	80085e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 f9b8 	bl	800860e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	f003 0304 	and.w	r3, r3, #4
 80082ae:	2b04      	cmp	r3, #4
 80082b0:	d122      	bne.n	80082f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	f003 0304 	and.w	r3, r3, #4
 80082bc:	2b04      	cmp	r3, #4
 80082be:	d11b      	bne.n	80082f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f06f 0204 	mvn.w	r2, #4
 80082c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2202      	movs	r2, #2
 80082ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d003      	beq.n	80082e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f98b 	bl	80085fa <HAL_TIM_IC_CaptureCallback>
 80082e4:	e005      	b.n	80082f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 f97d 	bl	80085e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 f98e 	bl	800860e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	f003 0308 	and.w	r3, r3, #8
 8008302:	2b08      	cmp	r3, #8
 8008304:	d122      	bne.n	800834c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	f003 0308 	and.w	r3, r3, #8
 8008310:	2b08      	cmp	r3, #8
 8008312:	d11b      	bne.n	800834c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f06f 0208 	mvn.w	r2, #8
 800831c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2204      	movs	r2, #4
 8008322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	69db      	ldr	r3, [r3, #28]
 800832a:	f003 0303 	and.w	r3, r3, #3
 800832e:	2b00      	cmp	r3, #0
 8008330:	d003      	beq.n	800833a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f961 	bl	80085fa <HAL_TIM_IC_CaptureCallback>
 8008338:	e005      	b.n	8008346 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 f953 	bl	80085e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 f964 	bl	800860e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	f003 0310 	and.w	r3, r3, #16
 8008356:	2b10      	cmp	r3, #16
 8008358:	d122      	bne.n	80083a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	f003 0310 	and.w	r3, r3, #16
 8008364:	2b10      	cmp	r3, #16
 8008366:	d11b      	bne.n	80083a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f06f 0210 	mvn.w	r2, #16
 8008370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2208      	movs	r2, #8
 8008376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	69db      	ldr	r3, [r3, #28]
 800837e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008382:	2b00      	cmp	r3, #0
 8008384:	d003      	beq.n	800838e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f937 	bl	80085fa <HAL_TIM_IC_CaptureCallback>
 800838c:	e005      	b.n	800839a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f929 	bl	80085e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 f93a 	bl	800860e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d10e      	bne.n	80083cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	f003 0301 	and.w	r3, r3, #1
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d107      	bne.n	80083cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f06f 0201 	mvn.w	r2, #1
 80083c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f7f9 fd80 	bl	8001ecc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083d6:	2b80      	cmp	r3, #128	; 0x80
 80083d8:	d10e      	bne.n	80083f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083e4:	2b80      	cmp	r3, #128	; 0x80
 80083e6:	d107      	bne.n	80083f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80083f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fae0 	bl	80089b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008402:	2b40      	cmp	r3, #64	; 0x40
 8008404:	d10e      	bne.n	8008424 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008410:	2b40      	cmp	r3, #64	; 0x40
 8008412:	d107      	bne.n	8008424 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800841c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f8ff 	bl	8008622 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	f003 0320 	and.w	r3, r3, #32
 800842e:	2b20      	cmp	r3, #32
 8008430:	d10e      	bne.n	8008450 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	f003 0320 	and.w	r3, r3, #32
 800843c:	2b20      	cmp	r3, #32
 800843e:	d107      	bne.n	8008450 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f06f 0220 	mvn.w	r2, #32
 8008448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 faaa 	bl	80089a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008450:	bf00      	nop
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008462:	2300      	movs	r3, #0
 8008464:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800846c:	2b01      	cmp	r3, #1
 800846e:	d101      	bne.n	8008474 <HAL_TIM_ConfigClockSource+0x1c>
 8008470:	2302      	movs	r3, #2
 8008472:	e0b4      	b.n	80085de <HAL_TIM_ConfigClockSource+0x186>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2202      	movs	r2, #2
 8008480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800849a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084ac:	d03e      	beq.n	800852c <HAL_TIM_ConfigClockSource+0xd4>
 80084ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084b2:	f200 8087 	bhi.w	80085c4 <HAL_TIM_ConfigClockSource+0x16c>
 80084b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084ba:	f000 8086 	beq.w	80085ca <HAL_TIM_ConfigClockSource+0x172>
 80084be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084c2:	d87f      	bhi.n	80085c4 <HAL_TIM_ConfigClockSource+0x16c>
 80084c4:	2b70      	cmp	r3, #112	; 0x70
 80084c6:	d01a      	beq.n	80084fe <HAL_TIM_ConfigClockSource+0xa6>
 80084c8:	2b70      	cmp	r3, #112	; 0x70
 80084ca:	d87b      	bhi.n	80085c4 <HAL_TIM_ConfigClockSource+0x16c>
 80084cc:	2b60      	cmp	r3, #96	; 0x60
 80084ce:	d050      	beq.n	8008572 <HAL_TIM_ConfigClockSource+0x11a>
 80084d0:	2b60      	cmp	r3, #96	; 0x60
 80084d2:	d877      	bhi.n	80085c4 <HAL_TIM_ConfigClockSource+0x16c>
 80084d4:	2b50      	cmp	r3, #80	; 0x50
 80084d6:	d03c      	beq.n	8008552 <HAL_TIM_ConfigClockSource+0xfa>
 80084d8:	2b50      	cmp	r3, #80	; 0x50
 80084da:	d873      	bhi.n	80085c4 <HAL_TIM_ConfigClockSource+0x16c>
 80084dc:	2b40      	cmp	r3, #64	; 0x40
 80084de:	d058      	beq.n	8008592 <HAL_TIM_ConfigClockSource+0x13a>
 80084e0:	2b40      	cmp	r3, #64	; 0x40
 80084e2:	d86f      	bhi.n	80085c4 <HAL_TIM_ConfigClockSource+0x16c>
 80084e4:	2b30      	cmp	r3, #48	; 0x30
 80084e6:	d064      	beq.n	80085b2 <HAL_TIM_ConfigClockSource+0x15a>
 80084e8:	2b30      	cmp	r3, #48	; 0x30
 80084ea:	d86b      	bhi.n	80085c4 <HAL_TIM_ConfigClockSource+0x16c>
 80084ec:	2b20      	cmp	r3, #32
 80084ee:	d060      	beq.n	80085b2 <HAL_TIM_ConfigClockSource+0x15a>
 80084f0:	2b20      	cmp	r3, #32
 80084f2:	d867      	bhi.n	80085c4 <HAL_TIM_ConfigClockSource+0x16c>
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d05c      	beq.n	80085b2 <HAL_TIM_ConfigClockSource+0x15a>
 80084f8:	2b10      	cmp	r3, #16
 80084fa:	d05a      	beq.n	80085b2 <HAL_TIM_ConfigClockSource+0x15a>
 80084fc:	e062      	b.n	80085c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6818      	ldr	r0, [r3, #0]
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	6899      	ldr	r1, [r3, #8]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	685a      	ldr	r2, [r3, #4]
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	f000 f9ad 	bl	800886c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008520:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	609a      	str	r2, [r3, #8]
      break;
 800852a:	e04f      	b.n	80085cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6818      	ldr	r0, [r3, #0]
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	6899      	ldr	r1, [r3, #8]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	685a      	ldr	r2, [r3, #4]
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	f000 f996 	bl	800886c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	689a      	ldr	r2, [r3, #8]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800854e:	609a      	str	r2, [r3, #8]
      break;
 8008550:	e03c      	b.n	80085cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6818      	ldr	r0, [r3, #0]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	6859      	ldr	r1, [r3, #4]
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	461a      	mov	r2, r3
 8008560:	f000 f90a 	bl	8008778 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2150      	movs	r1, #80	; 0x50
 800856a:	4618      	mov	r0, r3
 800856c:	f000 f963 	bl	8008836 <TIM_ITRx_SetConfig>
      break;
 8008570:	e02c      	b.n	80085cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6818      	ldr	r0, [r3, #0]
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	6859      	ldr	r1, [r3, #4]
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	461a      	mov	r2, r3
 8008580:	f000 f929 	bl	80087d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2160      	movs	r1, #96	; 0x60
 800858a:	4618      	mov	r0, r3
 800858c:	f000 f953 	bl	8008836 <TIM_ITRx_SetConfig>
      break;
 8008590:	e01c      	b.n	80085cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6818      	ldr	r0, [r3, #0]
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	6859      	ldr	r1, [r3, #4]
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	461a      	mov	r2, r3
 80085a0:	f000 f8ea 	bl	8008778 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2140      	movs	r1, #64	; 0x40
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 f943 	bl	8008836 <TIM_ITRx_SetConfig>
      break;
 80085b0:	e00c      	b.n	80085cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4619      	mov	r1, r3
 80085bc:	4610      	mov	r0, r2
 80085be:	f000 f93a 	bl	8008836 <TIM_ITRx_SetConfig>
      break;
 80085c2:	e003      	b.n	80085cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	73fb      	strb	r3, [r7, #15]
      break;
 80085c8:	e000      	b.n	80085cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80085ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80085dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085e6:	b480      	push	{r7}
 80085e8:	b083      	sub	sp, #12
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085ee:	bf00      	nop
 80085f0:	370c      	adds	r7, #12
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085fa:	b480      	push	{r7}
 80085fc:	b083      	sub	sp, #12
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008602:	bf00      	nop
 8008604:	370c      	adds	r7, #12
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr

0800860e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800860e:	b480      	push	{r7}
 8008610:	b083      	sub	sp, #12
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008616:	bf00      	nop
 8008618:	370c      	adds	r7, #12
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008622:	b480      	push	{r7}
 8008624:	b083      	sub	sp, #12
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800862a:	bf00      	nop
 800862c:	370c      	adds	r7, #12
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
	...

08008638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008638:	b480      	push	{r7}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a40      	ldr	r2, [pc, #256]	; (800874c <TIM_Base_SetConfig+0x114>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d013      	beq.n	8008678 <TIM_Base_SetConfig+0x40>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008656:	d00f      	beq.n	8008678 <TIM_Base_SetConfig+0x40>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a3d      	ldr	r2, [pc, #244]	; (8008750 <TIM_Base_SetConfig+0x118>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d00b      	beq.n	8008678 <TIM_Base_SetConfig+0x40>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a3c      	ldr	r2, [pc, #240]	; (8008754 <TIM_Base_SetConfig+0x11c>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d007      	beq.n	8008678 <TIM_Base_SetConfig+0x40>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a3b      	ldr	r2, [pc, #236]	; (8008758 <TIM_Base_SetConfig+0x120>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d003      	beq.n	8008678 <TIM_Base_SetConfig+0x40>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4a3a      	ldr	r2, [pc, #232]	; (800875c <TIM_Base_SetConfig+0x124>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d108      	bne.n	800868a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800867e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	4313      	orrs	r3, r2
 8008688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a2f      	ldr	r2, [pc, #188]	; (800874c <TIM_Base_SetConfig+0x114>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d02b      	beq.n	80086ea <TIM_Base_SetConfig+0xb2>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008698:	d027      	beq.n	80086ea <TIM_Base_SetConfig+0xb2>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a2c      	ldr	r2, [pc, #176]	; (8008750 <TIM_Base_SetConfig+0x118>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d023      	beq.n	80086ea <TIM_Base_SetConfig+0xb2>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a2b      	ldr	r2, [pc, #172]	; (8008754 <TIM_Base_SetConfig+0x11c>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d01f      	beq.n	80086ea <TIM_Base_SetConfig+0xb2>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a2a      	ldr	r2, [pc, #168]	; (8008758 <TIM_Base_SetConfig+0x120>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d01b      	beq.n	80086ea <TIM_Base_SetConfig+0xb2>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a29      	ldr	r2, [pc, #164]	; (800875c <TIM_Base_SetConfig+0x124>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d017      	beq.n	80086ea <TIM_Base_SetConfig+0xb2>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4a28      	ldr	r2, [pc, #160]	; (8008760 <TIM_Base_SetConfig+0x128>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d013      	beq.n	80086ea <TIM_Base_SetConfig+0xb2>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a27      	ldr	r2, [pc, #156]	; (8008764 <TIM_Base_SetConfig+0x12c>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d00f      	beq.n	80086ea <TIM_Base_SetConfig+0xb2>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a26      	ldr	r2, [pc, #152]	; (8008768 <TIM_Base_SetConfig+0x130>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d00b      	beq.n	80086ea <TIM_Base_SetConfig+0xb2>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a25      	ldr	r2, [pc, #148]	; (800876c <TIM_Base_SetConfig+0x134>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d007      	beq.n	80086ea <TIM_Base_SetConfig+0xb2>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a24      	ldr	r2, [pc, #144]	; (8008770 <TIM_Base_SetConfig+0x138>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d003      	beq.n	80086ea <TIM_Base_SetConfig+0xb2>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a23      	ldr	r2, [pc, #140]	; (8008774 <TIM_Base_SetConfig+0x13c>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d108      	bne.n	80086fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	695b      	ldr	r3, [r3, #20]
 8008706:	4313      	orrs	r3, r2
 8008708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	689a      	ldr	r2, [r3, #8]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a0a      	ldr	r2, [pc, #40]	; (800874c <TIM_Base_SetConfig+0x114>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d003      	beq.n	8008730 <TIM_Base_SetConfig+0xf8>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a0c      	ldr	r2, [pc, #48]	; (800875c <TIM_Base_SetConfig+0x124>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d103      	bne.n	8008738 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	691a      	ldr	r2, [r3, #16]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	615a      	str	r2, [r3, #20]
}
 800873e:	bf00      	nop
 8008740:	3714      	adds	r7, #20
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	40010000 	.word	0x40010000
 8008750:	40000400 	.word	0x40000400
 8008754:	40000800 	.word	0x40000800
 8008758:	40000c00 	.word	0x40000c00
 800875c:	40010400 	.word	0x40010400
 8008760:	40014000 	.word	0x40014000
 8008764:	40014400 	.word	0x40014400
 8008768:	40014800 	.word	0x40014800
 800876c:	40001800 	.word	0x40001800
 8008770:	40001c00 	.word	0x40001c00
 8008774:	40002000 	.word	0x40002000

08008778 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008778:	b480      	push	{r7}
 800877a:	b087      	sub	sp, #28
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6a1b      	ldr	r3, [r3, #32]
 8008788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6a1b      	ldr	r3, [r3, #32]
 800878e:	f023 0201 	bic.w	r2, r3, #1
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80087a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	011b      	lsls	r3, r3, #4
 80087a8:	693a      	ldr	r2, [r7, #16]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	f023 030a 	bic.w	r3, r3, #10
 80087b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80087b6:	697a      	ldr	r2, [r7, #20]
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	697a      	ldr	r2, [r7, #20]
 80087c8:	621a      	str	r2, [r3, #32]
}
 80087ca:	bf00      	nop
 80087cc:	371c      	adds	r7, #28
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr

080087d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b087      	sub	sp, #28
 80087da:	af00      	add	r7, sp, #0
 80087dc:	60f8      	str	r0, [r7, #12]
 80087de:	60b9      	str	r1, [r7, #8]
 80087e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6a1b      	ldr	r3, [r3, #32]
 80087e6:	f023 0210 	bic.w	r2, r3, #16
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	699b      	ldr	r3, [r3, #24]
 80087f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6a1b      	ldr	r3, [r3, #32]
 80087f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008800:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	031b      	lsls	r3, r3, #12
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	4313      	orrs	r3, r2
 800880a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008812:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	011b      	lsls	r3, r3, #4
 8008818:	693a      	ldr	r2, [r7, #16]
 800881a:	4313      	orrs	r3, r2
 800881c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	697a      	ldr	r2, [r7, #20]
 8008822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	693a      	ldr	r2, [r7, #16]
 8008828:	621a      	str	r2, [r3, #32]
}
 800882a:	bf00      	nop
 800882c:	371c      	adds	r7, #28
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008836:	b480      	push	{r7}
 8008838:	b085      	sub	sp, #20
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
 800883e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800884c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	4313      	orrs	r3, r2
 8008854:	f043 0307 	orr.w	r3, r3, #7
 8008858:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	609a      	str	r2, [r3, #8]
}
 8008860:	bf00      	nop
 8008862:	3714      	adds	r7, #20
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800886c:	b480      	push	{r7}
 800886e:	b087      	sub	sp, #28
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]
 8008878:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008886:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	021a      	lsls	r2, r3, #8
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	431a      	orrs	r2, r3
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	4313      	orrs	r3, r2
 8008894:	697a      	ldr	r2, [r7, #20]
 8008896:	4313      	orrs	r3, r2
 8008898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	697a      	ldr	r2, [r7, #20]
 800889e:	609a      	str	r2, [r3, #8]
}
 80088a0:	bf00      	nop
 80088a2:	371c      	adds	r7, #28
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d101      	bne.n	80088c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088c0:	2302      	movs	r3, #2
 80088c2:	e05a      	b.n	800897a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2202      	movs	r2, #2
 80088d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a21      	ldr	r2, [pc, #132]	; (8008988 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d022      	beq.n	800894e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008910:	d01d      	beq.n	800894e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a1d      	ldr	r2, [pc, #116]	; (800898c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d018      	beq.n	800894e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a1b      	ldr	r2, [pc, #108]	; (8008990 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d013      	beq.n	800894e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a1a      	ldr	r2, [pc, #104]	; (8008994 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d00e      	beq.n	800894e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a18      	ldr	r2, [pc, #96]	; (8008998 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d009      	beq.n	800894e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a17      	ldr	r2, [pc, #92]	; (800899c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d004      	beq.n	800894e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a15      	ldr	r2, [pc, #84]	; (80089a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d10c      	bne.n	8008968 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008954:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	68ba      	ldr	r2, [r7, #8]
 800895c:	4313      	orrs	r3, r2
 800895e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68ba      	ldr	r2, [r7, #8]
 8008966:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3714      	adds	r7, #20
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	40010000 	.word	0x40010000
 800898c:	40000400 	.word	0x40000400
 8008990:	40000800 	.word	0x40000800
 8008994:	40000c00 	.word	0x40000c00
 8008998:	40010400 	.word	0x40010400
 800899c:	40014000 	.word	0x40014000
 80089a0:	40001800 	.word	0x40001800

080089a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80089ac:	bf00      	nop
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80089c0:	bf00      	nop
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d101      	bne.n	80089de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e03f      	b.n	8008a5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d106      	bne.n	80089f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f7f9 fd1a 	bl	800242c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2224      	movs	r2, #36	; 0x24
 80089fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68da      	ldr	r2, [r3, #12]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fd7b 	bl	800950c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	691a      	ldr	r2, [r3, #16]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	695a      	ldr	r2, [r3, #20]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	68da      	ldr	r2, [r3, #12]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2220      	movs	r2, #32
 8008a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2220      	movs	r2, #32
 8008a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3708      	adds	r7, #8
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b08a      	sub	sp, #40	; 0x28
 8008a6a:	af02      	add	r7, sp, #8
 8008a6c:	60f8      	str	r0, [r7, #12]
 8008a6e:	60b9      	str	r1, [r7, #8]
 8008a70:	603b      	str	r3, [r7, #0]
 8008a72:	4613      	mov	r3, r2
 8008a74:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008a76:	2300      	movs	r3, #0
 8008a78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b20      	cmp	r3, #32
 8008a84:	d17c      	bne.n	8008b80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d002      	beq.n	8008a92 <HAL_UART_Transmit+0x2c>
 8008a8c:	88fb      	ldrh	r3, [r7, #6]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d101      	bne.n	8008a96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e075      	b.n	8008b82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d101      	bne.n	8008aa4 <HAL_UART_Transmit+0x3e>
 8008aa0:	2302      	movs	r3, #2
 8008aa2:	e06e      	b.n	8008b82 <HAL_UART_Transmit+0x11c>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2221      	movs	r2, #33	; 0x21
 8008ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008aba:	f7fb fe6f 	bl	800479c <HAL_GetTick>
 8008abe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	88fa      	ldrh	r2, [r7, #6]
 8008ac4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	88fa      	ldrh	r2, [r7, #6]
 8008aca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ad4:	d108      	bne.n	8008ae8 <HAL_UART_Transmit+0x82>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d104      	bne.n	8008ae8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	61bb      	str	r3, [r7, #24]
 8008ae6:	e003      	b.n	8008af0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008aec:	2300      	movs	r3, #0
 8008aee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008af8:	e02a      	b.n	8008b50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	9300      	str	r3, [sp, #0]
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	2200      	movs	r2, #0
 8008b02:	2180      	movs	r1, #128	; 0x80
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f000 faf9 	bl	80090fc <UART_WaitOnFlagUntilTimeout>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d001      	beq.n	8008b14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008b10:	2303      	movs	r3, #3
 8008b12:	e036      	b.n	8008b82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d10b      	bne.n	8008b32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	881b      	ldrh	r3, [r3, #0]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008b2a:	69bb      	ldr	r3, [r7, #24]
 8008b2c:	3302      	adds	r3, #2
 8008b2e:	61bb      	str	r3, [r7, #24]
 8008b30:	e007      	b.n	8008b42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	781a      	ldrb	r2, [r3, #0]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	3b01      	subs	r3, #1
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d1cf      	bne.n	8008afa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	2200      	movs	r2, #0
 8008b62:	2140      	movs	r1, #64	; 0x40
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f000 fac9 	bl	80090fc <UART_WaitOnFlagUntilTimeout>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d001      	beq.n	8008b74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008b70:	2303      	movs	r3, #3
 8008b72:	e006      	b.n	8008b82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2220      	movs	r2, #32
 8008b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	e000      	b.n	8008b82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008b80:	2302      	movs	r3, #2
  }
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3720      	adds	r7, #32
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
	...

08008b8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b0ba      	sub	sp, #232	; 0xe8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	695b      	ldr	r3, [r3, #20]
 8008bae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bc2:	f003 030f 	and.w	r3, r3, #15
 8008bc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008bca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10f      	bne.n	8008bf2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bd6:	f003 0320 	and.w	r3, r3, #32
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d009      	beq.n	8008bf2 <HAL_UART_IRQHandler+0x66>
 8008bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008be2:	f003 0320 	and.w	r3, r3, #32
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d003      	beq.n	8008bf2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 fbd3 	bl	8009396 <UART_Receive_IT>
      return;
 8008bf0:	e256      	b.n	80090a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008bf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f000 80de 	beq.w	8008db8 <HAL_UART_IRQHandler+0x22c>
 8008bfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c00:	f003 0301 	and.w	r3, r3, #1
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d106      	bne.n	8008c16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c0c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f000 80d1 	beq.w	8008db8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c1a:	f003 0301 	and.w	r3, r3, #1
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00b      	beq.n	8008c3a <HAL_UART_IRQHandler+0xae>
 8008c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d005      	beq.n	8008c3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c32:	f043 0201 	orr.w	r2, r3, #1
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c3e:	f003 0304 	and.w	r3, r3, #4
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00b      	beq.n	8008c5e <HAL_UART_IRQHandler+0xd2>
 8008c46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c4a:	f003 0301 	and.w	r3, r3, #1
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d005      	beq.n	8008c5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c56:	f043 0202 	orr.w	r2, r3, #2
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c62:	f003 0302 	and.w	r3, r3, #2
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00b      	beq.n	8008c82 <HAL_UART_IRQHandler+0xf6>
 8008c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c6e:	f003 0301 	and.w	r3, r3, #1
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d005      	beq.n	8008c82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7a:	f043 0204 	orr.w	r2, r3, #4
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c86:	f003 0308 	and.w	r3, r3, #8
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d011      	beq.n	8008cb2 <HAL_UART_IRQHandler+0x126>
 8008c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c92:	f003 0320 	and.w	r3, r3, #32
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d105      	bne.n	8008ca6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c9e:	f003 0301 	and.w	r3, r3, #1
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d005      	beq.n	8008cb2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008caa:	f043 0208 	orr.w	r2, r3, #8
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	f000 81ed 	beq.w	8009096 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cc0:	f003 0320 	and.w	r3, r3, #32
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d008      	beq.n	8008cda <HAL_UART_IRQHandler+0x14e>
 8008cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ccc:	f003 0320 	and.w	r3, r3, #32
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d002      	beq.n	8008cda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 fb5e 	bl	8009396 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	695b      	ldr	r3, [r3, #20]
 8008ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce4:	2b40      	cmp	r3, #64	; 0x40
 8008ce6:	bf0c      	ite	eq
 8008ce8:	2301      	moveq	r3, #1
 8008cea:	2300      	movne	r3, #0
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf6:	f003 0308 	and.w	r3, r3, #8
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d103      	bne.n	8008d06 <HAL_UART_IRQHandler+0x17a>
 8008cfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d04f      	beq.n	8008da6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 fa66 	bl	80091d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	695b      	ldr	r3, [r3, #20]
 8008d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d16:	2b40      	cmp	r3, #64	; 0x40
 8008d18:	d141      	bne.n	8008d9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	3314      	adds	r3, #20
 8008d20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d28:	e853 3f00 	ldrex	r3, [r3]
 8008d2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008d30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	3314      	adds	r3, #20
 8008d42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008d46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008d52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008d56:	e841 2300 	strex	r3, r2, [r1]
 8008d5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008d5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1d9      	bne.n	8008d1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d013      	beq.n	8008d96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d72:	4a7d      	ldr	r2, [pc, #500]	; (8008f68 <HAL_UART_IRQHandler+0x3dc>)
 8008d74:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7fb ffb8 	bl	8004cf0 <HAL_DMA_Abort_IT>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d016      	beq.n	8008db4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008d90:	4610      	mov	r0, r2
 8008d92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d94:	e00e      	b.n	8008db4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 f99a 	bl	80090d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d9c:	e00a      	b.n	8008db4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f996 	bl	80090d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008da4:	e006      	b.n	8008db4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f992 	bl	80090d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008db2:	e170      	b.n	8009096 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008db4:	bf00      	nop
    return;
 8008db6:	e16e      	b.n	8009096 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	f040 814a 	bne.w	8009056 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dc6:	f003 0310 	and.w	r3, r3, #16
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	f000 8143 	beq.w	8009056 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dd4:	f003 0310 	and.w	r3, r3, #16
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f000 813c 	beq.w	8009056 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008dde:	2300      	movs	r3, #0
 8008de0:	60bb      	str	r3, [r7, #8]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	60bb      	str	r3, [r7, #8]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	60bb      	str	r3, [r7, #8]
 8008df2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	695b      	ldr	r3, [r3, #20]
 8008dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dfe:	2b40      	cmp	r3, #64	; 0x40
 8008e00:	f040 80b4 	bne.w	8008f6c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f000 8140 	beq.w	800909a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e22:	429a      	cmp	r2, r3
 8008e24:	f080 8139 	bcs.w	800909a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e34:	69db      	ldr	r3, [r3, #28]
 8008e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e3a:	f000 8088 	beq.w	8008f4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	330c      	adds	r3, #12
 8008e44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e4c:	e853 3f00 	ldrex	r3, [r3]
 8008e50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008e54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	330c      	adds	r3, #12
 8008e66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008e6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008e6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008e76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008e7a:	e841 2300 	strex	r3, r2, [r1]
 8008e7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1d9      	bne.n	8008e3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	3314      	adds	r3, #20
 8008e90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e94:	e853 3f00 	ldrex	r3, [r3]
 8008e98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008e9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e9c:	f023 0301 	bic.w	r3, r3, #1
 8008ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	3314      	adds	r3, #20
 8008eaa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008eae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008eb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008eb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008eba:	e841 2300 	strex	r3, r2, [r1]
 8008ebe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008ec0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1e1      	bne.n	8008e8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	3314      	adds	r3, #20
 8008ecc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ed0:	e853 3f00 	ldrex	r3, [r3]
 8008ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008edc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	3314      	adds	r3, #20
 8008ee6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008eea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008eec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ef0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ef2:	e841 2300 	strex	r3, r2, [r1]
 8008ef6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008ef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1e3      	bne.n	8008ec6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2220      	movs	r2, #32
 8008f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	330c      	adds	r3, #12
 8008f12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f16:	e853 3f00 	ldrex	r3, [r3]
 8008f1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f1e:	f023 0310 	bic.w	r3, r3, #16
 8008f22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	330c      	adds	r3, #12
 8008f2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008f30:	65ba      	str	r2, [r7, #88]	; 0x58
 8008f32:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008f36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f38:	e841 2300 	strex	r3, r2, [r1]
 8008f3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d1e3      	bne.n	8008f0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7fb fe61 	bl	8004c10 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f8c0 	bl	80090e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008f64:	e099      	b.n	800909a <HAL_UART_IRQHandler+0x50e>
 8008f66:	bf00      	nop
 8008f68:	0800929f 	.word	0x0800929f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	1ad3      	subs	r3, r2, r3
 8008f78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f000 808b 	beq.w	800909e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008f88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f000 8086 	beq.w	800909e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	330c      	adds	r3, #12
 8008f98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9c:	e853 3f00 	ldrex	r3, [r3]
 8008fa0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fa8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	330c      	adds	r3, #12
 8008fb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008fb6:	647a      	str	r2, [r7, #68]	; 0x44
 8008fb8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008fbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fbe:	e841 2300 	strex	r3, r2, [r1]
 8008fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d1e3      	bne.n	8008f92 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	3314      	adds	r3, #20
 8008fd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd4:	e853 3f00 	ldrex	r3, [r3]
 8008fd8:	623b      	str	r3, [r7, #32]
   return(result);
 8008fda:	6a3b      	ldr	r3, [r7, #32]
 8008fdc:	f023 0301 	bic.w	r3, r3, #1
 8008fe0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	3314      	adds	r3, #20
 8008fea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008fee:	633a      	str	r2, [r7, #48]	; 0x30
 8008ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ff6:	e841 2300 	strex	r3, r2, [r1]
 8008ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d1e3      	bne.n	8008fca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2220      	movs	r2, #32
 8009006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	330c      	adds	r3, #12
 8009016:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	e853 3f00 	ldrex	r3, [r3]
 800901e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f023 0310 	bic.w	r3, r3, #16
 8009026:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	330c      	adds	r3, #12
 8009030:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009034:	61fa      	str	r2, [r7, #28]
 8009036:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009038:	69b9      	ldr	r1, [r7, #24]
 800903a:	69fa      	ldr	r2, [r7, #28]
 800903c:	e841 2300 	strex	r3, r2, [r1]
 8009040:	617b      	str	r3, [r7, #20]
   return(result);
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1e3      	bne.n	8009010 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009048:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800904c:	4619      	mov	r1, r3
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f848 	bl	80090e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009054:	e023      	b.n	800909e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800905a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800905e:	2b00      	cmp	r3, #0
 8009060:	d009      	beq.n	8009076 <HAL_UART_IRQHandler+0x4ea>
 8009062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800906a:	2b00      	cmp	r3, #0
 800906c:	d003      	beq.n	8009076 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 f929 	bl	80092c6 <UART_Transmit_IT>
    return;
 8009074:	e014      	b.n	80090a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800907a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00e      	beq.n	80090a0 <HAL_UART_IRQHandler+0x514>
 8009082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800908a:	2b00      	cmp	r3, #0
 800908c:	d008      	beq.n	80090a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 f969 	bl	8009366 <UART_EndTransmit_IT>
    return;
 8009094:	e004      	b.n	80090a0 <HAL_UART_IRQHandler+0x514>
    return;
 8009096:	bf00      	nop
 8009098:	e002      	b.n	80090a0 <HAL_UART_IRQHandler+0x514>
      return;
 800909a:	bf00      	nop
 800909c:	e000      	b.n	80090a0 <HAL_UART_IRQHandler+0x514>
      return;
 800909e:	bf00      	nop
  }
}
 80090a0:	37e8      	adds	r7, #232	; 0xe8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop

080090a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80090b0:	bf00      	nop
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80090d8:	bf00      	nop
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	460b      	mov	r3, r1
 80090ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80090f0:	bf00      	nop
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b090      	sub	sp, #64	; 0x40
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	603b      	str	r3, [r7, #0]
 8009108:	4613      	mov	r3, r2
 800910a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800910c:	e050      	b.n	80091b0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800910e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009114:	d04c      	beq.n	80091b0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009118:	2b00      	cmp	r3, #0
 800911a:	d007      	beq.n	800912c <UART_WaitOnFlagUntilTimeout+0x30>
 800911c:	f7fb fb3e 	bl	800479c <HAL_GetTick>
 8009120:	4602      	mov	r2, r0
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	1ad3      	subs	r3, r2, r3
 8009126:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009128:	429a      	cmp	r2, r3
 800912a:	d241      	bcs.n	80091b0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	330c      	adds	r3, #12
 8009132:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009136:	e853 3f00 	ldrex	r3, [r3]
 800913a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800913c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	330c      	adds	r3, #12
 800914a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800914c:	637a      	str	r2, [r7, #52]	; 0x34
 800914e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009150:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009154:	e841 2300 	strex	r3, r2, [r1]
 8009158:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800915a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1e5      	bne.n	800912c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	3314      	adds	r3, #20
 8009166:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	e853 3f00 	ldrex	r3, [r3]
 800916e:	613b      	str	r3, [r7, #16]
   return(result);
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	f023 0301 	bic.w	r3, r3, #1
 8009176:	63bb      	str	r3, [r7, #56]	; 0x38
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	3314      	adds	r3, #20
 800917e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009180:	623a      	str	r2, [r7, #32]
 8009182:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009184:	69f9      	ldr	r1, [r7, #28]
 8009186:	6a3a      	ldr	r2, [r7, #32]
 8009188:	e841 2300 	strex	r3, r2, [r1]
 800918c:	61bb      	str	r3, [r7, #24]
   return(result);
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1e5      	bne.n	8009160 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2220      	movs	r2, #32
 8009198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2220      	movs	r2, #32
 80091a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80091ac:	2303      	movs	r3, #3
 80091ae:	e00f      	b.n	80091d0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	4013      	ands	r3, r2
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	429a      	cmp	r2, r3
 80091be:	bf0c      	ite	eq
 80091c0:	2301      	moveq	r3, #1
 80091c2:	2300      	movne	r3, #0
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	461a      	mov	r2, r3
 80091c8:	79fb      	ldrb	r3, [r7, #7]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d09f      	beq.n	800910e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80091ce:	2300      	movs	r3, #0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3740      	adds	r7, #64	; 0x40
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091d8:	b480      	push	{r7}
 80091da:	b095      	sub	sp, #84	; 0x54
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	330c      	adds	r3, #12
 80091e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ea:	e853 3f00 	ldrex	r3, [r3]
 80091ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80091f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	330c      	adds	r3, #12
 80091fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009200:	643a      	str	r2, [r7, #64]	; 0x40
 8009202:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009204:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009206:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009208:	e841 2300 	strex	r3, r2, [r1]
 800920c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800920e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009210:	2b00      	cmp	r3, #0
 8009212:	d1e5      	bne.n	80091e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	3314      	adds	r3, #20
 800921a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921c:	6a3b      	ldr	r3, [r7, #32]
 800921e:	e853 3f00 	ldrex	r3, [r3]
 8009222:	61fb      	str	r3, [r7, #28]
   return(result);
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	f023 0301 	bic.w	r3, r3, #1
 800922a:	64bb      	str	r3, [r7, #72]	; 0x48
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	3314      	adds	r3, #20
 8009232:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009234:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009236:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009238:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800923a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800923c:	e841 2300 	strex	r3, r2, [r1]
 8009240:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009244:	2b00      	cmp	r3, #0
 8009246:	d1e5      	bne.n	8009214 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800924c:	2b01      	cmp	r3, #1
 800924e:	d119      	bne.n	8009284 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	330c      	adds	r3, #12
 8009256:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	e853 3f00 	ldrex	r3, [r3]
 800925e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	f023 0310 	bic.w	r3, r3, #16
 8009266:	647b      	str	r3, [r7, #68]	; 0x44
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	330c      	adds	r3, #12
 800926e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009270:	61ba      	str	r2, [r7, #24]
 8009272:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009274:	6979      	ldr	r1, [r7, #20]
 8009276:	69ba      	ldr	r2, [r7, #24]
 8009278:	e841 2300 	strex	r3, r2, [r1]
 800927c:	613b      	str	r3, [r7, #16]
   return(result);
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d1e5      	bne.n	8009250 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2220      	movs	r2, #32
 8009288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009292:	bf00      	nop
 8009294:	3754      	adds	r7, #84	; 0x54
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr

0800929e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b084      	sub	sp, #16
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2200      	movs	r2, #0
 80092b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2200      	movs	r2, #0
 80092b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f7ff ff09 	bl	80090d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092be:	bf00      	nop
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80092c6:	b480      	push	{r7}
 80092c8:	b085      	sub	sp, #20
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	2b21      	cmp	r3, #33	; 0x21
 80092d8:	d13e      	bne.n	8009358 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092e2:	d114      	bne.n	800930e <UART_Transmit_IT+0x48>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	691b      	ldr	r3, [r3, #16]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d110      	bne.n	800930e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6a1b      	ldr	r3, [r3, #32]
 80092f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	881b      	ldrh	r3, [r3, #0]
 80092f6:	461a      	mov	r2, r3
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009300:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6a1b      	ldr	r3, [r3, #32]
 8009306:	1c9a      	adds	r2, r3, #2
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	621a      	str	r2, [r3, #32]
 800930c:	e008      	b.n	8009320 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a1b      	ldr	r3, [r3, #32]
 8009312:	1c59      	adds	r1, r3, #1
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	6211      	str	r1, [r2, #32]
 8009318:	781a      	ldrb	r2, [r3, #0]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009324:	b29b      	uxth	r3, r3
 8009326:	3b01      	subs	r3, #1
 8009328:	b29b      	uxth	r3, r3
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	4619      	mov	r1, r3
 800932e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009330:	2b00      	cmp	r3, #0
 8009332:	d10f      	bne.n	8009354 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	68da      	ldr	r2, [r3, #12]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009342:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68da      	ldr	r2, [r3, #12]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009352:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009354:	2300      	movs	r3, #0
 8009356:	e000      	b.n	800935a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009358:	2302      	movs	r3, #2
  }
}
 800935a:	4618      	mov	r0, r3
 800935c:	3714      	adds	r7, #20
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr

08009366 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b082      	sub	sp, #8
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	68da      	ldr	r2, [r3, #12]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800937c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2220      	movs	r2, #32
 8009382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f7ff fe8e 	bl	80090a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800938c:	2300      	movs	r3, #0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b08c      	sub	sp, #48	; 0x30
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	2b22      	cmp	r3, #34	; 0x22
 80093a8:	f040 80ab 	bne.w	8009502 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093b4:	d117      	bne.n	80093e6 <UART_Receive_IT+0x50>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d113      	bne.n	80093e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80093be:	2300      	movs	r3, #0
 80093c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093de:	1c9a      	adds	r2, r3, #2
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	629a      	str	r2, [r3, #40]	; 0x28
 80093e4:	e026      	b.n	8009434 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80093ec:	2300      	movs	r3, #0
 80093ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093f8:	d007      	beq.n	800940a <UART_Receive_IT+0x74>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d10a      	bne.n	8009418 <UART_Receive_IT+0x82>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	691b      	ldr	r3, [r3, #16]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d106      	bne.n	8009418 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	b2da      	uxtb	r2, r3
 8009412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009414:	701a      	strb	r2, [r3, #0]
 8009416:	e008      	b.n	800942a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	b2db      	uxtb	r3, r3
 8009420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009424:	b2da      	uxtb	r2, r3
 8009426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009428:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800942e:	1c5a      	adds	r2, r3, #1
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009438:	b29b      	uxth	r3, r3
 800943a:	3b01      	subs	r3, #1
 800943c:	b29b      	uxth	r3, r3
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	4619      	mov	r1, r3
 8009442:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009444:	2b00      	cmp	r3, #0
 8009446:	d15a      	bne.n	80094fe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	68da      	ldr	r2, [r3, #12]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f022 0220 	bic.w	r2, r2, #32
 8009456:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	68da      	ldr	r2, [r3, #12]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009466:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	695a      	ldr	r2, [r3, #20]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f022 0201 	bic.w	r2, r2, #1
 8009476:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2220      	movs	r2, #32
 800947c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009484:	2b01      	cmp	r3, #1
 8009486:	d135      	bne.n	80094f4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	330c      	adds	r3, #12
 8009494:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	e853 3f00 	ldrex	r3, [r3]
 800949c:	613b      	str	r3, [r7, #16]
   return(result);
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	f023 0310 	bic.w	r3, r3, #16
 80094a4:	627b      	str	r3, [r7, #36]	; 0x24
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	330c      	adds	r3, #12
 80094ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094ae:	623a      	str	r2, [r7, #32]
 80094b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b2:	69f9      	ldr	r1, [r7, #28]
 80094b4:	6a3a      	ldr	r2, [r7, #32]
 80094b6:	e841 2300 	strex	r3, r2, [r1]
 80094ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d1e5      	bne.n	800948e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 0310 	and.w	r3, r3, #16
 80094cc:	2b10      	cmp	r3, #16
 80094ce:	d10a      	bne.n	80094e6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80094d0:	2300      	movs	r3, #0
 80094d2:	60fb      	str	r3, [r7, #12]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	60fb      	str	r3, [r7, #12]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	60fb      	str	r3, [r7, #12]
 80094e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80094ea:	4619      	mov	r1, r3
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f7ff fdf9 	bl	80090e4 <HAL_UARTEx_RxEventCallback>
 80094f2:	e002      	b.n	80094fa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f7ff fde1 	bl	80090bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80094fa:	2300      	movs	r3, #0
 80094fc:	e002      	b.n	8009504 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80094fe:	2300      	movs	r3, #0
 8009500:	e000      	b.n	8009504 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009502:	2302      	movs	r3, #2
  }
}
 8009504:	4618      	mov	r0, r3
 8009506:	3730      	adds	r7, #48	; 0x30
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800950c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009510:	b0c0      	sub	sp, #256	; 0x100
 8009512:	af00      	add	r7, sp, #0
 8009514:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	691b      	ldr	r3, [r3, #16]
 8009520:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009528:	68d9      	ldr	r1, [r3, #12]
 800952a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	ea40 0301 	orr.w	r3, r0, r1
 8009534:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800953a:	689a      	ldr	r2, [r3, #8]
 800953c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009540:	691b      	ldr	r3, [r3, #16]
 8009542:	431a      	orrs	r2, r3
 8009544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009548:	695b      	ldr	r3, [r3, #20]
 800954a:	431a      	orrs	r2, r3
 800954c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009550:	69db      	ldr	r3, [r3, #28]
 8009552:	4313      	orrs	r3, r2
 8009554:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009564:	f021 010c 	bic.w	r1, r1, #12
 8009568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009572:	430b      	orrs	r3, r1
 8009574:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	695b      	ldr	r3, [r3, #20]
 800957e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009586:	6999      	ldr	r1, [r3, #24]
 8009588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	ea40 0301 	orr.w	r3, r0, r1
 8009592:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	4b8f      	ldr	r3, [pc, #572]	; (80097d8 <UART_SetConfig+0x2cc>)
 800959c:	429a      	cmp	r2, r3
 800959e:	d005      	beq.n	80095ac <UART_SetConfig+0xa0>
 80095a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	4b8d      	ldr	r3, [pc, #564]	; (80097dc <UART_SetConfig+0x2d0>)
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d104      	bne.n	80095b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80095ac:	f7fd fd16 	bl	8006fdc <HAL_RCC_GetPCLK2Freq>
 80095b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80095b4:	e003      	b.n	80095be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80095b6:	f7fd fcfd 	bl	8006fb4 <HAL_RCC_GetPCLK1Freq>
 80095ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095c2:	69db      	ldr	r3, [r3, #28]
 80095c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095c8:	f040 810c 	bne.w	80097e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80095cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095d0:	2200      	movs	r2, #0
 80095d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80095d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80095da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80095de:	4622      	mov	r2, r4
 80095e0:	462b      	mov	r3, r5
 80095e2:	1891      	adds	r1, r2, r2
 80095e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80095e6:	415b      	adcs	r3, r3
 80095e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80095ee:	4621      	mov	r1, r4
 80095f0:	eb12 0801 	adds.w	r8, r2, r1
 80095f4:	4629      	mov	r1, r5
 80095f6:	eb43 0901 	adc.w	r9, r3, r1
 80095fa:	f04f 0200 	mov.w	r2, #0
 80095fe:	f04f 0300 	mov.w	r3, #0
 8009602:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009606:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800960a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800960e:	4690      	mov	r8, r2
 8009610:	4699      	mov	r9, r3
 8009612:	4623      	mov	r3, r4
 8009614:	eb18 0303 	adds.w	r3, r8, r3
 8009618:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800961c:	462b      	mov	r3, r5
 800961e:	eb49 0303 	adc.w	r3, r9, r3
 8009622:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009632:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009636:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800963a:	460b      	mov	r3, r1
 800963c:	18db      	adds	r3, r3, r3
 800963e:	653b      	str	r3, [r7, #80]	; 0x50
 8009640:	4613      	mov	r3, r2
 8009642:	eb42 0303 	adc.w	r3, r2, r3
 8009646:	657b      	str	r3, [r7, #84]	; 0x54
 8009648:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800964c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009650:	f7f7 fb2a 	bl	8000ca8 <__aeabi_uldivmod>
 8009654:	4602      	mov	r2, r0
 8009656:	460b      	mov	r3, r1
 8009658:	4b61      	ldr	r3, [pc, #388]	; (80097e0 <UART_SetConfig+0x2d4>)
 800965a:	fba3 2302 	umull	r2, r3, r3, r2
 800965e:	095b      	lsrs	r3, r3, #5
 8009660:	011c      	lsls	r4, r3, #4
 8009662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009666:	2200      	movs	r2, #0
 8009668:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800966c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009670:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009674:	4642      	mov	r2, r8
 8009676:	464b      	mov	r3, r9
 8009678:	1891      	adds	r1, r2, r2
 800967a:	64b9      	str	r1, [r7, #72]	; 0x48
 800967c:	415b      	adcs	r3, r3
 800967e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009680:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009684:	4641      	mov	r1, r8
 8009686:	eb12 0a01 	adds.w	sl, r2, r1
 800968a:	4649      	mov	r1, r9
 800968c:	eb43 0b01 	adc.w	fp, r3, r1
 8009690:	f04f 0200 	mov.w	r2, #0
 8009694:	f04f 0300 	mov.w	r3, #0
 8009698:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800969c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80096a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80096a4:	4692      	mov	sl, r2
 80096a6:	469b      	mov	fp, r3
 80096a8:	4643      	mov	r3, r8
 80096aa:	eb1a 0303 	adds.w	r3, sl, r3
 80096ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80096b2:	464b      	mov	r3, r9
 80096b4:	eb4b 0303 	adc.w	r3, fp, r3
 80096b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80096bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80096c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80096cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80096d0:	460b      	mov	r3, r1
 80096d2:	18db      	adds	r3, r3, r3
 80096d4:	643b      	str	r3, [r7, #64]	; 0x40
 80096d6:	4613      	mov	r3, r2
 80096d8:	eb42 0303 	adc.w	r3, r2, r3
 80096dc:	647b      	str	r3, [r7, #68]	; 0x44
 80096de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80096e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80096e6:	f7f7 fadf 	bl	8000ca8 <__aeabi_uldivmod>
 80096ea:	4602      	mov	r2, r0
 80096ec:	460b      	mov	r3, r1
 80096ee:	4611      	mov	r1, r2
 80096f0:	4b3b      	ldr	r3, [pc, #236]	; (80097e0 <UART_SetConfig+0x2d4>)
 80096f2:	fba3 2301 	umull	r2, r3, r3, r1
 80096f6:	095b      	lsrs	r3, r3, #5
 80096f8:	2264      	movs	r2, #100	; 0x64
 80096fa:	fb02 f303 	mul.w	r3, r2, r3
 80096fe:	1acb      	subs	r3, r1, r3
 8009700:	00db      	lsls	r3, r3, #3
 8009702:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009706:	4b36      	ldr	r3, [pc, #216]	; (80097e0 <UART_SetConfig+0x2d4>)
 8009708:	fba3 2302 	umull	r2, r3, r3, r2
 800970c:	095b      	lsrs	r3, r3, #5
 800970e:	005b      	lsls	r3, r3, #1
 8009710:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009714:	441c      	add	r4, r3
 8009716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800971a:	2200      	movs	r2, #0
 800971c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009720:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009724:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009728:	4642      	mov	r2, r8
 800972a:	464b      	mov	r3, r9
 800972c:	1891      	adds	r1, r2, r2
 800972e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009730:	415b      	adcs	r3, r3
 8009732:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009734:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009738:	4641      	mov	r1, r8
 800973a:	1851      	adds	r1, r2, r1
 800973c:	6339      	str	r1, [r7, #48]	; 0x30
 800973e:	4649      	mov	r1, r9
 8009740:	414b      	adcs	r3, r1
 8009742:	637b      	str	r3, [r7, #52]	; 0x34
 8009744:	f04f 0200 	mov.w	r2, #0
 8009748:	f04f 0300 	mov.w	r3, #0
 800974c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009750:	4659      	mov	r1, fp
 8009752:	00cb      	lsls	r3, r1, #3
 8009754:	4651      	mov	r1, sl
 8009756:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800975a:	4651      	mov	r1, sl
 800975c:	00ca      	lsls	r2, r1, #3
 800975e:	4610      	mov	r0, r2
 8009760:	4619      	mov	r1, r3
 8009762:	4603      	mov	r3, r0
 8009764:	4642      	mov	r2, r8
 8009766:	189b      	adds	r3, r3, r2
 8009768:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800976c:	464b      	mov	r3, r9
 800976e:	460a      	mov	r2, r1
 8009770:	eb42 0303 	adc.w	r3, r2, r3
 8009774:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009784:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009788:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800978c:	460b      	mov	r3, r1
 800978e:	18db      	adds	r3, r3, r3
 8009790:	62bb      	str	r3, [r7, #40]	; 0x28
 8009792:	4613      	mov	r3, r2
 8009794:	eb42 0303 	adc.w	r3, r2, r3
 8009798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800979a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800979e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80097a2:	f7f7 fa81 	bl	8000ca8 <__aeabi_uldivmod>
 80097a6:	4602      	mov	r2, r0
 80097a8:	460b      	mov	r3, r1
 80097aa:	4b0d      	ldr	r3, [pc, #52]	; (80097e0 <UART_SetConfig+0x2d4>)
 80097ac:	fba3 1302 	umull	r1, r3, r3, r2
 80097b0:	095b      	lsrs	r3, r3, #5
 80097b2:	2164      	movs	r1, #100	; 0x64
 80097b4:	fb01 f303 	mul.w	r3, r1, r3
 80097b8:	1ad3      	subs	r3, r2, r3
 80097ba:	00db      	lsls	r3, r3, #3
 80097bc:	3332      	adds	r3, #50	; 0x32
 80097be:	4a08      	ldr	r2, [pc, #32]	; (80097e0 <UART_SetConfig+0x2d4>)
 80097c0:	fba2 2303 	umull	r2, r3, r2, r3
 80097c4:	095b      	lsrs	r3, r3, #5
 80097c6:	f003 0207 	and.w	r2, r3, #7
 80097ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4422      	add	r2, r4
 80097d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80097d4:	e105      	b.n	80099e2 <UART_SetConfig+0x4d6>
 80097d6:	bf00      	nop
 80097d8:	40011000 	.word	0x40011000
 80097dc:	40011400 	.word	0x40011400
 80097e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097e8:	2200      	movs	r2, #0
 80097ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80097ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80097f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80097f6:	4642      	mov	r2, r8
 80097f8:	464b      	mov	r3, r9
 80097fa:	1891      	adds	r1, r2, r2
 80097fc:	6239      	str	r1, [r7, #32]
 80097fe:	415b      	adcs	r3, r3
 8009800:	627b      	str	r3, [r7, #36]	; 0x24
 8009802:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009806:	4641      	mov	r1, r8
 8009808:	1854      	adds	r4, r2, r1
 800980a:	4649      	mov	r1, r9
 800980c:	eb43 0501 	adc.w	r5, r3, r1
 8009810:	f04f 0200 	mov.w	r2, #0
 8009814:	f04f 0300 	mov.w	r3, #0
 8009818:	00eb      	lsls	r3, r5, #3
 800981a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800981e:	00e2      	lsls	r2, r4, #3
 8009820:	4614      	mov	r4, r2
 8009822:	461d      	mov	r5, r3
 8009824:	4643      	mov	r3, r8
 8009826:	18e3      	adds	r3, r4, r3
 8009828:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800982c:	464b      	mov	r3, r9
 800982e:	eb45 0303 	adc.w	r3, r5, r3
 8009832:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009842:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009846:	f04f 0200 	mov.w	r2, #0
 800984a:	f04f 0300 	mov.w	r3, #0
 800984e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009852:	4629      	mov	r1, r5
 8009854:	008b      	lsls	r3, r1, #2
 8009856:	4621      	mov	r1, r4
 8009858:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800985c:	4621      	mov	r1, r4
 800985e:	008a      	lsls	r2, r1, #2
 8009860:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009864:	f7f7 fa20 	bl	8000ca8 <__aeabi_uldivmod>
 8009868:	4602      	mov	r2, r0
 800986a:	460b      	mov	r3, r1
 800986c:	4b60      	ldr	r3, [pc, #384]	; (80099f0 <UART_SetConfig+0x4e4>)
 800986e:	fba3 2302 	umull	r2, r3, r3, r2
 8009872:	095b      	lsrs	r3, r3, #5
 8009874:	011c      	lsls	r4, r3, #4
 8009876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800987a:	2200      	movs	r2, #0
 800987c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009880:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009884:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009888:	4642      	mov	r2, r8
 800988a:	464b      	mov	r3, r9
 800988c:	1891      	adds	r1, r2, r2
 800988e:	61b9      	str	r1, [r7, #24]
 8009890:	415b      	adcs	r3, r3
 8009892:	61fb      	str	r3, [r7, #28]
 8009894:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009898:	4641      	mov	r1, r8
 800989a:	1851      	adds	r1, r2, r1
 800989c:	6139      	str	r1, [r7, #16]
 800989e:	4649      	mov	r1, r9
 80098a0:	414b      	adcs	r3, r1
 80098a2:	617b      	str	r3, [r7, #20]
 80098a4:	f04f 0200 	mov.w	r2, #0
 80098a8:	f04f 0300 	mov.w	r3, #0
 80098ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80098b0:	4659      	mov	r1, fp
 80098b2:	00cb      	lsls	r3, r1, #3
 80098b4:	4651      	mov	r1, sl
 80098b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098ba:	4651      	mov	r1, sl
 80098bc:	00ca      	lsls	r2, r1, #3
 80098be:	4610      	mov	r0, r2
 80098c0:	4619      	mov	r1, r3
 80098c2:	4603      	mov	r3, r0
 80098c4:	4642      	mov	r2, r8
 80098c6:	189b      	adds	r3, r3, r2
 80098c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098cc:	464b      	mov	r3, r9
 80098ce:	460a      	mov	r2, r1
 80098d0:	eb42 0303 	adc.w	r3, r2, r3
 80098d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80098d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80098e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80098e4:	f04f 0200 	mov.w	r2, #0
 80098e8:	f04f 0300 	mov.w	r3, #0
 80098ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80098f0:	4649      	mov	r1, r9
 80098f2:	008b      	lsls	r3, r1, #2
 80098f4:	4641      	mov	r1, r8
 80098f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098fa:	4641      	mov	r1, r8
 80098fc:	008a      	lsls	r2, r1, #2
 80098fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009902:	f7f7 f9d1 	bl	8000ca8 <__aeabi_uldivmod>
 8009906:	4602      	mov	r2, r0
 8009908:	460b      	mov	r3, r1
 800990a:	4b39      	ldr	r3, [pc, #228]	; (80099f0 <UART_SetConfig+0x4e4>)
 800990c:	fba3 1302 	umull	r1, r3, r3, r2
 8009910:	095b      	lsrs	r3, r3, #5
 8009912:	2164      	movs	r1, #100	; 0x64
 8009914:	fb01 f303 	mul.w	r3, r1, r3
 8009918:	1ad3      	subs	r3, r2, r3
 800991a:	011b      	lsls	r3, r3, #4
 800991c:	3332      	adds	r3, #50	; 0x32
 800991e:	4a34      	ldr	r2, [pc, #208]	; (80099f0 <UART_SetConfig+0x4e4>)
 8009920:	fba2 2303 	umull	r2, r3, r2, r3
 8009924:	095b      	lsrs	r3, r3, #5
 8009926:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800992a:	441c      	add	r4, r3
 800992c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009930:	2200      	movs	r2, #0
 8009932:	673b      	str	r3, [r7, #112]	; 0x70
 8009934:	677a      	str	r2, [r7, #116]	; 0x74
 8009936:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800993a:	4642      	mov	r2, r8
 800993c:	464b      	mov	r3, r9
 800993e:	1891      	adds	r1, r2, r2
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	415b      	adcs	r3, r3
 8009944:	60fb      	str	r3, [r7, #12]
 8009946:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800994a:	4641      	mov	r1, r8
 800994c:	1851      	adds	r1, r2, r1
 800994e:	6039      	str	r1, [r7, #0]
 8009950:	4649      	mov	r1, r9
 8009952:	414b      	adcs	r3, r1
 8009954:	607b      	str	r3, [r7, #4]
 8009956:	f04f 0200 	mov.w	r2, #0
 800995a:	f04f 0300 	mov.w	r3, #0
 800995e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009962:	4659      	mov	r1, fp
 8009964:	00cb      	lsls	r3, r1, #3
 8009966:	4651      	mov	r1, sl
 8009968:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800996c:	4651      	mov	r1, sl
 800996e:	00ca      	lsls	r2, r1, #3
 8009970:	4610      	mov	r0, r2
 8009972:	4619      	mov	r1, r3
 8009974:	4603      	mov	r3, r0
 8009976:	4642      	mov	r2, r8
 8009978:	189b      	adds	r3, r3, r2
 800997a:	66bb      	str	r3, [r7, #104]	; 0x68
 800997c:	464b      	mov	r3, r9
 800997e:	460a      	mov	r2, r1
 8009980:	eb42 0303 	adc.w	r3, r2, r3
 8009984:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	663b      	str	r3, [r7, #96]	; 0x60
 8009990:	667a      	str	r2, [r7, #100]	; 0x64
 8009992:	f04f 0200 	mov.w	r2, #0
 8009996:	f04f 0300 	mov.w	r3, #0
 800999a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800999e:	4649      	mov	r1, r9
 80099a0:	008b      	lsls	r3, r1, #2
 80099a2:	4641      	mov	r1, r8
 80099a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099a8:	4641      	mov	r1, r8
 80099aa:	008a      	lsls	r2, r1, #2
 80099ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80099b0:	f7f7 f97a 	bl	8000ca8 <__aeabi_uldivmod>
 80099b4:	4602      	mov	r2, r0
 80099b6:	460b      	mov	r3, r1
 80099b8:	4b0d      	ldr	r3, [pc, #52]	; (80099f0 <UART_SetConfig+0x4e4>)
 80099ba:	fba3 1302 	umull	r1, r3, r3, r2
 80099be:	095b      	lsrs	r3, r3, #5
 80099c0:	2164      	movs	r1, #100	; 0x64
 80099c2:	fb01 f303 	mul.w	r3, r1, r3
 80099c6:	1ad3      	subs	r3, r2, r3
 80099c8:	011b      	lsls	r3, r3, #4
 80099ca:	3332      	adds	r3, #50	; 0x32
 80099cc:	4a08      	ldr	r2, [pc, #32]	; (80099f0 <UART_SetConfig+0x4e4>)
 80099ce:	fba2 2303 	umull	r2, r3, r2, r3
 80099d2:	095b      	lsrs	r3, r3, #5
 80099d4:	f003 020f 	and.w	r2, r3, #15
 80099d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4422      	add	r2, r4
 80099e0:	609a      	str	r2, [r3, #8]
}
 80099e2:	bf00      	nop
 80099e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80099e8:	46bd      	mov	sp, r7
 80099ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099ee:	bf00      	nop
 80099f0:	51eb851f 	.word	0x51eb851f

080099f4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d123      	bne.n	8009a4e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009a0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009a12:	683a      	ldr	r2, [r7, #0]
 8009a14:	6851      	ldr	r1, [r2, #4]
 8009a16:	683a      	ldr	r2, [r7, #0]
 8009a18:	6892      	ldr	r2, [r2, #8]
 8009a1a:	4311      	orrs	r1, r2
 8009a1c:	683a      	ldr	r2, [r7, #0]
 8009a1e:	68d2      	ldr	r2, [r2, #12]
 8009a20:	4311      	orrs	r1, r2
 8009a22:	683a      	ldr	r2, [r7, #0]
 8009a24:	6912      	ldr	r2, [r2, #16]
 8009a26:	4311      	orrs	r1, r2
 8009a28:	683a      	ldr	r2, [r7, #0]
 8009a2a:	6952      	ldr	r2, [r2, #20]
 8009a2c:	4311      	orrs	r1, r2
 8009a2e:	683a      	ldr	r2, [r7, #0]
 8009a30:	6992      	ldr	r2, [r2, #24]
 8009a32:	4311      	orrs	r1, r2
 8009a34:	683a      	ldr	r2, [r7, #0]
 8009a36:	69d2      	ldr	r2, [r2, #28]
 8009a38:	4311      	orrs	r1, r2
 8009a3a:	683a      	ldr	r2, [r7, #0]
 8009a3c:	6a12      	ldr	r2, [r2, #32]
 8009a3e:	4311      	orrs	r1, r2
 8009a40:	683a      	ldr	r2, [r7, #0]
 8009a42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009a44:	430a      	orrs	r2, r1
 8009a46:	431a      	orrs	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	601a      	str	r2, [r3, #0]
 8009a4c:	e028      	b.n	8009aa0 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	69d9      	ldr	r1, [r3, #28]
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	4319      	orrs	r1, r3
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a64:	430b      	orrs	r3, r1
 8009a66:	431a      	orrs	r2, r3
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009a74:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009a78:	683a      	ldr	r2, [r7, #0]
 8009a7a:	6851      	ldr	r1, [r2, #4]
 8009a7c:	683a      	ldr	r2, [r7, #0]
 8009a7e:	6892      	ldr	r2, [r2, #8]
 8009a80:	4311      	orrs	r1, r2
 8009a82:	683a      	ldr	r2, [r7, #0]
 8009a84:	68d2      	ldr	r2, [r2, #12]
 8009a86:	4311      	orrs	r1, r2
 8009a88:	683a      	ldr	r2, [r7, #0]
 8009a8a:	6912      	ldr	r2, [r2, #16]
 8009a8c:	4311      	orrs	r1, r2
 8009a8e:	683a      	ldr	r2, [r7, #0]
 8009a90:	6952      	ldr	r2, [r2, #20]
 8009a92:	4311      	orrs	r1, r2
 8009a94:	683a      	ldr	r2, [r7, #0]
 8009a96:	6992      	ldr	r2, [r2, #24]
 8009a98:	430a      	orrs	r2, r1
 8009a9a:	431a      	orrs	r2, r3
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	370c      	adds	r7, #12
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr

08009aae <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009aae:	b480      	push	{r7}
 8009ab0:	b085      	sub	sp, #20
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	60f8      	str	r0, [r7, #12]
 8009ab6:	60b9      	str	r1, [r7, #8]
 8009ab8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d128      	bne.n	8009b12 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	1e59      	subs	r1, r3, #1
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	011b      	lsls	r3, r3, #4
 8009ad6:	4319      	orrs	r1, r3
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	3b01      	subs	r3, #1
 8009ade:	021b      	lsls	r3, r3, #8
 8009ae0:	4319      	orrs	r1, r3
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	68db      	ldr	r3, [r3, #12]
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	031b      	lsls	r3, r3, #12
 8009aea:	4319      	orrs	r1, r3
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	691b      	ldr	r3, [r3, #16]
 8009af0:	3b01      	subs	r3, #1
 8009af2:	041b      	lsls	r3, r3, #16
 8009af4:	4319      	orrs	r1, r3
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	695b      	ldr	r3, [r3, #20]
 8009afa:	3b01      	subs	r3, #1
 8009afc:	051b      	lsls	r3, r3, #20
 8009afe:	4319      	orrs	r1, r3
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	699b      	ldr	r3, [r3, #24]
 8009b04:	3b01      	subs	r3, #1
 8009b06:	061b      	lsls	r3, r3, #24
 8009b08:	430b      	orrs	r3, r1
 8009b0a:	431a      	orrs	r2, r3
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	609a      	str	r2, [r3, #8]
 8009b10:	e02f      	b.n	8009b72 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009b1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	68d2      	ldr	r2, [r2, #12]
 8009b22:	3a01      	subs	r2, #1
 8009b24:	0311      	lsls	r1, r2, #12
 8009b26:	68ba      	ldr	r2, [r7, #8]
 8009b28:	6952      	ldr	r2, [r2, #20]
 8009b2a:	3a01      	subs	r2, #1
 8009b2c:	0512      	lsls	r2, r2, #20
 8009b2e:	430a      	orrs	r2, r1
 8009b30:	431a      	orrs	r2, r3
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	1e59      	subs	r1, r3, #1
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	011b      	lsls	r3, r3, #4
 8009b4c:	4319      	orrs	r1, r3
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	3b01      	subs	r3, #1
 8009b54:	021b      	lsls	r3, r3, #8
 8009b56:	4319      	orrs	r1, r3
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	691b      	ldr	r3, [r3, #16]
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	041b      	lsls	r3, r3, #16
 8009b60:	4319      	orrs	r1, r3
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	699b      	ldr	r3, [r3, #24]
 8009b66:	3b01      	subs	r3, #1
 8009b68:	061b      	lsls	r3, r3, #24
 8009b6a:	430b      	orrs	r3, r1
 8009b6c:	431a      	orrs	r2, r3
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8009b72:	2300      	movs	r3, #0
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3714      	adds	r7, #20
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b086      	sub	sp, #24
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	691b      	ldr	r3, [r3, #16]
 8009b94:	0d9b      	lsrs	r3, r3, #22
 8009b96:	059b      	lsls	r3, r3, #22
 8009b98:	68ba      	ldr	r2, [r7, #8]
 8009b9a:	6811      	ldr	r1, [r2, #0]
 8009b9c:	68ba      	ldr	r2, [r7, #8]
 8009b9e:	6852      	ldr	r2, [r2, #4]
 8009ba0:	4311      	orrs	r1, r2
 8009ba2:	68ba      	ldr	r2, [r7, #8]
 8009ba4:	6892      	ldr	r2, [r2, #8]
 8009ba6:	3a01      	subs	r2, #1
 8009ba8:	0152      	lsls	r2, r2, #5
 8009baa:	4311      	orrs	r1, r2
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	68d2      	ldr	r2, [r2, #12]
 8009bb0:	0252      	lsls	r2, r2, #9
 8009bb2:	430a      	orrs	r2, r1
 8009bb4:	431a      	orrs	r2, r3
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8009bba:	f7fa fdef 	bl	800479c <HAL_GetTick>
 8009bbe:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009bc0:	e010      	b.n	8009be4 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc8:	d00c      	beq.n	8009be4 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d007      	beq.n	8009be0 <FMC_SDRAM_SendCommand+0x60>
 8009bd0:	f7fa fde4 	bl	800479c <HAL_GetTick>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	1ad3      	subs	r3, r2, r3
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d201      	bcs.n	8009be4 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8009be0:	2303      	movs	r3, #3
 8009be2:	e006      	b.n	8009bf2 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	699b      	ldr	r3, [r3, #24]
 8009be8:	f003 0320 	and.w	r3, r3, #32
 8009bec:	2b20      	cmp	r3, #32
 8009bee:	d0e8      	beq.n	8009bc2 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3718      	adds	r7, #24
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009bfa:	b480      	push	{r7}
 8009bfc:	b083      	sub	sp, #12
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
 8009c02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	695b      	ldr	r3, [r3, #20]
 8009c08:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009c0c:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8009c10:	683a      	ldr	r2, [r7, #0]
 8009c12:	0052      	lsls	r2, r2, #1
 8009c14:	431a      	orrs	r2, r3
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	370c      	adds	r7, #12
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	4603      	mov	r3, r0
 8009c30:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009c32:	2300      	movs	r3, #0
 8009c34:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009c36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c3a:	2b84      	cmp	r3, #132	; 0x84
 8009c3c:	d005      	beq.n	8009c4a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009c3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	4413      	add	r3, r2
 8009c46:	3303      	adds	r3, #3
 8009c48:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3714      	adds	r7, #20
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009c5c:	f000 fb02 	bl	800a264 <vTaskStartScheduler>
  
  return osOK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009c66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c68:	b089      	sub	sp, #36	; 0x24
 8009c6a:	af04      	add	r7, sp, #16
 8009c6c:	6078      	str	r0, [r7, #4]
 8009c6e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	695b      	ldr	r3, [r3, #20]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d020      	beq.n	8009cba <osThreadCreate+0x54>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	699b      	ldr	r3, [r3, #24]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d01c      	beq.n	8009cba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	685c      	ldr	r4, [r3, #4]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681d      	ldr	r5, [r3, #0]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	691e      	ldr	r6, [r3, #16]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7ff ffc8 	bl	8009c28 <makeFreeRtosPriority>
 8009c98:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	695b      	ldr	r3, [r3, #20]
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009ca2:	9202      	str	r2, [sp, #8]
 8009ca4:	9301      	str	r3, [sp, #4]
 8009ca6:	9100      	str	r1, [sp, #0]
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	4632      	mov	r2, r6
 8009cac:	4629      	mov	r1, r5
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f000 f8ed 	bl	8009e8e <xTaskCreateStatic>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	60fb      	str	r3, [r7, #12]
 8009cb8:	e01c      	b.n	8009cf4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	685c      	ldr	r4, [r3, #4]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009cc6:	b29e      	uxth	r6, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7ff ffaa 	bl	8009c28 <makeFreeRtosPriority>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	f107 030c 	add.w	r3, r7, #12
 8009cda:	9301      	str	r3, [sp, #4]
 8009cdc:	9200      	str	r2, [sp, #0]
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	4632      	mov	r2, r6
 8009ce2:	4629      	mov	r1, r5
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	f000 f92f 	bl	8009f48 <xTaskCreate>
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d001      	beq.n	8009cf4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	e000      	b.n	8009cf6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3714      	adds	r7, #20
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009cfe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b084      	sub	sp, #16
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d001      	beq.n	8009d14 <osDelay+0x16>
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	e000      	b.n	8009d16 <osDelay+0x18>
 8009d14:	2301      	movs	r3, #1
 8009d16:	4618      	mov	r0, r3
 8009d18:	f000 fa70 	bl	800a1fc <vTaskDelay>
  
  return osOK;
 8009d1c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009d26:	b480      	push	{r7}
 8009d28:	b083      	sub	sp, #12
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f103 0208 	add.w	r2, r3, #8
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d3e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f103 0208 	add.w	r2, r3, #8
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f103 0208 	add.w	r2, r3, #8
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009d5a:	bf00      	nop
 8009d5c:	370c      	adds	r7, #12
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr

08009d66 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009d66:	b480      	push	{r7}
 8009d68:	b083      	sub	sp, #12
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009d74:	bf00      	nop
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d80:	b480      	push	{r7}
 8009d82:	b085      	sub	sp, #20
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	68fa      	ldr	r2, [r7, #12]
 8009d94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	689a      	ldr	r2, [r3, #8]
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	683a      	ldr	r2, [r7, #0]
 8009da4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	683a      	ldr	r2, [r7, #0]
 8009daa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	1c5a      	adds	r2, r3, #1
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	601a      	str	r2, [r3, #0]
}
 8009dbc:	bf00      	nop
 8009dbe:	3714      	adds	r7, #20
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b085      	sub	sp, #20
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dde:	d103      	bne.n	8009de8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	691b      	ldr	r3, [r3, #16]
 8009de4:	60fb      	str	r3, [r7, #12]
 8009de6:	e00c      	b.n	8009e02 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	3308      	adds	r3, #8
 8009dec:	60fb      	str	r3, [r7, #12]
 8009dee:	e002      	b.n	8009df6 <vListInsert+0x2e>
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	60fb      	str	r3, [r7, #12]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	68ba      	ldr	r2, [r7, #8]
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d2f6      	bcs.n	8009df0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	685a      	ldr	r2, [r3, #4]
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	683a      	ldr	r2, [r7, #0]
 8009e10:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	683a      	ldr	r2, [r7, #0]
 8009e1c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	1c5a      	adds	r2, r3, #1
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	601a      	str	r2, [r3, #0]
}
 8009e2e:	bf00      	nop
 8009e30:	3714      	adds	r7, #20
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr

08009e3a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009e3a:	b480      	push	{r7}
 8009e3c:	b085      	sub	sp, #20
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	691b      	ldr	r3, [r3, #16]
 8009e46:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	6892      	ldr	r2, [r2, #8]
 8009e50:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	6852      	ldr	r2, [r2, #4]
 8009e5a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d103      	bne.n	8009e6e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	689a      	ldr	r2, [r3, #8]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	1e5a      	subs	r2, r3, #1
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3714      	adds	r7, #20
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr

08009e8e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b08e      	sub	sp, #56	; 0x38
 8009e92:	af04      	add	r7, sp, #16
 8009e94:	60f8      	str	r0, [r7, #12]
 8009e96:	60b9      	str	r1, [r7, #8]
 8009e98:	607a      	str	r2, [r7, #4]
 8009e9a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d10a      	bne.n	8009eb8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea6:	f383 8811 	msr	BASEPRI, r3
 8009eaa:	f3bf 8f6f 	isb	sy
 8009eae:	f3bf 8f4f 	dsb	sy
 8009eb2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009eb4:	bf00      	nop
 8009eb6:	e7fe      	b.n	8009eb6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d10a      	bne.n	8009ed4 <xTaskCreateStatic+0x46>
	__asm volatile
 8009ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec2:	f383 8811 	msr	BASEPRI, r3
 8009ec6:	f3bf 8f6f 	isb	sy
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	61fb      	str	r3, [r7, #28]
}
 8009ed0:	bf00      	nop
 8009ed2:	e7fe      	b.n	8009ed2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009ed4:	23b8      	movs	r3, #184	; 0xb8
 8009ed6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	2bb8      	cmp	r3, #184	; 0xb8
 8009edc:	d00a      	beq.n	8009ef4 <xTaskCreateStatic+0x66>
	__asm volatile
 8009ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee2:	f383 8811 	msr	BASEPRI, r3
 8009ee6:	f3bf 8f6f 	isb	sy
 8009eea:	f3bf 8f4f 	dsb	sy
 8009eee:	61bb      	str	r3, [r7, #24]
}
 8009ef0:	bf00      	nop
 8009ef2:	e7fe      	b.n	8009ef2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009ef4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d01e      	beq.n	8009f3a <xTaskCreateStatic+0xac>
 8009efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d01b      	beq.n	8009f3a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f04:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f0a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0e:	2202      	movs	r2, #2
 8009f10:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009f14:	2300      	movs	r3, #0
 8009f16:	9303      	str	r3, [sp, #12]
 8009f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1a:	9302      	str	r3, [sp, #8]
 8009f1c:	f107 0314 	add.w	r3, r7, #20
 8009f20:	9301      	str	r3, [sp, #4]
 8009f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f24:	9300      	str	r3, [sp, #0]
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	68b9      	ldr	r1, [r7, #8]
 8009f2c:	68f8      	ldr	r0, [r7, #12]
 8009f2e:	f000 f851 	bl	8009fd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f34:	f000 f8f8 	bl	800a128 <prvAddNewTaskToReadyList>
 8009f38:	e001      	b.n	8009f3e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009f3e:	697b      	ldr	r3, [r7, #20]
	}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3728      	adds	r7, #40	; 0x28
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b08c      	sub	sp, #48	; 0x30
 8009f4c:	af04      	add	r7, sp, #16
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	603b      	str	r3, [r7, #0]
 8009f54:	4613      	mov	r3, r2
 8009f56:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009f58:	88fb      	ldrh	r3, [r7, #6]
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f000 ff23 	bl	800ada8 <pvPortMalloc>
 8009f62:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d00e      	beq.n	8009f88 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009f6a:	20b8      	movs	r0, #184	; 0xb8
 8009f6c:	f000 ff1c 	bl	800ada8 <pvPortMalloc>
 8009f70:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009f72:	69fb      	ldr	r3, [r7, #28]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d003      	beq.n	8009f80 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009f78:	69fb      	ldr	r3, [r7, #28]
 8009f7a:	697a      	ldr	r2, [r7, #20]
 8009f7c:	631a      	str	r2, [r3, #48]	; 0x30
 8009f7e:	e005      	b.n	8009f8c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009f80:	6978      	ldr	r0, [r7, #20]
 8009f82:	f000 ffe1 	bl	800af48 <vPortFree>
 8009f86:	e001      	b.n	8009f8c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d017      	beq.n	8009fc2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009f92:	69fb      	ldr	r3, [r7, #28]
 8009f94:	2200      	movs	r2, #0
 8009f96:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009f9a:	88fa      	ldrh	r2, [r7, #6]
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	9303      	str	r3, [sp, #12]
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	9302      	str	r3, [sp, #8]
 8009fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa6:	9301      	str	r3, [sp, #4]
 8009fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009faa:	9300      	str	r3, [sp, #0]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	68b9      	ldr	r1, [r7, #8]
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	f000 f80f 	bl	8009fd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009fb6:	69f8      	ldr	r0, [r7, #28]
 8009fb8:	f000 f8b6 	bl	800a128 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	61bb      	str	r3, [r7, #24]
 8009fc0:	e002      	b.n	8009fc8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8009fc6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009fc8:	69bb      	ldr	r3, [r7, #24]
	}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3720      	adds	r7, #32
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
	...

08009fd4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b088      	sub	sp, #32
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	607a      	str	r2, [r7, #4]
 8009fe0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	461a      	mov	r2, r3
 8009fec:	21a5      	movs	r1, #165	; 0xa5
 8009fee:	f001 f9fa 	bl	800b3e6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	4413      	add	r3, r2
 800a002:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a004:	69bb      	ldr	r3, [r7, #24]
 800a006:	f023 0307 	bic.w	r3, r3, #7
 800a00a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	f003 0307 	and.w	r3, r3, #7
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00a      	beq.n	800a02c <prvInitialiseNewTask+0x58>
	__asm volatile
 800a016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01a:	f383 8811 	msr	BASEPRI, r3
 800a01e:	f3bf 8f6f 	isb	sy
 800a022:	f3bf 8f4f 	dsb	sy
 800a026:	617b      	str	r3, [r7, #20]
}
 800a028:	bf00      	nop
 800a02a:	e7fe      	b.n	800a02a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d01f      	beq.n	800a072 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a032:	2300      	movs	r3, #0
 800a034:	61fb      	str	r3, [r7, #28]
 800a036:	e012      	b.n	800a05e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a038:	68ba      	ldr	r2, [r7, #8]
 800a03a:	69fb      	ldr	r3, [r7, #28]
 800a03c:	4413      	add	r3, r2
 800a03e:	7819      	ldrb	r1, [r3, #0]
 800a040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	4413      	add	r3, r2
 800a046:	3334      	adds	r3, #52	; 0x34
 800a048:	460a      	mov	r2, r1
 800a04a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a04c:	68ba      	ldr	r2, [r7, #8]
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	4413      	add	r3, r2
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d006      	beq.n	800a066 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	3301      	adds	r3, #1
 800a05c:	61fb      	str	r3, [r7, #28]
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	2b0f      	cmp	r3, #15
 800a062:	d9e9      	bls.n	800a038 <prvInitialiseNewTask+0x64>
 800a064:	e000      	b.n	800a068 <prvInitialiseNewTask+0x94>
			{
				break;
 800a066:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06a:	2200      	movs	r2, #0
 800a06c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a070:	e003      	b.n	800a07a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a074:	2200      	movs	r2, #0
 800a076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07c:	2b06      	cmp	r3, #6
 800a07e:	d901      	bls.n	800a084 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a080:	2306      	movs	r3, #6
 800a082:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a088:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a08e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a092:	2200      	movs	r2, #0
 800a094:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a098:	3304      	adds	r3, #4
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7ff fe63 	bl	8009d66 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a2:	3318      	adds	r3, #24
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7ff fe5e 	bl	8009d66 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b2:	f1c3 0207 	rsb	r2, r3, #7
 800a0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800a0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d8:	3350      	adds	r3, #80	; 0x50
 800a0da:	2260      	movs	r2, #96	; 0x60
 800a0dc:	2100      	movs	r1, #0
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f001 f981 	bl	800b3e6 <memset>
 800a0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e6:	4a0d      	ldr	r2, [pc, #52]	; (800a11c <prvInitialiseNewTask+0x148>)
 800a0e8:	655a      	str	r2, [r3, #84]	; 0x54
 800a0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ec:	4a0c      	ldr	r2, [pc, #48]	; (800a120 <prvInitialiseNewTask+0x14c>)
 800a0ee:	659a      	str	r2, [r3, #88]	; 0x58
 800a0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f2:	4a0c      	ldr	r2, [pc, #48]	; (800a124 <prvInitialiseNewTask+0x150>)
 800a0f4:	65da      	str	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	68f9      	ldr	r1, [r7, #12]
 800a0fa:	69b8      	ldr	r0, [r7, #24]
 800a0fc:	f000 fc48 	bl	800a990 <pxPortInitialiseStack>
 800a100:	4602      	mov	r2, r0
 800a102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a104:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d002      	beq.n	800a112 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a110:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a112:	bf00      	nop
 800a114:	3720      	adds	r7, #32
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	08011720 	.word	0x08011720
 800a120:	08011740 	.word	0x08011740
 800a124:	08011700 	.word	0x08011700

0800a128 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a130:	f000 fd58 	bl	800abe4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a134:	4b2a      	ldr	r3, [pc, #168]	; (800a1e0 <prvAddNewTaskToReadyList+0xb8>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	3301      	adds	r3, #1
 800a13a:	4a29      	ldr	r2, [pc, #164]	; (800a1e0 <prvAddNewTaskToReadyList+0xb8>)
 800a13c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a13e:	4b29      	ldr	r3, [pc, #164]	; (800a1e4 <prvAddNewTaskToReadyList+0xbc>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d109      	bne.n	800a15a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a146:	4a27      	ldr	r2, [pc, #156]	; (800a1e4 <prvAddNewTaskToReadyList+0xbc>)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a14c:	4b24      	ldr	r3, [pc, #144]	; (800a1e0 <prvAddNewTaskToReadyList+0xb8>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	2b01      	cmp	r3, #1
 800a152:	d110      	bne.n	800a176 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a154:	f000 faf4 	bl	800a740 <prvInitialiseTaskLists>
 800a158:	e00d      	b.n	800a176 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a15a:	4b23      	ldr	r3, [pc, #140]	; (800a1e8 <prvAddNewTaskToReadyList+0xc0>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d109      	bne.n	800a176 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a162:	4b20      	ldr	r3, [pc, #128]	; (800a1e4 <prvAddNewTaskToReadyList+0xbc>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d802      	bhi.n	800a176 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a170:	4a1c      	ldr	r2, [pc, #112]	; (800a1e4 <prvAddNewTaskToReadyList+0xbc>)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a176:	4b1d      	ldr	r3, [pc, #116]	; (800a1ec <prvAddNewTaskToReadyList+0xc4>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	3301      	adds	r3, #1
 800a17c:	4a1b      	ldr	r2, [pc, #108]	; (800a1ec <prvAddNewTaskToReadyList+0xc4>)
 800a17e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a184:	2201      	movs	r2, #1
 800a186:	409a      	lsls	r2, r3
 800a188:	4b19      	ldr	r3, [pc, #100]	; (800a1f0 <prvAddNewTaskToReadyList+0xc8>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	4a18      	ldr	r2, [pc, #96]	; (800a1f0 <prvAddNewTaskToReadyList+0xc8>)
 800a190:	6013      	str	r3, [r2, #0]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a196:	4613      	mov	r3, r2
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	4413      	add	r3, r2
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	4a15      	ldr	r2, [pc, #84]	; (800a1f4 <prvAddNewTaskToReadyList+0xcc>)
 800a1a0:	441a      	add	r2, r3
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	3304      	adds	r3, #4
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	4610      	mov	r0, r2
 800a1aa:	f7ff fde9 	bl	8009d80 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a1ae:	f000 fd49 	bl	800ac44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a1b2:	4b0d      	ldr	r3, [pc, #52]	; (800a1e8 <prvAddNewTaskToReadyList+0xc0>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d00e      	beq.n	800a1d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a1ba:	4b0a      	ldr	r3, [pc, #40]	; (800a1e4 <prvAddNewTaskToReadyList+0xbc>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d207      	bcs.n	800a1d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a1c8:	4b0b      	ldr	r3, [pc, #44]	; (800a1f8 <prvAddNewTaskToReadyList+0xd0>)
 800a1ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1ce:	601a      	str	r2, [r3, #0]
 800a1d0:	f3bf 8f4f 	dsb	sy
 800a1d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1d8:	bf00      	nop
 800a1da:	3708      	adds	r7, #8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	20000c00 	.word	0x20000c00
 800a1e4:	20000b00 	.word	0x20000b00
 800a1e8:	20000c0c 	.word	0x20000c0c
 800a1ec:	20000c1c 	.word	0x20000c1c
 800a1f0:	20000c08 	.word	0x20000c08
 800a1f4:	20000b04 	.word	0x20000b04
 800a1f8:	e000ed04 	.word	0xe000ed04

0800a1fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a204:	2300      	movs	r3, #0
 800a206:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d017      	beq.n	800a23e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a20e:	4b13      	ldr	r3, [pc, #76]	; (800a25c <vTaskDelay+0x60>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00a      	beq.n	800a22c <vTaskDelay+0x30>
	__asm volatile
 800a216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21a:	f383 8811 	msr	BASEPRI, r3
 800a21e:	f3bf 8f6f 	isb	sy
 800a222:	f3bf 8f4f 	dsb	sy
 800a226:	60bb      	str	r3, [r7, #8]
}
 800a228:	bf00      	nop
 800a22a:	e7fe      	b.n	800a22a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a22c:	f000 f884 	bl	800a338 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a230:	2100      	movs	r1, #0
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 fb46 	bl	800a8c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a238:	f000 f88c 	bl	800a354 <xTaskResumeAll>
 800a23c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d107      	bne.n	800a254 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a244:	4b06      	ldr	r3, [pc, #24]	; (800a260 <vTaskDelay+0x64>)
 800a246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a24a:	601a      	str	r2, [r3, #0]
 800a24c:	f3bf 8f4f 	dsb	sy
 800a250:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a254:	bf00      	nop
 800a256:	3710      	adds	r7, #16
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	20000c28 	.word	0x20000c28
 800a260:	e000ed04 	.word	0xe000ed04

0800a264 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b08a      	sub	sp, #40	; 0x28
 800a268:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a26a:	2300      	movs	r3, #0
 800a26c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a26e:	2300      	movs	r3, #0
 800a270:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a272:	463a      	mov	r2, r7
 800a274:	1d39      	adds	r1, r7, #4
 800a276:	f107 0308 	add.w	r3, r7, #8
 800a27a:	4618      	mov	r0, r3
 800a27c:	f7f6 fee6 	bl	800104c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a280:	6839      	ldr	r1, [r7, #0]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	68ba      	ldr	r2, [r7, #8]
 800a286:	9202      	str	r2, [sp, #8]
 800a288:	9301      	str	r3, [sp, #4]
 800a28a:	2300      	movs	r3, #0
 800a28c:	9300      	str	r3, [sp, #0]
 800a28e:	2300      	movs	r3, #0
 800a290:	460a      	mov	r2, r1
 800a292:	4921      	ldr	r1, [pc, #132]	; (800a318 <vTaskStartScheduler+0xb4>)
 800a294:	4821      	ldr	r0, [pc, #132]	; (800a31c <vTaskStartScheduler+0xb8>)
 800a296:	f7ff fdfa 	bl	8009e8e <xTaskCreateStatic>
 800a29a:	4603      	mov	r3, r0
 800a29c:	4a20      	ldr	r2, [pc, #128]	; (800a320 <vTaskStartScheduler+0xbc>)
 800a29e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a2a0:	4b1f      	ldr	r3, [pc, #124]	; (800a320 <vTaskStartScheduler+0xbc>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d002      	beq.n	800a2ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	617b      	str	r3, [r7, #20]
 800a2ac:	e001      	b.n	800a2b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d11b      	bne.n	800a2f0 <vTaskStartScheduler+0x8c>
	__asm volatile
 800a2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2bc:	f383 8811 	msr	BASEPRI, r3
 800a2c0:	f3bf 8f6f 	isb	sy
 800a2c4:	f3bf 8f4f 	dsb	sy
 800a2c8:	613b      	str	r3, [r7, #16]
}
 800a2ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a2cc:	4b15      	ldr	r3, [pc, #84]	; (800a324 <vTaskStartScheduler+0xc0>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	3350      	adds	r3, #80	; 0x50
 800a2d2:	4a15      	ldr	r2, [pc, #84]	; (800a328 <vTaskStartScheduler+0xc4>)
 800a2d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a2d6:	4b15      	ldr	r3, [pc, #84]	; (800a32c <vTaskStartScheduler+0xc8>)
 800a2d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a2de:	4b14      	ldr	r3, [pc, #80]	; (800a330 <vTaskStartScheduler+0xcc>)
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a2e4:	4b13      	ldr	r3, [pc, #76]	; (800a334 <vTaskStartScheduler+0xd0>)
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a2ea:	f000 fbd9 	bl	800aaa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a2ee:	e00e      	b.n	800a30e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2f6:	d10a      	bne.n	800a30e <vTaskStartScheduler+0xaa>
	__asm volatile
 800a2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fc:	f383 8811 	msr	BASEPRI, r3
 800a300:	f3bf 8f6f 	isb	sy
 800a304:	f3bf 8f4f 	dsb	sy
 800a308:	60fb      	str	r3, [r7, #12]
}
 800a30a:	bf00      	nop
 800a30c:	e7fe      	b.n	800a30c <vTaskStartScheduler+0xa8>
}
 800a30e:	bf00      	nop
 800a310:	3718      	adds	r7, #24
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	0800fc20 	.word	0x0800fc20
 800a31c:	0800a70d 	.word	0x0800a70d
 800a320:	20000c24 	.word	0x20000c24
 800a324:	20000b00 	.word	0x20000b00
 800a328:	200000a8 	.word	0x200000a8
 800a32c:	20000c20 	.word	0x20000c20
 800a330:	20000c0c 	.word	0x20000c0c
 800a334:	20000c04 	.word	0x20000c04

0800a338 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a338:	b480      	push	{r7}
 800a33a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a33c:	4b04      	ldr	r3, [pc, #16]	; (800a350 <vTaskSuspendAll+0x18>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	3301      	adds	r3, #1
 800a342:	4a03      	ldr	r2, [pc, #12]	; (800a350 <vTaskSuspendAll+0x18>)
 800a344:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a346:	bf00      	nop
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr
 800a350:	20000c28 	.word	0x20000c28

0800a354 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a35a:	2300      	movs	r3, #0
 800a35c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a35e:	2300      	movs	r3, #0
 800a360:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a362:	4b41      	ldr	r3, [pc, #260]	; (800a468 <xTaskResumeAll+0x114>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d10a      	bne.n	800a380 <xTaskResumeAll+0x2c>
	__asm volatile
 800a36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36e:	f383 8811 	msr	BASEPRI, r3
 800a372:	f3bf 8f6f 	isb	sy
 800a376:	f3bf 8f4f 	dsb	sy
 800a37a:	603b      	str	r3, [r7, #0]
}
 800a37c:	bf00      	nop
 800a37e:	e7fe      	b.n	800a37e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a380:	f000 fc30 	bl	800abe4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a384:	4b38      	ldr	r3, [pc, #224]	; (800a468 <xTaskResumeAll+0x114>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	3b01      	subs	r3, #1
 800a38a:	4a37      	ldr	r2, [pc, #220]	; (800a468 <xTaskResumeAll+0x114>)
 800a38c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a38e:	4b36      	ldr	r3, [pc, #216]	; (800a468 <xTaskResumeAll+0x114>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d161      	bne.n	800a45a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a396:	4b35      	ldr	r3, [pc, #212]	; (800a46c <xTaskResumeAll+0x118>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d05d      	beq.n	800a45a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a39e:	e02e      	b.n	800a3fe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3a0:	4b33      	ldr	r3, [pc, #204]	; (800a470 <xTaskResumeAll+0x11c>)
 800a3a2:	68db      	ldr	r3, [r3, #12]
 800a3a4:	68db      	ldr	r3, [r3, #12]
 800a3a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	3318      	adds	r3, #24
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7ff fd44 	bl	8009e3a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	3304      	adds	r3, #4
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7ff fd3f 	bl	8009e3a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	409a      	lsls	r2, r3
 800a3c4:	4b2b      	ldr	r3, [pc, #172]	; (800a474 <xTaskResumeAll+0x120>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	4a2a      	ldr	r2, [pc, #168]	; (800a474 <xTaskResumeAll+0x120>)
 800a3cc:	6013      	str	r3, [r2, #0]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	4413      	add	r3, r2
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	4a27      	ldr	r2, [pc, #156]	; (800a478 <xTaskResumeAll+0x124>)
 800a3dc:	441a      	add	r2, r3
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	3304      	adds	r3, #4
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	4610      	mov	r0, r2
 800a3e6:	f7ff fccb 	bl	8009d80 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3ee:	4b23      	ldr	r3, [pc, #140]	; (800a47c <xTaskResumeAll+0x128>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d302      	bcc.n	800a3fe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a3f8:	4b21      	ldr	r3, [pc, #132]	; (800a480 <xTaskResumeAll+0x12c>)
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3fe:	4b1c      	ldr	r3, [pc, #112]	; (800a470 <xTaskResumeAll+0x11c>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d1cc      	bne.n	800a3a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d001      	beq.n	800a410 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a40c:	f000 fa3a 	bl	800a884 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a410:	4b1c      	ldr	r3, [pc, #112]	; (800a484 <xTaskResumeAll+0x130>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d010      	beq.n	800a43e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a41c:	f000 f836 	bl	800a48c <xTaskIncrementTick>
 800a420:	4603      	mov	r3, r0
 800a422:	2b00      	cmp	r3, #0
 800a424:	d002      	beq.n	800a42c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a426:	4b16      	ldr	r3, [pc, #88]	; (800a480 <xTaskResumeAll+0x12c>)
 800a428:	2201      	movs	r2, #1
 800a42a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	3b01      	subs	r3, #1
 800a430:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1f1      	bne.n	800a41c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a438:	4b12      	ldr	r3, [pc, #72]	; (800a484 <xTaskResumeAll+0x130>)
 800a43a:	2200      	movs	r2, #0
 800a43c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a43e:	4b10      	ldr	r3, [pc, #64]	; (800a480 <xTaskResumeAll+0x12c>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d009      	beq.n	800a45a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a446:	2301      	movs	r3, #1
 800a448:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a44a:	4b0f      	ldr	r3, [pc, #60]	; (800a488 <xTaskResumeAll+0x134>)
 800a44c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a450:	601a      	str	r2, [r3, #0]
 800a452:	f3bf 8f4f 	dsb	sy
 800a456:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a45a:	f000 fbf3 	bl	800ac44 <vPortExitCritical>

	return xAlreadyYielded;
 800a45e:	68bb      	ldr	r3, [r7, #8]
}
 800a460:	4618      	mov	r0, r3
 800a462:	3710      	adds	r7, #16
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	20000c28 	.word	0x20000c28
 800a46c:	20000c00 	.word	0x20000c00
 800a470:	20000bc0 	.word	0x20000bc0
 800a474:	20000c08 	.word	0x20000c08
 800a478:	20000b04 	.word	0x20000b04
 800a47c:	20000b00 	.word	0x20000b00
 800a480:	20000c14 	.word	0x20000c14
 800a484:	20000c10 	.word	0x20000c10
 800a488:	e000ed04 	.word	0xe000ed04

0800a48c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b086      	sub	sp, #24
 800a490:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a492:	2300      	movs	r3, #0
 800a494:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a496:	4b4e      	ldr	r3, [pc, #312]	; (800a5d0 <xTaskIncrementTick+0x144>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	f040 808e 	bne.w	800a5bc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a4a0:	4b4c      	ldr	r3, [pc, #304]	; (800a5d4 <xTaskIncrementTick+0x148>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a4a8:	4a4a      	ldr	r2, [pc, #296]	; (800a5d4 <xTaskIncrementTick+0x148>)
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d120      	bne.n	800a4f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a4b4:	4b48      	ldr	r3, [pc, #288]	; (800a5d8 <xTaskIncrementTick+0x14c>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00a      	beq.n	800a4d4 <xTaskIncrementTick+0x48>
	__asm volatile
 800a4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c2:	f383 8811 	msr	BASEPRI, r3
 800a4c6:	f3bf 8f6f 	isb	sy
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	603b      	str	r3, [r7, #0]
}
 800a4d0:	bf00      	nop
 800a4d2:	e7fe      	b.n	800a4d2 <xTaskIncrementTick+0x46>
 800a4d4:	4b40      	ldr	r3, [pc, #256]	; (800a5d8 <xTaskIncrementTick+0x14c>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	60fb      	str	r3, [r7, #12]
 800a4da:	4b40      	ldr	r3, [pc, #256]	; (800a5dc <xTaskIncrementTick+0x150>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	4a3e      	ldr	r2, [pc, #248]	; (800a5d8 <xTaskIncrementTick+0x14c>)
 800a4e0:	6013      	str	r3, [r2, #0]
 800a4e2:	4a3e      	ldr	r2, [pc, #248]	; (800a5dc <xTaskIncrementTick+0x150>)
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	6013      	str	r3, [r2, #0]
 800a4e8:	4b3d      	ldr	r3, [pc, #244]	; (800a5e0 <xTaskIncrementTick+0x154>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	4a3c      	ldr	r2, [pc, #240]	; (800a5e0 <xTaskIncrementTick+0x154>)
 800a4f0:	6013      	str	r3, [r2, #0]
 800a4f2:	f000 f9c7 	bl	800a884 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a4f6:	4b3b      	ldr	r3, [pc, #236]	; (800a5e4 <xTaskIncrementTick+0x158>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	693a      	ldr	r2, [r7, #16]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d348      	bcc.n	800a592 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a500:	4b35      	ldr	r3, [pc, #212]	; (800a5d8 <xTaskIncrementTick+0x14c>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d104      	bne.n	800a514 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a50a:	4b36      	ldr	r3, [pc, #216]	; (800a5e4 <xTaskIncrementTick+0x158>)
 800a50c:	f04f 32ff 	mov.w	r2, #4294967295
 800a510:	601a      	str	r2, [r3, #0]
					break;
 800a512:	e03e      	b.n	800a592 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a514:	4b30      	ldr	r3, [pc, #192]	; (800a5d8 <xTaskIncrementTick+0x14c>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a524:	693a      	ldr	r2, [r7, #16]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	429a      	cmp	r2, r3
 800a52a:	d203      	bcs.n	800a534 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a52c:	4a2d      	ldr	r2, [pc, #180]	; (800a5e4 <xTaskIncrementTick+0x158>)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a532:	e02e      	b.n	800a592 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	3304      	adds	r3, #4
 800a538:	4618      	mov	r0, r3
 800a53a:	f7ff fc7e 	bl	8009e3a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a542:	2b00      	cmp	r3, #0
 800a544:	d004      	beq.n	800a550 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	3318      	adds	r3, #24
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7ff fc75 	bl	8009e3a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a554:	2201      	movs	r2, #1
 800a556:	409a      	lsls	r2, r3
 800a558:	4b23      	ldr	r3, [pc, #140]	; (800a5e8 <xTaskIncrementTick+0x15c>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	4a22      	ldr	r2, [pc, #136]	; (800a5e8 <xTaskIncrementTick+0x15c>)
 800a560:	6013      	str	r3, [r2, #0]
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a566:	4613      	mov	r3, r2
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	4413      	add	r3, r2
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	4a1f      	ldr	r2, [pc, #124]	; (800a5ec <xTaskIncrementTick+0x160>)
 800a570:	441a      	add	r2, r3
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	3304      	adds	r3, #4
 800a576:	4619      	mov	r1, r3
 800a578:	4610      	mov	r0, r2
 800a57a:	f7ff fc01 	bl	8009d80 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a582:	4b1b      	ldr	r3, [pc, #108]	; (800a5f0 <xTaskIncrementTick+0x164>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a588:	429a      	cmp	r2, r3
 800a58a:	d3b9      	bcc.n	800a500 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a58c:	2301      	movs	r3, #1
 800a58e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a590:	e7b6      	b.n	800a500 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a592:	4b17      	ldr	r3, [pc, #92]	; (800a5f0 <xTaskIncrementTick+0x164>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a598:	4914      	ldr	r1, [pc, #80]	; (800a5ec <xTaskIncrementTick+0x160>)
 800a59a:	4613      	mov	r3, r2
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	4413      	add	r3, r2
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	440b      	add	r3, r1
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d901      	bls.n	800a5ae <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a5ae:	4b11      	ldr	r3, [pc, #68]	; (800a5f4 <xTaskIncrementTick+0x168>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d007      	beq.n	800a5c6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	617b      	str	r3, [r7, #20]
 800a5ba:	e004      	b.n	800a5c6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a5bc:	4b0e      	ldr	r3, [pc, #56]	; (800a5f8 <xTaskIncrementTick+0x16c>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	4a0d      	ldr	r2, [pc, #52]	; (800a5f8 <xTaskIncrementTick+0x16c>)
 800a5c4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a5c6:	697b      	ldr	r3, [r7, #20]
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3718      	adds	r7, #24
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}
 800a5d0:	20000c28 	.word	0x20000c28
 800a5d4:	20000c04 	.word	0x20000c04
 800a5d8:	20000bb8 	.word	0x20000bb8
 800a5dc:	20000bbc 	.word	0x20000bbc
 800a5e0:	20000c18 	.word	0x20000c18
 800a5e4:	20000c20 	.word	0x20000c20
 800a5e8:	20000c08 	.word	0x20000c08
 800a5ec:	20000b04 	.word	0x20000b04
 800a5f0:	20000b00 	.word	0x20000b00
 800a5f4:	20000c14 	.word	0x20000c14
 800a5f8:	20000c10 	.word	0x20000c10

0800a5fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b088      	sub	sp, #32
 800a600:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a602:	4b3c      	ldr	r3, [pc, #240]	; (800a6f4 <vTaskSwitchContext+0xf8>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d003      	beq.n	800a612 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a60a:	4b3b      	ldr	r3, [pc, #236]	; (800a6f8 <vTaskSwitchContext+0xfc>)
 800a60c:	2201      	movs	r2, #1
 800a60e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a610:	e06b      	b.n	800a6ea <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 800a612:	4b39      	ldr	r3, [pc, #228]	; (800a6f8 <vTaskSwitchContext+0xfc>)
 800a614:	2200      	movs	r2, #0
 800a616:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800a618:	4b38      	ldr	r3, [pc, #224]	; (800a6fc <vTaskSwitchContext+0x100>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a61e:	61fb      	str	r3, [r7, #28]
 800a620:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800a624:	61bb      	str	r3, [r7, #24]
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	69ba      	ldr	r2, [r7, #24]
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d111      	bne.n	800a654 <vTaskSwitchContext+0x58>
 800a630:	69fb      	ldr	r3, [r7, #28]
 800a632:	3304      	adds	r3, #4
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	69ba      	ldr	r2, [r7, #24]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d10b      	bne.n	800a654 <vTaskSwitchContext+0x58>
 800a63c:	69fb      	ldr	r3, [r7, #28]
 800a63e:	3308      	adds	r3, #8
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	69ba      	ldr	r2, [r7, #24]
 800a644:	429a      	cmp	r2, r3
 800a646:	d105      	bne.n	800a654 <vTaskSwitchContext+0x58>
 800a648:	69fb      	ldr	r3, [r7, #28]
 800a64a:	330c      	adds	r3, #12
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	69ba      	ldr	r2, [r7, #24]
 800a650:	429a      	cmp	r2, r3
 800a652:	d008      	beq.n	800a666 <vTaskSwitchContext+0x6a>
 800a654:	4b29      	ldr	r3, [pc, #164]	; (800a6fc <vTaskSwitchContext+0x100>)
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	4b28      	ldr	r3, [pc, #160]	; (800a6fc <vTaskSwitchContext+0x100>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	3334      	adds	r3, #52	; 0x34
 800a65e:	4619      	mov	r1, r3
 800a660:	4610      	mov	r0, r2
 800a662:	f7f6 fce0 	bl	8001026 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a666:	4b26      	ldr	r3, [pc, #152]	; (800a700 <vTaskSwitchContext+0x104>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	fab3 f383 	clz	r3, r3
 800a672:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a674:	7afb      	ldrb	r3, [r7, #11]
 800a676:	f1c3 031f 	rsb	r3, r3, #31
 800a67a:	617b      	str	r3, [r7, #20]
 800a67c:	4921      	ldr	r1, [pc, #132]	; (800a704 <vTaskSwitchContext+0x108>)
 800a67e:	697a      	ldr	r2, [r7, #20]
 800a680:	4613      	mov	r3, r2
 800a682:	009b      	lsls	r3, r3, #2
 800a684:	4413      	add	r3, r2
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	440b      	add	r3, r1
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d10a      	bne.n	800a6a6 <vTaskSwitchContext+0xaa>
	__asm volatile
 800a690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a694:	f383 8811 	msr	BASEPRI, r3
 800a698:	f3bf 8f6f 	isb	sy
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	607b      	str	r3, [r7, #4]
}
 800a6a2:	bf00      	nop
 800a6a4:	e7fe      	b.n	800a6a4 <vTaskSwitchContext+0xa8>
 800a6a6:	697a      	ldr	r2, [r7, #20]
 800a6a8:	4613      	mov	r3, r2
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	4413      	add	r3, r2
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	4a14      	ldr	r2, [pc, #80]	; (800a704 <vTaskSwitchContext+0x108>)
 800a6b2:	4413      	add	r3, r2
 800a6b4:	613b      	str	r3, [r7, #16]
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	685a      	ldr	r2, [r3, #4]
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	605a      	str	r2, [r3, #4]
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	685a      	ldr	r2, [r3, #4]
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	3308      	adds	r3, #8
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d104      	bne.n	800a6d6 <vTaskSwitchContext+0xda>
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	685a      	ldr	r2, [r3, #4]
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	605a      	str	r2, [r3, #4]
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	4a07      	ldr	r2, [pc, #28]	; (800a6fc <vTaskSwitchContext+0x100>)
 800a6de:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a6e0:	4b06      	ldr	r3, [pc, #24]	; (800a6fc <vTaskSwitchContext+0x100>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	3350      	adds	r3, #80	; 0x50
 800a6e6:	4a08      	ldr	r2, [pc, #32]	; (800a708 <vTaskSwitchContext+0x10c>)
 800a6e8:	6013      	str	r3, [r2, #0]
}
 800a6ea:	bf00      	nop
 800a6ec:	3720      	adds	r7, #32
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	20000c28 	.word	0x20000c28
 800a6f8:	20000c14 	.word	0x20000c14
 800a6fc:	20000b00 	.word	0x20000b00
 800a700:	20000c08 	.word	0x20000c08
 800a704:	20000b04 	.word	0x20000b04
 800a708:	200000a8 	.word	0x200000a8

0800a70c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a714:	f000 f854 	bl	800a7c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a718:	4b07      	ldr	r3, [pc, #28]	; (800a738 <prvIdleTask+0x2c>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d907      	bls.n	800a730 <prvIdleTask+0x24>
			{
				taskYIELD();
 800a720:	4b06      	ldr	r3, [pc, #24]	; (800a73c <prvIdleTask+0x30>)
 800a722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a726:	601a      	str	r2, [r3, #0]
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800a730:	f7f6 fc72 	bl	8001018 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800a734:	e7ee      	b.n	800a714 <prvIdleTask+0x8>
 800a736:	bf00      	nop
 800a738:	20000b04 	.word	0x20000b04
 800a73c:	e000ed04 	.word	0xe000ed04

0800a740 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a746:	2300      	movs	r3, #0
 800a748:	607b      	str	r3, [r7, #4]
 800a74a:	e00c      	b.n	800a766 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	4613      	mov	r3, r2
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	4413      	add	r3, r2
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	4a12      	ldr	r2, [pc, #72]	; (800a7a0 <prvInitialiseTaskLists+0x60>)
 800a758:	4413      	add	r3, r2
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7ff fae3 	bl	8009d26 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	3301      	adds	r3, #1
 800a764:	607b      	str	r3, [r7, #4]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2b06      	cmp	r3, #6
 800a76a:	d9ef      	bls.n	800a74c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a76c:	480d      	ldr	r0, [pc, #52]	; (800a7a4 <prvInitialiseTaskLists+0x64>)
 800a76e:	f7ff fada 	bl	8009d26 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a772:	480d      	ldr	r0, [pc, #52]	; (800a7a8 <prvInitialiseTaskLists+0x68>)
 800a774:	f7ff fad7 	bl	8009d26 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a778:	480c      	ldr	r0, [pc, #48]	; (800a7ac <prvInitialiseTaskLists+0x6c>)
 800a77a:	f7ff fad4 	bl	8009d26 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a77e:	480c      	ldr	r0, [pc, #48]	; (800a7b0 <prvInitialiseTaskLists+0x70>)
 800a780:	f7ff fad1 	bl	8009d26 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a784:	480b      	ldr	r0, [pc, #44]	; (800a7b4 <prvInitialiseTaskLists+0x74>)
 800a786:	f7ff face 	bl	8009d26 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a78a:	4b0b      	ldr	r3, [pc, #44]	; (800a7b8 <prvInitialiseTaskLists+0x78>)
 800a78c:	4a05      	ldr	r2, [pc, #20]	; (800a7a4 <prvInitialiseTaskLists+0x64>)
 800a78e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a790:	4b0a      	ldr	r3, [pc, #40]	; (800a7bc <prvInitialiseTaskLists+0x7c>)
 800a792:	4a05      	ldr	r2, [pc, #20]	; (800a7a8 <prvInitialiseTaskLists+0x68>)
 800a794:	601a      	str	r2, [r3, #0]
}
 800a796:	bf00      	nop
 800a798:	3708      	adds	r7, #8
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	20000b04 	.word	0x20000b04
 800a7a4:	20000b90 	.word	0x20000b90
 800a7a8:	20000ba4 	.word	0x20000ba4
 800a7ac:	20000bc0 	.word	0x20000bc0
 800a7b0:	20000bd4 	.word	0x20000bd4
 800a7b4:	20000bec 	.word	0x20000bec
 800a7b8:	20000bb8 	.word	0x20000bb8
 800a7bc:	20000bbc 	.word	0x20000bbc

0800a7c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b082      	sub	sp, #8
 800a7c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a7c6:	e019      	b.n	800a7fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a7c8:	f000 fa0c 	bl	800abe4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7cc:	4b10      	ldr	r3, [pc, #64]	; (800a810 <prvCheckTasksWaitingTermination+0x50>)
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	3304      	adds	r3, #4
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7ff fb2e 	bl	8009e3a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a7de:	4b0d      	ldr	r3, [pc, #52]	; (800a814 <prvCheckTasksWaitingTermination+0x54>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	3b01      	subs	r3, #1
 800a7e4:	4a0b      	ldr	r2, [pc, #44]	; (800a814 <prvCheckTasksWaitingTermination+0x54>)
 800a7e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a7e8:	4b0b      	ldr	r3, [pc, #44]	; (800a818 <prvCheckTasksWaitingTermination+0x58>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	3b01      	subs	r3, #1
 800a7ee:	4a0a      	ldr	r2, [pc, #40]	; (800a818 <prvCheckTasksWaitingTermination+0x58>)
 800a7f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a7f2:	f000 fa27 	bl	800ac44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 f810 	bl	800a81c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a7fc:	4b06      	ldr	r3, [pc, #24]	; (800a818 <prvCheckTasksWaitingTermination+0x58>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d1e1      	bne.n	800a7c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a804:	bf00      	nop
 800a806:	bf00      	nop
 800a808:	3708      	adds	r7, #8
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	20000bd4 	.word	0x20000bd4
 800a814:	20000c00 	.word	0x20000c00
 800a818:	20000be8 	.word	0x20000be8

0800a81c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	3350      	adds	r3, #80	; 0x50
 800a828:	4618      	mov	r0, r3
 800a82a:	f001 fd01 	bl	800c230 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800a834:	2b00      	cmp	r3, #0
 800a836:	d108      	bne.n	800a84a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a83c:	4618      	mov	r0, r3
 800a83e:	f000 fb83 	bl	800af48 <vPortFree>
				vPortFree( pxTCB );
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fb80 	bl	800af48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a848:	e018      	b.n	800a87c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800a850:	2b01      	cmp	r3, #1
 800a852:	d103      	bne.n	800a85c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 fb77 	bl	800af48 <vPortFree>
	}
 800a85a:	e00f      	b.n	800a87c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800a862:	2b02      	cmp	r3, #2
 800a864:	d00a      	beq.n	800a87c <prvDeleteTCB+0x60>
	__asm volatile
 800a866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86a:	f383 8811 	msr	BASEPRI, r3
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	f3bf 8f4f 	dsb	sy
 800a876:	60fb      	str	r3, [r7, #12]
}
 800a878:	bf00      	nop
 800a87a:	e7fe      	b.n	800a87a <prvDeleteTCB+0x5e>
	}
 800a87c:	bf00      	nop
 800a87e:	3710      	adds	r7, #16
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a88a:	4b0c      	ldr	r3, [pc, #48]	; (800a8bc <prvResetNextTaskUnblockTime+0x38>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d104      	bne.n	800a89e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a894:	4b0a      	ldr	r3, [pc, #40]	; (800a8c0 <prvResetNextTaskUnblockTime+0x3c>)
 800a896:	f04f 32ff 	mov.w	r2, #4294967295
 800a89a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a89c:	e008      	b.n	800a8b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a89e:	4b07      	ldr	r3, [pc, #28]	; (800a8bc <prvResetNextTaskUnblockTime+0x38>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	4a04      	ldr	r2, [pc, #16]	; (800a8c0 <prvResetNextTaskUnblockTime+0x3c>)
 800a8ae:	6013      	str	r3, [r2, #0]
}
 800a8b0:	bf00      	nop
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr
 800a8bc:	20000bb8 	.word	0x20000bb8
 800a8c0:	20000c20 	.word	0x20000c20

0800a8c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a8ce:	4b29      	ldr	r3, [pc, #164]	; (800a974 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8d4:	4b28      	ldr	r3, [pc, #160]	; (800a978 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	3304      	adds	r3, #4
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7ff faad 	bl	8009e3a <uxListRemove>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d10b      	bne.n	800a8fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a8e6:	4b24      	ldr	r3, [pc, #144]	; (800a978 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a8f2:	43da      	mvns	r2, r3
 800a8f4:	4b21      	ldr	r3, [pc, #132]	; (800a97c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4013      	ands	r3, r2
 800a8fa:	4a20      	ldr	r2, [pc, #128]	; (800a97c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a8fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a904:	d10a      	bne.n	800a91c <prvAddCurrentTaskToDelayedList+0x58>
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d007      	beq.n	800a91c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a90c:	4b1a      	ldr	r3, [pc, #104]	; (800a978 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	3304      	adds	r3, #4
 800a912:	4619      	mov	r1, r3
 800a914:	481a      	ldr	r0, [pc, #104]	; (800a980 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a916:	f7ff fa33 	bl	8009d80 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a91a:	e026      	b.n	800a96a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a91c:	68fa      	ldr	r2, [r7, #12]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4413      	add	r3, r2
 800a922:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a924:	4b14      	ldr	r3, [pc, #80]	; (800a978 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	68ba      	ldr	r2, [r7, #8]
 800a92a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a92c:	68ba      	ldr	r2, [r7, #8]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	429a      	cmp	r2, r3
 800a932:	d209      	bcs.n	800a948 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a934:	4b13      	ldr	r3, [pc, #76]	; (800a984 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	4b0f      	ldr	r3, [pc, #60]	; (800a978 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	3304      	adds	r3, #4
 800a93e:	4619      	mov	r1, r3
 800a940:	4610      	mov	r0, r2
 800a942:	f7ff fa41 	bl	8009dc8 <vListInsert>
}
 800a946:	e010      	b.n	800a96a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a948:	4b0f      	ldr	r3, [pc, #60]	; (800a988 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	4b0a      	ldr	r3, [pc, #40]	; (800a978 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	3304      	adds	r3, #4
 800a952:	4619      	mov	r1, r3
 800a954:	4610      	mov	r0, r2
 800a956:	f7ff fa37 	bl	8009dc8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a95a:	4b0c      	ldr	r3, [pc, #48]	; (800a98c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	68ba      	ldr	r2, [r7, #8]
 800a960:	429a      	cmp	r2, r3
 800a962:	d202      	bcs.n	800a96a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a964:	4a09      	ldr	r2, [pc, #36]	; (800a98c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	6013      	str	r3, [r2, #0]
}
 800a96a:	bf00      	nop
 800a96c:	3710      	adds	r7, #16
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	20000c04 	.word	0x20000c04
 800a978:	20000b00 	.word	0x20000b00
 800a97c:	20000c08 	.word	0x20000c08
 800a980:	20000bec 	.word	0x20000bec
 800a984:	20000bbc 	.word	0x20000bbc
 800a988:	20000bb8 	.word	0x20000bb8
 800a98c:	20000c20 	.word	0x20000c20

0800a990 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a990:	b480      	push	{r7}
 800a992:	b085      	sub	sp, #20
 800a994:	af00      	add	r7, sp, #0
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	60b9      	str	r1, [r7, #8]
 800a99a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	3b04      	subs	r3, #4
 800a9a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a9a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	3b04      	subs	r3, #4
 800a9ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	f023 0201 	bic.w	r2, r3, #1
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	3b04      	subs	r3, #4
 800a9be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a9c0:	4a0c      	ldr	r2, [pc, #48]	; (800a9f4 <pxPortInitialiseStack+0x64>)
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	3b14      	subs	r3, #20
 800a9ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	3b04      	subs	r3, #4
 800a9d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f06f 0202 	mvn.w	r2, #2
 800a9de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	3b20      	subs	r3, #32
 800a9e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3714      	adds	r7, #20
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr
 800a9f4:	0800a9f9 	.word	0x0800a9f9

0800a9f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b085      	sub	sp, #20
 800a9fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aa02:	4b12      	ldr	r3, [pc, #72]	; (800aa4c <prvTaskExitError+0x54>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa0a:	d00a      	beq.n	800aa22 <prvTaskExitError+0x2a>
	__asm volatile
 800aa0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa10:	f383 8811 	msr	BASEPRI, r3
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	60fb      	str	r3, [r7, #12]
}
 800aa1e:	bf00      	nop
 800aa20:	e7fe      	b.n	800aa20 <prvTaskExitError+0x28>
	__asm volatile
 800aa22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa26:	f383 8811 	msr	BASEPRI, r3
 800aa2a:	f3bf 8f6f 	isb	sy
 800aa2e:	f3bf 8f4f 	dsb	sy
 800aa32:	60bb      	str	r3, [r7, #8]
}
 800aa34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aa36:	bf00      	nop
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d0fc      	beq.n	800aa38 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aa3e:	bf00      	nop
 800aa40:	bf00      	nop
 800aa42:	3714      	adds	r7, #20
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr
 800aa4c:	200000a4 	.word	0x200000a4

0800aa50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aa50:	4b07      	ldr	r3, [pc, #28]	; (800aa70 <pxCurrentTCBConst2>)
 800aa52:	6819      	ldr	r1, [r3, #0]
 800aa54:	6808      	ldr	r0, [r1, #0]
 800aa56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa5a:	f380 8809 	msr	PSP, r0
 800aa5e:	f3bf 8f6f 	isb	sy
 800aa62:	f04f 0000 	mov.w	r0, #0
 800aa66:	f380 8811 	msr	BASEPRI, r0
 800aa6a:	4770      	bx	lr
 800aa6c:	f3af 8000 	nop.w

0800aa70 <pxCurrentTCBConst2>:
 800aa70:	20000b00 	.word	0x20000b00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa74:	bf00      	nop
 800aa76:	bf00      	nop

0800aa78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aa78:	4808      	ldr	r0, [pc, #32]	; (800aa9c <prvPortStartFirstTask+0x24>)
 800aa7a:	6800      	ldr	r0, [r0, #0]
 800aa7c:	6800      	ldr	r0, [r0, #0]
 800aa7e:	f380 8808 	msr	MSP, r0
 800aa82:	f04f 0000 	mov.w	r0, #0
 800aa86:	f380 8814 	msr	CONTROL, r0
 800aa8a:	b662      	cpsie	i
 800aa8c:	b661      	cpsie	f
 800aa8e:	f3bf 8f4f 	dsb	sy
 800aa92:	f3bf 8f6f 	isb	sy
 800aa96:	df00      	svc	0
 800aa98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aa9a:	bf00      	nop
 800aa9c:	e000ed08 	.word	0xe000ed08

0800aaa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b086      	sub	sp, #24
 800aaa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aaa6:	4b46      	ldr	r3, [pc, #280]	; (800abc0 <xPortStartScheduler+0x120>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a46      	ldr	r2, [pc, #280]	; (800abc4 <xPortStartScheduler+0x124>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d10a      	bne.n	800aac6 <xPortStartScheduler+0x26>
	__asm volatile
 800aab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab4:	f383 8811 	msr	BASEPRI, r3
 800aab8:	f3bf 8f6f 	isb	sy
 800aabc:	f3bf 8f4f 	dsb	sy
 800aac0:	613b      	str	r3, [r7, #16]
}
 800aac2:	bf00      	nop
 800aac4:	e7fe      	b.n	800aac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aac6:	4b3e      	ldr	r3, [pc, #248]	; (800abc0 <xPortStartScheduler+0x120>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a3f      	ldr	r2, [pc, #252]	; (800abc8 <xPortStartScheduler+0x128>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d10a      	bne.n	800aae6 <xPortStartScheduler+0x46>
	__asm volatile
 800aad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad4:	f383 8811 	msr	BASEPRI, r3
 800aad8:	f3bf 8f6f 	isb	sy
 800aadc:	f3bf 8f4f 	dsb	sy
 800aae0:	60fb      	str	r3, [r7, #12]
}
 800aae2:	bf00      	nop
 800aae4:	e7fe      	b.n	800aae4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aae6:	4b39      	ldr	r3, [pc, #228]	; (800abcc <xPortStartScheduler+0x12c>)
 800aae8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	22ff      	movs	r2, #255	; 0xff
 800aaf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ab00:	78fb      	ldrb	r3, [r7, #3]
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ab08:	b2da      	uxtb	r2, r3
 800ab0a:	4b31      	ldr	r3, [pc, #196]	; (800abd0 <xPortStartScheduler+0x130>)
 800ab0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ab0e:	4b31      	ldr	r3, [pc, #196]	; (800abd4 <xPortStartScheduler+0x134>)
 800ab10:	2207      	movs	r2, #7
 800ab12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab14:	e009      	b.n	800ab2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ab16:	4b2f      	ldr	r3, [pc, #188]	; (800abd4 <xPortStartScheduler+0x134>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	4a2d      	ldr	r2, [pc, #180]	; (800abd4 <xPortStartScheduler+0x134>)
 800ab1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ab20:	78fb      	ldrb	r3, [r7, #3]
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	005b      	lsls	r3, r3, #1
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab2a:	78fb      	ldrb	r3, [r7, #3]
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab32:	2b80      	cmp	r3, #128	; 0x80
 800ab34:	d0ef      	beq.n	800ab16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ab36:	4b27      	ldr	r3, [pc, #156]	; (800abd4 <xPortStartScheduler+0x134>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f1c3 0307 	rsb	r3, r3, #7
 800ab3e:	2b04      	cmp	r3, #4
 800ab40:	d00a      	beq.n	800ab58 <xPortStartScheduler+0xb8>
	__asm volatile
 800ab42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab46:	f383 8811 	msr	BASEPRI, r3
 800ab4a:	f3bf 8f6f 	isb	sy
 800ab4e:	f3bf 8f4f 	dsb	sy
 800ab52:	60bb      	str	r3, [r7, #8]
}
 800ab54:	bf00      	nop
 800ab56:	e7fe      	b.n	800ab56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ab58:	4b1e      	ldr	r3, [pc, #120]	; (800abd4 <xPortStartScheduler+0x134>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	021b      	lsls	r3, r3, #8
 800ab5e:	4a1d      	ldr	r2, [pc, #116]	; (800abd4 <xPortStartScheduler+0x134>)
 800ab60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ab62:	4b1c      	ldr	r3, [pc, #112]	; (800abd4 <xPortStartScheduler+0x134>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab6a:	4a1a      	ldr	r2, [pc, #104]	; (800abd4 <xPortStartScheduler+0x134>)
 800ab6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	b2da      	uxtb	r2, r3
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab76:	4b18      	ldr	r3, [pc, #96]	; (800abd8 <xPortStartScheduler+0x138>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a17      	ldr	r2, [pc, #92]	; (800abd8 <xPortStartScheduler+0x138>)
 800ab7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab82:	4b15      	ldr	r3, [pc, #84]	; (800abd8 <xPortStartScheduler+0x138>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4a14      	ldr	r2, [pc, #80]	; (800abd8 <xPortStartScheduler+0x138>)
 800ab88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ab8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab8e:	f000 f8dd 	bl	800ad4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ab92:	4b12      	ldr	r3, [pc, #72]	; (800abdc <xPortStartScheduler+0x13c>)
 800ab94:	2200      	movs	r2, #0
 800ab96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ab98:	f000 f8fc 	bl	800ad94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab9c:	4b10      	ldr	r3, [pc, #64]	; (800abe0 <xPortStartScheduler+0x140>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a0f      	ldr	r2, [pc, #60]	; (800abe0 <xPortStartScheduler+0x140>)
 800aba2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aba6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aba8:	f7ff ff66 	bl	800aa78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800abac:	f7ff fd26 	bl	800a5fc <vTaskSwitchContext>
	prvTaskExitError();
 800abb0:	f7ff ff22 	bl	800a9f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3718      	adds	r7, #24
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	e000ed00 	.word	0xe000ed00
 800abc4:	410fc271 	.word	0x410fc271
 800abc8:	410fc270 	.word	0x410fc270
 800abcc:	e000e400 	.word	0xe000e400
 800abd0:	20000c2c 	.word	0x20000c2c
 800abd4:	20000c30 	.word	0x20000c30
 800abd8:	e000ed20 	.word	0xe000ed20
 800abdc:	200000a4 	.word	0x200000a4
 800abe0:	e000ef34 	.word	0xe000ef34

0800abe4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
	__asm volatile
 800abea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abee:	f383 8811 	msr	BASEPRI, r3
 800abf2:	f3bf 8f6f 	isb	sy
 800abf6:	f3bf 8f4f 	dsb	sy
 800abfa:	607b      	str	r3, [r7, #4]
}
 800abfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800abfe:	4b0f      	ldr	r3, [pc, #60]	; (800ac3c <vPortEnterCritical+0x58>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	3301      	adds	r3, #1
 800ac04:	4a0d      	ldr	r2, [pc, #52]	; (800ac3c <vPortEnterCritical+0x58>)
 800ac06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ac08:	4b0c      	ldr	r3, [pc, #48]	; (800ac3c <vPortEnterCritical+0x58>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d10f      	bne.n	800ac30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ac10:	4b0b      	ldr	r3, [pc, #44]	; (800ac40 <vPortEnterCritical+0x5c>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00a      	beq.n	800ac30 <vPortEnterCritical+0x4c>
	__asm volatile
 800ac1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac1e:	f383 8811 	msr	BASEPRI, r3
 800ac22:	f3bf 8f6f 	isb	sy
 800ac26:	f3bf 8f4f 	dsb	sy
 800ac2a:	603b      	str	r3, [r7, #0]
}
 800ac2c:	bf00      	nop
 800ac2e:	e7fe      	b.n	800ac2e <vPortEnterCritical+0x4a>
	}
}
 800ac30:	bf00      	nop
 800ac32:	370c      	adds	r7, #12
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr
 800ac3c:	200000a4 	.word	0x200000a4
 800ac40:	e000ed04 	.word	0xe000ed04

0800ac44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ac4a:	4b12      	ldr	r3, [pc, #72]	; (800ac94 <vPortExitCritical+0x50>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d10a      	bne.n	800ac68 <vPortExitCritical+0x24>
	__asm volatile
 800ac52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac56:	f383 8811 	msr	BASEPRI, r3
 800ac5a:	f3bf 8f6f 	isb	sy
 800ac5e:	f3bf 8f4f 	dsb	sy
 800ac62:	607b      	str	r3, [r7, #4]
}
 800ac64:	bf00      	nop
 800ac66:	e7fe      	b.n	800ac66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ac68:	4b0a      	ldr	r3, [pc, #40]	; (800ac94 <vPortExitCritical+0x50>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	3b01      	subs	r3, #1
 800ac6e:	4a09      	ldr	r2, [pc, #36]	; (800ac94 <vPortExitCritical+0x50>)
 800ac70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ac72:	4b08      	ldr	r3, [pc, #32]	; (800ac94 <vPortExitCritical+0x50>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d105      	bne.n	800ac86 <vPortExitCritical+0x42>
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ac84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac86:	bf00      	nop
 800ac88:	370c      	adds	r7, #12
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr
 800ac92:	bf00      	nop
 800ac94:	200000a4 	.word	0x200000a4
	...

0800aca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aca0:	f3ef 8009 	mrs	r0, PSP
 800aca4:	f3bf 8f6f 	isb	sy
 800aca8:	4b15      	ldr	r3, [pc, #84]	; (800ad00 <pxCurrentTCBConst>)
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	f01e 0f10 	tst.w	lr, #16
 800acb0:	bf08      	it	eq
 800acb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800acb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acba:	6010      	str	r0, [r2, #0]
 800acbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800acc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800acc4:	f380 8811 	msr	BASEPRI, r0
 800acc8:	f3bf 8f4f 	dsb	sy
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	f7ff fc94 	bl	800a5fc <vTaskSwitchContext>
 800acd4:	f04f 0000 	mov.w	r0, #0
 800acd8:	f380 8811 	msr	BASEPRI, r0
 800acdc:	bc09      	pop	{r0, r3}
 800acde:	6819      	ldr	r1, [r3, #0]
 800ace0:	6808      	ldr	r0, [r1, #0]
 800ace2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace6:	f01e 0f10 	tst.w	lr, #16
 800acea:	bf08      	it	eq
 800acec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800acf0:	f380 8809 	msr	PSP, r0
 800acf4:	f3bf 8f6f 	isb	sy
 800acf8:	4770      	bx	lr
 800acfa:	bf00      	nop
 800acfc:	f3af 8000 	nop.w

0800ad00 <pxCurrentTCBConst>:
 800ad00:	20000b00 	.word	0x20000b00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ad04:	bf00      	nop
 800ad06:	bf00      	nop

0800ad08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
	__asm volatile
 800ad0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad12:	f383 8811 	msr	BASEPRI, r3
 800ad16:	f3bf 8f6f 	isb	sy
 800ad1a:	f3bf 8f4f 	dsb	sy
 800ad1e:	607b      	str	r3, [r7, #4]
}
 800ad20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ad22:	f7ff fbb3 	bl	800a48c <xTaskIncrementTick>
 800ad26:	4603      	mov	r3, r0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d003      	beq.n	800ad34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ad2c:	4b06      	ldr	r3, [pc, #24]	; (800ad48 <SysTick_Handler+0x40>)
 800ad2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad32:	601a      	str	r2, [r3, #0]
 800ad34:	2300      	movs	r3, #0
 800ad36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	f383 8811 	msr	BASEPRI, r3
}
 800ad3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ad40:	bf00      	nop
 800ad42:	3708      	adds	r7, #8
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	e000ed04 	.word	0xe000ed04

0800ad4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ad50:	4b0b      	ldr	r3, [pc, #44]	; (800ad80 <vPortSetupTimerInterrupt+0x34>)
 800ad52:	2200      	movs	r2, #0
 800ad54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ad56:	4b0b      	ldr	r3, [pc, #44]	; (800ad84 <vPortSetupTimerInterrupt+0x38>)
 800ad58:	2200      	movs	r2, #0
 800ad5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ad5c:	4b0a      	ldr	r3, [pc, #40]	; (800ad88 <vPortSetupTimerInterrupt+0x3c>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a0a      	ldr	r2, [pc, #40]	; (800ad8c <vPortSetupTimerInterrupt+0x40>)
 800ad62:	fba2 2303 	umull	r2, r3, r2, r3
 800ad66:	099b      	lsrs	r3, r3, #6
 800ad68:	4a09      	ldr	r2, [pc, #36]	; (800ad90 <vPortSetupTimerInterrupt+0x44>)
 800ad6a:	3b01      	subs	r3, #1
 800ad6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ad6e:	4b04      	ldr	r3, [pc, #16]	; (800ad80 <vPortSetupTimerInterrupt+0x34>)
 800ad70:	2207      	movs	r2, #7
 800ad72:	601a      	str	r2, [r3, #0]
}
 800ad74:	bf00      	nop
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr
 800ad7e:	bf00      	nop
 800ad80:	e000e010 	.word	0xe000e010
 800ad84:	e000e018 	.word	0xe000e018
 800ad88:	20000020 	.word	0x20000020
 800ad8c:	10624dd3 	.word	0x10624dd3
 800ad90:	e000e014 	.word	0xe000e014

0800ad94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ada4 <vPortEnableVFP+0x10>
 800ad98:	6801      	ldr	r1, [r0, #0]
 800ad9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ad9e:	6001      	str	r1, [r0, #0]
 800ada0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ada2:	bf00      	nop
 800ada4:	e000ed88 	.word	0xe000ed88

0800ada8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b08a      	sub	sp, #40	; 0x28
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800adb0:	2300      	movs	r3, #0
 800adb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800adb4:	f7ff fac0 	bl	800a338 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800adb8:	4b5d      	ldr	r3, [pc, #372]	; (800af30 <pvPortMalloc+0x188>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d101      	bne.n	800adc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800adc0:	f000 f924 	bl	800b00c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800adc4:	4b5b      	ldr	r3, [pc, #364]	; (800af34 <pvPortMalloc+0x18c>)
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	4013      	ands	r3, r2
 800adcc:	2b00      	cmp	r3, #0
 800adce:	f040 8093 	bne.w	800aef8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d01d      	beq.n	800ae14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800add8:	2208      	movs	r2, #8
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	4413      	add	r3, r2
 800adde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f003 0307 	and.w	r3, r3, #7
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d014      	beq.n	800ae14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f023 0307 	bic.w	r3, r3, #7
 800adf0:	3308      	adds	r3, #8
 800adf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f003 0307 	and.w	r3, r3, #7
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00a      	beq.n	800ae14 <pvPortMalloc+0x6c>
	__asm volatile
 800adfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae02:	f383 8811 	msr	BASEPRI, r3
 800ae06:	f3bf 8f6f 	isb	sy
 800ae0a:	f3bf 8f4f 	dsb	sy
 800ae0e:	617b      	str	r3, [r7, #20]
}
 800ae10:	bf00      	nop
 800ae12:	e7fe      	b.n	800ae12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d06e      	beq.n	800aef8 <pvPortMalloc+0x150>
 800ae1a:	4b47      	ldr	r3, [pc, #284]	; (800af38 <pvPortMalloc+0x190>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d869      	bhi.n	800aef8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ae24:	4b45      	ldr	r3, [pc, #276]	; (800af3c <pvPortMalloc+0x194>)
 800ae26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ae28:	4b44      	ldr	r3, [pc, #272]	; (800af3c <pvPortMalloc+0x194>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae2e:	e004      	b.n	800ae3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ae30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ae34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d903      	bls.n	800ae4c <pvPortMalloc+0xa4>
 800ae44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d1f1      	bne.n	800ae30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ae4c:	4b38      	ldr	r3, [pc, #224]	; (800af30 <pvPortMalloc+0x188>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d050      	beq.n	800aef8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ae56:	6a3b      	ldr	r3, [r7, #32]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	2208      	movs	r2, #8
 800ae5c:	4413      	add	r3, r2
 800ae5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ae60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	6a3b      	ldr	r3, [r7, #32]
 800ae66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ae68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae6a:	685a      	ldr	r2, [r3, #4]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	1ad2      	subs	r2, r2, r3
 800ae70:	2308      	movs	r3, #8
 800ae72:	005b      	lsls	r3, r3, #1
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d91f      	bls.n	800aeb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ae78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4413      	add	r3, r2
 800ae7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae80:	69bb      	ldr	r3, [r7, #24]
 800ae82:	f003 0307 	and.w	r3, r3, #7
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d00a      	beq.n	800aea0 <pvPortMalloc+0xf8>
	__asm volatile
 800ae8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae8e:	f383 8811 	msr	BASEPRI, r3
 800ae92:	f3bf 8f6f 	isb	sy
 800ae96:	f3bf 8f4f 	dsb	sy
 800ae9a:	613b      	str	r3, [r7, #16]
}
 800ae9c:	bf00      	nop
 800ae9e:	e7fe      	b.n	800ae9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea2:	685a      	ldr	r2, [r3, #4]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	1ad2      	subs	r2, r2, r3
 800aea8:	69bb      	ldr	r3, [r7, #24]
 800aeaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aeac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aeb2:	69b8      	ldr	r0, [r7, #24]
 800aeb4:	f000 f90c 	bl	800b0d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aeb8:	4b1f      	ldr	r3, [pc, #124]	; (800af38 <pvPortMalloc+0x190>)
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	1ad3      	subs	r3, r2, r3
 800aec2:	4a1d      	ldr	r2, [pc, #116]	; (800af38 <pvPortMalloc+0x190>)
 800aec4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aec6:	4b1c      	ldr	r3, [pc, #112]	; (800af38 <pvPortMalloc+0x190>)
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	4b1d      	ldr	r3, [pc, #116]	; (800af40 <pvPortMalloc+0x198>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	429a      	cmp	r2, r3
 800aed0:	d203      	bcs.n	800aeda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aed2:	4b19      	ldr	r3, [pc, #100]	; (800af38 <pvPortMalloc+0x190>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a1a      	ldr	r2, [pc, #104]	; (800af40 <pvPortMalloc+0x198>)
 800aed8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aeda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aedc:	685a      	ldr	r2, [r3, #4]
 800aede:	4b15      	ldr	r3, [pc, #84]	; (800af34 <pvPortMalloc+0x18c>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	431a      	orrs	r2, r3
 800aee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeea:	2200      	movs	r2, #0
 800aeec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aeee:	4b15      	ldr	r3, [pc, #84]	; (800af44 <pvPortMalloc+0x19c>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	3301      	adds	r3, #1
 800aef4:	4a13      	ldr	r2, [pc, #76]	; (800af44 <pvPortMalloc+0x19c>)
 800aef6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aef8:	f7ff fa2c 	bl	800a354 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800aefc:	69fb      	ldr	r3, [r7, #28]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d101      	bne.n	800af06 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800af02:	f7f6 f89b 	bl	800103c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	f003 0307 	and.w	r3, r3, #7
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d00a      	beq.n	800af26 <pvPortMalloc+0x17e>
	__asm volatile
 800af10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af14:	f383 8811 	msr	BASEPRI, r3
 800af18:	f3bf 8f6f 	isb	sy
 800af1c:	f3bf 8f4f 	dsb	sy
 800af20:	60fb      	str	r3, [r7, #12]
}
 800af22:	bf00      	nop
 800af24:	e7fe      	b.n	800af24 <pvPortMalloc+0x17c>
	return pvReturn;
 800af26:	69fb      	ldr	r3, [r7, #28]
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3728      	adds	r7, #40	; 0x28
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}
 800af30:	20008c3c 	.word	0x20008c3c
 800af34:	20008c50 	.word	0x20008c50
 800af38:	20008c40 	.word	0x20008c40
 800af3c:	20008c34 	.word	0x20008c34
 800af40:	20008c44 	.word	0x20008c44
 800af44:	20008c48 	.word	0x20008c48

0800af48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b086      	sub	sp, #24
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d04d      	beq.n	800aff6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800af5a:	2308      	movs	r3, #8
 800af5c:	425b      	negs	r3, r3
 800af5e:	697a      	ldr	r2, [r7, #20]
 800af60:	4413      	add	r3, r2
 800af62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	685a      	ldr	r2, [r3, #4]
 800af6c:	4b24      	ldr	r3, [pc, #144]	; (800b000 <vPortFree+0xb8>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4013      	ands	r3, r2
 800af72:	2b00      	cmp	r3, #0
 800af74:	d10a      	bne.n	800af8c <vPortFree+0x44>
	__asm volatile
 800af76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7a:	f383 8811 	msr	BASEPRI, r3
 800af7e:	f3bf 8f6f 	isb	sy
 800af82:	f3bf 8f4f 	dsb	sy
 800af86:	60fb      	str	r3, [r7, #12]
}
 800af88:	bf00      	nop
 800af8a:	e7fe      	b.n	800af8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d00a      	beq.n	800afaa <vPortFree+0x62>
	__asm volatile
 800af94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af98:	f383 8811 	msr	BASEPRI, r3
 800af9c:	f3bf 8f6f 	isb	sy
 800afa0:	f3bf 8f4f 	dsb	sy
 800afa4:	60bb      	str	r3, [r7, #8]
}
 800afa6:	bf00      	nop
 800afa8:	e7fe      	b.n	800afa8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	685a      	ldr	r2, [r3, #4]
 800afae:	4b14      	ldr	r3, [pc, #80]	; (800b000 <vPortFree+0xb8>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4013      	ands	r3, r2
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d01e      	beq.n	800aff6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d11a      	bne.n	800aff6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	685a      	ldr	r2, [r3, #4]
 800afc4:	4b0e      	ldr	r3, [pc, #56]	; (800b000 <vPortFree+0xb8>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	43db      	mvns	r3, r3
 800afca:	401a      	ands	r2, r3
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800afd0:	f7ff f9b2 	bl	800a338 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	685a      	ldr	r2, [r3, #4]
 800afd8:	4b0a      	ldr	r3, [pc, #40]	; (800b004 <vPortFree+0xbc>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4413      	add	r3, r2
 800afde:	4a09      	ldr	r2, [pc, #36]	; (800b004 <vPortFree+0xbc>)
 800afe0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800afe2:	6938      	ldr	r0, [r7, #16]
 800afe4:	f000 f874 	bl	800b0d0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800afe8:	4b07      	ldr	r3, [pc, #28]	; (800b008 <vPortFree+0xc0>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	3301      	adds	r3, #1
 800afee:	4a06      	ldr	r2, [pc, #24]	; (800b008 <vPortFree+0xc0>)
 800aff0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aff2:	f7ff f9af 	bl	800a354 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aff6:	bf00      	nop
 800aff8:	3718      	adds	r7, #24
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	20008c50 	.word	0x20008c50
 800b004:	20008c40 	.word	0x20008c40
 800b008:	20008c4c 	.word	0x20008c4c

0800b00c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b00c:	b480      	push	{r7}
 800b00e:	b085      	sub	sp, #20
 800b010:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b016:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b018:	4b27      	ldr	r3, [pc, #156]	; (800b0b8 <prvHeapInit+0xac>)
 800b01a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f003 0307 	and.w	r3, r3, #7
 800b022:	2b00      	cmp	r3, #0
 800b024:	d00c      	beq.n	800b040 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	3307      	adds	r3, #7
 800b02a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f023 0307 	bic.w	r3, r3, #7
 800b032:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b034:	68ba      	ldr	r2, [r7, #8]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	1ad3      	subs	r3, r2, r3
 800b03a:	4a1f      	ldr	r2, [pc, #124]	; (800b0b8 <prvHeapInit+0xac>)
 800b03c:	4413      	add	r3, r2
 800b03e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b044:	4a1d      	ldr	r2, [pc, #116]	; (800b0bc <prvHeapInit+0xb0>)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b04a:	4b1c      	ldr	r3, [pc, #112]	; (800b0bc <prvHeapInit+0xb0>)
 800b04c:	2200      	movs	r2, #0
 800b04e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	68ba      	ldr	r2, [r7, #8]
 800b054:	4413      	add	r3, r2
 800b056:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b058:	2208      	movs	r2, #8
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	1a9b      	subs	r3, r3, r2
 800b05e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f023 0307 	bic.w	r3, r3, #7
 800b066:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	4a15      	ldr	r2, [pc, #84]	; (800b0c0 <prvHeapInit+0xb4>)
 800b06c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b06e:	4b14      	ldr	r3, [pc, #80]	; (800b0c0 <prvHeapInit+0xb4>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	2200      	movs	r2, #0
 800b074:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b076:	4b12      	ldr	r3, [pc, #72]	; (800b0c0 <prvHeapInit+0xb4>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	2200      	movs	r2, #0
 800b07c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	68fa      	ldr	r2, [r7, #12]
 800b086:	1ad2      	subs	r2, r2, r3
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b08c:	4b0c      	ldr	r3, [pc, #48]	; (800b0c0 <prvHeapInit+0xb4>)
 800b08e:	681a      	ldr	r2, [r3, #0]
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	4a0a      	ldr	r2, [pc, #40]	; (800b0c4 <prvHeapInit+0xb8>)
 800b09a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	4a09      	ldr	r2, [pc, #36]	; (800b0c8 <prvHeapInit+0xbc>)
 800b0a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b0a4:	4b09      	ldr	r3, [pc, #36]	; (800b0cc <prvHeapInit+0xc0>)
 800b0a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b0aa:	601a      	str	r2, [r3, #0]
}
 800b0ac:	bf00      	nop
 800b0ae:	3714      	adds	r7, #20
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr
 800b0b8:	20000c34 	.word	0x20000c34
 800b0bc:	20008c34 	.word	0x20008c34
 800b0c0:	20008c3c 	.word	0x20008c3c
 800b0c4:	20008c44 	.word	0x20008c44
 800b0c8:	20008c40 	.word	0x20008c40
 800b0cc:	20008c50 	.word	0x20008c50

0800b0d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b085      	sub	sp, #20
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b0d8:	4b28      	ldr	r3, [pc, #160]	; (800b17c <prvInsertBlockIntoFreeList+0xac>)
 800b0da:	60fb      	str	r3, [r7, #12]
 800b0dc:	e002      	b.n	800b0e4 <prvInsertBlockIntoFreeList+0x14>
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	60fb      	str	r3, [r7, #12]
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	687a      	ldr	r2, [r7, #4]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d8f7      	bhi.n	800b0de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	68ba      	ldr	r2, [r7, #8]
 800b0f8:	4413      	add	r3, r2
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d108      	bne.n	800b112 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	685a      	ldr	r2, [r3, #4]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	441a      	add	r2, r3
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	68ba      	ldr	r2, [r7, #8]
 800b11c:	441a      	add	r2, r3
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	429a      	cmp	r2, r3
 800b124:	d118      	bne.n	800b158 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	4b15      	ldr	r3, [pc, #84]	; (800b180 <prvInsertBlockIntoFreeList+0xb0>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d00d      	beq.n	800b14e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	685a      	ldr	r2, [r3, #4]
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	441a      	add	r2, r3
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	601a      	str	r2, [r3, #0]
 800b14c:	e008      	b.n	800b160 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b14e:	4b0c      	ldr	r3, [pc, #48]	; (800b180 <prvInsertBlockIntoFreeList+0xb0>)
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	601a      	str	r2, [r3, #0]
 800b156:	e003      	b.n	800b160 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b160:	68fa      	ldr	r2, [r7, #12]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	429a      	cmp	r2, r3
 800b166:	d002      	beq.n	800b16e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b16e:	bf00      	nop
 800b170:	3714      	adds	r7, #20
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr
 800b17a:	bf00      	nop
 800b17c:	20008c34 	.word	0x20008c34
 800b180:	20008c3c 	.word	0x20008c3c

0800b184 <__errno>:
 800b184:	4b01      	ldr	r3, [pc, #4]	; (800b18c <__errno+0x8>)
 800b186:	6818      	ldr	r0, [r3, #0]
 800b188:	4770      	bx	lr
 800b18a:	bf00      	nop
 800b18c:	200000a8 	.word	0x200000a8

0800b190 <std>:
 800b190:	2300      	movs	r3, #0
 800b192:	b510      	push	{r4, lr}
 800b194:	4604      	mov	r4, r0
 800b196:	e9c0 3300 	strd	r3, r3, [r0]
 800b19a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b19e:	6083      	str	r3, [r0, #8]
 800b1a0:	8181      	strh	r1, [r0, #12]
 800b1a2:	6643      	str	r3, [r0, #100]	; 0x64
 800b1a4:	81c2      	strh	r2, [r0, #14]
 800b1a6:	6183      	str	r3, [r0, #24]
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	2208      	movs	r2, #8
 800b1ac:	305c      	adds	r0, #92	; 0x5c
 800b1ae:	f000 f91a 	bl	800b3e6 <memset>
 800b1b2:	4b05      	ldr	r3, [pc, #20]	; (800b1c8 <std+0x38>)
 800b1b4:	6263      	str	r3, [r4, #36]	; 0x24
 800b1b6:	4b05      	ldr	r3, [pc, #20]	; (800b1cc <std+0x3c>)
 800b1b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b1ba:	4b05      	ldr	r3, [pc, #20]	; (800b1d0 <std+0x40>)
 800b1bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b1be:	4b05      	ldr	r3, [pc, #20]	; (800b1d4 <std+0x44>)
 800b1c0:	6224      	str	r4, [r4, #32]
 800b1c2:	6323      	str	r3, [r4, #48]	; 0x30
 800b1c4:	bd10      	pop	{r4, pc}
 800b1c6:	bf00      	nop
 800b1c8:	0800c355 	.word	0x0800c355
 800b1cc:	0800c377 	.word	0x0800c377
 800b1d0:	0800c3af 	.word	0x0800c3af
 800b1d4:	0800c3d3 	.word	0x0800c3d3

0800b1d8 <_cleanup_r>:
 800b1d8:	4901      	ldr	r1, [pc, #4]	; (800b1e0 <_cleanup_r+0x8>)
 800b1da:	f000 b8af 	b.w	800b33c <_fwalk_reent>
 800b1de:	bf00      	nop
 800b1e0:	0800df81 	.word	0x0800df81

0800b1e4 <__sfmoreglue>:
 800b1e4:	b570      	push	{r4, r5, r6, lr}
 800b1e6:	2268      	movs	r2, #104	; 0x68
 800b1e8:	1e4d      	subs	r5, r1, #1
 800b1ea:	4355      	muls	r5, r2
 800b1ec:	460e      	mov	r6, r1
 800b1ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b1f2:	f000 f921 	bl	800b438 <_malloc_r>
 800b1f6:	4604      	mov	r4, r0
 800b1f8:	b140      	cbz	r0, 800b20c <__sfmoreglue+0x28>
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	e9c0 1600 	strd	r1, r6, [r0]
 800b200:	300c      	adds	r0, #12
 800b202:	60a0      	str	r0, [r4, #8]
 800b204:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b208:	f000 f8ed 	bl	800b3e6 <memset>
 800b20c:	4620      	mov	r0, r4
 800b20e:	bd70      	pop	{r4, r5, r6, pc}

0800b210 <__sfp_lock_acquire>:
 800b210:	4801      	ldr	r0, [pc, #4]	; (800b218 <__sfp_lock_acquire+0x8>)
 800b212:	f000 b8d8 	b.w	800b3c6 <__retarget_lock_acquire_recursive>
 800b216:	bf00      	nop
 800b218:	20008c55 	.word	0x20008c55

0800b21c <__sfp_lock_release>:
 800b21c:	4801      	ldr	r0, [pc, #4]	; (800b224 <__sfp_lock_release+0x8>)
 800b21e:	f000 b8d3 	b.w	800b3c8 <__retarget_lock_release_recursive>
 800b222:	bf00      	nop
 800b224:	20008c55 	.word	0x20008c55

0800b228 <__sinit_lock_acquire>:
 800b228:	4801      	ldr	r0, [pc, #4]	; (800b230 <__sinit_lock_acquire+0x8>)
 800b22a:	f000 b8cc 	b.w	800b3c6 <__retarget_lock_acquire_recursive>
 800b22e:	bf00      	nop
 800b230:	20008c56 	.word	0x20008c56

0800b234 <__sinit_lock_release>:
 800b234:	4801      	ldr	r0, [pc, #4]	; (800b23c <__sinit_lock_release+0x8>)
 800b236:	f000 b8c7 	b.w	800b3c8 <__retarget_lock_release_recursive>
 800b23a:	bf00      	nop
 800b23c:	20008c56 	.word	0x20008c56

0800b240 <__sinit>:
 800b240:	b510      	push	{r4, lr}
 800b242:	4604      	mov	r4, r0
 800b244:	f7ff fff0 	bl	800b228 <__sinit_lock_acquire>
 800b248:	69a3      	ldr	r3, [r4, #24]
 800b24a:	b11b      	cbz	r3, 800b254 <__sinit+0x14>
 800b24c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b250:	f7ff bff0 	b.w	800b234 <__sinit_lock_release>
 800b254:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b258:	6523      	str	r3, [r4, #80]	; 0x50
 800b25a:	4b13      	ldr	r3, [pc, #76]	; (800b2a8 <__sinit+0x68>)
 800b25c:	4a13      	ldr	r2, [pc, #76]	; (800b2ac <__sinit+0x6c>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	62a2      	str	r2, [r4, #40]	; 0x28
 800b262:	42a3      	cmp	r3, r4
 800b264:	bf04      	itt	eq
 800b266:	2301      	moveq	r3, #1
 800b268:	61a3      	streq	r3, [r4, #24]
 800b26a:	4620      	mov	r0, r4
 800b26c:	f000 f820 	bl	800b2b0 <__sfp>
 800b270:	6060      	str	r0, [r4, #4]
 800b272:	4620      	mov	r0, r4
 800b274:	f000 f81c 	bl	800b2b0 <__sfp>
 800b278:	60a0      	str	r0, [r4, #8]
 800b27a:	4620      	mov	r0, r4
 800b27c:	f000 f818 	bl	800b2b0 <__sfp>
 800b280:	2200      	movs	r2, #0
 800b282:	60e0      	str	r0, [r4, #12]
 800b284:	2104      	movs	r1, #4
 800b286:	6860      	ldr	r0, [r4, #4]
 800b288:	f7ff ff82 	bl	800b190 <std>
 800b28c:	68a0      	ldr	r0, [r4, #8]
 800b28e:	2201      	movs	r2, #1
 800b290:	2109      	movs	r1, #9
 800b292:	f7ff ff7d 	bl	800b190 <std>
 800b296:	68e0      	ldr	r0, [r4, #12]
 800b298:	2202      	movs	r2, #2
 800b29a:	2112      	movs	r1, #18
 800b29c:	f7ff ff78 	bl	800b190 <std>
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	61a3      	str	r3, [r4, #24]
 800b2a4:	e7d2      	b.n	800b24c <__sinit+0xc>
 800b2a6:	bf00      	nop
 800b2a8:	08011760 	.word	0x08011760
 800b2ac:	0800b1d9 	.word	0x0800b1d9

0800b2b0 <__sfp>:
 800b2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2b2:	4607      	mov	r7, r0
 800b2b4:	f7ff ffac 	bl	800b210 <__sfp_lock_acquire>
 800b2b8:	4b1e      	ldr	r3, [pc, #120]	; (800b334 <__sfp+0x84>)
 800b2ba:	681e      	ldr	r6, [r3, #0]
 800b2bc:	69b3      	ldr	r3, [r6, #24]
 800b2be:	b913      	cbnz	r3, 800b2c6 <__sfp+0x16>
 800b2c0:	4630      	mov	r0, r6
 800b2c2:	f7ff ffbd 	bl	800b240 <__sinit>
 800b2c6:	3648      	adds	r6, #72	; 0x48
 800b2c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b2cc:	3b01      	subs	r3, #1
 800b2ce:	d503      	bpl.n	800b2d8 <__sfp+0x28>
 800b2d0:	6833      	ldr	r3, [r6, #0]
 800b2d2:	b30b      	cbz	r3, 800b318 <__sfp+0x68>
 800b2d4:	6836      	ldr	r6, [r6, #0]
 800b2d6:	e7f7      	b.n	800b2c8 <__sfp+0x18>
 800b2d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b2dc:	b9d5      	cbnz	r5, 800b314 <__sfp+0x64>
 800b2de:	4b16      	ldr	r3, [pc, #88]	; (800b338 <__sfp+0x88>)
 800b2e0:	60e3      	str	r3, [r4, #12]
 800b2e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b2e6:	6665      	str	r5, [r4, #100]	; 0x64
 800b2e8:	f000 f86c 	bl	800b3c4 <__retarget_lock_init_recursive>
 800b2ec:	f7ff ff96 	bl	800b21c <__sfp_lock_release>
 800b2f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b2f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b2f8:	6025      	str	r5, [r4, #0]
 800b2fa:	61a5      	str	r5, [r4, #24]
 800b2fc:	2208      	movs	r2, #8
 800b2fe:	4629      	mov	r1, r5
 800b300:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b304:	f000 f86f 	bl	800b3e6 <memset>
 800b308:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b30c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b310:	4620      	mov	r0, r4
 800b312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b314:	3468      	adds	r4, #104	; 0x68
 800b316:	e7d9      	b.n	800b2cc <__sfp+0x1c>
 800b318:	2104      	movs	r1, #4
 800b31a:	4638      	mov	r0, r7
 800b31c:	f7ff ff62 	bl	800b1e4 <__sfmoreglue>
 800b320:	4604      	mov	r4, r0
 800b322:	6030      	str	r0, [r6, #0]
 800b324:	2800      	cmp	r0, #0
 800b326:	d1d5      	bne.n	800b2d4 <__sfp+0x24>
 800b328:	f7ff ff78 	bl	800b21c <__sfp_lock_release>
 800b32c:	230c      	movs	r3, #12
 800b32e:	603b      	str	r3, [r7, #0]
 800b330:	e7ee      	b.n	800b310 <__sfp+0x60>
 800b332:	bf00      	nop
 800b334:	08011760 	.word	0x08011760
 800b338:	ffff0001 	.word	0xffff0001

0800b33c <_fwalk_reent>:
 800b33c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b340:	4606      	mov	r6, r0
 800b342:	4688      	mov	r8, r1
 800b344:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b348:	2700      	movs	r7, #0
 800b34a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b34e:	f1b9 0901 	subs.w	r9, r9, #1
 800b352:	d505      	bpl.n	800b360 <_fwalk_reent+0x24>
 800b354:	6824      	ldr	r4, [r4, #0]
 800b356:	2c00      	cmp	r4, #0
 800b358:	d1f7      	bne.n	800b34a <_fwalk_reent+0xe>
 800b35a:	4638      	mov	r0, r7
 800b35c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b360:	89ab      	ldrh	r3, [r5, #12]
 800b362:	2b01      	cmp	r3, #1
 800b364:	d907      	bls.n	800b376 <_fwalk_reent+0x3a>
 800b366:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b36a:	3301      	adds	r3, #1
 800b36c:	d003      	beq.n	800b376 <_fwalk_reent+0x3a>
 800b36e:	4629      	mov	r1, r5
 800b370:	4630      	mov	r0, r6
 800b372:	47c0      	blx	r8
 800b374:	4307      	orrs	r7, r0
 800b376:	3568      	adds	r5, #104	; 0x68
 800b378:	e7e9      	b.n	800b34e <_fwalk_reent+0x12>
	...

0800b37c <__libc_init_array>:
 800b37c:	b570      	push	{r4, r5, r6, lr}
 800b37e:	4d0d      	ldr	r5, [pc, #52]	; (800b3b4 <__libc_init_array+0x38>)
 800b380:	4c0d      	ldr	r4, [pc, #52]	; (800b3b8 <__libc_init_array+0x3c>)
 800b382:	1b64      	subs	r4, r4, r5
 800b384:	10a4      	asrs	r4, r4, #2
 800b386:	2600      	movs	r6, #0
 800b388:	42a6      	cmp	r6, r4
 800b38a:	d109      	bne.n	800b3a0 <__libc_init_array+0x24>
 800b38c:	4d0b      	ldr	r5, [pc, #44]	; (800b3bc <__libc_init_array+0x40>)
 800b38e:	4c0c      	ldr	r4, [pc, #48]	; (800b3c0 <__libc_init_array+0x44>)
 800b390:	f004 fc08 	bl	800fba4 <_init>
 800b394:	1b64      	subs	r4, r4, r5
 800b396:	10a4      	asrs	r4, r4, #2
 800b398:	2600      	movs	r6, #0
 800b39a:	42a6      	cmp	r6, r4
 800b39c:	d105      	bne.n	800b3aa <__libc_init_array+0x2e>
 800b39e:	bd70      	pop	{r4, r5, r6, pc}
 800b3a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3a4:	4798      	blx	r3
 800b3a6:	3601      	adds	r6, #1
 800b3a8:	e7ee      	b.n	800b388 <__libc_init_array+0xc>
 800b3aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3ae:	4798      	blx	r3
 800b3b0:	3601      	adds	r6, #1
 800b3b2:	e7f2      	b.n	800b39a <__libc_init_array+0x1e>
 800b3b4:	08011bac 	.word	0x08011bac
 800b3b8:	08011bac 	.word	0x08011bac
 800b3bc:	08011bac 	.word	0x08011bac
 800b3c0:	08011bb0 	.word	0x08011bb0

0800b3c4 <__retarget_lock_init_recursive>:
 800b3c4:	4770      	bx	lr

0800b3c6 <__retarget_lock_acquire_recursive>:
 800b3c6:	4770      	bx	lr

0800b3c8 <__retarget_lock_release_recursive>:
 800b3c8:	4770      	bx	lr

0800b3ca <memcpy>:
 800b3ca:	440a      	add	r2, r1
 800b3cc:	4291      	cmp	r1, r2
 800b3ce:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3d2:	d100      	bne.n	800b3d6 <memcpy+0xc>
 800b3d4:	4770      	bx	lr
 800b3d6:	b510      	push	{r4, lr}
 800b3d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3e0:	4291      	cmp	r1, r2
 800b3e2:	d1f9      	bne.n	800b3d8 <memcpy+0xe>
 800b3e4:	bd10      	pop	{r4, pc}

0800b3e6 <memset>:
 800b3e6:	4402      	add	r2, r0
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d100      	bne.n	800b3f0 <memset+0xa>
 800b3ee:	4770      	bx	lr
 800b3f0:	f803 1b01 	strb.w	r1, [r3], #1
 800b3f4:	e7f9      	b.n	800b3ea <memset+0x4>
	...

0800b3f8 <sbrk_aligned>:
 800b3f8:	b570      	push	{r4, r5, r6, lr}
 800b3fa:	4e0e      	ldr	r6, [pc, #56]	; (800b434 <sbrk_aligned+0x3c>)
 800b3fc:	460c      	mov	r4, r1
 800b3fe:	6831      	ldr	r1, [r6, #0]
 800b400:	4605      	mov	r5, r0
 800b402:	b911      	cbnz	r1, 800b40a <sbrk_aligned+0x12>
 800b404:	f000 ff70 	bl	800c2e8 <_sbrk_r>
 800b408:	6030      	str	r0, [r6, #0]
 800b40a:	4621      	mov	r1, r4
 800b40c:	4628      	mov	r0, r5
 800b40e:	f000 ff6b 	bl	800c2e8 <_sbrk_r>
 800b412:	1c43      	adds	r3, r0, #1
 800b414:	d00a      	beq.n	800b42c <sbrk_aligned+0x34>
 800b416:	1cc4      	adds	r4, r0, #3
 800b418:	f024 0403 	bic.w	r4, r4, #3
 800b41c:	42a0      	cmp	r0, r4
 800b41e:	d007      	beq.n	800b430 <sbrk_aligned+0x38>
 800b420:	1a21      	subs	r1, r4, r0
 800b422:	4628      	mov	r0, r5
 800b424:	f000 ff60 	bl	800c2e8 <_sbrk_r>
 800b428:	3001      	adds	r0, #1
 800b42a:	d101      	bne.n	800b430 <sbrk_aligned+0x38>
 800b42c:	f04f 34ff 	mov.w	r4, #4294967295
 800b430:	4620      	mov	r0, r4
 800b432:	bd70      	pop	{r4, r5, r6, pc}
 800b434:	20008c5c 	.word	0x20008c5c

0800b438 <_malloc_r>:
 800b438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b43c:	1ccd      	adds	r5, r1, #3
 800b43e:	f025 0503 	bic.w	r5, r5, #3
 800b442:	3508      	adds	r5, #8
 800b444:	2d0c      	cmp	r5, #12
 800b446:	bf38      	it	cc
 800b448:	250c      	movcc	r5, #12
 800b44a:	2d00      	cmp	r5, #0
 800b44c:	4607      	mov	r7, r0
 800b44e:	db01      	blt.n	800b454 <_malloc_r+0x1c>
 800b450:	42a9      	cmp	r1, r5
 800b452:	d905      	bls.n	800b460 <_malloc_r+0x28>
 800b454:	230c      	movs	r3, #12
 800b456:	603b      	str	r3, [r7, #0]
 800b458:	2600      	movs	r6, #0
 800b45a:	4630      	mov	r0, r6
 800b45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b460:	4e2e      	ldr	r6, [pc, #184]	; (800b51c <_malloc_r+0xe4>)
 800b462:	f003 f969 	bl	800e738 <__malloc_lock>
 800b466:	6833      	ldr	r3, [r6, #0]
 800b468:	461c      	mov	r4, r3
 800b46a:	bb34      	cbnz	r4, 800b4ba <_malloc_r+0x82>
 800b46c:	4629      	mov	r1, r5
 800b46e:	4638      	mov	r0, r7
 800b470:	f7ff ffc2 	bl	800b3f8 <sbrk_aligned>
 800b474:	1c43      	adds	r3, r0, #1
 800b476:	4604      	mov	r4, r0
 800b478:	d14d      	bne.n	800b516 <_malloc_r+0xde>
 800b47a:	6834      	ldr	r4, [r6, #0]
 800b47c:	4626      	mov	r6, r4
 800b47e:	2e00      	cmp	r6, #0
 800b480:	d140      	bne.n	800b504 <_malloc_r+0xcc>
 800b482:	6823      	ldr	r3, [r4, #0]
 800b484:	4631      	mov	r1, r6
 800b486:	4638      	mov	r0, r7
 800b488:	eb04 0803 	add.w	r8, r4, r3
 800b48c:	f000 ff2c 	bl	800c2e8 <_sbrk_r>
 800b490:	4580      	cmp	r8, r0
 800b492:	d13a      	bne.n	800b50a <_malloc_r+0xd2>
 800b494:	6821      	ldr	r1, [r4, #0]
 800b496:	3503      	adds	r5, #3
 800b498:	1a6d      	subs	r5, r5, r1
 800b49a:	f025 0503 	bic.w	r5, r5, #3
 800b49e:	3508      	adds	r5, #8
 800b4a0:	2d0c      	cmp	r5, #12
 800b4a2:	bf38      	it	cc
 800b4a4:	250c      	movcc	r5, #12
 800b4a6:	4629      	mov	r1, r5
 800b4a8:	4638      	mov	r0, r7
 800b4aa:	f7ff ffa5 	bl	800b3f8 <sbrk_aligned>
 800b4ae:	3001      	adds	r0, #1
 800b4b0:	d02b      	beq.n	800b50a <_malloc_r+0xd2>
 800b4b2:	6823      	ldr	r3, [r4, #0]
 800b4b4:	442b      	add	r3, r5
 800b4b6:	6023      	str	r3, [r4, #0]
 800b4b8:	e00e      	b.n	800b4d8 <_malloc_r+0xa0>
 800b4ba:	6822      	ldr	r2, [r4, #0]
 800b4bc:	1b52      	subs	r2, r2, r5
 800b4be:	d41e      	bmi.n	800b4fe <_malloc_r+0xc6>
 800b4c0:	2a0b      	cmp	r2, #11
 800b4c2:	d916      	bls.n	800b4f2 <_malloc_r+0xba>
 800b4c4:	1961      	adds	r1, r4, r5
 800b4c6:	42a3      	cmp	r3, r4
 800b4c8:	6025      	str	r5, [r4, #0]
 800b4ca:	bf18      	it	ne
 800b4cc:	6059      	strne	r1, [r3, #4]
 800b4ce:	6863      	ldr	r3, [r4, #4]
 800b4d0:	bf08      	it	eq
 800b4d2:	6031      	streq	r1, [r6, #0]
 800b4d4:	5162      	str	r2, [r4, r5]
 800b4d6:	604b      	str	r3, [r1, #4]
 800b4d8:	4638      	mov	r0, r7
 800b4da:	f104 060b 	add.w	r6, r4, #11
 800b4de:	f003 f931 	bl	800e744 <__malloc_unlock>
 800b4e2:	f026 0607 	bic.w	r6, r6, #7
 800b4e6:	1d23      	adds	r3, r4, #4
 800b4e8:	1af2      	subs	r2, r6, r3
 800b4ea:	d0b6      	beq.n	800b45a <_malloc_r+0x22>
 800b4ec:	1b9b      	subs	r3, r3, r6
 800b4ee:	50a3      	str	r3, [r4, r2]
 800b4f0:	e7b3      	b.n	800b45a <_malloc_r+0x22>
 800b4f2:	6862      	ldr	r2, [r4, #4]
 800b4f4:	42a3      	cmp	r3, r4
 800b4f6:	bf0c      	ite	eq
 800b4f8:	6032      	streq	r2, [r6, #0]
 800b4fa:	605a      	strne	r2, [r3, #4]
 800b4fc:	e7ec      	b.n	800b4d8 <_malloc_r+0xa0>
 800b4fe:	4623      	mov	r3, r4
 800b500:	6864      	ldr	r4, [r4, #4]
 800b502:	e7b2      	b.n	800b46a <_malloc_r+0x32>
 800b504:	4634      	mov	r4, r6
 800b506:	6876      	ldr	r6, [r6, #4]
 800b508:	e7b9      	b.n	800b47e <_malloc_r+0x46>
 800b50a:	230c      	movs	r3, #12
 800b50c:	603b      	str	r3, [r7, #0]
 800b50e:	4638      	mov	r0, r7
 800b510:	f003 f918 	bl	800e744 <__malloc_unlock>
 800b514:	e7a1      	b.n	800b45a <_malloc_r+0x22>
 800b516:	6025      	str	r5, [r4, #0]
 800b518:	e7de      	b.n	800b4d8 <_malloc_r+0xa0>
 800b51a:	bf00      	nop
 800b51c:	20008c58 	.word	0x20008c58

0800b520 <__cvt>:
 800b520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b524:	ec55 4b10 	vmov	r4, r5, d0
 800b528:	2d00      	cmp	r5, #0
 800b52a:	460e      	mov	r6, r1
 800b52c:	4619      	mov	r1, r3
 800b52e:	462b      	mov	r3, r5
 800b530:	bfbb      	ittet	lt
 800b532:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b536:	461d      	movlt	r5, r3
 800b538:	2300      	movge	r3, #0
 800b53a:	232d      	movlt	r3, #45	; 0x2d
 800b53c:	700b      	strb	r3, [r1, #0]
 800b53e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b540:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b544:	4691      	mov	r9, r2
 800b546:	f023 0820 	bic.w	r8, r3, #32
 800b54a:	bfbc      	itt	lt
 800b54c:	4622      	movlt	r2, r4
 800b54e:	4614      	movlt	r4, r2
 800b550:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b554:	d005      	beq.n	800b562 <__cvt+0x42>
 800b556:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b55a:	d100      	bne.n	800b55e <__cvt+0x3e>
 800b55c:	3601      	adds	r6, #1
 800b55e:	2102      	movs	r1, #2
 800b560:	e000      	b.n	800b564 <__cvt+0x44>
 800b562:	2103      	movs	r1, #3
 800b564:	ab03      	add	r3, sp, #12
 800b566:	9301      	str	r3, [sp, #4]
 800b568:	ab02      	add	r3, sp, #8
 800b56a:	9300      	str	r3, [sp, #0]
 800b56c:	ec45 4b10 	vmov	d0, r4, r5
 800b570:	4653      	mov	r3, sl
 800b572:	4632      	mov	r2, r6
 800b574:	f001 fe90 	bl	800d298 <_dtoa_r>
 800b578:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b57c:	4607      	mov	r7, r0
 800b57e:	d102      	bne.n	800b586 <__cvt+0x66>
 800b580:	f019 0f01 	tst.w	r9, #1
 800b584:	d022      	beq.n	800b5cc <__cvt+0xac>
 800b586:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b58a:	eb07 0906 	add.w	r9, r7, r6
 800b58e:	d110      	bne.n	800b5b2 <__cvt+0x92>
 800b590:	783b      	ldrb	r3, [r7, #0]
 800b592:	2b30      	cmp	r3, #48	; 0x30
 800b594:	d10a      	bne.n	800b5ac <__cvt+0x8c>
 800b596:	2200      	movs	r2, #0
 800b598:	2300      	movs	r3, #0
 800b59a:	4620      	mov	r0, r4
 800b59c:	4629      	mov	r1, r5
 800b59e:	f7f5 faa3 	bl	8000ae8 <__aeabi_dcmpeq>
 800b5a2:	b918      	cbnz	r0, 800b5ac <__cvt+0x8c>
 800b5a4:	f1c6 0601 	rsb	r6, r6, #1
 800b5a8:	f8ca 6000 	str.w	r6, [sl]
 800b5ac:	f8da 3000 	ldr.w	r3, [sl]
 800b5b0:	4499      	add	r9, r3
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	4629      	mov	r1, r5
 800b5ba:	f7f5 fa95 	bl	8000ae8 <__aeabi_dcmpeq>
 800b5be:	b108      	cbz	r0, 800b5c4 <__cvt+0xa4>
 800b5c0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b5c4:	2230      	movs	r2, #48	; 0x30
 800b5c6:	9b03      	ldr	r3, [sp, #12]
 800b5c8:	454b      	cmp	r3, r9
 800b5ca:	d307      	bcc.n	800b5dc <__cvt+0xbc>
 800b5cc:	9b03      	ldr	r3, [sp, #12]
 800b5ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b5d0:	1bdb      	subs	r3, r3, r7
 800b5d2:	4638      	mov	r0, r7
 800b5d4:	6013      	str	r3, [r2, #0]
 800b5d6:	b004      	add	sp, #16
 800b5d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5dc:	1c59      	adds	r1, r3, #1
 800b5de:	9103      	str	r1, [sp, #12]
 800b5e0:	701a      	strb	r2, [r3, #0]
 800b5e2:	e7f0      	b.n	800b5c6 <__cvt+0xa6>

0800b5e4 <__exponent>:
 800b5e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	2900      	cmp	r1, #0
 800b5ea:	bfb8      	it	lt
 800b5ec:	4249      	neglt	r1, r1
 800b5ee:	f803 2b02 	strb.w	r2, [r3], #2
 800b5f2:	bfb4      	ite	lt
 800b5f4:	222d      	movlt	r2, #45	; 0x2d
 800b5f6:	222b      	movge	r2, #43	; 0x2b
 800b5f8:	2909      	cmp	r1, #9
 800b5fa:	7042      	strb	r2, [r0, #1]
 800b5fc:	dd2a      	ble.n	800b654 <__exponent+0x70>
 800b5fe:	f10d 0407 	add.w	r4, sp, #7
 800b602:	46a4      	mov	ip, r4
 800b604:	270a      	movs	r7, #10
 800b606:	46a6      	mov	lr, r4
 800b608:	460a      	mov	r2, r1
 800b60a:	fb91 f6f7 	sdiv	r6, r1, r7
 800b60e:	fb07 1516 	mls	r5, r7, r6, r1
 800b612:	3530      	adds	r5, #48	; 0x30
 800b614:	2a63      	cmp	r2, #99	; 0x63
 800b616:	f104 34ff 	add.w	r4, r4, #4294967295
 800b61a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b61e:	4631      	mov	r1, r6
 800b620:	dcf1      	bgt.n	800b606 <__exponent+0x22>
 800b622:	3130      	adds	r1, #48	; 0x30
 800b624:	f1ae 0502 	sub.w	r5, lr, #2
 800b628:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b62c:	1c44      	adds	r4, r0, #1
 800b62e:	4629      	mov	r1, r5
 800b630:	4561      	cmp	r1, ip
 800b632:	d30a      	bcc.n	800b64a <__exponent+0x66>
 800b634:	f10d 0209 	add.w	r2, sp, #9
 800b638:	eba2 020e 	sub.w	r2, r2, lr
 800b63c:	4565      	cmp	r5, ip
 800b63e:	bf88      	it	hi
 800b640:	2200      	movhi	r2, #0
 800b642:	4413      	add	r3, r2
 800b644:	1a18      	subs	r0, r3, r0
 800b646:	b003      	add	sp, #12
 800b648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b64a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b64e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b652:	e7ed      	b.n	800b630 <__exponent+0x4c>
 800b654:	2330      	movs	r3, #48	; 0x30
 800b656:	3130      	adds	r1, #48	; 0x30
 800b658:	7083      	strb	r3, [r0, #2]
 800b65a:	70c1      	strb	r1, [r0, #3]
 800b65c:	1d03      	adds	r3, r0, #4
 800b65e:	e7f1      	b.n	800b644 <__exponent+0x60>

0800b660 <_printf_float>:
 800b660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b664:	ed2d 8b02 	vpush	{d8}
 800b668:	b08d      	sub	sp, #52	; 0x34
 800b66a:	460c      	mov	r4, r1
 800b66c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b670:	4616      	mov	r6, r2
 800b672:	461f      	mov	r7, r3
 800b674:	4605      	mov	r5, r0
 800b676:	f003 f82f 	bl	800e6d8 <_localeconv_r>
 800b67a:	f8d0 a000 	ldr.w	sl, [r0]
 800b67e:	4650      	mov	r0, sl
 800b680:	f7f4 fdb6 	bl	80001f0 <strlen>
 800b684:	2300      	movs	r3, #0
 800b686:	930a      	str	r3, [sp, #40]	; 0x28
 800b688:	6823      	ldr	r3, [r4, #0]
 800b68a:	9305      	str	r3, [sp, #20]
 800b68c:	f8d8 3000 	ldr.w	r3, [r8]
 800b690:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b694:	3307      	adds	r3, #7
 800b696:	f023 0307 	bic.w	r3, r3, #7
 800b69a:	f103 0208 	add.w	r2, r3, #8
 800b69e:	f8c8 2000 	str.w	r2, [r8]
 800b6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b6aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b6ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b6b2:	9307      	str	r3, [sp, #28]
 800b6b4:	f8cd 8018 	str.w	r8, [sp, #24]
 800b6b8:	ee08 0a10 	vmov	s16, r0
 800b6bc:	4b9f      	ldr	r3, [pc, #636]	; (800b93c <_printf_float+0x2dc>)
 800b6be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b6c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b6c6:	f7f5 fa41 	bl	8000b4c <__aeabi_dcmpun>
 800b6ca:	bb88      	cbnz	r0, 800b730 <_printf_float+0xd0>
 800b6cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b6d0:	4b9a      	ldr	r3, [pc, #616]	; (800b93c <_printf_float+0x2dc>)
 800b6d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b6d6:	f7f5 fa1b 	bl	8000b10 <__aeabi_dcmple>
 800b6da:	bb48      	cbnz	r0, 800b730 <_printf_float+0xd0>
 800b6dc:	2200      	movs	r2, #0
 800b6de:	2300      	movs	r3, #0
 800b6e0:	4640      	mov	r0, r8
 800b6e2:	4649      	mov	r1, r9
 800b6e4:	f7f5 fa0a 	bl	8000afc <__aeabi_dcmplt>
 800b6e8:	b110      	cbz	r0, 800b6f0 <_printf_float+0x90>
 800b6ea:	232d      	movs	r3, #45	; 0x2d
 800b6ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6f0:	4b93      	ldr	r3, [pc, #588]	; (800b940 <_printf_float+0x2e0>)
 800b6f2:	4894      	ldr	r0, [pc, #592]	; (800b944 <_printf_float+0x2e4>)
 800b6f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b6f8:	bf94      	ite	ls
 800b6fa:	4698      	movls	r8, r3
 800b6fc:	4680      	movhi	r8, r0
 800b6fe:	2303      	movs	r3, #3
 800b700:	6123      	str	r3, [r4, #16]
 800b702:	9b05      	ldr	r3, [sp, #20]
 800b704:	f023 0204 	bic.w	r2, r3, #4
 800b708:	6022      	str	r2, [r4, #0]
 800b70a:	f04f 0900 	mov.w	r9, #0
 800b70e:	9700      	str	r7, [sp, #0]
 800b710:	4633      	mov	r3, r6
 800b712:	aa0b      	add	r2, sp, #44	; 0x2c
 800b714:	4621      	mov	r1, r4
 800b716:	4628      	mov	r0, r5
 800b718:	f000 f9d8 	bl	800bacc <_printf_common>
 800b71c:	3001      	adds	r0, #1
 800b71e:	f040 8090 	bne.w	800b842 <_printf_float+0x1e2>
 800b722:	f04f 30ff 	mov.w	r0, #4294967295
 800b726:	b00d      	add	sp, #52	; 0x34
 800b728:	ecbd 8b02 	vpop	{d8}
 800b72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b730:	4642      	mov	r2, r8
 800b732:	464b      	mov	r3, r9
 800b734:	4640      	mov	r0, r8
 800b736:	4649      	mov	r1, r9
 800b738:	f7f5 fa08 	bl	8000b4c <__aeabi_dcmpun>
 800b73c:	b140      	cbz	r0, 800b750 <_printf_float+0xf0>
 800b73e:	464b      	mov	r3, r9
 800b740:	2b00      	cmp	r3, #0
 800b742:	bfbc      	itt	lt
 800b744:	232d      	movlt	r3, #45	; 0x2d
 800b746:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b74a:	487f      	ldr	r0, [pc, #508]	; (800b948 <_printf_float+0x2e8>)
 800b74c:	4b7f      	ldr	r3, [pc, #508]	; (800b94c <_printf_float+0x2ec>)
 800b74e:	e7d1      	b.n	800b6f4 <_printf_float+0x94>
 800b750:	6863      	ldr	r3, [r4, #4]
 800b752:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b756:	9206      	str	r2, [sp, #24]
 800b758:	1c5a      	adds	r2, r3, #1
 800b75a:	d13f      	bne.n	800b7dc <_printf_float+0x17c>
 800b75c:	2306      	movs	r3, #6
 800b75e:	6063      	str	r3, [r4, #4]
 800b760:	9b05      	ldr	r3, [sp, #20]
 800b762:	6861      	ldr	r1, [r4, #4]
 800b764:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b768:	2300      	movs	r3, #0
 800b76a:	9303      	str	r3, [sp, #12]
 800b76c:	ab0a      	add	r3, sp, #40	; 0x28
 800b76e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b772:	ab09      	add	r3, sp, #36	; 0x24
 800b774:	ec49 8b10 	vmov	d0, r8, r9
 800b778:	9300      	str	r3, [sp, #0]
 800b77a:	6022      	str	r2, [r4, #0]
 800b77c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b780:	4628      	mov	r0, r5
 800b782:	f7ff fecd 	bl	800b520 <__cvt>
 800b786:	9b06      	ldr	r3, [sp, #24]
 800b788:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b78a:	2b47      	cmp	r3, #71	; 0x47
 800b78c:	4680      	mov	r8, r0
 800b78e:	d108      	bne.n	800b7a2 <_printf_float+0x142>
 800b790:	1cc8      	adds	r0, r1, #3
 800b792:	db02      	blt.n	800b79a <_printf_float+0x13a>
 800b794:	6863      	ldr	r3, [r4, #4]
 800b796:	4299      	cmp	r1, r3
 800b798:	dd41      	ble.n	800b81e <_printf_float+0x1be>
 800b79a:	f1ab 0b02 	sub.w	fp, fp, #2
 800b79e:	fa5f fb8b 	uxtb.w	fp, fp
 800b7a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b7a6:	d820      	bhi.n	800b7ea <_printf_float+0x18a>
 800b7a8:	3901      	subs	r1, #1
 800b7aa:	465a      	mov	r2, fp
 800b7ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b7b0:	9109      	str	r1, [sp, #36]	; 0x24
 800b7b2:	f7ff ff17 	bl	800b5e4 <__exponent>
 800b7b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7b8:	1813      	adds	r3, r2, r0
 800b7ba:	2a01      	cmp	r2, #1
 800b7bc:	4681      	mov	r9, r0
 800b7be:	6123      	str	r3, [r4, #16]
 800b7c0:	dc02      	bgt.n	800b7c8 <_printf_float+0x168>
 800b7c2:	6822      	ldr	r2, [r4, #0]
 800b7c4:	07d2      	lsls	r2, r2, #31
 800b7c6:	d501      	bpl.n	800b7cc <_printf_float+0x16c>
 800b7c8:	3301      	adds	r3, #1
 800b7ca:	6123      	str	r3, [r4, #16]
 800b7cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d09c      	beq.n	800b70e <_printf_float+0xae>
 800b7d4:	232d      	movs	r3, #45	; 0x2d
 800b7d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7da:	e798      	b.n	800b70e <_printf_float+0xae>
 800b7dc:	9a06      	ldr	r2, [sp, #24]
 800b7de:	2a47      	cmp	r2, #71	; 0x47
 800b7e0:	d1be      	bne.n	800b760 <_printf_float+0x100>
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d1bc      	bne.n	800b760 <_printf_float+0x100>
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e7b9      	b.n	800b75e <_printf_float+0xfe>
 800b7ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b7ee:	d118      	bne.n	800b822 <_printf_float+0x1c2>
 800b7f0:	2900      	cmp	r1, #0
 800b7f2:	6863      	ldr	r3, [r4, #4]
 800b7f4:	dd0b      	ble.n	800b80e <_printf_float+0x1ae>
 800b7f6:	6121      	str	r1, [r4, #16]
 800b7f8:	b913      	cbnz	r3, 800b800 <_printf_float+0x1a0>
 800b7fa:	6822      	ldr	r2, [r4, #0]
 800b7fc:	07d0      	lsls	r0, r2, #31
 800b7fe:	d502      	bpl.n	800b806 <_printf_float+0x1a6>
 800b800:	3301      	adds	r3, #1
 800b802:	440b      	add	r3, r1
 800b804:	6123      	str	r3, [r4, #16]
 800b806:	65a1      	str	r1, [r4, #88]	; 0x58
 800b808:	f04f 0900 	mov.w	r9, #0
 800b80c:	e7de      	b.n	800b7cc <_printf_float+0x16c>
 800b80e:	b913      	cbnz	r3, 800b816 <_printf_float+0x1b6>
 800b810:	6822      	ldr	r2, [r4, #0]
 800b812:	07d2      	lsls	r2, r2, #31
 800b814:	d501      	bpl.n	800b81a <_printf_float+0x1ba>
 800b816:	3302      	adds	r3, #2
 800b818:	e7f4      	b.n	800b804 <_printf_float+0x1a4>
 800b81a:	2301      	movs	r3, #1
 800b81c:	e7f2      	b.n	800b804 <_printf_float+0x1a4>
 800b81e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b824:	4299      	cmp	r1, r3
 800b826:	db05      	blt.n	800b834 <_printf_float+0x1d4>
 800b828:	6823      	ldr	r3, [r4, #0]
 800b82a:	6121      	str	r1, [r4, #16]
 800b82c:	07d8      	lsls	r0, r3, #31
 800b82e:	d5ea      	bpl.n	800b806 <_printf_float+0x1a6>
 800b830:	1c4b      	adds	r3, r1, #1
 800b832:	e7e7      	b.n	800b804 <_printf_float+0x1a4>
 800b834:	2900      	cmp	r1, #0
 800b836:	bfd4      	ite	le
 800b838:	f1c1 0202 	rsble	r2, r1, #2
 800b83c:	2201      	movgt	r2, #1
 800b83e:	4413      	add	r3, r2
 800b840:	e7e0      	b.n	800b804 <_printf_float+0x1a4>
 800b842:	6823      	ldr	r3, [r4, #0]
 800b844:	055a      	lsls	r2, r3, #21
 800b846:	d407      	bmi.n	800b858 <_printf_float+0x1f8>
 800b848:	6923      	ldr	r3, [r4, #16]
 800b84a:	4642      	mov	r2, r8
 800b84c:	4631      	mov	r1, r6
 800b84e:	4628      	mov	r0, r5
 800b850:	47b8      	blx	r7
 800b852:	3001      	adds	r0, #1
 800b854:	d12c      	bne.n	800b8b0 <_printf_float+0x250>
 800b856:	e764      	b.n	800b722 <_printf_float+0xc2>
 800b858:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b85c:	f240 80e0 	bls.w	800ba20 <_printf_float+0x3c0>
 800b860:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b864:	2200      	movs	r2, #0
 800b866:	2300      	movs	r3, #0
 800b868:	f7f5 f93e 	bl	8000ae8 <__aeabi_dcmpeq>
 800b86c:	2800      	cmp	r0, #0
 800b86e:	d034      	beq.n	800b8da <_printf_float+0x27a>
 800b870:	4a37      	ldr	r2, [pc, #220]	; (800b950 <_printf_float+0x2f0>)
 800b872:	2301      	movs	r3, #1
 800b874:	4631      	mov	r1, r6
 800b876:	4628      	mov	r0, r5
 800b878:	47b8      	blx	r7
 800b87a:	3001      	adds	r0, #1
 800b87c:	f43f af51 	beq.w	800b722 <_printf_float+0xc2>
 800b880:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b884:	429a      	cmp	r2, r3
 800b886:	db02      	blt.n	800b88e <_printf_float+0x22e>
 800b888:	6823      	ldr	r3, [r4, #0]
 800b88a:	07d8      	lsls	r0, r3, #31
 800b88c:	d510      	bpl.n	800b8b0 <_printf_float+0x250>
 800b88e:	ee18 3a10 	vmov	r3, s16
 800b892:	4652      	mov	r2, sl
 800b894:	4631      	mov	r1, r6
 800b896:	4628      	mov	r0, r5
 800b898:	47b8      	blx	r7
 800b89a:	3001      	adds	r0, #1
 800b89c:	f43f af41 	beq.w	800b722 <_printf_float+0xc2>
 800b8a0:	f04f 0800 	mov.w	r8, #0
 800b8a4:	f104 091a 	add.w	r9, r4, #26
 800b8a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8aa:	3b01      	subs	r3, #1
 800b8ac:	4543      	cmp	r3, r8
 800b8ae:	dc09      	bgt.n	800b8c4 <_printf_float+0x264>
 800b8b0:	6823      	ldr	r3, [r4, #0]
 800b8b2:	079b      	lsls	r3, r3, #30
 800b8b4:	f100 8105 	bmi.w	800bac2 <_printf_float+0x462>
 800b8b8:	68e0      	ldr	r0, [r4, #12]
 800b8ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8bc:	4298      	cmp	r0, r3
 800b8be:	bfb8      	it	lt
 800b8c0:	4618      	movlt	r0, r3
 800b8c2:	e730      	b.n	800b726 <_printf_float+0xc6>
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	464a      	mov	r2, r9
 800b8c8:	4631      	mov	r1, r6
 800b8ca:	4628      	mov	r0, r5
 800b8cc:	47b8      	blx	r7
 800b8ce:	3001      	adds	r0, #1
 800b8d0:	f43f af27 	beq.w	800b722 <_printf_float+0xc2>
 800b8d4:	f108 0801 	add.w	r8, r8, #1
 800b8d8:	e7e6      	b.n	800b8a8 <_printf_float+0x248>
 800b8da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	dc39      	bgt.n	800b954 <_printf_float+0x2f4>
 800b8e0:	4a1b      	ldr	r2, [pc, #108]	; (800b950 <_printf_float+0x2f0>)
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	4631      	mov	r1, r6
 800b8e6:	4628      	mov	r0, r5
 800b8e8:	47b8      	blx	r7
 800b8ea:	3001      	adds	r0, #1
 800b8ec:	f43f af19 	beq.w	800b722 <_printf_float+0xc2>
 800b8f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	d102      	bne.n	800b8fe <_printf_float+0x29e>
 800b8f8:	6823      	ldr	r3, [r4, #0]
 800b8fa:	07d9      	lsls	r1, r3, #31
 800b8fc:	d5d8      	bpl.n	800b8b0 <_printf_float+0x250>
 800b8fe:	ee18 3a10 	vmov	r3, s16
 800b902:	4652      	mov	r2, sl
 800b904:	4631      	mov	r1, r6
 800b906:	4628      	mov	r0, r5
 800b908:	47b8      	blx	r7
 800b90a:	3001      	adds	r0, #1
 800b90c:	f43f af09 	beq.w	800b722 <_printf_float+0xc2>
 800b910:	f04f 0900 	mov.w	r9, #0
 800b914:	f104 0a1a 	add.w	sl, r4, #26
 800b918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b91a:	425b      	negs	r3, r3
 800b91c:	454b      	cmp	r3, r9
 800b91e:	dc01      	bgt.n	800b924 <_printf_float+0x2c4>
 800b920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b922:	e792      	b.n	800b84a <_printf_float+0x1ea>
 800b924:	2301      	movs	r3, #1
 800b926:	4652      	mov	r2, sl
 800b928:	4631      	mov	r1, r6
 800b92a:	4628      	mov	r0, r5
 800b92c:	47b8      	blx	r7
 800b92e:	3001      	adds	r0, #1
 800b930:	f43f aef7 	beq.w	800b722 <_printf_float+0xc2>
 800b934:	f109 0901 	add.w	r9, r9, #1
 800b938:	e7ee      	b.n	800b918 <_printf_float+0x2b8>
 800b93a:	bf00      	nop
 800b93c:	7fefffff 	.word	0x7fefffff
 800b940:	08011764 	.word	0x08011764
 800b944:	08011768 	.word	0x08011768
 800b948:	08011770 	.word	0x08011770
 800b94c:	0801176c 	.word	0x0801176c
 800b950:	08011774 	.word	0x08011774
 800b954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b956:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b958:	429a      	cmp	r2, r3
 800b95a:	bfa8      	it	ge
 800b95c:	461a      	movge	r2, r3
 800b95e:	2a00      	cmp	r2, #0
 800b960:	4691      	mov	r9, r2
 800b962:	dc37      	bgt.n	800b9d4 <_printf_float+0x374>
 800b964:	f04f 0b00 	mov.w	fp, #0
 800b968:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b96c:	f104 021a 	add.w	r2, r4, #26
 800b970:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b972:	9305      	str	r3, [sp, #20]
 800b974:	eba3 0309 	sub.w	r3, r3, r9
 800b978:	455b      	cmp	r3, fp
 800b97a:	dc33      	bgt.n	800b9e4 <_printf_float+0x384>
 800b97c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b980:	429a      	cmp	r2, r3
 800b982:	db3b      	blt.n	800b9fc <_printf_float+0x39c>
 800b984:	6823      	ldr	r3, [r4, #0]
 800b986:	07da      	lsls	r2, r3, #31
 800b988:	d438      	bmi.n	800b9fc <_printf_float+0x39c>
 800b98a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b98c:	9a05      	ldr	r2, [sp, #20]
 800b98e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b990:	1a9a      	subs	r2, r3, r2
 800b992:	eba3 0901 	sub.w	r9, r3, r1
 800b996:	4591      	cmp	r9, r2
 800b998:	bfa8      	it	ge
 800b99a:	4691      	movge	r9, r2
 800b99c:	f1b9 0f00 	cmp.w	r9, #0
 800b9a0:	dc35      	bgt.n	800ba0e <_printf_float+0x3ae>
 800b9a2:	f04f 0800 	mov.w	r8, #0
 800b9a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b9aa:	f104 0a1a 	add.w	sl, r4, #26
 800b9ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9b2:	1a9b      	subs	r3, r3, r2
 800b9b4:	eba3 0309 	sub.w	r3, r3, r9
 800b9b8:	4543      	cmp	r3, r8
 800b9ba:	f77f af79 	ble.w	800b8b0 <_printf_float+0x250>
 800b9be:	2301      	movs	r3, #1
 800b9c0:	4652      	mov	r2, sl
 800b9c2:	4631      	mov	r1, r6
 800b9c4:	4628      	mov	r0, r5
 800b9c6:	47b8      	blx	r7
 800b9c8:	3001      	adds	r0, #1
 800b9ca:	f43f aeaa 	beq.w	800b722 <_printf_float+0xc2>
 800b9ce:	f108 0801 	add.w	r8, r8, #1
 800b9d2:	e7ec      	b.n	800b9ae <_printf_float+0x34e>
 800b9d4:	4613      	mov	r3, r2
 800b9d6:	4631      	mov	r1, r6
 800b9d8:	4642      	mov	r2, r8
 800b9da:	4628      	mov	r0, r5
 800b9dc:	47b8      	blx	r7
 800b9de:	3001      	adds	r0, #1
 800b9e0:	d1c0      	bne.n	800b964 <_printf_float+0x304>
 800b9e2:	e69e      	b.n	800b722 <_printf_float+0xc2>
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	4631      	mov	r1, r6
 800b9e8:	4628      	mov	r0, r5
 800b9ea:	9205      	str	r2, [sp, #20]
 800b9ec:	47b8      	blx	r7
 800b9ee:	3001      	adds	r0, #1
 800b9f0:	f43f ae97 	beq.w	800b722 <_printf_float+0xc2>
 800b9f4:	9a05      	ldr	r2, [sp, #20]
 800b9f6:	f10b 0b01 	add.w	fp, fp, #1
 800b9fa:	e7b9      	b.n	800b970 <_printf_float+0x310>
 800b9fc:	ee18 3a10 	vmov	r3, s16
 800ba00:	4652      	mov	r2, sl
 800ba02:	4631      	mov	r1, r6
 800ba04:	4628      	mov	r0, r5
 800ba06:	47b8      	blx	r7
 800ba08:	3001      	adds	r0, #1
 800ba0a:	d1be      	bne.n	800b98a <_printf_float+0x32a>
 800ba0c:	e689      	b.n	800b722 <_printf_float+0xc2>
 800ba0e:	9a05      	ldr	r2, [sp, #20]
 800ba10:	464b      	mov	r3, r9
 800ba12:	4442      	add	r2, r8
 800ba14:	4631      	mov	r1, r6
 800ba16:	4628      	mov	r0, r5
 800ba18:	47b8      	blx	r7
 800ba1a:	3001      	adds	r0, #1
 800ba1c:	d1c1      	bne.n	800b9a2 <_printf_float+0x342>
 800ba1e:	e680      	b.n	800b722 <_printf_float+0xc2>
 800ba20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba22:	2a01      	cmp	r2, #1
 800ba24:	dc01      	bgt.n	800ba2a <_printf_float+0x3ca>
 800ba26:	07db      	lsls	r3, r3, #31
 800ba28:	d538      	bpl.n	800ba9c <_printf_float+0x43c>
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	4642      	mov	r2, r8
 800ba2e:	4631      	mov	r1, r6
 800ba30:	4628      	mov	r0, r5
 800ba32:	47b8      	blx	r7
 800ba34:	3001      	adds	r0, #1
 800ba36:	f43f ae74 	beq.w	800b722 <_printf_float+0xc2>
 800ba3a:	ee18 3a10 	vmov	r3, s16
 800ba3e:	4652      	mov	r2, sl
 800ba40:	4631      	mov	r1, r6
 800ba42:	4628      	mov	r0, r5
 800ba44:	47b8      	blx	r7
 800ba46:	3001      	adds	r0, #1
 800ba48:	f43f ae6b 	beq.w	800b722 <_printf_float+0xc2>
 800ba4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ba50:	2200      	movs	r2, #0
 800ba52:	2300      	movs	r3, #0
 800ba54:	f7f5 f848 	bl	8000ae8 <__aeabi_dcmpeq>
 800ba58:	b9d8      	cbnz	r0, 800ba92 <_printf_float+0x432>
 800ba5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba5c:	f108 0201 	add.w	r2, r8, #1
 800ba60:	3b01      	subs	r3, #1
 800ba62:	4631      	mov	r1, r6
 800ba64:	4628      	mov	r0, r5
 800ba66:	47b8      	blx	r7
 800ba68:	3001      	adds	r0, #1
 800ba6a:	d10e      	bne.n	800ba8a <_printf_float+0x42a>
 800ba6c:	e659      	b.n	800b722 <_printf_float+0xc2>
 800ba6e:	2301      	movs	r3, #1
 800ba70:	4652      	mov	r2, sl
 800ba72:	4631      	mov	r1, r6
 800ba74:	4628      	mov	r0, r5
 800ba76:	47b8      	blx	r7
 800ba78:	3001      	adds	r0, #1
 800ba7a:	f43f ae52 	beq.w	800b722 <_printf_float+0xc2>
 800ba7e:	f108 0801 	add.w	r8, r8, #1
 800ba82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba84:	3b01      	subs	r3, #1
 800ba86:	4543      	cmp	r3, r8
 800ba88:	dcf1      	bgt.n	800ba6e <_printf_float+0x40e>
 800ba8a:	464b      	mov	r3, r9
 800ba8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ba90:	e6dc      	b.n	800b84c <_printf_float+0x1ec>
 800ba92:	f04f 0800 	mov.w	r8, #0
 800ba96:	f104 0a1a 	add.w	sl, r4, #26
 800ba9a:	e7f2      	b.n	800ba82 <_printf_float+0x422>
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	4642      	mov	r2, r8
 800baa0:	e7df      	b.n	800ba62 <_printf_float+0x402>
 800baa2:	2301      	movs	r3, #1
 800baa4:	464a      	mov	r2, r9
 800baa6:	4631      	mov	r1, r6
 800baa8:	4628      	mov	r0, r5
 800baaa:	47b8      	blx	r7
 800baac:	3001      	adds	r0, #1
 800baae:	f43f ae38 	beq.w	800b722 <_printf_float+0xc2>
 800bab2:	f108 0801 	add.w	r8, r8, #1
 800bab6:	68e3      	ldr	r3, [r4, #12]
 800bab8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800baba:	1a5b      	subs	r3, r3, r1
 800babc:	4543      	cmp	r3, r8
 800babe:	dcf0      	bgt.n	800baa2 <_printf_float+0x442>
 800bac0:	e6fa      	b.n	800b8b8 <_printf_float+0x258>
 800bac2:	f04f 0800 	mov.w	r8, #0
 800bac6:	f104 0919 	add.w	r9, r4, #25
 800baca:	e7f4      	b.n	800bab6 <_printf_float+0x456>

0800bacc <_printf_common>:
 800bacc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bad0:	4616      	mov	r6, r2
 800bad2:	4699      	mov	r9, r3
 800bad4:	688a      	ldr	r2, [r1, #8]
 800bad6:	690b      	ldr	r3, [r1, #16]
 800bad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800badc:	4293      	cmp	r3, r2
 800bade:	bfb8      	it	lt
 800bae0:	4613      	movlt	r3, r2
 800bae2:	6033      	str	r3, [r6, #0]
 800bae4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bae8:	4607      	mov	r7, r0
 800baea:	460c      	mov	r4, r1
 800baec:	b10a      	cbz	r2, 800baf2 <_printf_common+0x26>
 800baee:	3301      	adds	r3, #1
 800baf0:	6033      	str	r3, [r6, #0]
 800baf2:	6823      	ldr	r3, [r4, #0]
 800baf4:	0699      	lsls	r1, r3, #26
 800baf6:	bf42      	ittt	mi
 800baf8:	6833      	ldrmi	r3, [r6, #0]
 800bafa:	3302      	addmi	r3, #2
 800bafc:	6033      	strmi	r3, [r6, #0]
 800bafe:	6825      	ldr	r5, [r4, #0]
 800bb00:	f015 0506 	ands.w	r5, r5, #6
 800bb04:	d106      	bne.n	800bb14 <_printf_common+0x48>
 800bb06:	f104 0a19 	add.w	sl, r4, #25
 800bb0a:	68e3      	ldr	r3, [r4, #12]
 800bb0c:	6832      	ldr	r2, [r6, #0]
 800bb0e:	1a9b      	subs	r3, r3, r2
 800bb10:	42ab      	cmp	r3, r5
 800bb12:	dc26      	bgt.n	800bb62 <_printf_common+0x96>
 800bb14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb18:	1e13      	subs	r3, r2, #0
 800bb1a:	6822      	ldr	r2, [r4, #0]
 800bb1c:	bf18      	it	ne
 800bb1e:	2301      	movne	r3, #1
 800bb20:	0692      	lsls	r2, r2, #26
 800bb22:	d42b      	bmi.n	800bb7c <_printf_common+0xb0>
 800bb24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb28:	4649      	mov	r1, r9
 800bb2a:	4638      	mov	r0, r7
 800bb2c:	47c0      	blx	r8
 800bb2e:	3001      	adds	r0, #1
 800bb30:	d01e      	beq.n	800bb70 <_printf_common+0xa4>
 800bb32:	6823      	ldr	r3, [r4, #0]
 800bb34:	68e5      	ldr	r5, [r4, #12]
 800bb36:	6832      	ldr	r2, [r6, #0]
 800bb38:	f003 0306 	and.w	r3, r3, #6
 800bb3c:	2b04      	cmp	r3, #4
 800bb3e:	bf08      	it	eq
 800bb40:	1aad      	subeq	r5, r5, r2
 800bb42:	68a3      	ldr	r3, [r4, #8]
 800bb44:	6922      	ldr	r2, [r4, #16]
 800bb46:	bf0c      	ite	eq
 800bb48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb4c:	2500      	movne	r5, #0
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	bfc4      	itt	gt
 800bb52:	1a9b      	subgt	r3, r3, r2
 800bb54:	18ed      	addgt	r5, r5, r3
 800bb56:	2600      	movs	r6, #0
 800bb58:	341a      	adds	r4, #26
 800bb5a:	42b5      	cmp	r5, r6
 800bb5c:	d11a      	bne.n	800bb94 <_printf_common+0xc8>
 800bb5e:	2000      	movs	r0, #0
 800bb60:	e008      	b.n	800bb74 <_printf_common+0xa8>
 800bb62:	2301      	movs	r3, #1
 800bb64:	4652      	mov	r2, sl
 800bb66:	4649      	mov	r1, r9
 800bb68:	4638      	mov	r0, r7
 800bb6a:	47c0      	blx	r8
 800bb6c:	3001      	adds	r0, #1
 800bb6e:	d103      	bne.n	800bb78 <_printf_common+0xac>
 800bb70:	f04f 30ff 	mov.w	r0, #4294967295
 800bb74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb78:	3501      	adds	r5, #1
 800bb7a:	e7c6      	b.n	800bb0a <_printf_common+0x3e>
 800bb7c:	18e1      	adds	r1, r4, r3
 800bb7e:	1c5a      	adds	r2, r3, #1
 800bb80:	2030      	movs	r0, #48	; 0x30
 800bb82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb86:	4422      	add	r2, r4
 800bb88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb90:	3302      	adds	r3, #2
 800bb92:	e7c7      	b.n	800bb24 <_printf_common+0x58>
 800bb94:	2301      	movs	r3, #1
 800bb96:	4622      	mov	r2, r4
 800bb98:	4649      	mov	r1, r9
 800bb9a:	4638      	mov	r0, r7
 800bb9c:	47c0      	blx	r8
 800bb9e:	3001      	adds	r0, #1
 800bba0:	d0e6      	beq.n	800bb70 <_printf_common+0xa4>
 800bba2:	3601      	adds	r6, #1
 800bba4:	e7d9      	b.n	800bb5a <_printf_common+0x8e>
	...

0800bba8 <_printf_i>:
 800bba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbac:	7e0f      	ldrb	r7, [r1, #24]
 800bbae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bbb0:	2f78      	cmp	r7, #120	; 0x78
 800bbb2:	4691      	mov	r9, r2
 800bbb4:	4680      	mov	r8, r0
 800bbb6:	460c      	mov	r4, r1
 800bbb8:	469a      	mov	sl, r3
 800bbba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bbbe:	d807      	bhi.n	800bbd0 <_printf_i+0x28>
 800bbc0:	2f62      	cmp	r7, #98	; 0x62
 800bbc2:	d80a      	bhi.n	800bbda <_printf_i+0x32>
 800bbc4:	2f00      	cmp	r7, #0
 800bbc6:	f000 80d8 	beq.w	800bd7a <_printf_i+0x1d2>
 800bbca:	2f58      	cmp	r7, #88	; 0x58
 800bbcc:	f000 80a3 	beq.w	800bd16 <_printf_i+0x16e>
 800bbd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bbd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bbd8:	e03a      	b.n	800bc50 <_printf_i+0xa8>
 800bbda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bbde:	2b15      	cmp	r3, #21
 800bbe0:	d8f6      	bhi.n	800bbd0 <_printf_i+0x28>
 800bbe2:	a101      	add	r1, pc, #4	; (adr r1, 800bbe8 <_printf_i+0x40>)
 800bbe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bbe8:	0800bc41 	.word	0x0800bc41
 800bbec:	0800bc55 	.word	0x0800bc55
 800bbf0:	0800bbd1 	.word	0x0800bbd1
 800bbf4:	0800bbd1 	.word	0x0800bbd1
 800bbf8:	0800bbd1 	.word	0x0800bbd1
 800bbfc:	0800bbd1 	.word	0x0800bbd1
 800bc00:	0800bc55 	.word	0x0800bc55
 800bc04:	0800bbd1 	.word	0x0800bbd1
 800bc08:	0800bbd1 	.word	0x0800bbd1
 800bc0c:	0800bbd1 	.word	0x0800bbd1
 800bc10:	0800bbd1 	.word	0x0800bbd1
 800bc14:	0800bd61 	.word	0x0800bd61
 800bc18:	0800bc85 	.word	0x0800bc85
 800bc1c:	0800bd43 	.word	0x0800bd43
 800bc20:	0800bbd1 	.word	0x0800bbd1
 800bc24:	0800bbd1 	.word	0x0800bbd1
 800bc28:	0800bd83 	.word	0x0800bd83
 800bc2c:	0800bbd1 	.word	0x0800bbd1
 800bc30:	0800bc85 	.word	0x0800bc85
 800bc34:	0800bbd1 	.word	0x0800bbd1
 800bc38:	0800bbd1 	.word	0x0800bbd1
 800bc3c:	0800bd4b 	.word	0x0800bd4b
 800bc40:	682b      	ldr	r3, [r5, #0]
 800bc42:	1d1a      	adds	r2, r3, #4
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	602a      	str	r2, [r5, #0]
 800bc48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc50:	2301      	movs	r3, #1
 800bc52:	e0a3      	b.n	800bd9c <_printf_i+0x1f4>
 800bc54:	6820      	ldr	r0, [r4, #0]
 800bc56:	6829      	ldr	r1, [r5, #0]
 800bc58:	0606      	lsls	r6, r0, #24
 800bc5a:	f101 0304 	add.w	r3, r1, #4
 800bc5e:	d50a      	bpl.n	800bc76 <_printf_i+0xce>
 800bc60:	680e      	ldr	r6, [r1, #0]
 800bc62:	602b      	str	r3, [r5, #0]
 800bc64:	2e00      	cmp	r6, #0
 800bc66:	da03      	bge.n	800bc70 <_printf_i+0xc8>
 800bc68:	232d      	movs	r3, #45	; 0x2d
 800bc6a:	4276      	negs	r6, r6
 800bc6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc70:	485e      	ldr	r0, [pc, #376]	; (800bdec <_printf_i+0x244>)
 800bc72:	230a      	movs	r3, #10
 800bc74:	e019      	b.n	800bcaa <_printf_i+0x102>
 800bc76:	680e      	ldr	r6, [r1, #0]
 800bc78:	602b      	str	r3, [r5, #0]
 800bc7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bc7e:	bf18      	it	ne
 800bc80:	b236      	sxthne	r6, r6
 800bc82:	e7ef      	b.n	800bc64 <_printf_i+0xbc>
 800bc84:	682b      	ldr	r3, [r5, #0]
 800bc86:	6820      	ldr	r0, [r4, #0]
 800bc88:	1d19      	adds	r1, r3, #4
 800bc8a:	6029      	str	r1, [r5, #0]
 800bc8c:	0601      	lsls	r1, r0, #24
 800bc8e:	d501      	bpl.n	800bc94 <_printf_i+0xec>
 800bc90:	681e      	ldr	r6, [r3, #0]
 800bc92:	e002      	b.n	800bc9a <_printf_i+0xf2>
 800bc94:	0646      	lsls	r6, r0, #25
 800bc96:	d5fb      	bpl.n	800bc90 <_printf_i+0xe8>
 800bc98:	881e      	ldrh	r6, [r3, #0]
 800bc9a:	4854      	ldr	r0, [pc, #336]	; (800bdec <_printf_i+0x244>)
 800bc9c:	2f6f      	cmp	r7, #111	; 0x6f
 800bc9e:	bf0c      	ite	eq
 800bca0:	2308      	moveq	r3, #8
 800bca2:	230a      	movne	r3, #10
 800bca4:	2100      	movs	r1, #0
 800bca6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bcaa:	6865      	ldr	r5, [r4, #4]
 800bcac:	60a5      	str	r5, [r4, #8]
 800bcae:	2d00      	cmp	r5, #0
 800bcb0:	bfa2      	ittt	ge
 800bcb2:	6821      	ldrge	r1, [r4, #0]
 800bcb4:	f021 0104 	bicge.w	r1, r1, #4
 800bcb8:	6021      	strge	r1, [r4, #0]
 800bcba:	b90e      	cbnz	r6, 800bcc0 <_printf_i+0x118>
 800bcbc:	2d00      	cmp	r5, #0
 800bcbe:	d04d      	beq.n	800bd5c <_printf_i+0x1b4>
 800bcc0:	4615      	mov	r5, r2
 800bcc2:	fbb6 f1f3 	udiv	r1, r6, r3
 800bcc6:	fb03 6711 	mls	r7, r3, r1, r6
 800bcca:	5dc7      	ldrb	r7, [r0, r7]
 800bccc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bcd0:	4637      	mov	r7, r6
 800bcd2:	42bb      	cmp	r3, r7
 800bcd4:	460e      	mov	r6, r1
 800bcd6:	d9f4      	bls.n	800bcc2 <_printf_i+0x11a>
 800bcd8:	2b08      	cmp	r3, #8
 800bcda:	d10b      	bne.n	800bcf4 <_printf_i+0x14c>
 800bcdc:	6823      	ldr	r3, [r4, #0]
 800bcde:	07de      	lsls	r6, r3, #31
 800bce0:	d508      	bpl.n	800bcf4 <_printf_i+0x14c>
 800bce2:	6923      	ldr	r3, [r4, #16]
 800bce4:	6861      	ldr	r1, [r4, #4]
 800bce6:	4299      	cmp	r1, r3
 800bce8:	bfde      	ittt	le
 800bcea:	2330      	movle	r3, #48	; 0x30
 800bcec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bcf0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bcf4:	1b52      	subs	r2, r2, r5
 800bcf6:	6122      	str	r2, [r4, #16]
 800bcf8:	f8cd a000 	str.w	sl, [sp]
 800bcfc:	464b      	mov	r3, r9
 800bcfe:	aa03      	add	r2, sp, #12
 800bd00:	4621      	mov	r1, r4
 800bd02:	4640      	mov	r0, r8
 800bd04:	f7ff fee2 	bl	800bacc <_printf_common>
 800bd08:	3001      	adds	r0, #1
 800bd0a:	d14c      	bne.n	800bda6 <_printf_i+0x1fe>
 800bd0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd10:	b004      	add	sp, #16
 800bd12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd16:	4835      	ldr	r0, [pc, #212]	; (800bdec <_printf_i+0x244>)
 800bd18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bd1c:	6829      	ldr	r1, [r5, #0]
 800bd1e:	6823      	ldr	r3, [r4, #0]
 800bd20:	f851 6b04 	ldr.w	r6, [r1], #4
 800bd24:	6029      	str	r1, [r5, #0]
 800bd26:	061d      	lsls	r5, r3, #24
 800bd28:	d514      	bpl.n	800bd54 <_printf_i+0x1ac>
 800bd2a:	07df      	lsls	r7, r3, #31
 800bd2c:	bf44      	itt	mi
 800bd2e:	f043 0320 	orrmi.w	r3, r3, #32
 800bd32:	6023      	strmi	r3, [r4, #0]
 800bd34:	b91e      	cbnz	r6, 800bd3e <_printf_i+0x196>
 800bd36:	6823      	ldr	r3, [r4, #0]
 800bd38:	f023 0320 	bic.w	r3, r3, #32
 800bd3c:	6023      	str	r3, [r4, #0]
 800bd3e:	2310      	movs	r3, #16
 800bd40:	e7b0      	b.n	800bca4 <_printf_i+0xfc>
 800bd42:	6823      	ldr	r3, [r4, #0]
 800bd44:	f043 0320 	orr.w	r3, r3, #32
 800bd48:	6023      	str	r3, [r4, #0]
 800bd4a:	2378      	movs	r3, #120	; 0x78
 800bd4c:	4828      	ldr	r0, [pc, #160]	; (800bdf0 <_printf_i+0x248>)
 800bd4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd52:	e7e3      	b.n	800bd1c <_printf_i+0x174>
 800bd54:	0659      	lsls	r1, r3, #25
 800bd56:	bf48      	it	mi
 800bd58:	b2b6      	uxthmi	r6, r6
 800bd5a:	e7e6      	b.n	800bd2a <_printf_i+0x182>
 800bd5c:	4615      	mov	r5, r2
 800bd5e:	e7bb      	b.n	800bcd8 <_printf_i+0x130>
 800bd60:	682b      	ldr	r3, [r5, #0]
 800bd62:	6826      	ldr	r6, [r4, #0]
 800bd64:	6961      	ldr	r1, [r4, #20]
 800bd66:	1d18      	adds	r0, r3, #4
 800bd68:	6028      	str	r0, [r5, #0]
 800bd6a:	0635      	lsls	r5, r6, #24
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	d501      	bpl.n	800bd74 <_printf_i+0x1cc>
 800bd70:	6019      	str	r1, [r3, #0]
 800bd72:	e002      	b.n	800bd7a <_printf_i+0x1d2>
 800bd74:	0670      	lsls	r0, r6, #25
 800bd76:	d5fb      	bpl.n	800bd70 <_printf_i+0x1c8>
 800bd78:	8019      	strh	r1, [r3, #0]
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	6123      	str	r3, [r4, #16]
 800bd7e:	4615      	mov	r5, r2
 800bd80:	e7ba      	b.n	800bcf8 <_printf_i+0x150>
 800bd82:	682b      	ldr	r3, [r5, #0]
 800bd84:	1d1a      	adds	r2, r3, #4
 800bd86:	602a      	str	r2, [r5, #0]
 800bd88:	681d      	ldr	r5, [r3, #0]
 800bd8a:	6862      	ldr	r2, [r4, #4]
 800bd8c:	2100      	movs	r1, #0
 800bd8e:	4628      	mov	r0, r5
 800bd90:	f7f4 fa36 	bl	8000200 <memchr>
 800bd94:	b108      	cbz	r0, 800bd9a <_printf_i+0x1f2>
 800bd96:	1b40      	subs	r0, r0, r5
 800bd98:	6060      	str	r0, [r4, #4]
 800bd9a:	6863      	ldr	r3, [r4, #4]
 800bd9c:	6123      	str	r3, [r4, #16]
 800bd9e:	2300      	movs	r3, #0
 800bda0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bda4:	e7a8      	b.n	800bcf8 <_printf_i+0x150>
 800bda6:	6923      	ldr	r3, [r4, #16]
 800bda8:	462a      	mov	r2, r5
 800bdaa:	4649      	mov	r1, r9
 800bdac:	4640      	mov	r0, r8
 800bdae:	47d0      	blx	sl
 800bdb0:	3001      	adds	r0, #1
 800bdb2:	d0ab      	beq.n	800bd0c <_printf_i+0x164>
 800bdb4:	6823      	ldr	r3, [r4, #0]
 800bdb6:	079b      	lsls	r3, r3, #30
 800bdb8:	d413      	bmi.n	800bde2 <_printf_i+0x23a>
 800bdba:	68e0      	ldr	r0, [r4, #12]
 800bdbc:	9b03      	ldr	r3, [sp, #12]
 800bdbe:	4298      	cmp	r0, r3
 800bdc0:	bfb8      	it	lt
 800bdc2:	4618      	movlt	r0, r3
 800bdc4:	e7a4      	b.n	800bd10 <_printf_i+0x168>
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	4632      	mov	r2, r6
 800bdca:	4649      	mov	r1, r9
 800bdcc:	4640      	mov	r0, r8
 800bdce:	47d0      	blx	sl
 800bdd0:	3001      	adds	r0, #1
 800bdd2:	d09b      	beq.n	800bd0c <_printf_i+0x164>
 800bdd4:	3501      	adds	r5, #1
 800bdd6:	68e3      	ldr	r3, [r4, #12]
 800bdd8:	9903      	ldr	r1, [sp, #12]
 800bdda:	1a5b      	subs	r3, r3, r1
 800bddc:	42ab      	cmp	r3, r5
 800bdde:	dcf2      	bgt.n	800bdc6 <_printf_i+0x21e>
 800bde0:	e7eb      	b.n	800bdba <_printf_i+0x212>
 800bde2:	2500      	movs	r5, #0
 800bde4:	f104 0619 	add.w	r6, r4, #25
 800bde8:	e7f5      	b.n	800bdd6 <_printf_i+0x22e>
 800bdea:	bf00      	nop
 800bdec:	08011776 	.word	0x08011776
 800bdf0:	08011787 	.word	0x08011787

0800bdf4 <_scanf_float>:
 800bdf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdf8:	b087      	sub	sp, #28
 800bdfa:	4617      	mov	r7, r2
 800bdfc:	9303      	str	r3, [sp, #12]
 800bdfe:	688b      	ldr	r3, [r1, #8]
 800be00:	1e5a      	subs	r2, r3, #1
 800be02:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800be06:	bf83      	ittte	hi
 800be08:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800be0c:	195b      	addhi	r3, r3, r5
 800be0e:	9302      	strhi	r3, [sp, #8]
 800be10:	2300      	movls	r3, #0
 800be12:	bf86      	itte	hi
 800be14:	f240 135d 	movwhi	r3, #349	; 0x15d
 800be18:	608b      	strhi	r3, [r1, #8]
 800be1a:	9302      	strls	r3, [sp, #8]
 800be1c:	680b      	ldr	r3, [r1, #0]
 800be1e:	468b      	mov	fp, r1
 800be20:	2500      	movs	r5, #0
 800be22:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800be26:	f84b 3b1c 	str.w	r3, [fp], #28
 800be2a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800be2e:	4680      	mov	r8, r0
 800be30:	460c      	mov	r4, r1
 800be32:	465e      	mov	r6, fp
 800be34:	46aa      	mov	sl, r5
 800be36:	46a9      	mov	r9, r5
 800be38:	9501      	str	r5, [sp, #4]
 800be3a:	68a2      	ldr	r2, [r4, #8]
 800be3c:	b152      	cbz	r2, 800be54 <_scanf_float+0x60>
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	2b4e      	cmp	r3, #78	; 0x4e
 800be44:	d864      	bhi.n	800bf10 <_scanf_float+0x11c>
 800be46:	2b40      	cmp	r3, #64	; 0x40
 800be48:	d83c      	bhi.n	800bec4 <_scanf_float+0xd0>
 800be4a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800be4e:	b2c8      	uxtb	r0, r1
 800be50:	280e      	cmp	r0, #14
 800be52:	d93a      	bls.n	800beca <_scanf_float+0xd6>
 800be54:	f1b9 0f00 	cmp.w	r9, #0
 800be58:	d003      	beq.n	800be62 <_scanf_float+0x6e>
 800be5a:	6823      	ldr	r3, [r4, #0]
 800be5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be60:	6023      	str	r3, [r4, #0]
 800be62:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be66:	f1ba 0f01 	cmp.w	sl, #1
 800be6a:	f200 8113 	bhi.w	800c094 <_scanf_float+0x2a0>
 800be6e:	455e      	cmp	r6, fp
 800be70:	f200 8105 	bhi.w	800c07e <_scanf_float+0x28a>
 800be74:	2501      	movs	r5, #1
 800be76:	4628      	mov	r0, r5
 800be78:	b007      	add	sp, #28
 800be7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be7e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800be82:	2a0d      	cmp	r2, #13
 800be84:	d8e6      	bhi.n	800be54 <_scanf_float+0x60>
 800be86:	a101      	add	r1, pc, #4	; (adr r1, 800be8c <_scanf_float+0x98>)
 800be88:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800be8c:	0800bfcb 	.word	0x0800bfcb
 800be90:	0800be55 	.word	0x0800be55
 800be94:	0800be55 	.word	0x0800be55
 800be98:	0800be55 	.word	0x0800be55
 800be9c:	0800c02b 	.word	0x0800c02b
 800bea0:	0800c003 	.word	0x0800c003
 800bea4:	0800be55 	.word	0x0800be55
 800bea8:	0800be55 	.word	0x0800be55
 800beac:	0800bfd9 	.word	0x0800bfd9
 800beb0:	0800be55 	.word	0x0800be55
 800beb4:	0800be55 	.word	0x0800be55
 800beb8:	0800be55 	.word	0x0800be55
 800bebc:	0800be55 	.word	0x0800be55
 800bec0:	0800bf91 	.word	0x0800bf91
 800bec4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800bec8:	e7db      	b.n	800be82 <_scanf_float+0x8e>
 800beca:	290e      	cmp	r1, #14
 800becc:	d8c2      	bhi.n	800be54 <_scanf_float+0x60>
 800bece:	a001      	add	r0, pc, #4	; (adr r0, 800bed4 <_scanf_float+0xe0>)
 800bed0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bed4:	0800bf83 	.word	0x0800bf83
 800bed8:	0800be55 	.word	0x0800be55
 800bedc:	0800bf83 	.word	0x0800bf83
 800bee0:	0800c017 	.word	0x0800c017
 800bee4:	0800be55 	.word	0x0800be55
 800bee8:	0800bf31 	.word	0x0800bf31
 800beec:	0800bf6d 	.word	0x0800bf6d
 800bef0:	0800bf6d 	.word	0x0800bf6d
 800bef4:	0800bf6d 	.word	0x0800bf6d
 800bef8:	0800bf6d 	.word	0x0800bf6d
 800befc:	0800bf6d 	.word	0x0800bf6d
 800bf00:	0800bf6d 	.word	0x0800bf6d
 800bf04:	0800bf6d 	.word	0x0800bf6d
 800bf08:	0800bf6d 	.word	0x0800bf6d
 800bf0c:	0800bf6d 	.word	0x0800bf6d
 800bf10:	2b6e      	cmp	r3, #110	; 0x6e
 800bf12:	d809      	bhi.n	800bf28 <_scanf_float+0x134>
 800bf14:	2b60      	cmp	r3, #96	; 0x60
 800bf16:	d8b2      	bhi.n	800be7e <_scanf_float+0x8a>
 800bf18:	2b54      	cmp	r3, #84	; 0x54
 800bf1a:	d077      	beq.n	800c00c <_scanf_float+0x218>
 800bf1c:	2b59      	cmp	r3, #89	; 0x59
 800bf1e:	d199      	bne.n	800be54 <_scanf_float+0x60>
 800bf20:	2d07      	cmp	r5, #7
 800bf22:	d197      	bne.n	800be54 <_scanf_float+0x60>
 800bf24:	2508      	movs	r5, #8
 800bf26:	e029      	b.n	800bf7c <_scanf_float+0x188>
 800bf28:	2b74      	cmp	r3, #116	; 0x74
 800bf2a:	d06f      	beq.n	800c00c <_scanf_float+0x218>
 800bf2c:	2b79      	cmp	r3, #121	; 0x79
 800bf2e:	e7f6      	b.n	800bf1e <_scanf_float+0x12a>
 800bf30:	6821      	ldr	r1, [r4, #0]
 800bf32:	05c8      	lsls	r0, r1, #23
 800bf34:	d51a      	bpl.n	800bf6c <_scanf_float+0x178>
 800bf36:	9b02      	ldr	r3, [sp, #8]
 800bf38:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bf3c:	6021      	str	r1, [r4, #0]
 800bf3e:	f109 0901 	add.w	r9, r9, #1
 800bf42:	b11b      	cbz	r3, 800bf4c <_scanf_float+0x158>
 800bf44:	3b01      	subs	r3, #1
 800bf46:	3201      	adds	r2, #1
 800bf48:	9302      	str	r3, [sp, #8]
 800bf4a:	60a2      	str	r2, [r4, #8]
 800bf4c:	68a3      	ldr	r3, [r4, #8]
 800bf4e:	3b01      	subs	r3, #1
 800bf50:	60a3      	str	r3, [r4, #8]
 800bf52:	6923      	ldr	r3, [r4, #16]
 800bf54:	3301      	adds	r3, #1
 800bf56:	6123      	str	r3, [r4, #16]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	3b01      	subs	r3, #1
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	607b      	str	r3, [r7, #4]
 800bf60:	f340 8084 	ble.w	800c06c <_scanf_float+0x278>
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	3301      	adds	r3, #1
 800bf68:	603b      	str	r3, [r7, #0]
 800bf6a:	e766      	b.n	800be3a <_scanf_float+0x46>
 800bf6c:	eb1a 0f05 	cmn.w	sl, r5
 800bf70:	f47f af70 	bne.w	800be54 <_scanf_float+0x60>
 800bf74:	6822      	ldr	r2, [r4, #0]
 800bf76:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800bf7a:	6022      	str	r2, [r4, #0]
 800bf7c:	f806 3b01 	strb.w	r3, [r6], #1
 800bf80:	e7e4      	b.n	800bf4c <_scanf_float+0x158>
 800bf82:	6822      	ldr	r2, [r4, #0]
 800bf84:	0610      	lsls	r0, r2, #24
 800bf86:	f57f af65 	bpl.w	800be54 <_scanf_float+0x60>
 800bf8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf8e:	e7f4      	b.n	800bf7a <_scanf_float+0x186>
 800bf90:	f1ba 0f00 	cmp.w	sl, #0
 800bf94:	d10e      	bne.n	800bfb4 <_scanf_float+0x1c0>
 800bf96:	f1b9 0f00 	cmp.w	r9, #0
 800bf9a:	d10e      	bne.n	800bfba <_scanf_float+0x1c6>
 800bf9c:	6822      	ldr	r2, [r4, #0]
 800bf9e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bfa2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bfa6:	d108      	bne.n	800bfba <_scanf_float+0x1c6>
 800bfa8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bfac:	6022      	str	r2, [r4, #0]
 800bfae:	f04f 0a01 	mov.w	sl, #1
 800bfb2:	e7e3      	b.n	800bf7c <_scanf_float+0x188>
 800bfb4:	f1ba 0f02 	cmp.w	sl, #2
 800bfb8:	d055      	beq.n	800c066 <_scanf_float+0x272>
 800bfba:	2d01      	cmp	r5, #1
 800bfbc:	d002      	beq.n	800bfc4 <_scanf_float+0x1d0>
 800bfbe:	2d04      	cmp	r5, #4
 800bfc0:	f47f af48 	bne.w	800be54 <_scanf_float+0x60>
 800bfc4:	3501      	adds	r5, #1
 800bfc6:	b2ed      	uxtb	r5, r5
 800bfc8:	e7d8      	b.n	800bf7c <_scanf_float+0x188>
 800bfca:	f1ba 0f01 	cmp.w	sl, #1
 800bfce:	f47f af41 	bne.w	800be54 <_scanf_float+0x60>
 800bfd2:	f04f 0a02 	mov.w	sl, #2
 800bfd6:	e7d1      	b.n	800bf7c <_scanf_float+0x188>
 800bfd8:	b97d      	cbnz	r5, 800bffa <_scanf_float+0x206>
 800bfda:	f1b9 0f00 	cmp.w	r9, #0
 800bfde:	f47f af3c 	bne.w	800be5a <_scanf_float+0x66>
 800bfe2:	6822      	ldr	r2, [r4, #0]
 800bfe4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bfe8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bfec:	f47f af39 	bne.w	800be62 <_scanf_float+0x6e>
 800bff0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bff4:	6022      	str	r2, [r4, #0]
 800bff6:	2501      	movs	r5, #1
 800bff8:	e7c0      	b.n	800bf7c <_scanf_float+0x188>
 800bffa:	2d03      	cmp	r5, #3
 800bffc:	d0e2      	beq.n	800bfc4 <_scanf_float+0x1d0>
 800bffe:	2d05      	cmp	r5, #5
 800c000:	e7de      	b.n	800bfc0 <_scanf_float+0x1cc>
 800c002:	2d02      	cmp	r5, #2
 800c004:	f47f af26 	bne.w	800be54 <_scanf_float+0x60>
 800c008:	2503      	movs	r5, #3
 800c00a:	e7b7      	b.n	800bf7c <_scanf_float+0x188>
 800c00c:	2d06      	cmp	r5, #6
 800c00e:	f47f af21 	bne.w	800be54 <_scanf_float+0x60>
 800c012:	2507      	movs	r5, #7
 800c014:	e7b2      	b.n	800bf7c <_scanf_float+0x188>
 800c016:	6822      	ldr	r2, [r4, #0]
 800c018:	0591      	lsls	r1, r2, #22
 800c01a:	f57f af1b 	bpl.w	800be54 <_scanf_float+0x60>
 800c01e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c022:	6022      	str	r2, [r4, #0]
 800c024:	f8cd 9004 	str.w	r9, [sp, #4]
 800c028:	e7a8      	b.n	800bf7c <_scanf_float+0x188>
 800c02a:	6822      	ldr	r2, [r4, #0]
 800c02c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c030:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c034:	d006      	beq.n	800c044 <_scanf_float+0x250>
 800c036:	0550      	lsls	r0, r2, #21
 800c038:	f57f af0c 	bpl.w	800be54 <_scanf_float+0x60>
 800c03c:	f1b9 0f00 	cmp.w	r9, #0
 800c040:	f43f af0f 	beq.w	800be62 <_scanf_float+0x6e>
 800c044:	0591      	lsls	r1, r2, #22
 800c046:	bf58      	it	pl
 800c048:	9901      	ldrpl	r1, [sp, #4]
 800c04a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c04e:	bf58      	it	pl
 800c050:	eba9 0101 	subpl.w	r1, r9, r1
 800c054:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c058:	bf58      	it	pl
 800c05a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c05e:	6022      	str	r2, [r4, #0]
 800c060:	f04f 0900 	mov.w	r9, #0
 800c064:	e78a      	b.n	800bf7c <_scanf_float+0x188>
 800c066:	f04f 0a03 	mov.w	sl, #3
 800c06a:	e787      	b.n	800bf7c <_scanf_float+0x188>
 800c06c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c070:	4639      	mov	r1, r7
 800c072:	4640      	mov	r0, r8
 800c074:	4798      	blx	r3
 800c076:	2800      	cmp	r0, #0
 800c078:	f43f aedf 	beq.w	800be3a <_scanf_float+0x46>
 800c07c:	e6ea      	b.n	800be54 <_scanf_float+0x60>
 800c07e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c082:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c086:	463a      	mov	r2, r7
 800c088:	4640      	mov	r0, r8
 800c08a:	4798      	blx	r3
 800c08c:	6923      	ldr	r3, [r4, #16]
 800c08e:	3b01      	subs	r3, #1
 800c090:	6123      	str	r3, [r4, #16]
 800c092:	e6ec      	b.n	800be6e <_scanf_float+0x7a>
 800c094:	1e6b      	subs	r3, r5, #1
 800c096:	2b06      	cmp	r3, #6
 800c098:	d825      	bhi.n	800c0e6 <_scanf_float+0x2f2>
 800c09a:	2d02      	cmp	r5, #2
 800c09c:	d836      	bhi.n	800c10c <_scanf_float+0x318>
 800c09e:	455e      	cmp	r6, fp
 800c0a0:	f67f aee8 	bls.w	800be74 <_scanf_float+0x80>
 800c0a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c0a8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c0ac:	463a      	mov	r2, r7
 800c0ae:	4640      	mov	r0, r8
 800c0b0:	4798      	blx	r3
 800c0b2:	6923      	ldr	r3, [r4, #16]
 800c0b4:	3b01      	subs	r3, #1
 800c0b6:	6123      	str	r3, [r4, #16]
 800c0b8:	e7f1      	b.n	800c09e <_scanf_float+0x2aa>
 800c0ba:	9802      	ldr	r0, [sp, #8]
 800c0bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c0c0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c0c4:	9002      	str	r0, [sp, #8]
 800c0c6:	463a      	mov	r2, r7
 800c0c8:	4640      	mov	r0, r8
 800c0ca:	4798      	blx	r3
 800c0cc:	6923      	ldr	r3, [r4, #16]
 800c0ce:	3b01      	subs	r3, #1
 800c0d0:	6123      	str	r3, [r4, #16]
 800c0d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c0d6:	fa5f fa8a 	uxtb.w	sl, sl
 800c0da:	f1ba 0f02 	cmp.w	sl, #2
 800c0de:	d1ec      	bne.n	800c0ba <_scanf_float+0x2c6>
 800c0e0:	3d03      	subs	r5, #3
 800c0e2:	b2ed      	uxtb	r5, r5
 800c0e4:	1b76      	subs	r6, r6, r5
 800c0e6:	6823      	ldr	r3, [r4, #0]
 800c0e8:	05da      	lsls	r2, r3, #23
 800c0ea:	d52f      	bpl.n	800c14c <_scanf_float+0x358>
 800c0ec:	055b      	lsls	r3, r3, #21
 800c0ee:	d510      	bpl.n	800c112 <_scanf_float+0x31e>
 800c0f0:	455e      	cmp	r6, fp
 800c0f2:	f67f aebf 	bls.w	800be74 <_scanf_float+0x80>
 800c0f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c0fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c0fe:	463a      	mov	r2, r7
 800c100:	4640      	mov	r0, r8
 800c102:	4798      	blx	r3
 800c104:	6923      	ldr	r3, [r4, #16]
 800c106:	3b01      	subs	r3, #1
 800c108:	6123      	str	r3, [r4, #16]
 800c10a:	e7f1      	b.n	800c0f0 <_scanf_float+0x2fc>
 800c10c:	46aa      	mov	sl, r5
 800c10e:	9602      	str	r6, [sp, #8]
 800c110:	e7df      	b.n	800c0d2 <_scanf_float+0x2de>
 800c112:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c116:	6923      	ldr	r3, [r4, #16]
 800c118:	2965      	cmp	r1, #101	; 0x65
 800c11a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c11e:	f106 35ff 	add.w	r5, r6, #4294967295
 800c122:	6123      	str	r3, [r4, #16]
 800c124:	d00c      	beq.n	800c140 <_scanf_float+0x34c>
 800c126:	2945      	cmp	r1, #69	; 0x45
 800c128:	d00a      	beq.n	800c140 <_scanf_float+0x34c>
 800c12a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c12e:	463a      	mov	r2, r7
 800c130:	4640      	mov	r0, r8
 800c132:	4798      	blx	r3
 800c134:	6923      	ldr	r3, [r4, #16]
 800c136:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c13a:	3b01      	subs	r3, #1
 800c13c:	1eb5      	subs	r5, r6, #2
 800c13e:	6123      	str	r3, [r4, #16]
 800c140:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c144:	463a      	mov	r2, r7
 800c146:	4640      	mov	r0, r8
 800c148:	4798      	blx	r3
 800c14a:	462e      	mov	r6, r5
 800c14c:	6825      	ldr	r5, [r4, #0]
 800c14e:	f015 0510 	ands.w	r5, r5, #16
 800c152:	d159      	bne.n	800c208 <_scanf_float+0x414>
 800c154:	7035      	strb	r5, [r6, #0]
 800c156:	6823      	ldr	r3, [r4, #0]
 800c158:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c15c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c160:	d11b      	bne.n	800c19a <_scanf_float+0x3a6>
 800c162:	9b01      	ldr	r3, [sp, #4]
 800c164:	454b      	cmp	r3, r9
 800c166:	eba3 0209 	sub.w	r2, r3, r9
 800c16a:	d123      	bne.n	800c1b4 <_scanf_float+0x3c0>
 800c16c:	2200      	movs	r2, #0
 800c16e:	4659      	mov	r1, fp
 800c170:	4640      	mov	r0, r8
 800c172:	f000 ff57 	bl	800d024 <_strtod_r>
 800c176:	6822      	ldr	r2, [r4, #0]
 800c178:	9b03      	ldr	r3, [sp, #12]
 800c17a:	f012 0f02 	tst.w	r2, #2
 800c17e:	ec57 6b10 	vmov	r6, r7, d0
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	d021      	beq.n	800c1ca <_scanf_float+0x3d6>
 800c186:	9903      	ldr	r1, [sp, #12]
 800c188:	1d1a      	adds	r2, r3, #4
 800c18a:	600a      	str	r2, [r1, #0]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	e9c3 6700 	strd	r6, r7, [r3]
 800c192:	68e3      	ldr	r3, [r4, #12]
 800c194:	3301      	adds	r3, #1
 800c196:	60e3      	str	r3, [r4, #12]
 800c198:	e66d      	b.n	800be76 <_scanf_float+0x82>
 800c19a:	9b04      	ldr	r3, [sp, #16]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d0e5      	beq.n	800c16c <_scanf_float+0x378>
 800c1a0:	9905      	ldr	r1, [sp, #20]
 800c1a2:	230a      	movs	r3, #10
 800c1a4:	462a      	mov	r2, r5
 800c1a6:	3101      	adds	r1, #1
 800c1a8:	4640      	mov	r0, r8
 800c1aa:	f000 ffc3 	bl	800d134 <_strtol_r>
 800c1ae:	9b04      	ldr	r3, [sp, #16]
 800c1b0:	9e05      	ldr	r6, [sp, #20]
 800c1b2:	1ac2      	subs	r2, r0, r3
 800c1b4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c1b8:	429e      	cmp	r6, r3
 800c1ba:	bf28      	it	cs
 800c1bc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c1c0:	4912      	ldr	r1, [pc, #72]	; (800c20c <_scanf_float+0x418>)
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	f000 f8a6 	bl	800c314 <siprintf>
 800c1c8:	e7d0      	b.n	800c16c <_scanf_float+0x378>
 800c1ca:	9903      	ldr	r1, [sp, #12]
 800c1cc:	f012 0f04 	tst.w	r2, #4
 800c1d0:	f103 0204 	add.w	r2, r3, #4
 800c1d4:	600a      	str	r2, [r1, #0]
 800c1d6:	d1d9      	bne.n	800c18c <_scanf_float+0x398>
 800c1d8:	f8d3 8000 	ldr.w	r8, [r3]
 800c1dc:	ee10 2a10 	vmov	r2, s0
 800c1e0:	ee10 0a10 	vmov	r0, s0
 800c1e4:	463b      	mov	r3, r7
 800c1e6:	4639      	mov	r1, r7
 800c1e8:	f7f4 fcb0 	bl	8000b4c <__aeabi_dcmpun>
 800c1ec:	b128      	cbz	r0, 800c1fa <_scanf_float+0x406>
 800c1ee:	4808      	ldr	r0, [pc, #32]	; (800c210 <_scanf_float+0x41c>)
 800c1f0:	f000 f88a 	bl	800c308 <nanf>
 800c1f4:	ed88 0a00 	vstr	s0, [r8]
 800c1f8:	e7cb      	b.n	800c192 <_scanf_float+0x39e>
 800c1fa:	4630      	mov	r0, r6
 800c1fc:	4639      	mov	r1, r7
 800c1fe:	f7f4 fd03 	bl	8000c08 <__aeabi_d2f>
 800c202:	f8c8 0000 	str.w	r0, [r8]
 800c206:	e7c4      	b.n	800c192 <_scanf_float+0x39e>
 800c208:	2500      	movs	r5, #0
 800c20a:	e634      	b.n	800be76 <_scanf_float+0x82>
 800c20c:	08011798 	.word	0x08011798
 800c210:	08011ba0 	.word	0x08011ba0

0800c214 <cleanup_glue>:
 800c214:	b538      	push	{r3, r4, r5, lr}
 800c216:	460c      	mov	r4, r1
 800c218:	6809      	ldr	r1, [r1, #0]
 800c21a:	4605      	mov	r5, r0
 800c21c:	b109      	cbz	r1, 800c222 <cleanup_glue+0xe>
 800c21e:	f7ff fff9 	bl	800c214 <cleanup_glue>
 800c222:	4621      	mov	r1, r4
 800c224:	4628      	mov	r0, r5
 800c226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c22a:	f002 bf69 	b.w	800f100 <_free_r>
	...

0800c230 <_reclaim_reent>:
 800c230:	4b2c      	ldr	r3, [pc, #176]	; (800c2e4 <_reclaim_reent+0xb4>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4283      	cmp	r3, r0
 800c236:	b570      	push	{r4, r5, r6, lr}
 800c238:	4604      	mov	r4, r0
 800c23a:	d051      	beq.n	800c2e0 <_reclaim_reent+0xb0>
 800c23c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c23e:	b143      	cbz	r3, 800c252 <_reclaim_reent+0x22>
 800c240:	68db      	ldr	r3, [r3, #12]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d14a      	bne.n	800c2dc <_reclaim_reent+0xac>
 800c246:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c248:	6819      	ldr	r1, [r3, #0]
 800c24a:	b111      	cbz	r1, 800c252 <_reclaim_reent+0x22>
 800c24c:	4620      	mov	r0, r4
 800c24e:	f002 ff57 	bl	800f100 <_free_r>
 800c252:	6961      	ldr	r1, [r4, #20]
 800c254:	b111      	cbz	r1, 800c25c <_reclaim_reent+0x2c>
 800c256:	4620      	mov	r0, r4
 800c258:	f002 ff52 	bl	800f100 <_free_r>
 800c25c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c25e:	b111      	cbz	r1, 800c266 <_reclaim_reent+0x36>
 800c260:	4620      	mov	r0, r4
 800c262:	f002 ff4d 	bl	800f100 <_free_r>
 800c266:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c268:	b111      	cbz	r1, 800c270 <_reclaim_reent+0x40>
 800c26a:	4620      	mov	r0, r4
 800c26c:	f002 ff48 	bl	800f100 <_free_r>
 800c270:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c272:	b111      	cbz	r1, 800c27a <_reclaim_reent+0x4a>
 800c274:	4620      	mov	r0, r4
 800c276:	f002 ff43 	bl	800f100 <_free_r>
 800c27a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c27c:	b111      	cbz	r1, 800c284 <_reclaim_reent+0x54>
 800c27e:	4620      	mov	r0, r4
 800c280:	f002 ff3e 	bl	800f100 <_free_r>
 800c284:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c286:	b111      	cbz	r1, 800c28e <_reclaim_reent+0x5e>
 800c288:	4620      	mov	r0, r4
 800c28a:	f002 ff39 	bl	800f100 <_free_r>
 800c28e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c290:	b111      	cbz	r1, 800c298 <_reclaim_reent+0x68>
 800c292:	4620      	mov	r0, r4
 800c294:	f002 ff34 	bl	800f100 <_free_r>
 800c298:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c29a:	b111      	cbz	r1, 800c2a2 <_reclaim_reent+0x72>
 800c29c:	4620      	mov	r0, r4
 800c29e:	f002 ff2f 	bl	800f100 <_free_r>
 800c2a2:	69a3      	ldr	r3, [r4, #24]
 800c2a4:	b1e3      	cbz	r3, 800c2e0 <_reclaim_reent+0xb0>
 800c2a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	4798      	blx	r3
 800c2ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c2ae:	b1b9      	cbz	r1, 800c2e0 <_reclaim_reent+0xb0>
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c2b6:	f7ff bfad 	b.w	800c214 <cleanup_glue>
 800c2ba:	5949      	ldr	r1, [r1, r5]
 800c2bc:	b941      	cbnz	r1, 800c2d0 <_reclaim_reent+0xa0>
 800c2be:	3504      	adds	r5, #4
 800c2c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2c2:	2d80      	cmp	r5, #128	; 0x80
 800c2c4:	68d9      	ldr	r1, [r3, #12]
 800c2c6:	d1f8      	bne.n	800c2ba <_reclaim_reent+0x8a>
 800c2c8:	4620      	mov	r0, r4
 800c2ca:	f002 ff19 	bl	800f100 <_free_r>
 800c2ce:	e7ba      	b.n	800c246 <_reclaim_reent+0x16>
 800c2d0:	680e      	ldr	r6, [r1, #0]
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	f002 ff14 	bl	800f100 <_free_r>
 800c2d8:	4631      	mov	r1, r6
 800c2da:	e7ef      	b.n	800c2bc <_reclaim_reent+0x8c>
 800c2dc:	2500      	movs	r5, #0
 800c2de:	e7ef      	b.n	800c2c0 <_reclaim_reent+0x90>
 800c2e0:	bd70      	pop	{r4, r5, r6, pc}
 800c2e2:	bf00      	nop
 800c2e4:	200000a8 	.word	0x200000a8

0800c2e8 <_sbrk_r>:
 800c2e8:	b538      	push	{r3, r4, r5, lr}
 800c2ea:	4d06      	ldr	r5, [pc, #24]	; (800c304 <_sbrk_r+0x1c>)
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	4608      	mov	r0, r1
 800c2f2:	602b      	str	r3, [r5, #0]
 800c2f4:	f7f6 fa92 	bl	800281c <_sbrk>
 800c2f8:	1c43      	adds	r3, r0, #1
 800c2fa:	d102      	bne.n	800c302 <_sbrk_r+0x1a>
 800c2fc:	682b      	ldr	r3, [r5, #0]
 800c2fe:	b103      	cbz	r3, 800c302 <_sbrk_r+0x1a>
 800c300:	6023      	str	r3, [r4, #0]
 800c302:	bd38      	pop	{r3, r4, r5, pc}
 800c304:	20008c60 	.word	0x20008c60

0800c308 <nanf>:
 800c308:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c310 <nanf+0x8>
 800c30c:	4770      	bx	lr
 800c30e:	bf00      	nop
 800c310:	7fc00000 	.word	0x7fc00000

0800c314 <siprintf>:
 800c314:	b40e      	push	{r1, r2, r3}
 800c316:	b500      	push	{lr}
 800c318:	b09c      	sub	sp, #112	; 0x70
 800c31a:	ab1d      	add	r3, sp, #116	; 0x74
 800c31c:	9002      	str	r0, [sp, #8]
 800c31e:	9006      	str	r0, [sp, #24]
 800c320:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c324:	4809      	ldr	r0, [pc, #36]	; (800c34c <siprintf+0x38>)
 800c326:	9107      	str	r1, [sp, #28]
 800c328:	9104      	str	r1, [sp, #16]
 800c32a:	4909      	ldr	r1, [pc, #36]	; (800c350 <siprintf+0x3c>)
 800c32c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c330:	9105      	str	r1, [sp, #20]
 800c332:	6800      	ldr	r0, [r0, #0]
 800c334:	9301      	str	r3, [sp, #4]
 800c336:	a902      	add	r1, sp, #8
 800c338:	f002 ff8a 	bl	800f250 <_svfiprintf_r>
 800c33c:	9b02      	ldr	r3, [sp, #8]
 800c33e:	2200      	movs	r2, #0
 800c340:	701a      	strb	r2, [r3, #0]
 800c342:	b01c      	add	sp, #112	; 0x70
 800c344:	f85d eb04 	ldr.w	lr, [sp], #4
 800c348:	b003      	add	sp, #12
 800c34a:	4770      	bx	lr
 800c34c:	200000a8 	.word	0x200000a8
 800c350:	ffff0208 	.word	0xffff0208

0800c354 <__sread>:
 800c354:	b510      	push	{r4, lr}
 800c356:	460c      	mov	r4, r1
 800c358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c35c:	f003 f878 	bl	800f450 <_read_r>
 800c360:	2800      	cmp	r0, #0
 800c362:	bfab      	itete	ge
 800c364:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c366:	89a3      	ldrhlt	r3, [r4, #12]
 800c368:	181b      	addge	r3, r3, r0
 800c36a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c36e:	bfac      	ite	ge
 800c370:	6563      	strge	r3, [r4, #84]	; 0x54
 800c372:	81a3      	strhlt	r3, [r4, #12]
 800c374:	bd10      	pop	{r4, pc}

0800c376 <__swrite>:
 800c376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c37a:	461f      	mov	r7, r3
 800c37c:	898b      	ldrh	r3, [r1, #12]
 800c37e:	05db      	lsls	r3, r3, #23
 800c380:	4605      	mov	r5, r0
 800c382:	460c      	mov	r4, r1
 800c384:	4616      	mov	r6, r2
 800c386:	d505      	bpl.n	800c394 <__swrite+0x1e>
 800c388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c38c:	2302      	movs	r3, #2
 800c38e:	2200      	movs	r2, #0
 800c390:	f002 f9a6 	bl	800e6e0 <_lseek_r>
 800c394:	89a3      	ldrh	r3, [r4, #12]
 800c396:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c39a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c39e:	81a3      	strh	r3, [r4, #12]
 800c3a0:	4632      	mov	r2, r6
 800c3a2:	463b      	mov	r3, r7
 800c3a4:	4628      	mov	r0, r5
 800c3a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3aa:	f000 bec5 	b.w	800d138 <_write_r>

0800c3ae <__sseek>:
 800c3ae:	b510      	push	{r4, lr}
 800c3b0:	460c      	mov	r4, r1
 800c3b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3b6:	f002 f993 	bl	800e6e0 <_lseek_r>
 800c3ba:	1c43      	adds	r3, r0, #1
 800c3bc:	89a3      	ldrh	r3, [r4, #12]
 800c3be:	bf15      	itete	ne
 800c3c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c3c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c3c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c3ca:	81a3      	strheq	r3, [r4, #12]
 800c3cc:	bf18      	it	ne
 800c3ce:	81a3      	strhne	r3, [r4, #12]
 800c3d0:	bd10      	pop	{r4, pc}

0800c3d2 <__sclose>:
 800c3d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3d6:	f000 bec1 	b.w	800d15c <_close_r>

0800c3da <sulp>:
 800c3da:	b570      	push	{r4, r5, r6, lr}
 800c3dc:	4604      	mov	r4, r0
 800c3de:	460d      	mov	r5, r1
 800c3e0:	ec45 4b10 	vmov	d0, r4, r5
 800c3e4:	4616      	mov	r6, r2
 800c3e6:	f002 fd25 	bl	800ee34 <__ulp>
 800c3ea:	ec51 0b10 	vmov	r0, r1, d0
 800c3ee:	b17e      	cbz	r6, 800c410 <sulp+0x36>
 800c3f0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c3f4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	dd09      	ble.n	800c410 <sulp+0x36>
 800c3fc:	051b      	lsls	r3, r3, #20
 800c3fe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c402:	2400      	movs	r4, #0
 800c404:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c408:	4622      	mov	r2, r4
 800c40a:	462b      	mov	r3, r5
 800c40c:	f7f4 f904 	bl	8000618 <__aeabi_dmul>
 800c410:	bd70      	pop	{r4, r5, r6, pc}
 800c412:	0000      	movs	r0, r0
 800c414:	0000      	movs	r0, r0
	...

0800c418 <_strtod_l>:
 800c418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c41c:	ed2d 8b02 	vpush	{d8}
 800c420:	b09d      	sub	sp, #116	; 0x74
 800c422:	461f      	mov	r7, r3
 800c424:	2300      	movs	r3, #0
 800c426:	9318      	str	r3, [sp, #96]	; 0x60
 800c428:	4ba2      	ldr	r3, [pc, #648]	; (800c6b4 <_strtod_l+0x29c>)
 800c42a:	9213      	str	r2, [sp, #76]	; 0x4c
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	9305      	str	r3, [sp, #20]
 800c430:	4604      	mov	r4, r0
 800c432:	4618      	mov	r0, r3
 800c434:	4688      	mov	r8, r1
 800c436:	f7f3 fedb 	bl	80001f0 <strlen>
 800c43a:	f04f 0a00 	mov.w	sl, #0
 800c43e:	4605      	mov	r5, r0
 800c440:	f04f 0b00 	mov.w	fp, #0
 800c444:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c448:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c44a:	781a      	ldrb	r2, [r3, #0]
 800c44c:	2a2b      	cmp	r2, #43	; 0x2b
 800c44e:	d04e      	beq.n	800c4ee <_strtod_l+0xd6>
 800c450:	d83b      	bhi.n	800c4ca <_strtod_l+0xb2>
 800c452:	2a0d      	cmp	r2, #13
 800c454:	d834      	bhi.n	800c4c0 <_strtod_l+0xa8>
 800c456:	2a08      	cmp	r2, #8
 800c458:	d834      	bhi.n	800c4c4 <_strtod_l+0xac>
 800c45a:	2a00      	cmp	r2, #0
 800c45c:	d03e      	beq.n	800c4dc <_strtod_l+0xc4>
 800c45e:	2300      	movs	r3, #0
 800c460:	930a      	str	r3, [sp, #40]	; 0x28
 800c462:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c464:	7833      	ldrb	r3, [r6, #0]
 800c466:	2b30      	cmp	r3, #48	; 0x30
 800c468:	f040 80b0 	bne.w	800c5cc <_strtod_l+0x1b4>
 800c46c:	7873      	ldrb	r3, [r6, #1]
 800c46e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c472:	2b58      	cmp	r3, #88	; 0x58
 800c474:	d168      	bne.n	800c548 <_strtod_l+0x130>
 800c476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c478:	9301      	str	r3, [sp, #4]
 800c47a:	ab18      	add	r3, sp, #96	; 0x60
 800c47c:	9702      	str	r7, [sp, #8]
 800c47e:	9300      	str	r3, [sp, #0]
 800c480:	4a8d      	ldr	r2, [pc, #564]	; (800c6b8 <_strtod_l+0x2a0>)
 800c482:	ab19      	add	r3, sp, #100	; 0x64
 800c484:	a917      	add	r1, sp, #92	; 0x5c
 800c486:	4620      	mov	r0, r4
 800c488:	f001 fe1e 	bl	800e0c8 <__gethex>
 800c48c:	f010 0707 	ands.w	r7, r0, #7
 800c490:	4605      	mov	r5, r0
 800c492:	d005      	beq.n	800c4a0 <_strtod_l+0x88>
 800c494:	2f06      	cmp	r7, #6
 800c496:	d12c      	bne.n	800c4f2 <_strtod_l+0xda>
 800c498:	3601      	adds	r6, #1
 800c49a:	2300      	movs	r3, #0
 800c49c:	9617      	str	r6, [sp, #92]	; 0x5c
 800c49e:	930a      	str	r3, [sp, #40]	; 0x28
 800c4a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	f040 8590 	bne.w	800cfc8 <_strtod_l+0xbb0>
 800c4a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4aa:	b1eb      	cbz	r3, 800c4e8 <_strtod_l+0xd0>
 800c4ac:	4652      	mov	r2, sl
 800c4ae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c4b2:	ec43 2b10 	vmov	d0, r2, r3
 800c4b6:	b01d      	add	sp, #116	; 0x74
 800c4b8:	ecbd 8b02 	vpop	{d8}
 800c4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4c0:	2a20      	cmp	r2, #32
 800c4c2:	d1cc      	bne.n	800c45e <_strtod_l+0x46>
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	9317      	str	r3, [sp, #92]	; 0x5c
 800c4c8:	e7be      	b.n	800c448 <_strtod_l+0x30>
 800c4ca:	2a2d      	cmp	r2, #45	; 0x2d
 800c4cc:	d1c7      	bne.n	800c45e <_strtod_l+0x46>
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	920a      	str	r2, [sp, #40]	; 0x28
 800c4d2:	1c5a      	adds	r2, r3, #1
 800c4d4:	9217      	str	r2, [sp, #92]	; 0x5c
 800c4d6:	785b      	ldrb	r3, [r3, #1]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d1c2      	bne.n	800c462 <_strtod_l+0x4a>
 800c4dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c4de:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	f040 856e 	bne.w	800cfc4 <_strtod_l+0xbac>
 800c4e8:	4652      	mov	r2, sl
 800c4ea:	465b      	mov	r3, fp
 800c4ec:	e7e1      	b.n	800c4b2 <_strtod_l+0x9a>
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	e7ee      	b.n	800c4d0 <_strtod_l+0xb8>
 800c4f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c4f4:	b13a      	cbz	r2, 800c506 <_strtod_l+0xee>
 800c4f6:	2135      	movs	r1, #53	; 0x35
 800c4f8:	a81a      	add	r0, sp, #104	; 0x68
 800c4fa:	f002 fda6 	bl	800f04a <__copybits>
 800c4fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c500:	4620      	mov	r0, r4
 800c502:	f002 f965 	bl	800e7d0 <_Bfree>
 800c506:	3f01      	subs	r7, #1
 800c508:	2f04      	cmp	r7, #4
 800c50a:	d806      	bhi.n	800c51a <_strtod_l+0x102>
 800c50c:	e8df f007 	tbb	[pc, r7]
 800c510:	1714030a 	.word	0x1714030a
 800c514:	0a          	.byte	0x0a
 800c515:	00          	.byte	0x00
 800c516:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c51a:	0728      	lsls	r0, r5, #28
 800c51c:	d5c0      	bpl.n	800c4a0 <_strtod_l+0x88>
 800c51e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c522:	e7bd      	b.n	800c4a0 <_strtod_l+0x88>
 800c524:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c528:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c52a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c52e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c532:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c536:	e7f0      	b.n	800c51a <_strtod_l+0x102>
 800c538:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c6bc <_strtod_l+0x2a4>
 800c53c:	e7ed      	b.n	800c51a <_strtod_l+0x102>
 800c53e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c542:	f04f 3aff 	mov.w	sl, #4294967295
 800c546:	e7e8      	b.n	800c51a <_strtod_l+0x102>
 800c548:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c54a:	1c5a      	adds	r2, r3, #1
 800c54c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c54e:	785b      	ldrb	r3, [r3, #1]
 800c550:	2b30      	cmp	r3, #48	; 0x30
 800c552:	d0f9      	beq.n	800c548 <_strtod_l+0x130>
 800c554:	2b00      	cmp	r3, #0
 800c556:	d0a3      	beq.n	800c4a0 <_strtod_l+0x88>
 800c558:	2301      	movs	r3, #1
 800c55a:	f04f 0900 	mov.w	r9, #0
 800c55e:	9304      	str	r3, [sp, #16]
 800c560:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c562:	9308      	str	r3, [sp, #32]
 800c564:	f8cd 901c 	str.w	r9, [sp, #28]
 800c568:	464f      	mov	r7, r9
 800c56a:	220a      	movs	r2, #10
 800c56c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c56e:	7806      	ldrb	r6, [r0, #0]
 800c570:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c574:	b2d9      	uxtb	r1, r3
 800c576:	2909      	cmp	r1, #9
 800c578:	d92a      	bls.n	800c5d0 <_strtod_l+0x1b8>
 800c57a:	9905      	ldr	r1, [sp, #20]
 800c57c:	462a      	mov	r2, r5
 800c57e:	f002 ff83 	bl	800f488 <strncmp>
 800c582:	b398      	cbz	r0, 800c5ec <_strtod_l+0x1d4>
 800c584:	2000      	movs	r0, #0
 800c586:	4632      	mov	r2, r6
 800c588:	463d      	mov	r5, r7
 800c58a:	9005      	str	r0, [sp, #20]
 800c58c:	4603      	mov	r3, r0
 800c58e:	2a65      	cmp	r2, #101	; 0x65
 800c590:	d001      	beq.n	800c596 <_strtod_l+0x17e>
 800c592:	2a45      	cmp	r2, #69	; 0x45
 800c594:	d118      	bne.n	800c5c8 <_strtod_l+0x1b0>
 800c596:	b91d      	cbnz	r5, 800c5a0 <_strtod_l+0x188>
 800c598:	9a04      	ldr	r2, [sp, #16]
 800c59a:	4302      	orrs	r2, r0
 800c59c:	d09e      	beq.n	800c4dc <_strtod_l+0xc4>
 800c59e:	2500      	movs	r5, #0
 800c5a0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c5a4:	f108 0201 	add.w	r2, r8, #1
 800c5a8:	9217      	str	r2, [sp, #92]	; 0x5c
 800c5aa:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c5ae:	2a2b      	cmp	r2, #43	; 0x2b
 800c5b0:	d075      	beq.n	800c69e <_strtod_l+0x286>
 800c5b2:	2a2d      	cmp	r2, #45	; 0x2d
 800c5b4:	d07b      	beq.n	800c6ae <_strtod_l+0x296>
 800c5b6:	f04f 0c00 	mov.w	ip, #0
 800c5ba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c5be:	2909      	cmp	r1, #9
 800c5c0:	f240 8082 	bls.w	800c6c8 <_strtod_l+0x2b0>
 800c5c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c5c8:	2600      	movs	r6, #0
 800c5ca:	e09d      	b.n	800c708 <_strtod_l+0x2f0>
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	e7c4      	b.n	800c55a <_strtod_l+0x142>
 800c5d0:	2f08      	cmp	r7, #8
 800c5d2:	bfd8      	it	le
 800c5d4:	9907      	ldrle	r1, [sp, #28]
 800c5d6:	f100 0001 	add.w	r0, r0, #1
 800c5da:	bfda      	itte	le
 800c5dc:	fb02 3301 	mlale	r3, r2, r1, r3
 800c5e0:	9307      	strle	r3, [sp, #28]
 800c5e2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c5e6:	3701      	adds	r7, #1
 800c5e8:	9017      	str	r0, [sp, #92]	; 0x5c
 800c5ea:	e7bf      	b.n	800c56c <_strtod_l+0x154>
 800c5ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c5ee:	195a      	adds	r2, r3, r5
 800c5f0:	9217      	str	r2, [sp, #92]	; 0x5c
 800c5f2:	5d5a      	ldrb	r2, [r3, r5]
 800c5f4:	2f00      	cmp	r7, #0
 800c5f6:	d037      	beq.n	800c668 <_strtod_l+0x250>
 800c5f8:	9005      	str	r0, [sp, #20]
 800c5fa:	463d      	mov	r5, r7
 800c5fc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c600:	2b09      	cmp	r3, #9
 800c602:	d912      	bls.n	800c62a <_strtod_l+0x212>
 800c604:	2301      	movs	r3, #1
 800c606:	e7c2      	b.n	800c58e <_strtod_l+0x176>
 800c608:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c60a:	1c5a      	adds	r2, r3, #1
 800c60c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c60e:	785a      	ldrb	r2, [r3, #1]
 800c610:	3001      	adds	r0, #1
 800c612:	2a30      	cmp	r2, #48	; 0x30
 800c614:	d0f8      	beq.n	800c608 <_strtod_l+0x1f0>
 800c616:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c61a:	2b08      	cmp	r3, #8
 800c61c:	f200 84d9 	bhi.w	800cfd2 <_strtod_l+0xbba>
 800c620:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c622:	9005      	str	r0, [sp, #20]
 800c624:	2000      	movs	r0, #0
 800c626:	9308      	str	r3, [sp, #32]
 800c628:	4605      	mov	r5, r0
 800c62a:	3a30      	subs	r2, #48	; 0x30
 800c62c:	f100 0301 	add.w	r3, r0, #1
 800c630:	d014      	beq.n	800c65c <_strtod_l+0x244>
 800c632:	9905      	ldr	r1, [sp, #20]
 800c634:	4419      	add	r1, r3
 800c636:	9105      	str	r1, [sp, #20]
 800c638:	462b      	mov	r3, r5
 800c63a:	eb00 0e05 	add.w	lr, r0, r5
 800c63e:	210a      	movs	r1, #10
 800c640:	4573      	cmp	r3, lr
 800c642:	d113      	bne.n	800c66c <_strtod_l+0x254>
 800c644:	182b      	adds	r3, r5, r0
 800c646:	2b08      	cmp	r3, #8
 800c648:	f105 0501 	add.w	r5, r5, #1
 800c64c:	4405      	add	r5, r0
 800c64e:	dc1c      	bgt.n	800c68a <_strtod_l+0x272>
 800c650:	9907      	ldr	r1, [sp, #28]
 800c652:	230a      	movs	r3, #10
 800c654:	fb03 2301 	mla	r3, r3, r1, r2
 800c658:	9307      	str	r3, [sp, #28]
 800c65a:	2300      	movs	r3, #0
 800c65c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c65e:	1c51      	adds	r1, r2, #1
 800c660:	9117      	str	r1, [sp, #92]	; 0x5c
 800c662:	7852      	ldrb	r2, [r2, #1]
 800c664:	4618      	mov	r0, r3
 800c666:	e7c9      	b.n	800c5fc <_strtod_l+0x1e4>
 800c668:	4638      	mov	r0, r7
 800c66a:	e7d2      	b.n	800c612 <_strtod_l+0x1fa>
 800c66c:	2b08      	cmp	r3, #8
 800c66e:	dc04      	bgt.n	800c67a <_strtod_l+0x262>
 800c670:	9e07      	ldr	r6, [sp, #28]
 800c672:	434e      	muls	r6, r1
 800c674:	9607      	str	r6, [sp, #28]
 800c676:	3301      	adds	r3, #1
 800c678:	e7e2      	b.n	800c640 <_strtod_l+0x228>
 800c67a:	f103 0c01 	add.w	ip, r3, #1
 800c67e:	f1bc 0f10 	cmp.w	ip, #16
 800c682:	bfd8      	it	le
 800c684:	fb01 f909 	mulle.w	r9, r1, r9
 800c688:	e7f5      	b.n	800c676 <_strtod_l+0x25e>
 800c68a:	2d10      	cmp	r5, #16
 800c68c:	bfdc      	itt	le
 800c68e:	230a      	movle	r3, #10
 800c690:	fb03 2909 	mlale	r9, r3, r9, r2
 800c694:	e7e1      	b.n	800c65a <_strtod_l+0x242>
 800c696:	2300      	movs	r3, #0
 800c698:	9305      	str	r3, [sp, #20]
 800c69a:	2301      	movs	r3, #1
 800c69c:	e77c      	b.n	800c598 <_strtod_l+0x180>
 800c69e:	f04f 0c00 	mov.w	ip, #0
 800c6a2:	f108 0202 	add.w	r2, r8, #2
 800c6a6:	9217      	str	r2, [sp, #92]	; 0x5c
 800c6a8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c6ac:	e785      	b.n	800c5ba <_strtod_l+0x1a2>
 800c6ae:	f04f 0c01 	mov.w	ip, #1
 800c6b2:	e7f6      	b.n	800c6a2 <_strtod_l+0x28a>
 800c6b4:	080119e8 	.word	0x080119e8
 800c6b8:	080117a0 	.word	0x080117a0
 800c6bc:	7ff00000 	.word	0x7ff00000
 800c6c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c6c2:	1c51      	adds	r1, r2, #1
 800c6c4:	9117      	str	r1, [sp, #92]	; 0x5c
 800c6c6:	7852      	ldrb	r2, [r2, #1]
 800c6c8:	2a30      	cmp	r2, #48	; 0x30
 800c6ca:	d0f9      	beq.n	800c6c0 <_strtod_l+0x2a8>
 800c6cc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c6d0:	2908      	cmp	r1, #8
 800c6d2:	f63f af79 	bhi.w	800c5c8 <_strtod_l+0x1b0>
 800c6d6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c6da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c6dc:	9206      	str	r2, [sp, #24]
 800c6de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c6e0:	1c51      	adds	r1, r2, #1
 800c6e2:	9117      	str	r1, [sp, #92]	; 0x5c
 800c6e4:	7852      	ldrb	r2, [r2, #1]
 800c6e6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c6ea:	2e09      	cmp	r6, #9
 800c6ec:	d937      	bls.n	800c75e <_strtod_l+0x346>
 800c6ee:	9e06      	ldr	r6, [sp, #24]
 800c6f0:	1b89      	subs	r1, r1, r6
 800c6f2:	2908      	cmp	r1, #8
 800c6f4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c6f8:	dc02      	bgt.n	800c700 <_strtod_l+0x2e8>
 800c6fa:	4576      	cmp	r6, lr
 800c6fc:	bfa8      	it	ge
 800c6fe:	4676      	movge	r6, lr
 800c700:	f1bc 0f00 	cmp.w	ip, #0
 800c704:	d000      	beq.n	800c708 <_strtod_l+0x2f0>
 800c706:	4276      	negs	r6, r6
 800c708:	2d00      	cmp	r5, #0
 800c70a:	d14d      	bne.n	800c7a8 <_strtod_l+0x390>
 800c70c:	9904      	ldr	r1, [sp, #16]
 800c70e:	4301      	orrs	r1, r0
 800c710:	f47f aec6 	bne.w	800c4a0 <_strtod_l+0x88>
 800c714:	2b00      	cmp	r3, #0
 800c716:	f47f aee1 	bne.w	800c4dc <_strtod_l+0xc4>
 800c71a:	2a69      	cmp	r2, #105	; 0x69
 800c71c:	d027      	beq.n	800c76e <_strtod_l+0x356>
 800c71e:	dc24      	bgt.n	800c76a <_strtod_l+0x352>
 800c720:	2a49      	cmp	r2, #73	; 0x49
 800c722:	d024      	beq.n	800c76e <_strtod_l+0x356>
 800c724:	2a4e      	cmp	r2, #78	; 0x4e
 800c726:	f47f aed9 	bne.w	800c4dc <_strtod_l+0xc4>
 800c72a:	499f      	ldr	r1, [pc, #636]	; (800c9a8 <_strtod_l+0x590>)
 800c72c:	a817      	add	r0, sp, #92	; 0x5c
 800c72e:	f001 ff23 	bl	800e578 <__match>
 800c732:	2800      	cmp	r0, #0
 800c734:	f43f aed2 	beq.w	800c4dc <_strtod_l+0xc4>
 800c738:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	2b28      	cmp	r3, #40	; 0x28
 800c73e:	d12d      	bne.n	800c79c <_strtod_l+0x384>
 800c740:	499a      	ldr	r1, [pc, #616]	; (800c9ac <_strtod_l+0x594>)
 800c742:	aa1a      	add	r2, sp, #104	; 0x68
 800c744:	a817      	add	r0, sp, #92	; 0x5c
 800c746:	f001 ff2b 	bl	800e5a0 <__hexnan>
 800c74a:	2805      	cmp	r0, #5
 800c74c:	d126      	bne.n	800c79c <_strtod_l+0x384>
 800c74e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c750:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c754:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c758:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c75c:	e6a0      	b.n	800c4a0 <_strtod_l+0x88>
 800c75e:	210a      	movs	r1, #10
 800c760:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c764:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c768:	e7b9      	b.n	800c6de <_strtod_l+0x2c6>
 800c76a:	2a6e      	cmp	r2, #110	; 0x6e
 800c76c:	e7db      	b.n	800c726 <_strtod_l+0x30e>
 800c76e:	4990      	ldr	r1, [pc, #576]	; (800c9b0 <_strtod_l+0x598>)
 800c770:	a817      	add	r0, sp, #92	; 0x5c
 800c772:	f001 ff01 	bl	800e578 <__match>
 800c776:	2800      	cmp	r0, #0
 800c778:	f43f aeb0 	beq.w	800c4dc <_strtod_l+0xc4>
 800c77c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c77e:	498d      	ldr	r1, [pc, #564]	; (800c9b4 <_strtod_l+0x59c>)
 800c780:	3b01      	subs	r3, #1
 800c782:	a817      	add	r0, sp, #92	; 0x5c
 800c784:	9317      	str	r3, [sp, #92]	; 0x5c
 800c786:	f001 fef7 	bl	800e578 <__match>
 800c78a:	b910      	cbnz	r0, 800c792 <_strtod_l+0x37a>
 800c78c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c78e:	3301      	adds	r3, #1
 800c790:	9317      	str	r3, [sp, #92]	; 0x5c
 800c792:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c9c4 <_strtod_l+0x5ac>
 800c796:	f04f 0a00 	mov.w	sl, #0
 800c79a:	e681      	b.n	800c4a0 <_strtod_l+0x88>
 800c79c:	4886      	ldr	r0, [pc, #536]	; (800c9b8 <_strtod_l+0x5a0>)
 800c79e:	f002 fe6b 	bl	800f478 <nan>
 800c7a2:	ec5b ab10 	vmov	sl, fp, d0
 800c7a6:	e67b      	b.n	800c4a0 <_strtod_l+0x88>
 800c7a8:	9b05      	ldr	r3, [sp, #20]
 800c7aa:	9807      	ldr	r0, [sp, #28]
 800c7ac:	1af3      	subs	r3, r6, r3
 800c7ae:	2f00      	cmp	r7, #0
 800c7b0:	bf08      	it	eq
 800c7b2:	462f      	moveq	r7, r5
 800c7b4:	2d10      	cmp	r5, #16
 800c7b6:	9306      	str	r3, [sp, #24]
 800c7b8:	46a8      	mov	r8, r5
 800c7ba:	bfa8      	it	ge
 800c7bc:	f04f 0810 	movge.w	r8, #16
 800c7c0:	f7f3 feb0 	bl	8000524 <__aeabi_ui2d>
 800c7c4:	2d09      	cmp	r5, #9
 800c7c6:	4682      	mov	sl, r0
 800c7c8:	468b      	mov	fp, r1
 800c7ca:	dd13      	ble.n	800c7f4 <_strtod_l+0x3dc>
 800c7cc:	4b7b      	ldr	r3, [pc, #492]	; (800c9bc <_strtod_l+0x5a4>)
 800c7ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c7d2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c7d6:	f7f3 ff1f 	bl	8000618 <__aeabi_dmul>
 800c7da:	4682      	mov	sl, r0
 800c7dc:	4648      	mov	r0, r9
 800c7de:	468b      	mov	fp, r1
 800c7e0:	f7f3 fea0 	bl	8000524 <__aeabi_ui2d>
 800c7e4:	4602      	mov	r2, r0
 800c7e6:	460b      	mov	r3, r1
 800c7e8:	4650      	mov	r0, sl
 800c7ea:	4659      	mov	r1, fp
 800c7ec:	f7f3 fd5e 	bl	80002ac <__adddf3>
 800c7f0:	4682      	mov	sl, r0
 800c7f2:	468b      	mov	fp, r1
 800c7f4:	2d0f      	cmp	r5, #15
 800c7f6:	dc38      	bgt.n	800c86a <_strtod_l+0x452>
 800c7f8:	9b06      	ldr	r3, [sp, #24]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	f43f ae50 	beq.w	800c4a0 <_strtod_l+0x88>
 800c800:	dd24      	ble.n	800c84c <_strtod_l+0x434>
 800c802:	2b16      	cmp	r3, #22
 800c804:	dc0b      	bgt.n	800c81e <_strtod_l+0x406>
 800c806:	496d      	ldr	r1, [pc, #436]	; (800c9bc <_strtod_l+0x5a4>)
 800c808:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c80c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c810:	4652      	mov	r2, sl
 800c812:	465b      	mov	r3, fp
 800c814:	f7f3 ff00 	bl	8000618 <__aeabi_dmul>
 800c818:	4682      	mov	sl, r0
 800c81a:	468b      	mov	fp, r1
 800c81c:	e640      	b.n	800c4a0 <_strtod_l+0x88>
 800c81e:	9a06      	ldr	r2, [sp, #24]
 800c820:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c824:	4293      	cmp	r3, r2
 800c826:	db20      	blt.n	800c86a <_strtod_l+0x452>
 800c828:	4c64      	ldr	r4, [pc, #400]	; (800c9bc <_strtod_l+0x5a4>)
 800c82a:	f1c5 050f 	rsb	r5, r5, #15
 800c82e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c832:	4652      	mov	r2, sl
 800c834:	465b      	mov	r3, fp
 800c836:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c83a:	f7f3 feed 	bl	8000618 <__aeabi_dmul>
 800c83e:	9b06      	ldr	r3, [sp, #24]
 800c840:	1b5d      	subs	r5, r3, r5
 800c842:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c846:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c84a:	e7e3      	b.n	800c814 <_strtod_l+0x3fc>
 800c84c:	9b06      	ldr	r3, [sp, #24]
 800c84e:	3316      	adds	r3, #22
 800c850:	db0b      	blt.n	800c86a <_strtod_l+0x452>
 800c852:	9b05      	ldr	r3, [sp, #20]
 800c854:	1b9e      	subs	r6, r3, r6
 800c856:	4b59      	ldr	r3, [pc, #356]	; (800c9bc <_strtod_l+0x5a4>)
 800c858:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c85c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c860:	4650      	mov	r0, sl
 800c862:	4659      	mov	r1, fp
 800c864:	f7f4 f802 	bl	800086c <__aeabi_ddiv>
 800c868:	e7d6      	b.n	800c818 <_strtod_l+0x400>
 800c86a:	9b06      	ldr	r3, [sp, #24]
 800c86c:	eba5 0808 	sub.w	r8, r5, r8
 800c870:	4498      	add	r8, r3
 800c872:	f1b8 0f00 	cmp.w	r8, #0
 800c876:	dd74      	ble.n	800c962 <_strtod_l+0x54a>
 800c878:	f018 030f 	ands.w	r3, r8, #15
 800c87c:	d00a      	beq.n	800c894 <_strtod_l+0x47c>
 800c87e:	494f      	ldr	r1, [pc, #316]	; (800c9bc <_strtod_l+0x5a4>)
 800c880:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c884:	4652      	mov	r2, sl
 800c886:	465b      	mov	r3, fp
 800c888:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c88c:	f7f3 fec4 	bl	8000618 <__aeabi_dmul>
 800c890:	4682      	mov	sl, r0
 800c892:	468b      	mov	fp, r1
 800c894:	f038 080f 	bics.w	r8, r8, #15
 800c898:	d04f      	beq.n	800c93a <_strtod_l+0x522>
 800c89a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c89e:	dd22      	ble.n	800c8e6 <_strtod_l+0x4ce>
 800c8a0:	2500      	movs	r5, #0
 800c8a2:	462e      	mov	r6, r5
 800c8a4:	9507      	str	r5, [sp, #28]
 800c8a6:	9505      	str	r5, [sp, #20]
 800c8a8:	2322      	movs	r3, #34	; 0x22
 800c8aa:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c9c4 <_strtod_l+0x5ac>
 800c8ae:	6023      	str	r3, [r4, #0]
 800c8b0:	f04f 0a00 	mov.w	sl, #0
 800c8b4:	9b07      	ldr	r3, [sp, #28]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	f43f adf2 	beq.w	800c4a0 <_strtod_l+0x88>
 800c8bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c8be:	4620      	mov	r0, r4
 800c8c0:	f001 ff86 	bl	800e7d0 <_Bfree>
 800c8c4:	9905      	ldr	r1, [sp, #20]
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	f001 ff82 	bl	800e7d0 <_Bfree>
 800c8cc:	4631      	mov	r1, r6
 800c8ce:	4620      	mov	r0, r4
 800c8d0:	f001 ff7e 	bl	800e7d0 <_Bfree>
 800c8d4:	9907      	ldr	r1, [sp, #28]
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	f001 ff7a 	bl	800e7d0 <_Bfree>
 800c8dc:	4629      	mov	r1, r5
 800c8de:	4620      	mov	r0, r4
 800c8e0:	f001 ff76 	bl	800e7d0 <_Bfree>
 800c8e4:	e5dc      	b.n	800c4a0 <_strtod_l+0x88>
 800c8e6:	4b36      	ldr	r3, [pc, #216]	; (800c9c0 <_strtod_l+0x5a8>)
 800c8e8:	9304      	str	r3, [sp, #16]
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c8f0:	4650      	mov	r0, sl
 800c8f2:	4659      	mov	r1, fp
 800c8f4:	4699      	mov	r9, r3
 800c8f6:	f1b8 0f01 	cmp.w	r8, #1
 800c8fa:	dc21      	bgt.n	800c940 <_strtod_l+0x528>
 800c8fc:	b10b      	cbz	r3, 800c902 <_strtod_l+0x4ea>
 800c8fe:	4682      	mov	sl, r0
 800c900:	468b      	mov	fp, r1
 800c902:	4b2f      	ldr	r3, [pc, #188]	; (800c9c0 <_strtod_l+0x5a8>)
 800c904:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c908:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c90c:	4652      	mov	r2, sl
 800c90e:	465b      	mov	r3, fp
 800c910:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c914:	f7f3 fe80 	bl	8000618 <__aeabi_dmul>
 800c918:	4b2a      	ldr	r3, [pc, #168]	; (800c9c4 <_strtod_l+0x5ac>)
 800c91a:	460a      	mov	r2, r1
 800c91c:	400b      	ands	r3, r1
 800c91e:	492a      	ldr	r1, [pc, #168]	; (800c9c8 <_strtod_l+0x5b0>)
 800c920:	428b      	cmp	r3, r1
 800c922:	4682      	mov	sl, r0
 800c924:	d8bc      	bhi.n	800c8a0 <_strtod_l+0x488>
 800c926:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c92a:	428b      	cmp	r3, r1
 800c92c:	bf86      	itte	hi
 800c92e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c9cc <_strtod_l+0x5b4>
 800c932:	f04f 3aff 	movhi.w	sl, #4294967295
 800c936:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c93a:	2300      	movs	r3, #0
 800c93c:	9304      	str	r3, [sp, #16]
 800c93e:	e084      	b.n	800ca4a <_strtod_l+0x632>
 800c940:	f018 0f01 	tst.w	r8, #1
 800c944:	d005      	beq.n	800c952 <_strtod_l+0x53a>
 800c946:	9b04      	ldr	r3, [sp, #16]
 800c948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94c:	f7f3 fe64 	bl	8000618 <__aeabi_dmul>
 800c950:	2301      	movs	r3, #1
 800c952:	9a04      	ldr	r2, [sp, #16]
 800c954:	3208      	adds	r2, #8
 800c956:	f109 0901 	add.w	r9, r9, #1
 800c95a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c95e:	9204      	str	r2, [sp, #16]
 800c960:	e7c9      	b.n	800c8f6 <_strtod_l+0x4de>
 800c962:	d0ea      	beq.n	800c93a <_strtod_l+0x522>
 800c964:	f1c8 0800 	rsb	r8, r8, #0
 800c968:	f018 020f 	ands.w	r2, r8, #15
 800c96c:	d00a      	beq.n	800c984 <_strtod_l+0x56c>
 800c96e:	4b13      	ldr	r3, [pc, #76]	; (800c9bc <_strtod_l+0x5a4>)
 800c970:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c974:	4650      	mov	r0, sl
 800c976:	4659      	mov	r1, fp
 800c978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97c:	f7f3 ff76 	bl	800086c <__aeabi_ddiv>
 800c980:	4682      	mov	sl, r0
 800c982:	468b      	mov	fp, r1
 800c984:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c988:	d0d7      	beq.n	800c93a <_strtod_l+0x522>
 800c98a:	f1b8 0f1f 	cmp.w	r8, #31
 800c98e:	dd1f      	ble.n	800c9d0 <_strtod_l+0x5b8>
 800c990:	2500      	movs	r5, #0
 800c992:	462e      	mov	r6, r5
 800c994:	9507      	str	r5, [sp, #28]
 800c996:	9505      	str	r5, [sp, #20]
 800c998:	2322      	movs	r3, #34	; 0x22
 800c99a:	f04f 0a00 	mov.w	sl, #0
 800c99e:	f04f 0b00 	mov.w	fp, #0
 800c9a2:	6023      	str	r3, [r4, #0]
 800c9a4:	e786      	b.n	800c8b4 <_strtod_l+0x49c>
 800c9a6:	bf00      	nop
 800c9a8:	08011771 	.word	0x08011771
 800c9ac:	080117b4 	.word	0x080117b4
 800c9b0:	08011769 	.word	0x08011769
 800c9b4:	080118f4 	.word	0x080118f4
 800c9b8:	08011ba0 	.word	0x08011ba0
 800c9bc:	08011a80 	.word	0x08011a80
 800c9c0:	08011a58 	.word	0x08011a58
 800c9c4:	7ff00000 	.word	0x7ff00000
 800c9c8:	7ca00000 	.word	0x7ca00000
 800c9cc:	7fefffff 	.word	0x7fefffff
 800c9d0:	f018 0310 	ands.w	r3, r8, #16
 800c9d4:	bf18      	it	ne
 800c9d6:	236a      	movne	r3, #106	; 0x6a
 800c9d8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800cd88 <_strtod_l+0x970>
 800c9dc:	9304      	str	r3, [sp, #16]
 800c9de:	4650      	mov	r0, sl
 800c9e0:	4659      	mov	r1, fp
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	f018 0f01 	tst.w	r8, #1
 800c9e8:	d004      	beq.n	800c9f4 <_strtod_l+0x5dc>
 800c9ea:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c9ee:	f7f3 fe13 	bl	8000618 <__aeabi_dmul>
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c9f8:	f109 0908 	add.w	r9, r9, #8
 800c9fc:	d1f2      	bne.n	800c9e4 <_strtod_l+0x5cc>
 800c9fe:	b10b      	cbz	r3, 800ca04 <_strtod_l+0x5ec>
 800ca00:	4682      	mov	sl, r0
 800ca02:	468b      	mov	fp, r1
 800ca04:	9b04      	ldr	r3, [sp, #16]
 800ca06:	b1c3      	cbz	r3, 800ca3a <_strtod_l+0x622>
 800ca08:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ca0c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	4659      	mov	r1, fp
 800ca14:	dd11      	ble.n	800ca3a <_strtod_l+0x622>
 800ca16:	2b1f      	cmp	r3, #31
 800ca18:	f340 8124 	ble.w	800cc64 <_strtod_l+0x84c>
 800ca1c:	2b34      	cmp	r3, #52	; 0x34
 800ca1e:	bfde      	ittt	le
 800ca20:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ca24:	f04f 33ff 	movle.w	r3, #4294967295
 800ca28:	fa03 f202 	lslle.w	r2, r3, r2
 800ca2c:	f04f 0a00 	mov.w	sl, #0
 800ca30:	bfcc      	ite	gt
 800ca32:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ca36:	ea02 0b01 	andle.w	fp, r2, r1
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	4650      	mov	r0, sl
 800ca40:	4659      	mov	r1, fp
 800ca42:	f7f4 f851 	bl	8000ae8 <__aeabi_dcmpeq>
 800ca46:	2800      	cmp	r0, #0
 800ca48:	d1a2      	bne.n	800c990 <_strtod_l+0x578>
 800ca4a:	9b07      	ldr	r3, [sp, #28]
 800ca4c:	9300      	str	r3, [sp, #0]
 800ca4e:	9908      	ldr	r1, [sp, #32]
 800ca50:	462b      	mov	r3, r5
 800ca52:	463a      	mov	r2, r7
 800ca54:	4620      	mov	r0, r4
 800ca56:	f001 ff23 	bl	800e8a0 <__s2b>
 800ca5a:	9007      	str	r0, [sp, #28]
 800ca5c:	2800      	cmp	r0, #0
 800ca5e:	f43f af1f 	beq.w	800c8a0 <_strtod_l+0x488>
 800ca62:	9b05      	ldr	r3, [sp, #20]
 800ca64:	1b9e      	subs	r6, r3, r6
 800ca66:	9b06      	ldr	r3, [sp, #24]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	bfb4      	ite	lt
 800ca6c:	4633      	movlt	r3, r6
 800ca6e:	2300      	movge	r3, #0
 800ca70:	930c      	str	r3, [sp, #48]	; 0x30
 800ca72:	9b06      	ldr	r3, [sp, #24]
 800ca74:	2500      	movs	r5, #0
 800ca76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ca7a:	9312      	str	r3, [sp, #72]	; 0x48
 800ca7c:	462e      	mov	r6, r5
 800ca7e:	9b07      	ldr	r3, [sp, #28]
 800ca80:	4620      	mov	r0, r4
 800ca82:	6859      	ldr	r1, [r3, #4]
 800ca84:	f001 fe64 	bl	800e750 <_Balloc>
 800ca88:	9005      	str	r0, [sp, #20]
 800ca8a:	2800      	cmp	r0, #0
 800ca8c:	f43f af0c 	beq.w	800c8a8 <_strtod_l+0x490>
 800ca90:	9b07      	ldr	r3, [sp, #28]
 800ca92:	691a      	ldr	r2, [r3, #16]
 800ca94:	3202      	adds	r2, #2
 800ca96:	f103 010c 	add.w	r1, r3, #12
 800ca9a:	0092      	lsls	r2, r2, #2
 800ca9c:	300c      	adds	r0, #12
 800ca9e:	f7fe fc94 	bl	800b3ca <memcpy>
 800caa2:	ec4b ab10 	vmov	d0, sl, fp
 800caa6:	aa1a      	add	r2, sp, #104	; 0x68
 800caa8:	a919      	add	r1, sp, #100	; 0x64
 800caaa:	4620      	mov	r0, r4
 800caac:	f002 fa3e 	bl	800ef2c <__d2b>
 800cab0:	ec4b ab18 	vmov	d8, sl, fp
 800cab4:	9018      	str	r0, [sp, #96]	; 0x60
 800cab6:	2800      	cmp	r0, #0
 800cab8:	f43f aef6 	beq.w	800c8a8 <_strtod_l+0x490>
 800cabc:	2101      	movs	r1, #1
 800cabe:	4620      	mov	r0, r4
 800cac0:	f001 ff88 	bl	800e9d4 <__i2b>
 800cac4:	4606      	mov	r6, r0
 800cac6:	2800      	cmp	r0, #0
 800cac8:	f43f aeee 	beq.w	800c8a8 <_strtod_l+0x490>
 800cacc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cace:	9904      	ldr	r1, [sp, #16]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	bfab      	itete	ge
 800cad4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800cad6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800cad8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800cada:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800cade:	bfac      	ite	ge
 800cae0:	eb03 0902 	addge.w	r9, r3, r2
 800cae4:	1ad7      	sublt	r7, r2, r3
 800cae6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cae8:	eba3 0801 	sub.w	r8, r3, r1
 800caec:	4490      	add	r8, r2
 800caee:	4ba1      	ldr	r3, [pc, #644]	; (800cd74 <_strtod_l+0x95c>)
 800caf0:	f108 38ff 	add.w	r8, r8, #4294967295
 800caf4:	4598      	cmp	r8, r3
 800caf6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cafa:	f280 80c7 	bge.w	800cc8c <_strtod_l+0x874>
 800cafe:	eba3 0308 	sub.w	r3, r3, r8
 800cb02:	2b1f      	cmp	r3, #31
 800cb04:	eba2 0203 	sub.w	r2, r2, r3
 800cb08:	f04f 0101 	mov.w	r1, #1
 800cb0c:	f300 80b1 	bgt.w	800cc72 <_strtod_l+0x85a>
 800cb10:	fa01 f303 	lsl.w	r3, r1, r3
 800cb14:	930d      	str	r3, [sp, #52]	; 0x34
 800cb16:	2300      	movs	r3, #0
 800cb18:	9308      	str	r3, [sp, #32]
 800cb1a:	eb09 0802 	add.w	r8, r9, r2
 800cb1e:	9b04      	ldr	r3, [sp, #16]
 800cb20:	45c1      	cmp	r9, r8
 800cb22:	4417      	add	r7, r2
 800cb24:	441f      	add	r7, r3
 800cb26:	464b      	mov	r3, r9
 800cb28:	bfa8      	it	ge
 800cb2a:	4643      	movge	r3, r8
 800cb2c:	42bb      	cmp	r3, r7
 800cb2e:	bfa8      	it	ge
 800cb30:	463b      	movge	r3, r7
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	bfc2      	ittt	gt
 800cb36:	eba8 0803 	subgt.w	r8, r8, r3
 800cb3a:	1aff      	subgt	r7, r7, r3
 800cb3c:	eba9 0903 	subgt.w	r9, r9, r3
 800cb40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	dd17      	ble.n	800cb76 <_strtod_l+0x75e>
 800cb46:	4631      	mov	r1, r6
 800cb48:	461a      	mov	r2, r3
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	f002 f802 	bl	800eb54 <__pow5mult>
 800cb50:	4606      	mov	r6, r0
 800cb52:	2800      	cmp	r0, #0
 800cb54:	f43f aea8 	beq.w	800c8a8 <_strtod_l+0x490>
 800cb58:	4601      	mov	r1, r0
 800cb5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	f001 ff4f 	bl	800ea00 <__multiply>
 800cb62:	900b      	str	r0, [sp, #44]	; 0x2c
 800cb64:	2800      	cmp	r0, #0
 800cb66:	f43f ae9f 	beq.w	800c8a8 <_strtod_l+0x490>
 800cb6a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	f001 fe2f 	bl	800e7d0 <_Bfree>
 800cb72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb74:	9318      	str	r3, [sp, #96]	; 0x60
 800cb76:	f1b8 0f00 	cmp.w	r8, #0
 800cb7a:	f300 808c 	bgt.w	800cc96 <_strtod_l+0x87e>
 800cb7e:	9b06      	ldr	r3, [sp, #24]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	dd08      	ble.n	800cb96 <_strtod_l+0x77e>
 800cb84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cb86:	9905      	ldr	r1, [sp, #20]
 800cb88:	4620      	mov	r0, r4
 800cb8a:	f001 ffe3 	bl	800eb54 <__pow5mult>
 800cb8e:	9005      	str	r0, [sp, #20]
 800cb90:	2800      	cmp	r0, #0
 800cb92:	f43f ae89 	beq.w	800c8a8 <_strtod_l+0x490>
 800cb96:	2f00      	cmp	r7, #0
 800cb98:	dd08      	ble.n	800cbac <_strtod_l+0x794>
 800cb9a:	9905      	ldr	r1, [sp, #20]
 800cb9c:	463a      	mov	r2, r7
 800cb9e:	4620      	mov	r0, r4
 800cba0:	f002 f832 	bl	800ec08 <__lshift>
 800cba4:	9005      	str	r0, [sp, #20]
 800cba6:	2800      	cmp	r0, #0
 800cba8:	f43f ae7e 	beq.w	800c8a8 <_strtod_l+0x490>
 800cbac:	f1b9 0f00 	cmp.w	r9, #0
 800cbb0:	dd08      	ble.n	800cbc4 <_strtod_l+0x7ac>
 800cbb2:	4631      	mov	r1, r6
 800cbb4:	464a      	mov	r2, r9
 800cbb6:	4620      	mov	r0, r4
 800cbb8:	f002 f826 	bl	800ec08 <__lshift>
 800cbbc:	4606      	mov	r6, r0
 800cbbe:	2800      	cmp	r0, #0
 800cbc0:	f43f ae72 	beq.w	800c8a8 <_strtod_l+0x490>
 800cbc4:	9a05      	ldr	r2, [sp, #20]
 800cbc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cbc8:	4620      	mov	r0, r4
 800cbca:	f002 f8a9 	bl	800ed20 <__mdiff>
 800cbce:	4605      	mov	r5, r0
 800cbd0:	2800      	cmp	r0, #0
 800cbd2:	f43f ae69 	beq.w	800c8a8 <_strtod_l+0x490>
 800cbd6:	68c3      	ldr	r3, [r0, #12]
 800cbd8:	930b      	str	r3, [sp, #44]	; 0x2c
 800cbda:	2300      	movs	r3, #0
 800cbdc:	60c3      	str	r3, [r0, #12]
 800cbde:	4631      	mov	r1, r6
 800cbe0:	f002 f882 	bl	800ece8 <__mcmp>
 800cbe4:	2800      	cmp	r0, #0
 800cbe6:	da60      	bge.n	800ccaa <_strtod_l+0x892>
 800cbe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbea:	ea53 030a 	orrs.w	r3, r3, sl
 800cbee:	f040 8082 	bne.w	800ccf6 <_strtod_l+0x8de>
 800cbf2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d17d      	bne.n	800ccf6 <_strtod_l+0x8de>
 800cbfa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cbfe:	0d1b      	lsrs	r3, r3, #20
 800cc00:	051b      	lsls	r3, r3, #20
 800cc02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cc06:	d976      	bls.n	800ccf6 <_strtod_l+0x8de>
 800cc08:	696b      	ldr	r3, [r5, #20]
 800cc0a:	b913      	cbnz	r3, 800cc12 <_strtod_l+0x7fa>
 800cc0c:	692b      	ldr	r3, [r5, #16]
 800cc0e:	2b01      	cmp	r3, #1
 800cc10:	dd71      	ble.n	800ccf6 <_strtod_l+0x8de>
 800cc12:	4629      	mov	r1, r5
 800cc14:	2201      	movs	r2, #1
 800cc16:	4620      	mov	r0, r4
 800cc18:	f001 fff6 	bl	800ec08 <__lshift>
 800cc1c:	4631      	mov	r1, r6
 800cc1e:	4605      	mov	r5, r0
 800cc20:	f002 f862 	bl	800ece8 <__mcmp>
 800cc24:	2800      	cmp	r0, #0
 800cc26:	dd66      	ble.n	800ccf6 <_strtod_l+0x8de>
 800cc28:	9904      	ldr	r1, [sp, #16]
 800cc2a:	4a53      	ldr	r2, [pc, #332]	; (800cd78 <_strtod_l+0x960>)
 800cc2c:	465b      	mov	r3, fp
 800cc2e:	2900      	cmp	r1, #0
 800cc30:	f000 8081 	beq.w	800cd36 <_strtod_l+0x91e>
 800cc34:	ea02 010b 	and.w	r1, r2, fp
 800cc38:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cc3c:	dc7b      	bgt.n	800cd36 <_strtod_l+0x91e>
 800cc3e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cc42:	f77f aea9 	ble.w	800c998 <_strtod_l+0x580>
 800cc46:	4b4d      	ldr	r3, [pc, #308]	; (800cd7c <_strtod_l+0x964>)
 800cc48:	4650      	mov	r0, sl
 800cc4a:	4659      	mov	r1, fp
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	f7f3 fce3 	bl	8000618 <__aeabi_dmul>
 800cc52:	460b      	mov	r3, r1
 800cc54:	4303      	orrs	r3, r0
 800cc56:	bf08      	it	eq
 800cc58:	2322      	moveq	r3, #34	; 0x22
 800cc5a:	4682      	mov	sl, r0
 800cc5c:	468b      	mov	fp, r1
 800cc5e:	bf08      	it	eq
 800cc60:	6023      	streq	r3, [r4, #0]
 800cc62:	e62b      	b.n	800c8bc <_strtod_l+0x4a4>
 800cc64:	f04f 32ff 	mov.w	r2, #4294967295
 800cc68:	fa02 f303 	lsl.w	r3, r2, r3
 800cc6c:	ea03 0a0a 	and.w	sl, r3, sl
 800cc70:	e6e3      	b.n	800ca3a <_strtod_l+0x622>
 800cc72:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800cc76:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800cc7a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800cc7e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800cc82:	fa01 f308 	lsl.w	r3, r1, r8
 800cc86:	9308      	str	r3, [sp, #32]
 800cc88:	910d      	str	r1, [sp, #52]	; 0x34
 800cc8a:	e746      	b.n	800cb1a <_strtod_l+0x702>
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	9308      	str	r3, [sp, #32]
 800cc90:	2301      	movs	r3, #1
 800cc92:	930d      	str	r3, [sp, #52]	; 0x34
 800cc94:	e741      	b.n	800cb1a <_strtod_l+0x702>
 800cc96:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cc98:	4642      	mov	r2, r8
 800cc9a:	4620      	mov	r0, r4
 800cc9c:	f001 ffb4 	bl	800ec08 <__lshift>
 800cca0:	9018      	str	r0, [sp, #96]	; 0x60
 800cca2:	2800      	cmp	r0, #0
 800cca4:	f47f af6b 	bne.w	800cb7e <_strtod_l+0x766>
 800cca8:	e5fe      	b.n	800c8a8 <_strtod_l+0x490>
 800ccaa:	465f      	mov	r7, fp
 800ccac:	d16e      	bne.n	800cd8c <_strtod_l+0x974>
 800ccae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ccb0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ccb4:	b342      	cbz	r2, 800cd08 <_strtod_l+0x8f0>
 800ccb6:	4a32      	ldr	r2, [pc, #200]	; (800cd80 <_strtod_l+0x968>)
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d128      	bne.n	800cd0e <_strtod_l+0x8f6>
 800ccbc:	9b04      	ldr	r3, [sp, #16]
 800ccbe:	4651      	mov	r1, sl
 800ccc0:	b1eb      	cbz	r3, 800ccfe <_strtod_l+0x8e6>
 800ccc2:	4b2d      	ldr	r3, [pc, #180]	; (800cd78 <_strtod_l+0x960>)
 800ccc4:	403b      	ands	r3, r7
 800ccc6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ccca:	f04f 32ff 	mov.w	r2, #4294967295
 800ccce:	d819      	bhi.n	800cd04 <_strtod_l+0x8ec>
 800ccd0:	0d1b      	lsrs	r3, r3, #20
 800ccd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ccd6:	fa02 f303 	lsl.w	r3, r2, r3
 800ccda:	4299      	cmp	r1, r3
 800ccdc:	d117      	bne.n	800cd0e <_strtod_l+0x8f6>
 800ccde:	4b29      	ldr	r3, [pc, #164]	; (800cd84 <_strtod_l+0x96c>)
 800cce0:	429f      	cmp	r7, r3
 800cce2:	d102      	bne.n	800ccea <_strtod_l+0x8d2>
 800cce4:	3101      	adds	r1, #1
 800cce6:	f43f addf 	beq.w	800c8a8 <_strtod_l+0x490>
 800ccea:	4b23      	ldr	r3, [pc, #140]	; (800cd78 <_strtod_l+0x960>)
 800ccec:	403b      	ands	r3, r7
 800ccee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ccf2:	f04f 0a00 	mov.w	sl, #0
 800ccf6:	9b04      	ldr	r3, [sp, #16]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d1a4      	bne.n	800cc46 <_strtod_l+0x82e>
 800ccfc:	e5de      	b.n	800c8bc <_strtod_l+0x4a4>
 800ccfe:	f04f 33ff 	mov.w	r3, #4294967295
 800cd02:	e7ea      	b.n	800ccda <_strtod_l+0x8c2>
 800cd04:	4613      	mov	r3, r2
 800cd06:	e7e8      	b.n	800ccda <_strtod_l+0x8c2>
 800cd08:	ea53 030a 	orrs.w	r3, r3, sl
 800cd0c:	d08c      	beq.n	800cc28 <_strtod_l+0x810>
 800cd0e:	9b08      	ldr	r3, [sp, #32]
 800cd10:	b1db      	cbz	r3, 800cd4a <_strtod_l+0x932>
 800cd12:	423b      	tst	r3, r7
 800cd14:	d0ef      	beq.n	800ccf6 <_strtod_l+0x8de>
 800cd16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd18:	9a04      	ldr	r2, [sp, #16]
 800cd1a:	4650      	mov	r0, sl
 800cd1c:	4659      	mov	r1, fp
 800cd1e:	b1c3      	cbz	r3, 800cd52 <_strtod_l+0x93a>
 800cd20:	f7ff fb5b 	bl	800c3da <sulp>
 800cd24:	4602      	mov	r2, r0
 800cd26:	460b      	mov	r3, r1
 800cd28:	ec51 0b18 	vmov	r0, r1, d8
 800cd2c:	f7f3 fabe 	bl	80002ac <__adddf3>
 800cd30:	4682      	mov	sl, r0
 800cd32:	468b      	mov	fp, r1
 800cd34:	e7df      	b.n	800ccf6 <_strtod_l+0x8de>
 800cd36:	4013      	ands	r3, r2
 800cd38:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cd3c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cd40:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cd44:	f04f 3aff 	mov.w	sl, #4294967295
 800cd48:	e7d5      	b.n	800ccf6 <_strtod_l+0x8de>
 800cd4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd4c:	ea13 0f0a 	tst.w	r3, sl
 800cd50:	e7e0      	b.n	800cd14 <_strtod_l+0x8fc>
 800cd52:	f7ff fb42 	bl	800c3da <sulp>
 800cd56:	4602      	mov	r2, r0
 800cd58:	460b      	mov	r3, r1
 800cd5a:	ec51 0b18 	vmov	r0, r1, d8
 800cd5e:	f7f3 faa3 	bl	80002a8 <__aeabi_dsub>
 800cd62:	2200      	movs	r2, #0
 800cd64:	2300      	movs	r3, #0
 800cd66:	4682      	mov	sl, r0
 800cd68:	468b      	mov	fp, r1
 800cd6a:	f7f3 febd 	bl	8000ae8 <__aeabi_dcmpeq>
 800cd6e:	2800      	cmp	r0, #0
 800cd70:	d0c1      	beq.n	800ccf6 <_strtod_l+0x8de>
 800cd72:	e611      	b.n	800c998 <_strtod_l+0x580>
 800cd74:	fffffc02 	.word	0xfffffc02
 800cd78:	7ff00000 	.word	0x7ff00000
 800cd7c:	39500000 	.word	0x39500000
 800cd80:	000fffff 	.word	0x000fffff
 800cd84:	7fefffff 	.word	0x7fefffff
 800cd88:	080117c8 	.word	0x080117c8
 800cd8c:	4631      	mov	r1, r6
 800cd8e:	4628      	mov	r0, r5
 800cd90:	f002 f928 	bl	800efe4 <__ratio>
 800cd94:	ec59 8b10 	vmov	r8, r9, d0
 800cd98:	ee10 0a10 	vmov	r0, s0
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cda2:	4649      	mov	r1, r9
 800cda4:	f7f3 feb4 	bl	8000b10 <__aeabi_dcmple>
 800cda8:	2800      	cmp	r0, #0
 800cdaa:	d07a      	beq.n	800cea2 <_strtod_l+0xa8a>
 800cdac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d04a      	beq.n	800ce48 <_strtod_l+0xa30>
 800cdb2:	4b95      	ldr	r3, [pc, #596]	; (800d008 <_strtod_l+0xbf0>)
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cdba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d008 <_strtod_l+0xbf0>
 800cdbe:	f04f 0800 	mov.w	r8, #0
 800cdc2:	4b92      	ldr	r3, [pc, #584]	; (800d00c <_strtod_l+0xbf4>)
 800cdc4:	403b      	ands	r3, r7
 800cdc6:	930d      	str	r3, [sp, #52]	; 0x34
 800cdc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cdca:	4b91      	ldr	r3, [pc, #580]	; (800d010 <_strtod_l+0xbf8>)
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	f040 80b0 	bne.w	800cf32 <_strtod_l+0xb1a>
 800cdd2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cdd6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800cdda:	ec4b ab10 	vmov	d0, sl, fp
 800cdde:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cde2:	f002 f827 	bl	800ee34 <__ulp>
 800cde6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cdea:	ec53 2b10 	vmov	r2, r3, d0
 800cdee:	f7f3 fc13 	bl	8000618 <__aeabi_dmul>
 800cdf2:	4652      	mov	r2, sl
 800cdf4:	465b      	mov	r3, fp
 800cdf6:	f7f3 fa59 	bl	80002ac <__adddf3>
 800cdfa:	460b      	mov	r3, r1
 800cdfc:	4983      	ldr	r1, [pc, #524]	; (800d00c <_strtod_l+0xbf4>)
 800cdfe:	4a85      	ldr	r2, [pc, #532]	; (800d014 <_strtod_l+0xbfc>)
 800ce00:	4019      	ands	r1, r3
 800ce02:	4291      	cmp	r1, r2
 800ce04:	4682      	mov	sl, r0
 800ce06:	d960      	bls.n	800ceca <_strtod_l+0xab2>
 800ce08:	ee18 3a90 	vmov	r3, s17
 800ce0c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d104      	bne.n	800ce1e <_strtod_l+0xa06>
 800ce14:	ee18 3a10 	vmov	r3, s16
 800ce18:	3301      	adds	r3, #1
 800ce1a:	f43f ad45 	beq.w	800c8a8 <_strtod_l+0x490>
 800ce1e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d020 <_strtod_l+0xc08>
 800ce22:	f04f 3aff 	mov.w	sl, #4294967295
 800ce26:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ce28:	4620      	mov	r0, r4
 800ce2a:	f001 fcd1 	bl	800e7d0 <_Bfree>
 800ce2e:	9905      	ldr	r1, [sp, #20]
 800ce30:	4620      	mov	r0, r4
 800ce32:	f001 fccd 	bl	800e7d0 <_Bfree>
 800ce36:	4631      	mov	r1, r6
 800ce38:	4620      	mov	r0, r4
 800ce3a:	f001 fcc9 	bl	800e7d0 <_Bfree>
 800ce3e:	4629      	mov	r1, r5
 800ce40:	4620      	mov	r0, r4
 800ce42:	f001 fcc5 	bl	800e7d0 <_Bfree>
 800ce46:	e61a      	b.n	800ca7e <_strtod_l+0x666>
 800ce48:	f1ba 0f00 	cmp.w	sl, #0
 800ce4c:	d11b      	bne.n	800ce86 <_strtod_l+0xa6e>
 800ce4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce52:	b9f3      	cbnz	r3, 800ce92 <_strtod_l+0xa7a>
 800ce54:	4b6c      	ldr	r3, [pc, #432]	; (800d008 <_strtod_l+0xbf0>)
 800ce56:	2200      	movs	r2, #0
 800ce58:	4640      	mov	r0, r8
 800ce5a:	4649      	mov	r1, r9
 800ce5c:	f7f3 fe4e 	bl	8000afc <__aeabi_dcmplt>
 800ce60:	b9d0      	cbnz	r0, 800ce98 <_strtod_l+0xa80>
 800ce62:	4640      	mov	r0, r8
 800ce64:	4649      	mov	r1, r9
 800ce66:	4b6c      	ldr	r3, [pc, #432]	; (800d018 <_strtod_l+0xc00>)
 800ce68:	2200      	movs	r2, #0
 800ce6a:	f7f3 fbd5 	bl	8000618 <__aeabi_dmul>
 800ce6e:	4680      	mov	r8, r0
 800ce70:	4689      	mov	r9, r1
 800ce72:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ce76:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800ce7a:	9315      	str	r3, [sp, #84]	; 0x54
 800ce7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ce80:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ce84:	e79d      	b.n	800cdc2 <_strtod_l+0x9aa>
 800ce86:	f1ba 0f01 	cmp.w	sl, #1
 800ce8a:	d102      	bne.n	800ce92 <_strtod_l+0xa7a>
 800ce8c:	2f00      	cmp	r7, #0
 800ce8e:	f43f ad83 	beq.w	800c998 <_strtod_l+0x580>
 800ce92:	4b62      	ldr	r3, [pc, #392]	; (800d01c <_strtod_l+0xc04>)
 800ce94:	2200      	movs	r2, #0
 800ce96:	e78e      	b.n	800cdb6 <_strtod_l+0x99e>
 800ce98:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d018 <_strtod_l+0xc00>
 800ce9c:	f04f 0800 	mov.w	r8, #0
 800cea0:	e7e7      	b.n	800ce72 <_strtod_l+0xa5a>
 800cea2:	4b5d      	ldr	r3, [pc, #372]	; (800d018 <_strtod_l+0xc00>)
 800cea4:	4640      	mov	r0, r8
 800cea6:	4649      	mov	r1, r9
 800cea8:	2200      	movs	r2, #0
 800ceaa:	f7f3 fbb5 	bl	8000618 <__aeabi_dmul>
 800ceae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ceb0:	4680      	mov	r8, r0
 800ceb2:	4689      	mov	r9, r1
 800ceb4:	b933      	cbnz	r3, 800cec4 <_strtod_l+0xaac>
 800ceb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ceba:	900e      	str	r0, [sp, #56]	; 0x38
 800cebc:	930f      	str	r3, [sp, #60]	; 0x3c
 800cebe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800cec2:	e7dd      	b.n	800ce80 <_strtod_l+0xa68>
 800cec4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800cec8:	e7f9      	b.n	800cebe <_strtod_l+0xaa6>
 800ceca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800cece:	9b04      	ldr	r3, [sp, #16]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d1a8      	bne.n	800ce26 <_strtod_l+0xa0e>
 800ced4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ced8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ceda:	0d1b      	lsrs	r3, r3, #20
 800cedc:	051b      	lsls	r3, r3, #20
 800cede:	429a      	cmp	r2, r3
 800cee0:	d1a1      	bne.n	800ce26 <_strtod_l+0xa0e>
 800cee2:	4640      	mov	r0, r8
 800cee4:	4649      	mov	r1, r9
 800cee6:	f7f3 fef7 	bl	8000cd8 <__aeabi_d2lz>
 800ceea:	f7f3 fb67 	bl	80005bc <__aeabi_l2d>
 800ceee:	4602      	mov	r2, r0
 800cef0:	460b      	mov	r3, r1
 800cef2:	4640      	mov	r0, r8
 800cef4:	4649      	mov	r1, r9
 800cef6:	f7f3 f9d7 	bl	80002a8 <__aeabi_dsub>
 800cefa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cefc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cf00:	ea43 030a 	orr.w	r3, r3, sl
 800cf04:	4313      	orrs	r3, r2
 800cf06:	4680      	mov	r8, r0
 800cf08:	4689      	mov	r9, r1
 800cf0a:	d055      	beq.n	800cfb8 <_strtod_l+0xba0>
 800cf0c:	a336      	add	r3, pc, #216	; (adr r3, 800cfe8 <_strtod_l+0xbd0>)
 800cf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf12:	f7f3 fdf3 	bl	8000afc <__aeabi_dcmplt>
 800cf16:	2800      	cmp	r0, #0
 800cf18:	f47f acd0 	bne.w	800c8bc <_strtod_l+0x4a4>
 800cf1c:	a334      	add	r3, pc, #208	; (adr r3, 800cff0 <_strtod_l+0xbd8>)
 800cf1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf22:	4640      	mov	r0, r8
 800cf24:	4649      	mov	r1, r9
 800cf26:	f7f3 fe07 	bl	8000b38 <__aeabi_dcmpgt>
 800cf2a:	2800      	cmp	r0, #0
 800cf2c:	f43f af7b 	beq.w	800ce26 <_strtod_l+0xa0e>
 800cf30:	e4c4      	b.n	800c8bc <_strtod_l+0x4a4>
 800cf32:	9b04      	ldr	r3, [sp, #16]
 800cf34:	b333      	cbz	r3, 800cf84 <_strtod_l+0xb6c>
 800cf36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf38:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cf3c:	d822      	bhi.n	800cf84 <_strtod_l+0xb6c>
 800cf3e:	a32e      	add	r3, pc, #184	; (adr r3, 800cff8 <_strtod_l+0xbe0>)
 800cf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf44:	4640      	mov	r0, r8
 800cf46:	4649      	mov	r1, r9
 800cf48:	f7f3 fde2 	bl	8000b10 <__aeabi_dcmple>
 800cf4c:	b1a0      	cbz	r0, 800cf78 <_strtod_l+0xb60>
 800cf4e:	4649      	mov	r1, r9
 800cf50:	4640      	mov	r0, r8
 800cf52:	f7f3 fe39 	bl	8000bc8 <__aeabi_d2uiz>
 800cf56:	2801      	cmp	r0, #1
 800cf58:	bf38      	it	cc
 800cf5a:	2001      	movcc	r0, #1
 800cf5c:	f7f3 fae2 	bl	8000524 <__aeabi_ui2d>
 800cf60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf62:	4680      	mov	r8, r0
 800cf64:	4689      	mov	r9, r1
 800cf66:	bb23      	cbnz	r3, 800cfb2 <_strtod_l+0xb9a>
 800cf68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf6c:	9010      	str	r0, [sp, #64]	; 0x40
 800cf6e:	9311      	str	r3, [sp, #68]	; 0x44
 800cf70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cf74:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cf78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cf7c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800cf80:	1a9b      	subs	r3, r3, r2
 800cf82:	9309      	str	r3, [sp, #36]	; 0x24
 800cf84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cf88:	eeb0 0a48 	vmov.f32	s0, s16
 800cf8c:	eef0 0a68 	vmov.f32	s1, s17
 800cf90:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cf94:	f001 ff4e 	bl	800ee34 <__ulp>
 800cf98:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cf9c:	ec53 2b10 	vmov	r2, r3, d0
 800cfa0:	f7f3 fb3a 	bl	8000618 <__aeabi_dmul>
 800cfa4:	ec53 2b18 	vmov	r2, r3, d8
 800cfa8:	f7f3 f980 	bl	80002ac <__adddf3>
 800cfac:	4682      	mov	sl, r0
 800cfae:	468b      	mov	fp, r1
 800cfb0:	e78d      	b.n	800cece <_strtod_l+0xab6>
 800cfb2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800cfb6:	e7db      	b.n	800cf70 <_strtod_l+0xb58>
 800cfb8:	a311      	add	r3, pc, #68	; (adr r3, 800d000 <_strtod_l+0xbe8>)
 800cfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfbe:	f7f3 fd9d 	bl	8000afc <__aeabi_dcmplt>
 800cfc2:	e7b2      	b.n	800cf2a <_strtod_l+0xb12>
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	930a      	str	r3, [sp, #40]	; 0x28
 800cfc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cfca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cfcc:	6013      	str	r3, [r2, #0]
 800cfce:	f7ff ba6b 	b.w	800c4a8 <_strtod_l+0x90>
 800cfd2:	2a65      	cmp	r2, #101	; 0x65
 800cfd4:	f43f ab5f 	beq.w	800c696 <_strtod_l+0x27e>
 800cfd8:	2a45      	cmp	r2, #69	; 0x45
 800cfda:	f43f ab5c 	beq.w	800c696 <_strtod_l+0x27e>
 800cfde:	2301      	movs	r3, #1
 800cfe0:	f7ff bb94 	b.w	800c70c <_strtod_l+0x2f4>
 800cfe4:	f3af 8000 	nop.w
 800cfe8:	94a03595 	.word	0x94a03595
 800cfec:	3fdfffff 	.word	0x3fdfffff
 800cff0:	35afe535 	.word	0x35afe535
 800cff4:	3fe00000 	.word	0x3fe00000
 800cff8:	ffc00000 	.word	0xffc00000
 800cffc:	41dfffff 	.word	0x41dfffff
 800d000:	94a03595 	.word	0x94a03595
 800d004:	3fcfffff 	.word	0x3fcfffff
 800d008:	3ff00000 	.word	0x3ff00000
 800d00c:	7ff00000 	.word	0x7ff00000
 800d010:	7fe00000 	.word	0x7fe00000
 800d014:	7c9fffff 	.word	0x7c9fffff
 800d018:	3fe00000 	.word	0x3fe00000
 800d01c:	bff00000 	.word	0xbff00000
 800d020:	7fefffff 	.word	0x7fefffff

0800d024 <_strtod_r>:
 800d024:	4b01      	ldr	r3, [pc, #4]	; (800d02c <_strtod_r+0x8>)
 800d026:	f7ff b9f7 	b.w	800c418 <_strtod_l>
 800d02a:	bf00      	nop
 800d02c:	20000110 	.word	0x20000110

0800d030 <_strtol_l.constprop.0>:
 800d030:	2b01      	cmp	r3, #1
 800d032:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d036:	d001      	beq.n	800d03c <_strtol_l.constprop.0+0xc>
 800d038:	2b24      	cmp	r3, #36	; 0x24
 800d03a:	d906      	bls.n	800d04a <_strtol_l.constprop.0+0x1a>
 800d03c:	f7fe f8a2 	bl	800b184 <__errno>
 800d040:	2316      	movs	r3, #22
 800d042:	6003      	str	r3, [r0, #0]
 800d044:	2000      	movs	r0, #0
 800d046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d04a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d130 <_strtol_l.constprop.0+0x100>
 800d04e:	460d      	mov	r5, r1
 800d050:	462e      	mov	r6, r5
 800d052:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d056:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d05a:	f017 0708 	ands.w	r7, r7, #8
 800d05e:	d1f7      	bne.n	800d050 <_strtol_l.constprop.0+0x20>
 800d060:	2c2d      	cmp	r4, #45	; 0x2d
 800d062:	d132      	bne.n	800d0ca <_strtol_l.constprop.0+0x9a>
 800d064:	782c      	ldrb	r4, [r5, #0]
 800d066:	2701      	movs	r7, #1
 800d068:	1cb5      	adds	r5, r6, #2
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d05b      	beq.n	800d126 <_strtol_l.constprop.0+0xf6>
 800d06e:	2b10      	cmp	r3, #16
 800d070:	d109      	bne.n	800d086 <_strtol_l.constprop.0+0x56>
 800d072:	2c30      	cmp	r4, #48	; 0x30
 800d074:	d107      	bne.n	800d086 <_strtol_l.constprop.0+0x56>
 800d076:	782c      	ldrb	r4, [r5, #0]
 800d078:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d07c:	2c58      	cmp	r4, #88	; 0x58
 800d07e:	d14d      	bne.n	800d11c <_strtol_l.constprop.0+0xec>
 800d080:	786c      	ldrb	r4, [r5, #1]
 800d082:	2310      	movs	r3, #16
 800d084:	3502      	adds	r5, #2
 800d086:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d08a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d08e:	f04f 0c00 	mov.w	ip, #0
 800d092:	fbb8 f9f3 	udiv	r9, r8, r3
 800d096:	4666      	mov	r6, ip
 800d098:	fb03 8a19 	mls	sl, r3, r9, r8
 800d09c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d0a0:	f1be 0f09 	cmp.w	lr, #9
 800d0a4:	d816      	bhi.n	800d0d4 <_strtol_l.constprop.0+0xa4>
 800d0a6:	4674      	mov	r4, lr
 800d0a8:	42a3      	cmp	r3, r4
 800d0aa:	dd24      	ble.n	800d0f6 <_strtol_l.constprop.0+0xc6>
 800d0ac:	f1bc 0f00 	cmp.w	ip, #0
 800d0b0:	db1e      	blt.n	800d0f0 <_strtol_l.constprop.0+0xc0>
 800d0b2:	45b1      	cmp	r9, r6
 800d0b4:	d31c      	bcc.n	800d0f0 <_strtol_l.constprop.0+0xc0>
 800d0b6:	d101      	bne.n	800d0bc <_strtol_l.constprop.0+0x8c>
 800d0b8:	45a2      	cmp	sl, r4
 800d0ba:	db19      	blt.n	800d0f0 <_strtol_l.constprop.0+0xc0>
 800d0bc:	fb06 4603 	mla	r6, r6, r3, r4
 800d0c0:	f04f 0c01 	mov.w	ip, #1
 800d0c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d0c8:	e7e8      	b.n	800d09c <_strtol_l.constprop.0+0x6c>
 800d0ca:	2c2b      	cmp	r4, #43	; 0x2b
 800d0cc:	bf04      	itt	eq
 800d0ce:	782c      	ldrbeq	r4, [r5, #0]
 800d0d0:	1cb5      	addeq	r5, r6, #2
 800d0d2:	e7ca      	b.n	800d06a <_strtol_l.constprop.0+0x3a>
 800d0d4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d0d8:	f1be 0f19 	cmp.w	lr, #25
 800d0dc:	d801      	bhi.n	800d0e2 <_strtol_l.constprop.0+0xb2>
 800d0de:	3c37      	subs	r4, #55	; 0x37
 800d0e0:	e7e2      	b.n	800d0a8 <_strtol_l.constprop.0+0x78>
 800d0e2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d0e6:	f1be 0f19 	cmp.w	lr, #25
 800d0ea:	d804      	bhi.n	800d0f6 <_strtol_l.constprop.0+0xc6>
 800d0ec:	3c57      	subs	r4, #87	; 0x57
 800d0ee:	e7db      	b.n	800d0a8 <_strtol_l.constprop.0+0x78>
 800d0f0:	f04f 3cff 	mov.w	ip, #4294967295
 800d0f4:	e7e6      	b.n	800d0c4 <_strtol_l.constprop.0+0x94>
 800d0f6:	f1bc 0f00 	cmp.w	ip, #0
 800d0fa:	da05      	bge.n	800d108 <_strtol_l.constprop.0+0xd8>
 800d0fc:	2322      	movs	r3, #34	; 0x22
 800d0fe:	6003      	str	r3, [r0, #0]
 800d100:	4646      	mov	r6, r8
 800d102:	b942      	cbnz	r2, 800d116 <_strtol_l.constprop.0+0xe6>
 800d104:	4630      	mov	r0, r6
 800d106:	e79e      	b.n	800d046 <_strtol_l.constprop.0+0x16>
 800d108:	b107      	cbz	r7, 800d10c <_strtol_l.constprop.0+0xdc>
 800d10a:	4276      	negs	r6, r6
 800d10c:	2a00      	cmp	r2, #0
 800d10e:	d0f9      	beq.n	800d104 <_strtol_l.constprop.0+0xd4>
 800d110:	f1bc 0f00 	cmp.w	ip, #0
 800d114:	d000      	beq.n	800d118 <_strtol_l.constprop.0+0xe8>
 800d116:	1e69      	subs	r1, r5, #1
 800d118:	6011      	str	r1, [r2, #0]
 800d11a:	e7f3      	b.n	800d104 <_strtol_l.constprop.0+0xd4>
 800d11c:	2430      	movs	r4, #48	; 0x30
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d1b1      	bne.n	800d086 <_strtol_l.constprop.0+0x56>
 800d122:	2308      	movs	r3, #8
 800d124:	e7af      	b.n	800d086 <_strtol_l.constprop.0+0x56>
 800d126:	2c30      	cmp	r4, #48	; 0x30
 800d128:	d0a5      	beq.n	800d076 <_strtol_l.constprop.0+0x46>
 800d12a:	230a      	movs	r3, #10
 800d12c:	e7ab      	b.n	800d086 <_strtol_l.constprop.0+0x56>
 800d12e:	bf00      	nop
 800d130:	080117f1 	.word	0x080117f1

0800d134 <_strtol_r>:
 800d134:	f7ff bf7c 	b.w	800d030 <_strtol_l.constprop.0>

0800d138 <_write_r>:
 800d138:	b538      	push	{r3, r4, r5, lr}
 800d13a:	4d07      	ldr	r5, [pc, #28]	; (800d158 <_write_r+0x20>)
 800d13c:	4604      	mov	r4, r0
 800d13e:	4608      	mov	r0, r1
 800d140:	4611      	mov	r1, r2
 800d142:	2200      	movs	r2, #0
 800d144:	602a      	str	r2, [r5, #0]
 800d146:	461a      	mov	r2, r3
 800d148:	f7f4 fba2 	bl	8001890 <_write>
 800d14c:	1c43      	adds	r3, r0, #1
 800d14e:	d102      	bne.n	800d156 <_write_r+0x1e>
 800d150:	682b      	ldr	r3, [r5, #0]
 800d152:	b103      	cbz	r3, 800d156 <_write_r+0x1e>
 800d154:	6023      	str	r3, [r4, #0]
 800d156:	bd38      	pop	{r3, r4, r5, pc}
 800d158:	20008c60 	.word	0x20008c60

0800d15c <_close_r>:
 800d15c:	b538      	push	{r3, r4, r5, lr}
 800d15e:	4d06      	ldr	r5, [pc, #24]	; (800d178 <_close_r+0x1c>)
 800d160:	2300      	movs	r3, #0
 800d162:	4604      	mov	r4, r0
 800d164:	4608      	mov	r0, r1
 800d166:	602b      	str	r3, [r5, #0]
 800d168:	f7f5 fb23 	bl	80027b2 <_close>
 800d16c:	1c43      	adds	r3, r0, #1
 800d16e:	d102      	bne.n	800d176 <_close_r+0x1a>
 800d170:	682b      	ldr	r3, [r5, #0]
 800d172:	b103      	cbz	r3, 800d176 <_close_r+0x1a>
 800d174:	6023      	str	r3, [r4, #0]
 800d176:	bd38      	pop	{r3, r4, r5, pc}
 800d178:	20008c60 	.word	0x20008c60

0800d17c <quorem>:
 800d17c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d180:	6903      	ldr	r3, [r0, #16]
 800d182:	690c      	ldr	r4, [r1, #16]
 800d184:	42a3      	cmp	r3, r4
 800d186:	4607      	mov	r7, r0
 800d188:	f2c0 8081 	blt.w	800d28e <quorem+0x112>
 800d18c:	3c01      	subs	r4, #1
 800d18e:	f101 0814 	add.w	r8, r1, #20
 800d192:	f100 0514 	add.w	r5, r0, #20
 800d196:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d19a:	9301      	str	r3, [sp, #4]
 800d19c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d1a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d1a4:	3301      	adds	r3, #1
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d1ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d1b0:	fbb2 f6f3 	udiv	r6, r2, r3
 800d1b4:	d331      	bcc.n	800d21a <quorem+0x9e>
 800d1b6:	f04f 0e00 	mov.w	lr, #0
 800d1ba:	4640      	mov	r0, r8
 800d1bc:	46ac      	mov	ip, r5
 800d1be:	46f2      	mov	sl, lr
 800d1c0:	f850 2b04 	ldr.w	r2, [r0], #4
 800d1c4:	b293      	uxth	r3, r2
 800d1c6:	fb06 e303 	mla	r3, r6, r3, lr
 800d1ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d1ce:	b29b      	uxth	r3, r3
 800d1d0:	ebaa 0303 	sub.w	r3, sl, r3
 800d1d4:	f8dc a000 	ldr.w	sl, [ip]
 800d1d8:	0c12      	lsrs	r2, r2, #16
 800d1da:	fa13 f38a 	uxtah	r3, r3, sl
 800d1de:	fb06 e202 	mla	r2, r6, r2, lr
 800d1e2:	9300      	str	r3, [sp, #0]
 800d1e4:	9b00      	ldr	r3, [sp, #0]
 800d1e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d1ea:	b292      	uxth	r2, r2
 800d1ec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d1f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d1f4:	f8bd 3000 	ldrh.w	r3, [sp]
 800d1f8:	4581      	cmp	r9, r0
 800d1fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1fe:	f84c 3b04 	str.w	r3, [ip], #4
 800d202:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d206:	d2db      	bcs.n	800d1c0 <quorem+0x44>
 800d208:	f855 300b 	ldr.w	r3, [r5, fp]
 800d20c:	b92b      	cbnz	r3, 800d21a <quorem+0x9e>
 800d20e:	9b01      	ldr	r3, [sp, #4]
 800d210:	3b04      	subs	r3, #4
 800d212:	429d      	cmp	r5, r3
 800d214:	461a      	mov	r2, r3
 800d216:	d32e      	bcc.n	800d276 <quorem+0xfa>
 800d218:	613c      	str	r4, [r7, #16]
 800d21a:	4638      	mov	r0, r7
 800d21c:	f001 fd64 	bl	800ece8 <__mcmp>
 800d220:	2800      	cmp	r0, #0
 800d222:	db24      	blt.n	800d26e <quorem+0xf2>
 800d224:	3601      	adds	r6, #1
 800d226:	4628      	mov	r0, r5
 800d228:	f04f 0c00 	mov.w	ip, #0
 800d22c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d230:	f8d0 e000 	ldr.w	lr, [r0]
 800d234:	b293      	uxth	r3, r2
 800d236:	ebac 0303 	sub.w	r3, ip, r3
 800d23a:	0c12      	lsrs	r2, r2, #16
 800d23c:	fa13 f38e 	uxtah	r3, r3, lr
 800d240:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d244:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d248:	b29b      	uxth	r3, r3
 800d24a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d24e:	45c1      	cmp	r9, r8
 800d250:	f840 3b04 	str.w	r3, [r0], #4
 800d254:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d258:	d2e8      	bcs.n	800d22c <quorem+0xb0>
 800d25a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d25e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d262:	b922      	cbnz	r2, 800d26e <quorem+0xf2>
 800d264:	3b04      	subs	r3, #4
 800d266:	429d      	cmp	r5, r3
 800d268:	461a      	mov	r2, r3
 800d26a:	d30a      	bcc.n	800d282 <quorem+0x106>
 800d26c:	613c      	str	r4, [r7, #16]
 800d26e:	4630      	mov	r0, r6
 800d270:	b003      	add	sp, #12
 800d272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d276:	6812      	ldr	r2, [r2, #0]
 800d278:	3b04      	subs	r3, #4
 800d27a:	2a00      	cmp	r2, #0
 800d27c:	d1cc      	bne.n	800d218 <quorem+0x9c>
 800d27e:	3c01      	subs	r4, #1
 800d280:	e7c7      	b.n	800d212 <quorem+0x96>
 800d282:	6812      	ldr	r2, [r2, #0]
 800d284:	3b04      	subs	r3, #4
 800d286:	2a00      	cmp	r2, #0
 800d288:	d1f0      	bne.n	800d26c <quorem+0xf0>
 800d28a:	3c01      	subs	r4, #1
 800d28c:	e7eb      	b.n	800d266 <quorem+0xea>
 800d28e:	2000      	movs	r0, #0
 800d290:	e7ee      	b.n	800d270 <quorem+0xf4>
 800d292:	0000      	movs	r0, r0
 800d294:	0000      	movs	r0, r0
	...

0800d298 <_dtoa_r>:
 800d298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d29c:	ed2d 8b04 	vpush	{d8-d9}
 800d2a0:	ec57 6b10 	vmov	r6, r7, d0
 800d2a4:	b093      	sub	sp, #76	; 0x4c
 800d2a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d2a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d2ac:	9106      	str	r1, [sp, #24]
 800d2ae:	ee10 aa10 	vmov	sl, s0
 800d2b2:	4604      	mov	r4, r0
 800d2b4:	9209      	str	r2, [sp, #36]	; 0x24
 800d2b6:	930c      	str	r3, [sp, #48]	; 0x30
 800d2b8:	46bb      	mov	fp, r7
 800d2ba:	b975      	cbnz	r5, 800d2da <_dtoa_r+0x42>
 800d2bc:	2010      	movs	r0, #16
 800d2be:	f001 fa21 	bl	800e704 <malloc>
 800d2c2:	4602      	mov	r2, r0
 800d2c4:	6260      	str	r0, [r4, #36]	; 0x24
 800d2c6:	b920      	cbnz	r0, 800d2d2 <_dtoa_r+0x3a>
 800d2c8:	4ba7      	ldr	r3, [pc, #668]	; (800d568 <_dtoa_r+0x2d0>)
 800d2ca:	21ea      	movs	r1, #234	; 0xea
 800d2cc:	48a7      	ldr	r0, [pc, #668]	; (800d56c <_dtoa_r+0x2d4>)
 800d2ce:	f002 f8fd 	bl	800f4cc <__assert_func>
 800d2d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d2d6:	6005      	str	r5, [r0, #0]
 800d2d8:	60c5      	str	r5, [r0, #12]
 800d2da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2dc:	6819      	ldr	r1, [r3, #0]
 800d2de:	b151      	cbz	r1, 800d2f6 <_dtoa_r+0x5e>
 800d2e0:	685a      	ldr	r2, [r3, #4]
 800d2e2:	604a      	str	r2, [r1, #4]
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	4093      	lsls	r3, r2
 800d2e8:	608b      	str	r3, [r1, #8]
 800d2ea:	4620      	mov	r0, r4
 800d2ec:	f001 fa70 	bl	800e7d0 <_Bfree>
 800d2f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	601a      	str	r2, [r3, #0]
 800d2f6:	1e3b      	subs	r3, r7, #0
 800d2f8:	bfaa      	itet	ge
 800d2fa:	2300      	movge	r3, #0
 800d2fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d300:	f8c8 3000 	strge.w	r3, [r8]
 800d304:	4b9a      	ldr	r3, [pc, #616]	; (800d570 <_dtoa_r+0x2d8>)
 800d306:	bfbc      	itt	lt
 800d308:	2201      	movlt	r2, #1
 800d30a:	f8c8 2000 	strlt.w	r2, [r8]
 800d30e:	ea33 030b 	bics.w	r3, r3, fp
 800d312:	d11b      	bne.n	800d34c <_dtoa_r+0xb4>
 800d314:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d316:	f242 730f 	movw	r3, #9999	; 0x270f
 800d31a:	6013      	str	r3, [r2, #0]
 800d31c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d320:	4333      	orrs	r3, r6
 800d322:	f000 8592 	beq.w	800de4a <_dtoa_r+0xbb2>
 800d326:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d328:	b963      	cbnz	r3, 800d344 <_dtoa_r+0xac>
 800d32a:	4b92      	ldr	r3, [pc, #584]	; (800d574 <_dtoa_r+0x2dc>)
 800d32c:	e022      	b.n	800d374 <_dtoa_r+0xdc>
 800d32e:	4b92      	ldr	r3, [pc, #584]	; (800d578 <_dtoa_r+0x2e0>)
 800d330:	9301      	str	r3, [sp, #4]
 800d332:	3308      	adds	r3, #8
 800d334:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d336:	6013      	str	r3, [r2, #0]
 800d338:	9801      	ldr	r0, [sp, #4]
 800d33a:	b013      	add	sp, #76	; 0x4c
 800d33c:	ecbd 8b04 	vpop	{d8-d9}
 800d340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d344:	4b8b      	ldr	r3, [pc, #556]	; (800d574 <_dtoa_r+0x2dc>)
 800d346:	9301      	str	r3, [sp, #4]
 800d348:	3303      	adds	r3, #3
 800d34a:	e7f3      	b.n	800d334 <_dtoa_r+0x9c>
 800d34c:	2200      	movs	r2, #0
 800d34e:	2300      	movs	r3, #0
 800d350:	4650      	mov	r0, sl
 800d352:	4659      	mov	r1, fp
 800d354:	f7f3 fbc8 	bl	8000ae8 <__aeabi_dcmpeq>
 800d358:	ec4b ab19 	vmov	d9, sl, fp
 800d35c:	4680      	mov	r8, r0
 800d35e:	b158      	cbz	r0, 800d378 <_dtoa_r+0xe0>
 800d360:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d362:	2301      	movs	r3, #1
 800d364:	6013      	str	r3, [r2, #0]
 800d366:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d368:	2b00      	cmp	r3, #0
 800d36a:	f000 856b 	beq.w	800de44 <_dtoa_r+0xbac>
 800d36e:	4883      	ldr	r0, [pc, #524]	; (800d57c <_dtoa_r+0x2e4>)
 800d370:	6018      	str	r0, [r3, #0]
 800d372:	1e43      	subs	r3, r0, #1
 800d374:	9301      	str	r3, [sp, #4]
 800d376:	e7df      	b.n	800d338 <_dtoa_r+0xa0>
 800d378:	ec4b ab10 	vmov	d0, sl, fp
 800d37c:	aa10      	add	r2, sp, #64	; 0x40
 800d37e:	a911      	add	r1, sp, #68	; 0x44
 800d380:	4620      	mov	r0, r4
 800d382:	f001 fdd3 	bl	800ef2c <__d2b>
 800d386:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d38a:	ee08 0a10 	vmov	s16, r0
 800d38e:	2d00      	cmp	r5, #0
 800d390:	f000 8084 	beq.w	800d49c <_dtoa_r+0x204>
 800d394:	ee19 3a90 	vmov	r3, s19
 800d398:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d39c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d3a0:	4656      	mov	r6, sl
 800d3a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d3a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d3aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d3ae:	4b74      	ldr	r3, [pc, #464]	; (800d580 <_dtoa_r+0x2e8>)
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	4630      	mov	r0, r6
 800d3b4:	4639      	mov	r1, r7
 800d3b6:	f7f2 ff77 	bl	80002a8 <__aeabi_dsub>
 800d3ba:	a365      	add	r3, pc, #404	; (adr r3, 800d550 <_dtoa_r+0x2b8>)
 800d3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c0:	f7f3 f92a 	bl	8000618 <__aeabi_dmul>
 800d3c4:	a364      	add	r3, pc, #400	; (adr r3, 800d558 <_dtoa_r+0x2c0>)
 800d3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ca:	f7f2 ff6f 	bl	80002ac <__adddf3>
 800d3ce:	4606      	mov	r6, r0
 800d3d0:	4628      	mov	r0, r5
 800d3d2:	460f      	mov	r7, r1
 800d3d4:	f7f3 f8b6 	bl	8000544 <__aeabi_i2d>
 800d3d8:	a361      	add	r3, pc, #388	; (adr r3, 800d560 <_dtoa_r+0x2c8>)
 800d3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3de:	f7f3 f91b 	bl	8000618 <__aeabi_dmul>
 800d3e2:	4602      	mov	r2, r0
 800d3e4:	460b      	mov	r3, r1
 800d3e6:	4630      	mov	r0, r6
 800d3e8:	4639      	mov	r1, r7
 800d3ea:	f7f2 ff5f 	bl	80002ac <__adddf3>
 800d3ee:	4606      	mov	r6, r0
 800d3f0:	460f      	mov	r7, r1
 800d3f2:	f7f3 fbc1 	bl	8000b78 <__aeabi_d2iz>
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	9000      	str	r0, [sp, #0]
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	4630      	mov	r0, r6
 800d3fe:	4639      	mov	r1, r7
 800d400:	f7f3 fb7c 	bl	8000afc <__aeabi_dcmplt>
 800d404:	b150      	cbz	r0, 800d41c <_dtoa_r+0x184>
 800d406:	9800      	ldr	r0, [sp, #0]
 800d408:	f7f3 f89c 	bl	8000544 <__aeabi_i2d>
 800d40c:	4632      	mov	r2, r6
 800d40e:	463b      	mov	r3, r7
 800d410:	f7f3 fb6a 	bl	8000ae8 <__aeabi_dcmpeq>
 800d414:	b910      	cbnz	r0, 800d41c <_dtoa_r+0x184>
 800d416:	9b00      	ldr	r3, [sp, #0]
 800d418:	3b01      	subs	r3, #1
 800d41a:	9300      	str	r3, [sp, #0]
 800d41c:	9b00      	ldr	r3, [sp, #0]
 800d41e:	2b16      	cmp	r3, #22
 800d420:	d85a      	bhi.n	800d4d8 <_dtoa_r+0x240>
 800d422:	9a00      	ldr	r2, [sp, #0]
 800d424:	4b57      	ldr	r3, [pc, #348]	; (800d584 <_dtoa_r+0x2ec>)
 800d426:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d42e:	ec51 0b19 	vmov	r0, r1, d9
 800d432:	f7f3 fb63 	bl	8000afc <__aeabi_dcmplt>
 800d436:	2800      	cmp	r0, #0
 800d438:	d050      	beq.n	800d4dc <_dtoa_r+0x244>
 800d43a:	9b00      	ldr	r3, [sp, #0]
 800d43c:	3b01      	subs	r3, #1
 800d43e:	9300      	str	r3, [sp, #0]
 800d440:	2300      	movs	r3, #0
 800d442:	930b      	str	r3, [sp, #44]	; 0x2c
 800d444:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d446:	1b5d      	subs	r5, r3, r5
 800d448:	1e6b      	subs	r3, r5, #1
 800d44a:	9305      	str	r3, [sp, #20]
 800d44c:	bf45      	ittet	mi
 800d44e:	f1c5 0301 	rsbmi	r3, r5, #1
 800d452:	9304      	strmi	r3, [sp, #16]
 800d454:	2300      	movpl	r3, #0
 800d456:	2300      	movmi	r3, #0
 800d458:	bf4c      	ite	mi
 800d45a:	9305      	strmi	r3, [sp, #20]
 800d45c:	9304      	strpl	r3, [sp, #16]
 800d45e:	9b00      	ldr	r3, [sp, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	db3d      	blt.n	800d4e0 <_dtoa_r+0x248>
 800d464:	9b05      	ldr	r3, [sp, #20]
 800d466:	9a00      	ldr	r2, [sp, #0]
 800d468:	920a      	str	r2, [sp, #40]	; 0x28
 800d46a:	4413      	add	r3, r2
 800d46c:	9305      	str	r3, [sp, #20]
 800d46e:	2300      	movs	r3, #0
 800d470:	9307      	str	r3, [sp, #28]
 800d472:	9b06      	ldr	r3, [sp, #24]
 800d474:	2b09      	cmp	r3, #9
 800d476:	f200 8089 	bhi.w	800d58c <_dtoa_r+0x2f4>
 800d47a:	2b05      	cmp	r3, #5
 800d47c:	bfc4      	itt	gt
 800d47e:	3b04      	subgt	r3, #4
 800d480:	9306      	strgt	r3, [sp, #24]
 800d482:	9b06      	ldr	r3, [sp, #24]
 800d484:	f1a3 0302 	sub.w	r3, r3, #2
 800d488:	bfcc      	ite	gt
 800d48a:	2500      	movgt	r5, #0
 800d48c:	2501      	movle	r5, #1
 800d48e:	2b03      	cmp	r3, #3
 800d490:	f200 8087 	bhi.w	800d5a2 <_dtoa_r+0x30a>
 800d494:	e8df f003 	tbb	[pc, r3]
 800d498:	59383a2d 	.word	0x59383a2d
 800d49c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d4a0:	441d      	add	r5, r3
 800d4a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d4a6:	2b20      	cmp	r3, #32
 800d4a8:	bfc1      	itttt	gt
 800d4aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d4ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d4b2:	fa0b f303 	lslgt.w	r3, fp, r3
 800d4b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d4ba:	bfda      	itte	le
 800d4bc:	f1c3 0320 	rsble	r3, r3, #32
 800d4c0:	fa06 f003 	lslle.w	r0, r6, r3
 800d4c4:	4318      	orrgt	r0, r3
 800d4c6:	f7f3 f82d 	bl	8000524 <__aeabi_ui2d>
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	4606      	mov	r6, r0
 800d4ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d4d2:	3d01      	subs	r5, #1
 800d4d4:	930e      	str	r3, [sp, #56]	; 0x38
 800d4d6:	e76a      	b.n	800d3ae <_dtoa_r+0x116>
 800d4d8:	2301      	movs	r3, #1
 800d4da:	e7b2      	b.n	800d442 <_dtoa_r+0x1aa>
 800d4dc:	900b      	str	r0, [sp, #44]	; 0x2c
 800d4de:	e7b1      	b.n	800d444 <_dtoa_r+0x1ac>
 800d4e0:	9b04      	ldr	r3, [sp, #16]
 800d4e2:	9a00      	ldr	r2, [sp, #0]
 800d4e4:	1a9b      	subs	r3, r3, r2
 800d4e6:	9304      	str	r3, [sp, #16]
 800d4e8:	4253      	negs	r3, r2
 800d4ea:	9307      	str	r3, [sp, #28]
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	930a      	str	r3, [sp, #40]	; 0x28
 800d4f0:	e7bf      	b.n	800d472 <_dtoa_r+0x1da>
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	9308      	str	r3, [sp, #32]
 800d4f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	dc55      	bgt.n	800d5a8 <_dtoa_r+0x310>
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d502:	461a      	mov	r2, r3
 800d504:	9209      	str	r2, [sp, #36]	; 0x24
 800d506:	e00c      	b.n	800d522 <_dtoa_r+0x28a>
 800d508:	2301      	movs	r3, #1
 800d50a:	e7f3      	b.n	800d4f4 <_dtoa_r+0x25c>
 800d50c:	2300      	movs	r3, #0
 800d50e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d510:	9308      	str	r3, [sp, #32]
 800d512:	9b00      	ldr	r3, [sp, #0]
 800d514:	4413      	add	r3, r2
 800d516:	9302      	str	r3, [sp, #8]
 800d518:	3301      	adds	r3, #1
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	9303      	str	r3, [sp, #12]
 800d51e:	bfb8      	it	lt
 800d520:	2301      	movlt	r3, #1
 800d522:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d524:	2200      	movs	r2, #0
 800d526:	6042      	str	r2, [r0, #4]
 800d528:	2204      	movs	r2, #4
 800d52a:	f102 0614 	add.w	r6, r2, #20
 800d52e:	429e      	cmp	r6, r3
 800d530:	6841      	ldr	r1, [r0, #4]
 800d532:	d93d      	bls.n	800d5b0 <_dtoa_r+0x318>
 800d534:	4620      	mov	r0, r4
 800d536:	f001 f90b 	bl	800e750 <_Balloc>
 800d53a:	9001      	str	r0, [sp, #4]
 800d53c:	2800      	cmp	r0, #0
 800d53e:	d13b      	bne.n	800d5b8 <_dtoa_r+0x320>
 800d540:	4b11      	ldr	r3, [pc, #68]	; (800d588 <_dtoa_r+0x2f0>)
 800d542:	4602      	mov	r2, r0
 800d544:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d548:	e6c0      	b.n	800d2cc <_dtoa_r+0x34>
 800d54a:	2301      	movs	r3, #1
 800d54c:	e7df      	b.n	800d50e <_dtoa_r+0x276>
 800d54e:	bf00      	nop
 800d550:	636f4361 	.word	0x636f4361
 800d554:	3fd287a7 	.word	0x3fd287a7
 800d558:	8b60c8b3 	.word	0x8b60c8b3
 800d55c:	3fc68a28 	.word	0x3fc68a28
 800d560:	509f79fb 	.word	0x509f79fb
 800d564:	3fd34413 	.word	0x3fd34413
 800d568:	080118fe 	.word	0x080118fe
 800d56c:	08011915 	.word	0x08011915
 800d570:	7ff00000 	.word	0x7ff00000
 800d574:	080118fa 	.word	0x080118fa
 800d578:	080118f1 	.word	0x080118f1
 800d57c:	08011775 	.word	0x08011775
 800d580:	3ff80000 	.word	0x3ff80000
 800d584:	08011a80 	.word	0x08011a80
 800d588:	08011970 	.word	0x08011970
 800d58c:	2501      	movs	r5, #1
 800d58e:	2300      	movs	r3, #0
 800d590:	9306      	str	r3, [sp, #24]
 800d592:	9508      	str	r5, [sp, #32]
 800d594:	f04f 33ff 	mov.w	r3, #4294967295
 800d598:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d59c:	2200      	movs	r2, #0
 800d59e:	2312      	movs	r3, #18
 800d5a0:	e7b0      	b.n	800d504 <_dtoa_r+0x26c>
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	9308      	str	r3, [sp, #32]
 800d5a6:	e7f5      	b.n	800d594 <_dtoa_r+0x2fc>
 800d5a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d5ae:	e7b8      	b.n	800d522 <_dtoa_r+0x28a>
 800d5b0:	3101      	adds	r1, #1
 800d5b2:	6041      	str	r1, [r0, #4]
 800d5b4:	0052      	lsls	r2, r2, #1
 800d5b6:	e7b8      	b.n	800d52a <_dtoa_r+0x292>
 800d5b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5ba:	9a01      	ldr	r2, [sp, #4]
 800d5bc:	601a      	str	r2, [r3, #0]
 800d5be:	9b03      	ldr	r3, [sp, #12]
 800d5c0:	2b0e      	cmp	r3, #14
 800d5c2:	f200 809d 	bhi.w	800d700 <_dtoa_r+0x468>
 800d5c6:	2d00      	cmp	r5, #0
 800d5c8:	f000 809a 	beq.w	800d700 <_dtoa_r+0x468>
 800d5cc:	9b00      	ldr	r3, [sp, #0]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	dd32      	ble.n	800d638 <_dtoa_r+0x3a0>
 800d5d2:	4ab7      	ldr	r2, [pc, #732]	; (800d8b0 <_dtoa_r+0x618>)
 800d5d4:	f003 030f 	and.w	r3, r3, #15
 800d5d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d5dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d5e0:	9b00      	ldr	r3, [sp, #0]
 800d5e2:	05d8      	lsls	r0, r3, #23
 800d5e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d5e8:	d516      	bpl.n	800d618 <_dtoa_r+0x380>
 800d5ea:	4bb2      	ldr	r3, [pc, #712]	; (800d8b4 <_dtoa_r+0x61c>)
 800d5ec:	ec51 0b19 	vmov	r0, r1, d9
 800d5f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d5f4:	f7f3 f93a 	bl	800086c <__aeabi_ddiv>
 800d5f8:	f007 070f 	and.w	r7, r7, #15
 800d5fc:	4682      	mov	sl, r0
 800d5fe:	468b      	mov	fp, r1
 800d600:	2503      	movs	r5, #3
 800d602:	4eac      	ldr	r6, [pc, #688]	; (800d8b4 <_dtoa_r+0x61c>)
 800d604:	b957      	cbnz	r7, 800d61c <_dtoa_r+0x384>
 800d606:	4642      	mov	r2, r8
 800d608:	464b      	mov	r3, r9
 800d60a:	4650      	mov	r0, sl
 800d60c:	4659      	mov	r1, fp
 800d60e:	f7f3 f92d 	bl	800086c <__aeabi_ddiv>
 800d612:	4682      	mov	sl, r0
 800d614:	468b      	mov	fp, r1
 800d616:	e028      	b.n	800d66a <_dtoa_r+0x3d2>
 800d618:	2502      	movs	r5, #2
 800d61a:	e7f2      	b.n	800d602 <_dtoa_r+0x36a>
 800d61c:	07f9      	lsls	r1, r7, #31
 800d61e:	d508      	bpl.n	800d632 <_dtoa_r+0x39a>
 800d620:	4640      	mov	r0, r8
 800d622:	4649      	mov	r1, r9
 800d624:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d628:	f7f2 fff6 	bl	8000618 <__aeabi_dmul>
 800d62c:	3501      	adds	r5, #1
 800d62e:	4680      	mov	r8, r0
 800d630:	4689      	mov	r9, r1
 800d632:	107f      	asrs	r7, r7, #1
 800d634:	3608      	adds	r6, #8
 800d636:	e7e5      	b.n	800d604 <_dtoa_r+0x36c>
 800d638:	f000 809b 	beq.w	800d772 <_dtoa_r+0x4da>
 800d63c:	9b00      	ldr	r3, [sp, #0]
 800d63e:	4f9d      	ldr	r7, [pc, #628]	; (800d8b4 <_dtoa_r+0x61c>)
 800d640:	425e      	negs	r6, r3
 800d642:	4b9b      	ldr	r3, [pc, #620]	; (800d8b0 <_dtoa_r+0x618>)
 800d644:	f006 020f 	and.w	r2, r6, #15
 800d648:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d650:	ec51 0b19 	vmov	r0, r1, d9
 800d654:	f7f2 ffe0 	bl	8000618 <__aeabi_dmul>
 800d658:	1136      	asrs	r6, r6, #4
 800d65a:	4682      	mov	sl, r0
 800d65c:	468b      	mov	fp, r1
 800d65e:	2300      	movs	r3, #0
 800d660:	2502      	movs	r5, #2
 800d662:	2e00      	cmp	r6, #0
 800d664:	d17a      	bne.n	800d75c <_dtoa_r+0x4c4>
 800d666:	2b00      	cmp	r3, #0
 800d668:	d1d3      	bne.n	800d612 <_dtoa_r+0x37a>
 800d66a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	f000 8082 	beq.w	800d776 <_dtoa_r+0x4de>
 800d672:	4b91      	ldr	r3, [pc, #580]	; (800d8b8 <_dtoa_r+0x620>)
 800d674:	2200      	movs	r2, #0
 800d676:	4650      	mov	r0, sl
 800d678:	4659      	mov	r1, fp
 800d67a:	f7f3 fa3f 	bl	8000afc <__aeabi_dcmplt>
 800d67e:	2800      	cmp	r0, #0
 800d680:	d079      	beq.n	800d776 <_dtoa_r+0x4de>
 800d682:	9b03      	ldr	r3, [sp, #12]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d076      	beq.n	800d776 <_dtoa_r+0x4de>
 800d688:	9b02      	ldr	r3, [sp, #8]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	dd36      	ble.n	800d6fc <_dtoa_r+0x464>
 800d68e:	9b00      	ldr	r3, [sp, #0]
 800d690:	4650      	mov	r0, sl
 800d692:	4659      	mov	r1, fp
 800d694:	1e5f      	subs	r7, r3, #1
 800d696:	2200      	movs	r2, #0
 800d698:	4b88      	ldr	r3, [pc, #544]	; (800d8bc <_dtoa_r+0x624>)
 800d69a:	f7f2 ffbd 	bl	8000618 <__aeabi_dmul>
 800d69e:	9e02      	ldr	r6, [sp, #8]
 800d6a0:	4682      	mov	sl, r0
 800d6a2:	468b      	mov	fp, r1
 800d6a4:	3501      	adds	r5, #1
 800d6a6:	4628      	mov	r0, r5
 800d6a8:	f7f2 ff4c 	bl	8000544 <__aeabi_i2d>
 800d6ac:	4652      	mov	r2, sl
 800d6ae:	465b      	mov	r3, fp
 800d6b0:	f7f2 ffb2 	bl	8000618 <__aeabi_dmul>
 800d6b4:	4b82      	ldr	r3, [pc, #520]	; (800d8c0 <_dtoa_r+0x628>)
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	f7f2 fdf8 	bl	80002ac <__adddf3>
 800d6bc:	46d0      	mov	r8, sl
 800d6be:	46d9      	mov	r9, fp
 800d6c0:	4682      	mov	sl, r0
 800d6c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d6c6:	2e00      	cmp	r6, #0
 800d6c8:	d158      	bne.n	800d77c <_dtoa_r+0x4e4>
 800d6ca:	4b7e      	ldr	r3, [pc, #504]	; (800d8c4 <_dtoa_r+0x62c>)
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	4640      	mov	r0, r8
 800d6d0:	4649      	mov	r1, r9
 800d6d2:	f7f2 fde9 	bl	80002a8 <__aeabi_dsub>
 800d6d6:	4652      	mov	r2, sl
 800d6d8:	465b      	mov	r3, fp
 800d6da:	4680      	mov	r8, r0
 800d6dc:	4689      	mov	r9, r1
 800d6de:	f7f3 fa2b 	bl	8000b38 <__aeabi_dcmpgt>
 800d6e2:	2800      	cmp	r0, #0
 800d6e4:	f040 8295 	bne.w	800dc12 <_dtoa_r+0x97a>
 800d6e8:	4652      	mov	r2, sl
 800d6ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d6ee:	4640      	mov	r0, r8
 800d6f0:	4649      	mov	r1, r9
 800d6f2:	f7f3 fa03 	bl	8000afc <__aeabi_dcmplt>
 800d6f6:	2800      	cmp	r0, #0
 800d6f8:	f040 8289 	bne.w	800dc0e <_dtoa_r+0x976>
 800d6fc:	ec5b ab19 	vmov	sl, fp, d9
 800d700:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d702:	2b00      	cmp	r3, #0
 800d704:	f2c0 8148 	blt.w	800d998 <_dtoa_r+0x700>
 800d708:	9a00      	ldr	r2, [sp, #0]
 800d70a:	2a0e      	cmp	r2, #14
 800d70c:	f300 8144 	bgt.w	800d998 <_dtoa_r+0x700>
 800d710:	4b67      	ldr	r3, [pc, #412]	; (800d8b0 <_dtoa_r+0x618>)
 800d712:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d716:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	f280 80d5 	bge.w	800d8cc <_dtoa_r+0x634>
 800d722:	9b03      	ldr	r3, [sp, #12]
 800d724:	2b00      	cmp	r3, #0
 800d726:	f300 80d1 	bgt.w	800d8cc <_dtoa_r+0x634>
 800d72a:	f040 826f 	bne.w	800dc0c <_dtoa_r+0x974>
 800d72e:	4b65      	ldr	r3, [pc, #404]	; (800d8c4 <_dtoa_r+0x62c>)
 800d730:	2200      	movs	r2, #0
 800d732:	4640      	mov	r0, r8
 800d734:	4649      	mov	r1, r9
 800d736:	f7f2 ff6f 	bl	8000618 <__aeabi_dmul>
 800d73a:	4652      	mov	r2, sl
 800d73c:	465b      	mov	r3, fp
 800d73e:	f7f3 f9f1 	bl	8000b24 <__aeabi_dcmpge>
 800d742:	9e03      	ldr	r6, [sp, #12]
 800d744:	4637      	mov	r7, r6
 800d746:	2800      	cmp	r0, #0
 800d748:	f040 8245 	bne.w	800dbd6 <_dtoa_r+0x93e>
 800d74c:	9d01      	ldr	r5, [sp, #4]
 800d74e:	2331      	movs	r3, #49	; 0x31
 800d750:	f805 3b01 	strb.w	r3, [r5], #1
 800d754:	9b00      	ldr	r3, [sp, #0]
 800d756:	3301      	adds	r3, #1
 800d758:	9300      	str	r3, [sp, #0]
 800d75a:	e240      	b.n	800dbde <_dtoa_r+0x946>
 800d75c:	07f2      	lsls	r2, r6, #31
 800d75e:	d505      	bpl.n	800d76c <_dtoa_r+0x4d4>
 800d760:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d764:	f7f2 ff58 	bl	8000618 <__aeabi_dmul>
 800d768:	3501      	adds	r5, #1
 800d76a:	2301      	movs	r3, #1
 800d76c:	1076      	asrs	r6, r6, #1
 800d76e:	3708      	adds	r7, #8
 800d770:	e777      	b.n	800d662 <_dtoa_r+0x3ca>
 800d772:	2502      	movs	r5, #2
 800d774:	e779      	b.n	800d66a <_dtoa_r+0x3d2>
 800d776:	9f00      	ldr	r7, [sp, #0]
 800d778:	9e03      	ldr	r6, [sp, #12]
 800d77a:	e794      	b.n	800d6a6 <_dtoa_r+0x40e>
 800d77c:	9901      	ldr	r1, [sp, #4]
 800d77e:	4b4c      	ldr	r3, [pc, #304]	; (800d8b0 <_dtoa_r+0x618>)
 800d780:	4431      	add	r1, r6
 800d782:	910d      	str	r1, [sp, #52]	; 0x34
 800d784:	9908      	ldr	r1, [sp, #32]
 800d786:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d78a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d78e:	2900      	cmp	r1, #0
 800d790:	d043      	beq.n	800d81a <_dtoa_r+0x582>
 800d792:	494d      	ldr	r1, [pc, #308]	; (800d8c8 <_dtoa_r+0x630>)
 800d794:	2000      	movs	r0, #0
 800d796:	f7f3 f869 	bl	800086c <__aeabi_ddiv>
 800d79a:	4652      	mov	r2, sl
 800d79c:	465b      	mov	r3, fp
 800d79e:	f7f2 fd83 	bl	80002a8 <__aeabi_dsub>
 800d7a2:	9d01      	ldr	r5, [sp, #4]
 800d7a4:	4682      	mov	sl, r0
 800d7a6:	468b      	mov	fp, r1
 800d7a8:	4649      	mov	r1, r9
 800d7aa:	4640      	mov	r0, r8
 800d7ac:	f7f3 f9e4 	bl	8000b78 <__aeabi_d2iz>
 800d7b0:	4606      	mov	r6, r0
 800d7b2:	f7f2 fec7 	bl	8000544 <__aeabi_i2d>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	4640      	mov	r0, r8
 800d7bc:	4649      	mov	r1, r9
 800d7be:	f7f2 fd73 	bl	80002a8 <__aeabi_dsub>
 800d7c2:	3630      	adds	r6, #48	; 0x30
 800d7c4:	f805 6b01 	strb.w	r6, [r5], #1
 800d7c8:	4652      	mov	r2, sl
 800d7ca:	465b      	mov	r3, fp
 800d7cc:	4680      	mov	r8, r0
 800d7ce:	4689      	mov	r9, r1
 800d7d0:	f7f3 f994 	bl	8000afc <__aeabi_dcmplt>
 800d7d4:	2800      	cmp	r0, #0
 800d7d6:	d163      	bne.n	800d8a0 <_dtoa_r+0x608>
 800d7d8:	4642      	mov	r2, r8
 800d7da:	464b      	mov	r3, r9
 800d7dc:	4936      	ldr	r1, [pc, #216]	; (800d8b8 <_dtoa_r+0x620>)
 800d7de:	2000      	movs	r0, #0
 800d7e0:	f7f2 fd62 	bl	80002a8 <__aeabi_dsub>
 800d7e4:	4652      	mov	r2, sl
 800d7e6:	465b      	mov	r3, fp
 800d7e8:	f7f3 f988 	bl	8000afc <__aeabi_dcmplt>
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	f040 80b5 	bne.w	800d95c <_dtoa_r+0x6c4>
 800d7f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7f4:	429d      	cmp	r5, r3
 800d7f6:	d081      	beq.n	800d6fc <_dtoa_r+0x464>
 800d7f8:	4b30      	ldr	r3, [pc, #192]	; (800d8bc <_dtoa_r+0x624>)
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	4650      	mov	r0, sl
 800d7fe:	4659      	mov	r1, fp
 800d800:	f7f2 ff0a 	bl	8000618 <__aeabi_dmul>
 800d804:	4b2d      	ldr	r3, [pc, #180]	; (800d8bc <_dtoa_r+0x624>)
 800d806:	4682      	mov	sl, r0
 800d808:	468b      	mov	fp, r1
 800d80a:	4640      	mov	r0, r8
 800d80c:	4649      	mov	r1, r9
 800d80e:	2200      	movs	r2, #0
 800d810:	f7f2 ff02 	bl	8000618 <__aeabi_dmul>
 800d814:	4680      	mov	r8, r0
 800d816:	4689      	mov	r9, r1
 800d818:	e7c6      	b.n	800d7a8 <_dtoa_r+0x510>
 800d81a:	4650      	mov	r0, sl
 800d81c:	4659      	mov	r1, fp
 800d81e:	f7f2 fefb 	bl	8000618 <__aeabi_dmul>
 800d822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d824:	9d01      	ldr	r5, [sp, #4]
 800d826:	930f      	str	r3, [sp, #60]	; 0x3c
 800d828:	4682      	mov	sl, r0
 800d82a:	468b      	mov	fp, r1
 800d82c:	4649      	mov	r1, r9
 800d82e:	4640      	mov	r0, r8
 800d830:	f7f3 f9a2 	bl	8000b78 <__aeabi_d2iz>
 800d834:	4606      	mov	r6, r0
 800d836:	f7f2 fe85 	bl	8000544 <__aeabi_i2d>
 800d83a:	3630      	adds	r6, #48	; 0x30
 800d83c:	4602      	mov	r2, r0
 800d83e:	460b      	mov	r3, r1
 800d840:	4640      	mov	r0, r8
 800d842:	4649      	mov	r1, r9
 800d844:	f7f2 fd30 	bl	80002a8 <__aeabi_dsub>
 800d848:	f805 6b01 	strb.w	r6, [r5], #1
 800d84c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d84e:	429d      	cmp	r5, r3
 800d850:	4680      	mov	r8, r0
 800d852:	4689      	mov	r9, r1
 800d854:	f04f 0200 	mov.w	r2, #0
 800d858:	d124      	bne.n	800d8a4 <_dtoa_r+0x60c>
 800d85a:	4b1b      	ldr	r3, [pc, #108]	; (800d8c8 <_dtoa_r+0x630>)
 800d85c:	4650      	mov	r0, sl
 800d85e:	4659      	mov	r1, fp
 800d860:	f7f2 fd24 	bl	80002ac <__adddf3>
 800d864:	4602      	mov	r2, r0
 800d866:	460b      	mov	r3, r1
 800d868:	4640      	mov	r0, r8
 800d86a:	4649      	mov	r1, r9
 800d86c:	f7f3 f964 	bl	8000b38 <__aeabi_dcmpgt>
 800d870:	2800      	cmp	r0, #0
 800d872:	d173      	bne.n	800d95c <_dtoa_r+0x6c4>
 800d874:	4652      	mov	r2, sl
 800d876:	465b      	mov	r3, fp
 800d878:	4913      	ldr	r1, [pc, #76]	; (800d8c8 <_dtoa_r+0x630>)
 800d87a:	2000      	movs	r0, #0
 800d87c:	f7f2 fd14 	bl	80002a8 <__aeabi_dsub>
 800d880:	4602      	mov	r2, r0
 800d882:	460b      	mov	r3, r1
 800d884:	4640      	mov	r0, r8
 800d886:	4649      	mov	r1, r9
 800d888:	f7f3 f938 	bl	8000afc <__aeabi_dcmplt>
 800d88c:	2800      	cmp	r0, #0
 800d88e:	f43f af35 	beq.w	800d6fc <_dtoa_r+0x464>
 800d892:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d894:	1e6b      	subs	r3, r5, #1
 800d896:	930f      	str	r3, [sp, #60]	; 0x3c
 800d898:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d89c:	2b30      	cmp	r3, #48	; 0x30
 800d89e:	d0f8      	beq.n	800d892 <_dtoa_r+0x5fa>
 800d8a0:	9700      	str	r7, [sp, #0]
 800d8a2:	e049      	b.n	800d938 <_dtoa_r+0x6a0>
 800d8a4:	4b05      	ldr	r3, [pc, #20]	; (800d8bc <_dtoa_r+0x624>)
 800d8a6:	f7f2 feb7 	bl	8000618 <__aeabi_dmul>
 800d8aa:	4680      	mov	r8, r0
 800d8ac:	4689      	mov	r9, r1
 800d8ae:	e7bd      	b.n	800d82c <_dtoa_r+0x594>
 800d8b0:	08011a80 	.word	0x08011a80
 800d8b4:	08011a58 	.word	0x08011a58
 800d8b8:	3ff00000 	.word	0x3ff00000
 800d8bc:	40240000 	.word	0x40240000
 800d8c0:	401c0000 	.word	0x401c0000
 800d8c4:	40140000 	.word	0x40140000
 800d8c8:	3fe00000 	.word	0x3fe00000
 800d8cc:	9d01      	ldr	r5, [sp, #4]
 800d8ce:	4656      	mov	r6, sl
 800d8d0:	465f      	mov	r7, fp
 800d8d2:	4642      	mov	r2, r8
 800d8d4:	464b      	mov	r3, r9
 800d8d6:	4630      	mov	r0, r6
 800d8d8:	4639      	mov	r1, r7
 800d8da:	f7f2 ffc7 	bl	800086c <__aeabi_ddiv>
 800d8de:	f7f3 f94b 	bl	8000b78 <__aeabi_d2iz>
 800d8e2:	4682      	mov	sl, r0
 800d8e4:	f7f2 fe2e 	bl	8000544 <__aeabi_i2d>
 800d8e8:	4642      	mov	r2, r8
 800d8ea:	464b      	mov	r3, r9
 800d8ec:	f7f2 fe94 	bl	8000618 <__aeabi_dmul>
 800d8f0:	4602      	mov	r2, r0
 800d8f2:	460b      	mov	r3, r1
 800d8f4:	4630      	mov	r0, r6
 800d8f6:	4639      	mov	r1, r7
 800d8f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d8fc:	f7f2 fcd4 	bl	80002a8 <__aeabi_dsub>
 800d900:	f805 6b01 	strb.w	r6, [r5], #1
 800d904:	9e01      	ldr	r6, [sp, #4]
 800d906:	9f03      	ldr	r7, [sp, #12]
 800d908:	1bae      	subs	r6, r5, r6
 800d90a:	42b7      	cmp	r7, r6
 800d90c:	4602      	mov	r2, r0
 800d90e:	460b      	mov	r3, r1
 800d910:	d135      	bne.n	800d97e <_dtoa_r+0x6e6>
 800d912:	f7f2 fccb 	bl	80002ac <__adddf3>
 800d916:	4642      	mov	r2, r8
 800d918:	464b      	mov	r3, r9
 800d91a:	4606      	mov	r6, r0
 800d91c:	460f      	mov	r7, r1
 800d91e:	f7f3 f90b 	bl	8000b38 <__aeabi_dcmpgt>
 800d922:	b9d0      	cbnz	r0, 800d95a <_dtoa_r+0x6c2>
 800d924:	4642      	mov	r2, r8
 800d926:	464b      	mov	r3, r9
 800d928:	4630      	mov	r0, r6
 800d92a:	4639      	mov	r1, r7
 800d92c:	f7f3 f8dc 	bl	8000ae8 <__aeabi_dcmpeq>
 800d930:	b110      	cbz	r0, 800d938 <_dtoa_r+0x6a0>
 800d932:	f01a 0f01 	tst.w	sl, #1
 800d936:	d110      	bne.n	800d95a <_dtoa_r+0x6c2>
 800d938:	4620      	mov	r0, r4
 800d93a:	ee18 1a10 	vmov	r1, s16
 800d93e:	f000 ff47 	bl	800e7d0 <_Bfree>
 800d942:	2300      	movs	r3, #0
 800d944:	9800      	ldr	r0, [sp, #0]
 800d946:	702b      	strb	r3, [r5, #0]
 800d948:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d94a:	3001      	adds	r0, #1
 800d94c:	6018      	str	r0, [r3, #0]
 800d94e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d950:	2b00      	cmp	r3, #0
 800d952:	f43f acf1 	beq.w	800d338 <_dtoa_r+0xa0>
 800d956:	601d      	str	r5, [r3, #0]
 800d958:	e4ee      	b.n	800d338 <_dtoa_r+0xa0>
 800d95a:	9f00      	ldr	r7, [sp, #0]
 800d95c:	462b      	mov	r3, r5
 800d95e:	461d      	mov	r5, r3
 800d960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d964:	2a39      	cmp	r2, #57	; 0x39
 800d966:	d106      	bne.n	800d976 <_dtoa_r+0x6de>
 800d968:	9a01      	ldr	r2, [sp, #4]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d1f7      	bne.n	800d95e <_dtoa_r+0x6c6>
 800d96e:	9901      	ldr	r1, [sp, #4]
 800d970:	2230      	movs	r2, #48	; 0x30
 800d972:	3701      	adds	r7, #1
 800d974:	700a      	strb	r2, [r1, #0]
 800d976:	781a      	ldrb	r2, [r3, #0]
 800d978:	3201      	adds	r2, #1
 800d97a:	701a      	strb	r2, [r3, #0]
 800d97c:	e790      	b.n	800d8a0 <_dtoa_r+0x608>
 800d97e:	4ba6      	ldr	r3, [pc, #664]	; (800dc18 <_dtoa_r+0x980>)
 800d980:	2200      	movs	r2, #0
 800d982:	f7f2 fe49 	bl	8000618 <__aeabi_dmul>
 800d986:	2200      	movs	r2, #0
 800d988:	2300      	movs	r3, #0
 800d98a:	4606      	mov	r6, r0
 800d98c:	460f      	mov	r7, r1
 800d98e:	f7f3 f8ab 	bl	8000ae8 <__aeabi_dcmpeq>
 800d992:	2800      	cmp	r0, #0
 800d994:	d09d      	beq.n	800d8d2 <_dtoa_r+0x63a>
 800d996:	e7cf      	b.n	800d938 <_dtoa_r+0x6a0>
 800d998:	9a08      	ldr	r2, [sp, #32]
 800d99a:	2a00      	cmp	r2, #0
 800d99c:	f000 80d7 	beq.w	800db4e <_dtoa_r+0x8b6>
 800d9a0:	9a06      	ldr	r2, [sp, #24]
 800d9a2:	2a01      	cmp	r2, #1
 800d9a4:	f300 80ba 	bgt.w	800db1c <_dtoa_r+0x884>
 800d9a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d9aa:	2a00      	cmp	r2, #0
 800d9ac:	f000 80b2 	beq.w	800db14 <_dtoa_r+0x87c>
 800d9b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d9b4:	9e07      	ldr	r6, [sp, #28]
 800d9b6:	9d04      	ldr	r5, [sp, #16]
 800d9b8:	9a04      	ldr	r2, [sp, #16]
 800d9ba:	441a      	add	r2, r3
 800d9bc:	9204      	str	r2, [sp, #16]
 800d9be:	9a05      	ldr	r2, [sp, #20]
 800d9c0:	2101      	movs	r1, #1
 800d9c2:	441a      	add	r2, r3
 800d9c4:	4620      	mov	r0, r4
 800d9c6:	9205      	str	r2, [sp, #20]
 800d9c8:	f001 f804 	bl	800e9d4 <__i2b>
 800d9cc:	4607      	mov	r7, r0
 800d9ce:	2d00      	cmp	r5, #0
 800d9d0:	dd0c      	ble.n	800d9ec <_dtoa_r+0x754>
 800d9d2:	9b05      	ldr	r3, [sp, #20]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	dd09      	ble.n	800d9ec <_dtoa_r+0x754>
 800d9d8:	42ab      	cmp	r3, r5
 800d9da:	9a04      	ldr	r2, [sp, #16]
 800d9dc:	bfa8      	it	ge
 800d9de:	462b      	movge	r3, r5
 800d9e0:	1ad2      	subs	r2, r2, r3
 800d9e2:	9204      	str	r2, [sp, #16]
 800d9e4:	9a05      	ldr	r2, [sp, #20]
 800d9e6:	1aed      	subs	r5, r5, r3
 800d9e8:	1ad3      	subs	r3, r2, r3
 800d9ea:	9305      	str	r3, [sp, #20]
 800d9ec:	9b07      	ldr	r3, [sp, #28]
 800d9ee:	b31b      	cbz	r3, 800da38 <_dtoa_r+0x7a0>
 800d9f0:	9b08      	ldr	r3, [sp, #32]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	f000 80af 	beq.w	800db56 <_dtoa_r+0x8be>
 800d9f8:	2e00      	cmp	r6, #0
 800d9fa:	dd13      	ble.n	800da24 <_dtoa_r+0x78c>
 800d9fc:	4639      	mov	r1, r7
 800d9fe:	4632      	mov	r2, r6
 800da00:	4620      	mov	r0, r4
 800da02:	f001 f8a7 	bl	800eb54 <__pow5mult>
 800da06:	ee18 2a10 	vmov	r2, s16
 800da0a:	4601      	mov	r1, r0
 800da0c:	4607      	mov	r7, r0
 800da0e:	4620      	mov	r0, r4
 800da10:	f000 fff6 	bl	800ea00 <__multiply>
 800da14:	ee18 1a10 	vmov	r1, s16
 800da18:	4680      	mov	r8, r0
 800da1a:	4620      	mov	r0, r4
 800da1c:	f000 fed8 	bl	800e7d0 <_Bfree>
 800da20:	ee08 8a10 	vmov	s16, r8
 800da24:	9b07      	ldr	r3, [sp, #28]
 800da26:	1b9a      	subs	r2, r3, r6
 800da28:	d006      	beq.n	800da38 <_dtoa_r+0x7a0>
 800da2a:	ee18 1a10 	vmov	r1, s16
 800da2e:	4620      	mov	r0, r4
 800da30:	f001 f890 	bl	800eb54 <__pow5mult>
 800da34:	ee08 0a10 	vmov	s16, r0
 800da38:	2101      	movs	r1, #1
 800da3a:	4620      	mov	r0, r4
 800da3c:	f000 ffca 	bl	800e9d4 <__i2b>
 800da40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da42:	2b00      	cmp	r3, #0
 800da44:	4606      	mov	r6, r0
 800da46:	f340 8088 	ble.w	800db5a <_dtoa_r+0x8c2>
 800da4a:	461a      	mov	r2, r3
 800da4c:	4601      	mov	r1, r0
 800da4e:	4620      	mov	r0, r4
 800da50:	f001 f880 	bl	800eb54 <__pow5mult>
 800da54:	9b06      	ldr	r3, [sp, #24]
 800da56:	2b01      	cmp	r3, #1
 800da58:	4606      	mov	r6, r0
 800da5a:	f340 8081 	ble.w	800db60 <_dtoa_r+0x8c8>
 800da5e:	f04f 0800 	mov.w	r8, #0
 800da62:	6933      	ldr	r3, [r6, #16]
 800da64:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800da68:	6918      	ldr	r0, [r3, #16]
 800da6a:	f000 ff63 	bl	800e934 <__hi0bits>
 800da6e:	f1c0 0020 	rsb	r0, r0, #32
 800da72:	9b05      	ldr	r3, [sp, #20]
 800da74:	4418      	add	r0, r3
 800da76:	f010 001f 	ands.w	r0, r0, #31
 800da7a:	f000 8092 	beq.w	800dba2 <_dtoa_r+0x90a>
 800da7e:	f1c0 0320 	rsb	r3, r0, #32
 800da82:	2b04      	cmp	r3, #4
 800da84:	f340 808a 	ble.w	800db9c <_dtoa_r+0x904>
 800da88:	f1c0 001c 	rsb	r0, r0, #28
 800da8c:	9b04      	ldr	r3, [sp, #16]
 800da8e:	4403      	add	r3, r0
 800da90:	9304      	str	r3, [sp, #16]
 800da92:	9b05      	ldr	r3, [sp, #20]
 800da94:	4403      	add	r3, r0
 800da96:	4405      	add	r5, r0
 800da98:	9305      	str	r3, [sp, #20]
 800da9a:	9b04      	ldr	r3, [sp, #16]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	dd07      	ble.n	800dab0 <_dtoa_r+0x818>
 800daa0:	ee18 1a10 	vmov	r1, s16
 800daa4:	461a      	mov	r2, r3
 800daa6:	4620      	mov	r0, r4
 800daa8:	f001 f8ae 	bl	800ec08 <__lshift>
 800daac:	ee08 0a10 	vmov	s16, r0
 800dab0:	9b05      	ldr	r3, [sp, #20]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	dd05      	ble.n	800dac2 <_dtoa_r+0x82a>
 800dab6:	4631      	mov	r1, r6
 800dab8:	461a      	mov	r2, r3
 800daba:	4620      	mov	r0, r4
 800dabc:	f001 f8a4 	bl	800ec08 <__lshift>
 800dac0:	4606      	mov	r6, r0
 800dac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d06e      	beq.n	800dba6 <_dtoa_r+0x90e>
 800dac8:	ee18 0a10 	vmov	r0, s16
 800dacc:	4631      	mov	r1, r6
 800dace:	f001 f90b 	bl	800ece8 <__mcmp>
 800dad2:	2800      	cmp	r0, #0
 800dad4:	da67      	bge.n	800dba6 <_dtoa_r+0x90e>
 800dad6:	9b00      	ldr	r3, [sp, #0]
 800dad8:	3b01      	subs	r3, #1
 800dada:	ee18 1a10 	vmov	r1, s16
 800dade:	9300      	str	r3, [sp, #0]
 800dae0:	220a      	movs	r2, #10
 800dae2:	2300      	movs	r3, #0
 800dae4:	4620      	mov	r0, r4
 800dae6:	f000 fe95 	bl	800e814 <__multadd>
 800daea:	9b08      	ldr	r3, [sp, #32]
 800daec:	ee08 0a10 	vmov	s16, r0
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	f000 81b1 	beq.w	800de58 <_dtoa_r+0xbc0>
 800daf6:	2300      	movs	r3, #0
 800daf8:	4639      	mov	r1, r7
 800dafa:	220a      	movs	r2, #10
 800dafc:	4620      	mov	r0, r4
 800dafe:	f000 fe89 	bl	800e814 <__multadd>
 800db02:	9b02      	ldr	r3, [sp, #8]
 800db04:	2b00      	cmp	r3, #0
 800db06:	4607      	mov	r7, r0
 800db08:	f300 808e 	bgt.w	800dc28 <_dtoa_r+0x990>
 800db0c:	9b06      	ldr	r3, [sp, #24]
 800db0e:	2b02      	cmp	r3, #2
 800db10:	dc51      	bgt.n	800dbb6 <_dtoa_r+0x91e>
 800db12:	e089      	b.n	800dc28 <_dtoa_r+0x990>
 800db14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800db16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800db1a:	e74b      	b.n	800d9b4 <_dtoa_r+0x71c>
 800db1c:	9b03      	ldr	r3, [sp, #12]
 800db1e:	1e5e      	subs	r6, r3, #1
 800db20:	9b07      	ldr	r3, [sp, #28]
 800db22:	42b3      	cmp	r3, r6
 800db24:	bfbf      	itttt	lt
 800db26:	9b07      	ldrlt	r3, [sp, #28]
 800db28:	9607      	strlt	r6, [sp, #28]
 800db2a:	1af2      	sublt	r2, r6, r3
 800db2c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800db2e:	bfb6      	itet	lt
 800db30:	189b      	addlt	r3, r3, r2
 800db32:	1b9e      	subge	r6, r3, r6
 800db34:	930a      	strlt	r3, [sp, #40]	; 0x28
 800db36:	9b03      	ldr	r3, [sp, #12]
 800db38:	bfb8      	it	lt
 800db3a:	2600      	movlt	r6, #0
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	bfb7      	itett	lt
 800db40:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800db44:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800db48:	1a9d      	sublt	r5, r3, r2
 800db4a:	2300      	movlt	r3, #0
 800db4c:	e734      	b.n	800d9b8 <_dtoa_r+0x720>
 800db4e:	9e07      	ldr	r6, [sp, #28]
 800db50:	9d04      	ldr	r5, [sp, #16]
 800db52:	9f08      	ldr	r7, [sp, #32]
 800db54:	e73b      	b.n	800d9ce <_dtoa_r+0x736>
 800db56:	9a07      	ldr	r2, [sp, #28]
 800db58:	e767      	b.n	800da2a <_dtoa_r+0x792>
 800db5a:	9b06      	ldr	r3, [sp, #24]
 800db5c:	2b01      	cmp	r3, #1
 800db5e:	dc18      	bgt.n	800db92 <_dtoa_r+0x8fa>
 800db60:	f1ba 0f00 	cmp.w	sl, #0
 800db64:	d115      	bne.n	800db92 <_dtoa_r+0x8fa>
 800db66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db6a:	b993      	cbnz	r3, 800db92 <_dtoa_r+0x8fa>
 800db6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800db70:	0d1b      	lsrs	r3, r3, #20
 800db72:	051b      	lsls	r3, r3, #20
 800db74:	b183      	cbz	r3, 800db98 <_dtoa_r+0x900>
 800db76:	9b04      	ldr	r3, [sp, #16]
 800db78:	3301      	adds	r3, #1
 800db7a:	9304      	str	r3, [sp, #16]
 800db7c:	9b05      	ldr	r3, [sp, #20]
 800db7e:	3301      	adds	r3, #1
 800db80:	9305      	str	r3, [sp, #20]
 800db82:	f04f 0801 	mov.w	r8, #1
 800db86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db88:	2b00      	cmp	r3, #0
 800db8a:	f47f af6a 	bne.w	800da62 <_dtoa_r+0x7ca>
 800db8e:	2001      	movs	r0, #1
 800db90:	e76f      	b.n	800da72 <_dtoa_r+0x7da>
 800db92:	f04f 0800 	mov.w	r8, #0
 800db96:	e7f6      	b.n	800db86 <_dtoa_r+0x8ee>
 800db98:	4698      	mov	r8, r3
 800db9a:	e7f4      	b.n	800db86 <_dtoa_r+0x8ee>
 800db9c:	f43f af7d 	beq.w	800da9a <_dtoa_r+0x802>
 800dba0:	4618      	mov	r0, r3
 800dba2:	301c      	adds	r0, #28
 800dba4:	e772      	b.n	800da8c <_dtoa_r+0x7f4>
 800dba6:	9b03      	ldr	r3, [sp, #12]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	dc37      	bgt.n	800dc1c <_dtoa_r+0x984>
 800dbac:	9b06      	ldr	r3, [sp, #24]
 800dbae:	2b02      	cmp	r3, #2
 800dbb0:	dd34      	ble.n	800dc1c <_dtoa_r+0x984>
 800dbb2:	9b03      	ldr	r3, [sp, #12]
 800dbb4:	9302      	str	r3, [sp, #8]
 800dbb6:	9b02      	ldr	r3, [sp, #8]
 800dbb8:	b96b      	cbnz	r3, 800dbd6 <_dtoa_r+0x93e>
 800dbba:	4631      	mov	r1, r6
 800dbbc:	2205      	movs	r2, #5
 800dbbe:	4620      	mov	r0, r4
 800dbc0:	f000 fe28 	bl	800e814 <__multadd>
 800dbc4:	4601      	mov	r1, r0
 800dbc6:	4606      	mov	r6, r0
 800dbc8:	ee18 0a10 	vmov	r0, s16
 800dbcc:	f001 f88c 	bl	800ece8 <__mcmp>
 800dbd0:	2800      	cmp	r0, #0
 800dbd2:	f73f adbb 	bgt.w	800d74c <_dtoa_r+0x4b4>
 800dbd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbd8:	9d01      	ldr	r5, [sp, #4]
 800dbda:	43db      	mvns	r3, r3
 800dbdc:	9300      	str	r3, [sp, #0]
 800dbde:	f04f 0800 	mov.w	r8, #0
 800dbe2:	4631      	mov	r1, r6
 800dbe4:	4620      	mov	r0, r4
 800dbe6:	f000 fdf3 	bl	800e7d0 <_Bfree>
 800dbea:	2f00      	cmp	r7, #0
 800dbec:	f43f aea4 	beq.w	800d938 <_dtoa_r+0x6a0>
 800dbf0:	f1b8 0f00 	cmp.w	r8, #0
 800dbf4:	d005      	beq.n	800dc02 <_dtoa_r+0x96a>
 800dbf6:	45b8      	cmp	r8, r7
 800dbf8:	d003      	beq.n	800dc02 <_dtoa_r+0x96a>
 800dbfa:	4641      	mov	r1, r8
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	f000 fde7 	bl	800e7d0 <_Bfree>
 800dc02:	4639      	mov	r1, r7
 800dc04:	4620      	mov	r0, r4
 800dc06:	f000 fde3 	bl	800e7d0 <_Bfree>
 800dc0a:	e695      	b.n	800d938 <_dtoa_r+0x6a0>
 800dc0c:	2600      	movs	r6, #0
 800dc0e:	4637      	mov	r7, r6
 800dc10:	e7e1      	b.n	800dbd6 <_dtoa_r+0x93e>
 800dc12:	9700      	str	r7, [sp, #0]
 800dc14:	4637      	mov	r7, r6
 800dc16:	e599      	b.n	800d74c <_dtoa_r+0x4b4>
 800dc18:	40240000 	.word	0x40240000
 800dc1c:	9b08      	ldr	r3, [sp, #32]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	f000 80ca 	beq.w	800ddb8 <_dtoa_r+0xb20>
 800dc24:	9b03      	ldr	r3, [sp, #12]
 800dc26:	9302      	str	r3, [sp, #8]
 800dc28:	2d00      	cmp	r5, #0
 800dc2a:	dd05      	ble.n	800dc38 <_dtoa_r+0x9a0>
 800dc2c:	4639      	mov	r1, r7
 800dc2e:	462a      	mov	r2, r5
 800dc30:	4620      	mov	r0, r4
 800dc32:	f000 ffe9 	bl	800ec08 <__lshift>
 800dc36:	4607      	mov	r7, r0
 800dc38:	f1b8 0f00 	cmp.w	r8, #0
 800dc3c:	d05b      	beq.n	800dcf6 <_dtoa_r+0xa5e>
 800dc3e:	6879      	ldr	r1, [r7, #4]
 800dc40:	4620      	mov	r0, r4
 800dc42:	f000 fd85 	bl	800e750 <_Balloc>
 800dc46:	4605      	mov	r5, r0
 800dc48:	b928      	cbnz	r0, 800dc56 <_dtoa_r+0x9be>
 800dc4a:	4b87      	ldr	r3, [pc, #540]	; (800de68 <_dtoa_r+0xbd0>)
 800dc4c:	4602      	mov	r2, r0
 800dc4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800dc52:	f7ff bb3b 	b.w	800d2cc <_dtoa_r+0x34>
 800dc56:	693a      	ldr	r2, [r7, #16]
 800dc58:	3202      	adds	r2, #2
 800dc5a:	0092      	lsls	r2, r2, #2
 800dc5c:	f107 010c 	add.w	r1, r7, #12
 800dc60:	300c      	adds	r0, #12
 800dc62:	f7fd fbb2 	bl	800b3ca <memcpy>
 800dc66:	2201      	movs	r2, #1
 800dc68:	4629      	mov	r1, r5
 800dc6a:	4620      	mov	r0, r4
 800dc6c:	f000 ffcc 	bl	800ec08 <__lshift>
 800dc70:	9b01      	ldr	r3, [sp, #4]
 800dc72:	f103 0901 	add.w	r9, r3, #1
 800dc76:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800dc7a:	4413      	add	r3, r2
 800dc7c:	9305      	str	r3, [sp, #20]
 800dc7e:	f00a 0301 	and.w	r3, sl, #1
 800dc82:	46b8      	mov	r8, r7
 800dc84:	9304      	str	r3, [sp, #16]
 800dc86:	4607      	mov	r7, r0
 800dc88:	4631      	mov	r1, r6
 800dc8a:	ee18 0a10 	vmov	r0, s16
 800dc8e:	f7ff fa75 	bl	800d17c <quorem>
 800dc92:	4641      	mov	r1, r8
 800dc94:	9002      	str	r0, [sp, #8]
 800dc96:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dc9a:	ee18 0a10 	vmov	r0, s16
 800dc9e:	f001 f823 	bl	800ece8 <__mcmp>
 800dca2:	463a      	mov	r2, r7
 800dca4:	9003      	str	r0, [sp, #12]
 800dca6:	4631      	mov	r1, r6
 800dca8:	4620      	mov	r0, r4
 800dcaa:	f001 f839 	bl	800ed20 <__mdiff>
 800dcae:	68c2      	ldr	r2, [r0, #12]
 800dcb0:	f109 3bff 	add.w	fp, r9, #4294967295
 800dcb4:	4605      	mov	r5, r0
 800dcb6:	bb02      	cbnz	r2, 800dcfa <_dtoa_r+0xa62>
 800dcb8:	4601      	mov	r1, r0
 800dcba:	ee18 0a10 	vmov	r0, s16
 800dcbe:	f001 f813 	bl	800ece8 <__mcmp>
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	4629      	mov	r1, r5
 800dcc6:	4620      	mov	r0, r4
 800dcc8:	9207      	str	r2, [sp, #28]
 800dcca:	f000 fd81 	bl	800e7d0 <_Bfree>
 800dcce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800dcd2:	ea43 0102 	orr.w	r1, r3, r2
 800dcd6:	9b04      	ldr	r3, [sp, #16]
 800dcd8:	430b      	orrs	r3, r1
 800dcda:	464d      	mov	r5, r9
 800dcdc:	d10f      	bne.n	800dcfe <_dtoa_r+0xa66>
 800dcde:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dce2:	d02a      	beq.n	800dd3a <_dtoa_r+0xaa2>
 800dce4:	9b03      	ldr	r3, [sp, #12]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	dd02      	ble.n	800dcf0 <_dtoa_r+0xa58>
 800dcea:	9b02      	ldr	r3, [sp, #8]
 800dcec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800dcf0:	f88b a000 	strb.w	sl, [fp]
 800dcf4:	e775      	b.n	800dbe2 <_dtoa_r+0x94a>
 800dcf6:	4638      	mov	r0, r7
 800dcf8:	e7ba      	b.n	800dc70 <_dtoa_r+0x9d8>
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	e7e2      	b.n	800dcc4 <_dtoa_r+0xa2c>
 800dcfe:	9b03      	ldr	r3, [sp, #12]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	db04      	blt.n	800dd0e <_dtoa_r+0xa76>
 800dd04:	9906      	ldr	r1, [sp, #24]
 800dd06:	430b      	orrs	r3, r1
 800dd08:	9904      	ldr	r1, [sp, #16]
 800dd0a:	430b      	orrs	r3, r1
 800dd0c:	d122      	bne.n	800dd54 <_dtoa_r+0xabc>
 800dd0e:	2a00      	cmp	r2, #0
 800dd10:	ddee      	ble.n	800dcf0 <_dtoa_r+0xa58>
 800dd12:	ee18 1a10 	vmov	r1, s16
 800dd16:	2201      	movs	r2, #1
 800dd18:	4620      	mov	r0, r4
 800dd1a:	f000 ff75 	bl	800ec08 <__lshift>
 800dd1e:	4631      	mov	r1, r6
 800dd20:	ee08 0a10 	vmov	s16, r0
 800dd24:	f000 ffe0 	bl	800ece8 <__mcmp>
 800dd28:	2800      	cmp	r0, #0
 800dd2a:	dc03      	bgt.n	800dd34 <_dtoa_r+0xa9c>
 800dd2c:	d1e0      	bne.n	800dcf0 <_dtoa_r+0xa58>
 800dd2e:	f01a 0f01 	tst.w	sl, #1
 800dd32:	d0dd      	beq.n	800dcf0 <_dtoa_r+0xa58>
 800dd34:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dd38:	d1d7      	bne.n	800dcea <_dtoa_r+0xa52>
 800dd3a:	2339      	movs	r3, #57	; 0x39
 800dd3c:	f88b 3000 	strb.w	r3, [fp]
 800dd40:	462b      	mov	r3, r5
 800dd42:	461d      	mov	r5, r3
 800dd44:	3b01      	subs	r3, #1
 800dd46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dd4a:	2a39      	cmp	r2, #57	; 0x39
 800dd4c:	d071      	beq.n	800de32 <_dtoa_r+0xb9a>
 800dd4e:	3201      	adds	r2, #1
 800dd50:	701a      	strb	r2, [r3, #0]
 800dd52:	e746      	b.n	800dbe2 <_dtoa_r+0x94a>
 800dd54:	2a00      	cmp	r2, #0
 800dd56:	dd07      	ble.n	800dd68 <_dtoa_r+0xad0>
 800dd58:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dd5c:	d0ed      	beq.n	800dd3a <_dtoa_r+0xaa2>
 800dd5e:	f10a 0301 	add.w	r3, sl, #1
 800dd62:	f88b 3000 	strb.w	r3, [fp]
 800dd66:	e73c      	b.n	800dbe2 <_dtoa_r+0x94a>
 800dd68:	9b05      	ldr	r3, [sp, #20]
 800dd6a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800dd6e:	4599      	cmp	r9, r3
 800dd70:	d047      	beq.n	800de02 <_dtoa_r+0xb6a>
 800dd72:	ee18 1a10 	vmov	r1, s16
 800dd76:	2300      	movs	r3, #0
 800dd78:	220a      	movs	r2, #10
 800dd7a:	4620      	mov	r0, r4
 800dd7c:	f000 fd4a 	bl	800e814 <__multadd>
 800dd80:	45b8      	cmp	r8, r7
 800dd82:	ee08 0a10 	vmov	s16, r0
 800dd86:	f04f 0300 	mov.w	r3, #0
 800dd8a:	f04f 020a 	mov.w	r2, #10
 800dd8e:	4641      	mov	r1, r8
 800dd90:	4620      	mov	r0, r4
 800dd92:	d106      	bne.n	800dda2 <_dtoa_r+0xb0a>
 800dd94:	f000 fd3e 	bl	800e814 <__multadd>
 800dd98:	4680      	mov	r8, r0
 800dd9a:	4607      	mov	r7, r0
 800dd9c:	f109 0901 	add.w	r9, r9, #1
 800dda0:	e772      	b.n	800dc88 <_dtoa_r+0x9f0>
 800dda2:	f000 fd37 	bl	800e814 <__multadd>
 800dda6:	4639      	mov	r1, r7
 800dda8:	4680      	mov	r8, r0
 800ddaa:	2300      	movs	r3, #0
 800ddac:	220a      	movs	r2, #10
 800ddae:	4620      	mov	r0, r4
 800ddb0:	f000 fd30 	bl	800e814 <__multadd>
 800ddb4:	4607      	mov	r7, r0
 800ddb6:	e7f1      	b.n	800dd9c <_dtoa_r+0xb04>
 800ddb8:	9b03      	ldr	r3, [sp, #12]
 800ddba:	9302      	str	r3, [sp, #8]
 800ddbc:	9d01      	ldr	r5, [sp, #4]
 800ddbe:	ee18 0a10 	vmov	r0, s16
 800ddc2:	4631      	mov	r1, r6
 800ddc4:	f7ff f9da 	bl	800d17c <quorem>
 800ddc8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ddcc:	9b01      	ldr	r3, [sp, #4]
 800ddce:	f805 ab01 	strb.w	sl, [r5], #1
 800ddd2:	1aea      	subs	r2, r5, r3
 800ddd4:	9b02      	ldr	r3, [sp, #8]
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	dd09      	ble.n	800ddee <_dtoa_r+0xb56>
 800ddda:	ee18 1a10 	vmov	r1, s16
 800ddde:	2300      	movs	r3, #0
 800dde0:	220a      	movs	r2, #10
 800dde2:	4620      	mov	r0, r4
 800dde4:	f000 fd16 	bl	800e814 <__multadd>
 800dde8:	ee08 0a10 	vmov	s16, r0
 800ddec:	e7e7      	b.n	800ddbe <_dtoa_r+0xb26>
 800ddee:	9b02      	ldr	r3, [sp, #8]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	bfc8      	it	gt
 800ddf4:	461d      	movgt	r5, r3
 800ddf6:	9b01      	ldr	r3, [sp, #4]
 800ddf8:	bfd8      	it	le
 800ddfa:	2501      	movle	r5, #1
 800ddfc:	441d      	add	r5, r3
 800ddfe:	f04f 0800 	mov.w	r8, #0
 800de02:	ee18 1a10 	vmov	r1, s16
 800de06:	2201      	movs	r2, #1
 800de08:	4620      	mov	r0, r4
 800de0a:	f000 fefd 	bl	800ec08 <__lshift>
 800de0e:	4631      	mov	r1, r6
 800de10:	ee08 0a10 	vmov	s16, r0
 800de14:	f000 ff68 	bl	800ece8 <__mcmp>
 800de18:	2800      	cmp	r0, #0
 800de1a:	dc91      	bgt.n	800dd40 <_dtoa_r+0xaa8>
 800de1c:	d102      	bne.n	800de24 <_dtoa_r+0xb8c>
 800de1e:	f01a 0f01 	tst.w	sl, #1
 800de22:	d18d      	bne.n	800dd40 <_dtoa_r+0xaa8>
 800de24:	462b      	mov	r3, r5
 800de26:	461d      	mov	r5, r3
 800de28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de2c:	2a30      	cmp	r2, #48	; 0x30
 800de2e:	d0fa      	beq.n	800de26 <_dtoa_r+0xb8e>
 800de30:	e6d7      	b.n	800dbe2 <_dtoa_r+0x94a>
 800de32:	9a01      	ldr	r2, [sp, #4]
 800de34:	429a      	cmp	r2, r3
 800de36:	d184      	bne.n	800dd42 <_dtoa_r+0xaaa>
 800de38:	9b00      	ldr	r3, [sp, #0]
 800de3a:	3301      	adds	r3, #1
 800de3c:	9300      	str	r3, [sp, #0]
 800de3e:	2331      	movs	r3, #49	; 0x31
 800de40:	7013      	strb	r3, [r2, #0]
 800de42:	e6ce      	b.n	800dbe2 <_dtoa_r+0x94a>
 800de44:	4b09      	ldr	r3, [pc, #36]	; (800de6c <_dtoa_r+0xbd4>)
 800de46:	f7ff ba95 	b.w	800d374 <_dtoa_r+0xdc>
 800de4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	f47f aa6e 	bne.w	800d32e <_dtoa_r+0x96>
 800de52:	4b07      	ldr	r3, [pc, #28]	; (800de70 <_dtoa_r+0xbd8>)
 800de54:	f7ff ba8e 	b.w	800d374 <_dtoa_r+0xdc>
 800de58:	9b02      	ldr	r3, [sp, #8]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	dcae      	bgt.n	800ddbc <_dtoa_r+0xb24>
 800de5e:	9b06      	ldr	r3, [sp, #24]
 800de60:	2b02      	cmp	r3, #2
 800de62:	f73f aea8 	bgt.w	800dbb6 <_dtoa_r+0x91e>
 800de66:	e7a9      	b.n	800ddbc <_dtoa_r+0xb24>
 800de68:	08011970 	.word	0x08011970
 800de6c:	08011774 	.word	0x08011774
 800de70:	080118f1 	.word	0x080118f1

0800de74 <__sflush_r>:
 800de74:	898a      	ldrh	r2, [r1, #12]
 800de76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de7a:	4605      	mov	r5, r0
 800de7c:	0710      	lsls	r0, r2, #28
 800de7e:	460c      	mov	r4, r1
 800de80:	d458      	bmi.n	800df34 <__sflush_r+0xc0>
 800de82:	684b      	ldr	r3, [r1, #4]
 800de84:	2b00      	cmp	r3, #0
 800de86:	dc05      	bgt.n	800de94 <__sflush_r+0x20>
 800de88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	dc02      	bgt.n	800de94 <__sflush_r+0x20>
 800de8e:	2000      	movs	r0, #0
 800de90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de96:	2e00      	cmp	r6, #0
 800de98:	d0f9      	beq.n	800de8e <__sflush_r+0x1a>
 800de9a:	2300      	movs	r3, #0
 800de9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dea0:	682f      	ldr	r7, [r5, #0]
 800dea2:	602b      	str	r3, [r5, #0]
 800dea4:	d032      	beq.n	800df0c <__sflush_r+0x98>
 800dea6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dea8:	89a3      	ldrh	r3, [r4, #12]
 800deaa:	075a      	lsls	r2, r3, #29
 800deac:	d505      	bpl.n	800deba <__sflush_r+0x46>
 800deae:	6863      	ldr	r3, [r4, #4]
 800deb0:	1ac0      	subs	r0, r0, r3
 800deb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800deb4:	b10b      	cbz	r3, 800deba <__sflush_r+0x46>
 800deb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800deb8:	1ac0      	subs	r0, r0, r3
 800deba:	2300      	movs	r3, #0
 800debc:	4602      	mov	r2, r0
 800debe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dec0:	6a21      	ldr	r1, [r4, #32]
 800dec2:	4628      	mov	r0, r5
 800dec4:	47b0      	blx	r6
 800dec6:	1c43      	adds	r3, r0, #1
 800dec8:	89a3      	ldrh	r3, [r4, #12]
 800deca:	d106      	bne.n	800deda <__sflush_r+0x66>
 800decc:	6829      	ldr	r1, [r5, #0]
 800dece:	291d      	cmp	r1, #29
 800ded0:	d82c      	bhi.n	800df2c <__sflush_r+0xb8>
 800ded2:	4a2a      	ldr	r2, [pc, #168]	; (800df7c <__sflush_r+0x108>)
 800ded4:	40ca      	lsrs	r2, r1
 800ded6:	07d6      	lsls	r6, r2, #31
 800ded8:	d528      	bpl.n	800df2c <__sflush_r+0xb8>
 800deda:	2200      	movs	r2, #0
 800dedc:	6062      	str	r2, [r4, #4]
 800dede:	04d9      	lsls	r1, r3, #19
 800dee0:	6922      	ldr	r2, [r4, #16]
 800dee2:	6022      	str	r2, [r4, #0]
 800dee4:	d504      	bpl.n	800def0 <__sflush_r+0x7c>
 800dee6:	1c42      	adds	r2, r0, #1
 800dee8:	d101      	bne.n	800deee <__sflush_r+0x7a>
 800deea:	682b      	ldr	r3, [r5, #0]
 800deec:	b903      	cbnz	r3, 800def0 <__sflush_r+0x7c>
 800deee:	6560      	str	r0, [r4, #84]	; 0x54
 800def0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800def2:	602f      	str	r7, [r5, #0]
 800def4:	2900      	cmp	r1, #0
 800def6:	d0ca      	beq.n	800de8e <__sflush_r+0x1a>
 800def8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800defc:	4299      	cmp	r1, r3
 800defe:	d002      	beq.n	800df06 <__sflush_r+0x92>
 800df00:	4628      	mov	r0, r5
 800df02:	f001 f8fd 	bl	800f100 <_free_r>
 800df06:	2000      	movs	r0, #0
 800df08:	6360      	str	r0, [r4, #52]	; 0x34
 800df0a:	e7c1      	b.n	800de90 <__sflush_r+0x1c>
 800df0c:	6a21      	ldr	r1, [r4, #32]
 800df0e:	2301      	movs	r3, #1
 800df10:	4628      	mov	r0, r5
 800df12:	47b0      	blx	r6
 800df14:	1c41      	adds	r1, r0, #1
 800df16:	d1c7      	bne.n	800dea8 <__sflush_r+0x34>
 800df18:	682b      	ldr	r3, [r5, #0]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d0c4      	beq.n	800dea8 <__sflush_r+0x34>
 800df1e:	2b1d      	cmp	r3, #29
 800df20:	d001      	beq.n	800df26 <__sflush_r+0xb2>
 800df22:	2b16      	cmp	r3, #22
 800df24:	d101      	bne.n	800df2a <__sflush_r+0xb6>
 800df26:	602f      	str	r7, [r5, #0]
 800df28:	e7b1      	b.n	800de8e <__sflush_r+0x1a>
 800df2a:	89a3      	ldrh	r3, [r4, #12]
 800df2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df30:	81a3      	strh	r3, [r4, #12]
 800df32:	e7ad      	b.n	800de90 <__sflush_r+0x1c>
 800df34:	690f      	ldr	r7, [r1, #16]
 800df36:	2f00      	cmp	r7, #0
 800df38:	d0a9      	beq.n	800de8e <__sflush_r+0x1a>
 800df3a:	0793      	lsls	r3, r2, #30
 800df3c:	680e      	ldr	r6, [r1, #0]
 800df3e:	bf08      	it	eq
 800df40:	694b      	ldreq	r3, [r1, #20]
 800df42:	600f      	str	r7, [r1, #0]
 800df44:	bf18      	it	ne
 800df46:	2300      	movne	r3, #0
 800df48:	eba6 0807 	sub.w	r8, r6, r7
 800df4c:	608b      	str	r3, [r1, #8]
 800df4e:	f1b8 0f00 	cmp.w	r8, #0
 800df52:	dd9c      	ble.n	800de8e <__sflush_r+0x1a>
 800df54:	6a21      	ldr	r1, [r4, #32]
 800df56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800df58:	4643      	mov	r3, r8
 800df5a:	463a      	mov	r2, r7
 800df5c:	4628      	mov	r0, r5
 800df5e:	47b0      	blx	r6
 800df60:	2800      	cmp	r0, #0
 800df62:	dc06      	bgt.n	800df72 <__sflush_r+0xfe>
 800df64:	89a3      	ldrh	r3, [r4, #12]
 800df66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df6a:	81a3      	strh	r3, [r4, #12]
 800df6c:	f04f 30ff 	mov.w	r0, #4294967295
 800df70:	e78e      	b.n	800de90 <__sflush_r+0x1c>
 800df72:	4407      	add	r7, r0
 800df74:	eba8 0800 	sub.w	r8, r8, r0
 800df78:	e7e9      	b.n	800df4e <__sflush_r+0xda>
 800df7a:	bf00      	nop
 800df7c:	20400001 	.word	0x20400001

0800df80 <_fflush_r>:
 800df80:	b538      	push	{r3, r4, r5, lr}
 800df82:	690b      	ldr	r3, [r1, #16]
 800df84:	4605      	mov	r5, r0
 800df86:	460c      	mov	r4, r1
 800df88:	b913      	cbnz	r3, 800df90 <_fflush_r+0x10>
 800df8a:	2500      	movs	r5, #0
 800df8c:	4628      	mov	r0, r5
 800df8e:	bd38      	pop	{r3, r4, r5, pc}
 800df90:	b118      	cbz	r0, 800df9a <_fflush_r+0x1a>
 800df92:	6983      	ldr	r3, [r0, #24]
 800df94:	b90b      	cbnz	r3, 800df9a <_fflush_r+0x1a>
 800df96:	f7fd f953 	bl	800b240 <__sinit>
 800df9a:	4b14      	ldr	r3, [pc, #80]	; (800dfec <_fflush_r+0x6c>)
 800df9c:	429c      	cmp	r4, r3
 800df9e:	d11b      	bne.n	800dfd8 <_fflush_r+0x58>
 800dfa0:	686c      	ldr	r4, [r5, #4]
 800dfa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d0ef      	beq.n	800df8a <_fflush_r+0xa>
 800dfaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dfac:	07d0      	lsls	r0, r2, #31
 800dfae:	d404      	bmi.n	800dfba <_fflush_r+0x3a>
 800dfb0:	0599      	lsls	r1, r3, #22
 800dfb2:	d402      	bmi.n	800dfba <_fflush_r+0x3a>
 800dfb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfb6:	f7fd fa06 	bl	800b3c6 <__retarget_lock_acquire_recursive>
 800dfba:	4628      	mov	r0, r5
 800dfbc:	4621      	mov	r1, r4
 800dfbe:	f7ff ff59 	bl	800de74 <__sflush_r>
 800dfc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dfc4:	07da      	lsls	r2, r3, #31
 800dfc6:	4605      	mov	r5, r0
 800dfc8:	d4e0      	bmi.n	800df8c <_fflush_r+0xc>
 800dfca:	89a3      	ldrh	r3, [r4, #12]
 800dfcc:	059b      	lsls	r3, r3, #22
 800dfce:	d4dd      	bmi.n	800df8c <_fflush_r+0xc>
 800dfd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfd2:	f7fd f9f9 	bl	800b3c8 <__retarget_lock_release_recursive>
 800dfd6:	e7d9      	b.n	800df8c <_fflush_r+0xc>
 800dfd8:	4b05      	ldr	r3, [pc, #20]	; (800dff0 <_fflush_r+0x70>)
 800dfda:	429c      	cmp	r4, r3
 800dfdc:	d101      	bne.n	800dfe2 <_fflush_r+0x62>
 800dfde:	68ac      	ldr	r4, [r5, #8]
 800dfe0:	e7df      	b.n	800dfa2 <_fflush_r+0x22>
 800dfe2:	4b04      	ldr	r3, [pc, #16]	; (800dff4 <_fflush_r+0x74>)
 800dfe4:	429c      	cmp	r4, r3
 800dfe6:	bf08      	it	eq
 800dfe8:	68ec      	ldreq	r4, [r5, #12]
 800dfea:	e7da      	b.n	800dfa2 <_fflush_r+0x22>
 800dfec:	08011720 	.word	0x08011720
 800dff0:	08011740 	.word	0x08011740
 800dff4:	08011700 	.word	0x08011700

0800dff8 <rshift>:
 800dff8:	6903      	ldr	r3, [r0, #16]
 800dffa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dffe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e002:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e006:	f100 0414 	add.w	r4, r0, #20
 800e00a:	dd45      	ble.n	800e098 <rshift+0xa0>
 800e00c:	f011 011f 	ands.w	r1, r1, #31
 800e010:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e014:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e018:	d10c      	bne.n	800e034 <rshift+0x3c>
 800e01a:	f100 0710 	add.w	r7, r0, #16
 800e01e:	4629      	mov	r1, r5
 800e020:	42b1      	cmp	r1, r6
 800e022:	d334      	bcc.n	800e08e <rshift+0x96>
 800e024:	1a9b      	subs	r3, r3, r2
 800e026:	009b      	lsls	r3, r3, #2
 800e028:	1eea      	subs	r2, r5, #3
 800e02a:	4296      	cmp	r6, r2
 800e02c:	bf38      	it	cc
 800e02e:	2300      	movcc	r3, #0
 800e030:	4423      	add	r3, r4
 800e032:	e015      	b.n	800e060 <rshift+0x68>
 800e034:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e038:	f1c1 0820 	rsb	r8, r1, #32
 800e03c:	40cf      	lsrs	r7, r1
 800e03e:	f105 0e04 	add.w	lr, r5, #4
 800e042:	46a1      	mov	r9, r4
 800e044:	4576      	cmp	r6, lr
 800e046:	46f4      	mov	ip, lr
 800e048:	d815      	bhi.n	800e076 <rshift+0x7e>
 800e04a:	1a9a      	subs	r2, r3, r2
 800e04c:	0092      	lsls	r2, r2, #2
 800e04e:	3a04      	subs	r2, #4
 800e050:	3501      	adds	r5, #1
 800e052:	42ae      	cmp	r6, r5
 800e054:	bf38      	it	cc
 800e056:	2200      	movcc	r2, #0
 800e058:	18a3      	adds	r3, r4, r2
 800e05a:	50a7      	str	r7, [r4, r2]
 800e05c:	b107      	cbz	r7, 800e060 <rshift+0x68>
 800e05e:	3304      	adds	r3, #4
 800e060:	1b1a      	subs	r2, r3, r4
 800e062:	42a3      	cmp	r3, r4
 800e064:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e068:	bf08      	it	eq
 800e06a:	2300      	moveq	r3, #0
 800e06c:	6102      	str	r2, [r0, #16]
 800e06e:	bf08      	it	eq
 800e070:	6143      	streq	r3, [r0, #20]
 800e072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e076:	f8dc c000 	ldr.w	ip, [ip]
 800e07a:	fa0c fc08 	lsl.w	ip, ip, r8
 800e07e:	ea4c 0707 	orr.w	r7, ip, r7
 800e082:	f849 7b04 	str.w	r7, [r9], #4
 800e086:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e08a:	40cf      	lsrs	r7, r1
 800e08c:	e7da      	b.n	800e044 <rshift+0x4c>
 800e08e:	f851 cb04 	ldr.w	ip, [r1], #4
 800e092:	f847 cf04 	str.w	ip, [r7, #4]!
 800e096:	e7c3      	b.n	800e020 <rshift+0x28>
 800e098:	4623      	mov	r3, r4
 800e09a:	e7e1      	b.n	800e060 <rshift+0x68>

0800e09c <__hexdig_fun>:
 800e09c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e0a0:	2b09      	cmp	r3, #9
 800e0a2:	d802      	bhi.n	800e0aa <__hexdig_fun+0xe>
 800e0a4:	3820      	subs	r0, #32
 800e0a6:	b2c0      	uxtb	r0, r0
 800e0a8:	4770      	bx	lr
 800e0aa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e0ae:	2b05      	cmp	r3, #5
 800e0b0:	d801      	bhi.n	800e0b6 <__hexdig_fun+0x1a>
 800e0b2:	3847      	subs	r0, #71	; 0x47
 800e0b4:	e7f7      	b.n	800e0a6 <__hexdig_fun+0xa>
 800e0b6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e0ba:	2b05      	cmp	r3, #5
 800e0bc:	d801      	bhi.n	800e0c2 <__hexdig_fun+0x26>
 800e0be:	3827      	subs	r0, #39	; 0x27
 800e0c0:	e7f1      	b.n	800e0a6 <__hexdig_fun+0xa>
 800e0c2:	2000      	movs	r0, #0
 800e0c4:	4770      	bx	lr
	...

0800e0c8 <__gethex>:
 800e0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0cc:	ed2d 8b02 	vpush	{d8}
 800e0d0:	b089      	sub	sp, #36	; 0x24
 800e0d2:	ee08 0a10 	vmov	s16, r0
 800e0d6:	9304      	str	r3, [sp, #16]
 800e0d8:	4bb4      	ldr	r3, [pc, #720]	; (800e3ac <__gethex+0x2e4>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	9301      	str	r3, [sp, #4]
 800e0de:	4618      	mov	r0, r3
 800e0e0:	468b      	mov	fp, r1
 800e0e2:	4690      	mov	r8, r2
 800e0e4:	f7f2 f884 	bl	80001f0 <strlen>
 800e0e8:	9b01      	ldr	r3, [sp, #4]
 800e0ea:	f8db 2000 	ldr.w	r2, [fp]
 800e0ee:	4403      	add	r3, r0
 800e0f0:	4682      	mov	sl, r0
 800e0f2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e0f6:	9305      	str	r3, [sp, #20]
 800e0f8:	1c93      	adds	r3, r2, #2
 800e0fa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e0fe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e102:	32fe      	adds	r2, #254	; 0xfe
 800e104:	18d1      	adds	r1, r2, r3
 800e106:	461f      	mov	r7, r3
 800e108:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e10c:	9100      	str	r1, [sp, #0]
 800e10e:	2830      	cmp	r0, #48	; 0x30
 800e110:	d0f8      	beq.n	800e104 <__gethex+0x3c>
 800e112:	f7ff ffc3 	bl	800e09c <__hexdig_fun>
 800e116:	4604      	mov	r4, r0
 800e118:	2800      	cmp	r0, #0
 800e11a:	d13a      	bne.n	800e192 <__gethex+0xca>
 800e11c:	9901      	ldr	r1, [sp, #4]
 800e11e:	4652      	mov	r2, sl
 800e120:	4638      	mov	r0, r7
 800e122:	f001 f9b1 	bl	800f488 <strncmp>
 800e126:	4605      	mov	r5, r0
 800e128:	2800      	cmp	r0, #0
 800e12a:	d168      	bne.n	800e1fe <__gethex+0x136>
 800e12c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e130:	eb07 060a 	add.w	r6, r7, sl
 800e134:	f7ff ffb2 	bl	800e09c <__hexdig_fun>
 800e138:	2800      	cmp	r0, #0
 800e13a:	d062      	beq.n	800e202 <__gethex+0x13a>
 800e13c:	4633      	mov	r3, r6
 800e13e:	7818      	ldrb	r0, [r3, #0]
 800e140:	2830      	cmp	r0, #48	; 0x30
 800e142:	461f      	mov	r7, r3
 800e144:	f103 0301 	add.w	r3, r3, #1
 800e148:	d0f9      	beq.n	800e13e <__gethex+0x76>
 800e14a:	f7ff ffa7 	bl	800e09c <__hexdig_fun>
 800e14e:	2301      	movs	r3, #1
 800e150:	fab0 f480 	clz	r4, r0
 800e154:	0964      	lsrs	r4, r4, #5
 800e156:	4635      	mov	r5, r6
 800e158:	9300      	str	r3, [sp, #0]
 800e15a:	463a      	mov	r2, r7
 800e15c:	4616      	mov	r6, r2
 800e15e:	3201      	adds	r2, #1
 800e160:	7830      	ldrb	r0, [r6, #0]
 800e162:	f7ff ff9b 	bl	800e09c <__hexdig_fun>
 800e166:	2800      	cmp	r0, #0
 800e168:	d1f8      	bne.n	800e15c <__gethex+0x94>
 800e16a:	9901      	ldr	r1, [sp, #4]
 800e16c:	4652      	mov	r2, sl
 800e16e:	4630      	mov	r0, r6
 800e170:	f001 f98a 	bl	800f488 <strncmp>
 800e174:	b980      	cbnz	r0, 800e198 <__gethex+0xd0>
 800e176:	b94d      	cbnz	r5, 800e18c <__gethex+0xc4>
 800e178:	eb06 050a 	add.w	r5, r6, sl
 800e17c:	462a      	mov	r2, r5
 800e17e:	4616      	mov	r6, r2
 800e180:	3201      	adds	r2, #1
 800e182:	7830      	ldrb	r0, [r6, #0]
 800e184:	f7ff ff8a 	bl	800e09c <__hexdig_fun>
 800e188:	2800      	cmp	r0, #0
 800e18a:	d1f8      	bne.n	800e17e <__gethex+0xb6>
 800e18c:	1bad      	subs	r5, r5, r6
 800e18e:	00ad      	lsls	r5, r5, #2
 800e190:	e004      	b.n	800e19c <__gethex+0xd4>
 800e192:	2400      	movs	r4, #0
 800e194:	4625      	mov	r5, r4
 800e196:	e7e0      	b.n	800e15a <__gethex+0x92>
 800e198:	2d00      	cmp	r5, #0
 800e19a:	d1f7      	bne.n	800e18c <__gethex+0xc4>
 800e19c:	7833      	ldrb	r3, [r6, #0]
 800e19e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e1a2:	2b50      	cmp	r3, #80	; 0x50
 800e1a4:	d13b      	bne.n	800e21e <__gethex+0x156>
 800e1a6:	7873      	ldrb	r3, [r6, #1]
 800e1a8:	2b2b      	cmp	r3, #43	; 0x2b
 800e1aa:	d02c      	beq.n	800e206 <__gethex+0x13e>
 800e1ac:	2b2d      	cmp	r3, #45	; 0x2d
 800e1ae:	d02e      	beq.n	800e20e <__gethex+0x146>
 800e1b0:	1c71      	adds	r1, r6, #1
 800e1b2:	f04f 0900 	mov.w	r9, #0
 800e1b6:	7808      	ldrb	r0, [r1, #0]
 800e1b8:	f7ff ff70 	bl	800e09c <__hexdig_fun>
 800e1bc:	1e43      	subs	r3, r0, #1
 800e1be:	b2db      	uxtb	r3, r3
 800e1c0:	2b18      	cmp	r3, #24
 800e1c2:	d82c      	bhi.n	800e21e <__gethex+0x156>
 800e1c4:	f1a0 0210 	sub.w	r2, r0, #16
 800e1c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e1cc:	f7ff ff66 	bl	800e09c <__hexdig_fun>
 800e1d0:	1e43      	subs	r3, r0, #1
 800e1d2:	b2db      	uxtb	r3, r3
 800e1d4:	2b18      	cmp	r3, #24
 800e1d6:	d91d      	bls.n	800e214 <__gethex+0x14c>
 800e1d8:	f1b9 0f00 	cmp.w	r9, #0
 800e1dc:	d000      	beq.n	800e1e0 <__gethex+0x118>
 800e1de:	4252      	negs	r2, r2
 800e1e0:	4415      	add	r5, r2
 800e1e2:	f8cb 1000 	str.w	r1, [fp]
 800e1e6:	b1e4      	cbz	r4, 800e222 <__gethex+0x15a>
 800e1e8:	9b00      	ldr	r3, [sp, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	bf14      	ite	ne
 800e1ee:	2700      	movne	r7, #0
 800e1f0:	2706      	moveq	r7, #6
 800e1f2:	4638      	mov	r0, r7
 800e1f4:	b009      	add	sp, #36	; 0x24
 800e1f6:	ecbd 8b02 	vpop	{d8}
 800e1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1fe:	463e      	mov	r6, r7
 800e200:	4625      	mov	r5, r4
 800e202:	2401      	movs	r4, #1
 800e204:	e7ca      	b.n	800e19c <__gethex+0xd4>
 800e206:	f04f 0900 	mov.w	r9, #0
 800e20a:	1cb1      	adds	r1, r6, #2
 800e20c:	e7d3      	b.n	800e1b6 <__gethex+0xee>
 800e20e:	f04f 0901 	mov.w	r9, #1
 800e212:	e7fa      	b.n	800e20a <__gethex+0x142>
 800e214:	230a      	movs	r3, #10
 800e216:	fb03 0202 	mla	r2, r3, r2, r0
 800e21a:	3a10      	subs	r2, #16
 800e21c:	e7d4      	b.n	800e1c8 <__gethex+0x100>
 800e21e:	4631      	mov	r1, r6
 800e220:	e7df      	b.n	800e1e2 <__gethex+0x11a>
 800e222:	1bf3      	subs	r3, r6, r7
 800e224:	3b01      	subs	r3, #1
 800e226:	4621      	mov	r1, r4
 800e228:	2b07      	cmp	r3, #7
 800e22a:	dc0b      	bgt.n	800e244 <__gethex+0x17c>
 800e22c:	ee18 0a10 	vmov	r0, s16
 800e230:	f000 fa8e 	bl	800e750 <_Balloc>
 800e234:	4604      	mov	r4, r0
 800e236:	b940      	cbnz	r0, 800e24a <__gethex+0x182>
 800e238:	4b5d      	ldr	r3, [pc, #372]	; (800e3b0 <__gethex+0x2e8>)
 800e23a:	4602      	mov	r2, r0
 800e23c:	21de      	movs	r1, #222	; 0xde
 800e23e:	485d      	ldr	r0, [pc, #372]	; (800e3b4 <__gethex+0x2ec>)
 800e240:	f001 f944 	bl	800f4cc <__assert_func>
 800e244:	3101      	adds	r1, #1
 800e246:	105b      	asrs	r3, r3, #1
 800e248:	e7ee      	b.n	800e228 <__gethex+0x160>
 800e24a:	f100 0914 	add.w	r9, r0, #20
 800e24e:	f04f 0b00 	mov.w	fp, #0
 800e252:	f1ca 0301 	rsb	r3, sl, #1
 800e256:	f8cd 9008 	str.w	r9, [sp, #8]
 800e25a:	f8cd b000 	str.w	fp, [sp]
 800e25e:	9306      	str	r3, [sp, #24]
 800e260:	42b7      	cmp	r7, r6
 800e262:	d340      	bcc.n	800e2e6 <__gethex+0x21e>
 800e264:	9802      	ldr	r0, [sp, #8]
 800e266:	9b00      	ldr	r3, [sp, #0]
 800e268:	f840 3b04 	str.w	r3, [r0], #4
 800e26c:	eba0 0009 	sub.w	r0, r0, r9
 800e270:	1080      	asrs	r0, r0, #2
 800e272:	0146      	lsls	r6, r0, #5
 800e274:	6120      	str	r0, [r4, #16]
 800e276:	4618      	mov	r0, r3
 800e278:	f000 fb5c 	bl	800e934 <__hi0bits>
 800e27c:	1a30      	subs	r0, r6, r0
 800e27e:	f8d8 6000 	ldr.w	r6, [r8]
 800e282:	42b0      	cmp	r0, r6
 800e284:	dd63      	ble.n	800e34e <__gethex+0x286>
 800e286:	1b87      	subs	r7, r0, r6
 800e288:	4639      	mov	r1, r7
 800e28a:	4620      	mov	r0, r4
 800e28c:	f000 ff00 	bl	800f090 <__any_on>
 800e290:	4682      	mov	sl, r0
 800e292:	b1a8      	cbz	r0, 800e2c0 <__gethex+0x1f8>
 800e294:	1e7b      	subs	r3, r7, #1
 800e296:	1159      	asrs	r1, r3, #5
 800e298:	f003 021f 	and.w	r2, r3, #31
 800e29c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e2a0:	f04f 0a01 	mov.w	sl, #1
 800e2a4:	fa0a f202 	lsl.w	r2, sl, r2
 800e2a8:	420a      	tst	r2, r1
 800e2aa:	d009      	beq.n	800e2c0 <__gethex+0x1f8>
 800e2ac:	4553      	cmp	r3, sl
 800e2ae:	dd05      	ble.n	800e2bc <__gethex+0x1f4>
 800e2b0:	1eb9      	subs	r1, r7, #2
 800e2b2:	4620      	mov	r0, r4
 800e2b4:	f000 feec 	bl	800f090 <__any_on>
 800e2b8:	2800      	cmp	r0, #0
 800e2ba:	d145      	bne.n	800e348 <__gethex+0x280>
 800e2bc:	f04f 0a02 	mov.w	sl, #2
 800e2c0:	4639      	mov	r1, r7
 800e2c2:	4620      	mov	r0, r4
 800e2c4:	f7ff fe98 	bl	800dff8 <rshift>
 800e2c8:	443d      	add	r5, r7
 800e2ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e2ce:	42ab      	cmp	r3, r5
 800e2d0:	da4c      	bge.n	800e36c <__gethex+0x2a4>
 800e2d2:	ee18 0a10 	vmov	r0, s16
 800e2d6:	4621      	mov	r1, r4
 800e2d8:	f000 fa7a 	bl	800e7d0 <_Bfree>
 800e2dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e2de:	2300      	movs	r3, #0
 800e2e0:	6013      	str	r3, [r2, #0]
 800e2e2:	27a3      	movs	r7, #163	; 0xa3
 800e2e4:	e785      	b.n	800e1f2 <__gethex+0x12a>
 800e2e6:	1e73      	subs	r3, r6, #1
 800e2e8:	9a05      	ldr	r2, [sp, #20]
 800e2ea:	9303      	str	r3, [sp, #12]
 800e2ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e2f0:	4293      	cmp	r3, r2
 800e2f2:	d019      	beq.n	800e328 <__gethex+0x260>
 800e2f4:	f1bb 0f20 	cmp.w	fp, #32
 800e2f8:	d107      	bne.n	800e30a <__gethex+0x242>
 800e2fa:	9b02      	ldr	r3, [sp, #8]
 800e2fc:	9a00      	ldr	r2, [sp, #0]
 800e2fe:	f843 2b04 	str.w	r2, [r3], #4
 800e302:	9302      	str	r3, [sp, #8]
 800e304:	2300      	movs	r3, #0
 800e306:	9300      	str	r3, [sp, #0]
 800e308:	469b      	mov	fp, r3
 800e30a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e30e:	f7ff fec5 	bl	800e09c <__hexdig_fun>
 800e312:	9b00      	ldr	r3, [sp, #0]
 800e314:	f000 000f 	and.w	r0, r0, #15
 800e318:	fa00 f00b 	lsl.w	r0, r0, fp
 800e31c:	4303      	orrs	r3, r0
 800e31e:	9300      	str	r3, [sp, #0]
 800e320:	f10b 0b04 	add.w	fp, fp, #4
 800e324:	9b03      	ldr	r3, [sp, #12]
 800e326:	e00d      	b.n	800e344 <__gethex+0x27c>
 800e328:	9b03      	ldr	r3, [sp, #12]
 800e32a:	9a06      	ldr	r2, [sp, #24]
 800e32c:	4413      	add	r3, r2
 800e32e:	42bb      	cmp	r3, r7
 800e330:	d3e0      	bcc.n	800e2f4 <__gethex+0x22c>
 800e332:	4618      	mov	r0, r3
 800e334:	9901      	ldr	r1, [sp, #4]
 800e336:	9307      	str	r3, [sp, #28]
 800e338:	4652      	mov	r2, sl
 800e33a:	f001 f8a5 	bl	800f488 <strncmp>
 800e33e:	9b07      	ldr	r3, [sp, #28]
 800e340:	2800      	cmp	r0, #0
 800e342:	d1d7      	bne.n	800e2f4 <__gethex+0x22c>
 800e344:	461e      	mov	r6, r3
 800e346:	e78b      	b.n	800e260 <__gethex+0x198>
 800e348:	f04f 0a03 	mov.w	sl, #3
 800e34c:	e7b8      	b.n	800e2c0 <__gethex+0x1f8>
 800e34e:	da0a      	bge.n	800e366 <__gethex+0x29e>
 800e350:	1a37      	subs	r7, r6, r0
 800e352:	4621      	mov	r1, r4
 800e354:	ee18 0a10 	vmov	r0, s16
 800e358:	463a      	mov	r2, r7
 800e35a:	f000 fc55 	bl	800ec08 <__lshift>
 800e35e:	1bed      	subs	r5, r5, r7
 800e360:	4604      	mov	r4, r0
 800e362:	f100 0914 	add.w	r9, r0, #20
 800e366:	f04f 0a00 	mov.w	sl, #0
 800e36a:	e7ae      	b.n	800e2ca <__gethex+0x202>
 800e36c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e370:	42a8      	cmp	r0, r5
 800e372:	dd72      	ble.n	800e45a <__gethex+0x392>
 800e374:	1b45      	subs	r5, r0, r5
 800e376:	42ae      	cmp	r6, r5
 800e378:	dc36      	bgt.n	800e3e8 <__gethex+0x320>
 800e37a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e37e:	2b02      	cmp	r3, #2
 800e380:	d02a      	beq.n	800e3d8 <__gethex+0x310>
 800e382:	2b03      	cmp	r3, #3
 800e384:	d02c      	beq.n	800e3e0 <__gethex+0x318>
 800e386:	2b01      	cmp	r3, #1
 800e388:	d11c      	bne.n	800e3c4 <__gethex+0x2fc>
 800e38a:	42ae      	cmp	r6, r5
 800e38c:	d11a      	bne.n	800e3c4 <__gethex+0x2fc>
 800e38e:	2e01      	cmp	r6, #1
 800e390:	d112      	bne.n	800e3b8 <__gethex+0x2f0>
 800e392:	9a04      	ldr	r2, [sp, #16]
 800e394:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e398:	6013      	str	r3, [r2, #0]
 800e39a:	2301      	movs	r3, #1
 800e39c:	6123      	str	r3, [r4, #16]
 800e39e:	f8c9 3000 	str.w	r3, [r9]
 800e3a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e3a4:	2762      	movs	r7, #98	; 0x62
 800e3a6:	601c      	str	r4, [r3, #0]
 800e3a8:	e723      	b.n	800e1f2 <__gethex+0x12a>
 800e3aa:	bf00      	nop
 800e3ac:	080119e8 	.word	0x080119e8
 800e3b0:	08011970 	.word	0x08011970
 800e3b4:	08011981 	.word	0x08011981
 800e3b8:	1e71      	subs	r1, r6, #1
 800e3ba:	4620      	mov	r0, r4
 800e3bc:	f000 fe68 	bl	800f090 <__any_on>
 800e3c0:	2800      	cmp	r0, #0
 800e3c2:	d1e6      	bne.n	800e392 <__gethex+0x2ca>
 800e3c4:	ee18 0a10 	vmov	r0, s16
 800e3c8:	4621      	mov	r1, r4
 800e3ca:	f000 fa01 	bl	800e7d0 <_Bfree>
 800e3ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	6013      	str	r3, [r2, #0]
 800e3d4:	2750      	movs	r7, #80	; 0x50
 800e3d6:	e70c      	b.n	800e1f2 <__gethex+0x12a>
 800e3d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d1f2      	bne.n	800e3c4 <__gethex+0x2fc>
 800e3de:	e7d8      	b.n	800e392 <__gethex+0x2ca>
 800e3e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d1d5      	bne.n	800e392 <__gethex+0x2ca>
 800e3e6:	e7ed      	b.n	800e3c4 <__gethex+0x2fc>
 800e3e8:	1e6f      	subs	r7, r5, #1
 800e3ea:	f1ba 0f00 	cmp.w	sl, #0
 800e3ee:	d131      	bne.n	800e454 <__gethex+0x38c>
 800e3f0:	b127      	cbz	r7, 800e3fc <__gethex+0x334>
 800e3f2:	4639      	mov	r1, r7
 800e3f4:	4620      	mov	r0, r4
 800e3f6:	f000 fe4b 	bl	800f090 <__any_on>
 800e3fa:	4682      	mov	sl, r0
 800e3fc:	117b      	asrs	r3, r7, #5
 800e3fe:	2101      	movs	r1, #1
 800e400:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e404:	f007 071f 	and.w	r7, r7, #31
 800e408:	fa01 f707 	lsl.w	r7, r1, r7
 800e40c:	421f      	tst	r7, r3
 800e40e:	4629      	mov	r1, r5
 800e410:	4620      	mov	r0, r4
 800e412:	bf18      	it	ne
 800e414:	f04a 0a02 	orrne.w	sl, sl, #2
 800e418:	1b76      	subs	r6, r6, r5
 800e41a:	f7ff fded 	bl	800dff8 <rshift>
 800e41e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e422:	2702      	movs	r7, #2
 800e424:	f1ba 0f00 	cmp.w	sl, #0
 800e428:	d048      	beq.n	800e4bc <__gethex+0x3f4>
 800e42a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e42e:	2b02      	cmp	r3, #2
 800e430:	d015      	beq.n	800e45e <__gethex+0x396>
 800e432:	2b03      	cmp	r3, #3
 800e434:	d017      	beq.n	800e466 <__gethex+0x39e>
 800e436:	2b01      	cmp	r3, #1
 800e438:	d109      	bne.n	800e44e <__gethex+0x386>
 800e43a:	f01a 0f02 	tst.w	sl, #2
 800e43e:	d006      	beq.n	800e44e <__gethex+0x386>
 800e440:	f8d9 0000 	ldr.w	r0, [r9]
 800e444:	ea4a 0a00 	orr.w	sl, sl, r0
 800e448:	f01a 0f01 	tst.w	sl, #1
 800e44c:	d10e      	bne.n	800e46c <__gethex+0x3a4>
 800e44e:	f047 0710 	orr.w	r7, r7, #16
 800e452:	e033      	b.n	800e4bc <__gethex+0x3f4>
 800e454:	f04f 0a01 	mov.w	sl, #1
 800e458:	e7d0      	b.n	800e3fc <__gethex+0x334>
 800e45a:	2701      	movs	r7, #1
 800e45c:	e7e2      	b.n	800e424 <__gethex+0x35c>
 800e45e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e460:	f1c3 0301 	rsb	r3, r3, #1
 800e464:	9315      	str	r3, [sp, #84]	; 0x54
 800e466:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d0f0      	beq.n	800e44e <__gethex+0x386>
 800e46c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e470:	f104 0314 	add.w	r3, r4, #20
 800e474:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e478:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e47c:	f04f 0c00 	mov.w	ip, #0
 800e480:	4618      	mov	r0, r3
 800e482:	f853 2b04 	ldr.w	r2, [r3], #4
 800e486:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e48a:	d01c      	beq.n	800e4c6 <__gethex+0x3fe>
 800e48c:	3201      	adds	r2, #1
 800e48e:	6002      	str	r2, [r0, #0]
 800e490:	2f02      	cmp	r7, #2
 800e492:	f104 0314 	add.w	r3, r4, #20
 800e496:	d13f      	bne.n	800e518 <__gethex+0x450>
 800e498:	f8d8 2000 	ldr.w	r2, [r8]
 800e49c:	3a01      	subs	r2, #1
 800e49e:	42b2      	cmp	r2, r6
 800e4a0:	d10a      	bne.n	800e4b8 <__gethex+0x3f0>
 800e4a2:	1171      	asrs	r1, r6, #5
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e4aa:	f006 061f 	and.w	r6, r6, #31
 800e4ae:	fa02 f606 	lsl.w	r6, r2, r6
 800e4b2:	421e      	tst	r6, r3
 800e4b4:	bf18      	it	ne
 800e4b6:	4617      	movne	r7, r2
 800e4b8:	f047 0720 	orr.w	r7, r7, #32
 800e4bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e4be:	601c      	str	r4, [r3, #0]
 800e4c0:	9b04      	ldr	r3, [sp, #16]
 800e4c2:	601d      	str	r5, [r3, #0]
 800e4c4:	e695      	b.n	800e1f2 <__gethex+0x12a>
 800e4c6:	4299      	cmp	r1, r3
 800e4c8:	f843 cc04 	str.w	ip, [r3, #-4]
 800e4cc:	d8d8      	bhi.n	800e480 <__gethex+0x3b8>
 800e4ce:	68a3      	ldr	r3, [r4, #8]
 800e4d0:	459b      	cmp	fp, r3
 800e4d2:	db19      	blt.n	800e508 <__gethex+0x440>
 800e4d4:	6861      	ldr	r1, [r4, #4]
 800e4d6:	ee18 0a10 	vmov	r0, s16
 800e4da:	3101      	adds	r1, #1
 800e4dc:	f000 f938 	bl	800e750 <_Balloc>
 800e4e0:	4681      	mov	r9, r0
 800e4e2:	b918      	cbnz	r0, 800e4ec <__gethex+0x424>
 800e4e4:	4b1a      	ldr	r3, [pc, #104]	; (800e550 <__gethex+0x488>)
 800e4e6:	4602      	mov	r2, r0
 800e4e8:	2184      	movs	r1, #132	; 0x84
 800e4ea:	e6a8      	b.n	800e23e <__gethex+0x176>
 800e4ec:	6922      	ldr	r2, [r4, #16]
 800e4ee:	3202      	adds	r2, #2
 800e4f0:	f104 010c 	add.w	r1, r4, #12
 800e4f4:	0092      	lsls	r2, r2, #2
 800e4f6:	300c      	adds	r0, #12
 800e4f8:	f7fc ff67 	bl	800b3ca <memcpy>
 800e4fc:	4621      	mov	r1, r4
 800e4fe:	ee18 0a10 	vmov	r0, s16
 800e502:	f000 f965 	bl	800e7d0 <_Bfree>
 800e506:	464c      	mov	r4, r9
 800e508:	6923      	ldr	r3, [r4, #16]
 800e50a:	1c5a      	adds	r2, r3, #1
 800e50c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e510:	6122      	str	r2, [r4, #16]
 800e512:	2201      	movs	r2, #1
 800e514:	615a      	str	r2, [r3, #20]
 800e516:	e7bb      	b.n	800e490 <__gethex+0x3c8>
 800e518:	6922      	ldr	r2, [r4, #16]
 800e51a:	455a      	cmp	r2, fp
 800e51c:	dd0b      	ble.n	800e536 <__gethex+0x46e>
 800e51e:	2101      	movs	r1, #1
 800e520:	4620      	mov	r0, r4
 800e522:	f7ff fd69 	bl	800dff8 <rshift>
 800e526:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e52a:	3501      	adds	r5, #1
 800e52c:	42ab      	cmp	r3, r5
 800e52e:	f6ff aed0 	blt.w	800e2d2 <__gethex+0x20a>
 800e532:	2701      	movs	r7, #1
 800e534:	e7c0      	b.n	800e4b8 <__gethex+0x3f0>
 800e536:	f016 061f 	ands.w	r6, r6, #31
 800e53a:	d0fa      	beq.n	800e532 <__gethex+0x46a>
 800e53c:	4453      	add	r3, sl
 800e53e:	f1c6 0620 	rsb	r6, r6, #32
 800e542:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e546:	f000 f9f5 	bl	800e934 <__hi0bits>
 800e54a:	42b0      	cmp	r0, r6
 800e54c:	dbe7      	blt.n	800e51e <__gethex+0x456>
 800e54e:	e7f0      	b.n	800e532 <__gethex+0x46a>
 800e550:	08011970 	.word	0x08011970

0800e554 <L_shift>:
 800e554:	f1c2 0208 	rsb	r2, r2, #8
 800e558:	0092      	lsls	r2, r2, #2
 800e55a:	b570      	push	{r4, r5, r6, lr}
 800e55c:	f1c2 0620 	rsb	r6, r2, #32
 800e560:	6843      	ldr	r3, [r0, #4]
 800e562:	6804      	ldr	r4, [r0, #0]
 800e564:	fa03 f506 	lsl.w	r5, r3, r6
 800e568:	432c      	orrs	r4, r5
 800e56a:	40d3      	lsrs	r3, r2
 800e56c:	6004      	str	r4, [r0, #0]
 800e56e:	f840 3f04 	str.w	r3, [r0, #4]!
 800e572:	4288      	cmp	r0, r1
 800e574:	d3f4      	bcc.n	800e560 <L_shift+0xc>
 800e576:	bd70      	pop	{r4, r5, r6, pc}

0800e578 <__match>:
 800e578:	b530      	push	{r4, r5, lr}
 800e57a:	6803      	ldr	r3, [r0, #0]
 800e57c:	3301      	adds	r3, #1
 800e57e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e582:	b914      	cbnz	r4, 800e58a <__match+0x12>
 800e584:	6003      	str	r3, [r0, #0]
 800e586:	2001      	movs	r0, #1
 800e588:	bd30      	pop	{r4, r5, pc}
 800e58a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e58e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e592:	2d19      	cmp	r5, #25
 800e594:	bf98      	it	ls
 800e596:	3220      	addls	r2, #32
 800e598:	42a2      	cmp	r2, r4
 800e59a:	d0f0      	beq.n	800e57e <__match+0x6>
 800e59c:	2000      	movs	r0, #0
 800e59e:	e7f3      	b.n	800e588 <__match+0x10>

0800e5a0 <__hexnan>:
 800e5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a4:	680b      	ldr	r3, [r1, #0]
 800e5a6:	115e      	asrs	r6, r3, #5
 800e5a8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e5ac:	f013 031f 	ands.w	r3, r3, #31
 800e5b0:	b087      	sub	sp, #28
 800e5b2:	bf18      	it	ne
 800e5b4:	3604      	addne	r6, #4
 800e5b6:	2500      	movs	r5, #0
 800e5b8:	1f37      	subs	r7, r6, #4
 800e5ba:	4690      	mov	r8, r2
 800e5bc:	6802      	ldr	r2, [r0, #0]
 800e5be:	9301      	str	r3, [sp, #4]
 800e5c0:	4682      	mov	sl, r0
 800e5c2:	f846 5c04 	str.w	r5, [r6, #-4]
 800e5c6:	46b9      	mov	r9, r7
 800e5c8:	463c      	mov	r4, r7
 800e5ca:	9502      	str	r5, [sp, #8]
 800e5cc:	46ab      	mov	fp, r5
 800e5ce:	7851      	ldrb	r1, [r2, #1]
 800e5d0:	1c53      	adds	r3, r2, #1
 800e5d2:	9303      	str	r3, [sp, #12]
 800e5d4:	b341      	cbz	r1, 800e628 <__hexnan+0x88>
 800e5d6:	4608      	mov	r0, r1
 800e5d8:	9205      	str	r2, [sp, #20]
 800e5da:	9104      	str	r1, [sp, #16]
 800e5dc:	f7ff fd5e 	bl	800e09c <__hexdig_fun>
 800e5e0:	2800      	cmp	r0, #0
 800e5e2:	d14f      	bne.n	800e684 <__hexnan+0xe4>
 800e5e4:	9904      	ldr	r1, [sp, #16]
 800e5e6:	9a05      	ldr	r2, [sp, #20]
 800e5e8:	2920      	cmp	r1, #32
 800e5ea:	d818      	bhi.n	800e61e <__hexnan+0x7e>
 800e5ec:	9b02      	ldr	r3, [sp, #8]
 800e5ee:	459b      	cmp	fp, r3
 800e5f0:	dd13      	ble.n	800e61a <__hexnan+0x7a>
 800e5f2:	454c      	cmp	r4, r9
 800e5f4:	d206      	bcs.n	800e604 <__hexnan+0x64>
 800e5f6:	2d07      	cmp	r5, #7
 800e5f8:	dc04      	bgt.n	800e604 <__hexnan+0x64>
 800e5fa:	462a      	mov	r2, r5
 800e5fc:	4649      	mov	r1, r9
 800e5fe:	4620      	mov	r0, r4
 800e600:	f7ff ffa8 	bl	800e554 <L_shift>
 800e604:	4544      	cmp	r4, r8
 800e606:	d950      	bls.n	800e6aa <__hexnan+0x10a>
 800e608:	2300      	movs	r3, #0
 800e60a:	f1a4 0904 	sub.w	r9, r4, #4
 800e60e:	f844 3c04 	str.w	r3, [r4, #-4]
 800e612:	f8cd b008 	str.w	fp, [sp, #8]
 800e616:	464c      	mov	r4, r9
 800e618:	461d      	mov	r5, r3
 800e61a:	9a03      	ldr	r2, [sp, #12]
 800e61c:	e7d7      	b.n	800e5ce <__hexnan+0x2e>
 800e61e:	2929      	cmp	r1, #41	; 0x29
 800e620:	d156      	bne.n	800e6d0 <__hexnan+0x130>
 800e622:	3202      	adds	r2, #2
 800e624:	f8ca 2000 	str.w	r2, [sl]
 800e628:	f1bb 0f00 	cmp.w	fp, #0
 800e62c:	d050      	beq.n	800e6d0 <__hexnan+0x130>
 800e62e:	454c      	cmp	r4, r9
 800e630:	d206      	bcs.n	800e640 <__hexnan+0xa0>
 800e632:	2d07      	cmp	r5, #7
 800e634:	dc04      	bgt.n	800e640 <__hexnan+0xa0>
 800e636:	462a      	mov	r2, r5
 800e638:	4649      	mov	r1, r9
 800e63a:	4620      	mov	r0, r4
 800e63c:	f7ff ff8a 	bl	800e554 <L_shift>
 800e640:	4544      	cmp	r4, r8
 800e642:	d934      	bls.n	800e6ae <__hexnan+0x10e>
 800e644:	f1a8 0204 	sub.w	r2, r8, #4
 800e648:	4623      	mov	r3, r4
 800e64a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e64e:	f842 1f04 	str.w	r1, [r2, #4]!
 800e652:	429f      	cmp	r7, r3
 800e654:	d2f9      	bcs.n	800e64a <__hexnan+0xaa>
 800e656:	1b3b      	subs	r3, r7, r4
 800e658:	f023 0303 	bic.w	r3, r3, #3
 800e65c:	3304      	adds	r3, #4
 800e65e:	3401      	adds	r4, #1
 800e660:	3e03      	subs	r6, #3
 800e662:	42b4      	cmp	r4, r6
 800e664:	bf88      	it	hi
 800e666:	2304      	movhi	r3, #4
 800e668:	4443      	add	r3, r8
 800e66a:	2200      	movs	r2, #0
 800e66c:	f843 2b04 	str.w	r2, [r3], #4
 800e670:	429f      	cmp	r7, r3
 800e672:	d2fb      	bcs.n	800e66c <__hexnan+0xcc>
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	b91b      	cbnz	r3, 800e680 <__hexnan+0xe0>
 800e678:	4547      	cmp	r7, r8
 800e67a:	d127      	bne.n	800e6cc <__hexnan+0x12c>
 800e67c:	2301      	movs	r3, #1
 800e67e:	603b      	str	r3, [r7, #0]
 800e680:	2005      	movs	r0, #5
 800e682:	e026      	b.n	800e6d2 <__hexnan+0x132>
 800e684:	3501      	adds	r5, #1
 800e686:	2d08      	cmp	r5, #8
 800e688:	f10b 0b01 	add.w	fp, fp, #1
 800e68c:	dd06      	ble.n	800e69c <__hexnan+0xfc>
 800e68e:	4544      	cmp	r4, r8
 800e690:	d9c3      	bls.n	800e61a <__hexnan+0x7a>
 800e692:	2300      	movs	r3, #0
 800e694:	f844 3c04 	str.w	r3, [r4, #-4]
 800e698:	2501      	movs	r5, #1
 800e69a:	3c04      	subs	r4, #4
 800e69c:	6822      	ldr	r2, [r4, #0]
 800e69e:	f000 000f 	and.w	r0, r0, #15
 800e6a2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e6a6:	6022      	str	r2, [r4, #0]
 800e6a8:	e7b7      	b.n	800e61a <__hexnan+0x7a>
 800e6aa:	2508      	movs	r5, #8
 800e6ac:	e7b5      	b.n	800e61a <__hexnan+0x7a>
 800e6ae:	9b01      	ldr	r3, [sp, #4]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d0df      	beq.n	800e674 <__hexnan+0xd4>
 800e6b4:	f04f 32ff 	mov.w	r2, #4294967295
 800e6b8:	f1c3 0320 	rsb	r3, r3, #32
 800e6bc:	fa22 f303 	lsr.w	r3, r2, r3
 800e6c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e6c4:	401a      	ands	r2, r3
 800e6c6:	f846 2c04 	str.w	r2, [r6, #-4]
 800e6ca:	e7d3      	b.n	800e674 <__hexnan+0xd4>
 800e6cc:	3f04      	subs	r7, #4
 800e6ce:	e7d1      	b.n	800e674 <__hexnan+0xd4>
 800e6d0:	2004      	movs	r0, #4
 800e6d2:	b007      	add	sp, #28
 800e6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e6d8 <_localeconv_r>:
 800e6d8:	4800      	ldr	r0, [pc, #0]	; (800e6dc <_localeconv_r+0x4>)
 800e6da:	4770      	bx	lr
 800e6dc:	20000200 	.word	0x20000200

0800e6e0 <_lseek_r>:
 800e6e0:	b538      	push	{r3, r4, r5, lr}
 800e6e2:	4d07      	ldr	r5, [pc, #28]	; (800e700 <_lseek_r+0x20>)
 800e6e4:	4604      	mov	r4, r0
 800e6e6:	4608      	mov	r0, r1
 800e6e8:	4611      	mov	r1, r2
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	602a      	str	r2, [r5, #0]
 800e6ee:	461a      	mov	r2, r3
 800e6f0:	f7f4 f886 	bl	8002800 <_lseek>
 800e6f4:	1c43      	adds	r3, r0, #1
 800e6f6:	d102      	bne.n	800e6fe <_lseek_r+0x1e>
 800e6f8:	682b      	ldr	r3, [r5, #0]
 800e6fa:	b103      	cbz	r3, 800e6fe <_lseek_r+0x1e>
 800e6fc:	6023      	str	r3, [r4, #0]
 800e6fe:	bd38      	pop	{r3, r4, r5, pc}
 800e700:	20008c60 	.word	0x20008c60

0800e704 <malloc>:
 800e704:	4b02      	ldr	r3, [pc, #8]	; (800e710 <malloc+0xc>)
 800e706:	4601      	mov	r1, r0
 800e708:	6818      	ldr	r0, [r3, #0]
 800e70a:	f7fc be95 	b.w	800b438 <_malloc_r>
 800e70e:	bf00      	nop
 800e710:	200000a8 	.word	0x200000a8

0800e714 <__ascii_mbtowc>:
 800e714:	b082      	sub	sp, #8
 800e716:	b901      	cbnz	r1, 800e71a <__ascii_mbtowc+0x6>
 800e718:	a901      	add	r1, sp, #4
 800e71a:	b142      	cbz	r2, 800e72e <__ascii_mbtowc+0x1a>
 800e71c:	b14b      	cbz	r3, 800e732 <__ascii_mbtowc+0x1e>
 800e71e:	7813      	ldrb	r3, [r2, #0]
 800e720:	600b      	str	r3, [r1, #0]
 800e722:	7812      	ldrb	r2, [r2, #0]
 800e724:	1e10      	subs	r0, r2, #0
 800e726:	bf18      	it	ne
 800e728:	2001      	movne	r0, #1
 800e72a:	b002      	add	sp, #8
 800e72c:	4770      	bx	lr
 800e72e:	4610      	mov	r0, r2
 800e730:	e7fb      	b.n	800e72a <__ascii_mbtowc+0x16>
 800e732:	f06f 0001 	mvn.w	r0, #1
 800e736:	e7f8      	b.n	800e72a <__ascii_mbtowc+0x16>

0800e738 <__malloc_lock>:
 800e738:	4801      	ldr	r0, [pc, #4]	; (800e740 <__malloc_lock+0x8>)
 800e73a:	f7fc be44 	b.w	800b3c6 <__retarget_lock_acquire_recursive>
 800e73e:	bf00      	nop
 800e740:	20008c54 	.word	0x20008c54

0800e744 <__malloc_unlock>:
 800e744:	4801      	ldr	r0, [pc, #4]	; (800e74c <__malloc_unlock+0x8>)
 800e746:	f7fc be3f 	b.w	800b3c8 <__retarget_lock_release_recursive>
 800e74a:	bf00      	nop
 800e74c:	20008c54 	.word	0x20008c54

0800e750 <_Balloc>:
 800e750:	b570      	push	{r4, r5, r6, lr}
 800e752:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e754:	4604      	mov	r4, r0
 800e756:	460d      	mov	r5, r1
 800e758:	b976      	cbnz	r6, 800e778 <_Balloc+0x28>
 800e75a:	2010      	movs	r0, #16
 800e75c:	f7ff ffd2 	bl	800e704 <malloc>
 800e760:	4602      	mov	r2, r0
 800e762:	6260      	str	r0, [r4, #36]	; 0x24
 800e764:	b920      	cbnz	r0, 800e770 <_Balloc+0x20>
 800e766:	4b18      	ldr	r3, [pc, #96]	; (800e7c8 <_Balloc+0x78>)
 800e768:	4818      	ldr	r0, [pc, #96]	; (800e7cc <_Balloc+0x7c>)
 800e76a:	2166      	movs	r1, #102	; 0x66
 800e76c:	f000 feae 	bl	800f4cc <__assert_func>
 800e770:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e774:	6006      	str	r6, [r0, #0]
 800e776:	60c6      	str	r6, [r0, #12]
 800e778:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e77a:	68f3      	ldr	r3, [r6, #12]
 800e77c:	b183      	cbz	r3, 800e7a0 <_Balloc+0x50>
 800e77e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e780:	68db      	ldr	r3, [r3, #12]
 800e782:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e786:	b9b8      	cbnz	r0, 800e7b8 <_Balloc+0x68>
 800e788:	2101      	movs	r1, #1
 800e78a:	fa01 f605 	lsl.w	r6, r1, r5
 800e78e:	1d72      	adds	r2, r6, #5
 800e790:	0092      	lsls	r2, r2, #2
 800e792:	4620      	mov	r0, r4
 800e794:	f000 fc9d 	bl	800f0d2 <_calloc_r>
 800e798:	b160      	cbz	r0, 800e7b4 <_Balloc+0x64>
 800e79a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e79e:	e00e      	b.n	800e7be <_Balloc+0x6e>
 800e7a0:	2221      	movs	r2, #33	; 0x21
 800e7a2:	2104      	movs	r1, #4
 800e7a4:	4620      	mov	r0, r4
 800e7a6:	f000 fc94 	bl	800f0d2 <_calloc_r>
 800e7aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7ac:	60f0      	str	r0, [r6, #12]
 800e7ae:	68db      	ldr	r3, [r3, #12]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d1e4      	bne.n	800e77e <_Balloc+0x2e>
 800e7b4:	2000      	movs	r0, #0
 800e7b6:	bd70      	pop	{r4, r5, r6, pc}
 800e7b8:	6802      	ldr	r2, [r0, #0]
 800e7ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e7be:	2300      	movs	r3, #0
 800e7c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e7c4:	e7f7      	b.n	800e7b6 <_Balloc+0x66>
 800e7c6:	bf00      	nop
 800e7c8:	080118fe 	.word	0x080118fe
 800e7cc:	080119fc 	.word	0x080119fc

0800e7d0 <_Bfree>:
 800e7d0:	b570      	push	{r4, r5, r6, lr}
 800e7d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e7d4:	4605      	mov	r5, r0
 800e7d6:	460c      	mov	r4, r1
 800e7d8:	b976      	cbnz	r6, 800e7f8 <_Bfree+0x28>
 800e7da:	2010      	movs	r0, #16
 800e7dc:	f7ff ff92 	bl	800e704 <malloc>
 800e7e0:	4602      	mov	r2, r0
 800e7e2:	6268      	str	r0, [r5, #36]	; 0x24
 800e7e4:	b920      	cbnz	r0, 800e7f0 <_Bfree+0x20>
 800e7e6:	4b09      	ldr	r3, [pc, #36]	; (800e80c <_Bfree+0x3c>)
 800e7e8:	4809      	ldr	r0, [pc, #36]	; (800e810 <_Bfree+0x40>)
 800e7ea:	218a      	movs	r1, #138	; 0x8a
 800e7ec:	f000 fe6e 	bl	800f4cc <__assert_func>
 800e7f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e7f4:	6006      	str	r6, [r0, #0]
 800e7f6:	60c6      	str	r6, [r0, #12]
 800e7f8:	b13c      	cbz	r4, 800e80a <_Bfree+0x3a>
 800e7fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e7fc:	6862      	ldr	r2, [r4, #4]
 800e7fe:	68db      	ldr	r3, [r3, #12]
 800e800:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e804:	6021      	str	r1, [r4, #0]
 800e806:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e80a:	bd70      	pop	{r4, r5, r6, pc}
 800e80c:	080118fe 	.word	0x080118fe
 800e810:	080119fc 	.word	0x080119fc

0800e814 <__multadd>:
 800e814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e818:	690d      	ldr	r5, [r1, #16]
 800e81a:	4607      	mov	r7, r0
 800e81c:	460c      	mov	r4, r1
 800e81e:	461e      	mov	r6, r3
 800e820:	f101 0c14 	add.w	ip, r1, #20
 800e824:	2000      	movs	r0, #0
 800e826:	f8dc 3000 	ldr.w	r3, [ip]
 800e82a:	b299      	uxth	r1, r3
 800e82c:	fb02 6101 	mla	r1, r2, r1, r6
 800e830:	0c1e      	lsrs	r6, r3, #16
 800e832:	0c0b      	lsrs	r3, r1, #16
 800e834:	fb02 3306 	mla	r3, r2, r6, r3
 800e838:	b289      	uxth	r1, r1
 800e83a:	3001      	adds	r0, #1
 800e83c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e840:	4285      	cmp	r5, r0
 800e842:	f84c 1b04 	str.w	r1, [ip], #4
 800e846:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e84a:	dcec      	bgt.n	800e826 <__multadd+0x12>
 800e84c:	b30e      	cbz	r6, 800e892 <__multadd+0x7e>
 800e84e:	68a3      	ldr	r3, [r4, #8]
 800e850:	42ab      	cmp	r3, r5
 800e852:	dc19      	bgt.n	800e888 <__multadd+0x74>
 800e854:	6861      	ldr	r1, [r4, #4]
 800e856:	4638      	mov	r0, r7
 800e858:	3101      	adds	r1, #1
 800e85a:	f7ff ff79 	bl	800e750 <_Balloc>
 800e85e:	4680      	mov	r8, r0
 800e860:	b928      	cbnz	r0, 800e86e <__multadd+0x5a>
 800e862:	4602      	mov	r2, r0
 800e864:	4b0c      	ldr	r3, [pc, #48]	; (800e898 <__multadd+0x84>)
 800e866:	480d      	ldr	r0, [pc, #52]	; (800e89c <__multadd+0x88>)
 800e868:	21b5      	movs	r1, #181	; 0xb5
 800e86a:	f000 fe2f 	bl	800f4cc <__assert_func>
 800e86e:	6922      	ldr	r2, [r4, #16]
 800e870:	3202      	adds	r2, #2
 800e872:	f104 010c 	add.w	r1, r4, #12
 800e876:	0092      	lsls	r2, r2, #2
 800e878:	300c      	adds	r0, #12
 800e87a:	f7fc fda6 	bl	800b3ca <memcpy>
 800e87e:	4621      	mov	r1, r4
 800e880:	4638      	mov	r0, r7
 800e882:	f7ff ffa5 	bl	800e7d0 <_Bfree>
 800e886:	4644      	mov	r4, r8
 800e888:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e88c:	3501      	adds	r5, #1
 800e88e:	615e      	str	r6, [r3, #20]
 800e890:	6125      	str	r5, [r4, #16]
 800e892:	4620      	mov	r0, r4
 800e894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e898:	08011970 	.word	0x08011970
 800e89c:	080119fc 	.word	0x080119fc

0800e8a0 <__s2b>:
 800e8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8a4:	460c      	mov	r4, r1
 800e8a6:	4615      	mov	r5, r2
 800e8a8:	461f      	mov	r7, r3
 800e8aa:	2209      	movs	r2, #9
 800e8ac:	3308      	adds	r3, #8
 800e8ae:	4606      	mov	r6, r0
 800e8b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e8b4:	2100      	movs	r1, #0
 800e8b6:	2201      	movs	r2, #1
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	db09      	blt.n	800e8d0 <__s2b+0x30>
 800e8bc:	4630      	mov	r0, r6
 800e8be:	f7ff ff47 	bl	800e750 <_Balloc>
 800e8c2:	b940      	cbnz	r0, 800e8d6 <__s2b+0x36>
 800e8c4:	4602      	mov	r2, r0
 800e8c6:	4b19      	ldr	r3, [pc, #100]	; (800e92c <__s2b+0x8c>)
 800e8c8:	4819      	ldr	r0, [pc, #100]	; (800e930 <__s2b+0x90>)
 800e8ca:	21ce      	movs	r1, #206	; 0xce
 800e8cc:	f000 fdfe 	bl	800f4cc <__assert_func>
 800e8d0:	0052      	lsls	r2, r2, #1
 800e8d2:	3101      	adds	r1, #1
 800e8d4:	e7f0      	b.n	800e8b8 <__s2b+0x18>
 800e8d6:	9b08      	ldr	r3, [sp, #32]
 800e8d8:	6143      	str	r3, [r0, #20]
 800e8da:	2d09      	cmp	r5, #9
 800e8dc:	f04f 0301 	mov.w	r3, #1
 800e8e0:	6103      	str	r3, [r0, #16]
 800e8e2:	dd16      	ble.n	800e912 <__s2b+0x72>
 800e8e4:	f104 0909 	add.w	r9, r4, #9
 800e8e8:	46c8      	mov	r8, r9
 800e8ea:	442c      	add	r4, r5
 800e8ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e8f0:	4601      	mov	r1, r0
 800e8f2:	3b30      	subs	r3, #48	; 0x30
 800e8f4:	220a      	movs	r2, #10
 800e8f6:	4630      	mov	r0, r6
 800e8f8:	f7ff ff8c 	bl	800e814 <__multadd>
 800e8fc:	45a0      	cmp	r8, r4
 800e8fe:	d1f5      	bne.n	800e8ec <__s2b+0x4c>
 800e900:	f1a5 0408 	sub.w	r4, r5, #8
 800e904:	444c      	add	r4, r9
 800e906:	1b2d      	subs	r5, r5, r4
 800e908:	1963      	adds	r3, r4, r5
 800e90a:	42bb      	cmp	r3, r7
 800e90c:	db04      	blt.n	800e918 <__s2b+0x78>
 800e90e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e912:	340a      	adds	r4, #10
 800e914:	2509      	movs	r5, #9
 800e916:	e7f6      	b.n	800e906 <__s2b+0x66>
 800e918:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e91c:	4601      	mov	r1, r0
 800e91e:	3b30      	subs	r3, #48	; 0x30
 800e920:	220a      	movs	r2, #10
 800e922:	4630      	mov	r0, r6
 800e924:	f7ff ff76 	bl	800e814 <__multadd>
 800e928:	e7ee      	b.n	800e908 <__s2b+0x68>
 800e92a:	bf00      	nop
 800e92c:	08011970 	.word	0x08011970
 800e930:	080119fc 	.word	0x080119fc

0800e934 <__hi0bits>:
 800e934:	0c03      	lsrs	r3, r0, #16
 800e936:	041b      	lsls	r3, r3, #16
 800e938:	b9d3      	cbnz	r3, 800e970 <__hi0bits+0x3c>
 800e93a:	0400      	lsls	r0, r0, #16
 800e93c:	2310      	movs	r3, #16
 800e93e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e942:	bf04      	itt	eq
 800e944:	0200      	lsleq	r0, r0, #8
 800e946:	3308      	addeq	r3, #8
 800e948:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e94c:	bf04      	itt	eq
 800e94e:	0100      	lsleq	r0, r0, #4
 800e950:	3304      	addeq	r3, #4
 800e952:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e956:	bf04      	itt	eq
 800e958:	0080      	lsleq	r0, r0, #2
 800e95a:	3302      	addeq	r3, #2
 800e95c:	2800      	cmp	r0, #0
 800e95e:	db05      	blt.n	800e96c <__hi0bits+0x38>
 800e960:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e964:	f103 0301 	add.w	r3, r3, #1
 800e968:	bf08      	it	eq
 800e96a:	2320      	moveq	r3, #32
 800e96c:	4618      	mov	r0, r3
 800e96e:	4770      	bx	lr
 800e970:	2300      	movs	r3, #0
 800e972:	e7e4      	b.n	800e93e <__hi0bits+0xa>

0800e974 <__lo0bits>:
 800e974:	6803      	ldr	r3, [r0, #0]
 800e976:	f013 0207 	ands.w	r2, r3, #7
 800e97a:	4601      	mov	r1, r0
 800e97c:	d00b      	beq.n	800e996 <__lo0bits+0x22>
 800e97e:	07da      	lsls	r2, r3, #31
 800e980:	d423      	bmi.n	800e9ca <__lo0bits+0x56>
 800e982:	0798      	lsls	r0, r3, #30
 800e984:	bf49      	itett	mi
 800e986:	085b      	lsrmi	r3, r3, #1
 800e988:	089b      	lsrpl	r3, r3, #2
 800e98a:	2001      	movmi	r0, #1
 800e98c:	600b      	strmi	r3, [r1, #0]
 800e98e:	bf5c      	itt	pl
 800e990:	600b      	strpl	r3, [r1, #0]
 800e992:	2002      	movpl	r0, #2
 800e994:	4770      	bx	lr
 800e996:	b298      	uxth	r0, r3
 800e998:	b9a8      	cbnz	r0, 800e9c6 <__lo0bits+0x52>
 800e99a:	0c1b      	lsrs	r3, r3, #16
 800e99c:	2010      	movs	r0, #16
 800e99e:	b2da      	uxtb	r2, r3
 800e9a0:	b90a      	cbnz	r2, 800e9a6 <__lo0bits+0x32>
 800e9a2:	3008      	adds	r0, #8
 800e9a4:	0a1b      	lsrs	r3, r3, #8
 800e9a6:	071a      	lsls	r2, r3, #28
 800e9a8:	bf04      	itt	eq
 800e9aa:	091b      	lsreq	r3, r3, #4
 800e9ac:	3004      	addeq	r0, #4
 800e9ae:	079a      	lsls	r2, r3, #30
 800e9b0:	bf04      	itt	eq
 800e9b2:	089b      	lsreq	r3, r3, #2
 800e9b4:	3002      	addeq	r0, #2
 800e9b6:	07da      	lsls	r2, r3, #31
 800e9b8:	d403      	bmi.n	800e9c2 <__lo0bits+0x4e>
 800e9ba:	085b      	lsrs	r3, r3, #1
 800e9bc:	f100 0001 	add.w	r0, r0, #1
 800e9c0:	d005      	beq.n	800e9ce <__lo0bits+0x5a>
 800e9c2:	600b      	str	r3, [r1, #0]
 800e9c4:	4770      	bx	lr
 800e9c6:	4610      	mov	r0, r2
 800e9c8:	e7e9      	b.n	800e99e <__lo0bits+0x2a>
 800e9ca:	2000      	movs	r0, #0
 800e9cc:	4770      	bx	lr
 800e9ce:	2020      	movs	r0, #32
 800e9d0:	4770      	bx	lr
	...

0800e9d4 <__i2b>:
 800e9d4:	b510      	push	{r4, lr}
 800e9d6:	460c      	mov	r4, r1
 800e9d8:	2101      	movs	r1, #1
 800e9da:	f7ff feb9 	bl	800e750 <_Balloc>
 800e9de:	4602      	mov	r2, r0
 800e9e0:	b928      	cbnz	r0, 800e9ee <__i2b+0x1a>
 800e9e2:	4b05      	ldr	r3, [pc, #20]	; (800e9f8 <__i2b+0x24>)
 800e9e4:	4805      	ldr	r0, [pc, #20]	; (800e9fc <__i2b+0x28>)
 800e9e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e9ea:	f000 fd6f 	bl	800f4cc <__assert_func>
 800e9ee:	2301      	movs	r3, #1
 800e9f0:	6144      	str	r4, [r0, #20]
 800e9f2:	6103      	str	r3, [r0, #16]
 800e9f4:	bd10      	pop	{r4, pc}
 800e9f6:	bf00      	nop
 800e9f8:	08011970 	.word	0x08011970
 800e9fc:	080119fc 	.word	0x080119fc

0800ea00 <__multiply>:
 800ea00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea04:	4691      	mov	r9, r2
 800ea06:	690a      	ldr	r2, [r1, #16]
 800ea08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea0c:	429a      	cmp	r2, r3
 800ea0e:	bfb8      	it	lt
 800ea10:	460b      	movlt	r3, r1
 800ea12:	460c      	mov	r4, r1
 800ea14:	bfbc      	itt	lt
 800ea16:	464c      	movlt	r4, r9
 800ea18:	4699      	movlt	r9, r3
 800ea1a:	6927      	ldr	r7, [r4, #16]
 800ea1c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ea20:	68a3      	ldr	r3, [r4, #8]
 800ea22:	6861      	ldr	r1, [r4, #4]
 800ea24:	eb07 060a 	add.w	r6, r7, sl
 800ea28:	42b3      	cmp	r3, r6
 800ea2a:	b085      	sub	sp, #20
 800ea2c:	bfb8      	it	lt
 800ea2e:	3101      	addlt	r1, #1
 800ea30:	f7ff fe8e 	bl	800e750 <_Balloc>
 800ea34:	b930      	cbnz	r0, 800ea44 <__multiply+0x44>
 800ea36:	4602      	mov	r2, r0
 800ea38:	4b44      	ldr	r3, [pc, #272]	; (800eb4c <__multiply+0x14c>)
 800ea3a:	4845      	ldr	r0, [pc, #276]	; (800eb50 <__multiply+0x150>)
 800ea3c:	f240 115d 	movw	r1, #349	; 0x15d
 800ea40:	f000 fd44 	bl	800f4cc <__assert_func>
 800ea44:	f100 0514 	add.w	r5, r0, #20
 800ea48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ea4c:	462b      	mov	r3, r5
 800ea4e:	2200      	movs	r2, #0
 800ea50:	4543      	cmp	r3, r8
 800ea52:	d321      	bcc.n	800ea98 <__multiply+0x98>
 800ea54:	f104 0314 	add.w	r3, r4, #20
 800ea58:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ea5c:	f109 0314 	add.w	r3, r9, #20
 800ea60:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ea64:	9202      	str	r2, [sp, #8]
 800ea66:	1b3a      	subs	r2, r7, r4
 800ea68:	3a15      	subs	r2, #21
 800ea6a:	f022 0203 	bic.w	r2, r2, #3
 800ea6e:	3204      	adds	r2, #4
 800ea70:	f104 0115 	add.w	r1, r4, #21
 800ea74:	428f      	cmp	r7, r1
 800ea76:	bf38      	it	cc
 800ea78:	2204      	movcc	r2, #4
 800ea7a:	9201      	str	r2, [sp, #4]
 800ea7c:	9a02      	ldr	r2, [sp, #8]
 800ea7e:	9303      	str	r3, [sp, #12]
 800ea80:	429a      	cmp	r2, r3
 800ea82:	d80c      	bhi.n	800ea9e <__multiply+0x9e>
 800ea84:	2e00      	cmp	r6, #0
 800ea86:	dd03      	ble.n	800ea90 <__multiply+0x90>
 800ea88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d05a      	beq.n	800eb46 <__multiply+0x146>
 800ea90:	6106      	str	r6, [r0, #16]
 800ea92:	b005      	add	sp, #20
 800ea94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea98:	f843 2b04 	str.w	r2, [r3], #4
 800ea9c:	e7d8      	b.n	800ea50 <__multiply+0x50>
 800ea9e:	f8b3 a000 	ldrh.w	sl, [r3]
 800eaa2:	f1ba 0f00 	cmp.w	sl, #0
 800eaa6:	d024      	beq.n	800eaf2 <__multiply+0xf2>
 800eaa8:	f104 0e14 	add.w	lr, r4, #20
 800eaac:	46a9      	mov	r9, r5
 800eaae:	f04f 0c00 	mov.w	ip, #0
 800eab2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800eab6:	f8d9 1000 	ldr.w	r1, [r9]
 800eaba:	fa1f fb82 	uxth.w	fp, r2
 800eabe:	b289      	uxth	r1, r1
 800eac0:	fb0a 110b 	mla	r1, sl, fp, r1
 800eac4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800eac8:	f8d9 2000 	ldr.w	r2, [r9]
 800eacc:	4461      	add	r1, ip
 800eace:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ead2:	fb0a c20b 	mla	r2, sl, fp, ip
 800ead6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800eada:	b289      	uxth	r1, r1
 800eadc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800eae0:	4577      	cmp	r7, lr
 800eae2:	f849 1b04 	str.w	r1, [r9], #4
 800eae6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eaea:	d8e2      	bhi.n	800eab2 <__multiply+0xb2>
 800eaec:	9a01      	ldr	r2, [sp, #4]
 800eaee:	f845 c002 	str.w	ip, [r5, r2]
 800eaf2:	9a03      	ldr	r2, [sp, #12]
 800eaf4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800eaf8:	3304      	adds	r3, #4
 800eafa:	f1b9 0f00 	cmp.w	r9, #0
 800eafe:	d020      	beq.n	800eb42 <__multiply+0x142>
 800eb00:	6829      	ldr	r1, [r5, #0]
 800eb02:	f104 0c14 	add.w	ip, r4, #20
 800eb06:	46ae      	mov	lr, r5
 800eb08:	f04f 0a00 	mov.w	sl, #0
 800eb0c:	f8bc b000 	ldrh.w	fp, [ip]
 800eb10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800eb14:	fb09 220b 	mla	r2, r9, fp, r2
 800eb18:	4492      	add	sl, r2
 800eb1a:	b289      	uxth	r1, r1
 800eb1c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800eb20:	f84e 1b04 	str.w	r1, [lr], #4
 800eb24:	f85c 2b04 	ldr.w	r2, [ip], #4
 800eb28:	f8be 1000 	ldrh.w	r1, [lr]
 800eb2c:	0c12      	lsrs	r2, r2, #16
 800eb2e:	fb09 1102 	mla	r1, r9, r2, r1
 800eb32:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800eb36:	4567      	cmp	r7, ip
 800eb38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800eb3c:	d8e6      	bhi.n	800eb0c <__multiply+0x10c>
 800eb3e:	9a01      	ldr	r2, [sp, #4]
 800eb40:	50a9      	str	r1, [r5, r2]
 800eb42:	3504      	adds	r5, #4
 800eb44:	e79a      	b.n	800ea7c <__multiply+0x7c>
 800eb46:	3e01      	subs	r6, #1
 800eb48:	e79c      	b.n	800ea84 <__multiply+0x84>
 800eb4a:	bf00      	nop
 800eb4c:	08011970 	.word	0x08011970
 800eb50:	080119fc 	.word	0x080119fc

0800eb54 <__pow5mult>:
 800eb54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb58:	4615      	mov	r5, r2
 800eb5a:	f012 0203 	ands.w	r2, r2, #3
 800eb5e:	4606      	mov	r6, r0
 800eb60:	460f      	mov	r7, r1
 800eb62:	d007      	beq.n	800eb74 <__pow5mult+0x20>
 800eb64:	4c25      	ldr	r4, [pc, #148]	; (800ebfc <__pow5mult+0xa8>)
 800eb66:	3a01      	subs	r2, #1
 800eb68:	2300      	movs	r3, #0
 800eb6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eb6e:	f7ff fe51 	bl	800e814 <__multadd>
 800eb72:	4607      	mov	r7, r0
 800eb74:	10ad      	asrs	r5, r5, #2
 800eb76:	d03d      	beq.n	800ebf4 <__pow5mult+0xa0>
 800eb78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800eb7a:	b97c      	cbnz	r4, 800eb9c <__pow5mult+0x48>
 800eb7c:	2010      	movs	r0, #16
 800eb7e:	f7ff fdc1 	bl	800e704 <malloc>
 800eb82:	4602      	mov	r2, r0
 800eb84:	6270      	str	r0, [r6, #36]	; 0x24
 800eb86:	b928      	cbnz	r0, 800eb94 <__pow5mult+0x40>
 800eb88:	4b1d      	ldr	r3, [pc, #116]	; (800ec00 <__pow5mult+0xac>)
 800eb8a:	481e      	ldr	r0, [pc, #120]	; (800ec04 <__pow5mult+0xb0>)
 800eb8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800eb90:	f000 fc9c 	bl	800f4cc <__assert_func>
 800eb94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eb98:	6004      	str	r4, [r0, #0]
 800eb9a:	60c4      	str	r4, [r0, #12]
 800eb9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800eba0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eba4:	b94c      	cbnz	r4, 800ebba <__pow5mult+0x66>
 800eba6:	f240 2171 	movw	r1, #625	; 0x271
 800ebaa:	4630      	mov	r0, r6
 800ebac:	f7ff ff12 	bl	800e9d4 <__i2b>
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	f8c8 0008 	str.w	r0, [r8, #8]
 800ebb6:	4604      	mov	r4, r0
 800ebb8:	6003      	str	r3, [r0, #0]
 800ebba:	f04f 0900 	mov.w	r9, #0
 800ebbe:	07eb      	lsls	r3, r5, #31
 800ebc0:	d50a      	bpl.n	800ebd8 <__pow5mult+0x84>
 800ebc2:	4639      	mov	r1, r7
 800ebc4:	4622      	mov	r2, r4
 800ebc6:	4630      	mov	r0, r6
 800ebc8:	f7ff ff1a 	bl	800ea00 <__multiply>
 800ebcc:	4639      	mov	r1, r7
 800ebce:	4680      	mov	r8, r0
 800ebd0:	4630      	mov	r0, r6
 800ebd2:	f7ff fdfd 	bl	800e7d0 <_Bfree>
 800ebd6:	4647      	mov	r7, r8
 800ebd8:	106d      	asrs	r5, r5, #1
 800ebda:	d00b      	beq.n	800ebf4 <__pow5mult+0xa0>
 800ebdc:	6820      	ldr	r0, [r4, #0]
 800ebde:	b938      	cbnz	r0, 800ebf0 <__pow5mult+0x9c>
 800ebe0:	4622      	mov	r2, r4
 800ebe2:	4621      	mov	r1, r4
 800ebe4:	4630      	mov	r0, r6
 800ebe6:	f7ff ff0b 	bl	800ea00 <__multiply>
 800ebea:	6020      	str	r0, [r4, #0]
 800ebec:	f8c0 9000 	str.w	r9, [r0]
 800ebf0:	4604      	mov	r4, r0
 800ebf2:	e7e4      	b.n	800ebbe <__pow5mult+0x6a>
 800ebf4:	4638      	mov	r0, r7
 800ebf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebfa:	bf00      	nop
 800ebfc:	08011b48 	.word	0x08011b48
 800ec00:	080118fe 	.word	0x080118fe
 800ec04:	080119fc 	.word	0x080119fc

0800ec08 <__lshift>:
 800ec08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec0c:	460c      	mov	r4, r1
 800ec0e:	6849      	ldr	r1, [r1, #4]
 800ec10:	6923      	ldr	r3, [r4, #16]
 800ec12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ec16:	68a3      	ldr	r3, [r4, #8]
 800ec18:	4607      	mov	r7, r0
 800ec1a:	4691      	mov	r9, r2
 800ec1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ec20:	f108 0601 	add.w	r6, r8, #1
 800ec24:	42b3      	cmp	r3, r6
 800ec26:	db0b      	blt.n	800ec40 <__lshift+0x38>
 800ec28:	4638      	mov	r0, r7
 800ec2a:	f7ff fd91 	bl	800e750 <_Balloc>
 800ec2e:	4605      	mov	r5, r0
 800ec30:	b948      	cbnz	r0, 800ec46 <__lshift+0x3e>
 800ec32:	4602      	mov	r2, r0
 800ec34:	4b2a      	ldr	r3, [pc, #168]	; (800ece0 <__lshift+0xd8>)
 800ec36:	482b      	ldr	r0, [pc, #172]	; (800ece4 <__lshift+0xdc>)
 800ec38:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ec3c:	f000 fc46 	bl	800f4cc <__assert_func>
 800ec40:	3101      	adds	r1, #1
 800ec42:	005b      	lsls	r3, r3, #1
 800ec44:	e7ee      	b.n	800ec24 <__lshift+0x1c>
 800ec46:	2300      	movs	r3, #0
 800ec48:	f100 0114 	add.w	r1, r0, #20
 800ec4c:	f100 0210 	add.w	r2, r0, #16
 800ec50:	4618      	mov	r0, r3
 800ec52:	4553      	cmp	r3, sl
 800ec54:	db37      	blt.n	800ecc6 <__lshift+0xbe>
 800ec56:	6920      	ldr	r0, [r4, #16]
 800ec58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ec5c:	f104 0314 	add.w	r3, r4, #20
 800ec60:	f019 091f 	ands.w	r9, r9, #31
 800ec64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ec68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ec6c:	d02f      	beq.n	800ecce <__lshift+0xc6>
 800ec6e:	f1c9 0e20 	rsb	lr, r9, #32
 800ec72:	468a      	mov	sl, r1
 800ec74:	f04f 0c00 	mov.w	ip, #0
 800ec78:	681a      	ldr	r2, [r3, #0]
 800ec7a:	fa02 f209 	lsl.w	r2, r2, r9
 800ec7e:	ea42 020c 	orr.w	r2, r2, ip
 800ec82:	f84a 2b04 	str.w	r2, [sl], #4
 800ec86:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec8a:	4298      	cmp	r0, r3
 800ec8c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ec90:	d8f2      	bhi.n	800ec78 <__lshift+0x70>
 800ec92:	1b03      	subs	r3, r0, r4
 800ec94:	3b15      	subs	r3, #21
 800ec96:	f023 0303 	bic.w	r3, r3, #3
 800ec9a:	3304      	adds	r3, #4
 800ec9c:	f104 0215 	add.w	r2, r4, #21
 800eca0:	4290      	cmp	r0, r2
 800eca2:	bf38      	it	cc
 800eca4:	2304      	movcc	r3, #4
 800eca6:	f841 c003 	str.w	ip, [r1, r3]
 800ecaa:	f1bc 0f00 	cmp.w	ip, #0
 800ecae:	d001      	beq.n	800ecb4 <__lshift+0xac>
 800ecb0:	f108 0602 	add.w	r6, r8, #2
 800ecb4:	3e01      	subs	r6, #1
 800ecb6:	4638      	mov	r0, r7
 800ecb8:	612e      	str	r6, [r5, #16]
 800ecba:	4621      	mov	r1, r4
 800ecbc:	f7ff fd88 	bl	800e7d0 <_Bfree>
 800ecc0:	4628      	mov	r0, r5
 800ecc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecc6:	f842 0f04 	str.w	r0, [r2, #4]!
 800ecca:	3301      	adds	r3, #1
 800eccc:	e7c1      	b.n	800ec52 <__lshift+0x4a>
 800ecce:	3904      	subs	r1, #4
 800ecd0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecd4:	f841 2f04 	str.w	r2, [r1, #4]!
 800ecd8:	4298      	cmp	r0, r3
 800ecda:	d8f9      	bhi.n	800ecd0 <__lshift+0xc8>
 800ecdc:	e7ea      	b.n	800ecb4 <__lshift+0xac>
 800ecde:	bf00      	nop
 800ece0:	08011970 	.word	0x08011970
 800ece4:	080119fc 	.word	0x080119fc

0800ece8 <__mcmp>:
 800ece8:	b530      	push	{r4, r5, lr}
 800ecea:	6902      	ldr	r2, [r0, #16]
 800ecec:	690c      	ldr	r4, [r1, #16]
 800ecee:	1b12      	subs	r2, r2, r4
 800ecf0:	d10e      	bne.n	800ed10 <__mcmp+0x28>
 800ecf2:	f100 0314 	add.w	r3, r0, #20
 800ecf6:	3114      	adds	r1, #20
 800ecf8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ecfc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ed00:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ed04:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ed08:	42a5      	cmp	r5, r4
 800ed0a:	d003      	beq.n	800ed14 <__mcmp+0x2c>
 800ed0c:	d305      	bcc.n	800ed1a <__mcmp+0x32>
 800ed0e:	2201      	movs	r2, #1
 800ed10:	4610      	mov	r0, r2
 800ed12:	bd30      	pop	{r4, r5, pc}
 800ed14:	4283      	cmp	r3, r0
 800ed16:	d3f3      	bcc.n	800ed00 <__mcmp+0x18>
 800ed18:	e7fa      	b.n	800ed10 <__mcmp+0x28>
 800ed1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ed1e:	e7f7      	b.n	800ed10 <__mcmp+0x28>

0800ed20 <__mdiff>:
 800ed20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed24:	460c      	mov	r4, r1
 800ed26:	4606      	mov	r6, r0
 800ed28:	4611      	mov	r1, r2
 800ed2a:	4620      	mov	r0, r4
 800ed2c:	4690      	mov	r8, r2
 800ed2e:	f7ff ffdb 	bl	800ece8 <__mcmp>
 800ed32:	1e05      	subs	r5, r0, #0
 800ed34:	d110      	bne.n	800ed58 <__mdiff+0x38>
 800ed36:	4629      	mov	r1, r5
 800ed38:	4630      	mov	r0, r6
 800ed3a:	f7ff fd09 	bl	800e750 <_Balloc>
 800ed3e:	b930      	cbnz	r0, 800ed4e <__mdiff+0x2e>
 800ed40:	4b3a      	ldr	r3, [pc, #232]	; (800ee2c <__mdiff+0x10c>)
 800ed42:	4602      	mov	r2, r0
 800ed44:	f240 2132 	movw	r1, #562	; 0x232
 800ed48:	4839      	ldr	r0, [pc, #228]	; (800ee30 <__mdiff+0x110>)
 800ed4a:	f000 fbbf 	bl	800f4cc <__assert_func>
 800ed4e:	2301      	movs	r3, #1
 800ed50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ed54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed58:	bfa4      	itt	ge
 800ed5a:	4643      	movge	r3, r8
 800ed5c:	46a0      	movge	r8, r4
 800ed5e:	4630      	mov	r0, r6
 800ed60:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ed64:	bfa6      	itte	ge
 800ed66:	461c      	movge	r4, r3
 800ed68:	2500      	movge	r5, #0
 800ed6a:	2501      	movlt	r5, #1
 800ed6c:	f7ff fcf0 	bl	800e750 <_Balloc>
 800ed70:	b920      	cbnz	r0, 800ed7c <__mdiff+0x5c>
 800ed72:	4b2e      	ldr	r3, [pc, #184]	; (800ee2c <__mdiff+0x10c>)
 800ed74:	4602      	mov	r2, r0
 800ed76:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ed7a:	e7e5      	b.n	800ed48 <__mdiff+0x28>
 800ed7c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ed80:	6926      	ldr	r6, [r4, #16]
 800ed82:	60c5      	str	r5, [r0, #12]
 800ed84:	f104 0914 	add.w	r9, r4, #20
 800ed88:	f108 0514 	add.w	r5, r8, #20
 800ed8c:	f100 0e14 	add.w	lr, r0, #20
 800ed90:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ed94:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ed98:	f108 0210 	add.w	r2, r8, #16
 800ed9c:	46f2      	mov	sl, lr
 800ed9e:	2100      	movs	r1, #0
 800eda0:	f859 3b04 	ldr.w	r3, [r9], #4
 800eda4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800eda8:	fa1f f883 	uxth.w	r8, r3
 800edac:	fa11 f18b 	uxtah	r1, r1, fp
 800edb0:	0c1b      	lsrs	r3, r3, #16
 800edb2:	eba1 0808 	sub.w	r8, r1, r8
 800edb6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800edba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800edbe:	fa1f f888 	uxth.w	r8, r8
 800edc2:	1419      	asrs	r1, r3, #16
 800edc4:	454e      	cmp	r6, r9
 800edc6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800edca:	f84a 3b04 	str.w	r3, [sl], #4
 800edce:	d8e7      	bhi.n	800eda0 <__mdiff+0x80>
 800edd0:	1b33      	subs	r3, r6, r4
 800edd2:	3b15      	subs	r3, #21
 800edd4:	f023 0303 	bic.w	r3, r3, #3
 800edd8:	3304      	adds	r3, #4
 800edda:	3415      	adds	r4, #21
 800eddc:	42a6      	cmp	r6, r4
 800edde:	bf38      	it	cc
 800ede0:	2304      	movcc	r3, #4
 800ede2:	441d      	add	r5, r3
 800ede4:	4473      	add	r3, lr
 800ede6:	469e      	mov	lr, r3
 800ede8:	462e      	mov	r6, r5
 800edea:	4566      	cmp	r6, ip
 800edec:	d30e      	bcc.n	800ee0c <__mdiff+0xec>
 800edee:	f10c 0203 	add.w	r2, ip, #3
 800edf2:	1b52      	subs	r2, r2, r5
 800edf4:	f022 0203 	bic.w	r2, r2, #3
 800edf8:	3d03      	subs	r5, #3
 800edfa:	45ac      	cmp	ip, r5
 800edfc:	bf38      	it	cc
 800edfe:	2200      	movcc	r2, #0
 800ee00:	441a      	add	r2, r3
 800ee02:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ee06:	b17b      	cbz	r3, 800ee28 <__mdiff+0x108>
 800ee08:	6107      	str	r7, [r0, #16]
 800ee0a:	e7a3      	b.n	800ed54 <__mdiff+0x34>
 800ee0c:	f856 8b04 	ldr.w	r8, [r6], #4
 800ee10:	fa11 f288 	uxtah	r2, r1, r8
 800ee14:	1414      	asrs	r4, r2, #16
 800ee16:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ee1a:	b292      	uxth	r2, r2
 800ee1c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ee20:	f84e 2b04 	str.w	r2, [lr], #4
 800ee24:	1421      	asrs	r1, r4, #16
 800ee26:	e7e0      	b.n	800edea <__mdiff+0xca>
 800ee28:	3f01      	subs	r7, #1
 800ee2a:	e7ea      	b.n	800ee02 <__mdiff+0xe2>
 800ee2c:	08011970 	.word	0x08011970
 800ee30:	080119fc 	.word	0x080119fc

0800ee34 <__ulp>:
 800ee34:	b082      	sub	sp, #8
 800ee36:	ed8d 0b00 	vstr	d0, [sp]
 800ee3a:	9b01      	ldr	r3, [sp, #4]
 800ee3c:	4912      	ldr	r1, [pc, #72]	; (800ee88 <__ulp+0x54>)
 800ee3e:	4019      	ands	r1, r3
 800ee40:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ee44:	2900      	cmp	r1, #0
 800ee46:	dd05      	ble.n	800ee54 <__ulp+0x20>
 800ee48:	2200      	movs	r2, #0
 800ee4a:	460b      	mov	r3, r1
 800ee4c:	ec43 2b10 	vmov	d0, r2, r3
 800ee50:	b002      	add	sp, #8
 800ee52:	4770      	bx	lr
 800ee54:	4249      	negs	r1, r1
 800ee56:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ee5a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ee5e:	f04f 0200 	mov.w	r2, #0
 800ee62:	f04f 0300 	mov.w	r3, #0
 800ee66:	da04      	bge.n	800ee72 <__ulp+0x3e>
 800ee68:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ee6c:	fa41 f300 	asr.w	r3, r1, r0
 800ee70:	e7ec      	b.n	800ee4c <__ulp+0x18>
 800ee72:	f1a0 0114 	sub.w	r1, r0, #20
 800ee76:	291e      	cmp	r1, #30
 800ee78:	bfda      	itte	le
 800ee7a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ee7e:	fa20 f101 	lsrle.w	r1, r0, r1
 800ee82:	2101      	movgt	r1, #1
 800ee84:	460a      	mov	r2, r1
 800ee86:	e7e1      	b.n	800ee4c <__ulp+0x18>
 800ee88:	7ff00000 	.word	0x7ff00000

0800ee8c <__b2d>:
 800ee8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee8e:	6905      	ldr	r5, [r0, #16]
 800ee90:	f100 0714 	add.w	r7, r0, #20
 800ee94:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ee98:	1f2e      	subs	r6, r5, #4
 800ee9a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ee9e:	4620      	mov	r0, r4
 800eea0:	f7ff fd48 	bl	800e934 <__hi0bits>
 800eea4:	f1c0 0320 	rsb	r3, r0, #32
 800eea8:	280a      	cmp	r0, #10
 800eeaa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ef28 <__b2d+0x9c>
 800eeae:	600b      	str	r3, [r1, #0]
 800eeb0:	dc14      	bgt.n	800eedc <__b2d+0x50>
 800eeb2:	f1c0 0e0b 	rsb	lr, r0, #11
 800eeb6:	fa24 f10e 	lsr.w	r1, r4, lr
 800eeba:	42b7      	cmp	r7, r6
 800eebc:	ea41 030c 	orr.w	r3, r1, ip
 800eec0:	bf34      	ite	cc
 800eec2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800eec6:	2100      	movcs	r1, #0
 800eec8:	3015      	adds	r0, #21
 800eeca:	fa04 f000 	lsl.w	r0, r4, r0
 800eece:	fa21 f10e 	lsr.w	r1, r1, lr
 800eed2:	ea40 0201 	orr.w	r2, r0, r1
 800eed6:	ec43 2b10 	vmov	d0, r2, r3
 800eeda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eedc:	42b7      	cmp	r7, r6
 800eede:	bf3a      	itte	cc
 800eee0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800eee4:	f1a5 0608 	subcc.w	r6, r5, #8
 800eee8:	2100      	movcs	r1, #0
 800eeea:	380b      	subs	r0, #11
 800eeec:	d017      	beq.n	800ef1e <__b2d+0x92>
 800eeee:	f1c0 0c20 	rsb	ip, r0, #32
 800eef2:	fa04 f500 	lsl.w	r5, r4, r0
 800eef6:	42be      	cmp	r6, r7
 800eef8:	fa21 f40c 	lsr.w	r4, r1, ip
 800eefc:	ea45 0504 	orr.w	r5, r5, r4
 800ef00:	bf8c      	ite	hi
 800ef02:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ef06:	2400      	movls	r4, #0
 800ef08:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ef0c:	fa01 f000 	lsl.w	r0, r1, r0
 800ef10:	fa24 f40c 	lsr.w	r4, r4, ip
 800ef14:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ef18:	ea40 0204 	orr.w	r2, r0, r4
 800ef1c:	e7db      	b.n	800eed6 <__b2d+0x4a>
 800ef1e:	ea44 030c 	orr.w	r3, r4, ip
 800ef22:	460a      	mov	r2, r1
 800ef24:	e7d7      	b.n	800eed6 <__b2d+0x4a>
 800ef26:	bf00      	nop
 800ef28:	3ff00000 	.word	0x3ff00000

0800ef2c <__d2b>:
 800ef2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ef30:	4689      	mov	r9, r1
 800ef32:	2101      	movs	r1, #1
 800ef34:	ec57 6b10 	vmov	r6, r7, d0
 800ef38:	4690      	mov	r8, r2
 800ef3a:	f7ff fc09 	bl	800e750 <_Balloc>
 800ef3e:	4604      	mov	r4, r0
 800ef40:	b930      	cbnz	r0, 800ef50 <__d2b+0x24>
 800ef42:	4602      	mov	r2, r0
 800ef44:	4b25      	ldr	r3, [pc, #148]	; (800efdc <__d2b+0xb0>)
 800ef46:	4826      	ldr	r0, [pc, #152]	; (800efe0 <__d2b+0xb4>)
 800ef48:	f240 310a 	movw	r1, #778	; 0x30a
 800ef4c:	f000 fabe 	bl	800f4cc <__assert_func>
 800ef50:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ef54:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ef58:	bb35      	cbnz	r5, 800efa8 <__d2b+0x7c>
 800ef5a:	2e00      	cmp	r6, #0
 800ef5c:	9301      	str	r3, [sp, #4]
 800ef5e:	d028      	beq.n	800efb2 <__d2b+0x86>
 800ef60:	4668      	mov	r0, sp
 800ef62:	9600      	str	r6, [sp, #0]
 800ef64:	f7ff fd06 	bl	800e974 <__lo0bits>
 800ef68:	9900      	ldr	r1, [sp, #0]
 800ef6a:	b300      	cbz	r0, 800efae <__d2b+0x82>
 800ef6c:	9a01      	ldr	r2, [sp, #4]
 800ef6e:	f1c0 0320 	rsb	r3, r0, #32
 800ef72:	fa02 f303 	lsl.w	r3, r2, r3
 800ef76:	430b      	orrs	r3, r1
 800ef78:	40c2      	lsrs	r2, r0
 800ef7a:	6163      	str	r3, [r4, #20]
 800ef7c:	9201      	str	r2, [sp, #4]
 800ef7e:	9b01      	ldr	r3, [sp, #4]
 800ef80:	61a3      	str	r3, [r4, #24]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	bf14      	ite	ne
 800ef86:	2202      	movne	r2, #2
 800ef88:	2201      	moveq	r2, #1
 800ef8a:	6122      	str	r2, [r4, #16]
 800ef8c:	b1d5      	cbz	r5, 800efc4 <__d2b+0x98>
 800ef8e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ef92:	4405      	add	r5, r0
 800ef94:	f8c9 5000 	str.w	r5, [r9]
 800ef98:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ef9c:	f8c8 0000 	str.w	r0, [r8]
 800efa0:	4620      	mov	r0, r4
 800efa2:	b003      	add	sp, #12
 800efa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800efac:	e7d5      	b.n	800ef5a <__d2b+0x2e>
 800efae:	6161      	str	r1, [r4, #20]
 800efb0:	e7e5      	b.n	800ef7e <__d2b+0x52>
 800efb2:	a801      	add	r0, sp, #4
 800efb4:	f7ff fcde 	bl	800e974 <__lo0bits>
 800efb8:	9b01      	ldr	r3, [sp, #4]
 800efba:	6163      	str	r3, [r4, #20]
 800efbc:	2201      	movs	r2, #1
 800efbe:	6122      	str	r2, [r4, #16]
 800efc0:	3020      	adds	r0, #32
 800efc2:	e7e3      	b.n	800ef8c <__d2b+0x60>
 800efc4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800efc8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800efcc:	f8c9 0000 	str.w	r0, [r9]
 800efd0:	6918      	ldr	r0, [r3, #16]
 800efd2:	f7ff fcaf 	bl	800e934 <__hi0bits>
 800efd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800efda:	e7df      	b.n	800ef9c <__d2b+0x70>
 800efdc:	08011970 	.word	0x08011970
 800efe0:	080119fc 	.word	0x080119fc

0800efe4 <__ratio>:
 800efe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efe8:	4688      	mov	r8, r1
 800efea:	4669      	mov	r1, sp
 800efec:	4681      	mov	r9, r0
 800efee:	f7ff ff4d 	bl	800ee8c <__b2d>
 800eff2:	a901      	add	r1, sp, #4
 800eff4:	4640      	mov	r0, r8
 800eff6:	ec55 4b10 	vmov	r4, r5, d0
 800effa:	f7ff ff47 	bl	800ee8c <__b2d>
 800effe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f002:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f006:	eba3 0c02 	sub.w	ip, r3, r2
 800f00a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f00e:	1a9b      	subs	r3, r3, r2
 800f010:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f014:	ec51 0b10 	vmov	r0, r1, d0
 800f018:	2b00      	cmp	r3, #0
 800f01a:	bfd6      	itet	le
 800f01c:	460a      	movle	r2, r1
 800f01e:	462a      	movgt	r2, r5
 800f020:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f024:	468b      	mov	fp, r1
 800f026:	462f      	mov	r7, r5
 800f028:	bfd4      	ite	le
 800f02a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f02e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f032:	4620      	mov	r0, r4
 800f034:	ee10 2a10 	vmov	r2, s0
 800f038:	465b      	mov	r3, fp
 800f03a:	4639      	mov	r1, r7
 800f03c:	f7f1 fc16 	bl	800086c <__aeabi_ddiv>
 800f040:	ec41 0b10 	vmov	d0, r0, r1
 800f044:	b003      	add	sp, #12
 800f046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f04a <__copybits>:
 800f04a:	3901      	subs	r1, #1
 800f04c:	b570      	push	{r4, r5, r6, lr}
 800f04e:	1149      	asrs	r1, r1, #5
 800f050:	6914      	ldr	r4, [r2, #16]
 800f052:	3101      	adds	r1, #1
 800f054:	f102 0314 	add.w	r3, r2, #20
 800f058:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f05c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f060:	1f05      	subs	r5, r0, #4
 800f062:	42a3      	cmp	r3, r4
 800f064:	d30c      	bcc.n	800f080 <__copybits+0x36>
 800f066:	1aa3      	subs	r3, r4, r2
 800f068:	3b11      	subs	r3, #17
 800f06a:	f023 0303 	bic.w	r3, r3, #3
 800f06e:	3211      	adds	r2, #17
 800f070:	42a2      	cmp	r2, r4
 800f072:	bf88      	it	hi
 800f074:	2300      	movhi	r3, #0
 800f076:	4418      	add	r0, r3
 800f078:	2300      	movs	r3, #0
 800f07a:	4288      	cmp	r0, r1
 800f07c:	d305      	bcc.n	800f08a <__copybits+0x40>
 800f07e:	bd70      	pop	{r4, r5, r6, pc}
 800f080:	f853 6b04 	ldr.w	r6, [r3], #4
 800f084:	f845 6f04 	str.w	r6, [r5, #4]!
 800f088:	e7eb      	b.n	800f062 <__copybits+0x18>
 800f08a:	f840 3b04 	str.w	r3, [r0], #4
 800f08e:	e7f4      	b.n	800f07a <__copybits+0x30>

0800f090 <__any_on>:
 800f090:	f100 0214 	add.w	r2, r0, #20
 800f094:	6900      	ldr	r0, [r0, #16]
 800f096:	114b      	asrs	r3, r1, #5
 800f098:	4298      	cmp	r0, r3
 800f09a:	b510      	push	{r4, lr}
 800f09c:	db11      	blt.n	800f0c2 <__any_on+0x32>
 800f09e:	dd0a      	ble.n	800f0b6 <__any_on+0x26>
 800f0a0:	f011 011f 	ands.w	r1, r1, #31
 800f0a4:	d007      	beq.n	800f0b6 <__any_on+0x26>
 800f0a6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f0aa:	fa24 f001 	lsr.w	r0, r4, r1
 800f0ae:	fa00 f101 	lsl.w	r1, r0, r1
 800f0b2:	428c      	cmp	r4, r1
 800f0b4:	d10b      	bne.n	800f0ce <__any_on+0x3e>
 800f0b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	d803      	bhi.n	800f0c6 <__any_on+0x36>
 800f0be:	2000      	movs	r0, #0
 800f0c0:	bd10      	pop	{r4, pc}
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	e7f7      	b.n	800f0b6 <__any_on+0x26>
 800f0c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f0ca:	2900      	cmp	r1, #0
 800f0cc:	d0f5      	beq.n	800f0ba <__any_on+0x2a>
 800f0ce:	2001      	movs	r0, #1
 800f0d0:	e7f6      	b.n	800f0c0 <__any_on+0x30>

0800f0d2 <_calloc_r>:
 800f0d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f0d4:	fba1 2402 	umull	r2, r4, r1, r2
 800f0d8:	b94c      	cbnz	r4, 800f0ee <_calloc_r+0x1c>
 800f0da:	4611      	mov	r1, r2
 800f0dc:	9201      	str	r2, [sp, #4]
 800f0de:	f7fc f9ab 	bl	800b438 <_malloc_r>
 800f0e2:	9a01      	ldr	r2, [sp, #4]
 800f0e4:	4605      	mov	r5, r0
 800f0e6:	b930      	cbnz	r0, 800f0f6 <_calloc_r+0x24>
 800f0e8:	4628      	mov	r0, r5
 800f0ea:	b003      	add	sp, #12
 800f0ec:	bd30      	pop	{r4, r5, pc}
 800f0ee:	220c      	movs	r2, #12
 800f0f0:	6002      	str	r2, [r0, #0]
 800f0f2:	2500      	movs	r5, #0
 800f0f4:	e7f8      	b.n	800f0e8 <_calloc_r+0x16>
 800f0f6:	4621      	mov	r1, r4
 800f0f8:	f7fc f975 	bl	800b3e6 <memset>
 800f0fc:	e7f4      	b.n	800f0e8 <_calloc_r+0x16>
	...

0800f100 <_free_r>:
 800f100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f102:	2900      	cmp	r1, #0
 800f104:	d044      	beq.n	800f190 <_free_r+0x90>
 800f106:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f10a:	9001      	str	r0, [sp, #4]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	f1a1 0404 	sub.w	r4, r1, #4
 800f112:	bfb8      	it	lt
 800f114:	18e4      	addlt	r4, r4, r3
 800f116:	f7ff fb0f 	bl	800e738 <__malloc_lock>
 800f11a:	4a1e      	ldr	r2, [pc, #120]	; (800f194 <_free_r+0x94>)
 800f11c:	9801      	ldr	r0, [sp, #4]
 800f11e:	6813      	ldr	r3, [r2, #0]
 800f120:	b933      	cbnz	r3, 800f130 <_free_r+0x30>
 800f122:	6063      	str	r3, [r4, #4]
 800f124:	6014      	str	r4, [r2, #0]
 800f126:	b003      	add	sp, #12
 800f128:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f12c:	f7ff bb0a 	b.w	800e744 <__malloc_unlock>
 800f130:	42a3      	cmp	r3, r4
 800f132:	d908      	bls.n	800f146 <_free_r+0x46>
 800f134:	6825      	ldr	r5, [r4, #0]
 800f136:	1961      	adds	r1, r4, r5
 800f138:	428b      	cmp	r3, r1
 800f13a:	bf01      	itttt	eq
 800f13c:	6819      	ldreq	r1, [r3, #0]
 800f13e:	685b      	ldreq	r3, [r3, #4]
 800f140:	1949      	addeq	r1, r1, r5
 800f142:	6021      	streq	r1, [r4, #0]
 800f144:	e7ed      	b.n	800f122 <_free_r+0x22>
 800f146:	461a      	mov	r2, r3
 800f148:	685b      	ldr	r3, [r3, #4]
 800f14a:	b10b      	cbz	r3, 800f150 <_free_r+0x50>
 800f14c:	42a3      	cmp	r3, r4
 800f14e:	d9fa      	bls.n	800f146 <_free_r+0x46>
 800f150:	6811      	ldr	r1, [r2, #0]
 800f152:	1855      	adds	r5, r2, r1
 800f154:	42a5      	cmp	r5, r4
 800f156:	d10b      	bne.n	800f170 <_free_r+0x70>
 800f158:	6824      	ldr	r4, [r4, #0]
 800f15a:	4421      	add	r1, r4
 800f15c:	1854      	adds	r4, r2, r1
 800f15e:	42a3      	cmp	r3, r4
 800f160:	6011      	str	r1, [r2, #0]
 800f162:	d1e0      	bne.n	800f126 <_free_r+0x26>
 800f164:	681c      	ldr	r4, [r3, #0]
 800f166:	685b      	ldr	r3, [r3, #4]
 800f168:	6053      	str	r3, [r2, #4]
 800f16a:	4421      	add	r1, r4
 800f16c:	6011      	str	r1, [r2, #0]
 800f16e:	e7da      	b.n	800f126 <_free_r+0x26>
 800f170:	d902      	bls.n	800f178 <_free_r+0x78>
 800f172:	230c      	movs	r3, #12
 800f174:	6003      	str	r3, [r0, #0]
 800f176:	e7d6      	b.n	800f126 <_free_r+0x26>
 800f178:	6825      	ldr	r5, [r4, #0]
 800f17a:	1961      	adds	r1, r4, r5
 800f17c:	428b      	cmp	r3, r1
 800f17e:	bf04      	itt	eq
 800f180:	6819      	ldreq	r1, [r3, #0]
 800f182:	685b      	ldreq	r3, [r3, #4]
 800f184:	6063      	str	r3, [r4, #4]
 800f186:	bf04      	itt	eq
 800f188:	1949      	addeq	r1, r1, r5
 800f18a:	6021      	streq	r1, [r4, #0]
 800f18c:	6054      	str	r4, [r2, #4]
 800f18e:	e7ca      	b.n	800f126 <_free_r+0x26>
 800f190:	b003      	add	sp, #12
 800f192:	bd30      	pop	{r4, r5, pc}
 800f194:	20008c58 	.word	0x20008c58

0800f198 <__ssputs_r>:
 800f198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f19c:	688e      	ldr	r6, [r1, #8]
 800f19e:	429e      	cmp	r6, r3
 800f1a0:	4682      	mov	sl, r0
 800f1a2:	460c      	mov	r4, r1
 800f1a4:	4690      	mov	r8, r2
 800f1a6:	461f      	mov	r7, r3
 800f1a8:	d838      	bhi.n	800f21c <__ssputs_r+0x84>
 800f1aa:	898a      	ldrh	r2, [r1, #12]
 800f1ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f1b0:	d032      	beq.n	800f218 <__ssputs_r+0x80>
 800f1b2:	6825      	ldr	r5, [r4, #0]
 800f1b4:	6909      	ldr	r1, [r1, #16]
 800f1b6:	eba5 0901 	sub.w	r9, r5, r1
 800f1ba:	6965      	ldr	r5, [r4, #20]
 800f1bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f1c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f1c4:	3301      	adds	r3, #1
 800f1c6:	444b      	add	r3, r9
 800f1c8:	106d      	asrs	r5, r5, #1
 800f1ca:	429d      	cmp	r5, r3
 800f1cc:	bf38      	it	cc
 800f1ce:	461d      	movcc	r5, r3
 800f1d0:	0553      	lsls	r3, r2, #21
 800f1d2:	d531      	bpl.n	800f238 <__ssputs_r+0xa0>
 800f1d4:	4629      	mov	r1, r5
 800f1d6:	f7fc f92f 	bl	800b438 <_malloc_r>
 800f1da:	4606      	mov	r6, r0
 800f1dc:	b950      	cbnz	r0, 800f1f4 <__ssputs_r+0x5c>
 800f1de:	230c      	movs	r3, #12
 800f1e0:	f8ca 3000 	str.w	r3, [sl]
 800f1e4:	89a3      	ldrh	r3, [r4, #12]
 800f1e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1ea:	81a3      	strh	r3, [r4, #12]
 800f1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f1f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1f4:	6921      	ldr	r1, [r4, #16]
 800f1f6:	464a      	mov	r2, r9
 800f1f8:	f7fc f8e7 	bl	800b3ca <memcpy>
 800f1fc:	89a3      	ldrh	r3, [r4, #12]
 800f1fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f206:	81a3      	strh	r3, [r4, #12]
 800f208:	6126      	str	r6, [r4, #16]
 800f20a:	6165      	str	r5, [r4, #20]
 800f20c:	444e      	add	r6, r9
 800f20e:	eba5 0509 	sub.w	r5, r5, r9
 800f212:	6026      	str	r6, [r4, #0]
 800f214:	60a5      	str	r5, [r4, #8]
 800f216:	463e      	mov	r6, r7
 800f218:	42be      	cmp	r6, r7
 800f21a:	d900      	bls.n	800f21e <__ssputs_r+0x86>
 800f21c:	463e      	mov	r6, r7
 800f21e:	6820      	ldr	r0, [r4, #0]
 800f220:	4632      	mov	r2, r6
 800f222:	4641      	mov	r1, r8
 800f224:	f000 f982 	bl	800f52c <memmove>
 800f228:	68a3      	ldr	r3, [r4, #8]
 800f22a:	1b9b      	subs	r3, r3, r6
 800f22c:	60a3      	str	r3, [r4, #8]
 800f22e:	6823      	ldr	r3, [r4, #0]
 800f230:	4433      	add	r3, r6
 800f232:	6023      	str	r3, [r4, #0]
 800f234:	2000      	movs	r0, #0
 800f236:	e7db      	b.n	800f1f0 <__ssputs_r+0x58>
 800f238:	462a      	mov	r2, r5
 800f23a:	f000 f991 	bl	800f560 <_realloc_r>
 800f23e:	4606      	mov	r6, r0
 800f240:	2800      	cmp	r0, #0
 800f242:	d1e1      	bne.n	800f208 <__ssputs_r+0x70>
 800f244:	6921      	ldr	r1, [r4, #16]
 800f246:	4650      	mov	r0, sl
 800f248:	f7ff ff5a 	bl	800f100 <_free_r>
 800f24c:	e7c7      	b.n	800f1de <__ssputs_r+0x46>
	...

0800f250 <_svfiprintf_r>:
 800f250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f254:	4698      	mov	r8, r3
 800f256:	898b      	ldrh	r3, [r1, #12]
 800f258:	061b      	lsls	r3, r3, #24
 800f25a:	b09d      	sub	sp, #116	; 0x74
 800f25c:	4607      	mov	r7, r0
 800f25e:	460d      	mov	r5, r1
 800f260:	4614      	mov	r4, r2
 800f262:	d50e      	bpl.n	800f282 <_svfiprintf_r+0x32>
 800f264:	690b      	ldr	r3, [r1, #16]
 800f266:	b963      	cbnz	r3, 800f282 <_svfiprintf_r+0x32>
 800f268:	2140      	movs	r1, #64	; 0x40
 800f26a:	f7fc f8e5 	bl	800b438 <_malloc_r>
 800f26e:	6028      	str	r0, [r5, #0]
 800f270:	6128      	str	r0, [r5, #16]
 800f272:	b920      	cbnz	r0, 800f27e <_svfiprintf_r+0x2e>
 800f274:	230c      	movs	r3, #12
 800f276:	603b      	str	r3, [r7, #0]
 800f278:	f04f 30ff 	mov.w	r0, #4294967295
 800f27c:	e0d1      	b.n	800f422 <_svfiprintf_r+0x1d2>
 800f27e:	2340      	movs	r3, #64	; 0x40
 800f280:	616b      	str	r3, [r5, #20]
 800f282:	2300      	movs	r3, #0
 800f284:	9309      	str	r3, [sp, #36]	; 0x24
 800f286:	2320      	movs	r3, #32
 800f288:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f28c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f290:	2330      	movs	r3, #48	; 0x30
 800f292:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f43c <_svfiprintf_r+0x1ec>
 800f296:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f29a:	f04f 0901 	mov.w	r9, #1
 800f29e:	4623      	mov	r3, r4
 800f2a0:	469a      	mov	sl, r3
 800f2a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2a6:	b10a      	cbz	r2, 800f2ac <_svfiprintf_r+0x5c>
 800f2a8:	2a25      	cmp	r2, #37	; 0x25
 800f2aa:	d1f9      	bne.n	800f2a0 <_svfiprintf_r+0x50>
 800f2ac:	ebba 0b04 	subs.w	fp, sl, r4
 800f2b0:	d00b      	beq.n	800f2ca <_svfiprintf_r+0x7a>
 800f2b2:	465b      	mov	r3, fp
 800f2b4:	4622      	mov	r2, r4
 800f2b6:	4629      	mov	r1, r5
 800f2b8:	4638      	mov	r0, r7
 800f2ba:	f7ff ff6d 	bl	800f198 <__ssputs_r>
 800f2be:	3001      	adds	r0, #1
 800f2c0:	f000 80aa 	beq.w	800f418 <_svfiprintf_r+0x1c8>
 800f2c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2c6:	445a      	add	r2, fp
 800f2c8:	9209      	str	r2, [sp, #36]	; 0x24
 800f2ca:	f89a 3000 	ldrb.w	r3, [sl]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	f000 80a2 	beq.w	800f418 <_svfiprintf_r+0x1c8>
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	f04f 32ff 	mov.w	r2, #4294967295
 800f2da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2de:	f10a 0a01 	add.w	sl, sl, #1
 800f2e2:	9304      	str	r3, [sp, #16]
 800f2e4:	9307      	str	r3, [sp, #28]
 800f2e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f2ea:	931a      	str	r3, [sp, #104]	; 0x68
 800f2ec:	4654      	mov	r4, sl
 800f2ee:	2205      	movs	r2, #5
 800f2f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2f4:	4851      	ldr	r0, [pc, #324]	; (800f43c <_svfiprintf_r+0x1ec>)
 800f2f6:	f7f0 ff83 	bl	8000200 <memchr>
 800f2fa:	9a04      	ldr	r2, [sp, #16]
 800f2fc:	b9d8      	cbnz	r0, 800f336 <_svfiprintf_r+0xe6>
 800f2fe:	06d0      	lsls	r0, r2, #27
 800f300:	bf44      	itt	mi
 800f302:	2320      	movmi	r3, #32
 800f304:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f308:	0711      	lsls	r1, r2, #28
 800f30a:	bf44      	itt	mi
 800f30c:	232b      	movmi	r3, #43	; 0x2b
 800f30e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f312:	f89a 3000 	ldrb.w	r3, [sl]
 800f316:	2b2a      	cmp	r3, #42	; 0x2a
 800f318:	d015      	beq.n	800f346 <_svfiprintf_r+0xf6>
 800f31a:	9a07      	ldr	r2, [sp, #28]
 800f31c:	4654      	mov	r4, sl
 800f31e:	2000      	movs	r0, #0
 800f320:	f04f 0c0a 	mov.w	ip, #10
 800f324:	4621      	mov	r1, r4
 800f326:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f32a:	3b30      	subs	r3, #48	; 0x30
 800f32c:	2b09      	cmp	r3, #9
 800f32e:	d94e      	bls.n	800f3ce <_svfiprintf_r+0x17e>
 800f330:	b1b0      	cbz	r0, 800f360 <_svfiprintf_r+0x110>
 800f332:	9207      	str	r2, [sp, #28]
 800f334:	e014      	b.n	800f360 <_svfiprintf_r+0x110>
 800f336:	eba0 0308 	sub.w	r3, r0, r8
 800f33a:	fa09 f303 	lsl.w	r3, r9, r3
 800f33e:	4313      	orrs	r3, r2
 800f340:	9304      	str	r3, [sp, #16]
 800f342:	46a2      	mov	sl, r4
 800f344:	e7d2      	b.n	800f2ec <_svfiprintf_r+0x9c>
 800f346:	9b03      	ldr	r3, [sp, #12]
 800f348:	1d19      	adds	r1, r3, #4
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	9103      	str	r1, [sp, #12]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	bfbb      	ittet	lt
 800f352:	425b      	neglt	r3, r3
 800f354:	f042 0202 	orrlt.w	r2, r2, #2
 800f358:	9307      	strge	r3, [sp, #28]
 800f35a:	9307      	strlt	r3, [sp, #28]
 800f35c:	bfb8      	it	lt
 800f35e:	9204      	strlt	r2, [sp, #16]
 800f360:	7823      	ldrb	r3, [r4, #0]
 800f362:	2b2e      	cmp	r3, #46	; 0x2e
 800f364:	d10c      	bne.n	800f380 <_svfiprintf_r+0x130>
 800f366:	7863      	ldrb	r3, [r4, #1]
 800f368:	2b2a      	cmp	r3, #42	; 0x2a
 800f36a:	d135      	bne.n	800f3d8 <_svfiprintf_r+0x188>
 800f36c:	9b03      	ldr	r3, [sp, #12]
 800f36e:	1d1a      	adds	r2, r3, #4
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	9203      	str	r2, [sp, #12]
 800f374:	2b00      	cmp	r3, #0
 800f376:	bfb8      	it	lt
 800f378:	f04f 33ff 	movlt.w	r3, #4294967295
 800f37c:	3402      	adds	r4, #2
 800f37e:	9305      	str	r3, [sp, #20]
 800f380:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f44c <_svfiprintf_r+0x1fc>
 800f384:	7821      	ldrb	r1, [r4, #0]
 800f386:	2203      	movs	r2, #3
 800f388:	4650      	mov	r0, sl
 800f38a:	f7f0 ff39 	bl	8000200 <memchr>
 800f38e:	b140      	cbz	r0, 800f3a2 <_svfiprintf_r+0x152>
 800f390:	2340      	movs	r3, #64	; 0x40
 800f392:	eba0 000a 	sub.w	r0, r0, sl
 800f396:	fa03 f000 	lsl.w	r0, r3, r0
 800f39a:	9b04      	ldr	r3, [sp, #16]
 800f39c:	4303      	orrs	r3, r0
 800f39e:	3401      	adds	r4, #1
 800f3a0:	9304      	str	r3, [sp, #16]
 800f3a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3a6:	4826      	ldr	r0, [pc, #152]	; (800f440 <_svfiprintf_r+0x1f0>)
 800f3a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f3ac:	2206      	movs	r2, #6
 800f3ae:	f7f0 ff27 	bl	8000200 <memchr>
 800f3b2:	2800      	cmp	r0, #0
 800f3b4:	d038      	beq.n	800f428 <_svfiprintf_r+0x1d8>
 800f3b6:	4b23      	ldr	r3, [pc, #140]	; (800f444 <_svfiprintf_r+0x1f4>)
 800f3b8:	bb1b      	cbnz	r3, 800f402 <_svfiprintf_r+0x1b2>
 800f3ba:	9b03      	ldr	r3, [sp, #12]
 800f3bc:	3307      	adds	r3, #7
 800f3be:	f023 0307 	bic.w	r3, r3, #7
 800f3c2:	3308      	adds	r3, #8
 800f3c4:	9303      	str	r3, [sp, #12]
 800f3c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3c8:	4433      	add	r3, r6
 800f3ca:	9309      	str	r3, [sp, #36]	; 0x24
 800f3cc:	e767      	b.n	800f29e <_svfiprintf_r+0x4e>
 800f3ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800f3d2:	460c      	mov	r4, r1
 800f3d4:	2001      	movs	r0, #1
 800f3d6:	e7a5      	b.n	800f324 <_svfiprintf_r+0xd4>
 800f3d8:	2300      	movs	r3, #0
 800f3da:	3401      	adds	r4, #1
 800f3dc:	9305      	str	r3, [sp, #20]
 800f3de:	4619      	mov	r1, r3
 800f3e0:	f04f 0c0a 	mov.w	ip, #10
 800f3e4:	4620      	mov	r0, r4
 800f3e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3ea:	3a30      	subs	r2, #48	; 0x30
 800f3ec:	2a09      	cmp	r2, #9
 800f3ee:	d903      	bls.n	800f3f8 <_svfiprintf_r+0x1a8>
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d0c5      	beq.n	800f380 <_svfiprintf_r+0x130>
 800f3f4:	9105      	str	r1, [sp, #20]
 800f3f6:	e7c3      	b.n	800f380 <_svfiprintf_r+0x130>
 800f3f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3fc:	4604      	mov	r4, r0
 800f3fe:	2301      	movs	r3, #1
 800f400:	e7f0      	b.n	800f3e4 <_svfiprintf_r+0x194>
 800f402:	ab03      	add	r3, sp, #12
 800f404:	9300      	str	r3, [sp, #0]
 800f406:	462a      	mov	r2, r5
 800f408:	4b0f      	ldr	r3, [pc, #60]	; (800f448 <_svfiprintf_r+0x1f8>)
 800f40a:	a904      	add	r1, sp, #16
 800f40c:	4638      	mov	r0, r7
 800f40e:	f7fc f927 	bl	800b660 <_printf_float>
 800f412:	1c42      	adds	r2, r0, #1
 800f414:	4606      	mov	r6, r0
 800f416:	d1d6      	bne.n	800f3c6 <_svfiprintf_r+0x176>
 800f418:	89ab      	ldrh	r3, [r5, #12]
 800f41a:	065b      	lsls	r3, r3, #25
 800f41c:	f53f af2c 	bmi.w	800f278 <_svfiprintf_r+0x28>
 800f420:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f422:	b01d      	add	sp, #116	; 0x74
 800f424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f428:	ab03      	add	r3, sp, #12
 800f42a:	9300      	str	r3, [sp, #0]
 800f42c:	462a      	mov	r2, r5
 800f42e:	4b06      	ldr	r3, [pc, #24]	; (800f448 <_svfiprintf_r+0x1f8>)
 800f430:	a904      	add	r1, sp, #16
 800f432:	4638      	mov	r0, r7
 800f434:	f7fc fbb8 	bl	800bba8 <_printf_i>
 800f438:	e7eb      	b.n	800f412 <_svfiprintf_r+0x1c2>
 800f43a:	bf00      	nop
 800f43c:	08011b54 	.word	0x08011b54
 800f440:	08011b5e 	.word	0x08011b5e
 800f444:	0800b661 	.word	0x0800b661
 800f448:	0800f199 	.word	0x0800f199
 800f44c:	08011b5a 	.word	0x08011b5a

0800f450 <_read_r>:
 800f450:	b538      	push	{r3, r4, r5, lr}
 800f452:	4d07      	ldr	r5, [pc, #28]	; (800f470 <_read_r+0x20>)
 800f454:	4604      	mov	r4, r0
 800f456:	4608      	mov	r0, r1
 800f458:	4611      	mov	r1, r2
 800f45a:	2200      	movs	r2, #0
 800f45c:	602a      	str	r2, [r5, #0]
 800f45e:	461a      	mov	r2, r3
 800f460:	f7f3 f98a 	bl	8002778 <_read>
 800f464:	1c43      	adds	r3, r0, #1
 800f466:	d102      	bne.n	800f46e <_read_r+0x1e>
 800f468:	682b      	ldr	r3, [r5, #0]
 800f46a:	b103      	cbz	r3, 800f46e <_read_r+0x1e>
 800f46c:	6023      	str	r3, [r4, #0]
 800f46e:	bd38      	pop	{r3, r4, r5, pc}
 800f470:	20008c60 	.word	0x20008c60
 800f474:	00000000 	.word	0x00000000

0800f478 <nan>:
 800f478:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f480 <nan+0x8>
 800f47c:	4770      	bx	lr
 800f47e:	bf00      	nop
 800f480:	00000000 	.word	0x00000000
 800f484:	7ff80000 	.word	0x7ff80000

0800f488 <strncmp>:
 800f488:	b510      	push	{r4, lr}
 800f48a:	b17a      	cbz	r2, 800f4ac <strncmp+0x24>
 800f48c:	4603      	mov	r3, r0
 800f48e:	3901      	subs	r1, #1
 800f490:	1884      	adds	r4, r0, r2
 800f492:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f496:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f49a:	4290      	cmp	r0, r2
 800f49c:	d101      	bne.n	800f4a2 <strncmp+0x1a>
 800f49e:	42a3      	cmp	r3, r4
 800f4a0:	d101      	bne.n	800f4a6 <strncmp+0x1e>
 800f4a2:	1a80      	subs	r0, r0, r2
 800f4a4:	bd10      	pop	{r4, pc}
 800f4a6:	2800      	cmp	r0, #0
 800f4a8:	d1f3      	bne.n	800f492 <strncmp+0xa>
 800f4aa:	e7fa      	b.n	800f4a2 <strncmp+0x1a>
 800f4ac:	4610      	mov	r0, r2
 800f4ae:	e7f9      	b.n	800f4a4 <strncmp+0x1c>

0800f4b0 <__ascii_wctomb>:
 800f4b0:	b149      	cbz	r1, 800f4c6 <__ascii_wctomb+0x16>
 800f4b2:	2aff      	cmp	r2, #255	; 0xff
 800f4b4:	bf85      	ittet	hi
 800f4b6:	238a      	movhi	r3, #138	; 0x8a
 800f4b8:	6003      	strhi	r3, [r0, #0]
 800f4ba:	700a      	strbls	r2, [r1, #0]
 800f4bc:	f04f 30ff 	movhi.w	r0, #4294967295
 800f4c0:	bf98      	it	ls
 800f4c2:	2001      	movls	r0, #1
 800f4c4:	4770      	bx	lr
 800f4c6:	4608      	mov	r0, r1
 800f4c8:	4770      	bx	lr
	...

0800f4cc <__assert_func>:
 800f4cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f4ce:	4614      	mov	r4, r2
 800f4d0:	461a      	mov	r2, r3
 800f4d2:	4b09      	ldr	r3, [pc, #36]	; (800f4f8 <__assert_func+0x2c>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	4605      	mov	r5, r0
 800f4d8:	68d8      	ldr	r0, [r3, #12]
 800f4da:	b14c      	cbz	r4, 800f4f0 <__assert_func+0x24>
 800f4dc:	4b07      	ldr	r3, [pc, #28]	; (800f4fc <__assert_func+0x30>)
 800f4de:	9100      	str	r1, [sp, #0]
 800f4e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f4e4:	4906      	ldr	r1, [pc, #24]	; (800f500 <__assert_func+0x34>)
 800f4e6:	462b      	mov	r3, r5
 800f4e8:	f000 f80e 	bl	800f508 <fiprintf>
 800f4ec:	f000 fa80 	bl	800f9f0 <abort>
 800f4f0:	4b04      	ldr	r3, [pc, #16]	; (800f504 <__assert_func+0x38>)
 800f4f2:	461c      	mov	r4, r3
 800f4f4:	e7f3      	b.n	800f4de <__assert_func+0x12>
 800f4f6:	bf00      	nop
 800f4f8:	200000a8 	.word	0x200000a8
 800f4fc:	08011b65 	.word	0x08011b65
 800f500:	08011b72 	.word	0x08011b72
 800f504:	08011ba0 	.word	0x08011ba0

0800f508 <fiprintf>:
 800f508:	b40e      	push	{r1, r2, r3}
 800f50a:	b503      	push	{r0, r1, lr}
 800f50c:	4601      	mov	r1, r0
 800f50e:	ab03      	add	r3, sp, #12
 800f510:	4805      	ldr	r0, [pc, #20]	; (800f528 <fiprintf+0x20>)
 800f512:	f853 2b04 	ldr.w	r2, [r3], #4
 800f516:	6800      	ldr	r0, [r0, #0]
 800f518:	9301      	str	r3, [sp, #4]
 800f51a:	f000 f879 	bl	800f610 <_vfiprintf_r>
 800f51e:	b002      	add	sp, #8
 800f520:	f85d eb04 	ldr.w	lr, [sp], #4
 800f524:	b003      	add	sp, #12
 800f526:	4770      	bx	lr
 800f528:	200000a8 	.word	0x200000a8

0800f52c <memmove>:
 800f52c:	4288      	cmp	r0, r1
 800f52e:	b510      	push	{r4, lr}
 800f530:	eb01 0402 	add.w	r4, r1, r2
 800f534:	d902      	bls.n	800f53c <memmove+0x10>
 800f536:	4284      	cmp	r4, r0
 800f538:	4623      	mov	r3, r4
 800f53a:	d807      	bhi.n	800f54c <memmove+0x20>
 800f53c:	1e43      	subs	r3, r0, #1
 800f53e:	42a1      	cmp	r1, r4
 800f540:	d008      	beq.n	800f554 <memmove+0x28>
 800f542:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f546:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f54a:	e7f8      	b.n	800f53e <memmove+0x12>
 800f54c:	4402      	add	r2, r0
 800f54e:	4601      	mov	r1, r0
 800f550:	428a      	cmp	r2, r1
 800f552:	d100      	bne.n	800f556 <memmove+0x2a>
 800f554:	bd10      	pop	{r4, pc}
 800f556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f55a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f55e:	e7f7      	b.n	800f550 <memmove+0x24>

0800f560 <_realloc_r>:
 800f560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f564:	4680      	mov	r8, r0
 800f566:	4614      	mov	r4, r2
 800f568:	460e      	mov	r6, r1
 800f56a:	b921      	cbnz	r1, 800f576 <_realloc_r+0x16>
 800f56c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f570:	4611      	mov	r1, r2
 800f572:	f7fb bf61 	b.w	800b438 <_malloc_r>
 800f576:	b92a      	cbnz	r2, 800f584 <_realloc_r+0x24>
 800f578:	f7ff fdc2 	bl	800f100 <_free_r>
 800f57c:	4625      	mov	r5, r4
 800f57e:	4628      	mov	r0, r5
 800f580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f584:	f000 faa0 	bl	800fac8 <_malloc_usable_size_r>
 800f588:	4284      	cmp	r4, r0
 800f58a:	4607      	mov	r7, r0
 800f58c:	d802      	bhi.n	800f594 <_realloc_r+0x34>
 800f58e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f592:	d812      	bhi.n	800f5ba <_realloc_r+0x5a>
 800f594:	4621      	mov	r1, r4
 800f596:	4640      	mov	r0, r8
 800f598:	f7fb ff4e 	bl	800b438 <_malloc_r>
 800f59c:	4605      	mov	r5, r0
 800f59e:	2800      	cmp	r0, #0
 800f5a0:	d0ed      	beq.n	800f57e <_realloc_r+0x1e>
 800f5a2:	42bc      	cmp	r4, r7
 800f5a4:	4622      	mov	r2, r4
 800f5a6:	4631      	mov	r1, r6
 800f5a8:	bf28      	it	cs
 800f5aa:	463a      	movcs	r2, r7
 800f5ac:	f7fb ff0d 	bl	800b3ca <memcpy>
 800f5b0:	4631      	mov	r1, r6
 800f5b2:	4640      	mov	r0, r8
 800f5b4:	f7ff fda4 	bl	800f100 <_free_r>
 800f5b8:	e7e1      	b.n	800f57e <_realloc_r+0x1e>
 800f5ba:	4635      	mov	r5, r6
 800f5bc:	e7df      	b.n	800f57e <_realloc_r+0x1e>

0800f5be <__sfputc_r>:
 800f5be:	6893      	ldr	r3, [r2, #8]
 800f5c0:	3b01      	subs	r3, #1
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	b410      	push	{r4}
 800f5c6:	6093      	str	r3, [r2, #8]
 800f5c8:	da08      	bge.n	800f5dc <__sfputc_r+0x1e>
 800f5ca:	6994      	ldr	r4, [r2, #24]
 800f5cc:	42a3      	cmp	r3, r4
 800f5ce:	db01      	blt.n	800f5d4 <__sfputc_r+0x16>
 800f5d0:	290a      	cmp	r1, #10
 800f5d2:	d103      	bne.n	800f5dc <__sfputc_r+0x1e>
 800f5d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5d8:	f000 b94a 	b.w	800f870 <__swbuf_r>
 800f5dc:	6813      	ldr	r3, [r2, #0]
 800f5de:	1c58      	adds	r0, r3, #1
 800f5e0:	6010      	str	r0, [r2, #0]
 800f5e2:	7019      	strb	r1, [r3, #0]
 800f5e4:	4608      	mov	r0, r1
 800f5e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5ea:	4770      	bx	lr

0800f5ec <__sfputs_r>:
 800f5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5ee:	4606      	mov	r6, r0
 800f5f0:	460f      	mov	r7, r1
 800f5f2:	4614      	mov	r4, r2
 800f5f4:	18d5      	adds	r5, r2, r3
 800f5f6:	42ac      	cmp	r4, r5
 800f5f8:	d101      	bne.n	800f5fe <__sfputs_r+0x12>
 800f5fa:	2000      	movs	r0, #0
 800f5fc:	e007      	b.n	800f60e <__sfputs_r+0x22>
 800f5fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f602:	463a      	mov	r2, r7
 800f604:	4630      	mov	r0, r6
 800f606:	f7ff ffda 	bl	800f5be <__sfputc_r>
 800f60a:	1c43      	adds	r3, r0, #1
 800f60c:	d1f3      	bne.n	800f5f6 <__sfputs_r+0xa>
 800f60e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f610 <_vfiprintf_r>:
 800f610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f614:	460d      	mov	r5, r1
 800f616:	b09d      	sub	sp, #116	; 0x74
 800f618:	4614      	mov	r4, r2
 800f61a:	4698      	mov	r8, r3
 800f61c:	4606      	mov	r6, r0
 800f61e:	b118      	cbz	r0, 800f628 <_vfiprintf_r+0x18>
 800f620:	6983      	ldr	r3, [r0, #24]
 800f622:	b90b      	cbnz	r3, 800f628 <_vfiprintf_r+0x18>
 800f624:	f7fb fe0c 	bl	800b240 <__sinit>
 800f628:	4b89      	ldr	r3, [pc, #548]	; (800f850 <_vfiprintf_r+0x240>)
 800f62a:	429d      	cmp	r5, r3
 800f62c:	d11b      	bne.n	800f666 <_vfiprintf_r+0x56>
 800f62e:	6875      	ldr	r5, [r6, #4]
 800f630:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f632:	07d9      	lsls	r1, r3, #31
 800f634:	d405      	bmi.n	800f642 <_vfiprintf_r+0x32>
 800f636:	89ab      	ldrh	r3, [r5, #12]
 800f638:	059a      	lsls	r2, r3, #22
 800f63a:	d402      	bmi.n	800f642 <_vfiprintf_r+0x32>
 800f63c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f63e:	f7fb fec2 	bl	800b3c6 <__retarget_lock_acquire_recursive>
 800f642:	89ab      	ldrh	r3, [r5, #12]
 800f644:	071b      	lsls	r3, r3, #28
 800f646:	d501      	bpl.n	800f64c <_vfiprintf_r+0x3c>
 800f648:	692b      	ldr	r3, [r5, #16]
 800f64a:	b9eb      	cbnz	r3, 800f688 <_vfiprintf_r+0x78>
 800f64c:	4629      	mov	r1, r5
 800f64e:	4630      	mov	r0, r6
 800f650:	f000 f960 	bl	800f914 <__swsetup_r>
 800f654:	b1c0      	cbz	r0, 800f688 <_vfiprintf_r+0x78>
 800f656:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f658:	07dc      	lsls	r4, r3, #31
 800f65a:	d50e      	bpl.n	800f67a <_vfiprintf_r+0x6a>
 800f65c:	f04f 30ff 	mov.w	r0, #4294967295
 800f660:	b01d      	add	sp, #116	; 0x74
 800f662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f666:	4b7b      	ldr	r3, [pc, #492]	; (800f854 <_vfiprintf_r+0x244>)
 800f668:	429d      	cmp	r5, r3
 800f66a:	d101      	bne.n	800f670 <_vfiprintf_r+0x60>
 800f66c:	68b5      	ldr	r5, [r6, #8]
 800f66e:	e7df      	b.n	800f630 <_vfiprintf_r+0x20>
 800f670:	4b79      	ldr	r3, [pc, #484]	; (800f858 <_vfiprintf_r+0x248>)
 800f672:	429d      	cmp	r5, r3
 800f674:	bf08      	it	eq
 800f676:	68f5      	ldreq	r5, [r6, #12]
 800f678:	e7da      	b.n	800f630 <_vfiprintf_r+0x20>
 800f67a:	89ab      	ldrh	r3, [r5, #12]
 800f67c:	0598      	lsls	r0, r3, #22
 800f67e:	d4ed      	bmi.n	800f65c <_vfiprintf_r+0x4c>
 800f680:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f682:	f7fb fea1 	bl	800b3c8 <__retarget_lock_release_recursive>
 800f686:	e7e9      	b.n	800f65c <_vfiprintf_r+0x4c>
 800f688:	2300      	movs	r3, #0
 800f68a:	9309      	str	r3, [sp, #36]	; 0x24
 800f68c:	2320      	movs	r3, #32
 800f68e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f692:	f8cd 800c 	str.w	r8, [sp, #12]
 800f696:	2330      	movs	r3, #48	; 0x30
 800f698:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f85c <_vfiprintf_r+0x24c>
 800f69c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f6a0:	f04f 0901 	mov.w	r9, #1
 800f6a4:	4623      	mov	r3, r4
 800f6a6:	469a      	mov	sl, r3
 800f6a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6ac:	b10a      	cbz	r2, 800f6b2 <_vfiprintf_r+0xa2>
 800f6ae:	2a25      	cmp	r2, #37	; 0x25
 800f6b0:	d1f9      	bne.n	800f6a6 <_vfiprintf_r+0x96>
 800f6b2:	ebba 0b04 	subs.w	fp, sl, r4
 800f6b6:	d00b      	beq.n	800f6d0 <_vfiprintf_r+0xc0>
 800f6b8:	465b      	mov	r3, fp
 800f6ba:	4622      	mov	r2, r4
 800f6bc:	4629      	mov	r1, r5
 800f6be:	4630      	mov	r0, r6
 800f6c0:	f7ff ff94 	bl	800f5ec <__sfputs_r>
 800f6c4:	3001      	adds	r0, #1
 800f6c6:	f000 80aa 	beq.w	800f81e <_vfiprintf_r+0x20e>
 800f6ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6cc:	445a      	add	r2, fp
 800f6ce:	9209      	str	r2, [sp, #36]	; 0x24
 800f6d0:	f89a 3000 	ldrb.w	r3, [sl]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	f000 80a2 	beq.w	800f81e <_vfiprintf_r+0x20e>
 800f6da:	2300      	movs	r3, #0
 800f6dc:	f04f 32ff 	mov.w	r2, #4294967295
 800f6e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6e4:	f10a 0a01 	add.w	sl, sl, #1
 800f6e8:	9304      	str	r3, [sp, #16]
 800f6ea:	9307      	str	r3, [sp, #28]
 800f6ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f6f0:	931a      	str	r3, [sp, #104]	; 0x68
 800f6f2:	4654      	mov	r4, sl
 800f6f4:	2205      	movs	r2, #5
 800f6f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6fa:	4858      	ldr	r0, [pc, #352]	; (800f85c <_vfiprintf_r+0x24c>)
 800f6fc:	f7f0 fd80 	bl	8000200 <memchr>
 800f700:	9a04      	ldr	r2, [sp, #16]
 800f702:	b9d8      	cbnz	r0, 800f73c <_vfiprintf_r+0x12c>
 800f704:	06d1      	lsls	r1, r2, #27
 800f706:	bf44      	itt	mi
 800f708:	2320      	movmi	r3, #32
 800f70a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f70e:	0713      	lsls	r3, r2, #28
 800f710:	bf44      	itt	mi
 800f712:	232b      	movmi	r3, #43	; 0x2b
 800f714:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f718:	f89a 3000 	ldrb.w	r3, [sl]
 800f71c:	2b2a      	cmp	r3, #42	; 0x2a
 800f71e:	d015      	beq.n	800f74c <_vfiprintf_r+0x13c>
 800f720:	9a07      	ldr	r2, [sp, #28]
 800f722:	4654      	mov	r4, sl
 800f724:	2000      	movs	r0, #0
 800f726:	f04f 0c0a 	mov.w	ip, #10
 800f72a:	4621      	mov	r1, r4
 800f72c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f730:	3b30      	subs	r3, #48	; 0x30
 800f732:	2b09      	cmp	r3, #9
 800f734:	d94e      	bls.n	800f7d4 <_vfiprintf_r+0x1c4>
 800f736:	b1b0      	cbz	r0, 800f766 <_vfiprintf_r+0x156>
 800f738:	9207      	str	r2, [sp, #28]
 800f73a:	e014      	b.n	800f766 <_vfiprintf_r+0x156>
 800f73c:	eba0 0308 	sub.w	r3, r0, r8
 800f740:	fa09 f303 	lsl.w	r3, r9, r3
 800f744:	4313      	orrs	r3, r2
 800f746:	9304      	str	r3, [sp, #16]
 800f748:	46a2      	mov	sl, r4
 800f74a:	e7d2      	b.n	800f6f2 <_vfiprintf_r+0xe2>
 800f74c:	9b03      	ldr	r3, [sp, #12]
 800f74e:	1d19      	adds	r1, r3, #4
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	9103      	str	r1, [sp, #12]
 800f754:	2b00      	cmp	r3, #0
 800f756:	bfbb      	ittet	lt
 800f758:	425b      	neglt	r3, r3
 800f75a:	f042 0202 	orrlt.w	r2, r2, #2
 800f75e:	9307      	strge	r3, [sp, #28]
 800f760:	9307      	strlt	r3, [sp, #28]
 800f762:	bfb8      	it	lt
 800f764:	9204      	strlt	r2, [sp, #16]
 800f766:	7823      	ldrb	r3, [r4, #0]
 800f768:	2b2e      	cmp	r3, #46	; 0x2e
 800f76a:	d10c      	bne.n	800f786 <_vfiprintf_r+0x176>
 800f76c:	7863      	ldrb	r3, [r4, #1]
 800f76e:	2b2a      	cmp	r3, #42	; 0x2a
 800f770:	d135      	bne.n	800f7de <_vfiprintf_r+0x1ce>
 800f772:	9b03      	ldr	r3, [sp, #12]
 800f774:	1d1a      	adds	r2, r3, #4
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	9203      	str	r2, [sp, #12]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	bfb8      	it	lt
 800f77e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f782:	3402      	adds	r4, #2
 800f784:	9305      	str	r3, [sp, #20]
 800f786:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f86c <_vfiprintf_r+0x25c>
 800f78a:	7821      	ldrb	r1, [r4, #0]
 800f78c:	2203      	movs	r2, #3
 800f78e:	4650      	mov	r0, sl
 800f790:	f7f0 fd36 	bl	8000200 <memchr>
 800f794:	b140      	cbz	r0, 800f7a8 <_vfiprintf_r+0x198>
 800f796:	2340      	movs	r3, #64	; 0x40
 800f798:	eba0 000a 	sub.w	r0, r0, sl
 800f79c:	fa03 f000 	lsl.w	r0, r3, r0
 800f7a0:	9b04      	ldr	r3, [sp, #16]
 800f7a2:	4303      	orrs	r3, r0
 800f7a4:	3401      	adds	r4, #1
 800f7a6:	9304      	str	r3, [sp, #16]
 800f7a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7ac:	482c      	ldr	r0, [pc, #176]	; (800f860 <_vfiprintf_r+0x250>)
 800f7ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f7b2:	2206      	movs	r2, #6
 800f7b4:	f7f0 fd24 	bl	8000200 <memchr>
 800f7b8:	2800      	cmp	r0, #0
 800f7ba:	d03f      	beq.n	800f83c <_vfiprintf_r+0x22c>
 800f7bc:	4b29      	ldr	r3, [pc, #164]	; (800f864 <_vfiprintf_r+0x254>)
 800f7be:	bb1b      	cbnz	r3, 800f808 <_vfiprintf_r+0x1f8>
 800f7c0:	9b03      	ldr	r3, [sp, #12]
 800f7c2:	3307      	adds	r3, #7
 800f7c4:	f023 0307 	bic.w	r3, r3, #7
 800f7c8:	3308      	adds	r3, #8
 800f7ca:	9303      	str	r3, [sp, #12]
 800f7cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7ce:	443b      	add	r3, r7
 800f7d0:	9309      	str	r3, [sp, #36]	; 0x24
 800f7d2:	e767      	b.n	800f6a4 <_vfiprintf_r+0x94>
 800f7d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f7d8:	460c      	mov	r4, r1
 800f7da:	2001      	movs	r0, #1
 800f7dc:	e7a5      	b.n	800f72a <_vfiprintf_r+0x11a>
 800f7de:	2300      	movs	r3, #0
 800f7e0:	3401      	adds	r4, #1
 800f7e2:	9305      	str	r3, [sp, #20]
 800f7e4:	4619      	mov	r1, r3
 800f7e6:	f04f 0c0a 	mov.w	ip, #10
 800f7ea:	4620      	mov	r0, r4
 800f7ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7f0:	3a30      	subs	r2, #48	; 0x30
 800f7f2:	2a09      	cmp	r2, #9
 800f7f4:	d903      	bls.n	800f7fe <_vfiprintf_r+0x1ee>
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d0c5      	beq.n	800f786 <_vfiprintf_r+0x176>
 800f7fa:	9105      	str	r1, [sp, #20]
 800f7fc:	e7c3      	b.n	800f786 <_vfiprintf_r+0x176>
 800f7fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800f802:	4604      	mov	r4, r0
 800f804:	2301      	movs	r3, #1
 800f806:	e7f0      	b.n	800f7ea <_vfiprintf_r+0x1da>
 800f808:	ab03      	add	r3, sp, #12
 800f80a:	9300      	str	r3, [sp, #0]
 800f80c:	462a      	mov	r2, r5
 800f80e:	4b16      	ldr	r3, [pc, #88]	; (800f868 <_vfiprintf_r+0x258>)
 800f810:	a904      	add	r1, sp, #16
 800f812:	4630      	mov	r0, r6
 800f814:	f7fb ff24 	bl	800b660 <_printf_float>
 800f818:	4607      	mov	r7, r0
 800f81a:	1c78      	adds	r0, r7, #1
 800f81c:	d1d6      	bne.n	800f7cc <_vfiprintf_r+0x1bc>
 800f81e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f820:	07d9      	lsls	r1, r3, #31
 800f822:	d405      	bmi.n	800f830 <_vfiprintf_r+0x220>
 800f824:	89ab      	ldrh	r3, [r5, #12]
 800f826:	059a      	lsls	r2, r3, #22
 800f828:	d402      	bmi.n	800f830 <_vfiprintf_r+0x220>
 800f82a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f82c:	f7fb fdcc 	bl	800b3c8 <__retarget_lock_release_recursive>
 800f830:	89ab      	ldrh	r3, [r5, #12]
 800f832:	065b      	lsls	r3, r3, #25
 800f834:	f53f af12 	bmi.w	800f65c <_vfiprintf_r+0x4c>
 800f838:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f83a:	e711      	b.n	800f660 <_vfiprintf_r+0x50>
 800f83c:	ab03      	add	r3, sp, #12
 800f83e:	9300      	str	r3, [sp, #0]
 800f840:	462a      	mov	r2, r5
 800f842:	4b09      	ldr	r3, [pc, #36]	; (800f868 <_vfiprintf_r+0x258>)
 800f844:	a904      	add	r1, sp, #16
 800f846:	4630      	mov	r0, r6
 800f848:	f7fc f9ae 	bl	800bba8 <_printf_i>
 800f84c:	e7e4      	b.n	800f818 <_vfiprintf_r+0x208>
 800f84e:	bf00      	nop
 800f850:	08011720 	.word	0x08011720
 800f854:	08011740 	.word	0x08011740
 800f858:	08011700 	.word	0x08011700
 800f85c:	08011b54 	.word	0x08011b54
 800f860:	08011b5e 	.word	0x08011b5e
 800f864:	0800b661 	.word	0x0800b661
 800f868:	0800f5ed 	.word	0x0800f5ed
 800f86c:	08011b5a 	.word	0x08011b5a

0800f870 <__swbuf_r>:
 800f870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f872:	460e      	mov	r6, r1
 800f874:	4614      	mov	r4, r2
 800f876:	4605      	mov	r5, r0
 800f878:	b118      	cbz	r0, 800f882 <__swbuf_r+0x12>
 800f87a:	6983      	ldr	r3, [r0, #24]
 800f87c:	b90b      	cbnz	r3, 800f882 <__swbuf_r+0x12>
 800f87e:	f7fb fcdf 	bl	800b240 <__sinit>
 800f882:	4b21      	ldr	r3, [pc, #132]	; (800f908 <__swbuf_r+0x98>)
 800f884:	429c      	cmp	r4, r3
 800f886:	d12b      	bne.n	800f8e0 <__swbuf_r+0x70>
 800f888:	686c      	ldr	r4, [r5, #4]
 800f88a:	69a3      	ldr	r3, [r4, #24]
 800f88c:	60a3      	str	r3, [r4, #8]
 800f88e:	89a3      	ldrh	r3, [r4, #12]
 800f890:	071a      	lsls	r2, r3, #28
 800f892:	d52f      	bpl.n	800f8f4 <__swbuf_r+0x84>
 800f894:	6923      	ldr	r3, [r4, #16]
 800f896:	b36b      	cbz	r3, 800f8f4 <__swbuf_r+0x84>
 800f898:	6923      	ldr	r3, [r4, #16]
 800f89a:	6820      	ldr	r0, [r4, #0]
 800f89c:	1ac0      	subs	r0, r0, r3
 800f89e:	6963      	ldr	r3, [r4, #20]
 800f8a0:	b2f6      	uxtb	r6, r6
 800f8a2:	4283      	cmp	r3, r0
 800f8a4:	4637      	mov	r7, r6
 800f8a6:	dc04      	bgt.n	800f8b2 <__swbuf_r+0x42>
 800f8a8:	4621      	mov	r1, r4
 800f8aa:	4628      	mov	r0, r5
 800f8ac:	f7fe fb68 	bl	800df80 <_fflush_r>
 800f8b0:	bb30      	cbnz	r0, 800f900 <__swbuf_r+0x90>
 800f8b2:	68a3      	ldr	r3, [r4, #8]
 800f8b4:	3b01      	subs	r3, #1
 800f8b6:	60a3      	str	r3, [r4, #8]
 800f8b8:	6823      	ldr	r3, [r4, #0]
 800f8ba:	1c5a      	adds	r2, r3, #1
 800f8bc:	6022      	str	r2, [r4, #0]
 800f8be:	701e      	strb	r6, [r3, #0]
 800f8c0:	6963      	ldr	r3, [r4, #20]
 800f8c2:	3001      	adds	r0, #1
 800f8c4:	4283      	cmp	r3, r0
 800f8c6:	d004      	beq.n	800f8d2 <__swbuf_r+0x62>
 800f8c8:	89a3      	ldrh	r3, [r4, #12]
 800f8ca:	07db      	lsls	r3, r3, #31
 800f8cc:	d506      	bpl.n	800f8dc <__swbuf_r+0x6c>
 800f8ce:	2e0a      	cmp	r6, #10
 800f8d0:	d104      	bne.n	800f8dc <__swbuf_r+0x6c>
 800f8d2:	4621      	mov	r1, r4
 800f8d4:	4628      	mov	r0, r5
 800f8d6:	f7fe fb53 	bl	800df80 <_fflush_r>
 800f8da:	b988      	cbnz	r0, 800f900 <__swbuf_r+0x90>
 800f8dc:	4638      	mov	r0, r7
 800f8de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8e0:	4b0a      	ldr	r3, [pc, #40]	; (800f90c <__swbuf_r+0x9c>)
 800f8e2:	429c      	cmp	r4, r3
 800f8e4:	d101      	bne.n	800f8ea <__swbuf_r+0x7a>
 800f8e6:	68ac      	ldr	r4, [r5, #8]
 800f8e8:	e7cf      	b.n	800f88a <__swbuf_r+0x1a>
 800f8ea:	4b09      	ldr	r3, [pc, #36]	; (800f910 <__swbuf_r+0xa0>)
 800f8ec:	429c      	cmp	r4, r3
 800f8ee:	bf08      	it	eq
 800f8f0:	68ec      	ldreq	r4, [r5, #12]
 800f8f2:	e7ca      	b.n	800f88a <__swbuf_r+0x1a>
 800f8f4:	4621      	mov	r1, r4
 800f8f6:	4628      	mov	r0, r5
 800f8f8:	f000 f80c 	bl	800f914 <__swsetup_r>
 800f8fc:	2800      	cmp	r0, #0
 800f8fe:	d0cb      	beq.n	800f898 <__swbuf_r+0x28>
 800f900:	f04f 37ff 	mov.w	r7, #4294967295
 800f904:	e7ea      	b.n	800f8dc <__swbuf_r+0x6c>
 800f906:	bf00      	nop
 800f908:	08011720 	.word	0x08011720
 800f90c:	08011740 	.word	0x08011740
 800f910:	08011700 	.word	0x08011700

0800f914 <__swsetup_r>:
 800f914:	4b32      	ldr	r3, [pc, #200]	; (800f9e0 <__swsetup_r+0xcc>)
 800f916:	b570      	push	{r4, r5, r6, lr}
 800f918:	681d      	ldr	r5, [r3, #0]
 800f91a:	4606      	mov	r6, r0
 800f91c:	460c      	mov	r4, r1
 800f91e:	b125      	cbz	r5, 800f92a <__swsetup_r+0x16>
 800f920:	69ab      	ldr	r3, [r5, #24]
 800f922:	b913      	cbnz	r3, 800f92a <__swsetup_r+0x16>
 800f924:	4628      	mov	r0, r5
 800f926:	f7fb fc8b 	bl	800b240 <__sinit>
 800f92a:	4b2e      	ldr	r3, [pc, #184]	; (800f9e4 <__swsetup_r+0xd0>)
 800f92c:	429c      	cmp	r4, r3
 800f92e:	d10f      	bne.n	800f950 <__swsetup_r+0x3c>
 800f930:	686c      	ldr	r4, [r5, #4]
 800f932:	89a3      	ldrh	r3, [r4, #12]
 800f934:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f938:	0719      	lsls	r1, r3, #28
 800f93a:	d42c      	bmi.n	800f996 <__swsetup_r+0x82>
 800f93c:	06dd      	lsls	r5, r3, #27
 800f93e:	d411      	bmi.n	800f964 <__swsetup_r+0x50>
 800f940:	2309      	movs	r3, #9
 800f942:	6033      	str	r3, [r6, #0]
 800f944:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f948:	81a3      	strh	r3, [r4, #12]
 800f94a:	f04f 30ff 	mov.w	r0, #4294967295
 800f94e:	e03e      	b.n	800f9ce <__swsetup_r+0xba>
 800f950:	4b25      	ldr	r3, [pc, #148]	; (800f9e8 <__swsetup_r+0xd4>)
 800f952:	429c      	cmp	r4, r3
 800f954:	d101      	bne.n	800f95a <__swsetup_r+0x46>
 800f956:	68ac      	ldr	r4, [r5, #8]
 800f958:	e7eb      	b.n	800f932 <__swsetup_r+0x1e>
 800f95a:	4b24      	ldr	r3, [pc, #144]	; (800f9ec <__swsetup_r+0xd8>)
 800f95c:	429c      	cmp	r4, r3
 800f95e:	bf08      	it	eq
 800f960:	68ec      	ldreq	r4, [r5, #12]
 800f962:	e7e6      	b.n	800f932 <__swsetup_r+0x1e>
 800f964:	0758      	lsls	r0, r3, #29
 800f966:	d512      	bpl.n	800f98e <__swsetup_r+0x7a>
 800f968:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f96a:	b141      	cbz	r1, 800f97e <__swsetup_r+0x6a>
 800f96c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f970:	4299      	cmp	r1, r3
 800f972:	d002      	beq.n	800f97a <__swsetup_r+0x66>
 800f974:	4630      	mov	r0, r6
 800f976:	f7ff fbc3 	bl	800f100 <_free_r>
 800f97a:	2300      	movs	r3, #0
 800f97c:	6363      	str	r3, [r4, #52]	; 0x34
 800f97e:	89a3      	ldrh	r3, [r4, #12]
 800f980:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f984:	81a3      	strh	r3, [r4, #12]
 800f986:	2300      	movs	r3, #0
 800f988:	6063      	str	r3, [r4, #4]
 800f98a:	6923      	ldr	r3, [r4, #16]
 800f98c:	6023      	str	r3, [r4, #0]
 800f98e:	89a3      	ldrh	r3, [r4, #12]
 800f990:	f043 0308 	orr.w	r3, r3, #8
 800f994:	81a3      	strh	r3, [r4, #12]
 800f996:	6923      	ldr	r3, [r4, #16]
 800f998:	b94b      	cbnz	r3, 800f9ae <__swsetup_r+0x9a>
 800f99a:	89a3      	ldrh	r3, [r4, #12]
 800f99c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f9a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f9a4:	d003      	beq.n	800f9ae <__swsetup_r+0x9a>
 800f9a6:	4621      	mov	r1, r4
 800f9a8:	4630      	mov	r0, r6
 800f9aa:	f000 f84d 	bl	800fa48 <__smakebuf_r>
 800f9ae:	89a0      	ldrh	r0, [r4, #12]
 800f9b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f9b4:	f010 0301 	ands.w	r3, r0, #1
 800f9b8:	d00a      	beq.n	800f9d0 <__swsetup_r+0xbc>
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	60a3      	str	r3, [r4, #8]
 800f9be:	6963      	ldr	r3, [r4, #20]
 800f9c0:	425b      	negs	r3, r3
 800f9c2:	61a3      	str	r3, [r4, #24]
 800f9c4:	6923      	ldr	r3, [r4, #16]
 800f9c6:	b943      	cbnz	r3, 800f9da <__swsetup_r+0xc6>
 800f9c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f9cc:	d1ba      	bne.n	800f944 <__swsetup_r+0x30>
 800f9ce:	bd70      	pop	{r4, r5, r6, pc}
 800f9d0:	0781      	lsls	r1, r0, #30
 800f9d2:	bf58      	it	pl
 800f9d4:	6963      	ldrpl	r3, [r4, #20]
 800f9d6:	60a3      	str	r3, [r4, #8]
 800f9d8:	e7f4      	b.n	800f9c4 <__swsetup_r+0xb0>
 800f9da:	2000      	movs	r0, #0
 800f9dc:	e7f7      	b.n	800f9ce <__swsetup_r+0xba>
 800f9de:	bf00      	nop
 800f9e0:	200000a8 	.word	0x200000a8
 800f9e4:	08011720 	.word	0x08011720
 800f9e8:	08011740 	.word	0x08011740
 800f9ec:	08011700 	.word	0x08011700

0800f9f0 <abort>:
 800f9f0:	b508      	push	{r3, lr}
 800f9f2:	2006      	movs	r0, #6
 800f9f4:	f000 f898 	bl	800fb28 <raise>
 800f9f8:	2001      	movs	r0, #1
 800f9fa:	f7f2 feb3 	bl	8002764 <_exit>

0800f9fe <__swhatbuf_r>:
 800f9fe:	b570      	push	{r4, r5, r6, lr}
 800fa00:	460e      	mov	r6, r1
 800fa02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa06:	2900      	cmp	r1, #0
 800fa08:	b096      	sub	sp, #88	; 0x58
 800fa0a:	4614      	mov	r4, r2
 800fa0c:	461d      	mov	r5, r3
 800fa0e:	da08      	bge.n	800fa22 <__swhatbuf_r+0x24>
 800fa10:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fa14:	2200      	movs	r2, #0
 800fa16:	602a      	str	r2, [r5, #0]
 800fa18:	061a      	lsls	r2, r3, #24
 800fa1a:	d410      	bmi.n	800fa3e <__swhatbuf_r+0x40>
 800fa1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa20:	e00e      	b.n	800fa40 <__swhatbuf_r+0x42>
 800fa22:	466a      	mov	r2, sp
 800fa24:	f000 f89c 	bl	800fb60 <_fstat_r>
 800fa28:	2800      	cmp	r0, #0
 800fa2a:	dbf1      	blt.n	800fa10 <__swhatbuf_r+0x12>
 800fa2c:	9a01      	ldr	r2, [sp, #4]
 800fa2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fa32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fa36:	425a      	negs	r2, r3
 800fa38:	415a      	adcs	r2, r3
 800fa3a:	602a      	str	r2, [r5, #0]
 800fa3c:	e7ee      	b.n	800fa1c <__swhatbuf_r+0x1e>
 800fa3e:	2340      	movs	r3, #64	; 0x40
 800fa40:	2000      	movs	r0, #0
 800fa42:	6023      	str	r3, [r4, #0]
 800fa44:	b016      	add	sp, #88	; 0x58
 800fa46:	bd70      	pop	{r4, r5, r6, pc}

0800fa48 <__smakebuf_r>:
 800fa48:	898b      	ldrh	r3, [r1, #12]
 800fa4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fa4c:	079d      	lsls	r5, r3, #30
 800fa4e:	4606      	mov	r6, r0
 800fa50:	460c      	mov	r4, r1
 800fa52:	d507      	bpl.n	800fa64 <__smakebuf_r+0x1c>
 800fa54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fa58:	6023      	str	r3, [r4, #0]
 800fa5a:	6123      	str	r3, [r4, #16]
 800fa5c:	2301      	movs	r3, #1
 800fa5e:	6163      	str	r3, [r4, #20]
 800fa60:	b002      	add	sp, #8
 800fa62:	bd70      	pop	{r4, r5, r6, pc}
 800fa64:	ab01      	add	r3, sp, #4
 800fa66:	466a      	mov	r2, sp
 800fa68:	f7ff ffc9 	bl	800f9fe <__swhatbuf_r>
 800fa6c:	9900      	ldr	r1, [sp, #0]
 800fa6e:	4605      	mov	r5, r0
 800fa70:	4630      	mov	r0, r6
 800fa72:	f7fb fce1 	bl	800b438 <_malloc_r>
 800fa76:	b948      	cbnz	r0, 800fa8c <__smakebuf_r+0x44>
 800fa78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa7c:	059a      	lsls	r2, r3, #22
 800fa7e:	d4ef      	bmi.n	800fa60 <__smakebuf_r+0x18>
 800fa80:	f023 0303 	bic.w	r3, r3, #3
 800fa84:	f043 0302 	orr.w	r3, r3, #2
 800fa88:	81a3      	strh	r3, [r4, #12]
 800fa8a:	e7e3      	b.n	800fa54 <__smakebuf_r+0xc>
 800fa8c:	4b0d      	ldr	r3, [pc, #52]	; (800fac4 <__smakebuf_r+0x7c>)
 800fa8e:	62b3      	str	r3, [r6, #40]	; 0x28
 800fa90:	89a3      	ldrh	r3, [r4, #12]
 800fa92:	6020      	str	r0, [r4, #0]
 800fa94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa98:	81a3      	strh	r3, [r4, #12]
 800fa9a:	9b00      	ldr	r3, [sp, #0]
 800fa9c:	6163      	str	r3, [r4, #20]
 800fa9e:	9b01      	ldr	r3, [sp, #4]
 800faa0:	6120      	str	r0, [r4, #16]
 800faa2:	b15b      	cbz	r3, 800fabc <__smakebuf_r+0x74>
 800faa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800faa8:	4630      	mov	r0, r6
 800faaa:	f000 f86b 	bl	800fb84 <_isatty_r>
 800faae:	b128      	cbz	r0, 800fabc <__smakebuf_r+0x74>
 800fab0:	89a3      	ldrh	r3, [r4, #12]
 800fab2:	f023 0303 	bic.w	r3, r3, #3
 800fab6:	f043 0301 	orr.w	r3, r3, #1
 800faba:	81a3      	strh	r3, [r4, #12]
 800fabc:	89a0      	ldrh	r0, [r4, #12]
 800fabe:	4305      	orrs	r5, r0
 800fac0:	81a5      	strh	r5, [r4, #12]
 800fac2:	e7cd      	b.n	800fa60 <__smakebuf_r+0x18>
 800fac4:	0800b1d9 	.word	0x0800b1d9

0800fac8 <_malloc_usable_size_r>:
 800fac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800facc:	1f18      	subs	r0, r3, #4
 800face:	2b00      	cmp	r3, #0
 800fad0:	bfbc      	itt	lt
 800fad2:	580b      	ldrlt	r3, [r1, r0]
 800fad4:	18c0      	addlt	r0, r0, r3
 800fad6:	4770      	bx	lr

0800fad8 <_raise_r>:
 800fad8:	291f      	cmp	r1, #31
 800fada:	b538      	push	{r3, r4, r5, lr}
 800fadc:	4604      	mov	r4, r0
 800fade:	460d      	mov	r5, r1
 800fae0:	d904      	bls.n	800faec <_raise_r+0x14>
 800fae2:	2316      	movs	r3, #22
 800fae4:	6003      	str	r3, [r0, #0]
 800fae6:	f04f 30ff 	mov.w	r0, #4294967295
 800faea:	bd38      	pop	{r3, r4, r5, pc}
 800faec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800faee:	b112      	cbz	r2, 800faf6 <_raise_r+0x1e>
 800faf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800faf4:	b94b      	cbnz	r3, 800fb0a <_raise_r+0x32>
 800faf6:	4620      	mov	r0, r4
 800faf8:	f000 f830 	bl	800fb5c <_getpid_r>
 800fafc:	462a      	mov	r2, r5
 800fafe:	4601      	mov	r1, r0
 800fb00:	4620      	mov	r0, r4
 800fb02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb06:	f000 b817 	b.w	800fb38 <_kill_r>
 800fb0a:	2b01      	cmp	r3, #1
 800fb0c:	d00a      	beq.n	800fb24 <_raise_r+0x4c>
 800fb0e:	1c59      	adds	r1, r3, #1
 800fb10:	d103      	bne.n	800fb1a <_raise_r+0x42>
 800fb12:	2316      	movs	r3, #22
 800fb14:	6003      	str	r3, [r0, #0]
 800fb16:	2001      	movs	r0, #1
 800fb18:	e7e7      	b.n	800faea <_raise_r+0x12>
 800fb1a:	2400      	movs	r4, #0
 800fb1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fb20:	4628      	mov	r0, r5
 800fb22:	4798      	blx	r3
 800fb24:	2000      	movs	r0, #0
 800fb26:	e7e0      	b.n	800faea <_raise_r+0x12>

0800fb28 <raise>:
 800fb28:	4b02      	ldr	r3, [pc, #8]	; (800fb34 <raise+0xc>)
 800fb2a:	4601      	mov	r1, r0
 800fb2c:	6818      	ldr	r0, [r3, #0]
 800fb2e:	f7ff bfd3 	b.w	800fad8 <_raise_r>
 800fb32:	bf00      	nop
 800fb34:	200000a8 	.word	0x200000a8

0800fb38 <_kill_r>:
 800fb38:	b538      	push	{r3, r4, r5, lr}
 800fb3a:	4d07      	ldr	r5, [pc, #28]	; (800fb58 <_kill_r+0x20>)
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	4604      	mov	r4, r0
 800fb40:	4608      	mov	r0, r1
 800fb42:	4611      	mov	r1, r2
 800fb44:	602b      	str	r3, [r5, #0]
 800fb46:	f7f2 fdfd 	bl	8002744 <_kill>
 800fb4a:	1c43      	adds	r3, r0, #1
 800fb4c:	d102      	bne.n	800fb54 <_kill_r+0x1c>
 800fb4e:	682b      	ldr	r3, [r5, #0]
 800fb50:	b103      	cbz	r3, 800fb54 <_kill_r+0x1c>
 800fb52:	6023      	str	r3, [r4, #0]
 800fb54:	bd38      	pop	{r3, r4, r5, pc}
 800fb56:	bf00      	nop
 800fb58:	20008c60 	.word	0x20008c60

0800fb5c <_getpid_r>:
 800fb5c:	f7f2 bdea 	b.w	8002734 <_getpid>

0800fb60 <_fstat_r>:
 800fb60:	b538      	push	{r3, r4, r5, lr}
 800fb62:	4d07      	ldr	r5, [pc, #28]	; (800fb80 <_fstat_r+0x20>)
 800fb64:	2300      	movs	r3, #0
 800fb66:	4604      	mov	r4, r0
 800fb68:	4608      	mov	r0, r1
 800fb6a:	4611      	mov	r1, r2
 800fb6c:	602b      	str	r3, [r5, #0]
 800fb6e:	f7f2 fe2c 	bl	80027ca <_fstat>
 800fb72:	1c43      	adds	r3, r0, #1
 800fb74:	d102      	bne.n	800fb7c <_fstat_r+0x1c>
 800fb76:	682b      	ldr	r3, [r5, #0]
 800fb78:	b103      	cbz	r3, 800fb7c <_fstat_r+0x1c>
 800fb7a:	6023      	str	r3, [r4, #0]
 800fb7c:	bd38      	pop	{r3, r4, r5, pc}
 800fb7e:	bf00      	nop
 800fb80:	20008c60 	.word	0x20008c60

0800fb84 <_isatty_r>:
 800fb84:	b538      	push	{r3, r4, r5, lr}
 800fb86:	4d06      	ldr	r5, [pc, #24]	; (800fba0 <_isatty_r+0x1c>)
 800fb88:	2300      	movs	r3, #0
 800fb8a:	4604      	mov	r4, r0
 800fb8c:	4608      	mov	r0, r1
 800fb8e:	602b      	str	r3, [r5, #0]
 800fb90:	f7f2 fe2b 	bl	80027ea <_isatty>
 800fb94:	1c43      	adds	r3, r0, #1
 800fb96:	d102      	bne.n	800fb9e <_isatty_r+0x1a>
 800fb98:	682b      	ldr	r3, [r5, #0]
 800fb9a:	b103      	cbz	r3, 800fb9e <_isatty_r+0x1a>
 800fb9c:	6023      	str	r3, [r4, #0]
 800fb9e:	bd38      	pop	{r3, r4, r5, pc}
 800fba0:	20008c60 	.word	0x20008c60

0800fba4 <_init>:
 800fba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fba6:	bf00      	nop
 800fba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbaa:	bc08      	pop	{r3}
 800fbac:	469e      	mov	lr, r3
 800fbae:	4770      	bx	lr

0800fbb0 <_fini>:
 800fbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbb2:	bf00      	nop
 800fbb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbb6:	bc08      	pop	{r3}
 800fbb8:	469e      	mov	lr, r3
 800fbba:	4770      	bx	lr
