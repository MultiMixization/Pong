
ZyrPONG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a54  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08007c04  08007c04  00017c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cec  08007cec  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007cec  08007cec  00017cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cf4  08007cf4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cf4  08007cf4  00017cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cf8  08007cf8  00017cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007cfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000086ec  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008760  20008760  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021278  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004179  00000000  00000000  0004131c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c38  00000000  00000000  00045498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a98  00000000  00000000  000470d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028f02  00000000  00000000  00048b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000206ad  00000000  00000000  00071a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f161e  00000000  00000000  00092117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00183735  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007fc8  00000000  00000000  00183788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007bec 	.word	0x08007bec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08007bec 	.word	0x08007bec

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b083      	sub	sp, #12
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	4a06      	ldr	r2, [pc, #24]	; (80005f8 <vApplicationGetIdleTaskMemory+0x30>)
 80005de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2280      	movs	r2, #128	; 0x80
 80005e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000090 	.word	0x20000090
 80005f8:	20000148 	.word	0x20000148

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b5b0      	push	{r4, r5, r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000602:	f001 f8c5 	bl	8001790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f82f 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060a:	f000 fa9d 	bl	8000b48 <MX_GPIO_Init>
  MX_CRC_Init();
 800060e:	f000 f895 	bl	800073c <MX_CRC_Init>
  MX_DMA2D_Init();
 8000612:	f000 f8a7 	bl	8000764 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000616:	f000 fa47 	bl	8000aa8 <MX_FMC_Init>
  MX_I2C3_Init();
 800061a:	f000 f8d5 	bl	80007c8 <MX_I2C3_Init>
  MX_LTDC_Init();
 800061e:	f000 f913 	bl	8000848 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000622:	f000 f991 	bl	8000948 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000626:	f000 f9c5 	bl	80009b4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800062a:	f000 fa13 	bl	8000a54 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <main+0x60>)
 8000630:	1d3c      	adds	r4, r7, #4
 8000632:	461d      	mov	r5, r3
 8000634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000638:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800063c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f005 f810 	bl	800566a <osThreadCreate>
 800064a:	4603      	mov	r3, r0
 800064c:	4a04      	ldr	r2, [pc, #16]	; (8000660 <main+0x64>)
 800064e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000650:	f005 f804 	bl	800565c <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  printf("DUpa");
 8000654:	4803      	ldr	r0, [pc, #12]	; (8000664 <main+0x68>)
 8000656:	f006 fc5d 	bl	8006f14 <iprintf>
 800065a:	e7fb      	b.n	8000654 <main+0x58>
 800065c:	08007c18 	.word	0x08007c18
 8000660:	200005a4 	.word	0x200005a4
 8000664:	08007c10 	.word	0x08007c10

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	; 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	2230      	movs	r2, #48	; 0x30
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f006 fbaf 	bl	8006dda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	4b28      	ldr	r3, [pc, #160]	; (8000734 <SystemClock_Config+0xcc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	4a27      	ldr	r2, [pc, #156]	; (8000734 <SystemClock_Config+0xcc>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	; 0x40
 800069c:	4b25      	ldr	r3, [pc, #148]	; (8000734 <SystemClock_Config+0xcc>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b22      	ldr	r3, [pc, #136]	; (8000738 <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006b4:	4a20      	ldr	r2, [pc, #128]	; (8000738 <SystemClock_Config+0xd0>)
 80006b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <SystemClock_Config+0xd0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c8:	2302      	movs	r3, #2
 80006ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	2301      	movs	r3, #1
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d0:	2310      	movs	r3, #16
 80006d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d4:	2302      	movs	r3, #2
 80006d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d8:	2300      	movs	r3, #0
 80006da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006dc:	2308      	movs	r3, #8
 80006de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006e0:	2348      	movs	r3, #72	; 0x48
 80006e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006e8:	2303      	movs	r3, #3
 80006ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 0320 	add.w	r3, r7, #32
 80006f0:	4618      	mov	r0, r3
 80006f2:	f002 faf9 	bl	8002ce8 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006fc:	f000 fb80 	bl	8000e00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000704:	2302      	movs	r3, #2
 8000706:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800070c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000710:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	2102      	movs	r1, #2
 800071c:	4618      	mov	r0, r3
 800071e:	f002 fd5b 	bl	80031d8 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000728:	f000 fb6a 	bl	8000e00 <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	3750      	adds	r7, #80	; 0x50
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_CRC_Init+0x20>)
 8000742:	4a07      	ldr	r2, [pc, #28]	; (8000760 <MX_CRC_Init+0x24>)
 8000744:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_CRC_Init+0x20>)
 8000748:	f001 f946 	bl	80019d8 <HAL_CRC_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000752:	f000 fb55 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000348 	.word	0x20000348
 8000760:	40023000 	.word	0x40023000

08000764 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MX_DMA2D_Init+0x5c>)
 800076a:	4a16      	ldr	r2, [pc, #88]	; (80007c4 <MX_DMA2D_Init+0x60>)
 800076c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800076e:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_DMA2D_Init+0x5c>)
 8000770:	2200      	movs	r2, #0
 8000772:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_DMA2D_Init+0x5c>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_DMA2D_Init+0x5c>)
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_DMA2D_Init+0x5c>)
 8000782:	2200      	movs	r2, #0
 8000784:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_DMA2D_Init+0x5c>)
 8000788:	2200      	movs	r2, #0
 800078a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_DMA2D_Init+0x5c>)
 800078e:	2200      	movs	r2, #0
 8000790:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_DMA2D_Init+0x5c>)
 8000794:	2200      	movs	r2, #0
 8000796:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000798:	4809      	ldr	r0, [pc, #36]	; (80007c0 <MX_DMA2D_Init+0x5c>)
 800079a:	f001 f9cb 	bl	8001b34 <HAL_DMA2D_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80007a4:	f000 fb2c 	bl	8000e00 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80007a8:	2101      	movs	r1, #1
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_DMA2D_Init+0x5c>)
 80007ac:	f001 fb1c 	bl	8001de8 <HAL_DMA2D_ConfigLayer>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80007b6:	f000 fb23 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000350 	.word	0x20000350
 80007c4:	4002b000 	.word	0x4002b000

080007c8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <MX_I2C3_Init+0x74>)
 80007ce:	4a1c      	ldr	r2, [pc, #112]	; (8000840 <MX_I2C3_Init+0x78>)
 80007d0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_I2C3_Init+0x74>)
 80007d4:	4a1b      	ldr	r2, [pc, #108]	; (8000844 <MX_I2C3_Init+0x7c>)
 80007d6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_I2C3_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80007de:	4b17      	ldr	r3, [pc, #92]	; (800083c <MX_I2C3_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e4:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_I2C3_Init+0x74>)
 80007e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ea:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_I2C3_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_I2C3_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f8:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_I2C3_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_I2C3_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000804:	480d      	ldr	r0, [pc, #52]	; (800083c <MX_I2C3_Init+0x74>)
 8000806:	f001 fd47 	bl	8002298 <HAL_I2C_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000810:	f000 faf6 	bl	8000e00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000814:	2100      	movs	r1, #0
 8000816:	4809      	ldr	r0, [pc, #36]	; (800083c <MX_I2C3_Init+0x74>)
 8000818:	f001 fe82 	bl	8002520 <HAL_I2CEx_ConfigAnalogFilter>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000822:	f000 faed 	bl	8000e00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000826:	2100      	movs	r1, #0
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_I2C3_Init+0x74>)
 800082a:	f001 feb5 	bl	8002598 <HAL_I2CEx_ConfigDigitalFilter>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000834:	f000 fae4 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000390 	.word	0x20000390
 8000840:	40005c00 	.word	0x40005c00
 8000844:	000186a0 	.word	0x000186a0

08000848 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08e      	sub	sp, #56	; 0x38
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2234      	movs	r2, #52	; 0x34
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f006 fac0 	bl	8006dda <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800085a:	4b39      	ldr	r3, [pc, #228]	; (8000940 <MX_LTDC_Init+0xf8>)
 800085c:	4a39      	ldr	r2, [pc, #228]	; (8000944 <MX_LTDC_Init+0xfc>)
 800085e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000860:	4b37      	ldr	r3, [pc, #220]	; (8000940 <MX_LTDC_Init+0xf8>)
 8000862:	2200      	movs	r2, #0
 8000864:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000866:	4b36      	ldr	r3, [pc, #216]	; (8000940 <MX_LTDC_Init+0xf8>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800086c:	4b34      	ldr	r3, [pc, #208]	; (8000940 <MX_LTDC_Init+0xf8>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000872:	4b33      	ldr	r3, [pc, #204]	; (8000940 <MX_LTDC_Init+0xf8>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000878:	4b31      	ldr	r3, [pc, #196]	; (8000940 <MX_LTDC_Init+0xf8>)
 800087a:	2209      	movs	r2, #9
 800087c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800087e:	4b30      	ldr	r3, [pc, #192]	; (8000940 <MX_LTDC_Init+0xf8>)
 8000880:	2201      	movs	r2, #1
 8000882:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000884:	4b2e      	ldr	r3, [pc, #184]	; (8000940 <MX_LTDC_Init+0xf8>)
 8000886:	221d      	movs	r2, #29
 8000888:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800088a:	4b2d      	ldr	r3, [pc, #180]	; (8000940 <MX_LTDC_Init+0xf8>)
 800088c:	2203      	movs	r2, #3
 800088e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000890:	4b2b      	ldr	r3, [pc, #172]	; (8000940 <MX_LTDC_Init+0xf8>)
 8000892:	f240 120d 	movw	r2, #269	; 0x10d
 8000896:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000898:	4b29      	ldr	r3, [pc, #164]	; (8000940 <MX_LTDC_Init+0xf8>)
 800089a:	f240 1243 	movw	r2, #323	; 0x143
 800089e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80008a0:	4b27      	ldr	r3, [pc, #156]	; (8000940 <MX_LTDC_Init+0xf8>)
 80008a2:	f240 1217 	movw	r2, #279	; 0x117
 80008a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_LTDC_Init+0xf8>)
 80008aa:	f240 1247 	movw	r2, #327	; 0x147
 80008ae:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80008b0:	4b23      	ldr	r3, [pc, #140]	; (8000940 <MX_LTDC_Init+0xf8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80008b8:	4b21      	ldr	r3, [pc, #132]	; (8000940 <MX_LTDC_Init+0xf8>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <MX_LTDC_Init+0xf8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008c8:	481d      	ldr	r0, [pc, #116]	; (8000940 <MX_LTDC_Init+0xf8>)
 80008ca:	f001 fea5 	bl	8002618 <HAL_LTDC_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80008d4:	f000 fa94 	bl	8000e00 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80008dc:	23f0      	movs	r3, #240	; 0xf0
 80008de:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80008e4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80008e8:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80008ea:	2302      	movs	r3, #2
 80008ec:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80008ee:	23ff      	movs	r3, #255	; 0xff
 80008f0:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80008f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008fa:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80008fc:	2307      	movs	r3, #7
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000900:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000906:	23f0      	movs	r3, #240	; 0xf0
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800090a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800090e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2200      	movs	r2, #0
 8000926:	4619      	mov	r1, r3
 8000928:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_LTDC_Init+0xf8>)
 800092a:	f002 f807 	bl	800293c <HAL_LTDC_ConfigLayer>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000934:	f000 fa64 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	3738      	adds	r7, #56	; 0x38
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	200003e4 	.word	0x200003e4
 8000944:	40016800 	.word	0x40016800

08000948 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800094c:	4b17      	ldr	r3, [pc, #92]	; (80009ac <MX_SPI5_Init+0x64>)
 800094e:	4a18      	ldr	r2, [pc, #96]	; (80009b0 <MX_SPI5_Init+0x68>)
 8000950:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <MX_SPI5_Init+0x64>)
 8000954:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000958:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <MX_SPI5_Init+0x64>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <MX_SPI5_Init+0x64>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_SPI5_Init+0x64>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_SPI5_Init+0x64>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_SPI5_Init+0x64>)
 8000974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000978:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_SPI5_Init+0x64>)
 800097c:	2218      	movs	r2, #24
 800097e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000980:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <MX_SPI5_Init+0x64>)
 8000982:	2200      	movs	r2, #0
 8000984:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_SPI5_Init+0x64>)
 8000988:	2200      	movs	r2, #0
 800098a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800098c:	4b07      	ldr	r3, [pc, #28]	; (80009ac <MX_SPI5_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_SPI5_Init+0x64>)
 8000994:	220a      	movs	r2, #10
 8000996:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_SPI5_Init+0x64>)
 800099a:	f003 f863 	bl	8003a64 <HAL_SPI_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80009a4:	f000 fa2c 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	2000048c 	.word	0x2000048c
 80009b0:	40015000 	.word	0x40015000

080009b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ba:	f107 0308 	add.w	r3, r7, #8
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c8:	463b      	mov	r3, r7
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <MX_TIM1_Init+0x98>)
 80009d2:	4a1f      	ldr	r2, [pc, #124]	; (8000a50 <MX_TIM1_Init+0x9c>)
 80009d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <MX_TIM1_Init+0x98>)
 80009d8:	2200      	movs	r2, #0
 80009da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <MX_TIM1_Init+0x98>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_TIM1_Init+0x98>)
 80009e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_TIM1_Init+0x98>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <MX_TIM1_Init+0x98>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_TIM1_Init+0x98>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009fc:	4813      	ldr	r0, [pc, #76]	; (8000a4c <MX_TIM1_Init+0x98>)
 80009fe:	f003 f8ba 	bl	8003b76 <HAL_TIM_Base_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a08:	f000 f9fa 	bl	8000e00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a12:	f107 0308 	add.w	r3, r7, #8
 8000a16:	4619      	mov	r1, r3
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <MX_TIM1_Init+0x98>)
 8000a1a:	f003 fa73 	bl	8003f04 <HAL_TIM_ConfigClockSource>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a24:	f000 f9ec 	bl	8000e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a30:	463b      	mov	r3, r7
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_TIM1_Init+0x98>)
 8000a36:	f003 fc8f 	bl	8004358 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a40:	f000 f9de 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200004e4 	.word	0x200004e4
 8000a50:	40010000 	.word	0x40010000

08000a54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_USART1_UART_Init+0x4c>)
 8000a5a:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <MX_USART1_UART_Init+0x50>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MX_USART1_UART_Init+0x4c>)
 8000a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_USART1_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_USART1_UART_Init+0x4c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <MX_USART1_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_USART1_UART_Init+0x4c>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <MX_USART1_UART_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_USART1_UART_Init+0x4c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_USART1_UART_Init+0x4c>)
 8000a8c:	f003 fcf4 	bl	8004478 <HAL_UART_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a96:	f000 f9b3 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000052c 	.word	0x2000052c
 8000aa4:	40011000 	.word	0x40011000

08000aa8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
 8000abc:	615a      	str	r2, [r3, #20]
 8000abe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <MX_FMC_Init+0x98>)
 8000ac2:	4a20      	ldr	r2, [pc, #128]	; (8000b44 <MX_FMC_Init+0x9c>)
 8000ac4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <MX_FMC_Init+0x98>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000acc:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <MX_FMC_Init+0x98>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000ad2:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <MX_FMC_Init+0x98>)
 8000ad4:	2204      	movs	r2, #4
 8000ad6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000ad8:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <MX_FMC_Init+0x98>)
 8000ada:	2210      	movs	r2, #16
 8000adc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <MX_FMC_Init+0x98>)
 8000ae0:	2240      	movs	r2, #64	; 0x40
 8000ae2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000ae4:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <MX_FMC_Init+0x98>)
 8000ae6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000aea:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <MX_FMC_Init+0x98>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000af2:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <MX_FMC_Init+0x98>)
 8000af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000af8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_FMC_Init+0x98>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <MX_FMC_Init+0x98>)
 8000b02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b06:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b0c:	2307      	movs	r3, #7
 8000b0e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b10:	2304      	movs	r3, #4
 8000b12:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b14:	2307      	movs	r3, #7
 8000b16:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b20:	2302      	movs	r3, #2
 8000b22:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	4619      	mov	r1, r3
 8000b28:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_FMC_Init+0x98>)
 8000b2a:	f002 ff67 	bl	80039fc <HAL_SDRAM_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b34:	f000 f964 	bl	8000e00 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b38:	bf00      	nop
 8000b3a:	3720      	adds	r7, #32
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000570 	.word	0x20000570
 8000b44:	a0000140 	.word	0xa0000140

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08e      	sub	sp, #56	; 0x38
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
 8000b62:	4b8a      	ldr	r3, [pc, #552]	; (8000d8c <MX_GPIO_Init+0x244>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a89      	ldr	r2, [pc, #548]	; (8000d8c <MX_GPIO_Init+0x244>)
 8000b68:	f043 0304 	orr.w	r3, r3, #4
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b87      	ldr	r3, [pc, #540]	; (8000d8c <MX_GPIO_Init+0x244>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0304 	and.w	r3, r3, #4
 8000b76:	623b      	str	r3, [r7, #32]
 8000b78:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
 8000b7e:	4b83      	ldr	r3, [pc, #524]	; (8000d8c <MX_GPIO_Init+0x244>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a82      	ldr	r2, [pc, #520]	; (8000d8c <MX_GPIO_Init+0x244>)
 8000b84:	f043 0320 	orr.w	r3, r3, #32
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b80      	ldr	r3, [pc, #512]	; (8000d8c <MX_GPIO_Init+0x244>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0320 	and.w	r3, r3, #32
 8000b92:	61fb      	str	r3, [r7, #28]
 8000b94:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
 8000b9a:	4b7c      	ldr	r3, [pc, #496]	; (8000d8c <MX_GPIO_Init+0x244>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a7b      	ldr	r2, [pc, #492]	; (8000d8c <MX_GPIO_Init+0x244>)
 8000ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b79      	ldr	r3, [pc, #484]	; (8000d8c <MX_GPIO_Init+0x244>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bae:	61bb      	str	r3, [r7, #24]
 8000bb0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	4b75      	ldr	r3, [pc, #468]	; (8000d8c <MX_GPIO_Init+0x244>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a74      	ldr	r2, [pc, #464]	; (8000d8c <MX_GPIO_Init+0x244>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b72      	ldr	r3, [pc, #456]	; (8000d8c <MX_GPIO_Init+0x244>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	4b6e      	ldr	r3, [pc, #440]	; (8000d8c <MX_GPIO_Init+0x244>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a6d      	ldr	r2, [pc, #436]	; (8000d8c <MX_GPIO_Init+0x244>)
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b6b      	ldr	r3, [pc, #428]	; (8000d8c <MX_GPIO_Init+0x244>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b67      	ldr	r3, [pc, #412]	; (8000d8c <MX_GPIO_Init+0x244>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a66      	ldr	r2, [pc, #408]	; (8000d8c <MX_GPIO_Init+0x244>)
 8000bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b64      	ldr	r3, [pc, #400]	; (8000d8c <MX_GPIO_Init+0x244>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	4b60      	ldr	r3, [pc, #384]	; (8000d8c <MX_GPIO_Init+0x244>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a5f      	ldr	r2, [pc, #380]	; (8000d8c <MX_GPIO_Init+0x244>)
 8000c10:	f043 0310 	orr.w	r3, r3, #16
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b5d      	ldr	r3, [pc, #372]	; (8000d8c <MX_GPIO_Init+0x244>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0310 	and.w	r3, r3, #16
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	4b59      	ldr	r3, [pc, #356]	; (8000d8c <MX_GPIO_Init+0x244>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a58      	ldr	r2, [pc, #352]	; (8000d8c <MX_GPIO_Init+0x244>)
 8000c2c:	f043 0308 	orr.w	r3, r3, #8
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b56      	ldr	r3, [pc, #344]	; (8000d8c <MX_GPIO_Init+0x244>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0308 	and.w	r3, r3, #8
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2116      	movs	r1, #22
 8000c42:	4853      	ldr	r0, [pc, #332]	; (8000d90 <MX_GPIO_Init+0x248>)
 8000c44:	f001 fb0e 	bl	8002264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2180      	movs	r1, #128	; 0x80
 8000c4c:	4851      	ldr	r0, [pc, #324]	; (8000d94 <MX_GPIO_Init+0x24c>)
 8000c4e:	f001 fb09 	bl	8002264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000c58:	484f      	ldr	r0, [pc, #316]	; (8000d98 <MX_GPIO_Init+0x250>)
 8000c5a:	f001 fb03 	bl	8002264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000c64:	484d      	ldr	r0, [pc, #308]	; (8000d9c <MX_GPIO_Init+0x254>)
 8000c66:	f001 fafd 	bl	8002264 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000c6a:	2316      	movs	r3, #22
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4843      	ldr	r0, [pc, #268]	; (8000d90 <MX_GPIO_Init+0x248>)
 8000c82:	f001 f943 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000c86:	f248 0307 	movw	r3, #32775	; 0x8007
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c8c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	483d      	ldr	r0, [pc, #244]	; (8000d94 <MX_GPIO_Init+0x24c>)
 8000c9e:	f001 f935 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000ca2:	2380      	movs	r3, #128	; 0x80
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4836      	ldr	r0, [pc, #216]	; (8000d94 <MX_GPIO_Init+0x24c>)
 8000cba:	f001 f927 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000cbe:	2320      	movs	r3, #32
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cc2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	482f      	ldr	r0, [pc, #188]	; (8000d90 <MX_GPIO_Init+0x248>)
 8000cd4:	f001 f91a 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000cd8:	2304      	movs	r3, #4
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce8:	4619      	mov	r1, r3
 8000cea:	482d      	ldr	r0, [pc, #180]	; (8000da0 <MX_GPIO_Init+0x258>)
 8000cec:	f001 f90e 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000cf0:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000d02:	230c      	movs	r3, #12
 8000d04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4824      	ldr	r0, [pc, #144]	; (8000da0 <MX_GPIO_Init+0x258>)
 8000d0e:	f001 f8fd 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000d12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d24:	4619      	mov	r1, r3
 8000d26:	481e      	ldr	r0, [pc, #120]	; (8000da0 <MX_GPIO_Init+0x258>)
 8000d28:	f001 f8f0 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000d2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4815      	ldr	r0, [pc, #84]	; (8000d98 <MX_GPIO_Init+0x250>)
 8000d42:	f001 f8e3 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000d46:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	480e      	ldr	r0, [pc, #56]	; (8000d98 <MX_GPIO_Init+0x250>)
 8000d60:	f001 f8d4 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000d64:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4807      	ldr	r0, [pc, #28]	; (8000d9c <MX_GPIO_Init+0x254>)
 8000d7e:	f001 f8c5 	bl	8001f0c <HAL_GPIO_Init>

}
 8000d82:	bf00      	nop
 8000d84:	3738      	adds	r7, #56	; 0x38
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020800 	.word	0x40020800
 8000d94:	40020000 	.word	0x40020000
 8000d98:	40020c00 	.word	0x40020c00
 8000d9c:	40021800 	.word	0x40021800
 8000da0:	40020400 	.word	0x40020400

08000da4 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, ptr, len, 50);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	2332      	movs	r3, #50	; 0x32
 8000db6:	68b9      	ldr	r1, [r7, #8]
 8000db8:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <_write+0x24>)
 8000dba:	f003 fbaa 	bl	8004512 <HAL_UART_Transmit>
	return len;
 8000dbe:	687b      	ldr	r3, [r7, #4]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	2000052c 	.word	0x2000052c

08000dcc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f004 fc94 	bl	8005702 <osDelay>
 8000dda:	e7fb      	b.n	8000dd4 <StartDefaultTask+0x8>

08000ddc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d101      	bne.n	8000df2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dee:	f000 fcf1 	bl	80017d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40001000 	.word	0x40001000

08000e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e04:	b672      	cpsid	i
}
 8000e06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <Error_Handler+0x8>
	...

08000e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_MspInit+0x54>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	4a11      	ldr	r2, [pc, #68]	; (8000e60 <HAL_MspInit+0x54>)
 8000e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e20:	6453      	str	r3, [r2, #68]	; 0x44
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_MspInit+0x54>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	603b      	str	r3, [r7, #0]
 8000e32:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <HAL_MspInit+0x54>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <HAL_MspInit+0x54>)
 8000e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3e:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <HAL_MspInit+0x54>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	210f      	movs	r1, #15
 8000e4e:	f06f 0001 	mvn.w	r0, #1
 8000e52:	f000 fd97 	bl	8001984 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800

08000e64 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <HAL_CRC_MspInit+0x3c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d10d      	bne.n	8000e92 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_CRC_MspInit+0x40>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a09      	ldr	r2, [pc, #36]	; (8000ea4 <HAL_CRC_MspInit+0x40>)
 8000e80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <HAL_CRC_MspInit+0x40>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40023000 	.word	0x40023000
 8000ea4:	40023800 	.word	0x40023800

08000ea8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <HAL_DMA2D_MspInit+0x48>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d115      	bne.n	8000ee6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <HAL_DMA2D_MspInit+0x4c>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a0c      	ldr	r2, [pc, #48]	; (8000ef4 <HAL_DMA2D_MspInit+0x4c>)
 8000ec4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <HAL_DMA2D_MspInit+0x4c>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2105      	movs	r1, #5
 8000eda:	205a      	movs	r0, #90	; 0x5a
 8000edc:	f000 fd52 	bl	8001984 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000ee0:	205a      	movs	r0, #90	; 0x5a
 8000ee2:	f000 fd6b 	bl	80019bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	4002b000 	.word	0x4002b000
 8000ef4:	40023800 	.word	0x40023800

08000ef8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a29      	ldr	r2, [pc, #164]	; (8000fbc <HAL_I2C_MspInit+0xc4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d14b      	bne.n	8000fb2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4b28      	ldr	r3, [pc, #160]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a27      	ldr	r2, [pc, #156]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b25      	ldr	r3, [pc, #148]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a20      	ldr	r2, [pc, #128]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000f52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f58:	2312      	movs	r3, #18
 8000f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f64:	2304      	movs	r3, #4
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4815      	ldr	r0, [pc, #84]	; (8000fc4 <HAL_I2C_MspInit+0xcc>)
 8000f70:	f000 ffcc 	bl	8001f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000f74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f7a:	2312      	movs	r3, #18
 8000f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f86:	2304      	movs	r3, #4
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <HAL_I2C_MspInit+0xd0>)
 8000f92:	f000 ffbb 	bl	8001f0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000fa0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_I2C_MspInit+0xc8>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000fb2:	bf00      	nop
 8000fb4:	3728      	adds	r7, #40	; 0x28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40005c00 	.word	0x40005c00
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40020800 	.word	0x40020800
 8000fc8:	40020000 	.word	0x40020000

08000fcc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b09a      	sub	sp, #104	; 0x68
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe8:	2230      	movs	r2, #48	; 0x30
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f005 fef4 	bl	8006dda <memset>
  if(hltdc->Instance==LTDC)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a85      	ldr	r2, [pc, #532]	; (800120c <HAL_LTDC_MspInit+0x240>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	f040 8102 	bne.w	8001202 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000ffe:	2308      	movs	r3, #8
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001002:	2332      	movs	r3, #50	; 0x32
 8001004:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001006:	2302      	movs	r3, #2
 8001008:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800100a:	2300      	movs	r3, #0
 800100c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	4618      	mov	r0, r3
 8001014:	f002 fb32 	bl	800367c <HAL_RCCEx_PeriphCLKConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800101e:	f7ff feef 	bl	8000e00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	623b      	str	r3, [r7, #32]
 8001026:	4b7a      	ldr	r3, [pc, #488]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	4a79      	ldr	r2, [pc, #484]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 800102c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001030:	6453      	str	r3, [r2, #68]	; 0x44
 8001032:	4b77      	ldr	r3, [pc, #476]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800103a:	623b      	str	r3, [r7, #32]
 800103c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
 8001042:	4b73      	ldr	r3, [pc, #460]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a72      	ldr	r2, [pc, #456]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 8001048:	f043 0320 	orr.w	r3, r3, #32
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b70      	ldr	r3, [pc, #448]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0320 	and.w	r3, r3, #32
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
 800105e:	4b6c      	ldr	r3, [pc, #432]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a6b      	ldr	r2, [pc, #428]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b69      	ldr	r3, [pc, #420]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	61bb      	str	r3, [r7, #24]
 8001074:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	4b65      	ldr	r3, [pc, #404]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a64      	ldr	r2, [pc, #400]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b62      	ldr	r3, [pc, #392]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	4b5e      	ldr	r3, [pc, #376]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a5d      	ldr	r2, [pc, #372]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 800109c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b5b      	ldr	r3, [pc, #364]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	4b57      	ldr	r3, [pc, #348]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a56      	ldr	r2, [pc, #344]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 80010b8:	f043 0304 	orr.w	r3, r3, #4
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b54      	ldr	r3, [pc, #336]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0304 	and.w	r3, r3, #4
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	4b50      	ldr	r3, [pc, #320]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a4f      	ldr	r2, [pc, #316]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 80010d4:	f043 0308 	orr.w	r3, r3, #8
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b4d      	ldr	r3, [pc, #308]	; (8001210 <HAL_LTDC_MspInit+0x244>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0308 	and.w	r3, r3, #8
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80010e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ea:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010f8:	230e      	movs	r3, #14
 80010fa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001100:	4619      	mov	r1, r3
 8001102:	4844      	ldr	r0, [pc, #272]	; (8001214 <HAL_LTDC_MspInit+0x248>)
 8001104:	f000 ff02 	bl	8001f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001108:	f641 0358 	movw	r3, #6232	; 0x1858
 800110c:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800111a:	230e      	movs	r3, #14
 800111c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001122:	4619      	mov	r1, r3
 8001124:	483c      	ldr	r0, [pc, #240]	; (8001218 <HAL_LTDC_MspInit+0x24c>)
 8001126:	f000 fef1 	bl	8001f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800112a:	2303      	movs	r3, #3
 800112c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800113a:	2309      	movs	r3, #9
 800113c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001142:	4619      	mov	r1, r3
 8001144:	4835      	ldr	r0, [pc, #212]	; (800121c <HAL_LTDC_MspInit+0x250>)
 8001146:	f000 fee1 	bl	8001f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800114a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800114e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2300      	movs	r3, #0
 800115a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800115c:	230e      	movs	r3, #14
 800115e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001160:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001164:	4619      	mov	r1, r3
 8001166:	482d      	ldr	r0, [pc, #180]	; (800121c <HAL_LTDC_MspInit+0x250>)
 8001168:	f000 fed0 	bl	8001f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800116c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001170:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800117e:	230e      	movs	r3, #14
 8001180:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001182:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001186:	4619      	mov	r1, r3
 8001188:	4825      	ldr	r0, [pc, #148]	; (8001220 <HAL_LTDC_MspInit+0x254>)
 800118a:	f000 febf 	bl	8001f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800118e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001192:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011a0:	230e      	movs	r3, #14
 80011a2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011a8:	4619      	mov	r1, r3
 80011aa:	481e      	ldr	r0, [pc, #120]	; (8001224 <HAL_LTDC_MspInit+0x258>)
 80011ac:	f000 feae 	bl	8001f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80011b0:	2348      	movs	r3, #72	; 0x48
 80011b2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011c0:	230e      	movs	r3, #14
 80011c2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011c8:	4619      	mov	r1, r3
 80011ca:	4817      	ldr	r0, [pc, #92]	; (8001228 <HAL_LTDC_MspInit+0x25c>)
 80011cc:	f000 fe9e 	bl	8001f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80011d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011d4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011e2:	2309      	movs	r3, #9
 80011e4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011ea:	4619      	mov	r1, r3
 80011ec:	480c      	ldr	r0, [pc, #48]	; (8001220 <HAL_LTDC_MspInit+0x254>)
 80011ee:	f000 fe8d 	bl	8001f0c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2105      	movs	r1, #5
 80011f6:	2058      	movs	r0, #88	; 0x58
 80011f8:	f000 fbc4 	bl	8001984 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80011fc:	2058      	movs	r0, #88	; 0x58
 80011fe:	f000 fbdd 	bl	80019bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001202:	bf00      	nop
 8001204:	3768      	adds	r7, #104	; 0x68
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40016800 	.word	0x40016800
 8001210:	40023800 	.word	0x40023800
 8001214:	40021400 	.word	0x40021400
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400
 8001220:	40021800 	.word	0x40021800
 8001224:	40020800 	.word	0x40020800
 8001228:	40020c00 	.word	0x40020c00

0800122c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a19      	ldr	r2, [pc, #100]	; (80012b0 <HAL_SPI_MspInit+0x84>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d12c      	bne.n	80012a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <HAL_SPI_MspInit+0x88>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	4a17      	ldr	r2, [pc, #92]	; (80012b4 <HAL_SPI_MspInit+0x88>)
 8001258:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800125c:	6453      	str	r3, [r2, #68]	; 0x44
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <HAL_SPI_MspInit+0x88>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <HAL_SPI_MspInit+0x88>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a10      	ldr	r2, [pc, #64]	; (80012b4 <HAL_SPI_MspInit+0x88>)
 8001274:	f043 0320 	orr.w	r3, r3, #32
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <HAL_SPI_MspInit+0x88>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0320 	and.w	r3, r3, #32
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001286:	f44f 7360 	mov.w	r3, #896	; 0x380
 800128a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001298:	2305      	movs	r3, #5
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <HAL_SPI_MspInit+0x8c>)
 80012a4:	f000 fe32 	bl	8001f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80012a8:	bf00      	nop
 80012aa:	3728      	adds	r7, #40	; 0x28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40015000 	.word	0x40015000
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40021400 	.word	0x40021400

080012bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <HAL_TIM_Base_MspInit+0x3c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d10d      	bne.n	80012ea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_TIM_Base_MspInit+0x40>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	4a09      	ldr	r2, [pc, #36]	; (80012fc <HAL_TIM_Base_MspInit+0x40>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6453      	str	r3, [r2, #68]	; 0x44
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <HAL_TIM_Base_MspInit+0x40>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40010000 	.word	0x40010000
 80012fc:	40023800 	.word	0x40023800

08001300 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a1d      	ldr	r2, [pc, #116]	; (8001394 <HAL_UART_MspInit+0x94>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d134      	bne.n	800138c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <HAL_UART_MspInit+0x98>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	4a1b      	ldr	r2, [pc, #108]	; (8001398 <HAL_UART_MspInit+0x98>)
 800132c:	f043 0310 	orr.w	r3, r3, #16
 8001330:	6453      	str	r3, [r2, #68]	; 0x44
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <HAL_UART_MspInit+0x98>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_UART_MspInit+0x98>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a14      	ldr	r2, [pc, #80]	; (8001398 <HAL_UART_MspInit+0x98>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_UART_MspInit+0x98>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800135a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800135e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001368:	2303      	movs	r3, #3
 800136a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800136c:	2307      	movs	r3, #7
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	4809      	ldr	r0, [pc, #36]	; (800139c <HAL_UART_MspInit+0x9c>)
 8001378:	f000 fdc8 	bl	8001f0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2105      	movs	r1, #5
 8001380:	2025      	movs	r0, #37	; 0x25
 8001382:	f000 faff 	bl	8001984 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001386:	2025      	movs	r0, #37	; 0x25
 8001388:	f000 fb18 	bl	80019bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800138c:	bf00      	nop
 800138e:	3728      	adds	r7, #40	; 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40011000 	.word	0x40011000
 8001398:	40023800 	.word	0x40023800
 800139c:	40020000 	.word	0x40020000

080013a0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80013b4:	4b3b      	ldr	r3, [pc, #236]	; (80014a4 <HAL_FMC_MspInit+0x104>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d16f      	bne.n	800149c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80013bc:	4b39      	ldr	r3, [pc, #228]	; (80014a4 <HAL_FMC_MspInit+0x104>)
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	4b38      	ldr	r3, [pc, #224]	; (80014a8 <HAL_FMC_MspInit+0x108>)
 80013c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ca:	4a37      	ldr	r2, [pc, #220]	; (80014a8 <HAL_FMC_MspInit+0x108>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6393      	str	r3, [r2, #56]	; 0x38
 80013d2:	4b35      	ldr	r3, [pc, #212]	; (80014a8 <HAL_FMC_MspInit+0x108>)
 80013d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80013de:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80013e2:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ec:	2303      	movs	r3, #3
 80013ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013f0:	230c      	movs	r3, #12
 80013f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	4619      	mov	r1, r3
 80013f8:	482c      	ldr	r0, [pc, #176]	; (80014ac <HAL_FMC_MspInit+0x10c>)
 80013fa:	f000 fd87 	bl	8001f0c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80013fe:	2301      	movs	r3, #1
 8001400:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140a:	2303      	movs	r3, #3
 800140c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800140e:	230c      	movs	r3, #12
 8001410:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	4619      	mov	r1, r3
 8001416:	4826      	ldr	r0, [pc, #152]	; (80014b0 <HAL_FMC_MspInit+0x110>)
 8001418:	f000 fd78 	bl	8001f0c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800141c:	f248 1333 	movw	r3, #33075	; 0x8133
 8001420:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142a:	2303      	movs	r3, #3
 800142c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800142e:	230c      	movs	r3, #12
 8001430:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	4619      	mov	r1, r3
 8001436:	481f      	ldr	r0, [pc, #124]	; (80014b4 <HAL_FMC_MspInit+0x114>)
 8001438:	f000 fd68 	bl	8001f0c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800143c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001440:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	2303      	movs	r3, #3
 800144c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800144e:	230c      	movs	r3, #12
 8001450:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	4619      	mov	r1, r3
 8001456:	4818      	ldr	r0, [pc, #96]	; (80014b8 <HAL_FMC_MspInit+0x118>)
 8001458:	f000 fd58 	bl	8001f0c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800145c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001460:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800146e:	230c      	movs	r3, #12
 8001470:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	4619      	mov	r1, r3
 8001476:	4811      	ldr	r0, [pc, #68]	; (80014bc <HAL_FMC_MspInit+0x11c>)
 8001478:	f000 fd48 	bl	8001f0c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800147c:	2360      	movs	r3, #96	; 0x60
 800147e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001488:	2303      	movs	r3, #3
 800148a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800148c:	230c      	movs	r3, #12
 800148e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	4619      	mov	r1, r3
 8001494:	480a      	ldr	r0, [pc, #40]	; (80014c0 <HAL_FMC_MspInit+0x120>)
 8001496:	f000 fd39 	bl	8001f0c <HAL_GPIO_Init>
 800149a:	e000      	b.n	800149e <HAL_FMC_MspInit+0xfe>
    return;
 800149c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200005a8 	.word	0x200005a8
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40021400 	.word	0x40021400
 80014b0:	40020800 	.word	0x40020800
 80014b4:	40021800 	.word	0x40021800
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40020c00 	.word	0x40020c00
 80014c0:	40020400 	.word	0x40020400

080014c4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80014cc:	f7ff ff68 	bl	80013a0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08c      	sub	sp, #48	; 0x30
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80014e8:	2200      	movs	r2, #0
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	2036      	movs	r0, #54	; 0x36
 80014ee:	f000 fa49 	bl	8001984 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014f2:	2036      	movs	r0, #54	; 0x36
 80014f4:	f000 fa62 	bl	80019bc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <HAL_InitTick+0xa4>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	4a1e      	ldr	r2, [pc, #120]	; (800157c <HAL_InitTick+0xa4>)
 8001502:	f043 0310 	orr.w	r3, r3, #16
 8001506:	6413      	str	r3, [r2, #64]	; 0x40
 8001508:	4b1c      	ldr	r3, [pc, #112]	; (800157c <HAL_InitTick+0xa4>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	f003 0310 	and.w	r3, r3, #16
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001514:	f107 0210 	add.w	r2, r7, #16
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4611      	mov	r1, r2
 800151e:	4618      	mov	r0, r3
 8001520:	f002 f87a 	bl	8003618 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001524:	f002 f850 	bl	80035c8 <HAL_RCC_GetPCLK1Freq>
 8001528:	4603      	mov	r3, r0
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800152e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001530:	4a13      	ldr	r2, [pc, #76]	; (8001580 <HAL_InitTick+0xa8>)
 8001532:	fba2 2303 	umull	r2, r3, r2, r3
 8001536:	0c9b      	lsrs	r3, r3, #18
 8001538:	3b01      	subs	r3, #1
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <HAL_InitTick+0xac>)
 800153e:	4a12      	ldr	r2, [pc, #72]	; (8001588 <HAL_InitTick+0xb0>)
 8001540:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <HAL_InitTick+0xac>)
 8001544:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001548:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800154a:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <HAL_InitTick+0xac>)
 800154c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <HAL_InitTick+0xac>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <HAL_InitTick+0xac>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800155c:	4809      	ldr	r0, [pc, #36]	; (8001584 <HAL_InitTick+0xac>)
 800155e:	f002 fb0a 	bl	8003b76 <HAL_TIM_Base_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d104      	bne.n	8001572 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001568:	4806      	ldr	r0, [pc, #24]	; (8001584 <HAL_InitTick+0xac>)
 800156a:	f002 fb53 	bl	8003c14 <HAL_TIM_Base_Start_IT>
 800156e:	4603      	mov	r3, r0
 8001570:	e000      	b.n	8001574 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
}
 8001574:	4618      	mov	r0, r3
 8001576:	3730      	adds	r7, #48	; 0x30
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40023800 	.word	0x40023800
 8001580:	431bde83 	.word	0x431bde83
 8001584:	200005ac 	.word	0x200005ac
 8001588:	40001000 	.word	0x40001000

0800158c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <NMI_Handler+0x4>

08001592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <HardFault_Handler+0x4>

08001598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <MemManage_Handler+0x4>

0800159e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <BusFault_Handler+0x4>

080015a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <UsageFault_Handler+0x4>

080015aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <USART1_IRQHandler+0x10>)
 80015be:	f003 f83b 	bl	8004638 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	2000052c 	.word	0x2000052c

080015cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015d0:	4802      	ldr	r0, [pc, #8]	; (80015dc <TIM6_DAC_IRQHandler+0x10>)
 80015d2:	f002 fb8f 	bl	8003cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200005ac 	.word	0x200005ac

080015e0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <LTDC_IRQHandler+0x10>)
 80015e6:	f001 f8e7 	bl	80027b8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	200003e4 	.word	0x200003e4

080015f4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80015f8:	4802      	ldr	r0, [pc, #8]	; (8001604 <DMA2D_IRQHandler+0x10>)
 80015fa:	f000 fae4 	bl	8001bc6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000350 	.word	0x20000350

08001608 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	e00a      	b.n	8001630 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800161a:	f3af 8000 	nop.w
 800161e:	4601      	mov	r1, r0
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	1c5a      	adds	r2, r3, #1
 8001624:	60ba      	str	r2, [r7, #8]
 8001626:	b2ca      	uxtb	r2, r1
 8001628:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	3301      	adds	r3, #1
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	429a      	cmp	r2, r3
 8001636:	dbf0      	blt.n	800161a <_read+0x12>
	}

return len;
 8001638:	687b      	ldr	r3, [r7, #4]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
	return -1;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800166a:	605a      	str	r2, [r3, #4]
	return 0;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <_isatty>:

int _isatty(int file)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
	return 1;
 8001682:	2301      	movs	r3, #1
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
	return 0;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
	...

080016ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016b4:	4a14      	ldr	r2, [pc, #80]	; (8001708 <_sbrk+0x5c>)
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <_sbrk+0x60>)
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <_sbrk+0x64>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d102      	bne.n	80016ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <_sbrk+0x64>)
 80016ca:	4a12      	ldr	r2, [pc, #72]	; (8001714 <_sbrk+0x68>)
 80016cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <_sbrk+0x64>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d207      	bcs.n	80016ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016dc:	f005 fa5a 	bl	8006b94 <__errno>
 80016e0:	4603      	mov	r3, r0
 80016e2:	220c      	movs	r2, #12
 80016e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016e6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ea:	e009      	b.n	8001700 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <_sbrk+0x64>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <_sbrk+0x64>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	4a05      	ldr	r2, [pc, #20]	; (8001710 <_sbrk+0x64>)
 80016fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016fe:	68fb      	ldr	r3, [r7, #12]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20030000 	.word	0x20030000
 800170c:	00000400 	.word	0x00000400
 8001710:	200005f4 	.word	0x200005f4
 8001714:	20008760 	.word	0x20008760

08001718 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <SystemInit+0x20>)
 800171e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001722:	4a05      	ldr	r2, [pc, #20]	; (8001738 <SystemInit+0x20>)
 8001724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001728:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800173c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001774 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001740:	480d      	ldr	r0, [pc, #52]	; (8001778 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001742:	490e      	ldr	r1, [pc, #56]	; (800177c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001744:	4a0e      	ldr	r2, [pc, #56]	; (8001780 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001748:	e002      	b.n	8001750 <LoopCopyDataInit>

0800174a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800174c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174e:	3304      	adds	r3, #4

08001750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001754:	d3f9      	bcc.n	800174a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001756:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001758:	4c0b      	ldr	r4, [pc, #44]	; (8001788 <LoopFillZerobss+0x26>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800175c:	e001      	b.n	8001762 <LoopFillZerobss>

0800175e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001760:	3204      	adds	r2, #4

08001762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001764:	d3fb      	bcc.n	800175e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001766:	f7ff ffd7 	bl	8001718 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800176a:	f005 fb0f 	bl	8006d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800176e:	f7fe ff45 	bl	80005fc <main>
  bx  lr    
 8001772:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001774:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800177c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001780:	08007cfc 	.word	0x08007cfc
  ldr r2, =_sbss
 8001784:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001788:	20008760 	.word	0x20008760

0800178c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800178c:	e7fe      	b.n	800178c <ADC_IRQHandler>
	...

08001790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001794:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <HAL_Init+0x40>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0d      	ldr	r2, [pc, #52]	; (80017d0 <HAL_Init+0x40>)
 800179a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800179e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <HAL_Init+0x40>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <HAL_Init+0x40>)
 80017a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <HAL_Init+0x40>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <HAL_Init+0x40>)
 80017b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b8:	2003      	movs	r0, #3
 80017ba:	f000 f8d8 	bl	800196e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017be:	2000      	movs	r0, #0
 80017c0:	f7ff fe8a 	bl	80014d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c4:	f7ff fb22 	bl	8000e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40023c00 	.word	0x40023c00

080017d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_IncTick+0x20>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_IncTick+0x24>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4413      	add	r3, r2
 80017e4:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <HAL_IncTick+0x24>)
 80017e6:	6013      	str	r3, [r2, #0]
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20000008 	.word	0x20000008
 80017f8:	200005f8 	.word	0x200005f8

080017fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001800:	4b03      	ldr	r3, [pc, #12]	; (8001810 <HAL_GetTick+0x14>)
 8001802:	681b      	ldr	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	200005f8 	.word	0x200005f8

08001814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001830:	4013      	ands	r3, r2
 8001832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800183c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001846:	4a04      	ldr	r2, [pc, #16]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	60d3      	str	r3, [r2, #12]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <__NVIC_GetPriorityGrouping+0x18>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	0a1b      	lsrs	r3, r3, #8
 8001866:	f003 0307 	and.w	r3, r3, #7
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	2b00      	cmp	r3, #0
 8001888:	db0b      	blt.n	80018a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	f003 021f 	and.w	r2, r3, #31
 8001890:	4907      	ldr	r1, [pc, #28]	; (80018b0 <__NVIC_EnableIRQ+0x38>)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	095b      	lsrs	r3, r3, #5
 8001898:	2001      	movs	r0, #1
 800189a:	fa00 f202 	lsl.w	r2, r0, r2
 800189e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000e100 	.word	0xe000e100

080018b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db0a      	blt.n	80018de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	490c      	ldr	r1, [pc, #48]	; (8001900 <__NVIC_SetPriority+0x4c>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	440b      	add	r3, r1
 80018d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018dc:	e00a      	b.n	80018f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4908      	ldr	r1, [pc, #32]	; (8001904 <__NVIC_SetPriority+0x50>)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	3b04      	subs	r3, #4
 80018ec:	0112      	lsls	r2, r2, #4
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	440b      	add	r3, r1
 80018f2:	761a      	strb	r2, [r3, #24]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000e100 	.word	0xe000e100
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	; 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f1c3 0307 	rsb	r3, r3, #7
 8001922:	2b04      	cmp	r3, #4
 8001924:	bf28      	it	cs
 8001926:	2304      	movcs	r3, #4
 8001928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3304      	adds	r3, #4
 800192e:	2b06      	cmp	r3, #6
 8001930:	d902      	bls.n	8001938 <NVIC_EncodePriority+0x30>
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3b03      	subs	r3, #3
 8001936:	e000      	b.n	800193a <NVIC_EncodePriority+0x32>
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	f04f 32ff 	mov.w	r2, #4294967295
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43da      	mvns	r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	401a      	ands	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001950:	f04f 31ff 	mov.w	r1, #4294967295
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43d9      	mvns	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	4313      	orrs	r3, r2
         );
}
 8001962:	4618      	mov	r0, r3
 8001964:	3724      	adds	r7, #36	; 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff ff4c 	bl	8001814 <__NVIC_SetPriorityGrouping>
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
 8001990:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001996:	f7ff ff61 	bl	800185c <__NVIC_GetPriorityGrouping>
 800199a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	68b9      	ldr	r1, [r7, #8]
 80019a0:	6978      	ldr	r0, [r7, #20]
 80019a2:	f7ff ffb1 	bl	8001908 <NVIC_EncodePriority>
 80019a6:	4602      	mov	r2, r0
 80019a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ac:	4611      	mov	r1, r2
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff ff80 	bl	80018b4 <__NVIC_SetPriority>
}
 80019b4:	bf00      	nop
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff ff54 	bl	8001878 <__NVIC_EnableIRQ>
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00e      	b.n	8001a08 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	795b      	ldrb	r3, [r3, #5]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d105      	bne.n	8001a00 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff fa32 	bl	8000e64 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a1e:	f7ff feed 	bl	80017fc <HAL_GetTick>
 8001a22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d008      	beq.n	8001a42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2280      	movs	r2, #128	; 0x80
 8001a34:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e052      	b.n	8001ae8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 0216 	bic.w	r2, r2, #22
 8001a50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	695a      	ldr	r2, [r3, #20]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d103      	bne.n	8001a72 <HAL_DMA_Abort+0x62>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d007      	beq.n	8001a82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 0208 	bic.w	r2, r2, #8
 8001a80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0201 	bic.w	r2, r2, #1
 8001a90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a92:	e013      	b.n	8001abc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a94:	f7ff feb2 	bl	80017fc <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b05      	cmp	r3, #5
 8001aa0:	d90c      	bls.n	8001abc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2203      	movs	r2, #3
 8001aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e015      	b.n	8001ae8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1e4      	bne.n	8001a94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ace:	223f      	movs	r2, #63	; 0x3f
 8001ad0:	409a      	lsls	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d004      	beq.n	8001b0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2280      	movs	r2, #128	; 0x80
 8001b08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e00c      	b.n	8001b28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2205      	movs	r2, #5
 8001b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0201 	bic.w	r2, r2, #1
 8001b24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e03b      	b.n	8001bbe <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d106      	bne.n	8001b60 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff f9a4 	bl	8000ea8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2202      	movs	r2, #2
 8001b64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b84:	f023 0107 	bic.w	r1, r3, #7
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b9e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	68d1      	ldr	r1, [r2, #12]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	430b      	orrs	r3, r1
 8001bac:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b084      	sub	sp, #16
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d026      	beq.n	8001c36 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d021      	beq.n	8001c36 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c00:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c06:	f043 0201 	orr.w	r2, r3, #1
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2201      	movs	r2, #1
 8001c14:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2204      	movs	r2, #4
 8001c1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f003 0320 	and.w	r3, r3, #32
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d026      	beq.n	8001c8e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d021      	beq.n	8001c8e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c58:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2220      	movs	r2, #32
 8001c60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c66:	f043 0202 	orr.w	r2, r3, #2
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2204      	movs	r2, #4
 8001c72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f003 0308 	and.w	r3, r3, #8
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d026      	beq.n	8001ce6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d021      	beq.n	8001ce6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cb0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2208      	movs	r2, #8
 8001cb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cbe:	f043 0204 	orr.w	r2, r3, #4
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2204      	movs	r2, #4
 8001cca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d013      	beq.n	8001d18 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00e      	beq.n	8001d18 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d08:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2204      	movs	r2, #4
 8001d10:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f853 	bl	8001dbe <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d024      	beq.n	8001d6c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d01f      	beq.n	8001d6c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d3a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2202      	movs	r2, #2
 8001d42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d01f      	beq.n	8001db6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d01a      	beq.n	8001db6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d8e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2210      	movs	r2, #16
 8001d96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f80e 	bl	8001dd2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b087      	sub	sp, #28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_DMA2D_ConfigLayer+0x20>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e079      	b.n	8001efc <HAL_DMA2D_ConfigLayer+0x114>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2202      	movs	r2, #2
 8001e14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	3318      	adds	r3, #24
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	041b      	lsls	r3, r3, #16
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001e32:	4b35      	ldr	r3, [pc, #212]	; (8001f08 <HAL_DMA2D_ConfigLayer+0x120>)
 8001e34:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b0a      	cmp	r3, #10
 8001e3c:	d003      	beq.n	8001e46 <HAL_DMA2D_ConfigLayer+0x5e>
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b09      	cmp	r3, #9
 8001e44:	d107      	bne.n	8001e56 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	e005      	b.n	8001e62 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	061b      	lsls	r3, r3, #24
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d120      	bne.n	8001eaa <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	ea02 0103 	and.w	r1, r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b0a      	cmp	r3, #10
 8001e90:	d003      	beq.n	8001e9a <HAL_DMA2D_ConfigLayer+0xb2>
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b09      	cmp	r3, #9
 8001e98:	d127      	bne.n	8001eea <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001ea6:	629a      	str	r2, [r3, #40]	; 0x28
 8001ea8:	e01f      	b.n	8001eea <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	69da      	ldr	r2, [r3, #28]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	ea02 0103 	and.w	r1, r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	6812      	ldr	r2, [r2, #0]
 8001eca:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b0a      	cmp	r3, #10
 8001ed2:	d003      	beq.n	8001edc <HAL_DMA2D_ConfigLayer+0xf4>
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b09      	cmp	r3, #9
 8001eda:	d106      	bne.n	8001eea <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001ee8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	371c      	adds	r7, #28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	ff03000f 	.word	0xff03000f

08001f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b089      	sub	sp, #36	; 0x24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
 8001f26:	e177      	b.n	8002218 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f28:	2201      	movs	r2, #1
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	f040 8166 	bne.w	8002212 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d005      	beq.n	8001f5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d130      	bne.n	8001fc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	2203      	movs	r2, #3
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f94:	2201      	movs	r2, #1
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	091b      	lsrs	r3, r3, #4
 8001faa:	f003 0201 	and.w	r2, r3, #1
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d017      	beq.n	8001ffc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d123      	bne.n	8002050 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	08da      	lsrs	r2, r3, #3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3208      	adds	r2, #8
 8002010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002014:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	220f      	movs	r2, #15
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	08da      	lsrs	r2, r3, #3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3208      	adds	r2, #8
 800204a:	69b9      	ldr	r1, [r7, #24]
 800204c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2203      	movs	r2, #3
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 0203 	and.w	r2, r3, #3
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 80c0 	beq.w	8002212 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	4b66      	ldr	r3, [pc, #408]	; (8002230 <HAL_GPIO_Init+0x324>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	4a65      	ldr	r2, [pc, #404]	; (8002230 <HAL_GPIO_Init+0x324>)
 800209c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020a0:	6453      	str	r3, [r2, #68]	; 0x44
 80020a2:	4b63      	ldr	r3, [pc, #396]	; (8002230 <HAL_GPIO_Init+0x324>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ae:	4a61      	ldr	r2, [pc, #388]	; (8002234 <HAL_GPIO_Init+0x328>)
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	089b      	lsrs	r3, r3, #2
 80020b4:	3302      	adds	r3, #2
 80020b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	220f      	movs	r2, #15
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a58      	ldr	r2, [pc, #352]	; (8002238 <HAL_GPIO_Init+0x32c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d037      	beq.n	800214a <HAL_GPIO_Init+0x23e>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a57      	ldr	r2, [pc, #348]	; (800223c <HAL_GPIO_Init+0x330>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d031      	beq.n	8002146 <HAL_GPIO_Init+0x23a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a56      	ldr	r2, [pc, #344]	; (8002240 <HAL_GPIO_Init+0x334>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d02b      	beq.n	8002142 <HAL_GPIO_Init+0x236>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a55      	ldr	r2, [pc, #340]	; (8002244 <HAL_GPIO_Init+0x338>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d025      	beq.n	800213e <HAL_GPIO_Init+0x232>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a54      	ldr	r2, [pc, #336]	; (8002248 <HAL_GPIO_Init+0x33c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d01f      	beq.n	800213a <HAL_GPIO_Init+0x22e>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a53      	ldr	r2, [pc, #332]	; (800224c <HAL_GPIO_Init+0x340>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d019      	beq.n	8002136 <HAL_GPIO_Init+0x22a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a52      	ldr	r2, [pc, #328]	; (8002250 <HAL_GPIO_Init+0x344>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d013      	beq.n	8002132 <HAL_GPIO_Init+0x226>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a51      	ldr	r2, [pc, #324]	; (8002254 <HAL_GPIO_Init+0x348>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00d      	beq.n	800212e <HAL_GPIO_Init+0x222>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a50      	ldr	r2, [pc, #320]	; (8002258 <HAL_GPIO_Init+0x34c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d007      	beq.n	800212a <HAL_GPIO_Init+0x21e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a4f      	ldr	r2, [pc, #316]	; (800225c <HAL_GPIO_Init+0x350>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d101      	bne.n	8002126 <HAL_GPIO_Init+0x21a>
 8002122:	2309      	movs	r3, #9
 8002124:	e012      	b.n	800214c <HAL_GPIO_Init+0x240>
 8002126:	230a      	movs	r3, #10
 8002128:	e010      	b.n	800214c <HAL_GPIO_Init+0x240>
 800212a:	2308      	movs	r3, #8
 800212c:	e00e      	b.n	800214c <HAL_GPIO_Init+0x240>
 800212e:	2307      	movs	r3, #7
 8002130:	e00c      	b.n	800214c <HAL_GPIO_Init+0x240>
 8002132:	2306      	movs	r3, #6
 8002134:	e00a      	b.n	800214c <HAL_GPIO_Init+0x240>
 8002136:	2305      	movs	r3, #5
 8002138:	e008      	b.n	800214c <HAL_GPIO_Init+0x240>
 800213a:	2304      	movs	r3, #4
 800213c:	e006      	b.n	800214c <HAL_GPIO_Init+0x240>
 800213e:	2303      	movs	r3, #3
 8002140:	e004      	b.n	800214c <HAL_GPIO_Init+0x240>
 8002142:	2302      	movs	r3, #2
 8002144:	e002      	b.n	800214c <HAL_GPIO_Init+0x240>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <HAL_GPIO_Init+0x240>
 800214a:	2300      	movs	r3, #0
 800214c:	69fa      	ldr	r2, [r7, #28]
 800214e:	f002 0203 	and.w	r2, r2, #3
 8002152:	0092      	lsls	r2, r2, #2
 8002154:	4093      	lsls	r3, r2
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800215c:	4935      	ldr	r1, [pc, #212]	; (8002234 <HAL_GPIO_Init+0x328>)
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	089b      	lsrs	r3, r3, #2
 8002162:	3302      	adds	r3, #2
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800216a:	4b3d      	ldr	r3, [pc, #244]	; (8002260 <HAL_GPIO_Init+0x354>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	43db      	mvns	r3, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4013      	ands	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800218e:	4a34      	ldr	r2, [pc, #208]	; (8002260 <HAL_GPIO_Init+0x354>)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002194:	4b32      	ldr	r3, [pc, #200]	; (8002260 <HAL_GPIO_Init+0x354>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021b8:	4a29      	ldr	r2, [pc, #164]	; (8002260 <HAL_GPIO_Init+0x354>)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021be:	4b28      	ldr	r3, [pc, #160]	; (8002260 <HAL_GPIO_Init+0x354>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021e2:	4a1f      	ldr	r2, [pc, #124]	; (8002260 <HAL_GPIO_Init+0x354>)
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e8:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <HAL_GPIO_Init+0x354>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800220c:	4a14      	ldr	r2, [pc, #80]	; (8002260 <HAL_GPIO_Init+0x354>)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3301      	adds	r3, #1
 8002216:	61fb      	str	r3, [r7, #28]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	2b0f      	cmp	r3, #15
 800221c:	f67f ae84 	bls.w	8001f28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002220:	bf00      	nop
 8002222:	bf00      	nop
 8002224:	3724      	adds	r7, #36	; 0x24
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40023800 	.word	0x40023800
 8002234:	40013800 	.word	0x40013800
 8002238:	40020000 	.word	0x40020000
 800223c:	40020400 	.word	0x40020400
 8002240:	40020800 	.word	0x40020800
 8002244:	40020c00 	.word	0x40020c00
 8002248:	40021000 	.word	0x40021000
 800224c:	40021400 	.word	0x40021400
 8002250:	40021800 	.word	0x40021800
 8002254:	40021c00 	.word	0x40021c00
 8002258:	40022000 	.word	0x40022000
 800225c:	40022400 	.word	0x40022400
 8002260:	40013c00 	.word	0x40013c00

08002264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	807b      	strh	r3, [r7, #2]
 8002270:	4613      	mov	r3, r2
 8002272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002274:	787b      	ldrb	r3, [r7, #1]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800227a:	887a      	ldrh	r2, [r7, #2]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002280:	e003      	b.n	800228a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002282:	887b      	ldrh	r3, [r7, #2]
 8002284:	041a      	lsls	r2, r3, #16
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	619a      	str	r2, [r3, #24]
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e12b      	b.n	8002502 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe fe1a 	bl	8000ef8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2224      	movs	r2, #36	; 0x24
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0201 	bic.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022fc:	f001 f964 	bl	80035c8 <HAL_RCC_GetPCLK1Freq>
 8002300:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	4a81      	ldr	r2, [pc, #516]	; (800250c <HAL_I2C_Init+0x274>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d807      	bhi.n	800231c <HAL_I2C_Init+0x84>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4a80      	ldr	r2, [pc, #512]	; (8002510 <HAL_I2C_Init+0x278>)
 8002310:	4293      	cmp	r3, r2
 8002312:	bf94      	ite	ls
 8002314:	2301      	movls	r3, #1
 8002316:	2300      	movhi	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	e006      	b.n	800232a <HAL_I2C_Init+0x92>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4a7d      	ldr	r2, [pc, #500]	; (8002514 <HAL_I2C_Init+0x27c>)
 8002320:	4293      	cmp	r3, r2
 8002322:	bf94      	ite	ls
 8002324:	2301      	movls	r3, #1
 8002326:	2300      	movhi	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e0e7      	b.n	8002502 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4a78      	ldr	r2, [pc, #480]	; (8002518 <HAL_I2C_Init+0x280>)
 8002336:	fba2 2303 	umull	r2, r3, r2, r3
 800233a:	0c9b      	lsrs	r3, r3, #18
 800233c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	430a      	orrs	r2, r1
 8002350:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4a6a      	ldr	r2, [pc, #424]	; (800250c <HAL_I2C_Init+0x274>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d802      	bhi.n	800236c <HAL_I2C_Init+0xd4>
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	3301      	adds	r3, #1
 800236a:	e009      	b.n	8002380 <HAL_I2C_Init+0xe8>
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002372:	fb02 f303 	mul.w	r3, r2, r3
 8002376:	4a69      	ldr	r2, [pc, #420]	; (800251c <HAL_I2C_Init+0x284>)
 8002378:	fba2 2303 	umull	r2, r3, r2, r3
 800237c:	099b      	lsrs	r3, r3, #6
 800237e:	3301      	adds	r3, #1
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	430b      	orrs	r3, r1
 8002386:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002392:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	495c      	ldr	r1, [pc, #368]	; (800250c <HAL_I2C_Init+0x274>)
 800239c:	428b      	cmp	r3, r1
 800239e:	d819      	bhi.n	80023d4 <HAL_I2C_Init+0x13c>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	1e59      	subs	r1, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80023ae:	1c59      	adds	r1, r3, #1
 80023b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023b4:	400b      	ands	r3, r1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00a      	beq.n	80023d0 <HAL_I2C_Init+0x138>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1e59      	subs	r1, r3, #1
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80023c8:	3301      	adds	r3, #1
 80023ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ce:	e051      	b.n	8002474 <HAL_I2C_Init+0x1dc>
 80023d0:	2304      	movs	r3, #4
 80023d2:	e04f      	b.n	8002474 <HAL_I2C_Init+0x1dc>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d111      	bne.n	8002400 <HAL_I2C_Init+0x168>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	1e58      	subs	r0, r3, #1
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6859      	ldr	r1, [r3, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	440b      	add	r3, r1
 80023ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ee:	3301      	adds	r3, #1
 80023f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	bf0c      	ite	eq
 80023f8:	2301      	moveq	r3, #1
 80023fa:	2300      	movne	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	e012      	b.n	8002426 <HAL_I2C_Init+0x18e>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1e58      	subs	r0, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6859      	ldr	r1, [r3, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	0099      	lsls	r1, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	fbb0 f3f3 	udiv	r3, r0, r3
 8002416:	3301      	adds	r3, #1
 8002418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800241c:	2b00      	cmp	r3, #0
 800241e:	bf0c      	ite	eq
 8002420:	2301      	moveq	r3, #1
 8002422:	2300      	movne	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_I2C_Init+0x196>
 800242a:	2301      	movs	r3, #1
 800242c:	e022      	b.n	8002474 <HAL_I2C_Init+0x1dc>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10e      	bne.n	8002454 <HAL_I2C_Init+0x1bc>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1e58      	subs	r0, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6859      	ldr	r1, [r3, #4]
 800243e:	460b      	mov	r3, r1
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	440b      	add	r3, r1
 8002444:	fbb0 f3f3 	udiv	r3, r0, r3
 8002448:	3301      	adds	r3, #1
 800244a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800244e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002452:	e00f      	b.n	8002474 <HAL_I2C_Init+0x1dc>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	1e58      	subs	r0, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6859      	ldr	r1, [r3, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	0099      	lsls	r1, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	fbb0 f3f3 	udiv	r3, r0, r3
 800246a:	3301      	adds	r3, #1
 800246c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002470:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	6809      	ldr	r1, [r1, #0]
 8002478:	4313      	orrs	r3, r2
 800247a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69da      	ldr	r2, [r3, #28]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6911      	ldr	r1, [r2, #16]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	68d2      	ldr	r2, [r2, #12]
 80024ae:	4311      	orrs	r1, r2
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	430b      	orrs	r3, r1
 80024b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695a      	ldr	r2, [r3, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2220      	movs	r2, #32
 80024ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	000186a0 	.word	0x000186a0
 8002510:	001e847f 	.word	0x001e847f
 8002514:	003d08ff 	.word	0x003d08ff
 8002518:	431bde83 	.word	0x431bde83
 800251c:	10624dd3 	.word	0x10624dd3

08002520 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b20      	cmp	r3, #32
 8002534:	d129      	bne.n	800258a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2224      	movs	r2, #36	; 0x24
 800253a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0201 	bic.w	r2, r2, #1
 800254c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0210 	bic.w	r2, r2, #16
 800255c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f042 0201 	orr.w	r2, r2, #1
 800257c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2220      	movs	r2, #32
 8002582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	e000      	b.n	800258c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800258a:	2302      	movs	r3, #2
  }
}
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b20      	cmp	r3, #32
 80025b0:	d12a      	bne.n	8002608 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2224      	movs	r2, #36	; 0x24
 80025b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0201 	bic.w	r2, r2, #1
 80025c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80025d2:	89fb      	ldrh	r3, [r7, #14]
 80025d4:	f023 030f 	bic.w	r3, r3, #15
 80025d8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	b29a      	uxth	r2, r3
 80025de:	89fb      	ldrh	r3, [r7, #14]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	89fa      	ldrh	r2, [r7, #14]
 80025ea:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0201 	orr.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2220      	movs	r2, #32
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	e000      	b.n	800260a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002608:	2302      	movs	r3, #2
  }
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e0bf      	b.n	80027aa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d106      	bne.n	8002644 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7fe fcc4 	bl	8000fcc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800265a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6999      	ldr	r1, [r3, #24]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002670:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6899      	ldr	r1, [r3, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	4b4a      	ldr	r3, [pc, #296]	; (80027b4 <HAL_LTDC_Init+0x19c>)
 800268c:	400b      	ands	r3, r1
 800268e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	041b      	lsls	r3, r3, #16
 8002696:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6899      	ldr	r1, [r3, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699a      	ldr	r2, [r3, #24]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	431a      	orrs	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68d9      	ldr	r1, [r3, #12]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4b3e      	ldr	r3, [pc, #248]	; (80027b4 <HAL_LTDC_Init+0x19c>)
 80026ba:	400b      	ands	r3, r1
 80026bc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	041b      	lsls	r3, r3, #16
 80026c4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68d9      	ldr	r1, [r3, #12]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1a      	ldr	r2, [r3, #32]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6919      	ldr	r1, [r3, #16]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	4b33      	ldr	r3, [pc, #204]	; (80027b4 <HAL_LTDC_Init+0x19c>)
 80026e8:	400b      	ands	r3, r1
 80026ea:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	041b      	lsls	r3, r3, #16
 80026f2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6919      	ldr	r1, [r3, #16]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6959      	ldr	r1, [r3, #20]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_LTDC_Init+0x19c>)
 8002716:	400b      	ands	r3, r1
 8002718:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271e:	041b      	lsls	r3, r3, #16
 8002720:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6959      	ldr	r1, [r3, #20]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800273e:	021b      	lsls	r3, r3, #8
 8002740:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002748:	041b      	lsls	r3, r3, #16
 800274a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800275a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4313      	orrs	r3, r2
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0206 	orr.w	r2, r2, #6
 8002786:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699a      	ldr	r2, [r3, #24]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	f000f800 	.word	0xf000f800

080027b8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ce:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d023      	beq.n	8002822 <HAL_LTDC_IRQHandler+0x6a>
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d01e      	beq.n	8002822 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0204 	bic.w	r2, r2, #4
 80027f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2204      	movs	r2, #4
 80027fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002802:	f043 0201 	orr.w	r2, r3, #1
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2204      	movs	r2, #4
 8002810:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 f86f 	bl	8002900 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d023      	beq.n	8002874 <HAL_LTDC_IRQHandler+0xbc>
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d01e      	beq.n	8002874 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0202 	bic.w	r2, r2, #2
 8002844:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2202      	movs	r2, #2
 800284c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002854:	f043 0202 	orr.w	r2, r3, #2
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2204      	movs	r2, #4
 8002862:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f846 	bl	8002900 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d01b      	beq.n	80028b6 <HAL_LTDC_IRQHandler+0xfe>
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d016      	beq.n	80028b6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0201 	bic.w	r2, r2, #1
 8002896:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2201      	movs	r2, #1
 800289e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f82f 	bl	8002914 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d01b      	beq.n	80028f8 <HAL_LTDC_IRQHandler+0x140>
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d016      	beq.n	80028f8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0208 	bic.w	r2, r2, #8
 80028d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2208      	movs	r2, #8
 80028e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f818 	bl	8002928 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80028f8:	bf00      	nop
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800293c:	b5b0      	push	{r4, r5, r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_LTDC_ConfigLayer+0x1a>
 8002952:	2302      	movs	r3, #2
 8002954:	e02c      	b.n	80029b0 <HAL_LTDC_ConfigLayer+0x74>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2202      	movs	r2, #2
 8002962:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2134      	movs	r1, #52	; 0x34
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	4413      	add	r3, r2
 8002972:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	4614      	mov	r4, r2
 800297a:	461d      	mov	r5, r3
 800297c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800297e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002988:	682b      	ldr	r3, [r5, #0]
 800298a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 f811 	bl	80029b8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2201      	movs	r2, #1
 800299c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bdb0      	pop	{r4, r5, r7, pc}

080029b8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b089      	sub	sp, #36	; 0x24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	0c1b      	lsrs	r3, r3, #16
 80029d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d4:	4413      	add	r3, r2
 80029d6:	041b      	lsls	r3, r3, #16
 80029d8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	01db      	lsls	r3, r3, #7
 80029e4:	4413      	add	r3, r2
 80029e6:	3384      	adds	r3, #132	; 0x84
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	4611      	mov	r1, r2
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	01d2      	lsls	r2, r2, #7
 80029f4:	440a      	add	r2, r1
 80029f6:	3284      	adds	r2, #132	; 0x84
 80029f8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80029fc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	0c1b      	lsrs	r3, r3, #16
 8002a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002a0e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002a10:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4619      	mov	r1, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	01db      	lsls	r3, r3, #7
 8002a1c:	440b      	add	r3, r1
 8002a1e:	3384      	adds	r3, #132	; 0x84
 8002a20:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002a26:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a36:	4413      	add	r3, r2
 8002a38:	041b      	lsls	r3, r3, #16
 8002a3a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	461a      	mov	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	01db      	lsls	r3, r3, #7
 8002a46:	4413      	add	r3, r2
 8002a48:	3384      	adds	r3, #132	; 0x84
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	4611      	mov	r1, r2
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	01d2      	lsls	r2, r2, #7
 8002a56:	440a      	add	r2, r1
 8002a58:	3284      	adds	r2, #132	; 0x84
 8002a5a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002a5e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a6e:	4413      	add	r3, r2
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4619      	mov	r1, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	01db      	lsls	r3, r3, #7
 8002a7c:	440b      	add	r3, r1
 8002a7e:	3384      	adds	r3, #132	; 0x84
 8002a80:	4619      	mov	r1, r3
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	01db      	lsls	r3, r3, #7
 8002a92:	4413      	add	r3, r2
 8002a94:	3384      	adds	r3, #132	; 0x84
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	4611      	mov	r1, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	01d2      	lsls	r2, r2, #7
 8002aa2:	440a      	add	r2, r1
 8002aa4:	3284      	adds	r2, #132	; 0x84
 8002aa6:	f023 0307 	bic.w	r3, r3, #7
 8002aaa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	01db      	lsls	r3, r3, #7
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3384      	adds	r3, #132	; 0x84
 8002aba:	461a      	mov	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002ac8:	021b      	lsls	r3, r3, #8
 8002aca:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002ad2:	041b      	lsls	r3, r3, #16
 8002ad4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	061b      	lsls	r3, r3, #24
 8002adc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	01db      	lsls	r3, r3, #7
 8002ae8:	4413      	add	r3, r2
 8002aea:	3384      	adds	r3, #132	; 0x84
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	01db      	lsls	r3, r3, #7
 8002af8:	4413      	add	r3, r2
 8002afa:	3384      	adds	r3, #132	; 0x84
 8002afc:	461a      	mov	r2, r3
 8002afe:	2300      	movs	r3, #0
 8002b00:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b08:	461a      	mov	r2, r3
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	431a      	orrs	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4619      	mov	r1, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	01db      	lsls	r3, r3, #7
 8002b1c:	440b      	add	r3, r1
 8002b1e:	3384      	adds	r3, #132	; 0x84
 8002b20:	4619      	mov	r1, r3
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	01db      	lsls	r3, r3, #7
 8002b32:	4413      	add	r3, r2
 8002b34:	3384      	adds	r3, #132	; 0x84
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	01d2      	lsls	r2, r2, #7
 8002b42:	440a      	add	r2, r1
 8002b44:	3284      	adds	r2, #132	; 0x84
 8002b46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b4a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	01db      	lsls	r3, r3, #7
 8002b56:	4413      	add	r3, r2
 8002b58:	3384      	adds	r3, #132	; 0x84
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	01db      	lsls	r3, r3, #7
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3384      	adds	r3, #132	; 0x84
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	6812      	ldr	r2, [r2, #0]
 8002b76:	4611      	mov	r1, r2
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	01d2      	lsls	r2, r2, #7
 8002b7c:	440a      	add	r2, r1
 8002b7e:	3284      	adds	r2, #132	; 0x84
 8002b80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b84:	f023 0307 	bic.w	r3, r3, #7
 8002b88:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	69da      	ldr	r2, [r3, #28]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	68f9      	ldr	r1, [r7, #12]
 8002b94:	6809      	ldr	r1, [r1, #0]
 8002b96:	4608      	mov	r0, r1
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	01c9      	lsls	r1, r1, #7
 8002b9c:	4401      	add	r1, r0
 8002b9e:	3184      	adds	r1, #132	; 0x84
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	01db      	lsls	r3, r3, #7
 8002bae:	4413      	add	r3, r2
 8002bb0:	3384      	adds	r3, #132	; 0x84
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	01db      	lsls	r3, r3, #7
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3384      	adds	r3, #132	; 0x84
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	01db      	lsls	r3, r3, #7
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3384      	adds	r3, #132	; 0x84
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d102      	bne.n	8002bec <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8002be6:	2304      	movs	r3, #4
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	e01b      	b.n	8002c24 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d102      	bne.n	8002bfa <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	61fb      	str	r3, [r7, #28]
 8002bf8:	e014      	b.n	8002c24 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d00b      	beq.n	8002c1a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d007      	beq.n	8002c1a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d003      	beq.n	8002c1a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002c16:	2b07      	cmp	r3, #7
 8002c18:	d102      	bne.n	8002c20 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	e001      	b.n	8002c24 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8002c20:	2301      	movs	r3, #1
 8002c22:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	01db      	lsls	r3, r3, #7
 8002c2e:	4413      	add	r3, r2
 8002c30:	3384      	adds	r3, #132	; 0x84
 8002c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	4611      	mov	r1, r2
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	01d2      	lsls	r2, r2, #7
 8002c3e:	440a      	add	r2, r1
 8002c40:	3284      	adds	r2, #132	; 0x84
 8002c42:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002c46:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4c:	69fa      	ldr	r2, [r7, #28]
 8002c4e:	fb02 f303 	mul.w	r3, r2, r3
 8002c52:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	6859      	ldr	r1, [r3, #4]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	1acb      	subs	r3, r1, r3
 8002c5e:	69f9      	ldr	r1, [r7, #28]
 8002c60:	fb01 f303 	mul.w	r3, r1, r3
 8002c64:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002c66:	68f9      	ldr	r1, [r7, #12]
 8002c68:	6809      	ldr	r1, [r1, #0]
 8002c6a:	4608      	mov	r0, r1
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	01c9      	lsls	r1, r1, #7
 8002c70:	4401      	add	r1, r0
 8002c72:	3184      	adds	r1, #132	; 0x84
 8002c74:	4313      	orrs	r3, r2
 8002c76:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	01db      	lsls	r3, r3, #7
 8002c82:	4413      	add	r3, r2
 8002c84:	3384      	adds	r3, #132	; 0x84
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	01d2      	lsls	r2, r2, #7
 8002c92:	440a      	add	r2, r1
 8002c94:	3284      	adds	r2, #132	; 0x84
 8002c96:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002c9a:	f023 0307 	bic.w	r3, r3, #7
 8002c9e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	01db      	lsls	r3, r3, #7
 8002caa:	4413      	add	r3, r2
 8002cac:	3384      	adds	r3, #132	; 0x84
 8002cae:	461a      	mov	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	01db      	lsls	r3, r3, #7
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3384      	adds	r3, #132	; 0x84
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	6812      	ldr	r2, [r2, #0]
 8002cca:	4611      	mov	r1, r2
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	01d2      	lsls	r2, r2, #7
 8002cd0:	440a      	add	r2, r1
 8002cd2:	3284      	adds	r2, #132	; 0x84
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	6013      	str	r3, [r2, #0]
}
 8002cda:	bf00      	nop
 8002cdc:	3724      	adds	r7, #36	; 0x24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
	...

08002ce8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e267      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d075      	beq.n	8002df2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d06:	4b88      	ldr	r3, [pc, #544]	; (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d00c      	beq.n	8002d2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d12:	4b85      	ldr	r3, [pc, #532]	; (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d112      	bne.n	8002d44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d1e:	4b82      	ldr	r3, [pc, #520]	; (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d2a:	d10b      	bne.n	8002d44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d2c:	4b7e      	ldr	r3, [pc, #504]	; (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d05b      	beq.n	8002df0 <HAL_RCC_OscConfig+0x108>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d157      	bne.n	8002df0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e242      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d4c:	d106      	bne.n	8002d5c <HAL_RCC_OscConfig+0x74>
 8002d4e:	4b76      	ldr	r3, [pc, #472]	; (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a75      	ldr	r2, [pc, #468]	; (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	e01d      	b.n	8002d98 <HAL_RCC_OscConfig+0xb0>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d64:	d10c      	bne.n	8002d80 <HAL_RCC_OscConfig+0x98>
 8002d66:	4b70      	ldr	r3, [pc, #448]	; (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a6f      	ldr	r2, [pc, #444]	; (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	4b6d      	ldr	r3, [pc, #436]	; (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a6c      	ldr	r2, [pc, #432]	; (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	e00b      	b.n	8002d98 <HAL_RCC_OscConfig+0xb0>
 8002d80:	4b69      	ldr	r3, [pc, #420]	; (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a68      	ldr	r2, [pc, #416]	; (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8a:	6013      	str	r3, [r2, #0]
 8002d8c:	4b66      	ldr	r3, [pc, #408]	; (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a65      	ldr	r2, [pc, #404]	; (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d013      	beq.n	8002dc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da0:	f7fe fd2c 	bl	80017fc <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002da8:	f7fe fd28 	bl	80017fc <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b64      	cmp	r3, #100	; 0x64
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e207      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dba:	4b5b      	ldr	r3, [pc, #364]	; (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0xc0>
 8002dc6:	e014      	b.n	8002df2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7fe fd18 	bl	80017fc <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd0:	f7fe fd14 	bl	80017fc <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b64      	cmp	r3, #100	; 0x64
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e1f3      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de2:	4b51      	ldr	r3, [pc, #324]	; (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0xe8>
 8002dee:	e000      	b.n	8002df2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d063      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dfe:	4b4a      	ldr	r3, [pc, #296]	; (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 030c 	and.w	r3, r3, #12
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00b      	beq.n	8002e22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e0a:	4b47      	ldr	r3, [pc, #284]	; (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e12:	2b08      	cmp	r3, #8
 8002e14:	d11c      	bne.n	8002e50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e16:	4b44      	ldr	r3, [pc, #272]	; (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d116      	bne.n	8002e50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e22:	4b41      	ldr	r3, [pc, #260]	; (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d005      	beq.n	8002e3a <HAL_RCC_OscConfig+0x152>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d001      	beq.n	8002e3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e1c7      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3a:	4b3b      	ldr	r3, [pc, #236]	; (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4937      	ldr	r1, [pc, #220]	; (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4e:	e03a      	b.n	8002ec6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d020      	beq.n	8002e9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e58:	4b34      	ldr	r3, [pc, #208]	; (8002f2c <HAL_RCC_OscConfig+0x244>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5e:	f7fe fccd 	bl	80017fc <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e66:	f7fe fcc9 	bl	80017fc <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e1a8      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e78:	4b2b      	ldr	r3, [pc, #172]	; (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e84:	4b28      	ldr	r3, [pc, #160]	; (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	4925      	ldr	r1, [pc, #148]	; (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	600b      	str	r3, [r1, #0]
 8002e98:	e015      	b.n	8002ec6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e9a:	4b24      	ldr	r3, [pc, #144]	; (8002f2c <HAL_RCC_OscConfig+0x244>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea0:	f7fe fcac 	bl	80017fc <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ea8:	f7fe fca8 	bl	80017fc <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e187      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eba:	4b1b      	ldr	r3, [pc, #108]	; (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f0      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d036      	beq.n	8002f40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d016      	beq.n	8002f08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eda:	4b15      	ldr	r3, [pc, #84]	; (8002f30 <HAL_RCC_OscConfig+0x248>)
 8002edc:	2201      	movs	r2, #1
 8002ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee0:	f7fe fc8c 	bl	80017fc <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ee8:	f7fe fc88 	bl	80017fc <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e167      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efa:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <HAL_RCC_OscConfig+0x240>)
 8002efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x200>
 8002f06:	e01b      	b.n	8002f40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f08:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <HAL_RCC_OscConfig+0x248>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0e:	f7fe fc75 	bl	80017fc <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f14:	e00e      	b.n	8002f34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f16:	f7fe fc71 	bl	80017fc <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d907      	bls.n	8002f34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e150      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	42470000 	.word	0x42470000
 8002f30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f34:	4b88      	ldr	r3, [pc, #544]	; (8003158 <HAL_RCC_OscConfig+0x470>)
 8002f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1ea      	bne.n	8002f16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 8097 	beq.w	800307c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f52:	4b81      	ldr	r3, [pc, #516]	; (8003158 <HAL_RCC_OscConfig+0x470>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10f      	bne.n	8002f7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	4b7d      	ldr	r3, [pc, #500]	; (8003158 <HAL_RCC_OscConfig+0x470>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	4a7c      	ldr	r2, [pc, #496]	; (8003158 <HAL_RCC_OscConfig+0x470>)
 8002f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f6e:	4b7a      	ldr	r3, [pc, #488]	; (8003158 <HAL_RCC_OscConfig+0x470>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f76:	60bb      	str	r3, [r7, #8]
 8002f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7e:	4b77      	ldr	r3, [pc, #476]	; (800315c <HAL_RCC_OscConfig+0x474>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d118      	bne.n	8002fbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f8a:	4b74      	ldr	r3, [pc, #464]	; (800315c <HAL_RCC_OscConfig+0x474>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a73      	ldr	r2, [pc, #460]	; (800315c <HAL_RCC_OscConfig+0x474>)
 8002f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f96:	f7fe fc31 	bl	80017fc <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f9e:	f7fe fc2d 	bl	80017fc <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e10c      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb0:	4b6a      	ldr	r3, [pc, #424]	; (800315c <HAL_RCC_OscConfig+0x474>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0f0      	beq.n	8002f9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d106      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x2ea>
 8002fc4:	4b64      	ldr	r3, [pc, #400]	; (8003158 <HAL_RCC_OscConfig+0x470>)
 8002fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc8:	4a63      	ldr	r2, [pc, #396]	; (8003158 <HAL_RCC_OscConfig+0x470>)
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd0:	e01c      	b.n	800300c <HAL_RCC_OscConfig+0x324>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	2b05      	cmp	r3, #5
 8002fd8:	d10c      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x30c>
 8002fda:	4b5f      	ldr	r3, [pc, #380]	; (8003158 <HAL_RCC_OscConfig+0x470>)
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fde:	4a5e      	ldr	r2, [pc, #376]	; (8003158 <HAL_RCC_OscConfig+0x470>)
 8002fe0:	f043 0304 	orr.w	r3, r3, #4
 8002fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe6:	4b5c      	ldr	r3, [pc, #368]	; (8003158 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fea:	4a5b      	ldr	r2, [pc, #364]	; (8003158 <HAL_RCC_OscConfig+0x470>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff2:	e00b      	b.n	800300c <HAL_RCC_OscConfig+0x324>
 8002ff4:	4b58      	ldr	r3, [pc, #352]	; (8003158 <HAL_RCC_OscConfig+0x470>)
 8002ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff8:	4a57      	ldr	r2, [pc, #348]	; (8003158 <HAL_RCC_OscConfig+0x470>)
 8002ffa:	f023 0301 	bic.w	r3, r3, #1
 8002ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8003000:	4b55      	ldr	r3, [pc, #340]	; (8003158 <HAL_RCC_OscConfig+0x470>)
 8003002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003004:	4a54      	ldr	r2, [pc, #336]	; (8003158 <HAL_RCC_OscConfig+0x470>)
 8003006:	f023 0304 	bic.w	r3, r3, #4
 800300a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d015      	beq.n	8003040 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003014:	f7fe fbf2 	bl	80017fc <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301a:	e00a      	b.n	8003032 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800301c:	f7fe fbee 	bl	80017fc <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f241 3288 	movw	r2, #5000	; 0x1388
 800302a:	4293      	cmp	r3, r2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e0cb      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003032:	4b49      	ldr	r3, [pc, #292]	; (8003158 <HAL_RCC_OscConfig+0x470>)
 8003034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0ee      	beq.n	800301c <HAL_RCC_OscConfig+0x334>
 800303e:	e014      	b.n	800306a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003040:	f7fe fbdc 	bl	80017fc <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003046:	e00a      	b.n	800305e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003048:	f7fe fbd8 	bl	80017fc <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	f241 3288 	movw	r2, #5000	; 0x1388
 8003056:	4293      	cmp	r3, r2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e0b5      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800305e:	4b3e      	ldr	r3, [pc, #248]	; (8003158 <HAL_RCC_OscConfig+0x470>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1ee      	bne.n	8003048 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800306a:	7dfb      	ldrb	r3, [r7, #23]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d105      	bne.n	800307c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003070:	4b39      	ldr	r3, [pc, #228]	; (8003158 <HAL_RCC_OscConfig+0x470>)
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	4a38      	ldr	r2, [pc, #224]	; (8003158 <HAL_RCC_OscConfig+0x470>)
 8003076:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800307a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 80a1 	beq.w	80031c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003086:	4b34      	ldr	r3, [pc, #208]	; (8003158 <HAL_RCC_OscConfig+0x470>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	2b08      	cmp	r3, #8
 8003090:	d05c      	beq.n	800314c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d141      	bne.n	800311e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800309a:	4b31      	ldr	r3, [pc, #196]	; (8003160 <HAL_RCC_OscConfig+0x478>)
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a0:	f7fe fbac 	bl	80017fc <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a8:	f7fe fba8 	bl	80017fc <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e087      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ba:	4b27      	ldr	r3, [pc, #156]	; (8003158 <HAL_RCC_OscConfig+0x470>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f0      	bne.n	80030a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69da      	ldr	r2, [r3, #28]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	019b      	lsls	r3, r3, #6
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030dc:	085b      	lsrs	r3, r3, #1
 80030de:	3b01      	subs	r3, #1
 80030e0:	041b      	lsls	r3, r3, #16
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	061b      	lsls	r3, r3, #24
 80030ea:	491b      	ldr	r1, [pc, #108]	; (8003158 <HAL_RCC_OscConfig+0x470>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030f0:	4b1b      	ldr	r3, [pc, #108]	; (8003160 <HAL_RCC_OscConfig+0x478>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f6:	f7fe fb81 	bl	80017fc <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030fe:	f7fe fb7d 	bl	80017fc <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e05c      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003110:	4b11      	ldr	r3, [pc, #68]	; (8003158 <HAL_RCC_OscConfig+0x470>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0f0      	beq.n	80030fe <HAL_RCC_OscConfig+0x416>
 800311c:	e054      	b.n	80031c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311e:	4b10      	ldr	r3, [pc, #64]	; (8003160 <HAL_RCC_OscConfig+0x478>)
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003124:	f7fe fb6a 	bl	80017fc <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800312c:	f7fe fb66 	bl	80017fc <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e045      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313e:	4b06      	ldr	r3, [pc, #24]	; (8003158 <HAL_RCC_OscConfig+0x470>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f0      	bne.n	800312c <HAL_RCC_OscConfig+0x444>
 800314a:	e03d      	b.n	80031c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d107      	bne.n	8003164 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e038      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
 8003158:	40023800 	.word	0x40023800
 800315c:	40007000 	.word	0x40007000
 8003160:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003164:	4b1b      	ldr	r3, [pc, #108]	; (80031d4 <HAL_RCC_OscConfig+0x4ec>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d028      	beq.n	80031c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800317c:	429a      	cmp	r2, r3
 800317e:	d121      	bne.n	80031c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318a:	429a      	cmp	r2, r3
 800318c:	d11a      	bne.n	80031c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003194:	4013      	ands	r3, r2
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800319a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800319c:	4293      	cmp	r3, r2
 800319e:	d111      	bne.n	80031c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031aa:	085b      	lsrs	r3, r3, #1
 80031ac:	3b01      	subs	r3, #1
 80031ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d107      	bne.n	80031c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40023800 	.word	0x40023800

080031d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e0cc      	b.n	8003386 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031ec:	4b68      	ldr	r3, [pc, #416]	; (8003390 <HAL_RCC_ClockConfig+0x1b8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d90c      	bls.n	8003214 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fa:	4b65      	ldr	r3, [pc, #404]	; (8003390 <HAL_RCC_ClockConfig+0x1b8>)
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003202:	4b63      	ldr	r3, [pc, #396]	; (8003390 <HAL_RCC_ClockConfig+0x1b8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d001      	beq.n	8003214 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0b8      	b.n	8003386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d020      	beq.n	8003262 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800322c:	4b59      	ldr	r3, [pc, #356]	; (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	4a58      	ldr	r2, [pc, #352]	; (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003236:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003244:	4b53      	ldr	r3, [pc, #332]	; (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	4a52      	ldr	r2, [pc, #328]	; (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800324e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003250:	4b50      	ldr	r3, [pc, #320]	; (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	494d      	ldr	r1, [pc, #308]	; (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	4313      	orrs	r3, r2
 8003260:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d044      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d107      	bne.n	8003286 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003276:	4b47      	ldr	r3, [pc, #284]	; (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d119      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e07f      	b.n	8003386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d003      	beq.n	8003296 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003292:	2b03      	cmp	r3, #3
 8003294:	d107      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003296:	4b3f      	ldr	r3, [pc, #252]	; (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e06f      	b.n	8003386 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a6:	4b3b      	ldr	r3, [pc, #236]	; (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e067      	b.n	8003386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032b6:	4b37      	ldr	r3, [pc, #220]	; (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f023 0203 	bic.w	r2, r3, #3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	4934      	ldr	r1, [pc, #208]	; (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032c8:	f7fe fa98 	bl	80017fc <HAL_GetTick>
 80032cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ce:	e00a      	b.n	80032e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d0:	f7fe fa94 	bl	80017fc <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	f241 3288 	movw	r2, #5000	; 0x1388
 80032de:	4293      	cmp	r3, r2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e04f      	b.n	8003386 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e6:	4b2b      	ldr	r3, [pc, #172]	; (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 020c 	and.w	r2, r3, #12
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d1eb      	bne.n	80032d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032f8:	4b25      	ldr	r3, [pc, #148]	; (8003390 <HAL_RCC_ClockConfig+0x1b8>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d20c      	bcs.n	8003320 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003306:	4b22      	ldr	r3, [pc, #136]	; (8003390 <HAL_RCC_ClockConfig+0x1b8>)
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800330e:	4b20      	ldr	r3, [pc, #128]	; (8003390 <HAL_RCC_ClockConfig+0x1b8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d001      	beq.n	8003320 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e032      	b.n	8003386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	d008      	beq.n	800333e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800332c:	4b19      	ldr	r3, [pc, #100]	; (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	4916      	ldr	r1, [pc, #88]	; (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	4313      	orrs	r3, r2
 800333c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d009      	beq.n	800335e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800334a:	4b12      	ldr	r3, [pc, #72]	; (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	490e      	ldr	r1, [pc, #56]	; (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	4313      	orrs	r3, r2
 800335c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800335e:	f000 f821 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 8003362:	4602      	mov	r2, r0
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	091b      	lsrs	r3, r3, #4
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	490a      	ldr	r1, [pc, #40]	; (8003398 <HAL_RCC_ClockConfig+0x1c0>)
 8003370:	5ccb      	ldrb	r3, [r1, r3]
 8003372:	fa22 f303 	lsr.w	r3, r2, r3
 8003376:	4a09      	ldr	r2, [pc, #36]	; (800339c <HAL_RCC_ClockConfig+0x1c4>)
 8003378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800337a:	4b09      	ldr	r3, [pc, #36]	; (80033a0 <HAL_RCC_ClockConfig+0x1c8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7fe f8aa 	bl	80014d8 <HAL_InitTick>

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40023c00 	.word	0x40023c00
 8003394:	40023800 	.word	0x40023800
 8003398:	08007c3c 	.word	0x08007c3c
 800339c:	20000000 	.word	0x20000000
 80033a0:	20000004 	.word	0x20000004

080033a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033a8:	b094      	sub	sp, #80	; 0x50
 80033aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	647b      	str	r3, [r7, #68]	; 0x44
 80033b0:	2300      	movs	r3, #0
 80033b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033b4:	2300      	movs	r3, #0
 80033b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033bc:	4b79      	ldr	r3, [pc, #484]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 030c 	and.w	r3, r3, #12
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d00d      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0x40>
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	f200 80e1 	bhi.w	8003590 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <HAL_RCC_GetSysClockFreq+0x34>
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d003      	beq.n	80033de <HAL_RCC_GetSysClockFreq+0x3a>
 80033d6:	e0db      	b.n	8003590 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033d8:	4b73      	ldr	r3, [pc, #460]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80033da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80033dc:	e0db      	b.n	8003596 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033de:	4b73      	ldr	r3, [pc, #460]	; (80035ac <HAL_RCC_GetSysClockFreq+0x208>)
 80033e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033e2:	e0d8      	b.n	8003596 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033e4:	4b6f      	ldr	r3, [pc, #444]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033ee:	4b6d      	ldr	r3, [pc, #436]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d063      	beq.n	80034c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033fa:	4b6a      	ldr	r3, [pc, #424]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	099b      	lsrs	r3, r3, #6
 8003400:	2200      	movs	r2, #0
 8003402:	63bb      	str	r3, [r7, #56]	; 0x38
 8003404:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800340c:	633b      	str	r3, [r7, #48]	; 0x30
 800340e:	2300      	movs	r3, #0
 8003410:	637b      	str	r3, [r7, #52]	; 0x34
 8003412:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003416:	4622      	mov	r2, r4
 8003418:	462b      	mov	r3, r5
 800341a:	f04f 0000 	mov.w	r0, #0
 800341e:	f04f 0100 	mov.w	r1, #0
 8003422:	0159      	lsls	r1, r3, #5
 8003424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003428:	0150      	lsls	r0, r2, #5
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4621      	mov	r1, r4
 8003430:	1a51      	subs	r1, r2, r1
 8003432:	6139      	str	r1, [r7, #16]
 8003434:	4629      	mov	r1, r5
 8003436:	eb63 0301 	sbc.w	r3, r3, r1
 800343a:	617b      	str	r3, [r7, #20]
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003448:	4659      	mov	r1, fp
 800344a:	018b      	lsls	r3, r1, #6
 800344c:	4651      	mov	r1, sl
 800344e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003452:	4651      	mov	r1, sl
 8003454:	018a      	lsls	r2, r1, #6
 8003456:	4651      	mov	r1, sl
 8003458:	ebb2 0801 	subs.w	r8, r2, r1
 800345c:	4659      	mov	r1, fp
 800345e:	eb63 0901 	sbc.w	r9, r3, r1
 8003462:	f04f 0200 	mov.w	r2, #0
 8003466:	f04f 0300 	mov.w	r3, #0
 800346a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800346e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003472:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003476:	4690      	mov	r8, r2
 8003478:	4699      	mov	r9, r3
 800347a:	4623      	mov	r3, r4
 800347c:	eb18 0303 	adds.w	r3, r8, r3
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	462b      	mov	r3, r5
 8003484:	eb49 0303 	adc.w	r3, r9, r3
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003496:	4629      	mov	r1, r5
 8003498:	024b      	lsls	r3, r1, #9
 800349a:	4621      	mov	r1, r4
 800349c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034a0:	4621      	mov	r1, r4
 80034a2:	024a      	lsls	r2, r1, #9
 80034a4:	4610      	mov	r0, r2
 80034a6:	4619      	mov	r1, r3
 80034a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034aa:	2200      	movs	r2, #0
 80034ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034b4:	f7fc feec 	bl	8000290 <__aeabi_uldivmod>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4613      	mov	r3, r2
 80034be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c0:	e058      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034c2:	4b38      	ldr	r3, [pc, #224]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	099b      	lsrs	r3, r3, #6
 80034c8:	2200      	movs	r2, #0
 80034ca:	4618      	mov	r0, r3
 80034cc:	4611      	mov	r1, r2
 80034ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034d2:	623b      	str	r3, [r7, #32]
 80034d4:	2300      	movs	r3, #0
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
 80034d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034dc:	4642      	mov	r2, r8
 80034de:	464b      	mov	r3, r9
 80034e0:	f04f 0000 	mov.w	r0, #0
 80034e4:	f04f 0100 	mov.w	r1, #0
 80034e8:	0159      	lsls	r1, r3, #5
 80034ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ee:	0150      	lsls	r0, r2, #5
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4641      	mov	r1, r8
 80034f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80034fa:	4649      	mov	r1, r9
 80034fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800350c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003510:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003514:	ebb2 040a 	subs.w	r4, r2, sl
 8003518:	eb63 050b 	sbc.w	r5, r3, fp
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	00eb      	lsls	r3, r5, #3
 8003526:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800352a:	00e2      	lsls	r2, r4, #3
 800352c:	4614      	mov	r4, r2
 800352e:	461d      	mov	r5, r3
 8003530:	4643      	mov	r3, r8
 8003532:	18e3      	adds	r3, r4, r3
 8003534:	603b      	str	r3, [r7, #0]
 8003536:	464b      	mov	r3, r9
 8003538:	eb45 0303 	adc.w	r3, r5, r3
 800353c:	607b      	str	r3, [r7, #4]
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	e9d7 4500 	ldrd	r4, r5, [r7]
 800354a:	4629      	mov	r1, r5
 800354c:	028b      	lsls	r3, r1, #10
 800354e:	4621      	mov	r1, r4
 8003550:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003554:	4621      	mov	r1, r4
 8003556:	028a      	lsls	r2, r1, #10
 8003558:	4610      	mov	r0, r2
 800355a:	4619      	mov	r1, r3
 800355c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800355e:	2200      	movs	r2, #0
 8003560:	61bb      	str	r3, [r7, #24]
 8003562:	61fa      	str	r2, [r7, #28]
 8003564:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003568:	f7fc fe92 	bl	8000290 <__aeabi_uldivmod>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4613      	mov	r3, r2
 8003572:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003574:	4b0b      	ldr	r3, [pc, #44]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	0c1b      	lsrs	r3, r3, #16
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	3301      	adds	r3, #1
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003584:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003588:	fbb2 f3f3 	udiv	r3, r2, r3
 800358c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800358e:	e002      	b.n	8003596 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003590:	4b05      	ldr	r3, [pc, #20]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003592:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003594:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003598:	4618      	mov	r0, r3
 800359a:	3750      	adds	r7, #80	; 0x50
 800359c:	46bd      	mov	sp, r7
 800359e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035a2:	bf00      	nop
 80035a4:	40023800 	.word	0x40023800
 80035a8:	00f42400 	.word	0x00f42400
 80035ac:	007a1200 	.word	0x007a1200

080035b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035b4:	4b03      	ldr	r3, [pc, #12]	; (80035c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80035b6:	681b      	ldr	r3, [r3, #0]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	20000000 	.word	0x20000000

080035c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035cc:	f7ff fff0 	bl	80035b0 <HAL_RCC_GetHCLKFreq>
 80035d0:	4602      	mov	r2, r0
 80035d2:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	0a9b      	lsrs	r3, r3, #10
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	4903      	ldr	r1, [pc, #12]	; (80035ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80035de:	5ccb      	ldrb	r3, [r1, r3]
 80035e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40023800 	.word	0x40023800
 80035ec:	08007c4c 	.word	0x08007c4c

080035f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035f4:	f7ff ffdc 	bl	80035b0 <HAL_RCC_GetHCLKFreq>
 80035f8:	4602      	mov	r2, r0
 80035fa:	4b05      	ldr	r3, [pc, #20]	; (8003610 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	0b5b      	lsrs	r3, r3, #13
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	4903      	ldr	r1, [pc, #12]	; (8003614 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003606:	5ccb      	ldrb	r3, [r1, r3]
 8003608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800360c:	4618      	mov	r0, r3
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40023800 	.word	0x40023800
 8003614:	08007c4c 	.word	0x08007c4c

08003618 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	220f      	movs	r2, #15
 8003626:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003628:	4b12      	ldr	r3, [pc, #72]	; (8003674 <HAL_RCC_GetClockConfig+0x5c>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 0203 	and.w	r2, r3, #3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003634:	4b0f      	ldr	r3, [pc, #60]	; (8003674 <HAL_RCC_GetClockConfig+0x5c>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003640:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <HAL_RCC_GetClockConfig+0x5c>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800364c:	4b09      	ldr	r3, [pc, #36]	; (8003674 <HAL_RCC_GetClockConfig+0x5c>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	08db      	lsrs	r3, r3, #3
 8003652:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800365a:	4b07      	ldr	r3, [pc, #28]	; (8003678 <HAL_RCC_GetClockConfig+0x60>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 020f 	and.w	r2, r3, #15
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	601a      	str	r2, [r3, #0]
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40023800 	.word	0x40023800
 8003678:	40023c00 	.word	0x40023c00

0800367c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10b      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d105      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d075      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80036b0:	4b91      	ldr	r3, [pc, #580]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80036b6:	f7fe f8a1 	bl	80017fc <HAL_GetTick>
 80036ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036bc:	e008      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80036be:	f7fe f89d 	bl	80017fc <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e189      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036d0:	4b8a      	ldr	r3, [pc, #552]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1f0      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d009      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	019a      	lsls	r2, r3, #6
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	071b      	lsls	r3, r3, #28
 80036f4:	4981      	ldr	r1, [pc, #516]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d01f      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003708:	4b7c      	ldr	r3, [pc, #496]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800370a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800370e:	0f1b      	lsrs	r3, r3, #28
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	019a      	lsls	r2, r3, #6
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	061b      	lsls	r3, r3, #24
 8003722:	431a      	orrs	r2, r3
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	071b      	lsls	r3, r3, #28
 8003728:	4974      	ldr	r1, [pc, #464]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003730:	4b72      	ldr	r3, [pc, #456]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003732:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003736:	f023 021f 	bic.w	r2, r3, #31
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	3b01      	subs	r3, #1
 8003740:	496e      	ldr	r1, [pc, #440]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00d      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	019a      	lsls	r2, r3, #6
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	061b      	lsls	r3, r3, #24
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	071b      	lsls	r3, r3, #28
 8003768:	4964      	ldr	r1, [pc, #400]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003770:	4b61      	ldr	r3, [pc, #388]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003772:	2201      	movs	r2, #1
 8003774:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003776:	f7fe f841 	bl	80017fc <HAL_GetTick>
 800377a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800377c:	e008      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800377e:	f7fe f83d 	bl	80017fc <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d901      	bls.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e129      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003790:	4b5a      	ldr	r3, [pc, #360]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0f0      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d105      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d079      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80037b4:	4b52      	ldr	r3, [pc, #328]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80037ba:	f7fe f81f 	bl	80017fc <HAL_GetTick>
 80037be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037c0:	e008      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80037c2:	f7fe f81b 	bl	80017fc <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e107      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037d4:	4b49      	ldr	r3, [pc, #292]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037e0:	d0ef      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0304 	and.w	r3, r3, #4
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d020      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80037ee:	4b43      	ldr	r3, [pc, #268]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f4:	0f1b      	lsrs	r3, r3, #28
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	019a      	lsls	r2, r3, #6
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	061b      	lsls	r3, r3, #24
 8003808:	431a      	orrs	r2, r3
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	071b      	lsls	r3, r3, #28
 800380e:	493b      	ldr	r1, [pc, #236]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003816:	4b39      	ldr	r3, [pc, #228]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800381c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	3b01      	subs	r3, #1
 8003826:	021b      	lsls	r3, r3, #8
 8003828:	4934      	ldr	r1, [pc, #208]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800382a:	4313      	orrs	r3, r2
 800382c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b00      	cmp	r3, #0
 800383a:	d01e      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800383c:	4b2f      	ldr	r3, [pc, #188]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003842:	0e1b      	lsrs	r3, r3, #24
 8003844:	f003 030f 	and.w	r3, r3, #15
 8003848:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	019a      	lsls	r2, r3, #6
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	061b      	lsls	r3, r3, #24
 8003854:	431a      	orrs	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	071b      	lsls	r3, r3, #28
 800385c:	4927      	ldr	r1, [pc, #156]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003864:	4b25      	ldr	r3, [pc, #148]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800386a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	4922      	ldr	r1, [pc, #136]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800387a:	4b21      	ldr	r3, [pc, #132]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800387c:	2201      	movs	r2, #1
 800387e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003880:	f7fd ffbc 	bl	80017fc <HAL_GetTick>
 8003884:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003886:	e008      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003888:	f7fd ffb8 	bl	80017fc <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e0a4      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800389a:	4b18      	ldr	r3, [pc, #96]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038a6:	d1ef      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0320 	and.w	r3, r3, #32
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 808b 	beq.w	80039cc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038b6:	2300      	movs	r3, #0
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	4b10      	ldr	r3, [pc, #64]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	4a0f      	ldr	r2, [pc, #60]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c4:	6413      	str	r3, [r2, #64]	; 0x40
 80038c6:	4b0d      	ldr	r3, [pc, #52]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80038d2:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a0b      	ldr	r2, [pc, #44]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80038d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038de:	f7fd ff8d 	bl	80017fc <HAL_GetTick>
 80038e2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80038e4:	e010      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80038e6:	f7fd ff89 	bl	80017fc <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d909      	bls.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e075      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80038f8:	42470068 	.word	0x42470068
 80038fc:	40023800 	.word	0x40023800
 8003900:	42470070 	.word	0x42470070
 8003904:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003908:	4b38      	ldr	r3, [pc, #224]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0e8      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003914:	4b36      	ldr	r3, [pc, #216]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003918:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800391c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d02f      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	429a      	cmp	r2, r3
 8003930:	d028      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003932:	4b2f      	ldr	r3, [pc, #188]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800393a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800393c:	4b2d      	ldr	r3, [pc, #180]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800393e:	2201      	movs	r2, #1
 8003940:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003942:	4b2c      	ldr	r3, [pc, #176]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003948:	4a29      	ldr	r2, [pc, #164]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800394e:	4b28      	ldr	r3, [pc, #160]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b01      	cmp	r3, #1
 8003958:	d114      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800395a:	f7fd ff4f 	bl	80017fc <HAL_GetTick>
 800395e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003960:	e00a      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003962:	f7fd ff4b 	bl	80017fc <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003970:	4293      	cmp	r3, r2
 8003972:	d901      	bls.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e035      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003978:	4b1d      	ldr	r3, [pc, #116]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800397a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0ee      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003988:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800398c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003990:	d10d      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003992:	4b17      	ldr	r3, [pc, #92]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80039a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a6:	4912      	ldr	r1, [pc, #72]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	608b      	str	r3, [r1, #8]
 80039ac:	e005      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80039ae:	4b10      	ldr	r3, [pc, #64]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	4a0f      	ldr	r2, [pc, #60]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80039b4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039b8:	6093      	str	r3, [r2, #8]
 80039ba:	4b0d      	ldr	r3, [pc, #52]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80039bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c6:	490a      	ldr	r1, [pc, #40]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d004      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80039de:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80039e0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40007000 	.word	0x40007000
 80039f0:	40023800 	.word	0x40023800
 80039f4:	42470e40 	.word	0x42470e40
 80039f8:	424711e0 	.word	0x424711e0

080039fc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e025      	b.n	8003a5c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d106      	bne.n	8003a2a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7fd fd4d 	bl	80014c4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	f001 fd2f 	bl	80054a0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	6839      	ldr	r1, [r7, #0]
 8003a4e:	f001 fd84 	bl	800555a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e07b      	b.n	8003b6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d108      	bne.n	8003a90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a86:	d009      	beq.n	8003a9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	61da      	str	r2, [r3, #28]
 8003a8e:	e005      	b.n	8003a9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d106      	bne.n	8003abc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fd fbb8 	bl	800122c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ad2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	431a      	orrs	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	431a      	orrs	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b20:	ea42 0103 	orr.w	r1, r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b28:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	0c1b      	lsrs	r3, r3, #16
 8003b3a:	f003 0104 	and.w	r1, r3, #4
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	f003 0210 	and.w	r2, r3, #16
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69da      	ldr	r2, [r3, #28]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b082      	sub	sp, #8
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e041      	b.n	8003c0c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d106      	bne.n	8003ba2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7fd fb8d 	bl	80012bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	f000 fa95 	bl	80040e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d001      	beq.n	8003c2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e04e      	b.n	8003cca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0201 	orr.w	r2, r2, #1
 8003c42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a23      	ldr	r2, [pc, #140]	; (8003cd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d022      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x80>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c56:	d01d      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x80>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a1f      	ldr	r2, [pc, #124]	; (8003cdc <HAL_TIM_Base_Start_IT+0xc8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d018      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x80>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a1e      	ldr	r2, [pc, #120]	; (8003ce0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d013      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x80>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a1c      	ldr	r2, [pc, #112]	; (8003ce4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d00e      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x80>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1b      	ldr	r2, [pc, #108]	; (8003ce8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d009      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x80>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a19      	ldr	r2, [pc, #100]	; (8003cec <HAL_TIM_Base_Start_IT+0xd8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d004      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x80>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a18      	ldr	r2, [pc, #96]	; (8003cf0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d111      	bne.n	8003cb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b06      	cmp	r3, #6
 8003ca4:	d010      	beq.n	8003cc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f042 0201 	orr.w	r2, r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb6:	e007      	b.n	8003cc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40010000 	.word	0x40010000
 8003cdc:	40000400 	.word	0x40000400
 8003ce0:	40000800 	.word	0x40000800
 8003ce4:	40000c00 	.word	0x40000c00
 8003ce8:	40010400 	.word	0x40010400
 8003cec:	40014000 	.word	0x40014000
 8003cf0:	40001800 	.word	0x40001800

08003cf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d122      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d11b      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f06f 0202 	mvn.w	r2, #2
 8003d20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f9b5 	bl	80040a6 <HAL_TIM_IC_CaptureCallback>
 8003d3c:	e005      	b.n	8003d4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f9a7 	bl	8004092 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f9b8 	bl	80040ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0304 	and.w	r3, r3, #4
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d122      	bne.n	8003da4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d11b      	bne.n	8003da4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0204 	mvn.w	r2, #4
 8003d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2202      	movs	r2, #2
 8003d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f98b 	bl	80040a6 <HAL_TIM_IC_CaptureCallback>
 8003d90:	e005      	b.n	8003d9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f97d 	bl	8004092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f98e 	bl	80040ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d122      	bne.n	8003df8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d11b      	bne.n	8003df8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f06f 0208 	mvn.w	r2, #8
 8003dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2204      	movs	r2, #4
 8003dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f961 	bl	80040a6 <HAL_TIM_IC_CaptureCallback>
 8003de4:	e005      	b.n	8003df2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f953 	bl	8004092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f964 	bl	80040ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	2b10      	cmp	r3, #16
 8003e04:	d122      	bne.n	8003e4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	2b10      	cmp	r3, #16
 8003e12:	d11b      	bne.n	8003e4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f06f 0210 	mvn.w	r2, #16
 8003e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2208      	movs	r2, #8
 8003e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f937 	bl	80040a6 <HAL_TIM_IC_CaptureCallback>
 8003e38:	e005      	b.n	8003e46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f929 	bl	8004092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f93a 	bl	80040ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d10e      	bne.n	8003e78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d107      	bne.n	8003e78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f06f 0201 	mvn.w	r2, #1
 8003e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7fc ffb2 	bl	8000ddc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e82:	2b80      	cmp	r3, #128	; 0x80
 8003e84:	d10e      	bne.n	8003ea4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e90:	2b80      	cmp	r3, #128	; 0x80
 8003e92:	d107      	bne.n	8003ea4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fae0 	bl	8004464 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eae:	2b40      	cmp	r3, #64	; 0x40
 8003eb0:	d10e      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebc:	2b40      	cmp	r3, #64	; 0x40
 8003ebe:	d107      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f8ff 	bl	80040ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	2b20      	cmp	r3, #32
 8003edc:	d10e      	bne.n	8003efc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f003 0320 	and.w	r3, r3, #32
 8003ee8:	2b20      	cmp	r3, #32
 8003eea:	d107      	bne.n	8003efc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f06f 0220 	mvn.w	r2, #32
 8003ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 faaa 	bl	8004450 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003efc:	bf00      	nop
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d101      	bne.n	8003f20 <HAL_TIM_ConfigClockSource+0x1c>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	e0b4      	b.n	800408a <HAL_TIM_ConfigClockSource+0x186>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f58:	d03e      	beq.n	8003fd8 <HAL_TIM_ConfigClockSource+0xd4>
 8003f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f5e:	f200 8087 	bhi.w	8004070 <HAL_TIM_ConfigClockSource+0x16c>
 8003f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f66:	f000 8086 	beq.w	8004076 <HAL_TIM_ConfigClockSource+0x172>
 8003f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f6e:	d87f      	bhi.n	8004070 <HAL_TIM_ConfigClockSource+0x16c>
 8003f70:	2b70      	cmp	r3, #112	; 0x70
 8003f72:	d01a      	beq.n	8003faa <HAL_TIM_ConfigClockSource+0xa6>
 8003f74:	2b70      	cmp	r3, #112	; 0x70
 8003f76:	d87b      	bhi.n	8004070 <HAL_TIM_ConfigClockSource+0x16c>
 8003f78:	2b60      	cmp	r3, #96	; 0x60
 8003f7a:	d050      	beq.n	800401e <HAL_TIM_ConfigClockSource+0x11a>
 8003f7c:	2b60      	cmp	r3, #96	; 0x60
 8003f7e:	d877      	bhi.n	8004070 <HAL_TIM_ConfigClockSource+0x16c>
 8003f80:	2b50      	cmp	r3, #80	; 0x50
 8003f82:	d03c      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0xfa>
 8003f84:	2b50      	cmp	r3, #80	; 0x50
 8003f86:	d873      	bhi.n	8004070 <HAL_TIM_ConfigClockSource+0x16c>
 8003f88:	2b40      	cmp	r3, #64	; 0x40
 8003f8a:	d058      	beq.n	800403e <HAL_TIM_ConfigClockSource+0x13a>
 8003f8c:	2b40      	cmp	r3, #64	; 0x40
 8003f8e:	d86f      	bhi.n	8004070 <HAL_TIM_ConfigClockSource+0x16c>
 8003f90:	2b30      	cmp	r3, #48	; 0x30
 8003f92:	d064      	beq.n	800405e <HAL_TIM_ConfigClockSource+0x15a>
 8003f94:	2b30      	cmp	r3, #48	; 0x30
 8003f96:	d86b      	bhi.n	8004070 <HAL_TIM_ConfigClockSource+0x16c>
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	d060      	beq.n	800405e <HAL_TIM_ConfigClockSource+0x15a>
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d867      	bhi.n	8004070 <HAL_TIM_ConfigClockSource+0x16c>
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d05c      	beq.n	800405e <HAL_TIM_ConfigClockSource+0x15a>
 8003fa4:	2b10      	cmp	r3, #16
 8003fa6:	d05a      	beq.n	800405e <HAL_TIM_ConfigClockSource+0x15a>
 8003fa8:	e062      	b.n	8004070 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	6899      	ldr	r1, [r3, #8]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f000 f9ad 	bl	8004318 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	609a      	str	r2, [r3, #8]
      break;
 8003fd6:	e04f      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	6899      	ldr	r1, [r3, #8]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f000 f996 	bl	8004318 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ffa:	609a      	str	r2, [r3, #8]
      break;
 8003ffc:	e03c      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	6859      	ldr	r1, [r3, #4]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	461a      	mov	r2, r3
 800400c:	f000 f90a 	bl	8004224 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2150      	movs	r1, #80	; 0x50
 8004016:	4618      	mov	r0, r3
 8004018:	f000 f963 	bl	80042e2 <TIM_ITRx_SetConfig>
      break;
 800401c:	e02c      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6818      	ldr	r0, [r3, #0]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	6859      	ldr	r1, [r3, #4]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	461a      	mov	r2, r3
 800402c:	f000 f929 	bl	8004282 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2160      	movs	r1, #96	; 0x60
 8004036:	4618      	mov	r0, r3
 8004038:	f000 f953 	bl	80042e2 <TIM_ITRx_SetConfig>
      break;
 800403c:	e01c      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6818      	ldr	r0, [r3, #0]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	6859      	ldr	r1, [r3, #4]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	461a      	mov	r2, r3
 800404c:	f000 f8ea 	bl	8004224 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2140      	movs	r1, #64	; 0x40
 8004056:	4618      	mov	r0, r3
 8004058:	f000 f943 	bl	80042e2 <TIM_ITRx_SetConfig>
      break;
 800405c:	e00c      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4619      	mov	r1, r3
 8004068:	4610      	mov	r0, r2
 800406a:	f000 f93a 	bl	80042e2 <TIM_ITRx_SetConfig>
      break;
 800406e:	e003      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	73fb      	strb	r3, [r7, #15]
      break;
 8004074:	e000      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004076:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004088:	7bfb      	ldrb	r3, [r7, #15]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
	...

080040e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a40      	ldr	r2, [pc, #256]	; (80041f8 <TIM_Base_SetConfig+0x114>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d013      	beq.n	8004124 <TIM_Base_SetConfig+0x40>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004102:	d00f      	beq.n	8004124 <TIM_Base_SetConfig+0x40>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a3d      	ldr	r2, [pc, #244]	; (80041fc <TIM_Base_SetConfig+0x118>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d00b      	beq.n	8004124 <TIM_Base_SetConfig+0x40>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a3c      	ldr	r2, [pc, #240]	; (8004200 <TIM_Base_SetConfig+0x11c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d007      	beq.n	8004124 <TIM_Base_SetConfig+0x40>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a3b      	ldr	r2, [pc, #236]	; (8004204 <TIM_Base_SetConfig+0x120>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d003      	beq.n	8004124 <TIM_Base_SetConfig+0x40>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a3a      	ldr	r2, [pc, #232]	; (8004208 <TIM_Base_SetConfig+0x124>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d108      	bne.n	8004136 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a2f      	ldr	r2, [pc, #188]	; (80041f8 <TIM_Base_SetConfig+0x114>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d02b      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004144:	d027      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a2c      	ldr	r2, [pc, #176]	; (80041fc <TIM_Base_SetConfig+0x118>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d023      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a2b      	ldr	r2, [pc, #172]	; (8004200 <TIM_Base_SetConfig+0x11c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d01f      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a2a      	ldr	r2, [pc, #168]	; (8004204 <TIM_Base_SetConfig+0x120>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d01b      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a29      	ldr	r2, [pc, #164]	; (8004208 <TIM_Base_SetConfig+0x124>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d017      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a28      	ldr	r2, [pc, #160]	; (800420c <TIM_Base_SetConfig+0x128>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d013      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a27      	ldr	r2, [pc, #156]	; (8004210 <TIM_Base_SetConfig+0x12c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00f      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a26      	ldr	r2, [pc, #152]	; (8004214 <TIM_Base_SetConfig+0x130>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00b      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a25      	ldr	r2, [pc, #148]	; (8004218 <TIM_Base_SetConfig+0x134>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d007      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a24      	ldr	r2, [pc, #144]	; (800421c <TIM_Base_SetConfig+0x138>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d003      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a23      	ldr	r2, [pc, #140]	; (8004220 <TIM_Base_SetConfig+0x13c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d108      	bne.n	80041a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800419c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a0a      	ldr	r2, [pc, #40]	; (80041f8 <TIM_Base_SetConfig+0x114>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d003      	beq.n	80041dc <TIM_Base_SetConfig+0xf8>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a0c      	ldr	r2, [pc, #48]	; (8004208 <TIM_Base_SetConfig+0x124>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d103      	bne.n	80041e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	691a      	ldr	r2, [r3, #16]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	615a      	str	r2, [r3, #20]
}
 80041ea:	bf00      	nop
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	40010000 	.word	0x40010000
 80041fc:	40000400 	.word	0x40000400
 8004200:	40000800 	.word	0x40000800
 8004204:	40000c00 	.word	0x40000c00
 8004208:	40010400 	.word	0x40010400
 800420c:	40014000 	.word	0x40014000
 8004210:	40014400 	.word	0x40014400
 8004214:	40014800 	.word	0x40014800
 8004218:	40001800 	.word	0x40001800
 800421c:	40001c00 	.word	0x40001c00
 8004220:	40002000 	.word	0x40002000

08004224 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	f023 0201 	bic.w	r2, r3, #1
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800424e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	4313      	orrs	r3, r2
 8004258:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f023 030a 	bic.w	r3, r3, #10
 8004260:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	4313      	orrs	r3, r2
 8004268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	621a      	str	r2, [r3, #32]
}
 8004276:	bf00      	nop
 8004278:	371c      	adds	r7, #28
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004282:	b480      	push	{r7}
 8004284:	b087      	sub	sp, #28
 8004286:	af00      	add	r7, sp, #0
 8004288:	60f8      	str	r0, [r7, #12]
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	f023 0210 	bic.w	r2, r3, #16
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	031b      	lsls	r3, r3, #12
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	621a      	str	r2, [r3, #32]
}
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b085      	sub	sp, #20
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4313      	orrs	r3, r2
 8004300:	f043 0307 	orr.w	r3, r3, #7
 8004304:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	609a      	str	r2, [r3, #8]
}
 800430c:	bf00      	nop
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
 8004324:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004332:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	021a      	lsls	r2, r3, #8
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	431a      	orrs	r2, r3
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4313      	orrs	r3, r2
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	4313      	orrs	r3, r2
 8004344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	609a      	str	r2, [r3, #8]
}
 800434c:	bf00      	nop
 800434e:	371c      	adds	r7, #28
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800436c:	2302      	movs	r3, #2
 800436e:	e05a      	b.n	8004426 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004396:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	4313      	orrs	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a21      	ldr	r2, [pc, #132]	; (8004434 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d022      	beq.n	80043fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043bc:	d01d      	beq.n	80043fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a1d      	ldr	r2, [pc, #116]	; (8004438 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d018      	beq.n	80043fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a1b      	ldr	r2, [pc, #108]	; (800443c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d013      	beq.n	80043fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a1a      	ldr	r2, [pc, #104]	; (8004440 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d00e      	beq.n	80043fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a18      	ldr	r2, [pc, #96]	; (8004444 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d009      	beq.n	80043fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a17      	ldr	r2, [pc, #92]	; (8004448 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d004      	beq.n	80043fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a15      	ldr	r2, [pc, #84]	; (800444c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d10c      	bne.n	8004414 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004400:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	4313      	orrs	r3, r2
 800440a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40010000 	.word	0x40010000
 8004438:	40000400 	.word	0x40000400
 800443c:	40000800 	.word	0x40000800
 8004440:	40000c00 	.word	0x40000c00
 8004444:	40010400 	.word	0x40010400
 8004448:	40014000 	.word	0x40014000
 800444c:	40001800 	.word	0x40001800

08004450 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e03f      	b.n	800450a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d106      	bne.n	80044a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fc ff2e 	bl	8001300 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2224      	movs	r2, #36	; 0x24
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 fd7b 	bl	8004fb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	691a      	ldr	r2, [r3, #16]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	695a      	ldr	r2, [r3, #20]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68da      	ldr	r2, [r3, #12]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2220      	movs	r2, #32
 8004504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b08a      	sub	sp, #40	; 0x28
 8004516:	af02      	add	r7, sp, #8
 8004518:	60f8      	str	r0, [r7, #12]
 800451a:	60b9      	str	r1, [r7, #8]
 800451c:	603b      	str	r3, [r7, #0]
 800451e:	4613      	mov	r3, r2
 8004520:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b20      	cmp	r3, #32
 8004530:	d17c      	bne.n	800462c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d002      	beq.n	800453e <HAL_UART_Transmit+0x2c>
 8004538:	88fb      	ldrh	r3, [r7, #6]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e075      	b.n	800462e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <HAL_UART_Transmit+0x3e>
 800454c:	2302      	movs	r3, #2
 800454e:	e06e      	b.n	800462e <HAL_UART_Transmit+0x11c>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2221      	movs	r2, #33	; 0x21
 8004562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004566:	f7fd f949 	bl	80017fc <HAL_GetTick>
 800456a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	88fa      	ldrh	r2, [r7, #6]
 8004570:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	88fa      	ldrh	r2, [r7, #6]
 8004576:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004580:	d108      	bne.n	8004594 <HAL_UART_Transmit+0x82>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d104      	bne.n	8004594 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800458a:	2300      	movs	r3, #0
 800458c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	61bb      	str	r3, [r7, #24]
 8004592:	e003      	b.n	800459c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004598:	2300      	movs	r3, #0
 800459a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80045a4:	e02a      	b.n	80045fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2200      	movs	r2, #0
 80045ae:	2180      	movs	r1, #128	; 0x80
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 faf9 	bl	8004ba8 <UART_WaitOnFlagUntilTimeout>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e036      	b.n	800462e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10b      	bne.n	80045de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	3302      	adds	r3, #2
 80045da:	61bb      	str	r3, [r7, #24]
 80045dc:	e007      	b.n	80045ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	781a      	ldrb	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	3301      	adds	r3, #1
 80045ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004600:	b29b      	uxth	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1cf      	bne.n	80045a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2200      	movs	r2, #0
 800460e:	2140      	movs	r1, #64	; 0x40
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 fac9 	bl	8004ba8 <UART_WaitOnFlagUntilTimeout>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e006      	b.n	800462e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004628:	2300      	movs	r3, #0
 800462a:	e000      	b.n	800462e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800462c:	2302      	movs	r3, #2
  }
}
 800462e:	4618      	mov	r0, r3
 8004630:	3720      	adds	r7, #32
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
	...

08004638 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b0ba      	sub	sp, #232	; 0xe8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800465e:	2300      	movs	r3, #0
 8004660:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004664:	2300      	movs	r3, #0
 8004666:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800466a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004676:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10f      	bne.n	800469e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800467e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004682:	f003 0320 	and.w	r3, r3, #32
 8004686:	2b00      	cmp	r3, #0
 8004688:	d009      	beq.n	800469e <HAL_UART_IRQHandler+0x66>
 800468a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800468e:	f003 0320 	and.w	r3, r3, #32
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 fbd3 	bl	8004e42 <UART_Receive_IT>
      return;
 800469c:	e256      	b.n	8004b4c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800469e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 80de 	beq.w	8004864 <HAL_UART_IRQHandler+0x22c>
 80046a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d106      	bne.n	80046c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 80d1 	beq.w	8004864 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00b      	beq.n	80046e6 <HAL_UART_IRQHandler+0xae>
 80046ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d005      	beq.n	80046e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	f043 0201 	orr.w	r2, r3, #1
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00b      	beq.n	800470a <HAL_UART_IRQHandler+0xd2>
 80046f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d005      	beq.n	800470a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	f043 0202 	orr.w	r2, r3, #2
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800470a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00b      	beq.n	800472e <HAL_UART_IRQHandler+0xf6>
 8004716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d005      	beq.n	800472e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	f043 0204 	orr.w	r2, r3, #4
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800472e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d011      	beq.n	800475e <HAL_UART_IRQHandler+0x126>
 800473a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800473e:	f003 0320 	and.w	r3, r3, #32
 8004742:	2b00      	cmp	r3, #0
 8004744:	d105      	bne.n	8004752 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d005      	beq.n	800475e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	f043 0208 	orr.w	r2, r3, #8
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 81ed 	beq.w	8004b42 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800476c:	f003 0320 	and.w	r3, r3, #32
 8004770:	2b00      	cmp	r3, #0
 8004772:	d008      	beq.n	8004786 <HAL_UART_IRQHandler+0x14e>
 8004774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004778:	f003 0320 	and.w	r3, r3, #32
 800477c:	2b00      	cmp	r3, #0
 800477e:	d002      	beq.n	8004786 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 fb5e 	bl	8004e42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004790:	2b40      	cmp	r3, #64	; 0x40
 8004792:	bf0c      	ite	eq
 8004794:	2301      	moveq	r3, #1
 8004796:	2300      	movne	r3, #0
 8004798:	b2db      	uxtb	r3, r3
 800479a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d103      	bne.n	80047b2 <HAL_UART_IRQHandler+0x17a>
 80047aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d04f      	beq.n	8004852 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fa66 	bl	8004c84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c2:	2b40      	cmp	r3, #64	; 0x40
 80047c4:	d141      	bne.n	800484a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	3314      	adds	r3, #20
 80047cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047d4:	e853 3f00 	ldrex	r3, [r3]
 80047d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80047dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3314      	adds	r3, #20
 80047ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80047f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80047f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80047fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800480a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1d9      	bne.n	80047c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004816:	2b00      	cmp	r3, #0
 8004818:	d013      	beq.n	8004842 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481e:	4a7d      	ldr	r2, [pc, #500]	; (8004a14 <HAL_UART_IRQHandler+0x3dc>)
 8004820:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004826:	4618      	mov	r0, r3
 8004828:	f7fd f962 	bl	8001af0 <HAL_DMA_Abort_IT>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d016      	beq.n	8004860 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800483c:	4610      	mov	r0, r2
 800483e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004840:	e00e      	b.n	8004860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f99a 	bl	8004b7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004848:	e00a      	b.n	8004860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f996 	bl	8004b7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004850:	e006      	b.n	8004860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f992 	bl	8004b7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800485e:	e170      	b.n	8004b42 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004860:	bf00      	nop
    return;
 8004862:	e16e      	b.n	8004b42 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	2b01      	cmp	r3, #1
 800486a:	f040 814a 	bne.w	8004b02 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800486e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004872:	f003 0310 	and.w	r3, r3, #16
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 8143 	beq.w	8004b02 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800487c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004880:	f003 0310 	and.w	r3, r3, #16
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 813c 	beq.w	8004b02 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800488a:	2300      	movs	r3, #0
 800488c:	60bb      	str	r3, [r7, #8]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	60bb      	str	r3, [r7, #8]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	60bb      	str	r3, [r7, #8]
 800489e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048aa:	2b40      	cmp	r3, #64	; 0x40
 80048ac:	f040 80b4 	bne.w	8004a18 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 8140 	beq.w	8004b46 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048ce:	429a      	cmp	r2, r3
 80048d0:	f080 8139 	bcs.w	8004b46 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048e6:	f000 8088 	beq.w	80049fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	330c      	adds	r3, #12
 80048f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048f8:	e853 3f00 	ldrex	r3, [r3]
 80048fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004900:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004908:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	330c      	adds	r3, #12
 8004912:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004916:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800491a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004922:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004926:	e841 2300 	strex	r3, r2, [r1]
 800492a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800492e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1d9      	bne.n	80048ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	3314      	adds	r3, #20
 800493c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004940:	e853 3f00 	ldrex	r3, [r3]
 8004944:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004946:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004948:	f023 0301 	bic.w	r3, r3, #1
 800494c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3314      	adds	r3, #20
 8004956:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800495a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800495e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004960:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004962:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004966:	e841 2300 	strex	r3, r2, [r1]
 800496a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800496c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1e1      	bne.n	8004936 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3314      	adds	r3, #20
 8004978:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800497c:	e853 3f00 	ldrex	r3, [r3]
 8004980:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004988:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3314      	adds	r3, #20
 8004992:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004996:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004998:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800499c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800499e:	e841 2300 	strex	r3, r2, [r1]
 80049a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1e3      	bne.n	8004972 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	330c      	adds	r3, #12
 80049be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049c2:	e853 3f00 	ldrex	r3, [r3]
 80049c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ca:	f023 0310 	bic.w	r3, r3, #16
 80049ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	330c      	adds	r3, #12
 80049d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80049dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80049de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049e4:	e841 2300 	strex	r3, r2, [r1]
 80049e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80049ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1e3      	bne.n	80049b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7fd f80b 	bl	8001a10 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	4619      	mov	r1, r3
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f8c0 	bl	8004b90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a10:	e099      	b.n	8004b46 <HAL_UART_IRQHandler+0x50e>
 8004a12:	bf00      	nop
 8004a14:	08004d4b 	.word	0x08004d4b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 808b 	beq.w	8004b4a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004a34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 8086 	beq.w	8004b4a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	330c      	adds	r3, #12
 8004a44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a48:	e853 3f00 	ldrex	r3, [r3]
 8004a4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	330c      	adds	r3, #12
 8004a5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004a62:	647a      	str	r2, [r7, #68]	; 0x44
 8004a64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e3      	bne.n	8004a3e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3314      	adds	r3, #20
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	e853 3f00 	ldrex	r3, [r3]
 8004a84:	623b      	str	r3, [r7, #32]
   return(result);
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	f023 0301 	bic.w	r3, r3, #1
 8004a8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3314      	adds	r3, #20
 8004a96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a9a:	633a      	str	r2, [r7, #48]	; 0x30
 8004a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aa2:	e841 2300 	strex	r3, r2, [r1]
 8004aa6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1e3      	bne.n	8004a76 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	330c      	adds	r3, #12
 8004ac2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	e853 3f00 	ldrex	r3, [r3]
 8004aca:	60fb      	str	r3, [r7, #12]
   return(result);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f023 0310 	bic.w	r3, r3, #16
 8004ad2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	330c      	adds	r3, #12
 8004adc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ae0:	61fa      	str	r2, [r7, #28]
 8004ae2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae4:	69b9      	ldr	r1, [r7, #24]
 8004ae6:	69fa      	ldr	r2, [r7, #28]
 8004ae8:	e841 2300 	strex	r3, r2, [r1]
 8004aec:	617b      	str	r3, [r7, #20]
   return(result);
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1e3      	bne.n	8004abc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004af4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004af8:	4619      	mov	r1, r3
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f848 	bl	8004b90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b00:	e023      	b.n	8004b4a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d009      	beq.n	8004b22 <HAL_UART_IRQHandler+0x4ea>
 8004b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f929 	bl	8004d72 <UART_Transmit_IT>
    return;
 8004b20:	e014      	b.n	8004b4c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00e      	beq.n	8004b4c <HAL_UART_IRQHandler+0x514>
 8004b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d008      	beq.n	8004b4c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f969 	bl	8004e12 <UART_EndTransmit_IT>
    return;
 8004b40:	e004      	b.n	8004b4c <HAL_UART_IRQHandler+0x514>
    return;
 8004b42:	bf00      	nop
 8004b44:	e002      	b.n	8004b4c <HAL_UART_IRQHandler+0x514>
      return;
 8004b46:	bf00      	nop
 8004b48:	e000      	b.n	8004b4c <HAL_UART_IRQHandler+0x514>
      return;
 8004b4a:	bf00      	nop
  }
}
 8004b4c:	37e8      	adds	r7, #232	; 0xe8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop

08004b54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b090      	sub	sp, #64	; 0x40
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	603b      	str	r3, [r7, #0]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bb8:	e050      	b.n	8004c5c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc0:	d04c      	beq.n	8004c5c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d007      	beq.n	8004bd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bc8:	f7fc fe18 	bl	80017fc <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d241      	bcs.n	8004c5c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	330c      	adds	r3, #12
 8004bde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be2:	e853 3f00 	ldrex	r3, [r3]
 8004be6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	330c      	adds	r3, #12
 8004bf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bf8:	637a      	str	r2, [r7, #52]	; 0x34
 8004bfa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c00:	e841 2300 	strex	r3, r2, [r1]
 8004c04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1e5      	bne.n	8004bd8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3314      	adds	r3, #20
 8004c12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	e853 3f00 	ldrex	r3, [r3]
 8004c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	f023 0301 	bic.w	r3, r3, #1
 8004c22:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3314      	adds	r3, #20
 8004c2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c2c:	623a      	str	r2, [r7, #32]
 8004c2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c30:	69f9      	ldr	r1, [r7, #28]
 8004c32:	6a3a      	ldr	r2, [r7, #32]
 8004c34:	e841 2300 	strex	r3, r2, [r1]
 8004c38:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1e5      	bne.n	8004c0c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2220      	movs	r2, #32
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e00f      	b.n	8004c7c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	4013      	ands	r3, r2
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	bf0c      	ite	eq
 8004c6c:	2301      	moveq	r3, #1
 8004c6e:	2300      	movne	r3, #0
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	461a      	mov	r2, r3
 8004c74:	79fb      	ldrb	r3, [r7, #7]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d09f      	beq.n	8004bba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3740      	adds	r7, #64	; 0x40
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b095      	sub	sp, #84	; 0x54
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	330c      	adds	r3, #12
 8004c92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c96:	e853 3f00 	ldrex	r3, [r3]
 8004c9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	330c      	adds	r3, #12
 8004caa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cac:	643a      	str	r2, [r7, #64]	; 0x40
 8004cae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cb4:	e841 2300 	strex	r3, r2, [r1]
 8004cb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1e5      	bne.n	8004c8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3314      	adds	r3, #20
 8004cc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	e853 3f00 	ldrex	r3, [r3]
 8004cce:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	f023 0301 	bic.w	r3, r3, #1
 8004cd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3314      	adds	r3, #20
 8004cde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ce0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ce8:	e841 2300 	strex	r3, r2, [r1]
 8004cec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1e5      	bne.n	8004cc0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d119      	bne.n	8004d30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	330c      	adds	r3, #12
 8004d02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	e853 3f00 	ldrex	r3, [r3]
 8004d0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f023 0310 	bic.w	r3, r3, #16
 8004d12:	647b      	str	r3, [r7, #68]	; 0x44
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	330c      	adds	r3, #12
 8004d1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d1c:	61ba      	str	r2, [r7, #24]
 8004d1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	6979      	ldr	r1, [r7, #20]
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	e841 2300 	strex	r3, r2, [r1]
 8004d28:	613b      	str	r3, [r7, #16]
   return(result);
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e5      	bne.n	8004cfc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d3e:	bf00      	nop
 8004d40:	3754      	adds	r7, #84	; 0x54
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b084      	sub	sp, #16
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f7ff ff09 	bl	8004b7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d6a:	bf00      	nop
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b085      	sub	sp, #20
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b21      	cmp	r3, #33	; 0x21
 8004d84:	d13e      	bne.n	8004e04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d8e:	d114      	bne.n	8004dba <UART_Transmit_IT+0x48>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d110      	bne.n	8004dba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	461a      	mov	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	1c9a      	adds	r2, r3, #2
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	621a      	str	r2, [r3, #32]
 8004db8:	e008      	b.n	8004dcc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	1c59      	adds	r1, r3, #1
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	6211      	str	r1, [r2, #32]
 8004dc4:	781a      	ldrb	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	4619      	mov	r1, r3
 8004dda:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10f      	bne.n	8004e00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dfe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e00:	2300      	movs	r3, #0
 8004e02:	e000      	b.n	8004e06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e04:	2302      	movs	r3, #2
  }
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b082      	sub	sp, #8
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68da      	ldr	r2, [r3, #12]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7ff fe8e 	bl	8004b54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b08c      	sub	sp, #48	; 0x30
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b22      	cmp	r3, #34	; 0x22
 8004e54:	f040 80ab 	bne.w	8004fae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e60:	d117      	bne.n	8004e92 <UART_Receive_IT+0x50>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d113      	bne.n	8004e92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e72:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8a:	1c9a      	adds	r2, r3, #2
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	629a      	str	r2, [r3, #40]	; 0x28
 8004e90:	e026      	b.n	8004ee0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea4:	d007      	beq.n	8004eb6 <UART_Receive_IT+0x74>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10a      	bne.n	8004ec4 <UART_Receive_IT+0x82>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec0:	701a      	strb	r2, [r3, #0]
 8004ec2:	e008      	b.n	8004ed6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eda:	1c5a      	adds	r2, r3, #1
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	4619      	mov	r1, r3
 8004eee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d15a      	bne.n	8004faa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68da      	ldr	r2, [r3, #12]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0220 	bic.w	r2, r2, #32
 8004f02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695a      	ldr	r2, [r3, #20]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 0201 	bic.w	r2, r2, #1
 8004f22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d135      	bne.n	8004fa0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	330c      	adds	r3, #12
 8004f40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	613b      	str	r3, [r7, #16]
   return(result);
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f023 0310 	bic.w	r3, r3, #16
 8004f50:	627b      	str	r3, [r7, #36]	; 0x24
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	330c      	adds	r3, #12
 8004f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f5a:	623a      	str	r2, [r7, #32]
 8004f5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5e:	69f9      	ldr	r1, [r7, #28]
 8004f60:	6a3a      	ldr	r2, [r7, #32]
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e5      	bne.n	8004f3a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0310 	and.w	r3, r3, #16
 8004f78:	2b10      	cmp	r3, #16
 8004f7a:	d10a      	bne.n	8004f92 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	60fb      	str	r3, [r7, #12]
 8004f90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f96:	4619      	mov	r1, r3
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7ff fdf9 	bl	8004b90 <HAL_UARTEx_RxEventCallback>
 8004f9e:	e002      	b.n	8004fa6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7ff fde1 	bl	8004b68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	e002      	b.n	8004fb0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	e000      	b.n	8004fb0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004fae:	2302      	movs	r3, #2
  }
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3730      	adds	r7, #48	; 0x30
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fbc:	b0c0      	sub	sp, #256	; 0x100
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd4:	68d9      	ldr	r1, [r3, #12]
 8004fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	ea40 0301 	orr.w	r3, r0, r1
 8004fe0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005010:	f021 010c 	bic.w	r1, r1, #12
 8005014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800501e:	430b      	orrs	r3, r1
 8005020:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800502e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005032:	6999      	ldr	r1, [r3, #24]
 8005034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	ea40 0301 	orr.w	r3, r0, r1
 800503e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	4b8f      	ldr	r3, [pc, #572]	; (8005284 <UART_SetConfig+0x2cc>)
 8005048:	429a      	cmp	r2, r3
 800504a:	d005      	beq.n	8005058 <UART_SetConfig+0xa0>
 800504c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	4b8d      	ldr	r3, [pc, #564]	; (8005288 <UART_SetConfig+0x2d0>)
 8005054:	429a      	cmp	r2, r3
 8005056:	d104      	bne.n	8005062 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005058:	f7fe faca 	bl	80035f0 <HAL_RCC_GetPCLK2Freq>
 800505c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005060:	e003      	b.n	800506a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005062:	f7fe fab1 	bl	80035c8 <HAL_RCC_GetPCLK1Freq>
 8005066:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800506a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506e:	69db      	ldr	r3, [r3, #28]
 8005070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005074:	f040 810c 	bne.w	8005290 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005078:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800507c:	2200      	movs	r2, #0
 800507e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005082:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005086:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800508a:	4622      	mov	r2, r4
 800508c:	462b      	mov	r3, r5
 800508e:	1891      	adds	r1, r2, r2
 8005090:	65b9      	str	r1, [r7, #88]	; 0x58
 8005092:	415b      	adcs	r3, r3
 8005094:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005096:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800509a:	4621      	mov	r1, r4
 800509c:	eb12 0801 	adds.w	r8, r2, r1
 80050a0:	4629      	mov	r1, r5
 80050a2:	eb43 0901 	adc.w	r9, r3, r1
 80050a6:	f04f 0200 	mov.w	r2, #0
 80050aa:	f04f 0300 	mov.w	r3, #0
 80050ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050ba:	4690      	mov	r8, r2
 80050bc:	4699      	mov	r9, r3
 80050be:	4623      	mov	r3, r4
 80050c0:	eb18 0303 	adds.w	r3, r8, r3
 80050c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80050c8:	462b      	mov	r3, r5
 80050ca:	eb49 0303 	adc.w	r3, r9, r3
 80050ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80050d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80050de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80050e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80050e6:	460b      	mov	r3, r1
 80050e8:	18db      	adds	r3, r3, r3
 80050ea:	653b      	str	r3, [r7, #80]	; 0x50
 80050ec:	4613      	mov	r3, r2
 80050ee:	eb42 0303 	adc.w	r3, r2, r3
 80050f2:	657b      	str	r3, [r7, #84]	; 0x54
 80050f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80050f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80050fc:	f7fb f8c8 	bl	8000290 <__aeabi_uldivmod>
 8005100:	4602      	mov	r2, r0
 8005102:	460b      	mov	r3, r1
 8005104:	4b61      	ldr	r3, [pc, #388]	; (800528c <UART_SetConfig+0x2d4>)
 8005106:	fba3 2302 	umull	r2, r3, r3, r2
 800510a:	095b      	lsrs	r3, r3, #5
 800510c:	011c      	lsls	r4, r3, #4
 800510e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005112:	2200      	movs	r2, #0
 8005114:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005118:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800511c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005120:	4642      	mov	r2, r8
 8005122:	464b      	mov	r3, r9
 8005124:	1891      	adds	r1, r2, r2
 8005126:	64b9      	str	r1, [r7, #72]	; 0x48
 8005128:	415b      	adcs	r3, r3
 800512a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800512c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005130:	4641      	mov	r1, r8
 8005132:	eb12 0a01 	adds.w	sl, r2, r1
 8005136:	4649      	mov	r1, r9
 8005138:	eb43 0b01 	adc.w	fp, r3, r1
 800513c:	f04f 0200 	mov.w	r2, #0
 8005140:	f04f 0300 	mov.w	r3, #0
 8005144:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005148:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800514c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005150:	4692      	mov	sl, r2
 8005152:	469b      	mov	fp, r3
 8005154:	4643      	mov	r3, r8
 8005156:	eb1a 0303 	adds.w	r3, sl, r3
 800515a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800515e:	464b      	mov	r3, r9
 8005160:	eb4b 0303 	adc.w	r3, fp, r3
 8005164:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005174:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005178:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800517c:	460b      	mov	r3, r1
 800517e:	18db      	adds	r3, r3, r3
 8005180:	643b      	str	r3, [r7, #64]	; 0x40
 8005182:	4613      	mov	r3, r2
 8005184:	eb42 0303 	adc.w	r3, r2, r3
 8005188:	647b      	str	r3, [r7, #68]	; 0x44
 800518a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800518e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005192:	f7fb f87d 	bl	8000290 <__aeabi_uldivmod>
 8005196:	4602      	mov	r2, r0
 8005198:	460b      	mov	r3, r1
 800519a:	4611      	mov	r1, r2
 800519c:	4b3b      	ldr	r3, [pc, #236]	; (800528c <UART_SetConfig+0x2d4>)
 800519e:	fba3 2301 	umull	r2, r3, r3, r1
 80051a2:	095b      	lsrs	r3, r3, #5
 80051a4:	2264      	movs	r2, #100	; 0x64
 80051a6:	fb02 f303 	mul.w	r3, r2, r3
 80051aa:	1acb      	subs	r3, r1, r3
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80051b2:	4b36      	ldr	r3, [pc, #216]	; (800528c <UART_SetConfig+0x2d4>)
 80051b4:	fba3 2302 	umull	r2, r3, r3, r2
 80051b8:	095b      	lsrs	r3, r3, #5
 80051ba:	005b      	lsls	r3, r3, #1
 80051bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051c0:	441c      	add	r4, r3
 80051c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051c6:	2200      	movs	r2, #0
 80051c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80051d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80051d4:	4642      	mov	r2, r8
 80051d6:	464b      	mov	r3, r9
 80051d8:	1891      	adds	r1, r2, r2
 80051da:	63b9      	str	r1, [r7, #56]	; 0x38
 80051dc:	415b      	adcs	r3, r3
 80051de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80051e4:	4641      	mov	r1, r8
 80051e6:	1851      	adds	r1, r2, r1
 80051e8:	6339      	str	r1, [r7, #48]	; 0x30
 80051ea:	4649      	mov	r1, r9
 80051ec:	414b      	adcs	r3, r1
 80051ee:	637b      	str	r3, [r7, #52]	; 0x34
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	f04f 0300 	mov.w	r3, #0
 80051f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80051fc:	4659      	mov	r1, fp
 80051fe:	00cb      	lsls	r3, r1, #3
 8005200:	4651      	mov	r1, sl
 8005202:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005206:	4651      	mov	r1, sl
 8005208:	00ca      	lsls	r2, r1, #3
 800520a:	4610      	mov	r0, r2
 800520c:	4619      	mov	r1, r3
 800520e:	4603      	mov	r3, r0
 8005210:	4642      	mov	r2, r8
 8005212:	189b      	adds	r3, r3, r2
 8005214:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005218:	464b      	mov	r3, r9
 800521a:	460a      	mov	r2, r1
 800521c:	eb42 0303 	adc.w	r3, r2, r3
 8005220:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005230:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005234:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005238:	460b      	mov	r3, r1
 800523a:	18db      	adds	r3, r3, r3
 800523c:	62bb      	str	r3, [r7, #40]	; 0x28
 800523e:	4613      	mov	r3, r2
 8005240:	eb42 0303 	adc.w	r3, r2, r3
 8005244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005246:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800524a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800524e:	f7fb f81f 	bl	8000290 <__aeabi_uldivmod>
 8005252:	4602      	mov	r2, r0
 8005254:	460b      	mov	r3, r1
 8005256:	4b0d      	ldr	r3, [pc, #52]	; (800528c <UART_SetConfig+0x2d4>)
 8005258:	fba3 1302 	umull	r1, r3, r3, r2
 800525c:	095b      	lsrs	r3, r3, #5
 800525e:	2164      	movs	r1, #100	; 0x64
 8005260:	fb01 f303 	mul.w	r3, r1, r3
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	3332      	adds	r3, #50	; 0x32
 800526a:	4a08      	ldr	r2, [pc, #32]	; (800528c <UART_SetConfig+0x2d4>)
 800526c:	fba2 2303 	umull	r2, r3, r2, r3
 8005270:	095b      	lsrs	r3, r3, #5
 8005272:	f003 0207 	and.w	r2, r3, #7
 8005276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4422      	add	r2, r4
 800527e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005280:	e105      	b.n	800548e <UART_SetConfig+0x4d6>
 8005282:	bf00      	nop
 8005284:	40011000 	.word	0x40011000
 8005288:	40011400 	.word	0x40011400
 800528c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005294:	2200      	movs	r2, #0
 8005296:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800529a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800529e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80052a2:	4642      	mov	r2, r8
 80052a4:	464b      	mov	r3, r9
 80052a6:	1891      	adds	r1, r2, r2
 80052a8:	6239      	str	r1, [r7, #32]
 80052aa:	415b      	adcs	r3, r3
 80052ac:	627b      	str	r3, [r7, #36]	; 0x24
 80052ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052b2:	4641      	mov	r1, r8
 80052b4:	1854      	adds	r4, r2, r1
 80052b6:	4649      	mov	r1, r9
 80052b8:	eb43 0501 	adc.w	r5, r3, r1
 80052bc:	f04f 0200 	mov.w	r2, #0
 80052c0:	f04f 0300 	mov.w	r3, #0
 80052c4:	00eb      	lsls	r3, r5, #3
 80052c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052ca:	00e2      	lsls	r2, r4, #3
 80052cc:	4614      	mov	r4, r2
 80052ce:	461d      	mov	r5, r3
 80052d0:	4643      	mov	r3, r8
 80052d2:	18e3      	adds	r3, r4, r3
 80052d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80052d8:	464b      	mov	r3, r9
 80052da:	eb45 0303 	adc.w	r3, r5, r3
 80052de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80052e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80052f2:	f04f 0200 	mov.w	r2, #0
 80052f6:	f04f 0300 	mov.w	r3, #0
 80052fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80052fe:	4629      	mov	r1, r5
 8005300:	008b      	lsls	r3, r1, #2
 8005302:	4621      	mov	r1, r4
 8005304:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005308:	4621      	mov	r1, r4
 800530a:	008a      	lsls	r2, r1, #2
 800530c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005310:	f7fa ffbe 	bl	8000290 <__aeabi_uldivmod>
 8005314:	4602      	mov	r2, r0
 8005316:	460b      	mov	r3, r1
 8005318:	4b60      	ldr	r3, [pc, #384]	; (800549c <UART_SetConfig+0x4e4>)
 800531a:	fba3 2302 	umull	r2, r3, r3, r2
 800531e:	095b      	lsrs	r3, r3, #5
 8005320:	011c      	lsls	r4, r3, #4
 8005322:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005326:	2200      	movs	r2, #0
 8005328:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800532c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005330:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005334:	4642      	mov	r2, r8
 8005336:	464b      	mov	r3, r9
 8005338:	1891      	adds	r1, r2, r2
 800533a:	61b9      	str	r1, [r7, #24]
 800533c:	415b      	adcs	r3, r3
 800533e:	61fb      	str	r3, [r7, #28]
 8005340:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005344:	4641      	mov	r1, r8
 8005346:	1851      	adds	r1, r2, r1
 8005348:	6139      	str	r1, [r7, #16]
 800534a:	4649      	mov	r1, r9
 800534c:	414b      	adcs	r3, r1
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	f04f 0200 	mov.w	r2, #0
 8005354:	f04f 0300 	mov.w	r3, #0
 8005358:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800535c:	4659      	mov	r1, fp
 800535e:	00cb      	lsls	r3, r1, #3
 8005360:	4651      	mov	r1, sl
 8005362:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005366:	4651      	mov	r1, sl
 8005368:	00ca      	lsls	r2, r1, #3
 800536a:	4610      	mov	r0, r2
 800536c:	4619      	mov	r1, r3
 800536e:	4603      	mov	r3, r0
 8005370:	4642      	mov	r2, r8
 8005372:	189b      	adds	r3, r3, r2
 8005374:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005378:	464b      	mov	r3, r9
 800537a:	460a      	mov	r2, r1
 800537c:	eb42 0303 	adc.w	r3, r2, r3
 8005380:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	67bb      	str	r3, [r7, #120]	; 0x78
 800538e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005390:	f04f 0200 	mov.w	r2, #0
 8005394:	f04f 0300 	mov.w	r3, #0
 8005398:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800539c:	4649      	mov	r1, r9
 800539e:	008b      	lsls	r3, r1, #2
 80053a0:	4641      	mov	r1, r8
 80053a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053a6:	4641      	mov	r1, r8
 80053a8:	008a      	lsls	r2, r1, #2
 80053aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80053ae:	f7fa ff6f 	bl	8000290 <__aeabi_uldivmod>
 80053b2:	4602      	mov	r2, r0
 80053b4:	460b      	mov	r3, r1
 80053b6:	4b39      	ldr	r3, [pc, #228]	; (800549c <UART_SetConfig+0x4e4>)
 80053b8:	fba3 1302 	umull	r1, r3, r3, r2
 80053bc:	095b      	lsrs	r3, r3, #5
 80053be:	2164      	movs	r1, #100	; 0x64
 80053c0:	fb01 f303 	mul.w	r3, r1, r3
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	3332      	adds	r3, #50	; 0x32
 80053ca:	4a34      	ldr	r2, [pc, #208]	; (800549c <UART_SetConfig+0x4e4>)
 80053cc:	fba2 2303 	umull	r2, r3, r2, r3
 80053d0:	095b      	lsrs	r3, r3, #5
 80053d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053d6:	441c      	add	r4, r3
 80053d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053dc:	2200      	movs	r2, #0
 80053de:	673b      	str	r3, [r7, #112]	; 0x70
 80053e0:	677a      	str	r2, [r7, #116]	; 0x74
 80053e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80053e6:	4642      	mov	r2, r8
 80053e8:	464b      	mov	r3, r9
 80053ea:	1891      	adds	r1, r2, r2
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	415b      	adcs	r3, r3
 80053f0:	60fb      	str	r3, [r7, #12]
 80053f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053f6:	4641      	mov	r1, r8
 80053f8:	1851      	adds	r1, r2, r1
 80053fa:	6039      	str	r1, [r7, #0]
 80053fc:	4649      	mov	r1, r9
 80053fe:	414b      	adcs	r3, r1
 8005400:	607b      	str	r3, [r7, #4]
 8005402:	f04f 0200 	mov.w	r2, #0
 8005406:	f04f 0300 	mov.w	r3, #0
 800540a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800540e:	4659      	mov	r1, fp
 8005410:	00cb      	lsls	r3, r1, #3
 8005412:	4651      	mov	r1, sl
 8005414:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005418:	4651      	mov	r1, sl
 800541a:	00ca      	lsls	r2, r1, #3
 800541c:	4610      	mov	r0, r2
 800541e:	4619      	mov	r1, r3
 8005420:	4603      	mov	r3, r0
 8005422:	4642      	mov	r2, r8
 8005424:	189b      	adds	r3, r3, r2
 8005426:	66bb      	str	r3, [r7, #104]	; 0x68
 8005428:	464b      	mov	r3, r9
 800542a:	460a      	mov	r2, r1
 800542c:	eb42 0303 	adc.w	r3, r2, r3
 8005430:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	663b      	str	r3, [r7, #96]	; 0x60
 800543c:	667a      	str	r2, [r7, #100]	; 0x64
 800543e:	f04f 0200 	mov.w	r2, #0
 8005442:	f04f 0300 	mov.w	r3, #0
 8005446:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800544a:	4649      	mov	r1, r9
 800544c:	008b      	lsls	r3, r1, #2
 800544e:	4641      	mov	r1, r8
 8005450:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005454:	4641      	mov	r1, r8
 8005456:	008a      	lsls	r2, r1, #2
 8005458:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800545c:	f7fa ff18 	bl	8000290 <__aeabi_uldivmod>
 8005460:	4602      	mov	r2, r0
 8005462:	460b      	mov	r3, r1
 8005464:	4b0d      	ldr	r3, [pc, #52]	; (800549c <UART_SetConfig+0x4e4>)
 8005466:	fba3 1302 	umull	r1, r3, r3, r2
 800546a:	095b      	lsrs	r3, r3, #5
 800546c:	2164      	movs	r1, #100	; 0x64
 800546e:	fb01 f303 	mul.w	r3, r1, r3
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	3332      	adds	r3, #50	; 0x32
 8005478:	4a08      	ldr	r2, [pc, #32]	; (800549c <UART_SetConfig+0x4e4>)
 800547a:	fba2 2303 	umull	r2, r3, r2, r3
 800547e:	095b      	lsrs	r3, r3, #5
 8005480:	f003 020f 	and.w	r2, r3, #15
 8005484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4422      	add	r2, r4
 800548c:	609a      	str	r2, [r3, #8]
}
 800548e:	bf00      	nop
 8005490:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005494:	46bd      	mov	sp, r7
 8005496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800549a:	bf00      	nop
 800549c:	51eb851f 	.word	0x51eb851f

080054a0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d123      	bne.n	80054fa <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80054ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	6851      	ldr	r1, [r2, #4]
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	6892      	ldr	r2, [r2, #8]
 80054c6:	4311      	orrs	r1, r2
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	68d2      	ldr	r2, [r2, #12]
 80054cc:	4311      	orrs	r1, r2
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	6912      	ldr	r2, [r2, #16]
 80054d2:	4311      	orrs	r1, r2
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	6952      	ldr	r2, [r2, #20]
 80054d8:	4311      	orrs	r1, r2
 80054da:	683a      	ldr	r2, [r7, #0]
 80054dc:	6992      	ldr	r2, [r2, #24]
 80054de:	4311      	orrs	r1, r2
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	69d2      	ldr	r2, [r2, #28]
 80054e4:	4311      	orrs	r1, r2
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	6a12      	ldr	r2, [r2, #32]
 80054ea:	4311      	orrs	r1, r2
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054f0:	430a      	orrs	r2, r1
 80054f2:	431a      	orrs	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	e028      	b.n	800554c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	69d9      	ldr	r1, [r3, #28]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	4319      	orrs	r1, r3
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	430b      	orrs	r3, r1
 8005512:	431a      	orrs	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005520:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	6851      	ldr	r1, [r2, #4]
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	6892      	ldr	r2, [r2, #8]
 800552c:	4311      	orrs	r1, r2
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	68d2      	ldr	r2, [r2, #12]
 8005532:	4311      	orrs	r1, r2
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	6912      	ldr	r2, [r2, #16]
 8005538:	4311      	orrs	r1, r2
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	6952      	ldr	r2, [r2, #20]
 800553e:	4311      	orrs	r1, r2
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	6992      	ldr	r2, [r2, #24]
 8005544:	430a      	orrs	r2, r1
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800555a:	b480      	push	{r7}
 800555c:	b085      	sub	sp, #20
 800555e:	af00      	add	r7, sp, #0
 8005560:	60f8      	str	r0, [r7, #12]
 8005562:	60b9      	str	r1, [r7, #8]
 8005564:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d128      	bne.n	80055be <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	1e59      	subs	r1, r3, #1
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	3b01      	subs	r3, #1
 8005580:	011b      	lsls	r3, r3, #4
 8005582:	4319      	orrs	r1, r3
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	3b01      	subs	r3, #1
 800558a:	021b      	lsls	r3, r3, #8
 800558c:	4319      	orrs	r1, r3
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	3b01      	subs	r3, #1
 8005594:	031b      	lsls	r3, r3, #12
 8005596:	4319      	orrs	r1, r3
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	3b01      	subs	r3, #1
 800559e:	041b      	lsls	r3, r3, #16
 80055a0:	4319      	orrs	r1, r3
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	051b      	lsls	r3, r3, #20
 80055aa:	4319      	orrs	r1, r3
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	3b01      	subs	r3, #1
 80055b2:	061b      	lsls	r3, r3, #24
 80055b4:	430b      	orrs	r3, r1
 80055b6:	431a      	orrs	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	609a      	str	r2, [r3, #8]
 80055bc:	e02f      	b.n	800561e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80055c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	68d2      	ldr	r2, [r2, #12]
 80055ce:	3a01      	subs	r2, #1
 80055d0:	0311      	lsls	r1, r2, #12
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	6952      	ldr	r2, [r2, #20]
 80055d6:	3a01      	subs	r2, #1
 80055d8:	0512      	lsls	r2, r2, #20
 80055da:	430a      	orrs	r2, r1
 80055dc:	431a      	orrs	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	1e59      	subs	r1, r3, #1
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	3b01      	subs	r3, #1
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	4319      	orrs	r1, r3
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	3b01      	subs	r3, #1
 8005600:	021b      	lsls	r3, r3, #8
 8005602:	4319      	orrs	r1, r3
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	3b01      	subs	r3, #1
 800560a:	041b      	lsls	r3, r3, #16
 800560c:	4319      	orrs	r1, r3
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	3b01      	subs	r3, #1
 8005614:	061b      	lsls	r3, r3, #24
 8005616:	430b      	orrs	r3, r1
 8005618:	431a      	orrs	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	4603      	mov	r3, r0
 8005634:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005636:	2300      	movs	r3, #0
 8005638:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800563a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800563e:	2b84      	cmp	r3, #132	; 0x84
 8005640:	d005      	beq.n	800564e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005642:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4413      	add	r3, r2
 800564a:	3303      	adds	r3, #3
 800564c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800564e:	68fb      	ldr	r3, [r7, #12]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3714      	adds	r7, #20
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005660:	f000 fb02 	bl	8005c68 <vTaskStartScheduler>
  
  return osOK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	bd80      	pop	{r7, pc}

0800566a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800566a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800566c:	b089      	sub	sp, #36	; 0x24
 800566e:	af04      	add	r7, sp, #16
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d020      	beq.n	80056be <osThreadCreate+0x54>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d01c      	beq.n	80056be <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685c      	ldr	r4, [r3, #4]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681d      	ldr	r5, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	691e      	ldr	r6, [r3, #16]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005696:	4618      	mov	r0, r3
 8005698:	f7ff ffc8 	bl	800562c <makeFreeRtosPriority>
 800569c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056a6:	9202      	str	r2, [sp, #8]
 80056a8:	9301      	str	r3, [sp, #4]
 80056aa:	9100      	str	r1, [sp, #0]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	4632      	mov	r2, r6
 80056b0:	4629      	mov	r1, r5
 80056b2:	4620      	mov	r0, r4
 80056b4:	f000 f8ed 	bl	8005892 <xTaskCreateStatic>
 80056b8:	4603      	mov	r3, r0
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	e01c      	b.n	80056f8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685c      	ldr	r4, [r3, #4]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056ca:	b29e      	uxth	r6, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff ffaa 	bl	800562c <makeFreeRtosPriority>
 80056d8:	4602      	mov	r2, r0
 80056da:	f107 030c 	add.w	r3, r7, #12
 80056de:	9301      	str	r3, [sp, #4]
 80056e0:	9200      	str	r2, [sp, #0]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	4632      	mov	r2, r6
 80056e6:	4629      	mov	r1, r5
 80056e8:	4620      	mov	r0, r4
 80056ea:	f000 f92f 	bl	800594c <xTaskCreate>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d001      	beq.n	80056f8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80056f4:	2300      	movs	r3, #0
 80056f6:	e000      	b.n	80056fa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80056f8:	68fb      	ldr	r3, [r7, #12]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005702 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b084      	sub	sp, #16
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d001      	beq.n	8005718 <osDelay+0x16>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	e000      	b.n	800571a <osDelay+0x18>
 8005718:	2301      	movs	r3, #1
 800571a:	4618      	mov	r0, r3
 800571c:	f000 fa70 	bl	8005c00 <vTaskDelay>
  
  return osOK;
 8005720:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800572a:	b480      	push	{r7}
 800572c:	b083      	sub	sp, #12
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f103 0208 	add.w	r2, r3, #8
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f04f 32ff 	mov.w	r2, #4294967295
 8005742:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f103 0208 	add.w	r2, r3, #8
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f103 0208 	add.w	r2, r3, #8
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800576a:	b480      	push	{r7}
 800576c:	b083      	sub	sp, #12
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	689a      	ldr	r2, [r3, #8]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	601a      	str	r2, [r3, #0]
}
 80057c0:	bf00      	nop
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e2:	d103      	bne.n	80057ec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	e00c      	b.n	8005806 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	3308      	adds	r3, #8
 80057f0:	60fb      	str	r3, [r7, #12]
 80057f2:	e002      	b.n	80057fa <vListInsert+0x2e>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	60fb      	str	r3, [r7, #12]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	429a      	cmp	r2, r3
 8005804:	d2f6      	bcs.n	80057f4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	601a      	str	r2, [r3, #0]
}
 8005832:	bf00      	nop
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800583e:	b480      	push	{r7}
 8005840:	b085      	sub	sp, #20
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6892      	ldr	r2, [r2, #8]
 8005854:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	6852      	ldr	r2, [r2, #4]
 800585e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	429a      	cmp	r2, r3
 8005868:	d103      	bne.n	8005872 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	689a      	ldr	r2, [r3, #8]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	1e5a      	subs	r2, r3, #1
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005892:	b580      	push	{r7, lr}
 8005894:	b08e      	sub	sp, #56	; 0x38
 8005896:	af04      	add	r7, sp, #16
 8005898:	60f8      	str	r0, [r7, #12]
 800589a:	60b9      	str	r1, [r7, #8]
 800589c:	607a      	str	r2, [r7, #4]
 800589e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80058a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10a      	bne.n	80058bc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80058a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058aa:	f383 8811 	msr	BASEPRI, r3
 80058ae:	f3bf 8f6f 	isb	sy
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80058b8:	bf00      	nop
 80058ba:	e7fe      	b.n	80058ba <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80058bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10a      	bne.n	80058d8 <xTaskCreateStatic+0x46>
	__asm volatile
 80058c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	61fb      	str	r3, [r7, #28]
}
 80058d4:	bf00      	nop
 80058d6:	e7fe      	b.n	80058d6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80058d8:	23b8      	movs	r3, #184	; 0xb8
 80058da:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	2bb8      	cmp	r3, #184	; 0xb8
 80058e0:	d00a      	beq.n	80058f8 <xTaskCreateStatic+0x66>
	__asm volatile
 80058e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	61bb      	str	r3, [r7, #24]
}
 80058f4:	bf00      	nop
 80058f6:	e7fe      	b.n	80058f6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80058f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d01e      	beq.n	800593e <xTaskCreateStatic+0xac>
 8005900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005902:	2b00      	cmp	r3, #0
 8005904:	d01b      	beq.n	800593e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005908:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800590e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	2202      	movs	r2, #2
 8005914:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005918:	2300      	movs	r3, #0
 800591a:	9303      	str	r3, [sp, #12]
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	9302      	str	r3, [sp, #8]
 8005920:	f107 0314 	add.w	r3, r7, #20
 8005924:	9301      	str	r3, [sp, #4]
 8005926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	68b9      	ldr	r1, [r7, #8]
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 f851 	bl	80059d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005936:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005938:	f000 f8f8 	bl	8005b2c <prvAddNewTaskToReadyList>
 800593c:	e001      	b.n	8005942 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800593e:	2300      	movs	r3, #0
 8005940:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005942:	697b      	ldr	r3, [r7, #20]
	}
 8005944:	4618      	mov	r0, r3
 8005946:	3728      	adds	r7, #40	; 0x28
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800594c:	b580      	push	{r7, lr}
 800594e:	b08c      	sub	sp, #48	; 0x30
 8005950:	af04      	add	r7, sp, #16
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	603b      	str	r3, [r7, #0]
 8005958:	4613      	mov	r3, r2
 800595a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800595c:	88fb      	ldrh	r3, [r7, #6]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4618      	mov	r0, r3
 8005962:	f000 ff29 	bl	80067b8 <pvPortMalloc>
 8005966:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00e      	beq.n	800598c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800596e:	20b8      	movs	r0, #184	; 0xb8
 8005970:	f000 ff22 	bl	80067b8 <pvPortMalloc>
 8005974:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	631a      	str	r2, [r3, #48]	; 0x30
 8005982:	e005      	b.n	8005990 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005984:	6978      	ldr	r0, [r7, #20]
 8005986:	f000 ffe7 	bl	8006958 <vPortFree>
 800598a:	e001      	b.n	8005990 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800598c:	2300      	movs	r3, #0
 800598e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d017      	beq.n	80059c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800599e:	88fa      	ldrh	r2, [r7, #6]
 80059a0:	2300      	movs	r3, #0
 80059a2:	9303      	str	r3, [sp, #12]
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	9302      	str	r3, [sp, #8]
 80059a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059aa:	9301      	str	r3, [sp, #4]
 80059ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	68b9      	ldr	r1, [r7, #8]
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 f80f 	bl	80059d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059ba:	69f8      	ldr	r0, [r7, #28]
 80059bc:	f000 f8b6 	bl	8005b2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80059c0:	2301      	movs	r3, #1
 80059c2:	61bb      	str	r3, [r7, #24]
 80059c4:	e002      	b.n	80059cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80059c6:	f04f 33ff 	mov.w	r3, #4294967295
 80059ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80059cc:	69bb      	ldr	r3, [r7, #24]
	}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3720      	adds	r7, #32
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
	...

080059d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b088      	sub	sp, #32
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
 80059e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80059e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	461a      	mov	r2, r3
 80059f0:	21a5      	movs	r1, #165	; 0xa5
 80059f2:	f001 f9f2 	bl	8006dda <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80059f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a00:	3b01      	subs	r3, #1
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	f023 0307 	bic.w	r3, r3, #7
 8005a0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00a      	beq.n	8005a30 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1e:	f383 8811 	msr	BASEPRI, r3
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	617b      	str	r3, [r7, #20]
}
 8005a2c:	bf00      	nop
 8005a2e:	e7fe      	b.n	8005a2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d01f      	beq.n	8005a76 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a36:	2300      	movs	r3, #0
 8005a38:	61fb      	str	r3, [r7, #28]
 8005a3a:	e012      	b.n	8005a62 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	4413      	add	r3, r2
 8005a42:	7819      	ldrb	r1, [r3, #0]
 8005a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	4413      	add	r3, r2
 8005a4a:	3334      	adds	r3, #52	; 0x34
 8005a4c:	460a      	mov	r2, r1
 8005a4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	4413      	add	r3, r2
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d006      	beq.n	8005a6a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	61fb      	str	r3, [r7, #28]
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	2b0f      	cmp	r3, #15
 8005a66:	d9e9      	bls.n	8005a3c <prvInitialiseNewTask+0x64>
 8005a68:	e000      	b.n	8005a6c <prvInitialiseNewTask+0x94>
			{
				break;
 8005a6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a74:	e003      	b.n	8005a7e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a80:	2b06      	cmp	r3, #6
 8005a82:	d901      	bls.n	8005a88 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a84:	2306      	movs	r3, #6
 8005a86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a92:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a96:	2200      	movs	r2, #0
 8005a98:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7ff fe63 	bl	800576a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa6:	3318      	adds	r3, #24
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7ff fe5e 	bl	800576a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ab2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab6:	f1c3 0207 	rsb	r2, r3, #7
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ac2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8005ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005acc:	2200      	movs	r2, #0
 8005ace:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005adc:	3350      	adds	r3, #80	; 0x50
 8005ade:	2260      	movs	r2, #96	; 0x60
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f001 f979 	bl	8006dda <memset>
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aea:	4a0d      	ldr	r2, [pc, #52]	; (8005b20 <prvInitialiseNewTask+0x148>)
 8005aec:	655a      	str	r2, [r3, #84]	; 0x54
 8005aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af0:	4a0c      	ldr	r2, [pc, #48]	; (8005b24 <prvInitialiseNewTask+0x14c>)
 8005af2:	659a      	str	r2, [r3, #88]	; 0x58
 8005af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af6:	4a0c      	ldr	r2, [pc, #48]	; (8005b28 <prvInitialiseNewTask+0x150>)
 8005af8:	65da      	str	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	68f9      	ldr	r1, [r7, #12]
 8005afe:	69b8      	ldr	r0, [r7, #24]
 8005b00:	f000 fc48 	bl	8006394 <pxPortInitialiseStack>
 8005b04:	4602      	mov	r2, r0
 8005b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b16:	bf00      	nop
 8005b18:	3720      	adds	r7, #32
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	08007c74 	.word	0x08007c74
 8005b24:	08007c94 	.word	0x08007c94
 8005b28:	08007c54 	.word	0x08007c54

08005b2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b34:	f000 fd5e 	bl	80065f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b38:	4b2a      	ldr	r3, [pc, #168]	; (8005be4 <prvAddNewTaskToReadyList+0xb8>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	4a29      	ldr	r2, [pc, #164]	; (8005be4 <prvAddNewTaskToReadyList+0xb8>)
 8005b40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b42:	4b29      	ldr	r3, [pc, #164]	; (8005be8 <prvAddNewTaskToReadyList+0xbc>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d109      	bne.n	8005b5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b4a:	4a27      	ldr	r2, [pc, #156]	; (8005be8 <prvAddNewTaskToReadyList+0xbc>)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b50:	4b24      	ldr	r3, [pc, #144]	; (8005be4 <prvAddNewTaskToReadyList+0xb8>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d110      	bne.n	8005b7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b58:	f000 faf4 	bl	8006144 <prvInitialiseTaskLists>
 8005b5c:	e00d      	b.n	8005b7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b5e:	4b23      	ldr	r3, [pc, #140]	; (8005bec <prvAddNewTaskToReadyList+0xc0>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d109      	bne.n	8005b7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b66:	4b20      	ldr	r3, [pc, #128]	; (8005be8 <prvAddNewTaskToReadyList+0xbc>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d802      	bhi.n	8005b7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b74:	4a1c      	ldr	r2, [pc, #112]	; (8005be8 <prvAddNewTaskToReadyList+0xbc>)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b7a:	4b1d      	ldr	r3, [pc, #116]	; (8005bf0 <prvAddNewTaskToReadyList+0xc4>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	4a1b      	ldr	r2, [pc, #108]	; (8005bf0 <prvAddNewTaskToReadyList+0xc4>)
 8005b82:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	2201      	movs	r2, #1
 8005b8a:	409a      	lsls	r2, r3
 8005b8c:	4b19      	ldr	r3, [pc, #100]	; (8005bf4 <prvAddNewTaskToReadyList+0xc8>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	4a18      	ldr	r2, [pc, #96]	; (8005bf4 <prvAddNewTaskToReadyList+0xc8>)
 8005b94:	6013      	str	r3, [r2, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4a15      	ldr	r2, [pc, #84]	; (8005bf8 <prvAddNewTaskToReadyList+0xcc>)
 8005ba4:	441a      	add	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	3304      	adds	r3, #4
 8005baa:	4619      	mov	r1, r3
 8005bac:	4610      	mov	r0, r2
 8005bae:	f7ff fde9 	bl	8005784 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005bb2:	f000 fd4f 	bl	8006654 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005bb6:	4b0d      	ldr	r3, [pc, #52]	; (8005bec <prvAddNewTaskToReadyList+0xc0>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00e      	beq.n	8005bdc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005bbe:	4b0a      	ldr	r3, [pc, #40]	; (8005be8 <prvAddNewTaskToReadyList+0xbc>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d207      	bcs.n	8005bdc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005bcc:	4b0b      	ldr	r3, [pc, #44]	; (8005bfc <prvAddNewTaskToReadyList+0xd0>)
 8005bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bd2:	601a      	str	r2, [r3, #0]
 8005bd4:	f3bf 8f4f 	dsb	sy
 8005bd8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bdc:	bf00      	nop
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	200006fc 	.word	0x200006fc
 8005be8:	200005fc 	.word	0x200005fc
 8005bec:	20000708 	.word	0x20000708
 8005bf0:	20000718 	.word	0x20000718
 8005bf4:	20000704 	.word	0x20000704
 8005bf8:	20000600 	.word	0x20000600
 8005bfc:	e000ed04 	.word	0xe000ed04

08005c00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d017      	beq.n	8005c42 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005c12:	4b13      	ldr	r3, [pc, #76]	; (8005c60 <vTaskDelay+0x60>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00a      	beq.n	8005c30 <vTaskDelay+0x30>
	__asm volatile
 8005c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1e:	f383 8811 	msr	BASEPRI, r3
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	60bb      	str	r3, [r7, #8]
}
 8005c2c:	bf00      	nop
 8005c2e:	e7fe      	b.n	8005c2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005c30:	f000 f884 	bl	8005d3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c34:	2100      	movs	r1, #0
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 fb46 	bl	80062c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c3c:	f000 f88c 	bl	8005d58 <xTaskResumeAll>
 8005c40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d107      	bne.n	8005c58 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005c48:	4b06      	ldr	r3, [pc, #24]	; (8005c64 <vTaskDelay+0x64>)
 8005c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c4e:	601a      	str	r2, [r3, #0]
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c58:	bf00      	nop
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	20000724 	.word	0x20000724
 8005c64:	e000ed04 	.word	0xe000ed04

08005c68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08a      	sub	sp, #40	; 0x28
 8005c6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c72:	2300      	movs	r3, #0
 8005c74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c76:	463a      	mov	r2, r7
 8005c78:	1d39      	adds	r1, r7, #4
 8005c7a:	f107 0308 	add.w	r3, r7, #8
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fa fca2 	bl	80005c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c84:	6839      	ldr	r1, [r7, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	9202      	str	r2, [sp, #8]
 8005c8c:	9301      	str	r3, [sp, #4]
 8005c8e:	2300      	movs	r3, #0
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	2300      	movs	r3, #0
 8005c94:	460a      	mov	r2, r1
 8005c96:	4921      	ldr	r1, [pc, #132]	; (8005d1c <vTaskStartScheduler+0xb4>)
 8005c98:	4821      	ldr	r0, [pc, #132]	; (8005d20 <vTaskStartScheduler+0xb8>)
 8005c9a:	f7ff fdfa 	bl	8005892 <xTaskCreateStatic>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	4a20      	ldr	r2, [pc, #128]	; (8005d24 <vTaskStartScheduler+0xbc>)
 8005ca2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ca4:	4b1f      	ldr	r3, [pc, #124]	; (8005d24 <vTaskStartScheduler+0xbc>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d002      	beq.n	8005cb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005cac:	2301      	movs	r3, #1
 8005cae:	617b      	str	r3, [r7, #20]
 8005cb0:	e001      	b.n	8005cb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d11b      	bne.n	8005cf4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	613b      	str	r3, [r7, #16]
}
 8005cce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005cd0:	4b15      	ldr	r3, [pc, #84]	; (8005d28 <vTaskStartScheduler+0xc0>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3350      	adds	r3, #80	; 0x50
 8005cd6:	4a15      	ldr	r2, [pc, #84]	; (8005d2c <vTaskStartScheduler+0xc4>)
 8005cd8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005cda:	4b15      	ldr	r3, [pc, #84]	; (8005d30 <vTaskStartScheduler+0xc8>)
 8005cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ce2:	4b14      	ldr	r3, [pc, #80]	; (8005d34 <vTaskStartScheduler+0xcc>)
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ce8:	4b13      	ldr	r3, [pc, #76]	; (8005d38 <vTaskStartScheduler+0xd0>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005cee:	f000 fbdf 	bl	80064b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005cf2:	e00e      	b.n	8005d12 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfa:	d10a      	bne.n	8005d12 <vTaskStartScheduler+0xaa>
	__asm volatile
 8005cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d00:	f383 8811 	msr	BASEPRI, r3
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	60fb      	str	r3, [r7, #12]
}
 8005d0e:	bf00      	nop
 8005d10:	e7fe      	b.n	8005d10 <vTaskStartScheduler+0xa8>
}
 8005d12:	bf00      	nop
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	08007c34 	.word	0x08007c34
 8005d20:	08006111 	.word	0x08006111
 8005d24:	20000720 	.word	0x20000720
 8005d28:	200005fc 	.word	0x200005fc
 8005d2c:	20000010 	.word	0x20000010
 8005d30:	2000071c 	.word	0x2000071c
 8005d34:	20000708 	.word	0x20000708
 8005d38:	20000700 	.word	0x20000700

08005d3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005d40:	4b04      	ldr	r3, [pc, #16]	; (8005d54 <vTaskSuspendAll+0x18>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	3301      	adds	r3, #1
 8005d46:	4a03      	ldr	r2, [pc, #12]	; (8005d54 <vTaskSuspendAll+0x18>)
 8005d48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005d4a:	bf00      	nop
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	20000724 	.word	0x20000724

08005d58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d62:	2300      	movs	r3, #0
 8005d64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d66:	4b41      	ldr	r3, [pc, #260]	; (8005e6c <xTaskResumeAll+0x114>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10a      	bne.n	8005d84 <xTaskResumeAll+0x2c>
	__asm volatile
 8005d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	603b      	str	r3, [r7, #0]
}
 8005d80:	bf00      	nop
 8005d82:	e7fe      	b.n	8005d82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d84:	f000 fc36 	bl	80065f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d88:	4b38      	ldr	r3, [pc, #224]	; (8005e6c <xTaskResumeAll+0x114>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	4a37      	ldr	r2, [pc, #220]	; (8005e6c <xTaskResumeAll+0x114>)
 8005d90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d92:	4b36      	ldr	r3, [pc, #216]	; (8005e6c <xTaskResumeAll+0x114>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d161      	bne.n	8005e5e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d9a:	4b35      	ldr	r3, [pc, #212]	; (8005e70 <xTaskResumeAll+0x118>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d05d      	beq.n	8005e5e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005da2:	e02e      	b.n	8005e02 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005da4:	4b33      	ldr	r3, [pc, #204]	; (8005e74 <xTaskResumeAll+0x11c>)
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	3318      	adds	r3, #24
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7ff fd44 	bl	800583e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	3304      	adds	r3, #4
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7ff fd3f 	bl	800583e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	409a      	lsls	r2, r3
 8005dc8:	4b2b      	ldr	r3, [pc, #172]	; (8005e78 <xTaskResumeAll+0x120>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	4a2a      	ldr	r2, [pc, #168]	; (8005e78 <xTaskResumeAll+0x120>)
 8005dd0:	6013      	str	r3, [r2, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4413      	add	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4a27      	ldr	r2, [pc, #156]	; (8005e7c <xTaskResumeAll+0x124>)
 8005de0:	441a      	add	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	3304      	adds	r3, #4
 8005de6:	4619      	mov	r1, r3
 8005de8:	4610      	mov	r0, r2
 8005dea:	f7ff fccb 	bl	8005784 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df2:	4b23      	ldr	r3, [pc, #140]	; (8005e80 <xTaskResumeAll+0x128>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d302      	bcc.n	8005e02 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005dfc:	4b21      	ldr	r3, [pc, #132]	; (8005e84 <xTaskResumeAll+0x12c>)
 8005dfe:	2201      	movs	r2, #1
 8005e00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e02:	4b1c      	ldr	r3, [pc, #112]	; (8005e74 <xTaskResumeAll+0x11c>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1cc      	bne.n	8005da4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d001      	beq.n	8005e14 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e10:	f000 fa3a 	bl	8006288 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005e14:	4b1c      	ldr	r3, [pc, #112]	; (8005e88 <xTaskResumeAll+0x130>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d010      	beq.n	8005e42 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e20:	f000 f836 	bl	8005e90 <xTaskIncrementTick>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005e2a:	4b16      	ldr	r3, [pc, #88]	; (8005e84 <xTaskResumeAll+0x12c>)
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	3b01      	subs	r3, #1
 8005e34:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1f1      	bne.n	8005e20 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005e3c:	4b12      	ldr	r3, [pc, #72]	; (8005e88 <xTaskResumeAll+0x130>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e42:	4b10      	ldr	r3, [pc, #64]	; (8005e84 <xTaskResumeAll+0x12c>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d009      	beq.n	8005e5e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e4e:	4b0f      	ldr	r3, [pc, #60]	; (8005e8c <xTaskResumeAll+0x134>)
 8005e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	f3bf 8f4f 	dsb	sy
 8005e5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e5e:	f000 fbf9 	bl	8006654 <vPortExitCritical>

	return xAlreadyYielded;
 8005e62:	68bb      	ldr	r3, [r7, #8]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	20000724 	.word	0x20000724
 8005e70:	200006fc 	.word	0x200006fc
 8005e74:	200006bc 	.word	0x200006bc
 8005e78:	20000704 	.word	0x20000704
 8005e7c:	20000600 	.word	0x20000600
 8005e80:	200005fc 	.word	0x200005fc
 8005e84:	20000710 	.word	0x20000710
 8005e88:	2000070c 	.word	0x2000070c
 8005e8c:	e000ed04 	.word	0xe000ed04

08005e90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e96:	2300      	movs	r3, #0
 8005e98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e9a:	4b4e      	ldr	r3, [pc, #312]	; (8005fd4 <xTaskIncrementTick+0x144>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f040 808e 	bne.w	8005fc0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ea4:	4b4c      	ldr	r3, [pc, #304]	; (8005fd8 <xTaskIncrementTick+0x148>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005eac:	4a4a      	ldr	r2, [pc, #296]	; (8005fd8 <xTaskIncrementTick+0x148>)
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d120      	bne.n	8005efa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005eb8:	4b48      	ldr	r3, [pc, #288]	; (8005fdc <xTaskIncrementTick+0x14c>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00a      	beq.n	8005ed8 <xTaskIncrementTick+0x48>
	__asm volatile
 8005ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	603b      	str	r3, [r7, #0]
}
 8005ed4:	bf00      	nop
 8005ed6:	e7fe      	b.n	8005ed6 <xTaskIncrementTick+0x46>
 8005ed8:	4b40      	ldr	r3, [pc, #256]	; (8005fdc <xTaskIncrementTick+0x14c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	60fb      	str	r3, [r7, #12]
 8005ede:	4b40      	ldr	r3, [pc, #256]	; (8005fe0 <xTaskIncrementTick+0x150>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a3e      	ldr	r2, [pc, #248]	; (8005fdc <xTaskIncrementTick+0x14c>)
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	4a3e      	ldr	r2, [pc, #248]	; (8005fe0 <xTaskIncrementTick+0x150>)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	4b3d      	ldr	r3, [pc, #244]	; (8005fe4 <xTaskIncrementTick+0x154>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	4a3c      	ldr	r2, [pc, #240]	; (8005fe4 <xTaskIncrementTick+0x154>)
 8005ef4:	6013      	str	r3, [r2, #0]
 8005ef6:	f000 f9c7 	bl	8006288 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005efa:	4b3b      	ldr	r3, [pc, #236]	; (8005fe8 <xTaskIncrementTick+0x158>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d348      	bcc.n	8005f96 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f04:	4b35      	ldr	r3, [pc, #212]	; (8005fdc <xTaskIncrementTick+0x14c>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d104      	bne.n	8005f18 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f0e:	4b36      	ldr	r3, [pc, #216]	; (8005fe8 <xTaskIncrementTick+0x158>)
 8005f10:	f04f 32ff 	mov.w	r2, #4294967295
 8005f14:	601a      	str	r2, [r3, #0]
					break;
 8005f16:	e03e      	b.n	8005f96 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f18:	4b30      	ldr	r3, [pc, #192]	; (8005fdc <xTaskIncrementTick+0x14c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d203      	bcs.n	8005f38 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f30:	4a2d      	ldr	r2, [pc, #180]	; (8005fe8 <xTaskIncrementTick+0x158>)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005f36:	e02e      	b.n	8005f96 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7ff fc7e 	bl	800583e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d004      	beq.n	8005f54 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	3318      	adds	r3, #24
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7ff fc75 	bl	800583e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f58:	2201      	movs	r2, #1
 8005f5a:	409a      	lsls	r2, r3
 8005f5c:	4b23      	ldr	r3, [pc, #140]	; (8005fec <xTaskIncrementTick+0x15c>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	4a22      	ldr	r2, [pc, #136]	; (8005fec <xTaskIncrementTick+0x15c>)
 8005f64:	6013      	str	r3, [r2, #0]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4a1f      	ldr	r2, [pc, #124]	; (8005ff0 <xTaskIncrementTick+0x160>)
 8005f74:	441a      	add	r2, r3
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	3304      	adds	r3, #4
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	4610      	mov	r0, r2
 8005f7e:	f7ff fc01 	bl	8005784 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f86:	4b1b      	ldr	r3, [pc, #108]	; (8005ff4 <xTaskIncrementTick+0x164>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d3b9      	bcc.n	8005f04 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005f90:	2301      	movs	r3, #1
 8005f92:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f94:	e7b6      	b.n	8005f04 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f96:	4b17      	ldr	r3, [pc, #92]	; (8005ff4 <xTaskIncrementTick+0x164>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9c:	4914      	ldr	r1, [pc, #80]	; (8005ff0 <xTaskIncrementTick+0x160>)
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	440b      	add	r3, r1
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d901      	bls.n	8005fb2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005fb2:	4b11      	ldr	r3, [pc, #68]	; (8005ff8 <xTaskIncrementTick+0x168>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d007      	beq.n	8005fca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	617b      	str	r3, [r7, #20]
 8005fbe:	e004      	b.n	8005fca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005fc0:	4b0e      	ldr	r3, [pc, #56]	; (8005ffc <xTaskIncrementTick+0x16c>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	4a0d      	ldr	r2, [pc, #52]	; (8005ffc <xTaskIncrementTick+0x16c>)
 8005fc8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005fca:	697b      	ldr	r3, [r7, #20]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	20000724 	.word	0x20000724
 8005fd8:	20000700 	.word	0x20000700
 8005fdc:	200006b4 	.word	0x200006b4
 8005fe0:	200006b8 	.word	0x200006b8
 8005fe4:	20000714 	.word	0x20000714
 8005fe8:	2000071c 	.word	0x2000071c
 8005fec:	20000704 	.word	0x20000704
 8005ff0:	20000600 	.word	0x20000600
 8005ff4:	200005fc 	.word	0x200005fc
 8005ff8:	20000710 	.word	0x20000710
 8005ffc:	2000070c 	.word	0x2000070c

08006000 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b088      	sub	sp, #32
 8006004:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006006:	4b3c      	ldr	r3, [pc, #240]	; (80060f8 <vTaskSwitchContext+0xf8>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d003      	beq.n	8006016 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800600e:	4b3b      	ldr	r3, [pc, #236]	; (80060fc <vTaskSwitchContext+0xfc>)
 8006010:	2201      	movs	r2, #1
 8006012:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006014:	e06b      	b.n	80060ee <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 8006016:	4b39      	ldr	r3, [pc, #228]	; (80060fc <vTaskSwitchContext+0xfc>)
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800601c:	4b38      	ldr	r3, [pc, #224]	; (8006100 <vTaskSwitchContext+0x100>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006022:	61fb      	str	r3, [r7, #28]
 8006024:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8006028:	61bb      	str	r3, [r7, #24]
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	429a      	cmp	r2, r3
 8006032:	d111      	bne.n	8006058 <vTaskSwitchContext+0x58>
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	3304      	adds	r3, #4
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	69ba      	ldr	r2, [r7, #24]
 800603c:	429a      	cmp	r2, r3
 800603e:	d10b      	bne.n	8006058 <vTaskSwitchContext+0x58>
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	3308      	adds	r3, #8
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	429a      	cmp	r2, r3
 800604a:	d105      	bne.n	8006058 <vTaskSwitchContext+0x58>
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	330c      	adds	r3, #12
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	69ba      	ldr	r2, [r7, #24]
 8006054:	429a      	cmp	r2, r3
 8006056:	d008      	beq.n	800606a <vTaskSwitchContext+0x6a>
 8006058:	4b29      	ldr	r3, [pc, #164]	; (8006100 <vTaskSwitchContext+0x100>)
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	4b28      	ldr	r3, [pc, #160]	; (8006100 <vTaskSwitchContext+0x100>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	3334      	adds	r3, #52	; 0x34
 8006062:	4619      	mov	r1, r3
 8006064:	4610      	mov	r0, r2
 8006066:	f7fa fa9c 	bl	80005a2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800606a:	4b26      	ldr	r3, [pc, #152]	; (8006104 <vTaskSwitchContext+0x104>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	fab3 f383 	clz	r3, r3
 8006076:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006078:	7afb      	ldrb	r3, [r7, #11]
 800607a:	f1c3 031f 	rsb	r3, r3, #31
 800607e:	617b      	str	r3, [r7, #20]
 8006080:	4921      	ldr	r1, [pc, #132]	; (8006108 <vTaskSwitchContext+0x108>)
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	4613      	mov	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	440b      	add	r3, r1
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10a      	bne.n	80060aa <vTaskSwitchContext+0xaa>
	__asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	607b      	str	r3, [r7, #4]
}
 80060a6:	bf00      	nop
 80060a8:	e7fe      	b.n	80060a8 <vTaskSwitchContext+0xa8>
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	4613      	mov	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4a14      	ldr	r2, [pc, #80]	; (8006108 <vTaskSwitchContext+0x108>)
 80060b6:	4413      	add	r3, r2
 80060b8:	613b      	str	r3, [r7, #16]
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	605a      	str	r2, [r3, #4]
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	3308      	adds	r3, #8
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d104      	bne.n	80060da <vTaskSwitchContext+0xda>
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	605a      	str	r2, [r3, #4]
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	4a07      	ldr	r2, [pc, #28]	; (8006100 <vTaskSwitchContext+0x100>)
 80060e2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80060e4:	4b06      	ldr	r3, [pc, #24]	; (8006100 <vTaskSwitchContext+0x100>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3350      	adds	r3, #80	; 0x50
 80060ea:	4a08      	ldr	r2, [pc, #32]	; (800610c <vTaskSwitchContext+0x10c>)
 80060ec:	6013      	str	r3, [r2, #0]
}
 80060ee:	bf00      	nop
 80060f0:	3720      	adds	r7, #32
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	20000724 	.word	0x20000724
 80060fc:	20000710 	.word	0x20000710
 8006100:	200005fc 	.word	0x200005fc
 8006104:	20000704 	.word	0x20000704
 8006108:	20000600 	.word	0x20000600
 800610c:	20000010 	.word	0x20000010

08006110 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006118:	f000 f854 	bl	80061c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800611c:	4b07      	ldr	r3, [pc, #28]	; (800613c <prvIdleTask+0x2c>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d907      	bls.n	8006134 <prvIdleTask+0x24>
			{
				taskYIELD();
 8006124:	4b06      	ldr	r3, [pc, #24]	; (8006140 <prvIdleTask+0x30>)
 8006126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8006134:	f7fa fa2e 	bl	8000594 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8006138:	e7ee      	b.n	8006118 <prvIdleTask+0x8>
 800613a:	bf00      	nop
 800613c:	20000600 	.word	0x20000600
 8006140:	e000ed04 	.word	0xe000ed04

08006144 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800614a:	2300      	movs	r3, #0
 800614c:	607b      	str	r3, [r7, #4]
 800614e:	e00c      	b.n	800616a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	4613      	mov	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4a12      	ldr	r2, [pc, #72]	; (80061a4 <prvInitialiseTaskLists+0x60>)
 800615c:	4413      	add	r3, r2
 800615e:	4618      	mov	r0, r3
 8006160:	f7ff fae3 	bl	800572a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3301      	adds	r3, #1
 8006168:	607b      	str	r3, [r7, #4]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2b06      	cmp	r3, #6
 800616e:	d9ef      	bls.n	8006150 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006170:	480d      	ldr	r0, [pc, #52]	; (80061a8 <prvInitialiseTaskLists+0x64>)
 8006172:	f7ff fada 	bl	800572a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006176:	480d      	ldr	r0, [pc, #52]	; (80061ac <prvInitialiseTaskLists+0x68>)
 8006178:	f7ff fad7 	bl	800572a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800617c:	480c      	ldr	r0, [pc, #48]	; (80061b0 <prvInitialiseTaskLists+0x6c>)
 800617e:	f7ff fad4 	bl	800572a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006182:	480c      	ldr	r0, [pc, #48]	; (80061b4 <prvInitialiseTaskLists+0x70>)
 8006184:	f7ff fad1 	bl	800572a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006188:	480b      	ldr	r0, [pc, #44]	; (80061b8 <prvInitialiseTaskLists+0x74>)
 800618a:	f7ff face 	bl	800572a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800618e:	4b0b      	ldr	r3, [pc, #44]	; (80061bc <prvInitialiseTaskLists+0x78>)
 8006190:	4a05      	ldr	r2, [pc, #20]	; (80061a8 <prvInitialiseTaskLists+0x64>)
 8006192:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006194:	4b0a      	ldr	r3, [pc, #40]	; (80061c0 <prvInitialiseTaskLists+0x7c>)
 8006196:	4a05      	ldr	r2, [pc, #20]	; (80061ac <prvInitialiseTaskLists+0x68>)
 8006198:	601a      	str	r2, [r3, #0]
}
 800619a:	bf00      	nop
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	20000600 	.word	0x20000600
 80061a8:	2000068c 	.word	0x2000068c
 80061ac:	200006a0 	.word	0x200006a0
 80061b0:	200006bc 	.word	0x200006bc
 80061b4:	200006d0 	.word	0x200006d0
 80061b8:	200006e8 	.word	0x200006e8
 80061bc:	200006b4 	.word	0x200006b4
 80061c0:	200006b8 	.word	0x200006b8

080061c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061ca:	e019      	b.n	8006200 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80061cc:	f000 fa12 	bl	80065f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061d0:	4b10      	ldr	r3, [pc, #64]	; (8006214 <prvCheckTasksWaitingTermination+0x50>)
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	3304      	adds	r3, #4
 80061dc:	4618      	mov	r0, r3
 80061de:	f7ff fb2e 	bl	800583e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061e2:	4b0d      	ldr	r3, [pc, #52]	; (8006218 <prvCheckTasksWaitingTermination+0x54>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3b01      	subs	r3, #1
 80061e8:	4a0b      	ldr	r2, [pc, #44]	; (8006218 <prvCheckTasksWaitingTermination+0x54>)
 80061ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061ec:	4b0b      	ldr	r3, [pc, #44]	; (800621c <prvCheckTasksWaitingTermination+0x58>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3b01      	subs	r3, #1
 80061f2:	4a0a      	ldr	r2, [pc, #40]	; (800621c <prvCheckTasksWaitingTermination+0x58>)
 80061f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061f6:	f000 fa2d 	bl	8006654 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f810 	bl	8006220 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006200:	4b06      	ldr	r3, [pc, #24]	; (800621c <prvCheckTasksWaitingTermination+0x58>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1e1      	bne.n	80061cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006208:	bf00      	nop
 800620a:	bf00      	nop
 800620c:	3708      	adds	r7, #8
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	200006d0 	.word	0x200006d0
 8006218:	200006fc 	.word	0x200006fc
 800621c:	200006e4 	.word	0x200006e4

08006220 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	3350      	adds	r3, #80	; 0x50
 800622c:	4618      	mov	r0, r3
 800622e:	f000 fe97 	bl	8006f60 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8006238:	2b00      	cmp	r3, #0
 800623a:	d108      	bne.n	800624e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006240:	4618      	mov	r0, r3
 8006242:	f000 fb89 	bl	8006958 <vPortFree>
				vPortFree( pxTCB );
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fb86 	bl	8006958 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800624c:	e018      	b.n	8006280 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8006254:	2b01      	cmp	r3, #1
 8006256:	d103      	bne.n	8006260 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fb7d 	bl	8006958 <vPortFree>
	}
 800625e:	e00f      	b.n	8006280 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8006266:	2b02      	cmp	r3, #2
 8006268:	d00a      	beq.n	8006280 <prvDeleteTCB+0x60>
	__asm volatile
 800626a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	60fb      	str	r3, [r7, #12]
}
 800627c:	bf00      	nop
 800627e:	e7fe      	b.n	800627e <prvDeleteTCB+0x5e>
	}
 8006280:	bf00      	nop
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800628e:	4b0c      	ldr	r3, [pc, #48]	; (80062c0 <prvResetNextTaskUnblockTime+0x38>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d104      	bne.n	80062a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006298:	4b0a      	ldr	r3, [pc, #40]	; (80062c4 <prvResetNextTaskUnblockTime+0x3c>)
 800629a:	f04f 32ff 	mov.w	r2, #4294967295
 800629e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80062a0:	e008      	b.n	80062b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062a2:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <prvResetNextTaskUnblockTime+0x38>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	4a04      	ldr	r2, [pc, #16]	; (80062c4 <prvResetNextTaskUnblockTime+0x3c>)
 80062b2:	6013      	str	r3, [r2, #0]
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	200006b4 	.word	0x200006b4
 80062c4:	2000071c 	.word	0x2000071c

080062c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80062d2:	4b29      	ldr	r3, [pc, #164]	; (8006378 <prvAddCurrentTaskToDelayedList+0xb0>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062d8:	4b28      	ldr	r3, [pc, #160]	; (800637c <prvAddCurrentTaskToDelayedList+0xb4>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	3304      	adds	r3, #4
 80062de:	4618      	mov	r0, r3
 80062e0:	f7ff faad 	bl	800583e <uxListRemove>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10b      	bne.n	8006302 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80062ea:	4b24      	ldr	r3, [pc, #144]	; (800637c <prvAddCurrentTaskToDelayedList+0xb4>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f0:	2201      	movs	r2, #1
 80062f2:	fa02 f303 	lsl.w	r3, r2, r3
 80062f6:	43da      	mvns	r2, r3
 80062f8:	4b21      	ldr	r3, [pc, #132]	; (8006380 <prvAddCurrentTaskToDelayedList+0xb8>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4013      	ands	r3, r2
 80062fe:	4a20      	ldr	r2, [pc, #128]	; (8006380 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006300:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006308:	d10a      	bne.n	8006320 <prvAddCurrentTaskToDelayedList+0x58>
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d007      	beq.n	8006320 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006310:	4b1a      	ldr	r3, [pc, #104]	; (800637c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3304      	adds	r3, #4
 8006316:	4619      	mov	r1, r3
 8006318:	481a      	ldr	r0, [pc, #104]	; (8006384 <prvAddCurrentTaskToDelayedList+0xbc>)
 800631a:	f7ff fa33 	bl	8005784 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800631e:	e026      	b.n	800636e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4413      	add	r3, r2
 8006326:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006328:	4b14      	ldr	r3, [pc, #80]	; (800637c <prvAddCurrentTaskToDelayedList+0xb4>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	429a      	cmp	r2, r3
 8006336:	d209      	bcs.n	800634c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006338:	4b13      	ldr	r3, [pc, #76]	; (8006388 <prvAddCurrentTaskToDelayedList+0xc0>)
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	4b0f      	ldr	r3, [pc, #60]	; (800637c <prvAddCurrentTaskToDelayedList+0xb4>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3304      	adds	r3, #4
 8006342:	4619      	mov	r1, r3
 8006344:	4610      	mov	r0, r2
 8006346:	f7ff fa41 	bl	80057cc <vListInsert>
}
 800634a:	e010      	b.n	800636e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800634c:	4b0f      	ldr	r3, [pc, #60]	; (800638c <prvAddCurrentTaskToDelayedList+0xc4>)
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	4b0a      	ldr	r3, [pc, #40]	; (800637c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3304      	adds	r3, #4
 8006356:	4619      	mov	r1, r3
 8006358:	4610      	mov	r0, r2
 800635a:	f7ff fa37 	bl	80057cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800635e:	4b0c      	ldr	r3, [pc, #48]	; (8006390 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	429a      	cmp	r2, r3
 8006366:	d202      	bcs.n	800636e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006368:	4a09      	ldr	r2, [pc, #36]	; (8006390 <prvAddCurrentTaskToDelayedList+0xc8>)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	6013      	str	r3, [r2, #0]
}
 800636e:	bf00      	nop
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	20000700 	.word	0x20000700
 800637c:	200005fc 	.word	0x200005fc
 8006380:	20000704 	.word	0x20000704
 8006384:	200006e8 	.word	0x200006e8
 8006388:	200006b8 	.word	0x200006b8
 800638c:	200006b4 	.word	0x200006b4
 8006390:	2000071c 	.word	0x2000071c

08006394 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	3b04      	subs	r3, #4
 80063a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	3b04      	subs	r3, #4
 80063b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	f023 0201 	bic.w	r2, r3, #1
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	3b04      	subs	r3, #4
 80063c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80063c4:	4a0c      	ldr	r2, [pc, #48]	; (80063f8 <pxPortInitialiseStack+0x64>)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	3b14      	subs	r3, #20
 80063ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	3b04      	subs	r3, #4
 80063da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f06f 0202 	mvn.w	r2, #2
 80063e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	3b20      	subs	r3, #32
 80063e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063ea:	68fb      	ldr	r3, [r7, #12]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	080063fd 	.word	0x080063fd

080063fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006402:	2300      	movs	r3, #0
 8006404:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006406:	4b12      	ldr	r3, [pc, #72]	; (8006450 <prvTaskExitError+0x54>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800640e:	d00a      	beq.n	8006426 <prvTaskExitError+0x2a>
	__asm volatile
 8006410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006414:	f383 8811 	msr	BASEPRI, r3
 8006418:	f3bf 8f6f 	isb	sy
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	60fb      	str	r3, [r7, #12]
}
 8006422:	bf00      	nop
 8006424:	e7fe      	b.n	8006424 <prvTaskExitError+0x28>
	__asm volatile
 8006426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	60bb      	str	r3, [r7, #8]
}
 8006438:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800643a:	bf00      	nop
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d0fc      	beq.n	800643c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006442:	bf00      	nop
 8006444:	bf00      	nop
 8006446:	3714      	adds	r7, #20
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	2000000c 	.word	0x2000000c
	...

08006460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006460:	4b07      	ldr	r3, [pc, #28]	; (8006480 <pxCurrentTCBConst2>)
 8006462:	6819      	ldr	r1, [r3, #0]
 8006464:	6808      	ldr	r0, [r1, #0]
 8006466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646a:	f380 8809 	msr	PSP, r0
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f04f 0000 	mov.w	r0, #0
 8006476:	f380 8811 	msr	BASEPRI, r0
 800647a:	4770      	bx	lr
 800647c:	f3af 8000 	nop.w

08006480 <pxCurrentTCBConst2>:
 8006480:	200005fc 	.word	0x200005fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006484:	bf00      	nop
 8006486:	bf00      	nop

08006488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006488:	4808      	ldr	r0, [pc, #32]	; (80064ac <prvPortStartFirstTask+0x24>)
 800648a:	6800      	ldr	r0, [r0, #0]
 800648c:	6800      	ldr	r0, [r0, #0]
 800648e:	f380 8808 	msr	MSP, r0
 8006492:	f04f 0000 	mov.w	r0, #0
 8006496:	f380 8814 	msr	CONTROL, r0
 800649a:	b662      	cpsie	i
 800649c:	b661      	cpsie	f
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	df00      	svc	0
 80064a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80064aa:	bf00      	nop
 80064ac:	e000ed08 	.word	0xe000ed08

080064b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80064b6:	4b46      	ldr	r3, [pc, #280]	; (80065d0 <xPortStartScheduler+0x120>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a46      	ldr	r2, [pc, #280]	; (80065d4 <xPortStartScheduler+0x124>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d10a      	bne.n	80064d6 <xPortStartScheduler+0x26>
	__asm volatile
 80064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	613b      	str	r3, [r7, #16]
}
 80064d2:	bf00      	nop
 80064d4:	e7fe      	b.n	80064d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80064d6:	4b3e      	ldr	r3, [pc, #248]	; (80065d0 <xPortStartScheduler+0x120>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a3f      	ldr	r2, [pc, #252]	; (80065d8 <xPortStartScheduler+0x128>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d10a      	bne.n	80064f6 <xPortStartScheduler+0x46>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	60fb      	str	r3, [r7, #12]
}
 80064f2:	bf00      	nop
 80064f4:	e7fe      	b.n	80064f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064f6:	4b39      	ldr	r3, [pc, #228]	; (80065dc <xPortStartScheduler+0x12c>)
 80064f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	22ff      	movs	r2, #255	; 0xff
 8006506:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	b2db      	uxtb	r3, r3
 800650e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	b2db      	uxtb	r3, r3
 8006514:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006518:	b2da      	uxtb	r2, r3
 800651a:	4b31      	ldr	r3, [pc, #196]	; (80065e0 <xPortStartScheduler+0x130>)
 800651c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800651e:	4b31      	ldr	r3, [pc, #196]	; (80065e4 <xPortStartScheduler+0x134>)
 8006520:	2207      	movs	r2, #7
 8006522:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006524:	e009      	b.n	800653a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006526:	4b2f      	ldr	r3, [pc, #188]	; (80065e4 <xPortStartScheduler+0x134>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3b01      	subs	r3, #1
 800652c:	4a2d      	ldr	r2, [pc, #180]	; (80065e4 <xPortStartScheduler+0x134>)
 800652e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006530:	78fb      	ldrb	r3, [r7, #3]
 8006532:	b2db      	uxtb	r3, r3
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	b2db      	uxtb	r3, r3
 8006538:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800653a:	78fb      	ldrb	r3, [r7, #3]
 800653c:	b2db      	uxtb	r3, r3
 800653e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006542:	2b80      	cmp	r3, #128	; 0x80
 8006544:	d0ef      	beq.n	8006526 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006546:	4b27      	ldr	r3, [pc, #156]	; (80065e4 <xPortStartScheduler+0x134>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f1c3 0307 	rsb	r3, r3, #7
 800654e:	2b04      	cmp	r3, #4
 8006550:	d00a      	beq.n	8006568 <xPortStartScheduler+0xb8>
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	60bb      	str	r3, [r7, #8]
}
 8006564:	bf00      	nop
 8006566:	e7fe      	b.n	8006566 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006568:	4b1e      	ldr	r3, [pc, #120]	; (80065e4 <xPortStartScheduler+0x134>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	021b      	lsls	r3, r3, #8
 800656e:	4a1d      	ldr	r2, [pc, #116]	; (80065e4 <xPortStartScheduler+0x134>)
 8006570:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006572:	4b1c      	ldr	r3, [pc, #112]	; (80065e4 <xPortStartScheduler+0x134>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800657a:	4a1a      	ldr	r2, [pc, #104]	; (80065e4 <xPortStartScheduler+0x134>)
 800657c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	b2da      	uxtb	r2, r3
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006586:	4b18      	ldr	r3, [pc, #96]	; (80065e8 <xPortStartScheduler+0x138>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a17      	ldr	r2, [pc, #92]	; (80065e8 <xPortStartScheduler+0x138>)
 800658c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006590:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006592:	4b15      	ldr	r3, [pc, #84]	; (80065e8 <xPortStartScheduler+0x138>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a14      	ldr	r2, [pc, #80]	; (80065e8 <xPortStartScheduler+0x138>)
 8006598:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800659c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800659e:	f000 f8dd 	bl	800675c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80065a2:	4b12      	ldr	r3, [pc, #72]	; (80065ec <xPortStartScheduler+0x13c>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80065a8:	f000 f8fc 	bl	80067a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80065ac:	4b10      	ldr	r3, [pc, #64]	; (80065f0 <xPortStartScheduler+0x140>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a0f      	ldr	r2, [pc, #60]	; (80065f0 <xPortStartScheduler+0x140>)
 80065b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80065b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80065b8:	f7ff ff66 	bl	8006488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80065bc:	f7ff fd20 	bl	8006000 <vTaskSwitchContext>
	prvTaskExitError();
 80065c0:	f7ff ff1c 	bl	80063fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3718      	adds	r7, #24
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	e000ed00 	.word	0xe000ed00
 80065d4:	410fc271 	.word	0x410fc271
 80065d8:	410fc270 	.word	0x410fc270
 80065dc:	e000e400 	.word	0xe000e400
 80065e0:	20000728 	.word	0x20000728
 80065e4:	2000072c 	.word	0x2000072c
 80065e8:	e000ed20 	.word	0xe000ed20
 80065ec:	2000000c 	.word	0x2000000c
 80065f0:	e000ef34 	.word	0xe000ef34

080065f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
	__asm volatile
 80065fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fe:	f383 8811 	msr	BASEPRI, r3
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	607b      	str	r3, [r7, #4]
}
 800660c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800660e:	4b0f      	ldr	r3, [pc, #60]	; (800664c <vPortEnterCritical+0x58>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	3301      	adds	r3, #1
 8006614:	4a0d      	ldr	r2, [pc, #52]	; (800664c <vPortEnterCritical+0x58>)
 8006616:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006618:	4b0c      	ldr	r3, [pc, #48]	; (800664c <vPortEnterCritical+0x58>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d10f      	bne.n	8006640 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006620:	4b0b      	ldr	r3, [pc, #44]	; (8006650 <vPortEnterCritical+0x5c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <vPortEnterCritical+0x4c>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	603b      	str	r3, [r7, #0]
}
 800663c:	bf00      	nop
 800663e:	e7fe      	b.n	800663e <vPortEnterCritical+0x4a>
	}
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr
 800664c:	2000000c 	.word	0x2000000c
 8006650:	e000ed04 	.word	0xe000ed04

08006654 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800665a:	4b12      	ldr	r3, [pc, #72]	; (80066a4 <vPortExitCritical+0x50>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10a      	bne.n	8006678 <vPortExitCritical+0x24>
	__asm volatile
 8006662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006666:	f383 8811 	msr	BASEPRI, r3
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	607b      	str	r3, [r7, #4]
}
 8006674:	bf00      	nop
 8006676:	e7fe      	b.n	8006676 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006678:	4b0a      	ldr	r3, [pc, #40]	; (80066a4 <vPortExitCritical+0x50>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3b01      	subs	r3, #1
 800667e:	4a09      	ldr	r2, [pc, #36]	; (80066a4 <vPortExitCritical+0x50>)
 8006680:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006682:	4b08      	ldr	r3, [pc, #32]	; (80066a4 <vPortExitCritical+0x50>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d105      	bne.n	8006696 <vPortExitCritical+0x42>
 800668a:	2300      	movs	r3, #0
 800668c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006694:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006696:	bf00      	nop
 8006698:	370c      	adds	r7, #12
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	2000000c 	.word	0x2000000c
	...

080066b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066b0:	f3ef 8009 	mrs	r0, PSP
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	4b15      	ldr	r3, [pc, #84]	; (8006710 <pxCurrentTCBConst>)
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	f01e 0f10 	tst.w	lr, #16
 80066c0:	bf08      	it	eq
 80066c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80066c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ca:	6010      	str	r0, [r2, #0]
 80066cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80066d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80066d4:	f380 8811 	msr	BASEPRI, r0
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f7ff fc8e 	bl	8006000 <vTaskSwitchContext>
 80066e4:	f04f 0000 	mov.w	r0, #0
 80066e8:	f380 8811 	msr	BASEPRI, r0
 80066ec:	bc09      	pop	{r0, r3}
 80066ee:	6819      	ldr	r1, [r3, #0]
 80066f0:	6808      	ldr	r0, [r1, #0]
 80066f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f6:	f01e 0f10 	tst.w	lr, #16
 80066fa:	bf08      	it	eq
 80066fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006700:	f380 8809 	msr	PSP, r0
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	f3af 8000 	nop.w

08006710 <pxCurrentTCBConst>:
 8006710:	200005fc 	.word	0x200005fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006714:	bf00      	nop
 8006716:	bf00      	nop

08006718 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
	__asm volatile
 800671e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	607b      	str	r3, [r7, #4]
}
 8006730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006732:	f7ff fbad 	bl	8005e90 <xTaskIncrementTick>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d003      	beq.n	8006744 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800673c:	4b06      	ldr	r3, [pc, #24]	; (8006758 <SysTick_Handler+0x40>)
 800673e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006742:	601a      	str	r2, [r3, #0]
 8006744:	2300      	movs	r3, #0
 8006746:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	f383 8811 	msr	BASEPRI, r3
}
 800674e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006750:	bf00      	nop
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	e000ed04 	.word	0xe000ed04

0800675c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800675c:	b480      	push	{r7}
 800675e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006760:	4b0b      	ldr	r3, [pc, #44]	; (8006790 <vPortSetupTimerInterrupt+0x34>)
 8006762:	2200      	movs	r2, #0
 8006764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006766:	4b0b      	ldr	r3, [pc, #44]	; (8006794 <vPortSetupTimerInterrupt+0x38>)
 8006768:	2200      	movs	r2, #0
 800676a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800676c:	4b0a      	ldr	r3, [pc, #40]	; (8006798 <vPortSetupTimerInterrupt+0x3c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a0a      	ldr	r2, [pc, #40]	; (800679c <vPortSetupTimerInterrupt+0x40>)
 8006772:	fba2 2303 	umull	r2, r3, r2, r3
 8006776:	099b      	lsrs	r3, r3, #6
 8006778:	4a09      	ldr	r2, [pc, #36]	; (80067a0 <vPortSetupTimerInterrupt+0x44>)
 800677a:	3b01      	subs	r3, #1
 800677c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800677e:	4b04      	ldr	r3, [pc, #16]	; (8006790 <vPortSetupTimerInterrupt+0x34>)
 8006780:	2207      	movs	r2, #7
 8006782:	601a      	str	r2, [r3, #0]
}
 8006784:	bf00      	nop
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	e000e010 	.word	0xe000e010
 8006794:	e000e018 	.word	0xe000e018
 8006798:	20000000 	.word	0x20000000
 800679c:	10624dd3 	.word	0x10624dd3
 80067a0:	e000e014 	.word	0xe000e014

080067a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80067a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80067b4 <vPortEnableVFP+0x10>
 80067a8:	6801      	ldr	r1, [r0, #0]
 80067aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80067ae:	6001      	str	r1, [r0, #0]
 80067b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80067b2:	bf00      	nop
 80067b4:	e000ed88 	.word	0xe000ed88

080067b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b08a      	sub	sp, #40	; 0x28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80067c0:	2300      	movs	r3, #0
 80067c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80067c4:	f7ff faba 	bl	8005d3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80067c8:	4b5d      	ldr	r3, [pc, #372]	; (8006940 <pvPortMalloc+0x188>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80067d0:	f000 f924 	bl	8006a1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80067d4:	4b5b      	ldr	r3, [pc, #364]	; (8006944 <pvPortMalloc+0x18c>)
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4013      	ands	r3, r2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f040 8093 	bne.w	8006908 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d01d      	beq.n	8006824 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80067e8:	2208      	movs	r2, #8
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4413      	add	r3, r2
 80067ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d014      	beq.n	8006824 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f023 0307 	bic.w	r3, r3, #7
 8006800:	3308      	adds	r3, #8
 8006802:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f003 0307 	and.w	r3, r3, #7
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00a      	beq.n	8006824 <pvPortMalloc+0x6c>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	617b      	str	r3, [r7, #20]
}
 8006820:	bf00      	nop
 8006822:	e7fe      	b.n	8006822 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d06e      	beq.n	8006908 <pvPortMalloc+0x150>
 800682a:	4b47      	ldr	r3, [pc, #284]	; (8006948 <pvPortMalloc+0x190>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	429a      	cmp	r2, r3
 8006832:	d869      	bhi.n	8006908 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006834:	4b45      	ldr	r3, [pc, #276]	; (800694c <pvPortMalloc+0x194>)
 8006836:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006838:	4b44      	ldr	r3, [pc, #272]	; (800694c <pvPortMalloc+0x194>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800683e:	e004      	b.n	800684a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	429a      	cmp	r2, r3
 8006852:	d903      	bls.n	800685c <pvPortMalloc+0xa4>
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1f1      	bne.n	8006840 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800685c:	4b38      	ldr	r3, [pc, #224]	; (8006940 <pvPortMalloc+0x188>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006862:	429a      	cmp	r2, r3
 8006864:	d050      	beq.n	8006908 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2208      	movs	r2, #8
 800686c:	4413      	add	r3, r2
 800686e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	1ad2      	subs	r2, r2, r3
 8006880:	2308      	movs	r3, #8
 8006882:	005b      	lsls	r3, r3, #1
 8006884:	429a      	cmp	r2, r3
 8006886:	d91f      	bls.n	80068c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4413      	add	r3, r2
 800688e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	f003 0307 	and.w	r3, r3, #7
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <pvPortMalloc+0xf8>
	__asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	613b      	str	r3, [r7, #16]
}
 80068ac:	bf00      	nop
 80068ae:	e7fe      	b.n	80068ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	1ad2      	subs	r2, r2, r3
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068c2:	69b8      	ldr	r0, [r7, #24]
 80068c4:	f000 f90c 	bl	8006ae0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068c8:	4b1f      	ldr	r3, [pc, #124]	; (8006948 <pvPortMalloc+0x190>)
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	4a1d      	ldr	r2, [pc, #116]	; (8006948 <pvPortMalloc+0x190>)
 80068d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80068d6:	4b1c      	ldr	r3, [pc, #112]	; (8006948 <pvPortMalloc+0x190>)
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	4b1d      	ldr	r3, [pc, #116]	; (8006950 <pvPortMalloc+0x198>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d203      	bcs.n	80068ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068e2:	4b19      	ldr	r3, [pc, #100]	; (8006948 <pvPortMalloc+0x190>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a1a      	ldr	r2, [pc, #104]	; (8006950 <pvPortMalloc+0x198>)
 80068e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	4b15      	ldr	r3, [pc, #84]	; (8006944 <pvPortMalloc+0x18c>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	431a      	orrs	r2, r3
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	2200      	movs	r2, #0
 80068fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80068fe:	4b15      	ldr	r3, [pc, #84]	; (8006954 <pvPortMalloc+0x19c>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3301      	adds	r3, #1
 8006904:	4a13      	ldr	r2, [pc, #76]	; (8006954 <pvPortMalloc+0x19c>)
 8006906:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006908:	f7ff fa26 	bl	8005d58 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8006912:	f7f9 fe51 	bl	80005b8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	f003 0307 	and.w	r3, r3, #7
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00a      	beq.n	8006936 <pvPortMalloc+0x17e>
	__asm volatile
 8006920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	60fb      	str	r3, [r7, #12]
}
 8006932:	bf00      	nop
 8006934:	e7fe      	b.n	8006934 <pvPortMalloc+0x17c>
	return pvReturn;
 8006936:	69fb      	ldr	r3, [r7, #28]
}
 8006938:	4618      	mov	r0, r3
 800693a:	3728      	adds	r7, #40	; 0x28
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	20008738 	.word	0x20008738
 8006944:	2000874c 	.word	0x2000874c
 8006948:	2000873c 	.word	0x2000873c
 800694c:	20008730 	.word	0x20008730
 8006950:	20008740 	.word	0x20008740
 8006954:	20008744 	.word	0x20008744

08006958 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d04d      	beq.n	8006a06 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800696a:	2308      	movs	r3, #8
 800696c:	425b      	negs	r3, r3
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	4413      	add	r3, r2
 8006972:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	4b24      	ldr	r3, [pc, #144]	; (8006a10 <vPortFree+0xb8>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4013      	ands	r3, r2
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10a      	bne.n	800699c <vPortFree+0x44>
	__asm volatile
 8006986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	60fb      	str	r3, [r7, #12]
}
 8006998:	bf00      	nop
 800699a:	e7fe      	b.n	800699a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00a      	beq.n	80069ba <vPortFree+0x62>
	__asm volatile
 80069a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	60bb      	str	r3, [r7, #8]
}
 80069b6:	bf00      	nop
 80069b8:	e7fe      	b.n	80069b8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	4b14      	ldr	r3, [pc, #80]	; (8006a10 <vPortFree+0xb8>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4013      	ands	r3, r2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d01e      	beq.n	8006a06 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d11a      	bne.n	8006a06 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	4b0e      	ldr	r3, [pc, #56]	; (8006a10 <vPortFree+0xb8>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	43db      	mvns	r3, r3
 80069da:	401a      	ands	r2, r3
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80069e0:	f7ff f9ac 	bl	8005d3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	4b0a      	ldr	r3, [pc, #40]	; (8006a14 <vPortFree+0xbc>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4413      	add	r3, r2
 80069ee:	4a09      	ldr	r2, [pc, #36]	; (8006a14 <vPortFree+0xbc>)
 80069f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069f2:	6938      	ldr	r0, [r7, #16]
 80069f4:	f000 f874 	bl	8006ae0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80069f8:	4b07      	ldr	r3, [pc, #28]	; (8006a18 <vPortFree+0xc0>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	3301      	adds	r3, #1
 80069fe:	4a06      	ldr	r2, [pc, #24]	; (8006a18 <vPortFree+0xc0>)
 8006a00:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a02:	f7ff f9a9 	bl	8005d58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a06:	bf00      	nop
 8006a08:	3718      	adds	r7, #24
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	2000874c 	.word	0x2000874c
 8006a14:	2000873c 	.word	0x2000873c
 8006a18:	20008748 	.word	0x20008748

08006a1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a28:	4b27      	ldr	r3, [pc, #156]	; (8006ac8 <prvHeapInit+0xac>)
 8006a2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f003 0307 	and.w	r3, r3, #7
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00c      	beq.n	8006a50 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	3307      	adds	r3, #7
 8006a3a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f023 0307 	bic.w	r3, r3, #7
 8006a42:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	4a1f      	ldr	r2, [pc, #124]	; (8006ac8 <prvHeapInit+0xac>)
 8006a4c:	4413      	add	r3, r2
 8006a4e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a54:	4a1d      	ldr	r2, [pc, #116]	; (8006acc <prvHeapInit+0xb0>)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a5a:	4b1c      	ldr	r3, [pc, #112]	; (8006acc <prvHeapInit+0xb0>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	4413      	add	r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a68:	2208      	movs	r2, #8
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	1a9b      	subs	r3, r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f023 0307 	bic.w	r3, r3, #7
 8006a76:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4a15      	ldr	r2, [pc, #84]	; (8006ad0 <prvHeapInit+0xb4>)
 8006a7c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a7e:	4b14      	ldr	r3, [pc, #80]	; (8006ad0 <prvHeapInit+0xb4>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2200      	movs	r2, #0
 8006a84:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a86:	4b12      	ldr	r3, [pc, #72]	; (8006ad0 <prvHeapInit+0xb4>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	1ad2      	subs	r2, r2, r3
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a9c:	4b0c      	ldr	r3, [pc, #48]	; (8006ad0 <prvHeapInit+0xb4>)
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	4a0a      	ldr	r2, [pc, #40]	; (8006ad4 <prvHeapInit+0xb8>)
 8006aaa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	4a09      	ldr	r2, [pc, #36]	; (8006ad8 <prvHeapInit+0xbc>)
 8006ab2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ab4:	4b09      	ldr	r3, [pc, #36]	; (8006adc <prvHeapInit+0xc0>)
 8006ab6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006aba:	601a      	str	r2, [r3, #0]
}
 8006abc:	bf00      	nop
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	20000730 	.word	0x20000730
 8006acc:	20008730 	.word	0x20008730
 8006ad0:	20008738 	.word	0x20008738
 8006ad4:	20008740 	.word	0x20008740
 8006ad8:	2000873c 	.word	0x2000873c
 8006adc:	2000874c 	.word	0x2000874c

08006ae0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ae8:	4b28      	ldr	r3, [pc, #160]	; (8006b8c <prvInsertBlockIntoFreeList+0xac>)
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	e002      	b.n	8006af4 <prvInsertBlockIntoFreeList+0x14>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d8f7      	bhi.n	8006aee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	4413      	add	r3, r2
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d108      	bne.n	8006b22 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	441a      	add	r2, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	441a      	add	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d118      	bne.n	8006b68 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	4b15      	ldr	r3, [pc, #84]	; (8006b90 <prvInsertBlockIntoFreeList+0xb0>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d00d      	beq.n	8006b5e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685a      	ldr	r2, [r3, #4]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	441a      	add	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	e008      	b.n	8006b70 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b5e:	4b0c      	ldr	r3, [pc, #48]	; (8006b90 <prvInsertBlockIntoFreeList+0xb0>)
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	601a      	str	r2, [r3, #0]
 8006b66:	e003      	b.n	8006b70 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d002      	beq.n	8006b7e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b7e:	bf00      	nop
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	20008730 	.word	0x20008730
 8006b90:	20008738 	.word	0x20008738

08006b94 <__errno>:
 8006b94:	4b01      	ldr	r3, [pc, #4]	; (8006b9c <__errno+0x8>)
 8006b96:	6818      	ldr	r0, [r3, #0]
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	20000010 	.word	0x20000010

08006ba0 <std>:
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	b510      	push	{r4, lr}
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	e9c0 3300 	strd	r3, r3, [r0]
 8006baa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bae:	6083      	str	r3, [r0, #8]
 8006bb0:	8181      	strh	r1, [r0, #12]
 8006bb2:	6643      	str	r3, [r0, #100]	; 0x64
 8006bb4:	81c2      	strh	r2, [r0, #14]
 8006bb6:	6183      	str	r3, [r0, #24]
 8006bb8:	4619      	mov	r1, r3
 8006bba:	2208      	movs	r2, #8
 8006bbc:	305c      	adds	r0, #92	; 0x5c
 8006bbe:	f000 f90c 	bl	8006dda <memset>
 8006bc2:	4b05      	ldr	r3, [pc, #20]	; (8006bd8 <std+0x38>)
 8006bc4:	6263      	str	r3, [r4, #36]	; 0x24
 8006bc6:	4b05      	ldr	r3, [pc, #20]	; (8006bdc <std+0x3c>)
 8006bc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006bca:	4b05      	ldr	r3, [pc, #20]	; (8006be0 <std+0x40>)
 8006bcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006bce:	4b05      	ldr	r3, [pc, #20]	; (8006be4 <std+0x44>)
 8006bd0:	6224      	str	r4, [r4, #32]
 8006bd2:	6323      	str	r3, [r4, #48]	; 0x30
 8006bd4:	bd10      	pop	{r4, pc}
 8006bd6:	bf00      	nop
 8006bd8:	08007039 	.word	0x08007039
 8006bdc:	0800705b 	.word	0x0800705b
 8006be0:	08007093 	.word	0x08007093
 8006be4:	080070b7 	.word	0x080070b7

08006be8 <_cleanup_r>:
 8006be8:	4901      	ldr	r1, [pc, #4]	; (8006bf0 <_cleanup_r+0x8>)
 8006bea:	f000 b8af 	b.w	8006d4c <_fwalk_reent>
 8006bee:	bf00      	nop
 8006bf0:	08007211 	.word	0x08007211

08006bf4 <__sfmoreglue>:
 8006bf4:	b570      	push	{r4, r5, r6, lr}
 8006bf6:	2268      	movs	r2, #104	; 0x68
 8006bf8:	1e4d      	subs	r5, r1, #1
 8006bfa:	4355      	muls	r5, r2
 8006bfc:	460e      	mov	r6, r1
 8006bfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c02:	f000 f913 	bl	8006e2c <_malloc_r>
 8006c06:	4604      	mov	r4, r0
 8006c08:	b140      	cbz	r0, 8006c1c <__sfmoreglue+0x28>
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	e9c0 1600 	strd	r1, r6, [r0]
 8006c10:	300c      	adds	r0, #12
 8006c12:	60a0      	str	r0, [r4, #8]
 8006c14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c18:	f000 f8df 	bl	8006dda <memset>
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	bd70      	pop	{r4, r5, r6, pc}

08006c20 <__sfp_lock_acquire>:
 8006c20:	4801      	ldr	r0, [pc, #4]	; (8006c28 <__sfp_lock_acquire+0x8>)
 8006c22:	f000 b8d8 	b.w	8006dd6 <__retarget_lock_acquire_recursive>
 8006c26:	bf00      	nop
 8006c28:	20008751 	.word	0x20008751

08006c2c <__sfp_lock_release>:
 8006c2c:	4801      	ldr	r0, [pc, #4]	; (8006c34 <__sfp_lock_release+0x8>)
 8006c2e:	f000 b8d3 	b.w	8006dd8 <__retarget_lock_release_recursive>
 8006c32:	bf00      	nop
 8006c34:	20008751 	.word	0x20008751

08006c38 <__sinit_lock_acquire>:
 8006c38:	4801      	ldr	r0, [pc, #4]	; (8006c40 <__sinit_lock_acquire+0x8>)
 8006c3a:	f000 b8cc 	b.w	8006dd6 <__retarget_lock_acquire_recursive>
 8006c3e:	bf00      	nop
 8006c40:	20008752 	.word	0x20008752

08006c44 <__sinit_lock_release>:
 8006c44:	4801      	ldr	r0, [pc, #4]	; (8006c4c <__sinit_lock_release+0x8>)
 8006c46:	f000 b8c7 	b.w	8006dd8 <__retarget_lock_release_recursive>
 8006c4a:	bf00      	nop
 8006c4c:	20008752 	.word	0x20008752

08006c50 <__sinit>:
 8006c50:	b510      	push	{r4, lr}
 8006c52:	4604      	mov	r4, r0
 8006c54:	f7ff fff0 	bl	8006c38 <__sinit_lock_acquire>
 8006c58:	69a3      	ldr	r3, [r4, #24]
 8006c5a:	b11b      	cbz	r3, 8006c64 <__sinit+0x14>
 8006c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c60:	f7ff bff0 	b.w	8006c44 <__sinit_lock_release>
 8006c64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c68:	6523      	str	r3, [r4, #80]	; 0x50
 8006c6a:	4b13      	ldr	r3, [pc, #76]	; (8006cb8 <__sinit+0x68>)
 8006c6c:	4a13      	ldr	r2, [pc, #76]	; (8006cbc <__sinit+0x6c>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c72:	42a3      	cmp	r3, r4
 8006c74:	bf04      	itt	eq
 8006c76:	2301      	moveq	r3, #1
 8006c78:	61a3      	streq	r3, [r4, #24]
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f000 f820 	bl	8006cc0 <__sfp>
 8006c80:	6060      	str	r0, [r4, #4]
 8006c82:	4620      	mov	r0, r4
 8006c84:	f000 f81c 	bl	8006cc0 <__sfp>
 8006c88:	60a0      	str	r0, [r4, #8]
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f000 f818 	bl	8006cc0 <__sfp>
 8006c90:	2200      	movs	r2, #0
 8006c92:	60e0      	str	r0, [r4, #12]
 8006c94:	2104      	movs	r1, #4
 8006c96:	6860      	ldr	r0, [r4, #4]
 8006c98:	f7ff ff82 	bl	8006ba0 <std>
 8006c9c:	68a0      	ldr	r0, [r4, #8]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	2109      	movs	r1, #9
 8006ca2:	f7ff ff7d 	bl	8006ba0 <std>
 8006ca6:	68e0      	ldr	r0, [r4, #12]
 8006ca8:	2202      	movs	r2, #2
 8006caa:	2112      	movs	r1, #18
 8006cac:	f7ff ff78 	bl	8006ba0 <std>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	61a3      	str	r3, [r4, #24]
 8006cb4:	e7d2      	b.n	8006c5c <__sinit+0xc>
 8006cb6:	bf00      	nop
 8006cb8:	08007cb4 	.word	0x08007cb4
 8006cbc:	08006be9 	.word	0x08006be9

08006cc0 <__sfp>:
 8006cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc2:	4607      	mov	r7, r0
 8006cc4:	f7ff ffac 	bl	8006c20 <__sfp_lock_acquire>
 8006cc8:	4b1e      	ldr	r3, [pc, #120]	; (8006d44 <__sfp+0x84>)
 8006cca:	681e      	ldr	r6, [r3, #0]
 8006ccc:	69b3      	ldr	r3, [r6, #24]
 8006cce:	b913      	cbnz	r3, 8006cd6 <__sfp+0x16>
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	f7ff ffbd 	bl	8006c50 <__sinit>
 8006cd6:	3648      	adds	r6, #72	; 0x48
 8006cd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	d503      	bpl.n	8006ce8 <__sfp+0x28>
 8006ce0:	6833      	ldr	r3, [r6, #0]
 8006ce2:	b30b      	cbz	r3, 8006d28 <__sfp+0x68>
 8006ce4:	6836      	ldr	r6, [r6, #0]
 8006ce6:	e7f7      	b.n	8006cd8 <__sfp+0x18>
 8006ce8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006cec:	b9d5      	cbnz	r5, 8006d24 <__sfp+0x64>
 8006cee:	4b16      	ldr	r3, [pc, #88]	; (8006d48 <__sfp+0x88>)
 8006cf0:	60e3      	str	r3, [r4, #12]
 8006cf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006cf6:	6665      	str	r5, [r4, #100]	; 0x64
 8006cf8:	f000 f86c 	bl	8006dd4 <__retarget_lock_init_recursive>
 8006cfc:	f7ff ff96 	bl	8006c2c <__sfp_lock_release>
 8006d00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d08:	6025      	str	r5, [r4, #0]
 8006d0a:	61a5      	str	r5, [r4, #24]
 8006d0c:	2208      	movs	r2, #8
 8006d0e:	4629      	mov	r1, r5
 8006d10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d14:	f000 f861 	bl	8006dda <memset>
 8006d18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d20:	4620      	mov	r0, r4
 8006d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d24:	3468      	adds	r4, #104	; 0x68
 8006d26:	e7d9      	b.n	8006cdc <__sfp+0x1c>
 8006d28:	2104      	movs	r1, #4
 8006d2a:	4638      	mov	r0, r7
 8006d2c:	f7ff ff62 	bl	8006bf4 <__sfmoreglue>
 8006d30:	4604      	mov	r4, r0
 8006d32:	6030      	str	r0, [r6, #0]
 8006d34:	2800      	cmp	r0, #0
 8006d36:	d1d5      	bne.n	8006ce4 <__sfp+0x24>
 8006d38:	f7ff ff78 	bl	8006c2c <__sfp_lock_release>
 8006d3c:	230c      	movs	r3, #12
 8006d3e:	603b      	str	r3, [r7, #0]
 8006d40:	e7ee      	b.n	8006d20 <__sfp+0x60>
 8006d42:	bf00      	nop
 8006d44:	08007cb4 	.word	0x08007cb4
 8006d48:	ffff0001 	.word	0xffff0001

08006d4c <_fwalk_reent>:
 8006d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d50:	4606      	mov	r6, r0
 8006d52:	4688      	mov	r8, r1
 8006d54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d58:	2700      	movs	r7, #0
 8006d5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d5e:	f1b9 0901 	subs.w	r9, r9, #1
 8006d62:	d505      	bpl.n	8006d70 <_fwalk_reent+0x24>
 8006d64:	6824      	ldr	r4, [r4, #0]
 8006d66:	2c00      	cmp	r4, #0
 8006d68:	d1f7      	bne.n	8006d5a <_fwalk_reent+0xe>
 8006d6a:	4638      	mov	r0, r7
 8006d6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d70:	89ab      	ldrh	r3, [r5, #12]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d907      	bls.n	8006d86 <_fwalk_reent+0x3a>
 8006d76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	d003      	beq.n	8006d86 <_fwalk_reent+0x3a>
 8006d7e:	4629      	mov	r1, r5
 8006d80:	4630      	mov	r0, r6
 8006d82:	47c0      	blx	r8
 8006d84:	4307      	orrs	r7, r0
 8006d86:	3568      	adds	r5, #104	; 0x68
 8006d88:	e7e9      	b.n	8006d5e <_fwalk_reent+0x12>
	...

08006d8c <__libc_init_array>:
 8006d8c:	b570      	push	{r4, r5, r6, lr}
 8006d8e:	4d0d      	ldr	r5, [pc, #52]	; (8006dc4 <__libc_init_array+0x38>)
 8006d90:	4c0d      	ldr	r4, [pc, #52]	; (8006dc8 <__libc_init_array+0x3c>)
 8006d92:	1b64      	subs	r4, r4, r5
 8006d94:	10a4      	asrs	r4, r4, #2
 8006d96:	2600      	movs	r6, #0
 8006d98:	42a6      	cmp	r6, r4
 8006d9a:	d109      	bne.n	8006db0 <__libc_init_array+0x24>
 8006d9c:	4d0b      	ldr	r5, [pc, #44]	; (8006dcc <__libc_init_array+0x40>)
 8006d9e:	4c0c      	ldr	r4, [pc, #48]	; (8006dd0 <__libc_init_array+0x44>)
 8006da0:	f000 ff24 	bl	8007bec <_init>
 8006da4:	1b64      	subs	r4, r4, r5
 8006da6:	10a4      	asrs	r4, r4, #2
 8006da8:	2600      	movs	r6, #0
 8006daa:	42a6      	cmp	r6, r4
 8006dac:	d105      	bne.n	8006dba <__libc_init_array+0x2e>
 8006dae:	bd70      	pop	{r4, r5, r6, pc}
 8006db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006db4:	4798      	blx	r3
 8006db6:	3601      	adds	r6, #1
 8006db8:	e7ee      	b.n	8006d98 <__libc_init_array+0xc>
 8006dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dbe:	4798      	blx	r3
 8006dc0:	3601      	adds	r6, #1
 8006dc2:	e7f2      	b.n	8006daa <__libc_init_array+0x1e>
 8006dc4:	08007cf4 	.word	0x08007cf4
 8006dc8:	08007cf4 	.word	0x08007cf4
 8006dcc:	08007cf4 	.word	0x08007cf4
 8006dd0:	08007cf8 	.word	0x08007cf8

08006dd4 <__retarget_lock_init_recursive>:
 8006dd4:	4770      	bx	lr

08006dd6 <__retarget_lock_acquire_recursive>:
 8006dd6:	4770      	bx	lr

08006dd8 <__retarget_lock_release_recursive>:
 8006dd8:	4770      	bx	lr

08006dda <memset>:
 8006dda:	4402      	add	r2, r0
 8006ddc:	4603      	mov	r3, r0
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d100      	bne.n	8006de4 <memset+0xa>
 8006de2:	4770      	bx	lr
 8006de4:	f803 1b01 	strb.w	r1, [r3], #1
 8006de8:	e7f9      	b.n	8006dde <memset+0x4>
	...

08006dec <sbrk_aligned>:
 8006dec:	b570      	push	{r4, r5, r6, lr}
 8006dee:	4e0e      	ldr	r6, [pc, #56]	; (8006e28 <sbrk_aligned+0x3c>)
 8006df0:	460c      	mov	r4, r1
 8006df2:	6831      	ldr	r1, [r6, #0]
 8006df4:	4605      	mov	r5, r0
 8006df6:	b911      	cbnz	r1, 8006dfe <sbrk_aligned+0x12>
 8006df8:	f000 f90e 	bl	8007018 <_sbrk_r>
 8006dfc:	6030      	str	r0, [r6, #0]
 8006dfe:	4621      	mov	r1, r4
 8006e00:	4628      	mov	r0, r5
 8006e02:	f000 f909 	bl	8007018 <_sbrk_r>
 8006e06:	1c43      	adds	r3, r0, #1
 8006e08:	d00a      	beq.n	8006e20 <sbrk_aligned+0x34>
 8006e0a:	1cc4      	adds	r4, r0, #3
 8006e0c:	f024 0403 	bic.w	r4, r4, #3
 8006e10:	42a0      	cmp	r0, r4
 8006e12:	d007      	beq.n	8006e24 <sbrk_aligned+0x38>
 8006e14:	1a21      	subs	r1, r4, r0
 8006e16:	4628      	mov	r0, r5
 8006e18:	f000 f8fe 	bl	8007018 <_sbrk_r>
 8006e1c:	3001      	adds	r0, #1
 8006e1e:	d101      	bne.n	8006e24 <sbrk_aligned+0x38>
 8006e20:	f04f 34ff 	mov.w	r4, #4294967295
 8006e24:	4620      	mov	r0, r4
 8006e26:	bd70      	pop	{r4, r5, r6, pc}
 8006e28:	20008758 	.word	0x20008758

08006e2c <_malloc_r>:
 8006e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e30:	1ccd      	adds	r5, r1, #3
 8006e32:	f025 0503 	bic.w	r5, r5, #3
 8006e36:	3508      	adds	r5, #8
 8006e38:	2d0c      	cmp	r5, #12
 8006e3a:	bf38      	it	cc
 8006e3c:	250c      	movcc	r5, #12
 8006e3e:	2d00      	cmp	r5, #0
 8006e40:	4607      	mov	r7, r0
 8006e42:	db01      	blt.n	8006e48 <_malloc_r+0x1c>
 8006e44:	42a9      	cmp	r1, r5
 8006e46:	d905      	bls.n	8006e54 <_malloc_r+0x28>
 8006e48:	230c      	movs	r3, #12
 8006e4a:	603b      	str	r3, [r7, #0]
 8006e4c:	2600      	movs	r6, #0
 8006e4e:	4630      	mov	r0, r6
 8006e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e54:	4e2e      	ldr	r6, [pc, #184]	; (8006f10 <_malloc_r+0xe4>)
 8006e56:	f000 fa29 	bl	80072ac <__malloc_lock>
 8006e5a:	6833      	ldr	r3, [r6, #0]
 8006e5c:	461c      	mov	r4, r3
 8006e5e:	bb34      	cbnz	r4, 8006eae <_malloc_r+0x82>
 8006e60:	4629      	mov	r1, r5
 8006e62:	4638      	mov	r0, r7
 8006e64:	f7ff ffc2 	bl	8006dec <sbrk_aligned>
 8006e68:	1c43      	adds	r3, r0, #1
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	d14d      	bne.n	8006f0a <_malloc_r+0xde>
 8006e6e:	6834      	ldr	r4, [r6, #0]
 8006e70:	4626      	mov	r6, r4
 8006e72:	2e00      	cmp	r6, #0
 8006e74:	d140      	bne.n	8006ef8 <_malloc_r+0xcc>
 8006e76:	6823      	ldr	r3, [r4, #0]
 8006e78:	4631      	mov	r1, r6
 8006e7a:	4638      	mov	r0, r7
 8006e7c:	eb04 0803 	add.w	r8, r4, r3
 8006e80:	f000 f8ca 	bl	8007018 <_sbrk_r>
 8006e84:	4580      	cmp	r8, r0
 8006e86:	d13a      	bne.n	8006efe <_malloc_r+0xd2>
 8006e88:	6821      	ldr	r1, [r4, #0]
 8006e8a:	3503      	adds	r5, #3
 8006e8c:	1a6d      	subs	r5, r5, r1
 8006e8e:	f025 0503 	bic.w	r5, r5, #3
 8006e92:	3508      	adds	r5, #8
 8006e94:	2d0c      	cmp	r5, #12
 8006e96:	bf38      	it	cc
 8006e98:	250c      	movcc	r5, #12
 8006e9a:	4629      	mov	r1, r5
 8006e9c:	4638      	mov	r0, r7
 8006e9e:	f7ff ffa5 	bl	8006dec <sbrk_aligned>
 8006ea2:	3001      	adds	r0, #1
 8006ea4:	d02b      	beq.n	8006efe <_malloc_r+0xd2>
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	442b      	add	r3, r5
 8006eaa:	6023      	str	r3, [r4, #0]
 8006eac:	e00e      	b.n	8006ecc <_malloc_r+0xa0>
 8006eae:	6822      	ldr	r2, [r4, #0]
 8006eb0:	1b52      	subs	r2, r2, r5
 8006eb2:	d41e      	bmi.n	8006ef2 <_malloc_r+0xc6>
 8006eb4:	2a0b      	cmp	r2, #11
 8006eb6:	d916      	bls.n	8006ee6 <_malloc_r+0xba>
 8006eb8:	1961      	adds	r1, r4, r5
 8006eba:	42a3      	cmp	r3, r4
 8006ebc:	6025      	str	r5, [r4, #0]
 8006ebe:	bf18      	it	ne
 8006ec0:	6059      	strne	r1, [r3, #4]
 8006ec2:	6863      	ldr	r3, [r4, #4]
 8006ec4:	bf08      	it	eq
 8006ec6:	6031      	streq	r1, [r6, #0]
 8006ec8:	5162      	str	r2, [r4, r5]
 8006eca:	604b      	str	r3, [r1, #4]
 8006ecc:	4638      	mov	r0, r7
 8006ece:	f104 060b 	add.w	r6, r4, #11
 8006ed2:	f000 f9f1 	bl	80072b8 <__malloc_unlock>
 8006ed6:	f026 0607 	bic.w	r6, r6, #7
 8006eda:	1d23      	adds	r3, r4, #4
 8006edc:	1af2      	subs	r2, r6, r3
 8006ede:	d0b6      	beq.n	8006e4e <_malloc_r+0x22>
 8006ee0:	1b9b      	subs	r3, r3, r6
 8006ee2:	50a3      	str	r3, [r4, r2]
 8006ee4:	e7b3      	b.n	8006e4e <_malloc_r+0x22>
 8006ee6:	6862      	ldr	r2, [r4, #4]
 8006ee8:	42a3      	cmp	r3, r4
 8006eea:	bf0c      	ite	eq
 8006eec:	6032      	streq	r2, [r6, #0]
 8006eee:	605a      	strne	r2, [r3, #4]
 8006ef0:	e7ec      	b.n	8006ecc <_malloc_r+0xa0>
 8006ef2:	4623      	mov	r3, r4
 8006ef4:	6864      	ldr	r4, [r4, #4]
 8006ef6:	e7b2      	b.n	8006e5e <_malloc_r+0x32>
 8006ef8:	4634      	mov	r4, r6
 8006efa:	6876      	ldr	r6, [r6, #4]
 8006efc:	e7b9      	b.n	8006e72 <_malloc_r+0x46>
 8006efe:	230c      	movs	r3, #12
 8006f00:	603b      	str	r3, [r7, #0]
 8006f02:	4638      	mov	r0, r7
 8006f04:	f000 f9d8 	bl	80072b8 <__malloc_unlock>
 8006f08:	e7a1      	b.n	8006e4e <_malloc_r+0x22>
 8006f0a:	6025      	str	r5, [r4, #0]
 8006f0c:	e7de      	b.n	8006ecc <_malloc_r+0xa0>
 8006f0e:	bf00      	nop
 8006f10:	20008754 	.word	0x20008754

08006f14 <iprintf>:
 8006f14:	b40f      	push	{r0, r1, r2, r3}
 8006f16:	4b0a      	ldr	r3, [pc, #40]	; (8006f40 <iprintf+0x2c>)
 8006f18:	b513      	push	{r0, r1, r4, lr}
 8006f1a:	681c      	ldr	r4, [r3, #0]
 8006f1c:	b124      	cbz	r4, 8006f28 <iprintf+0x14>
 8006f1e:	69a3      	ldr	r3, [r4, #24]
 8006f20:	b913      	cbnz	r3, 8006f28 <iprintf+0x14>
 8006f22:	4620      	mov	r0, r4
 8006f24:	f7ff fe94 	bl	8006c50 <__sinit>
 8006f28:	ab05      	add	r3, sp, #20
 8006f2a:	9a04      	ldr	r2, [sp, #16]
 8006f2c:	68a1      	ldr	r1, [r4, #8]
 8006f2e:	9301      	str	r3, [sp, #4]
 8006f30:	4620      	mov	r0, r4
 8006f32:	f000 fa3d 	bl	80073b0 <_vfiprintf_r>
 8006f36:	b002      	add	sp, #8
 8006f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f3c:	b004      	add	sp, #16
 8006f3e:	4770      	bx	lr
 8006f40:	20000010 	.word	0x20000010

08006f44 <cleanup_glue>:
 8006f44:	b538      	push	{r3, r4, r5, lr}
 8006f46:	460c      	mov	r4, r1
 8006f48:	6809      	ldr	r1, [r1, #0]
 8006f4a:	4605      	mov	r5, r0
 8006f4c:	b109      	cbz	r1, 8006f52 <cleanup_glue+0xe>
 8006f4e:	f7ff fff9 	bl	8006f44 <cleanup_glue>
 8006f52:	4621      	mov	r1, r4
 8006f54:	4628      	mov	r0, r5
 8006f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f5a:	f000 b9b3 	b.w	80072c4 <_free_r>
	...

08006f60 <_reclaim_reent>:
 8006f60:	4b2c      	ldr	r3, [pc, #176]	; (8007014 <_reclaim_reent+0xb4>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4283      	cmp	r3, r0
 8006f66:	b570      	push	{r4, r5, r6, lr}
 8006f68:	4604      	mov	r4, r0
 8006f6a:	d051      	beq.n	8007010 <_reclaim_reent+0xb0>
 8006f6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006f6e:	b143      	cbz	r3, 8006f82 <_reclaim_reent+0x22>
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d14a      	bne.n	800700c <_reclaim_reent+0xac>
 8006f76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f78:	6819      	ldr	r1, [r3, #0]
 8006f7a:	b111      	cbz	r1, 8006f82 <_reclaim_reent+0x22>
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	f000 f9a1 	bl	80072c4 <_free_r>
 8006f82:	6961      	ldr	r1, [r4, #20]
 8006f84:	b111      	cbz	r1, 8006f8c <_reclaim_reent+0x2c>
 8006f86:	4620      	mov	r0, r4
 8006f88:	f000 f99c 	bl	80072c4 <_free_r>
 8006f8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006f8e:	b111      	cbz	r1, 8006f96 <_reclaim_reent+0x36>
 8006f90:	4620      	mov	r0, r4
 8006f92:	f000 f997 	bl	80072c4 <_free_r>
 8006f96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006f98:	b111      	cbz	r1, 8006fa0 <_reclaim_reent+0x40>
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	f000 f992 	bl	80072c4 <_free_r>
 8006fa0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006fa2:	b111      	cbz	r1, 8006faa <_reclaim_reent+0x4a>
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	f000 f98d 	bl	80072c4 <_free_r>
 8006faa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006fac:	b111      	cbz	r1, 8006fb4 <_reclaim_reent+0x54>
 8006fae:	4620      	mov	r0, r4
 8006fb0:	f000 f988 	bl	80072c4 <_free_r>
 8006fb4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006fb6:	b111      	cbz	r1, 8006fbe <_reclaim_reent+0x5e>
 8006fb8:	4620      	mov	r0, r4
 8006fba:	f000 f983 	bl	80072c4 <_free_r>
 8006fbe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006fc0:	b111      	cbz	r1, 8006fc8 <_reclaim_reent+0x68>
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f000 f97e 	bl	80072c4 <_free_r>
 8006fc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fca:	b111      	cbz	r1, 8006fd2 <_reclaim_reent+0x72>
 8006fcc:	4620      	mov	r0, r4
 8006fce:	f000 f979 	bl	80072c4 <_free_r>
 8006fd2:	69a3      	ldr	r3, [r4, #24]
 8006fd4:	b1e3      	cbz	r3, 8007010 <_reclaim_reent+0xb0>
 8006fd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006fd8:	4620      	mov	r0, r4
 8006fda:	4798      	blx	r3
 8006fdc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006fde:	b1b9      	cbz	r1, 8007010 <_reclaim_reent+0xb0>
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006fe6:	f7ff bfad 	b.w	8006f44 <cleanup_glue>
 8006fea:	5949      	ldr	r1, [r1, r5]
 8006fec:	b941      	cbnz	r1, 8007000 <_reclaim_reent+0xa0>
 8006fee:	3504      	adds	r5, #4
 8006ff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ff2:	2d80      	cmp	r5, #128	; 0x80
 8006ff4:	68d9      	ldr	r1, [r3, #12]
 8006ff6:	d1f8      	bne.n	8006fea <_reclaim_reent+0x8a>
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	f000 f963 	bl	80072c4 <_free_r>
 8006ffe:	e7ba      	b.n	8006f76 <_reclaim_reent+0x16>
 8007000:	680e      	ldr	r6, [r1, #0]
 8007002:	4620      	mov	r0, r4
 8007004:	f000 f95e 	bl	80072c4 <_free_r>
 8007008:	4631      	mov	r1, r6
 800700a:	e7ef      	b.n	8006fec <_reclaim_reent+0x8c>
 800700c:	2500      	movs	r5, #0
 800700e:	e7ef      	b.n	8006ff0 <_reclaim_reent+0x90>
 8007010:	bd70      	pop	{r4, r5, r6, pc}
 8007012:	bf00      	nop
 8007014:	20000010 	.word	0x20000010

08007018 <_sbrk_r>:
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	4d06      	ldr	r5, [pc, #24]	; (8007034 <_sbrk_r+0x1c>)
 800701c:	2300      	movs	r3, #0
 800701e:	4604      	mov	r4, r0
 8007020:	4608      	mov	r0, r1
 8007022:	602b      	str	r3, [r5, #0]
 8007024:	f7fa fb42 	bl	80016ac <_sbrk>
 8007028:	1c43      	adds	r3, r0, #1
 800702a:	d102      	bne.n	8007032 <_sbrk_r+0x1a>
 800702c:	682b      	ldr	r3, [r5, #0]
 800702e:	b103      	cbz	r3, 8007032 <_sbrk_r+0x1a>
 8007030:	6023      	str	r3, [r4, #0]
 8007032:	bd38      	pop	{r3, r4, r5, pc}
 8007034:	2000875c 	.word	0x2000875c

08007038 <__sread>:
 8007038:	b510      	push	{r4, lr}
 800703a:	460c      	mov	r4, r1
 800703c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007040:	f000 fc7a 	bl	8007938 <_read_r>
 8007044:	2800      	cmp	r0, #0
 8007046:	bfab      	itete	ge
 8007048:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800704a:	89a3      	ldrhlt	r3, [r4, #12]
 800704c:	181b      	addge	r3, r3, r0
 800704e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007052:	bfac      	ite	ge
 8007054:	6563      	strge	r3, [r4, #84]	; 0x54
 8007056:	81a3      	strhlt	r3, [r4, #12]
 8007058:	bd10      	pop	{r4, pc}

0800705a <__swrite>:
 800705a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800705e:	461f      	mov	r7, r3
 8007060:	898b      	ldrh	r3, [r1, #12]
 8007062:	05db      	lsls	r3, r3, #23
 8007064:	4605      	mov	r5, r0
 8007066:	460c      	mov	r4, r1
 8007068:	4616      	mov	r6, r2
 800706a:	d505      	bpl.n	8007078 <__swrite+0x1e>
 800706c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007070:	2302      	movs	r3, #2
 8007072:	2200      	movs	r2, #0
 8007074:	f000 f908 	bl	8007288 <_lseek_r>
 8007078:	89a3      	ldrh	r3, [r4, #12]
 800707a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800707e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007082:	81a3      	strh	r3, [r4, #12]
 8007084:	4632      	mov	r2, r6
 8007086:	463b      	mov	r3, r7
 8007088:	4628      	mov	r0, r5
 800708a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800708e:	f000 b817 	b.w	80070c0 <_write_r>

08007092 <__sseek>:
 8007092:	b510      	push	{r4, lr}
 8007094:	460c      	mov	r4, r1
 8007096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800709a:	f000 f8f5 	bl	8007288 <_lseek_r>
 800709e:	1c43      	adds	r3, r0, #1
 80070a0:	89a3      	ldrh	r3, [r4, #12]
 80070a2:	bf15      	itete	ne
 80070a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80070a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070ae:	81a3      	strheq	r3, [r4, #12]
 80070b0:	bf18      	it	ne
 80070b2:	81a3      	strhne	r3, [r4, #12]
 80070b4:	bd10      	pop	{r4, pc}

080070b6 <__sclose>:
 80070b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070ba:	f000 b813 	b.w	80070e4 <_close_r>
	...

080070c0 <_write_r>:
 80070c0:	b538      	push	{r3, r4, r5, lr}
 80070c2:	4d07      	ldr	r5, [pc, #28]	; (80070e0 <_write_r+0x20>)
 80070c4:	4604      	mov	r4, r0
 80070c6:	4608      	mov	r0, r1
 80070c8:	4611      	mov	r1, r2
 80070ca:	2200      	movs	r2, #0
 80070cc:	602a      	str	r2, [r5, #0]
 80070ce:	461a      	mov	r2, r3
 80070d0:	f7f9 fe68 	bl	8000da4 <_write>
 80070d4:	1c43      	adds	r3, r0, #1
 80070d6:	d102      	bne.n	80070de <_write_r+0x1e>
 80070d8:	682b      	ldr	r3, [r5, #0]
 80070da:	b103      	cbz	r3, 80070de <_write_r+0x1e>
 80070dc:	6023      	str	r3, [r4, #0]
 80070de:	bd38      	pop	{r3, r4, r5, pc}
 80070e0:	2000875c 	.word	0x2000875c

080070e4 <_close_r>:
 80070e4:	b538      	push	{r3, r4, r5, lr}
 80070e6:	4d06      	ldr	r5, [pc, #24]	; (8007100 <_close_r+0x1c>)
 80070e8:	2300      	movs	r3, #0
 80070ea:	4604      	mov	r4, r0
 80070ec:	4608      	mov	r0, r1
 80070ee:	602b      	str	r3, [r5, #0]
 80070f0:	f7fa faa7 	bl	8001642 <_close>
 80070f4:	1c43      	adds	r3, r0, #1
 80070f6:	d102      	bne.n	80070fe <_close_r+0x1a>
 80070f8:	682b      	ldr	r3, [r5, #0]
 80070fa:	b103      	cbz	r3, 80070fe <_close_r+0x1a>
 80070fc:	6023      	str	r3, [r4, #0]
 80070fe:	bd38      	pop	{r3, r4, r5, pc}
 8007100:	2000875c 	.word	0x2000875c

08007104 <__sflush_r>:
 8007104:	898a      	ldrh	r2, [r1, #12]
 8007106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800710a:	4605      	mov	r5, r0
 800710c:	0710      	lsls	r0, r2, #28
 800710e:	460c      	mov	r4, r1
 8007110:	d458      	bmi.n	80071c4 <__sflush_r+0xc0>
 8007112:	684b      	ldr	r3, [r1, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	dc05      	bgt.n	8007124 <__sflush_r+0x20>
 8007118:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800711a:	2b00      	cmp	r3, #0
 800711c:	dc02      	bgt.n	8007124 <__sflush_r+0x20>
 800711e:	2000      	movs	r0, #0
 8007120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007124:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007126:	2e00      	cmp	r6, #0
 8007128:	d0f9      	beq.n	800711e <__sflush_r+0x1a>
 800712a:	2300      	movs	r3, #0
 800712c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007130:	682f      	ldr	r7, [r5, #0]
 8007132:	602b      	str	r3, [r5, #0]
 8007134:	d032      	beq.n	800719c <__sflush_r+0x98>
 8007136:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007138:	89a3      	ldrh	r3, [r4, #12]
 800713a:	075a      	lsls	r2, r3, #29
 800713c:	d505      	bpl.n	800714a <__sflush_r+0x46>
 800713e:	6863      	ldr	r3, [r4, #4]
 8007140:	1ac0      	subs	r0, r0, r3
 8007142:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007144:	b10b      	cbz	r3, 800714a <__sflush_r+0x46>
 8007146:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007148:	1ac0      	subs	r0, r0, r3
 800714a:	2300      	movs	r3, #0
 800714c:	4602      	mov	r2, r0
 800714e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007150:	6a21      	ldr	r1, [r4, #32]
 8007152:	4628      	mov	r0, r5
 8007154:	47b0      	blx	r6
 8007156:	1c43      	adds	r3, r0, #1
 8007158:	89a3      	ldrh	r3, [r4, #12]
 800715a:	d106      	bne.n	800716a <__sflush_r+0x66>
 800715c:	6829      	ldr	r1, [r5, #0]
 800715e:	291d      	cmp	r1, #29
 8007160:	d82c      	bhi.n	80071bc <__sflush_r+0xb8>
 8007162:	4a2a      	ldr	r2, [pc, #168]	; (800720c <__sflush_r+0x108>)
 8007164:	40ca      	lsrs	r2, r1
 8007166:	07d6      	lsls	r6, r2, #31
 8007168:	d528      	bpl.n	80071bc <__sflush_r+0xb8>
 800716a:	2200      	movs	r2, #0
 800716c:	6062      	str	r2, [r4, #4]
 800716e:	04d9      	lsls	r1, r3, #19
 8007170:	6922      	ldr	r2, [r4, #16]
 8007172:	6022      	str	r2, [r4, #0]
 8007174:	d504      	bpl.n	8007180 <__sflush_r+0x7c>
 8007176:	1c42      	adds	r2, r0, #1
 8007178:	d101      	bne.n	800717e <__sflush_r+0x7a>
 800717a:	682b      	ldr	r3, [r5, #0]
 800717c:	b903      	cbnz	r3, 8007180 <__sflush_r+0x7c>
 800717e:	6560      	str	r0, [r4, #84]	; 0x54
 8007180:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007182:	602f      	str	r7, [r5, #0]
 8007184:	2900      	cmp	r1, #0
 8007186:	d0ca      	beq.n	800711e <__sflush_r+0x1a>
 8007188:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800718c:	4299      	cmp	r1, r3
 800718e:	d002      	beq.n	8007196 <__sflush_r+0x92>
 8007190:	4628      	mov	r0, r5
 8007192:	f000 f897 	bl	80072c4 <_free_r>
 8007196:	2000      	movs	r0, #0
 8007198:	6360      	str	r0, [r4, #52]	; 0x34
 800719a:	e7c1      	b.n	8007120 <__sflush_r+0x1c>
 800719c:	6a21      	ldr	r1, [r4, #32]
 800719e:	2301      	movs	r3, #1
 80071a0:	4628      	mov	r0, r5
 80071a2:	47b0      	blx	r6
 80071a4:	1c41      	adds	r1, r0, #1
 80071a6:	d1c7      	bne.n	8007138 <__sflush_r+0x34>
 80071a8:	682b      	ldr	r3, [r5, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d0c4      	beq.n	8007138 <__sflush_r+0x34>
 80071ae:	2b1d      	cmp	r3, #29
 80071b0:	d001      	beq.n	80071b6 <__sflush_r+0xb2>
 80071b2:	2b16      	cmp	r3, #22
 80071b4:	d101      	bne.n	80071ba <__sflush_r+0xb6>
 80071b6:	602f      	str	r7, [r5, #0]
 80071b8:	e7b1      	b.n	800711e <__sflush_r+0x1a>
 80071ba:	89a3      	ldrh	r3, [r4, #12]
 80071bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071c0:	81a3      	strh	r3, [r4, #12]
 80071c2:	e7ad      	b.n	8007120 <__sflush_r+0x1c>
 80071c4:	690f      	ldr	r7, [r1, #16]
 80071c6:	2f00      	cmp	r7, #0
 80071c8:	d0a9      	beq.n	800711e <__sflush_r+0x1a>
 80071ca:	0793      	lsls	r3, r2, #30
 80071cc:	680e      	ldr	r6, [r1, #0]
 80071ce:	bf08      	it	eq
 80071d0:	694b      	ldreq	r3, [r1, #20]
 80071d2:	600f      	str	r7, [r1, #0]
 80071d4:	bf18      	it	ne
 80071d6:	2300      	movne	r3, #0
 80071d8:	eba6 0807 	sub.w	r8, r6, r7
 80071dc:	608b      	str	r3, [r1, #8]
 80071de:	f1b8 0f00 	cmp.w	r8, #0
 80071e2:	dd9c      	ble.n	800711e <__sflush_r+0x1a>
 80071e4:	6a21      	ldr	r1, [r4, #32]
 80071e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80071e8:	4643      	mov	r3, r8
 80071ea:	463a      	mov	r2, r7
 80071ec:	4628      	mov	r0, r5
 80071ee:	47b0      	blx	r6
 80071f0:	2800      	cmp	r0, #0
 80071f2:	dc06      	bgt.n	8007202 <__sflush_r+0xfe>
 80071f4:	89a3      	ldrh	r3, [r4, #12]
 80071f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071fa:	81a3      	strh	r3, [r4, #12]
 80071fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007200:	e78e      	b.n	8007120 <__sflush_r+0x1c>
 8007202:	4407      	add	r7, r0
 8007204:	eba8 0800 	sub.w	r8, r8, r0
 8007208:	e7e9      	b.n	80071de <__sflush_r+0xda>
 800720a:	bf00      	nop
 800720c:	20400001 	.word	0x20400001

08007210 <_fflush_r>:
 8007210:	b538      	push	{r3, r4, r5, lr}
 8007212:	690b      	ldr	r3, [r1, #16]
 8007214:	4605      	mov	r5, r0
 8007216:	460c      	mov	r4, r1
 8007218:	b913      	cbnz	r3, 8007220 <_fflush_r+0x10>
 800721a:	2500      	movs	r5, #0
 800721c:	4628      	mov	r0, r5
 800721e:	bd38      	pop	{r3, r4, r5, pc}
 8007220:	b118      	cbz	r0, 800722a <_fflush_r+0x1a>
 8007222:	6983      	ldr	r3, [r0, #24]
 8007224:	b90b      	cbnz	r3, 800722a <_fflush_r+0x1a>
 8007226:	f7ff fd13 	bl	8006c50 <__sinit>
 800722a:	4b14      	ldr	r3, [pc, #80]	; (800727c <_fflush_r+0x6c>)
 800722c:	429c      	cmp	r4, r3
 800722e:	d11b      	bne.n	8007268 <_fflush_r+0x58>
 8007230:	686c      	ldr	r4, [r5, #4]
 8007232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d0ef      	beq.n	800721a <_fflush_r+0xa>
 800723a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800723c:	07d0      	lsls	r0, r2, #31
 800723e:	d404      	bmi.n	800724a <_fflush_r+0x3a>
 8007240:	0599      	lsls	r1, r3, #22
 8007242:	d402      	bmi.n	800724a <_fflush_r+0x3a>
 8007244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007246:	f7ff fdc6 	bl	8006dd6 <__retarget_lock_acquire_recursive>
 800724a:	4628      	mov	r0, r5
 800724c:	4621      	mov	r1, r4
 800724e:	f7ff ff59 	bl	8007104 <__sflush_r>
 8007252:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007254:	07da      	lsls	r2, r3, #31
 8007256:	4605      	mov	r5, r0
 8007258:	d4e0      	bmi.n	800721c <_fflush_r+0xc>
 800725a:	89a3      	ldrh	r3, [r4, #12]
 800725c:	059b      	lsls	r3, r3, #22
 800725e:	d4dd      	bmi.n	800721c <_fflush_r+0xc>
 8007260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007262:	f7ff fdb9 	bl	8006dd8 <__retarget_lock_release_recursive>
 8007266:	e7d9      	b.n	800721c <_fflush_r+0xc>
 8007268:	4b05      	ldr	r3, [pc, #20]	; (8007280 <_fflush_r+0x70>)
 800726a:	429c      	cmp	r4, r3
 800726c:	d101      	bne.n	8007272 <_fflush_r+0x62>
 800726e:	68ac      	ldr	r4, [r5, #8]
 8007270:	e7df      	b.n	8007232 <_fflush_r+0x22>
 8007272:	4b04      	ldr	r3, [pc, #16]	; (8007284 <_fflush_r+0x74>)
 8007274:	429c      	cmp	r4, r3
 8007276:	bf08      	it	eq
 8007278:	68ec      	ldreq	r4, [r5, #12]
 800727a:	e7da      	b.n	8007232 <_fflush_r+0x22>
 800727c:	08007c74 	.word	0x08007c74
 8007280:	08007c94 	.word	0x08007c94
 8007284:	08007c54 	.word	0x08007c54

08007288 <_lseek_r>:
 8007288:	b538      	push	{r3, r4, r5, lr}
 800728a:	4d07      	ldr	r5, [pc, #28]	; (80072a8 <_lseek_r+0x20>)
 800728c:	4604      	mov	r4, r0
 800728e:	4608      	mov	r0, r1
 8007290:	4611      	mov	r1, r2
 8007292:	2200      	movs	r2, #0
 8007294:	602a      	str	r2, [r5, #0]
 8007296:	461a      	mov	r2, r3
 8007298:	f7fa f9fa 	bl	8001690 <_lseek>
 800729c:	1c43      	adds	r3, r0, #1
 800729e:	d102      	bne.n	80072a6 <_lseek_r+0x1e>
 80072a0:	682b      	ldr	r3, [r5, #0]
 80072a2:	b103      	cbz	r3, 80072a6 <_lseek_r+0x1e>
 80072a4:	6023      	str	r3, [r4, #0]
 80072a6:	bd38      	pop	{r3, r4, r5, pc}
 80072a8:	2000875c 	.word	0x2000875c

080072ac <__malloc_lock>:
 80072ac:	4801      	ldr	r0, [pc, #4]	; (80072b4 <__malloc_lock+0x8>)
 80072ae:	f7ff bd92 	b.w	8006dd6 <__retarget_lock_acquire_recursive>
 80072b2:	bf00      	nop
 80072b4:	20008750 	.word	0x20008750

080072b8 <__malloc_unlock>:
 80072b8:	4801      	ldr	r0, [pc, #4]	; (80072c0 <__malloc_unlock+0x8>)
 80072ba:	f7ff bd8d 	b.w	8006dd8 <__retarget_lock_release_recursive>
 80072be:	bf00      	nop
 80072c0:	20008750 	.word	0x20008750

080072c4 <_free_r>:
 80072c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072c6:	2900      	cmp	r1, #0
 80072c8:	d044      	beq.n	8007354 <_free_r+0x90>
 80072ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072ce:	9001      	str	r0, [sp, #4]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f1a1 0404 	sub.w	r4, r1, #4
 80072d6:	bfb8      	it	lt
 80072d8:	18e4      	addlt	r4, r4, r3
 80072da:	f7ff ffe7 	bl	80072ac <__malloc_lock>
 80072de:	4a1e      	ldr	r2, [pc, #120]	; (8007358 <_free_r+0x94>)
 80072e0:	9801      	ldr	r0, [sp, #4]
 80072e2:	6813      	ldr	r3, [r2, #0]
 80072e4:	b933      	cbnz	r3, 80072f4 <_free_r+0x30>
 80072e6:	6063      	str	r3, [r4, #4]
 80072e8:	6014      	str	r4, [r2, #0]
 80072ea:	b003      	add	sp, #12
 80072ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072f0:	f7ff bfe2 	b.w	80072b8 <__malloc_unlock>
 80072f4:	42a3      	cmp	r3, r4
 80072f6:	d908      	bls.n	800730a <_free_r+0x46>
 80072f8:	6825      	ldr	r5, [r4, #0]
 80072fa:	1961      	adds	r1, r4, r5
 80072fc:	428b      	cmp	r3, r1
 80072fe:	bf01      	itttt	eq
 8007300:	6819      	ldreq	r1, [r3, #0]
 8007302:	685b      	ldreq	r3, [r3, #4]
 8007304:	1949      	addeq	r1, r1, r5
 8007306:	6021      	streq	r1, [r4, #0]
 8007308:	e7ed      	b.n	80072e6 <_free_r+0x22>
 800730a:	461a      	mov	r2, r3
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	b10b      	cbz	r3, 8007314 <_free_r+0x50>
 8007310:	42a3      	cmp	r3, r4
 8007312:	d9fa      	bls.n	800730a <_free_r+0x46>
 8007314:	6811      	ldr	r1, [r2, #0]
 8007316:	1855      	adds	r5, r2, r1
 8007318:	42a5      	cmp	r5, r4
 800731a:	d10b      	bne.n	8007334 <_free_r+0x70>
 800731c:	6824      	ldr	r4, [r4, #0]
 800731e:	4421      	add	r1, r4
 8007320:	1854      	adds	r4, r2, r1
 8007322:	42a3      	cmp	r3, r4
 8007324:	6011      	str	r1, [r2, #0]
 8007326:	d1e0      	bne.n	80072ea <_free_r+0x26>
 8007328:	681c      	ldr	r4, [r3, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	6053      	str	r3, [r2, #4]
 800732e:	4421      	add	r1, r4
 8007330:	6011      	str	r1, [r2, #0]
 8007332:	e7da      	b.n	80072ea <_free_r+0x26>
 8007334:	d902      	bls.n	800733c <_free_r+0x78>
 8007336:	230c      	movs	r3, #12
 8007338:	6003      	str	r3, [r0, #0]
 800733a:	e7d6      	b.n	80072ea <_free_r+0x26>
 800733c:	6825      	ldr	r5, [r4, #0]
 800733e:	1961      	adds	r1, r4, r5
 8007340:	428b      	cmp	r3, r1
 8007342:	bf04      	itt	eq
 8007344:	6819      	ldreq	r1, [r3, #0]
 8007346:	685b      	ldreq	r3, [r3, #4]
 8007348:	6063      	str	r3, [r4, #4]
 800734a:	bf04      	itt	eq
 800734c:	1949      	addeq	r1, r1, r5
 800734e:	6021      	streq	r1, [r4, #0]
 8007350:	6054      	str	r4, [r2, #4]
 8007352:	e7ca      	b.n	80072ea <_free_r+0x26>
 8007354:	b003      	add	sp, #12
 8007356:	bd30      	pop	{r4, r5, pc}
 8007358:	20008754 	.word	0x20008754

0800735c <__sfputc_r>:
 800735c:	6893      	ldr	r3, [r2, #8]
 800735e:	3b01      	subs	r3, #1
 8007360:	2b00      	cmp	r3, #0
 8007362:	b410      	push	{r4}
 8007364:	6093      	str	r3, [r2, #8]
 8007366:	da08      	bge.n	800737a <__sfputc_r+0x1e>
 8007368:	6994      	ldr	r4, [r2, #24]
 800736a:	42a3      	cmp	r3, r4
 800736c:	db01      	blt.n	8007372 <__sfputc_r+0x16>
 800736e:	290a      	cmp	r1, #10
 8007370:	d103      	bne.n	800737a <__sfputc_r+0x1e>
 8007372:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007376:	f000 baf1 	b.w	800795c <__swbuf_r>
 800737a:	6813      	ldr	r3, [r2, #0]
 800737c:	1c58      	adds	r0, r3, #1
 800737e:	6010      	str	r0, [r2, #0]
 8007380:	7019      	strb	r1, [r3, #0]
 8007382:	4608      	mov	r0, r1
 8007384:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007388:	4770      	bx	lr

0800738a <__sfputs_r>:
 800738a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800738c:	4606      	mov	r6, r0
 800738e:	460f      	mov	r7, r1
 8007390:	4614      	mov	r4, r2
 8007392:	18d5      	adds	r5, r2, r3
 8007394:	42ac      	cmp	r4, r5
 8007396:	d101      	bne.n	800739c <__sfputs_r+0x12>
 8007398:	2000      	movs	r0, #0
 800739a:	e007      	b.n	80073ac <__sfputs_r+0x22>
 800739c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073a0:	463a      	mov	r2, r7
 80073a2:	4630      	mov	r0, r6
 80073a4:	f7ff ffda 	bl	800735c <__sfputc_r>
 80073a8:	1c43      	adds	r3, r0, #1
 80073aa:	d1f3      	bne.n	8007394 <__sfputs_r+0xa>
 80073ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080073b0 <_vfiprintf_r>:
 80073b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b4:	460d      	mov	r5, r1
 80073b6:	b09d      	sub	sp, #116	; 0x74
 80073b8:	4614      	mov	r4, r2
 80073ba:	4698      	mov	r8, r3
 80073bc:	4606      	mov	r6, r0
 80073be:	b118      	cbz	r0, 80073c8 <_vfiprintf_r+0x18>
 80073c0:	6983      	ldr	r3, [r0, #24]
 80073c2:	b90b      	cbnz	r3, 80073c8 <_vfiprintf_r+0x18>
 80073c4:	f7ff fc44 	bl	8006c50 <__sinit>
 80073c8:	4b89      	ldr	r3, [pc, #548]	; (80075f0 <_vfiprintf_r+0x240>)
 80073ca:	429d      	cmp	r5, r3
 80073cc:	d11b      	bne.n	8007406 <_vfiprintf_r+0x56>
 80073ce:	6875      	ldr	r5, [r6, #4]
 80073d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073d2:	07d9      	lsls	r1, r3, #31
 80073d4:	d405      	bmi.n	80073e2 <_vfiprintf_r+0x32>
 80073d6:	89ab      	ldrh	r3, [r5, #12]
 80073d8:	059a      	lsls	r2, r3, #22
 80073da:	d402      	bmi.n	80073e2 <_vfiprintf_r+0x32>
 80073dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073de:	f7ff fcfa 	bl	8006dd6 <__retarget_lock_acquire_recursive>
 80073e2:	89ab      	ldrh	r3, [r5, #12]
 80073e4:	071b      	lsls	r3, r3, #28
 80073e6:	d501      	bpl.n	80073ec <_vfiprintf_r+0x3c>
 80073e8:	692b      	ldr	r3, [r5, #16]
 80073ea:	b9eb      	cbnz	r3, 8007428 <_vfiprintf_r+0x78>
 80073ec:	4629      	mov	r1, r5
 80073ee:	4630      	mov	r0, r6
 80073f0:	f000 fb06 	bl	8007a00 <__swsetup_r>
 80073f4:	b1c0      	cbz	r0, 8007428 <_vfiprintf_r+0x78>
 80073f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073f8:	07dc      	lsls	r4, r3, #31
 80073fa:	d50e      	bpl.n	800741a <_vfiprintf_r+0x6a>
 80073fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007400:	b01d      	add	sp, #116	; 0x74
 8007402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007406:	4b7b      	ldr	r3, [pc, #492]	; (80075f4 <_vfiprintf_r+0x244>)
 8007408:	429d      	cmp	r5, r3
 800740a:	d101      	bne.n	8007410 <_vfiprintf_r+0x60>
 800740c:	68b5      	ldr	r5, [r6, #8]
 800740e:	e7df      	b.n	80073d0 <_vfiprintf_r+0x20>
 8007410:	4b79      	ldr	r3, [pc, #484]	; (80075f8 <_vfiprintf_r+0x248>)
 8007412:	429d      	cmp	r5, r3
 8007414:	bf08      	it	eq
 8007416:	68f5      	ldreq	r5, [r6, #12]
 8007418:	e7da      	b.n	80073d0 <_vfiprintf_r+0x20>
 800741a:	89ab      	ldrh	r3, [r5, #12]
 800741c:	0598      	lsls	r0, r3, #22
 800741e:	d4ed      	bmi.n	80073fc <_vfiprintf_r+0x4c>
 8007420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007422:	f7ff fcd9 	bl	8006dd8 <__retarget_lock_release_recursive>
 8007426:	e7e9      	b.n	80073fc <_vfiprintf_r+0x4c>
 8007428:	2300      	movs	r3, #0
 800742a:	9309      	str	r3, [sp, #36]	; 0x24
 800742c:	2320      	movs	r3, #32
 800742e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007432:	f8cd 800c 	str.w	r8, [sp, #12]
 8007436:	2330      	movs	r3, #48	; 0x30
 8007438:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80075fc <_vfiprintf_r+0x24c>
 800743c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007440:	f04f 0901 	mov.w	r9, #1
 8007444:	4623      	mov	r3, r4
 8007446:	469a      	mov	sl, r3
 8007448:	f813 2b01 	ldrb.w	r2, [r3], #1
 800744c:	b10a      	cbz	r2, 8007452 <_vfiprintf_r+0xa2>
 800744e:	2a25      	cmp	r2, #37	; 0x25
 8007450:	d1f9      	bne.n	8007446 <_vfiprintf_r+0x96>
 8007452:	ebba 0b04 	subs.w	fp, sl, r4
 8007456:	d00b      	beq.n	8007470 <_vfiprintf_r+0xc0>
 8007458:	465b      	mov	r3, fp
 800745a:	4622      	mov	r2, r4
 800745c:	4629      	mov	r1, r5
 800745e:	4630      	mov	r0, r6
 8007460:	f7ff ff93 	bl	800738a <__sfputs_r>
 8007464:	3001      	adds	r0, #1
 8007466:	f000 80aa 	beq.w	80075be <_vfiprintf_r+0x20e>
 800746a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800746c:	445a      	add	r2, fp
 800746e:	9209      	str	r2, [sp, #36]	; 0x24
 8007470:	f89a 3000 	ldrb.w	r3, [sl]
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 80a2 	beq.w	80075be <_vfiprintf_r+0x20e>
 800747a:	2300      	movs	r3, #0
 800747c:	f04f 32ff 	mov.w	r2, #4294967295
 8007480:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007484:	f10a 0a01 	add.w	sl, sl, #1
 8007488:	9304      	str	r3, [sp, #16]
 800748a:	9307      	str	r3, [sp, #28]
 800748c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007490:	931a      	str	r3, [sp, #104]	; 0x68
 8007492:	4654      	mov	r4, sl
 8007494:	2205      	movs	r2, #5
 8007496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800749a:	4858      	ldr	r0, [pc, #352]	; (80075fc <_vfiprintf_r+0x24c>)
 800749c:	f7f8 fea8 	bl	80001f0 <memchr>
 80074a0:	9a04      	ldr	r2, [sp, #16]
 80074a2:	b9d8      	cbnz	r0, 80074dc <_vfiprintf_r+0x12c>
 80074a4:	06d1      	lsls	r1, r2, #27
 80074a6:	bf44      	itt	mi
 80074a8:	2320      	movmi	r3, #32
 80074aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074ae:	0713      	lsls	r3, r2, #28
 80074b0:	bf44      	itt	mi
 80074b2:	232b      	movmi	r3, #43	; 0x2b
 80074b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074b8:	f89a 3000 	ldrb.w	r3, [sl]
 80074bc:	2b2a      	cmp	r3, #42	; 0x2a
 80074be:	d015      	beq.n	80074ec <_vfiprintf_r+0x13c>
 80074c0:	9a07      	ldr	r2, [sp, #28]
 80074c2:	4654      	mov	r4, sl
 80074c4:	2000      	movs	r0, #0
 80074c6:	f04f 0c0a 	mov.w	ip, #10
 80074ca:	4621      	mov	r1, r4
 80074cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074d0:	3b30      	subs	r3, #48	; 0x30
 80074d2:	2b09      	cmp	r3, #9
 80074d4:	d94e      	bls.n	8007574 <_vfiprintf_r+0x1c4>
 80074d6:	b1b0      	cbz	r0, 8007506 <_vfiprintf_r+0x156>
 80074d8:	9207      	str	r2, [sp, #28]
 80074da:	e014      	b.n	8007506 <_vfiprintf_r+0x156>
 80074dc:	eba0 0308 	sub.w	r3, r0, r8
 80074e0:	fa09 f303 	lsl.w	r3, r9, r3
 80074e4:	4313      	orrs	r3, r2
 80074e6:	9304      	str	r3, [sp, #16]
 80074e8:	46a2      	mov	sl, r4
 80074ea:	e7d2      	b.n	8007492 <_vfiprintf_r+0xe2>
 80074ec:	9b03      	ldr	r3, [sp, #12]
 80074ee:	1d19      	adds	r1, r3, #4
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	9103      	str	r1, [sp, #12]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	bfbb      	ittet	lt
 80074f8:	425b      	neglt	r3, r3
 80074fa:	f042 0202 	orrlt.w	r2, r2, #2
 80074fe:	9307      	strge	r3, [sp, #28]
 8007500:	9307      	strlt	r3, [sp, #28]
 8007502:	bfb8      	it	lt
 8007504:	9204      	strlt	r2, [sp, #16]
 8007506:	7823      	ldrb	r3, [r4, #0]
 8007508:	2b2e      	cmp	r3, #46	; 0x2e
 800750a:	d10c      	bne.n	8007526 <_vfiprintf_r+0x176>
 800750c:	7863      	ldrb	r3, [r4, #1]
 800750e:	2b2a      	cmp	r3, #42	; 0x2a
 8007510:	d135      	bne.n	800757e <_vfiprintf_r+0x1ce>
 8007512:	9b03      	ldr	r3, [sp, #12]
 8007514:	1d1a      	adds	r2, r3, #4
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	9203      	str	r2, [sp, #12]
 800751a:	2b00      	cmp	r3, #0
 800751c:	bfb8      	it	lt
 800751e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007522:	3402      	adds	r4, #2
 8007524:	9305      	str	r3, [sp, #20]
 8007526:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800760c <_vfiprintf_r+0x25c>
 800752a:	7821      	ldrb	r1, [r4, #0]
 800752c:	2203      	movs	r2, #3
 800752e:	4650      	mov	r0, sl
 8007530:	f7f8 fe5e 	bl	80001f0 <memchr>
 8007534:	b140      	cbz	r0, 8007548 <_vfiprintf_r+0x198>
 8007536:	2340      	movs	r3, #64	; 0x40
 8007538:	eba0 000a 	sub.w	r0, r0, sl
 800753c:	fa03 f000 	lsl.w	r0, r3, r0
 8007540:	9b04      	ldr	r3, [sp, #16]
 8007542:	4303      	orrs	r3, r0
 8007544:	3401      	adds	r4, #1
 8007546:	9304      	str	r3, [sp, #16]
 8007548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800754c:	482c      	ldr	r0, [pc, #176]	; (8007600 <_vfiprintf_r+0x250>)
 800754e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007552:	2206      	movs	r2, #6
 8007554:	f7f8 fe4c 	bl	80001f0 <memchr>
 8007558:	2800      	cmp	r0, #0
 800755a:	d03f      	beq.n	80075dc <_vfiprintf_r+0x22c>
 800755c:	4b29      	ldr	r3, [pc, #164]	; (8007604 <_vfiprintf_r+0x254>)
 800755e:	bb1b      	cbnz	r3, 80075a8 <_vfiprintf_r+0x1f8>
 8007560:	9b03      	ldr	r3, [sp, #12]
 8007562:	3307      	adds	r3, #7
 8007564:	f023 0307 	bic.w	r3, r3, #7
 8007568:	3308      	adds	r3, #8
 800756a:	9303      	str	r3, [sp, #12]
 800756c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800756e:	443b      	add	r3, r7
 8007570:	9309      	str	r3, [sp, #36]	; 0x24
 8007572:	e767      	b.n	8007444 <_vfiprintf_r+0x94>
 8007574:	fb0c 3202 	mla	r2, ip, r2, r3
 8007578:	460c      	mov	r4, r1
 800757a:	2001      	movs	r0, #1
 800757c:	e7a5      	b.n	80074ca <_vfiprintf_r+0x11a>
 800757e:	2300      	movs	r3, #0
 8007580:	3401      	adds	r4, #1
 8007582:	9305      	str	r3, [sp, #20]
 8007584:	4619      	mov	r1, r3
 8007586:	f04f 0c0a 	mov.w	ip, #10
 800758a:	4620      	mov	r0, r4
 800758c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007590:	3a30      	subs	r2, #48	; 0x30
 8007592:	2a09      	cmp	r2, #9
 8007594:	d903      	bls.n	800759e <_vfiprintf_r+0x1ee>
 8007596:	2b00      	cmp	r3, #0
 8007598:	d0c5      	beq.n	8007526 <_vfiprintf_r+0x176>
 800759a:	9105      	str	r1, [sp, #20]
 800759c:	e7c3      	b.n	8007526 <_vfiprintf_r+0x176>
 800759e:	fb0c 2101 	mla	r1, ip, r1, r2
 80075a2:	4604      	mov	r4, r0
 80075a4:	2301      	movs	r3, #1
 80075a6:	e7f0      	b.n	800758a <_vfiprintf_r+0x1da>
 80075a8:	ab03      	add	r3, sp, #12
 80075aa:	9300      	str	r3, [sp, #0]
 80075ac:	462a      	mov	r2, r5
 80075ae:	4b16      	ldr	r3, [pc, #88]	; (8007608 <_vfiprintf_r+0x258>)
 80075b0:	a904      	add	r1, sp, #16
 80075b2:	4630      	mov	r0, r6
 80075b4:	f3af 8000 	nop.w
 80075b8:	4607      	mov	r7, r0
 80075ba:	1c78      	adds	r0, r7, #1
 80075bc:	d1d6      	bne.n	800756c <_vfiprintf_r+0x1bc>
 80075be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075c0:	07d9      	lsls	r1, r3, #31
 80075c2:	d405      	bmi.n	80075d0 <_vfiprintf_r+0x220>
 80075c4:	89ab      	ldrh	r3, [r5, #12]
 80075c6:	059a      	lsls	r2, r3, #22
 80075c8:	d402      	bmi.n	80075d0 <_vfiprintf_r+0x220>
 80075ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075cc:	f7ff fc04 	bl	8006dd8 <__retarget_lock_release_recursive>
 80075d0:	89ab      	ldrh	r3, [r5, #12]
 80075d2:	065b      	lsls	r3, r3, #25
 80075d4:	f53f af12 	bmi.w	80073fc <_vfiprintf_r+0x4c>
 80075d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075da:	e711      	b.n	8007400 <_vfiprintf_r+0x50>
 80075dc:	ab03      	add	r3, sp, #12
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	462a      	mov	r2, r5
 80075e2:	4b09      	ldr	r3, [pc, #36]	; (8007608 <_vfiprintf_r+0x258>)
 80075e4:	a904      	add	r1, sp, #16
 80075e6:	4630      	mov	r0, r6
 80075e8:	f000 f880 	bl	80076ec <_printf_i>
 80075ec:	e7e4      	b.n	80075b8 <_vfiprintf_r+0x208>
 80075ee:	bf00      	nop
 80075f0:	08007c74 	.word	0x08007c74
 80075f4:	08007c94 	.word	0x08007c94
 80075f8:	08007c54 	.word	0x08007c54
 80075fc:	08007cb8 	.word	0x08007cb8
 8007600:	08007cc2 	.word	0x08007cc2
 8007604:	00000000 	.word	0x00000000
 8007608:	0800738b 	.word	0x0800738b
 800760c:	08007cbe 	.word	0x08007cbe

08007610 <_printf_common>:
 8007610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007614:	4616      	mov	r6, r2
 8007616:	4699      	mov	r9, r3
 8007618:	688a      	ldr	r2, [r1, #8]
 800761a:	690b      	ldr	r3, [r1, #16]
 800761c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007620:	4293      	cmp	r3, r2
 8007622:	bfb8      	it	lt
 8007624:	4613      	movlt	r3, r2
 8007626:	6033      	str	r3, [r6, #0]
 8007628:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800762c:	4607      	mov	r7, r0
 800762e:	460c      	mov	r4, r1
 8007630:	b10a      	cbz	r2, 8007636 <_printf_common+0x26>
 8007632:	3301      	adds	r3, #1
 8007634:	6033      	str	r3, [r6, #0]
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	0699      	lsls	r1, r3, #26
 800763a:	bf42      	ittt	mi
 800763c:	6833      	ldrmi	r3, [r6, #0]
 800763e:	3302      	addmi	r3, #2
 8007640:	6033      	strmi	r3, [r6, #0]
 8007642:	6825      	ldr	r5, [r4, #0]
 8007644:	f015 0506 	ands.w	r5, r5, #6
 8007648:	d106      	bne.n	8007658 <_printf_common+0x48>
 800764a:	f104 0a19 	add.w	sl, r4, #25
 800764e:	68e3      	ldr	r3, [r4, #12]
 8007650:	6832      	ldr	r2, [r6, #0]
 8007652:	1a9b      	subs	r3, r3, r2
 8007654:	42ab      	cmp	r3, r5
 8007656:	dc26      	bgt.n	80076a6 <_printf_common+0x96>
 8007658:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800765c:	1e13      	subs	r3, r2, #0
 800765e:	6822      	ldr	r2, [r4, #0]
 8007660:	bf18      	it	ne
 8007662:	2301      	movne	r3, #1
 8007664:	0692      	lsls	r2, r2, #26
 8007666:	d42b      	bmi.n	80076c0 <_printf_common+0xb0>
 8007668:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800766c:	4649      	mov	r1, r9
 800766e:	4638      	mov	r0, r7
 8007670:	47c0      	blx	r8
 8007672:	3001      	adds	r0, #1
 8007674:	d01e      	beq.n	80076b4 <_printf_common+0xa4>
 8007676:	6823      	ldr	r3, [r4, #0]
 8007678:	68e5      	ldr	r5, [r4, #12]
 800767a:	6832      	ldr	r2, [r6, #0]
 800767c:	f003 0306 	and.w	r3, r3, #6
 8007680:	2b04      	cmp	r3, #4
 8007682:	bf08      	it	eq
 8007684:	1aad      	subeq	r5, r5, r2
 8007686:	68a3      	ldr	r3, [r4, #8]
 8007688:	6922      	ldr	r2, [r4, #16]
 800768a:	bf0c      	ite	eq
 800768c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007690:	2500      	movne	r5, #0
 8007692:	4293      	cmp	r3, r2
 8007694:	bfc4      	itt	gt
 8007696:	1a9b      	subgt	r3, r3, r2
 8007698:	18ed      	addgt	r5, r5, r3
 800769a:	2600      	movs	r6, #0
 800769c:	341a      	adds	r4, #26
 800769e:	42b5      	cmp	r5, r6
 80076a0:	d11a      	bne.n	80076d8 <_printf_common+0xc8>
 80076a2:	2000      	movs	r0, #0
 80076a4:	e008      	b.n	80076b8 <_printf_common+0xa8>
 80076a6:	2301      	movs	r3, #1
 80076a8:	4652      	mov	r2, sl
 80076aa:	4649      	mov	r1, r9
 80076ac:	4638      	mov	r0, r7
 80076ae:	47c0      	blx	r8
 80076b0:	3001      	adds	r0, #1
 80076b2:	d103      	bne.n	80076bc <_printf_common+0xac>
 80076b4:	f04f 30ff 	mov.w	r0, #4294967295
 80076b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076bc:	3501      	adds	r5, #1
 80076be:	e7c6      	b.n	800764e <_printf_common+0x3e>
 80076c0:	18e1      	adds	r1, r4, r3
 80076c2:	1c5a      	adds	r2, r3, #1
 80076c4:	2030      	movs	r0, #48	; 0x30
 80076c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076ca:	4422      	add	r2, r4
 80076cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076d4:	3302      	adds	r3, #2
 80076d6:	e7c7      	b.n	8007668 <_printf_common+0x58>
 80076d8:	2301      	movs	r3, #1
 80076da:	4622      	mov	r2, r4
 80076dc:	4649      	mov	r1, r9
 80076de:	4638      	mov	r0, r7
 80076e0:	47c0      	blx	r8
 80076e2:	3001      	adds	r0, #1
 80076e4:	d0e6      	beq.n	80076b4 <_printf_common+0xa4>
 80076e6:	3601      	adds	r6, #1
 80076e8:	e7d9      	b.n	800769e <_printf_common+0x8e>
	...

080076ec <_printf_i>:
 80076ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076f0:	7e0f      	ldrb	r7, [r1, #24]
 80076f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076f4:	2f78      	cmp	r7, #120	; 0x78
 80076f6:	4691      	mov	r9, r2
 80076f8:	4680      	mov	r8, r0
 80076fa:	460c      	mov	r4, r1
 80076fc:	469a      	mov	sl, r3
 80076fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007702:	d807      	bhi.n	8007714 <_printf_i+0x28>
 8007704:	2f62      	cmp	r7, #98	; 0x62
 8007706:	d80a      	bhi.n	800771e <_printf_i+0x32>
 8007708:	2f00      	cmp	r7, #0
 800770a:	f000 80d8 	beq.w	80078be <_printf_i+0x1d2>
 800770e:	2f58      	cmp	r7, #88	; 0x58
 8007710:	f000 80a3 	beq.w	800785a <_printf_i+0x16e>
 8007714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007718:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800771c:	e03a      	b.n	8007794 <_printf_i+0xa8>
 800771e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007722:	2b15      	cmp	r3, #21
 8007724:	d8f6      	bhi.n	8007714 <_printf_i+0x28>
 8007726:	a101      	add	r1, pc, #4	; (adr r1, 800772c <_printf_i+0x40>)
 8007728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800772c:	08007785 	.word	0x08007785
 8007730:	08007799 	.word	0x08007799
 8007734:	08007715 	.word	0x08007715
 8007738:	08007715 	.word	0x08007715
 800773c:	08007715 	.word	0x08007715
 8007740:	08007715 	.word	0x08007715
 8007744:	08007799 	.word	0x08007799
 8007748:	08007715 	.word	0x08007715
 800774c:	08007715 	.word	0x08007715
 8007750:	08007715 	.word	0x08007715
 8007754:	08007715 	.word	0x08007715
 8007758:	080078a5 	.word	0x080078a5
 800775c:	080077c9 	.word	0x080077c9
 8007760:	08007887 	.word	0x08007887
 8007764:	08007715 	.word	0x08007715
 8007768:	08007715 	.word	0x08007715
 800776c:	080078c7 	.word	0x080078c7
 8007770:	08007715 	.word	0x08007715
 8007774:	080077c9 	.word	0x080077c9
 8007778:	08007715 	.word	0x08007715
 800777c:	08007715 	.word	0x08007715
 8007780:	0800788f 	.word	0x0800788f
 8007784:	682b      	ldr	r3, [r5, #0]
 8007786:	1d1a      	adds	r2, r3, #4
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	602a      	str	r2, [r5, #0]
 800778c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007790:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007794:	2301      	movs	r3, #1
 8007796:	e0a3      	b.n	80078e0 <_printf_i+0x1f4>
 8007798:	6820      	ldr	r0, [r4, #0]
 800779a:	6829      	ldr	r1, [r5, #0]
 800779c:	0606      	lsls	r6, r0, #24
 800779e:	f101 0304 	add.w	r3, r1, #4
 80077a2:	d50a      	bpl.n	80077ba <_printf_i+0xce>
 80077a4:	680e      	ldr	r6, [r1, #0]
 80077a6:	602b      	str	r3, [r5, #0]
 80077a8:	2e00      	cmp	r6, #0
 80077aa:	da03      	bge.n	80077b4 <_printf_i+0xc8>
 80077ac:	232d      	movs	r3, #45	; 0x2d
 80077ae:	4276      	negs	r6, r6
 80077b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077b4:	485e      	ldr	r0, [pc, #376]	; (8007930 <_printf_i+0x244>)
 80077b6:	230a      	movs	r3, #10
 80077b8:	e019      	b.n	80077ee <_printf_i+0x102>
 80077ba:	680e      	ldr	r6, [r1, #0]
 80077bc:	602b      	str	r3, [r5, #0]
 80077be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80077c2:	bf18      	it	ne
 80077c4:	b236      	sxthne	r6, r6
 80077c6:	e7ef      	b.n	80077a8 <_printf_i+0xbc>
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	6820      	ldr	r0, [r4, #0]
 80077cc:	1d19      	adds	r1, r3, #4
 80077ce:	6029      	str	r1, [r5, #0]
 80077d0:	0601      	lsls	r1, r0, #24
 80077d2:	d501      	bpl.n	80077d8 <_printf_i+0xec>
 80077d4:	681e      	ldr	r6, [r3, #0]
 80077d6:	e002      	b.n	80077de <_printf_i+0xf2>
 80077d8:	0646      	lsls	r6, r0, #25
 80077da:	d5fb      	bpl.n	80077d4 <_printf_i+0xe8>
 80077dc:	881e      	ldrh	r6, [r3, #0]
 80077de:	4854      	ldr	r0, [pc, #336]	; (8007930 <_printf_i+0x244>)
 80077e0:	2f6f      	cmp	r7, #111	; 0x6f
 80077e2:	bf0c      	ite	eq
 80077e4:	2308      	moveq	r3, #8
 80077e6:	230a      	movne	r3, #10
 80077e8:	2100      	movs	r1, #0
 80077ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077ee:	6865      	ldr	r5, [r4, #4]
 80077f0:	60a5      	str	r5, [r4, #8]
 80077f2:	2d00      	cmp	r5, #0
 80077f4:	bfa2      	ittt	ge
 80077f6:	6821      	ldrge	r1, [r4, #0]
 80077f8:	f021 0104 	bicge.w	r1, r1, #4
 80077fc:	6021      	strge	r1, [r4, #0]
 80077fe:	b90e      	cbnz	r6, 8007804 <_printf_i+0x118>
 8007800:	2d00      	cmp	r5, #0
 8007802:	d04d      	beq.n	80078a0 <_printf_i+0x1b4>
 8007804:	4615      	mov	r5, r2
 8007806:	fbb6 f1f3 	udiv	r1, r6, r3
 800780a:	fb03 6711 	mls	r7, r3, r1, r6
 800780e:	5dc7      	ldrb	r7, [r0, r7]
 8007810:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007814:	4637      	mov	r7, r6
 8007816:	42bb      	cmp	r3, r7
 8007818:	460e      	mov	r6, r1
 800781a:	d9f4      	bls.n	8007806 <_printf_i+0x11a>
 800781c:	2b08      	cmp	r3, #8
 800781e:	d10b      	bne.n	8007838 <_printf_i+0x14c>
 8007820:	6823      	ldr	r3, [r4, #0]
 8007822:	07de      	lsls	r6, r3, #31
 8007824:	d508      	bpl.n	8007838 <_printf_i+0x14c>
 8007826:	6923      	ldr	r3, [r4, #16]
 8007828:	6861      	ldr	r1, [r4, #4]
 800782a:	4299      	cmp	r1, r3
 800782c:	bfde      	ittt	le
 800782e:	2330      	movle	r3, #48	; 0x30
 8007830:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007834:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007838:	1b52      	subs	r2, r2, r5
 800783a:	6122      	str	r2, [r4, #16]
 800783c:	f8cd a000 	str.w	sl, [sp]
 8007840:	464b      	mov	r3, r9
 8007842:	aa03      	add	r2, sp, #12
 8007844:	4621      	mov	r1, r4
 8007846:	4640      	mov	r0, r8
 8007848:	f7ff fee2 	bl	8007610 <_printf_common>
 800784c:	3001      	adds	r0, #1
 800784e:	d14c      	bne.n	80078ea <_printf_i+0x1fe>
 8007850:	f04f 30ff 	mov.w	r0, #4294967295
 8007854:	b004      	add	sp, #16
 8007856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800785a:	4835      	ldr	r0, [pc, #212]	; (8007930 <_printf_i+0x244>)
 800785c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007860:	6829      	ldr	r1, [r5, #0]
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	f851 6b04 	ldr.w	r6, [r1], #4
 8007868:	6029      	str	r1, [r5, #0]
 800786a:	061d      	lsls	r5, r3, #24
 800786c:	d514      	bpl.n	8007898 <_printf_i+0x1ac>
 800786e:	07df      	lsls	r7, r3, #31
 8007870:	bf44      	itt	mi
 8007872:	f043 0320 	orrmi.w	r3, r3, #32
 8007876:	6023      	strmi	r3, [r4, #0]
 8007878:	b91e      	cbnz	r6, 8007882 <_printf_i+0x196>
 800787a:	6823      	ldr	r3, [r4, #0]
 800787c:	f023 0320 	bic.w	r3, r3, #32
 8007880:	6023      	str	r3, [r4, #0]
 8007882:	2310      	movs	r3, #16
 8007884:	e7b0      	b.n	80077e8 <_printf_i+0xfc>
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	f043 0320 	orr.w	r3, r3, #32
 800788c:	6023      	str	r3, [r4, #0]
 800788e:	2378      	movs	r3, #120	; 0x78
 8007890:	4828      	ldr	r0, [pc, #160]	; (8007934 <_printf_i+0x248>)
 8007892:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007896:	e7e3      	b.n	8007860 <_printf_i+0x174>
 8007898:	0659      	lsls	r1, r3, #25
 800789a:	bf48      	it	mi
 800789c:	b2b6      	uxthmi	r6, r6
 800789e:	e7e6      	b.n	800786e <_printf_i+0x182>
 80078a0:	4615      	mov	r5, r2
 80078a2:	e7bb      	b.n	800781c <_printf_i+0x130>
 80078a4:	682b      	ldr	r3, [r5, #0]
 80078a6:	6826      	ldr	r6, [r4, #0]
 80078a8:	6961      	ldr	r1, [r4, #20]
 80078aa:	1d18      	adds	r0, r3, #4
 80078ac:	6028      	str	r0, [r5, #0]
 80078ae:	0635      	lsls	r5, r6, #24
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	d501      	bpl.n	80078b8 <_printf_i+0x1cc>
 80078b4:	6019      	str	r1, [r3, #0]
 80078b6:	e002      	b.n	80078be <_printf_i+0x1d2>
 80078b8:	0670      	lsls	r0, r6, #25
 80078ba:	d5fb      	bpl.n	80078b4 <_printf_i+0x1c8>
 80078bc:	8019      	strh	r1, [r3, #0]
 80078be:	2300      	movs	r3, #0
 80078c0:	6123      	str	r3, [r4, #16]
 80078c2:	4615      	mov	r5, r2
 80078c4:	e7ba      	b.n	800783c <_printf_i+0x150>
 80078c6:	682b      	ldr	r3, [r5, #0]
 80078c8:	1d1a      	adds	r2, r3, #4
 80078ca:	602a      	str	r2, [r5, #0]
 80078cc:	681d      	ldr	r5, [r3, #0]
 80078ce:	6862      	ldr	r2, [r4, #4]
 80078d0:	2100      	movs	r1, #0
 80078d2:	4628      	mov	r0, r5
 80078d4:	f7f8 fc8c 	bl	80001f0 <memchr>
 80078d8:	b108      	cbz	r0, 80078de <_printf_i+0x1f2>
 80078da:	1b40      	subs	r0, r0, r5
 80078dc:	6060      	str	r0, [r4, #4]
 80078de:	6863      	ldr	r3, [r4, #4]
 80078e0:	6123      	str	r3, [r4, #16]
 80078e2:	2300      	movs	r3, #0
 80078e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078e8:	e7a8      	b.n	800783c <_printf_i+0x150>
 80078ea:	6923      	ldr	r3, [r4, #16]
 80078ec:	462a      	mov	r2, r5
 80078ee:	4649      	mov	r1, r9
 80078f0:	4640      	mov	r0, r8
 80078f2:	47d0      	blx	sl
 80078f4:	3001      	adds	r0, #1
 80078f6:	d0ab      	beq.n	8007850 <_printf_i+0x164>
 80078f8:	6823      	ldr	r3, [r4, #0]
 80078fa:	079b      	lsls	r3, r3, #30
 80078fc:	d413      	bmi.n	8007926 <_printf_i+0x23a>
 80078fe:	68e0      	ldr	r0, [r4, #12]
 8007900:	9b03      	ldr	r3, [sp, #12]
 8007902:	4298      	cmp	r0, r3
 8007904:	bfb8      	it	lt
 8007906:	4618      	movlt	r0, r3
 8007908:	e7a4      	b.n	8007854 <_printf_i+0x168>
 800790a:	2301      	movs	r3, #1
 800790c:	4632      	mov	r2, r6
 800790e:	4649      	mov	r1, r9
 8007910:	4640      	mov	r0, r8
 8007912:	47d0      	blx	sl
 8007914:	3001      	adds	r0, #1
 8007916:	d09b      	beq.n	8007850 <_printf_i+0x164>
 8007918:	3501      	adds	r5, #1
 800791a:	68e3      	ldr	r3, [r4, #12]
 800791c:	9903      	ldr	r1, [sp, #12]
 800791e:	1a5b      	subs	r3, r3, r1
 8007920:	42ab      	cmp	r3, r5
 8007922:	dcf2      	bgt.n	800790a <_printf_i+0x21e>
 8007924:	e7eb      	b.n	80078fe <_printf_i+0x212>
 8007926:	2500      	movs	r5, #0
 8007928:	f104 0619 	add.w	r6, r4, #25
 800792c:	e7f5      	b.n	800791a <_printf_i+0x22e>
 800792e:	bf00      	nop
 8007930:	08007cc9 	.word	0x08007cc9
 8007934:	08007cda 	.word	0x08007cda

08007938 <_read_r>:
 8007938:	b538      	push	{r3, r4, r5, lr}
 800793a:	4d07      	ldr	r5, [pc, #28]	; (8007958 <_read_r+0x20>)
 800793c:	4604      	mov	r4, r0
 800793e:	4608      	mov	r0, r1
 8007940:	4611      	mov	r1, r2
 8007942:	2200      	movs	r2, #0
 8007944:	602a      	str	r2, [r5, #0]
 8007946:	461a      	mov	r2, r3
 8007948:	f7f9 fe5e 	bl	8001608 <_read>
 800794c:	1c43      	adds	r3, r0, #1
 800794e:	d102      	bne.n	8007956 <_read_r+0x1e>
 8007950:	682b      	ldr	r3, [r5, #0]
 8007952:	b103      	cbz	r3, 8007956 <_read_r+0x1e>
 8007954:	6023      	str	r3, [r4, #0]
 8007956:	bd38      	pop	{r3, r4, r5, pc}
 8007958:	2000875c 	.word	0x2000875c

0800795c <__swbuf_r>:
 800795c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795e:	460e      	mov	r6, r1
 8007960:	4614      	mov	r4, r2
 8007962:	4605      	mov	r5, r0
 8007964:	b118      	cbz	r0, 800796e <__swbuf_r+0x12>
 8007966:	6983      	ldr	r3, [r0, #24]
 8007968:	b90b      	cbnz	r3, 800796e <__swbuf_r+0x12>
 800796a:	f7ff f971 	bl	8006c50 <__sinit>
 800796e:	4b21      	ldr	r3, [pc, #132]	; (80079f4 <__swbuf_r+0x98>)
 8007970:	429c      	cmp	r4, r3
 8007972:	d12b      	bne.n	80079cc <__swbuf_r+0x70>
 8007974:	686c      	ldr	r4, [r5, #4]
 8007976:	69a3      	ldr	r3, [r4, #24]
 8007978:	60a3      	str	r3, [r4, #8]
 800797a:	89a3      	ldrh	r3, [r4, #12]
 800797c:	071a      	lsls	r2, r3, #28
 800797e:	d52f      	bpl.n	80079e0 <__swbuf_r+0x84>
 8007980:	6923      	ldr	r3, [r4, #16]
 8007982:	b36b      	cbz	r3, 80079e0 <__swbuf_r+0x84>
 8007984:	6923      	ldr	r3, [r4, #16]
 8007986:	6820      	ldr	r0, [r4, #0]
 8007988:	1ac0      	subs	r0, r0, r3
 800798a:	6963      	ldr	r3, [r4, #20]
 800798c:	b2f6      	uxtb	r6, r6
 800798e:	4283      	cmp	r3, r0
 8007990:	4637      	mov	r7, r6
 8007992:	dc04      	bgt.n	800799e <__swbuf_r+0x42>
 8007994:	4621      	mov	r1, r4
 8007996:	4628      	mov	r0, r5
 8007998:	f7ff fc3a 	bl	8007210 <_fflush_r>
 800799c:	bb30      	cbnz	r0, 80079ec <__swbuf_r+0x90>
 800799e:	68a3      	ldr	r3, [r4, #8]
 80079a0:	3b01      	subs	r3, #1
 80079a2:	60a3      	str	r3, [r4, #8]
 80079a4:	6823      	ldr	r3, [r4, #0]
 80079a6:	1c5a      	adds	r2, r3, #1
 80079a8:	6022      	str	r2, [r4, #0]
 80079aa:	701e      	strb	r6, [r3, #0]
 80079ac:	6963      	ldr	r3, [r4, #20]
 80079ae:	3001      	adds	r0, #1
 80079b0:	4283      	cmp	r3, r0
 80079b2:	d004      	beq.n	80079be <__swbuf_r+0x62>
 80079b4:	89a3      	ldrh	r3, [r4, #12]
 80079b6:	07db      	lsls	r3, r3, #31
 80079b8:	d506      	bpl.n	80079c8 <__swbuf_r+0x6c>
 80079ba:	2e0a      	cmp	r6, #10
 80079bc:	d104      	bne.n	80079c8 <__swbuf_r+0x6c>
 80079be:	4621      	mov	r1, r4
 80079c0:	4628      	mov	r0, r5
 80079c2:	f7ff fc25 	bl	8007210 <_fflush_r>
 80079c6:	b988      	cbnz	r0, 80079ec <__swbuf_r+0x90>
 80079c8:	4638      	mov	r0, r7
 80079ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079cc:	4b0a      	ldr	r3, [pc, #40]	; (80079f8 <__swbuf_r+0x9c>)
 80079ce:	429c      	cmp	r4, r3
 80079d0:	d101      	bne.n	80079d6 <__swbuf_r+0x7a>
 80079d2:	68ac      	ldr	r4, [r5, #8]
 80079d4:	e7cf      	b.n	8007976 <__swbuf_r+0x1a>
 80079d6:	4b09      	ldr	r3, [pc, #36]	; (80079fc <__swbuf_r+0xa0>)
 80079d8:	429c      	cmp	r4, r3
 80079da:	bf08      	it	eq
 80079dc:	68ec      	ldreq	r4, [r5, #12]
 80079de:	e7ca      	b.n	8007976 <__swbuf_r+0x1a>
 80079e0:	4621      	mov	r1, r4
 80079e2:	4628      	mov	r0, r5
 80079e4:	f000 f80c 	bl	8007a00 <__swsetup_r>
 80079e8:	2800      	cmp	r0, #0
 80079ea:	d0cb      	beq.n	8007984 <__swbuf_r+0x28>
 80079ec:	f04f 37ff 	mov.w	r7, #4294967295
 80079f0:	e7ea      	b.n	80079c8 <__swbuf_r+0x6c>
 80079f2:	bf00      	nop
 80079f4:	08007c74 	.word	0x08007c74
 80079f8:	08007c94 	.word	0x08007c94
 80079fc:	08007c54 	.word	0x08007c54

08007a00 <__swsetup_r>:
 8007a00:	4b32      	ldr	r3, [pc, #200]	; (8007acc <__swsetup_r+0xcc>)
 8007a02:	b570      	push	{r4, r5, r6, lr}
 8007a04:	681d      	ldr	r5, [r3, #0]
 8007a06:	4606      	mov	r6, r0
 8007a08:	460c      	mov	r4, r1
 8007a0a:	b125      	cbz	r5, 8007a16 <__swsetup_r+0x16>
 8007a0c:	69ab      	ldr	r3, [r5, #24]
 8007a0e:	b913      	cbnz	r3, 8007a16 <__swsetup_r+0x16>
 8007a10:	4628      	mov	r0, r5
 8007a12:	f7ff f91d 	bl	8006c50 <__sinit>
 8007a16:	4b2e      	ldr	r3, [pc, #184]	; (8007ad0 <__swsetup_r+0xd0>)
 8007a18:	429c      	cmp	r4, r3
 8007a1a:	d10f      	bne.n	8007a3c <__swsetup_r+0x3c>
 8007a1c:	686c      	ldr	r4, [r5, #4]
 8007a1e:	89a3      	ldrh	r3, [r4, #12]
 8007a20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a24:	0719      	lsls	r1, r3, #28
 8007a26:	d42c      	bmi.n	8007a82 <__swsetup_r+0x82>
 8007a28:	06dd      	lsls	r5, r3, #27
 8007a2a:	d411      	bmi.n	8007a50 <__swsetup_r+0x50>
 8007a2c:	2309      	movs	r3, #9
 8007a2e:	6033      	str	r3, [r6, #0]
 8007a30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a34:	81a3      	strh	r3, [r4, #12]
 8007a36:	f04f 30ff 	mov.w	r0, #4294967295
 8007a3a:	e03e      	b.n	8007aba <__swsetup_r+0xba>
 8007a3c:	4b25      	ldr	r3, [pc, #148]	; (8007ad4 <__swsetup_r+0xd4>)
 8007a3e:	429c      	cmp	r4, r3
 8007a40:	d101      	bne.n	8007a46 <__swsetup_r+0x46>
 8007a42:	68ac      	ldr	r4, [r5, #8]
 8007a44:	e7eb      	b.n	8007a1e <__swsetup_r+0x1e>
 8007a46:	4b24      	ldr	r3, [pc, #144]	; (8007ad8 <__swsetup_r+0xd8>)
 8007a48:	429c      	cmp	r4, r3
 8007a4a:	bf08      	it	eq
 8007a4c:	68ec      	ldreq	r4, [r5, #12]
 8007a4e:	e7e6      	b.n	8007a1e <__swsetup_r+0x1e>
 8007a50:	0758      	lsls	r0, r3, #29
 8007a52:	d512      	bpl.n	8007a7a <__swsetup_r+0x7a>
 8007a54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a56:	b141      	cbz	r1, 8007a6a <__swsetup_r+0x6a>
 8007a58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a5c:	4299      	cmp	r1, r3
 8007a5e:	d002      	beq.n	8007a66 <__swsetup_r+0x66>
 8007a60:	4630      	mov	r0, r6
 8007a62:	f7ff fc2f 	bl	80072c4 <_free_r>
 8007a66:	2300      	movs	r3, #0
 8007a68:	6363      	str	r3, [r4, #52]	; 0x34
 8007a6a:	89a3      	ldrh	r3, [r4, #12]
 8007a6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a70:	81a3      	strh	r3, [r4, #12]
 8007a72:	2300      	movs	r3, #0
 8007a74:	6063      	str	r3, [r4, #4]
 8007a76:	6923      	ldr	r3, [r4, #16]
 8007a78:	6023      	str	r3, [r4, #0]
 8007a7a:	89a3      	ldrh	r3, [r4, #12]
 8007a7c:	f043 0308 	orr.w	r3, r3, #8
 8007a80:	81a3      	strh	r3, [r4, #12]
 8007a82:	6923      	ldr	r3, [r4, #16]
 8007a84:	b94b      	cbnz	r3, 8007a9a <__swsetup_r+0x9a>
 8007a86:	89a3      	ldrh	r3, [r4, #12]
 8007a88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a90:	d003      	beq.n	8007a9a <__swsetup_r+0x9a>
 8007a92:	4621      	mov	r1, r4
 8007a94:	4630      	mov	r0, r6
 8007a96:	f000 f847 	bl	8007b28 <__smakebuf_r>
 8007a9a:	89a0      	ldrh	r0, [r4, #12]
 8007a9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007aa0:	f010 0301 	ands.w	r3, r0, #1
 8007aa4:	d00a      	beq.n	8007abc <__swsetup_r+0xbc>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	60a3      	str	r3, [r4, #8]
 8007aaa:	6963      	ldr	r3, [r4, #20]
 8007aac:	425b      	negs	r3, r3
 8007aae:	61a3      	str	r3, [r4, #24]
 8007ab0:	6923      	ldr	r3, [r4, #16]
 8007ab2:	b943      	cbnz	r3, 8007ac6 <__swsetup_r+0xc6>
 8007ab4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ab8:	d1ba      	bne.n	8007a30 <__swsetup_r+0x30>
 8007aba:	bd70      	pop	{r4, r5, r6, pc}
 8007abc:	0781      	lsls	r1, r0, #30
 8007abe:	bf58      	it	pl
 8007ac0:	6963      	ldrpl	r3, [r4, #20]
 8007ac2:	60a3      	str	r3, [r4, #8]
 8007ac4:	e7f4      	b.n	8007ab0 <__swsetup_r+0xb0>
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	e7f7      	b.n	8007aba <__swsetup_r+0xba>
 8007aca:	bf00      	nop
 8007acc:	20000010 	.word	0x20000010
 8007ad0:	08007c74 	.word	0x08007c74
 8007ad4:	08007c94 	.word	0x08007c94
 8007ad8:	08007c54 	.word	0x08007c54

08007adc <__swhatbuf_r>:
 8007adc:	b570      	push	{r4, r5, r6, lr}
 8007ade:	460e      	mov	r6, r1
 8007ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ae4:	2900      	cmp	r1, #0
 8007ae6:	b096      	sub	sp, #88	; 0x58
 8007ae8:	4614      	mov	r4, r2
 8007aea:	461d      	mov	r5, r3
 8007aec:	da08      	bge.n	8007b00 <__swhatbuf_r+0x24>
 8007aee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	602a      	str	r2, [r5, #0]
 8007af6:	061a      	lsls	r2, r3, #24
 8007af8:	d410      	bmi.n	8007b1c <__swhatbuf_r+0x40>
 8007afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007afe:	e00e      	b.n	8007b1e <__swhatbuf_r+0x42>
 8007b00:	466a      	mov	r2, sp
 8007b02:	f000 f851 	bl	8007ba8 <_fstat_r>
 8007b06:	2800      	cmp	r0, #0
 8007b08:	dbf1      	blt.n	8007aee <__swhatbuf_r+0x12>
 8007b0a:	9a01      	ldr	r2, [sp, #4]
 8007b0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b14:	425a      	negs	r2, r3
 8007b16:	415a      	adcs	r2, r3
 8007b18:	602a      	str	r2, [r5, #0]
 8007b1a:	e7ee      	b.n	8007afa <__swhatbuf_r+0x1e>
 8007b1c:	2340      	movs	r3, #64	; 0x40
 8007b1e:	2000      	movs	r0, #0
 8007b20:	6023      	str	r3, [r4, #0]
 8007b22:	b016      	add	sp, #88	; 0x58
 8007b24:	bd70      	pop	{r4, r5, r6, pc}
	...

08007b28 <__smakebuf_r>:
 8007b28:	898b      	ldrh	r3, [r1, #12]
 8007b2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b2c:	079d      	lsls	r5, r3, #30
 8007b2e:	4606      	mov	r6, r0
 8007b30:	460c      	mov	r4, r1
 8007b32:	d507      	bpl.n	8007b44 <__smakebuf_r+0x1c>
 8007b34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b38:	6023      	str	r3, [r4, #0]
 8007b3a:	6123      	str	r3, [r4, #16]
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	6163      	str	r3, [r4, #20]
 8007b40:	b002      	add	sp, #8
 8007b42:	bd70      	pop	{r4, r5, r6, pc}
 8007b44:	ab01      	add	r3, sp, #4
 8007b46:	466a      	mov	r2, sp
 8007b48:	f7ff ffc8 	bl	8007adc <__swhatbuf_r>
 8007b4c:	9900      	ldr	r1, [sp, #0]
 8007b4e:	4605      	mov	r5, r0
 8007b50:	4630      	mov	r0, r6
 8007b52:	f7ff f96b 	bl	8006e2c <_malloc_r>
 8007b56:	b948      	cbnz	r0, 8007b6c <__smakebuf_r+0x44>
 8007b58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b5c:	059a      	lsls	r2, r3, #22
 8007b5e:	d4ef      	bmi.n	8007b40 <__smakebuf_r+0x18>
 8007b60:	f023 0303 	bic.w	r3, r3, #3
 8007b64:	f043 0302 	orr.w	r3, r3, #2
 8007b68:	81a3      	strh	r3, [r4, #12]
 8007b6a:	e7e3      	b.n	8007b34 <__smakebuf_r+0xc>
 8007b6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ba4 <__smakebuf_r+0x7c>)
 8007b6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b70:	89a3      	ldrh	r3, [r4, #12]
 8007b72:	6020      	str	r0, [r4, #0]
 8007b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b78:	81a3      	strh	r3, [r4, #12]
 8007b7a:	9b00      	ldr	r3, [sp, #0]
 8007b7c:	6163      	str	r3, [r4, #20]
 8007b7e:	9b01      	ldr	r3, [sp, #4]
 8007b80:	6120      	str	r0, [r4, #16]
 8007b82:	b15b      	cbz	r3, 8007b9c <__smakebuf_r+0x74>
 8007b84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b88:	4630      	mov	r0, r6
 8007b8a:	f000 f81f 	bl	8007bcc <_isatty_r>
 8007b8e:	b128      	cbz	r0, 8007b9c <__smakebuf_r+0x74>
 8007b90:	89a3      	ldrh	r3, [r4, #12]
 8007b92:	f023 0303 	bic.w	r3, r3, #3
 8007b96:	f043 0301 	orr.w	r3, r3, #1
 8007b9a:	81a3      	strh	r3, [r4, #12]
 8007b9c:	89a0      	ldrh	r0, [r4, #12]
 8007b9e:	4305      	orrs	r5, r0
 8007ba0:	81a5      	strh	r5, [r4, #12]
 8007ba2:	e7cd      	b.n	8007b40 <__smakebuf_r+0x18>
 8007ba4:	08006be9 	.word	0x08006be9

08007ba8 <_fstat_r>:
 8007ba8:	b538      	push	{r3, r4, r5, lr}
 8007baa:	4d07      	ldr	r5, [pc, #28]	; (8007bc8 <_fstat_r+0x20>)
 8007bac:	2300      	movs	r3, #0
 8007bae:	4604      	mov	r4, r0
 8007bb0:	4608      	mov	r0, r1
 8007bb2:	4611      	mov	r1, r2
 8007bb4:	602b      	str	r3, [r5, #0]
 8007bb6:	f7f9 fd50 	bl	800165a <_fstat>
 8007bba:	1c43      	adds	r3, r0, #1
 8007bbc:	d102      	bne.n	8007bc4 <_fstat_r+0x1c>
 8007bbe:	682b      	ldr	r3, [r5, #0]
 8007bc0:	b103      	cbz	r3, 8007bc4 <_fstat_r+0x1c>
 8007bc2:	6023      	str	r3, [r4, #0]
 8007bc4:	bd38      	pop	{r3, r4, r5, pc}
 8007bc6:	bf00      	nop
 8007bc8:	2000875c 	.word	0x2000875c

08007bcc <_isatty_r>:
 8007bcc:	b538      	push	{r3, r4, r5, lr}
 8007bce:	4d06      	ldr	r5, [pc, #24]	; (8007be8 <_isatty_r+0x1c>)
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	4608      	mov	r0, r1
 8007bd6:	602b      	str	r3, [r5, #0]
 8007bd8:	f7f9 fd4f 	bl	800167a <_isatty>
 8007bdc:	1c43      	adds	r3, r0, #1
 8007bde:	d102      	bne.n	8007be6 <_isatty_r+0x1a>
 8007be0:	682b      	ldr	r3, [r5, #0]
 8007be2:	b103      	cbz	r3, 8007be6 <_isatty_r+0x1a>
 8007be4:	6023      	str	r3, [r4, #0]
 8007be6:	bd38      	pop	{r3, r4, r5, pc}
 8007be8:	2000875c 	.word	0x2000875c

08007bec <_init>:
 8007bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bee:	bf00      	nop
 8007bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bf2:	bc08      	pop	{r3}
 8007bf4:	469e      	mov	lr, r3
 8007bf6:	4770      	bx	lr

08007bf8 <_fini>:
 8007bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bfa:	bf00      	nop
 8007bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bfe:	bc08      	pop	{r3}
 8007c00:	469e      	mov	lr, r3
 8007c02:	4770      	bx	lr
