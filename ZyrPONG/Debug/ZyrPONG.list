
ZyrPONG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f49c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fe4  0800f650  0800f650  0001f650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011634  08011634  0003026c  2**0
                  CONTENTS
  4 .ARM          00000008  08011634  08011634  00021634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801163c  0801163c  0003026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801163c  0801163c  0002163c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011640  08011640  00021640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  08011644  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003026c  2**0
                  CONTENTS
 10 .bss          000089e0  2000026c  2000026c  0003026c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008c4c  20008c4c  0003026c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003026c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027a7f  00000000  00000000  0003029c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000050a4  00000000  00000000  00057d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020f0  00000000  00000000  0005cdc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ee0  00000000  00000000  0005eeb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002aa51  00000000  00000000  00060d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000256ec  00000000  00000000  0008b7e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f63b5  00000000  00000000  000b0ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a7282  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a038  00000000  00000000  001a72d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000026c 	.word	0x2000026c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f634 	.word	0x0800f634

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000270 	.word	0x20000270
 80001ec:	0800f634 	.word	0x0800f634

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4a07      	ldr	r2, [pc, #28]	; (8001078 <vApplicationGetIdleTaskMemory+0x2c>)
 800105c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	4a06      	ldr	r2, [pc, #24]	; (800107c <vApplicationGetIdleTaskMemory+0x30>)
 8001062:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2280      	movs	r2, #128	; 0x80
 8001068:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800106a:	bf00      	nop
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000288 	.word	0x20000288
 800107c:	20000340 	.word	0x20000340

08001080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001080:	b5b0      	push	{r4, r5, r7, lr}
 8001082:	b08e      	sub	sp, #56	; 0x38
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001086:	f003 f8b3 	bl	80041f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108a:	f000 f85d 	bl	8001148 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108e:	f000 fad1 	bl	8001634 <MX_GPIO_Init>
  MX_CRC_Init();
 8001092:	f000 f8c9 	bl	8001228 <MX_CRC_Init>
  MX_DMA2D_Init();
 8001096:	f000 f8db 	bl	8001250 <MX_DMA2D_Init>
  MX_FMC_Init();
 800109a:	f000 fa7b 	bl	8001594 <MX_FMC_Init>
  MX_LTDC_Init();
 800109e:	f000 f949 	bl	8001334 <MX_LTDC_Init>
  MX_SPI5_Init();
 80010a2:	f000 f9c7 	bl	8001434 <MX_SPI5_Init>
  MX_TIM1_Init();
 80010a6:	f000 f9fb 	bl	80014a0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80010aa:	f000 fa49 	bl	8001540 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 80010ae:	f000 f901 	bl	80012b4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  BSP_GYRO_Init();
 80010b2:	f002 f997 	bl	80033e4 <BSP_GYRO_Init>

  BSP_LCD_Init();
 80010b6:	f002 fa13 	bl	80034e0 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);	//Warstwa spodnia
 80010ba:	491e      	ldr	r1, [pc, #120]	; (8001134 <main+0xb4>)
 80010bc:	2000      	movs	r0, #0
 80010be:	f002 fa91 	bl	80035e4 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 80010c2:	2000      	movs	r0, #0
 80010c4:	f002 faf2 	bl	80036ac <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 80010c8:	f002 fd96 	bl	8003bf8 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80010cc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80010d0:	f002 fb48 	bl	8003764 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	f002 faf8 	bl	80036cc <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80010dc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80010e0:	f002 fb0c 	bl	80036fc <BSP_LCD_SetBackColor>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <main+0xb8>)
 80010e6:	f107 041c 	add.w	r4, r7, #28
 80010ea:	461d      	mov	r5, r3
 80010ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f008 faf9 	bl	80096f6 <osThreadCreate>
 8001104:	4603      	mov	r3, r0
 8001106:	4a0d      	ldr	r2, [pc, #52]	; (800113c <main+0xbc>)
 8001108:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(DataGathering, StartDataGathering, osPriorityHigh, 0, 2048);
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <main+0xc0>)
 800110c:	463c      	mov	r4, r7
 800110e:	461d      	mov	r5, r3
 8001110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001114:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001118:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SecondaryTaskHandle = osThreadCreate(osThread(DataGathering), NULL);
 800111c:	463b      	mov	r3, r7
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f008 fae8 	bl	80096f6 <osThreadCreate>
 8001126:	4603      	mov	r3, r0
 8001128:	4a06      	ldr	r2, [pc, #24]	; (8001144 <main+0xc4>)
 800112a:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800112c:	f008 fadc 	bl	80096e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001130:	e7fe      	b.n	8001130 <main+0xb0>
 8001132:	bf00      	nop
 8001134:	d0130000 	.word	0xd0130000
 8001138:	0800f66c 	.word	0x0800f66c
 800113c:	2000079c 	.word	0x2000079c
 8001140:	0800f688 	.word	0x0800f688
 8001144:	20000838 	.word	0x20000838

08001148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b094      	sub	sp, #80	; 0x50
 800114c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114e:	f107 0320 	add.w	r3, r7, #32
 8001152:	2230      	movs	r2, #48	; 0x30
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f009 fe8d 	bl	800ae76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800116c:	2300      	movs	r3, #0
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	4b2b      	ldr	r3, [pc, #172]	; (8001220 <SystemClock_Config+0xd8>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	4a2a      	ldr	r2, [pc, #168]	; (8001220 <SystemClock_Config+0xd8>)
 8001176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117a:	6413      	str	r3, [r2, #64]	; 0x40
 800117c:	4b28      	ldr	r3, [pc, #160]	; (8001220 <SystemClock_Config+0xd8>)
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001188:	2300      	movs	r3, #0
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	4b25      	ldr	r3, [pc, #148]	; (8001224 <SystemClock_Config+0xdc>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a24      	ldr	r2, [pc, #144]	; (8001224 <SystemClock_Config+0xdc>)
 8001192:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	4b22      	ldr	r3, [pc, #136]	; (8001224 <SystemClock_Config+0xdc>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011a4:	2302      	movs	r3, #2
 80011a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a8:	2301      	movs	r3, #1
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ac:	2310      	movs	r3, #16
 80011ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b0:	2302      	movs	r3, #2
 80011b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011b4:	2300      	movs	r3, #0
 80011b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011b8:	2308      	movs	r3, #8
 80011ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80011bc:	23b4      	movs	r3, #180	; 0xb4
 80011be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011c0:	2302      	movs	r3, #2
 80011c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80011c4:	2303      	movs	r3, #3
 80011c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c8:	f107 0320 	add.w	r3, r7, #32
 80011cc:	4618      	mov	r0, r3
 80011ce:	f004 ffc9 	bl	8006164 <HAL_RCC_OscConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011d8:	f000 fdd4 	bl	8001d84 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011dc:	f004 ff72 	bl	80060c4 <HAL_PWREx_EnableOverDrive>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80011e6:	f000 fdcd 	bl	8001d84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ea:	230f      	movs	r3, #15
 80011ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ee:	2302      	movs	r3, #2
 80011f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001200:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001202:	f107 030c 	add.w	r3, r7, #12
 8001206:	2105      	movs	r1, #5
 8001208:	4618      	mov	r0, r3
 800120a:	f005 fa23 	bl	8006654 <HAL_RCC_ClockConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001214:	f000 fdb6 	bl	8001d84 <Error_Handler>
  }
}
 8001218:	bf00      	nop
 800121a:	3750      	adds	r7, #80	; 0x50
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40023800 	.word	0x40023800
 8001224:	40007000 	.word	0x40007000

08001228 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_CRC_Init+0x20>)
 800122e:	4a07      	ldr	r2, [pc, #28]	; (800124c <MX_CRC_Init+0x24>)
 8001230:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_CRC_Init+0x20>)
 8001234:	f003 f924 	bl	8004480 <HAL_CRC_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800123e:	f000 fda1 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000540 	.word	0x20000540
 800124c:	40023000 	.word	0x40023000

08001250 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <MX_DMA2D_Init+0x5c>)
 8001256:	4a16      	ldr	r2, [pc, #88]	; (80012b0 <MX_DMA2D_Init+0x60>)
 8001258:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <MX_DMA2D_Init+0x5c>)
 800125c:	2200      	movs	r2, #0
 800125e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_DMA2D_Init+0x5c>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_DMA2D_Init+0x5c>)
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_DMA2D_Init+0x5c>)
 800126e:	2200      	movs	r2, #0
 8001270:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_DMA2D_Init+0x5c>)
 8001274:	2200      	movs	r2, #0
 8001276:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_DMA2D_Init+0x5c>)
 800127a:	2200      	movs	r2, #0
 800127c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <MX_DMA2D_Init+0x5c>)
 8001280:	2200      	movs	r2, #0
 8001282:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001284:	4809      	ldr	r0, [pc, #36]	; (80012ac <MX_DMA2D_Init+0x5c>)
 8001286:	f003 fb67 	bl	8004958 <HAL_DMA2D_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001290:	f000 fd78 	bl	8001d84 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001294:	2101      	movs	r1, #1
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_DMA2D_Init+0x5c>)
 8001298:	f003 fdcc 	bl	8004e34 <HAL_DMA2D_ConfigLayer>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80012a2:	f000 fd6f 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000548 	.word	0x20000548
 80012b0:	4002b000 	.word	0x4002b000

080012b4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <MX_I2C3_Init+0x74>)
 80012ba:	4a1c      	ldr	r2, [pc, #112]	; (800132c <MX_I2C3_Init+0x78>)
 80012bc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80012be:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <MX_I2C3_Init+0x74>)
 80012c0:	4a1b      	ldr	r2, [pc, #108]	; (8001330 <MX_I2C3_Init+0x7c>)
 80012c2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <MX_I2C3_Init+0x74>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80012ca:	4b17      	ldr	r3, [pc, #92]	; (8001328 <MX_I2C3_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <MX_I2C3_Init+0x74>)
 80012d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012d6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d8:	4b13      	ldr	r3, [pc, #76]	; (8001328 <MX_I2C3_Init+0x74>)
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <MX_I2C3_Init+0x74>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <MX_I2C3_Init+0x74>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_I2C3_Init+0x74>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80012f0:	480d      	ldr	r0, [pc, #52]	; (8001328 <MX_I2C3_Init+0x74>)
 80012f2:	f004 f99f 	bl	8005634 <HAL_I2C_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80012fc:	f000 fd42 	bl	8001d84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001300:	2100      	movs	r1, #0
 8001302:	4809      	ldr	r0, [pc, #36]	; (8001328 <MX_I2C3_Init+0x74>)
 8001304:	f004 fada 	bl	80058bc <HAL_I2CEx_ConfigAnalogFilter>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800130e:	f000 fd39 	bl	8001d84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001312:	2100      	movs	r1, #0
 8001314:	4804      	ldr	r0, [pc, #16]	; (8001328 <MX_I2C3_Init+0x74>)
 8001316:	f004 fb0d 	bl	8005934 <HAL_I2CEx_ConfigDigitalFilter>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001320:	f000 fd30 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000588 	.word	0x20000588
 800132c:	40005c00 	.word	0x40005c00
 8001330:	000186a0 	.word	0x000186a0

08001334 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08e      	sub	sp, #56	; 0x38
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	2234      	movs	r2, #52	; 0x34
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f009 fd98 	bl	800ae76 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001346:	4b39      	ldr	r3, [pc, #228]	; (800142c <MX_LTDC_Init+0xf8>)
 8001348:	4a39      	ldr	r2, [pc, #228]	; (8001430 <MX_LTDC_Init+0xfc>)
 800134a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800134c:	4b37      	ldr	r3, [pc, #220]	; (800142c <MX_LTDC_Init+0xf8>)
 800134e:	2200      	movs	r2, #0
 8001350:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001352:	4b36      	ldr	r3, [pc, #216]	; (800142c <MX_LTDC_Init+0xf8>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001358:	4b34      	ldr	r3, [pc, #208]	; (800142c <MX_LTDC_Init+0xf8>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800135e:	4b33      	ldr	r3, [pc, #204]	; (800142c <MX_LTDC_Init+0xf8>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8001364:	4b31      	ldr	r3, [pc, #196]	; (800142c <MX_LTDC_Init+0xf8>)
 8001366:	2209      	movs	r2, #9
 8001368:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800136a:	4b30      	ldr	r3, [pc, #192]	; (800142c <MX_LTDC_Init+0xf8>)
 800136c:	2201      	movs	r2, #1
 800136e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8001370:	4b2e      	ldr	r3, [pc, #184]	; (800142c <MX_LTDC_Init+0xf8>)
 8001372:	221d      	movs	r2, #29
 8001374:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8001376:	4b2d      	ldr	r3, [pc, #180]	; (800142c <MX_LTDC_Init+0xf8>)
 8001378:	2203      	movs	r2, #3
 800137a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 800137c:	4b2b      	ldr	r3, [pc, #172]	; (800142c <MX_LTDC_Init+0xf8>)
 800137e:	f240 120d 	movw	r2, #269	; 0x10d
 8001382:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8001384:	4b29      	ldr	r3, [pc, #164]	; (800142c <MX_LTDC_Init+0xf8>)
 8001386:	f240 1243 	movw	r2, #323	; 0x143
 800138a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 800138c:	4b27      	ldr	r3, [pc, #156]	; (800142c <MX_LTDC_Init+0xf8>)
 800138e:	f240 1217 	movw	r2, #279	; 0x117
 8001392:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8001394:	4b25      	ldr	r3, [pc, #148]	; (800142c <MX_LTDC_Init+0xf8>)
 8001396:	f240 1247 	movw	r2, #327	; 0x147
 800139a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800139c:	4b23      	ldr	r3, [pc, #140]	; (800142c <MX_LTDC_Init+0xf8>)
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80013a4:	4b21      	ldr	r3, [pc, #132]	; (800142c <MX_LTDC_Init+0xf8>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80013ac:	4b1f      	ldr	r3, [pc, #124]	; (800142c <MX_LTDC_Init+0xf8>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80013b4:	481d      	ldr	r0, [pc, #116]	; (800142c <MX_LTDC_Init+0xf8>)
 80013b6:	f004 fafd 	bl	80059b4 <HAL_LTDC_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80013c0:	f000 fce0 	bl	8001d84 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80013c8:	23f0      	movs	r3, #240	; 0xf0
 80013ca:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80013d0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80013d4:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80013d6:	2302      	movs	r3, #2
 80013d8:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80013da:	23ff      	movs	r3, #255	; 0xff
 80013dc:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80013e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013e6:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80013e8:	2307      	movs	r3, #7
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80013ec:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80013f2:	23f0      	movs	r3, #240	; 0xf0
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80013f6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80013fa:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	2200      	movs	r2, #0
 8001412:	4619      	mov	r1, r3
 8001414:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_LTDC_Init+0xf8>)
 8001416:	f004 fc55 	bl	8005cc4 <HAL_LTDC_ConfigLayer>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8001420:	f000 fcb0 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	3738      	adds	r7, #56	; 0x38
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	200005dc 	.word	0x200005dc
 8001430:	40016800 	.word	0x40016800

08001434 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001438:	4b17      	ldr	r3, [pc, #92]	; (8001498 <MX_SPI5_Init+0x64>)
 800143a:	4a18      	ldr	r2, [pc, #96]	; (800149c <MX_SPI5_Init+0x68>)
 800143c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800143e:	4b16      	ldr	r3, [pc, #88]	; (8001498 <MX_SPI5_Init+0x64>)
 8001440:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001444:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <MX_SPI5_Init+0x64>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <MX_SPI5_Init+0x64>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_SPI5_Init+0x64>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <MX_SPI5_Init+0x64>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_SPI5_Init+0x64>)
 8001460:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001464:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001466:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_SPI5_Init+0x64>)
 8001468:	2200      	movs	r2, #0
 800146a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <MX_SPI5_Init+0x64>)
 800146e:	2200      	movs	r2, #0
 8001470:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_SPI5_Init+0x64>)
 8001474:	2200      	movs	r2, #0
 8001476:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001478:	4b07      	ldr	r3, [pc, #28]	; (8001498 <MX_SPI5_Init+0x64>)
 800147a:	2200      	movs	r2, #0
 800147c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_SPI5_Init+0x64>)
 8001480:	220a      	movs	r2, #10
 8001482:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001484:	4804      	ldr	r0, [pc, #16]	; (8001498 <MX_SPI5_Init+0x64>)
 8001486:	f005 fd88 	bl	8006f9a <HAL_SPI_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001490:	f000 fc78 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000684 	.word	0x20000684
 800149c:	40015000 	.word	0x40015000

080014a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a6:	f107 0308 	add.w	r3, r7, #8
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b4:	463b      	mov	r3, r7
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014bc:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <MX_TIM1_Init+0x98>)
 80014be:	4a1f      	ldr	r2, [pc, #124]	; (800153c <MX_TIM1_Init+0x9c>)
 80014c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014c2:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <MX_TIM1_Init+0x98>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c8:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <MX_TIM1_Init+0x98>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014ce:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <MX_TIM1_Init+0x98>)
 80014d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d6:	4b18      	ldr	r3, [pc, #96]	; (8001538 <MX_TIM1_Init+0x98>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014dc:	4b16      	ldr	r3, [pc, #88]	; (8001538 <MX_TIM1_Init+0x98>)
 80014de:	2200      	movs	r2, #0
 80014e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <MX_TIM1_Init+0x98>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014e8:	4813      	ldr	r0, [pc, #76]	; (8001538 <MX_TIM1_Init+0x98>)
 80014ea:	f006 fb35 	bl	8007b58 <HAL_TIM_Base_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80014f4:	f000 fc46 	bl	8001d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	4619      	mov	r1, r3
 8001504:	480c      	ldr	r0, [pc, #48]	; (8001538 <MX_TIM1_Init+0x98>)
 8001506:	f006 fcef 	bl	8007ee8 <HAL_TIM_ConfigClockSource>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001510:	f000 fc38 	bl	8001d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001514:	2300      	movs	r3, #0
 8001516:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800151c:	463b      	mov	r3, r7
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_TIM1_Init+0x98>)
 8001522:	f006 ff0b 	bl	800833c <HAL_TIMEx_MasterConfigSynchronization>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800152c:	f000 fc2a 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	200006dc 	.word	0x200006dc
 800153c:	40010000 	.word	0x40010000

08001540 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_USART1_UART_Init+0x4c>)
 8001546:	4a12      	ldr	r2, [pc, #72]	; (8001590 <MX_USART1_UART_Init+0x50>)
 8001548:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <MX_USART1_UART_Init+0x4c>)
 800154c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001550:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_USART1_UART_Init+0x4c>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_USART1_UART_Init+0x4c>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <MX_USART1_UART_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_USART1_UART_Init+0x4c>)
 8001566:	220c      	movs	r2, #12
 8001568:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <MX_USART1_UART_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <MX_USART1_UART_Init+0x4c>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_USART1_UART_Init+0x4c>)
 8001578:	f006 ff70 	bl	800845c <HAL_UART_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001582:	f000 fbff 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000724 	.word	0x20000724
 8001590:	40011000 	.word	0x40011000

08001594 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
 80015a8:	615a      	str	r2, [r3, #20]
 80015aa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80015ac:	4b1f      	ldr	r3, [pc, #124]	; (800162c <MX_FMC_Init+0x98>)
 80015ae:	4a20      	ldr	r2, [pc, #128]	; (8001630 <MX_FMC_Init+0x9c>)
 80015b0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80015b2:	4b1e      	ldr	r3, [pc, #120]	; (800162c <MX_FMC_Init+0x98>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80015b8:	4b1c      	ldr	r3, [pc, #112]	; (800162c <MX_FMC_Init+0x98>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80015be:	4b1b      	ldr	r3, [pc, #108]	; (800162c <MX_FMC_Init+0x98>)
 80015c0:	2204      	movs	r2, #4
 80015c2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80015c4:	4b19      	ldr	r3, [pc, #100]	; (800162c <MX_FMC_Init+0x98>)
 80015c6:	2210      	movs	r2, #16
 80015c8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80015ca:	4b18      	ldr	r3, [pc, #96]	; (800162c <MX_FMC_Init+0x98>)
 80015cc:	2240      	movs	r2, #64	; 0x40
 80015ce:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80015d0:	4b16      	ldr	r3, [pc, #88]	; (800162c <MX_FMC_Init+0x98>)
 80015d2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80015d6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <MX_FMC_Init+0x98>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <MX_FMC_Init+0x98>)
 80015e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015e4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <MX_FMC_Init+0x98>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <MX_FMC_Init+0x98>)
 80015ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80015f4:	2302      	movs	r3, #2
 80015f6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80015f8:	2307      	movs	r3, #7
 80015fa:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80015fc:	2304      	movs	r3, #4
 80015fe:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001600:	2307      	movs	r3, #7
 8001602:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001604:	2303      	movs	r3, #3
 8001606:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001608:	2302      	movs	r3, #2
 800160a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800160c:	2302      	movs	r3, #2
 800160e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	4619      	mov	r1, r3
 8001614:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_FMC_Init+0x98>)
 8001616:	f005 fc2f 	bl	8006e78 <HAL_SDRAM_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001620:	f000 fbb0 	bl	8001d84 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001624:	bf00      	nop
 8001626:	3720      	adds	r7, #32
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000768 	.word	0x20000768
 8001630:	a0000140 	.word	0xa0000140

08001634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08e      	sub	sp, #56	; 0x38
 8001638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
 8001648:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
 800164e:	4b8a      	ldr	r3, [pc, #552]	; (8001878 <MX_GPIO_Init+0x244>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a89      	ldr	r2, [pc, #548]	; (8001878 <MX_GPIO_Init+0x244>)
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b87      	ldr	r3, [pc, #540]	; (8001878 <MX_GPIO_Init+0x244>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	623b      	str	r3, [r7, #32]
 8001664:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
 800166a:	4b83      	ldr	r3, [pc, #524]	; (8001878 <MX_GPIO_Init+0x244>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a82      	ldr	r2, [pc, #520]	; (8001878 <MX_GPIO_Init+0x244>)
 8001670:	f043 0320 	orr.w	r3, r3, #32
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b80      	ldr	r3, [pc, #512]	; (8001878 <MX_GPIO_Init+0x244>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0320 	and.w	r3, r3, #32
 800167e:	61fb      	str	r3, [r7, #28]
 8001680:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
 8001686:	4b7c      	ldr	r3, [pc, #496]	; (8001878 <MX_GPIO_Init+0x244>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a7b      	ldr	r2, [pc, #492]	; (8001878 <MX_GPIO_Init+0x244>)
 800168c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b79      	ldr	r3, [pc, #484]	; (8001878 <MX_GPIO_Init+0x244>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169a:	61bb      	str	r3, [r7, #24]
 800169c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	4b75      	ldr	r3, [pc, #468]	; (8001878 <MX_GPIO_Init+0x244>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a74      	ldr	r2, [pc, #464]	; (8001878 <MX_GPIO_Init+0x244>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b72      	ldr	r3, [pc, #456]	; (8001878 <MX_GPIO_Init+0x244>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	4b6e      	ldr	r3, [pc, #440]	; (8001878 <MX_GPIO_Init+0x244>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a6d      	ldr	r2, [pc, #436]	; (8001878 <MX_GPIO_Init+0x244>)
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b6b      	ldr	r3, [pc, #428]	; (8001878 <MX_GPIO_Init+0x244>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b67      	ldr	r3, [pc, #412]	; (8001878 <MX_GPIO_Init+0x244>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a66      	ldr	r2, [pc, #408]	; (8001878 <MX_GPIO_Init+0x244>)
 80016e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b64      	ldr	r3, [pc, #400]	; (8001878 <MX_GPIO_Init+0x244>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	4b60      	ldr	r3, [pc, #384]	; (8001878 <MX_GPIO_Init+0x244>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a5f      	ldr	r2, [pc, #380]	; (8001878 <MX_GPIO_Init+0x244>)
 80016fc:	f043 0310 	orr.w	r3, r3, #16
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b5d      	ldr	r3, [pc, #372]	; (8001878 <MX_GPIO_Init+0x244>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0310 	and.w	r3, r3, #16
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	4b59      	ldr	r3, [pc, #356]	; (8001878 <MX_GPIO_Init+0x244>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a58      	ldr	r2, [pc, #352]	; (8001878 <MX_GPIO_Init+0x244>)
 8001718:	f043 0308 	orr.w	r3, r3, #8
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b56      	ldr	r3, [pc, #344]	; (8001878 <MX_GPIO_Init+0x244>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	2116      	movs	r1, #22
 800172e:	4853      	ldr	r0, [pc, #332]	; (800187c <MX_GPIO_Init+0x248>)
 8001730:	f003 ff66 	bl	8005600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2180      	movs	r1, #128	; 0x80
 8001738:	4851      	ldr	r0, [pc, #324]	; (8001880 <MX_GPIO_Init+0x24c>)
 800173a:	f003 ff61 	bl	8005600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001744:	484f      	ldr	r0, [pc, #316]	; (8001884 <MX_GPIO_Init+0x250>)
 8001746:	f003 ff5b 	bl	8005600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800174a:	2200      	movs	r2, #0
 800174c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001750:	484d      	ldr	r0, [pc, #308]	; (8001888 <MX_GPIO_Init+0x254>)
 8001752:	f003 ff55 	bl	8005600 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001756:	2316      	movs	r3, #22
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175a:	2301      	movs	r3, #1
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176a:	4619      	mov	r1, r3
 800176c:	4843      	ldr	r0, [pc, #268]	; (800187c <MX_GPIO_Init+0x248>)
 800176e:	f003 fc8f 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001772:	f248 0307 	movw	r3, #32775	; 0x8007
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001778:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001786:	4619      	mov	r1, r3
 8001788:	483d      	ldr	r0, [pc, #244]	; (8001880 <MX_GPIO_Init+0x24c>)
 800178a:	f003 fc81 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001792:	2301      	movs	r3, #1
 8001794:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800179e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a2:	4619      	mov	r1, r3
 80017a4:	4836      	ldr	r0, [pc, #216]	; (8001880 <MX_GPIO_Init+0x24c>)
 80017a6:	f003 fc73 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80017aa:	2320      	movs	r3, #32
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017ae:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80017b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017bc:	4619      	mov	r1, r3
 80017be:	482f      	ldr	r0, [pc, #188]	; (800187c <MX_GPIO_Init+0x248>)
 80017c0:	f003 fc66 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80017c4:	2304      	movs	r3, #4
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80017d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d4:	4619      	mov	r1, r3
 80017d6:	482d      	ldr	r0, [pc, #180]	; (800188c <MX_GPIO_Init+0x258>)
 80017d8:	f003 fc5a 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80017dc:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80017ee:	230c      	movs	r3, #12
 80017f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f6:	4619      	mov	r1, r3
 80017f8:	4824      	ldr	r0, [pc, #144]	; (800188c <MX_GPIO_Init+0x258>)
 80017fa:	f003 fc49 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80017fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001804:	2300      	movs	r3, #0
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800180c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001810:	4619      	mov	r1, r3
 8001812:	481e      	ldr	r0, [pc, #120]	; (800188c <MX_GPIO_Init+0x258>)
 8001814:	f003 fc3c 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001818:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181e:	2300      	movs	r3, #0
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182a:	4619      	mov	r1, r3
 800182c:	4815      	ldr	r0, [pc, #84]	; (8001884 <MX_GPIO_Init+0x250>)
 800182e:	f003 fc2f 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001832:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001838:	2301      	movs	r3, #1
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001848:	4619      	mov	r1, r3
 800184a:	480e      	ldr	r0, [pc, #56]	; (8001884 <MX_GPIO_Init+0x250>)
 800184c:	f003 fc20 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001850:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001856:	2301      	movs	r3, #1
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001866:	4619      	mov	r1, r3
 8001868:	4807      	ldr	r0, [pc, #28]	; (8001888 <MX_GPIO_Init+0x254>)
 800186a:	f003 fc11 	bl	8005090 <HAL_GPIO_Init>

}
 800186e:	bf00      	nop
 8001870:	3738      	adds	r7, #56	; 0x38
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	40020800 	.word	0x40020800
 8001880:	40020000 	.word	0x40020000
 8001884:	40020c00 	.word	0x40020c00
 8001888:	40021800 	.word	0x40021800
 800188c:	40020400 	.word	0x40020400

08001890 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	b29a      	uxth	r2, r3
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295
 80018a4:	68b9      	ldr	r1, [r7, #8]
 80018a6:	4804      	ldr	r0, [pc, #16]	; (80018b8 <_write+0x28>)
 80018a8:	f006 fe25 	bl	80084f6 <HAL_UART_Transmit>
	return len;
 80018ac:	687b      	ldr	r3, [r7, #4]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000724 	.word	0x20000724

080018bc <HAL_LTDC_ReloadEventCallback>:

void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  ReloadFlag = 1;
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <HAL_LTDC_ReloadEventCallback+0x1c>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	601a      	str	r2, [r3, #0]
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	200007a0 	.word	0x200007a0

080018dc <Rewrite_History>:

void Rewrite_History()
{
 80018dc:	b5b0      	push	{r4, r5, r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
	float newx_average = 0;
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
	float newy_average = 0;
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
	float newz_average = 0;
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	607b      	str	r3, [r7, #4]
	for(int i=1; i<=9; i++)
 80018f4:	2301      	movs	r3, #1
 80018f6:	603b      	str	r3, [r7, #0]
 80018f8:	e047      	b.n	800198a <Rewrite_History+0xae>
	{
		x_history[i-1] = x_history[i];
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	49a0      	ldr	r1, [pc, #640]	; (8001b80 <Rewrite_History+0x2a4>)
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	0092      	lsls	r2, r2, #2
 8001904:	440a      	add	r2, r1
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	499d      	ldr	r1, [pc, #628]	; (8001b80 <Rewrite_History+0x2a4>)
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	601a      	str	r2, [r3, #0]
		y_history[i-1] = y_history[i];
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	3b01      	subs	r3, #1
 8001914:	499b      	ldr	r1, [pc, #620]	; (8001b84 <Rewrite_History+0x2a8>)
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	0092      	lsls	r2, r2, #2
 800191a:	440a      	add	r2, r1
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	4999      	ldr	r1, [pc, #612]	; (8001b84 <Rewrite_History+0x2a8>)
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	440b      	add	r3, r1
 8001924:	601a      	str	r2, [r3, #0]
		z_history[i-1] = z_history[i];
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	3b01      	subs	r3, #1
 800192a:	4997      	ldr	r1, [pc, #604]	; (8001b88 <Rewrite_History+0x2ac>)
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	0092      	lsls	r2, r2, #2
 8001930:	440a      	add	r2, r1
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	4994      	ldr	r1, [pc, #592]	; (8001b88 <Rewrite_History+0x2ac>)
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	601a      	str	r2, [r3, #0]
		newx_average += x_history[i];
 800193c:	4a90      	ldr	r2, [pc, #576]	; (8001b80 <Rewrite_History+0x2a4>)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	edd3 7a00 	vldr	s15, [r3]
 8001948:	ed97 7a03 	vldr	s14, [r7, #12]
 800194c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001950:	edc7 7a03 	vstr	s15, [r7, #12]
		newy_average += y_history[i];
 8001954:	4a8b      	ldr	r2, [pc, #556]	; (8001b84 <Rewrite_History+0x2a8>)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	edd3 7a00 	vldr	s15, [r3]
 8001960:	ed97 7a02 	vldr	s14, [r7, #8]
 8001964:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001968:	edc7 7a02 	vstr	s15, [r7, #8]
		newz_average += z_history[i];
 800196c:	4a86      	ldr	r2, [pc, #536]	; (8001b88 <Rewrite_History+0x2ac>)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	edd3 7a00 	vldr	s15, [r3]
 8001978:	ed97 7a01 	vldr	s14, [r7, #4]
 800197c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001980:	edc7 7a01 	vstr	s15, [r7, #4]
	for(int i=1; i<=9; i++)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	3301      	adds	r3, #1
 8001988:	603b      	str	r3, [r7, #0]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	2b09      	cmp	r3, #9
 800198e:	ddb4      	ble.n	80018fa <Rewrite_History+0x1e>
	}
	BSP_GYRO_GetXYZ(gyroscope);
 8001990:	487e      	ldr	r0, [pc, #504]	; (8001b8c <Rewrite_History+0x2b0>)
 8001992:	f001 fd91 	bl	80034b8 <BSP_GYRO_GetXYZ>
	newx_average += gyroscope[1];
 8001996:	4b7d      	ldr	r3, [pc, #500]	; (8001b8c <Rewrite_History+0x2b0>)
 8001998:	edd3 7a01 	vldr	s15, [r3, #4]
 800199c:	ed97 7a03 	vldr	s14, [r7, #12]
 80019a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a4:	edc7 7a03 	vstr	s15, [r7, #12]
	newy_average += gyroscope[2];
 80019a8:	4b78      	ldr	r3, [pc, #480]	; (8001b8c <Rewrite_History+0x2b0>)
 80019aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80019ae:	ed97 7a02 	vldr	s14, [r7, #8]
 80019b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b6:	edc7 7a02 	vstr	s15, [r7, #8]
	newz_average += gyroscope[3];
 80019ba:	4b74      	ldr	r3, [pc, #464]	; (8001b8c <Rewrite_History+0x2b0>)
 80019bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80019c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80019c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c8:	edc7 7a01 	vstr	s15, [r7, #4]

	x_history[10] = gyroscope[0];
 80019cc:	4b6f      	ldr	r3, [pc, #444]	; (8001b8c <Rewrite_History+0x2b0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a6b      	ldr	r2, [pc, #428]	; (8001b80 <Rewrite_History+0x2a4>)
 80019d2:	6293      	str	r3, [r2, #40]	; 0x28
	y_history[10] = gyroscope[1];
 80019d4:	4b6d      	ldr	r3, [pc, #436]	; (8001b8c <Rewrite_History+0x2b0>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	4a6a      	ldr	r2, [pc, #424]	; (8001b84 <Rewrite_History+0x2a8>)
 80019da:	6293      	str	r3, [r2, #40]	; 0x28
	z_history[10] = gyroscope[2];
 80019dc:	4b6b      	ldr	r3, [pc, #428]	; (8001b8c <Rewrite_History+0x2b0>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	4a69      	ldr	r2, [pc, #420]	; (8001b88 <Rewrite_History+0x2ac>)
 80019e2:	6293      	str	r3, [r2, #40]	; 0x28

	x_average = (newx_average / 10.0) / 1000.0 - 3.0;
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f7fe fdbf 	bl	8000568 <__aeabi_f2d>
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	4b68      	ldr	r3, [pc, #416]	; (8001b90 <Rewrite_History+0x2b4>)
 80019f0:	f7fe ff3c 	bl	800086c <__aeabi_ddiv>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	4b64      	ldr	r3, [pc, #400]	; (8001b94 <Rewrite_History+0x2b8>)
 8001a02:	f7fe ff33 	bl	800086c <__aeabi_ddiv>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	4b61      	ldr	r3, [pc, #388]	; (8001b98 <Rewrite_History+0x2bc>)
 8001a14:	f7fe fc48 	bl	80002a8 <__aeabi_dsub>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f7ff f8f2 	bl	8000c08 <__aeabi_d2f>
 8001a24:	4603      	mov	r3, r0
 8001a26:	4a5d      	ldr	r2, [pc, #372]	; (8001b9c <Rewrite_History+0x2c0>)
 8001a28:	6013      	str	r3, [r2, #0]
	y_average = (newy_average / 10.0) / 1000.0 - 3.0;
 8001a2a:	68b8      	ldr	r0, [r7, #8]
 8001a2c:	f7fe fd9c 	bl	8000568 <__aeabi_f2d>
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	4b56      	ldr	r3, [pc, #344]	; (8001b90 <Rewrite_History+0x2b4>)
 8001a36:	f7fe ff19 	bl	800086c <__aeabi_ddiv>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4610      	mov	r0, r2
 8001a40:	4619      	mov	r1, r3
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	4b53      	ldr	r3, [pc, #332]	; (8001b94 <Rewrite_History+0x2b8>)
 8001a48:	f7fe ff10 	bl	800086c <__aeabi_ddiv>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4610      	mov	r0, r2
 8001a52:	4619      	mov	r1, r3
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	4b4f      	ldr	r3, [pc, #316]	; (8001b98 <Rewrite_History+0x2bc>)
 8001a5a:	f7fe fc25 	bl	80002a8 <__aeabi_dsub>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4610      	mov	r0, r2
 8001a64:	4619      	mov	r1, r3
 8001a66:	f7ff f8cf 	bl	8000c08 <__aeabi_d2f>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4a4c      	ldr	r2, [pc, #304]	; (8001ba0 <Rewrite_History+0x2c4>)
 8001a6e:	6013      	str	r3, [r2, #0]
	z_average = (newz_average / 10.0) / 1000.0 - 3.0;
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7fe fd79 	bl	8000568 <__aeabi_f2d>
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	4b45      	ldr	r3, [pc, #276]	; (8001b90 <Rewrite_History+0x2b4>)
 8001a7c:	f7fe fef6 	bl	800086c <__aeabi_ddiv>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	4b41      	ldr	r3, [pc, #260]	; (8001b94 <Rewrite_History+0x2b8>)
 8001a8e:	f7fe feed 	bl	800086c <__aeabi_ddiv>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	4b3e      	ldr	r3, [pc, #248]	; (8001b98 <Rewrite_History+0x2bc>)
 8001aa0:	f7fe fc02 	bl	80002a8 <__aeabi_dsub>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f7ff f8ac 	bl	8000c08 <__aeabi_d2f>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4a3c      	ldr	r2, [pc, #240]	; (8001ba4 <Rewrite_History+0x2c8>)
 8001ab4:	6013      	str	r3, [r2, #0]

	AngleX += (x_average / 100.0);
 8001ab6:	4b3c      	ldr	r3, [pc, #240]	; (8001ba8 <Rewrite_History+0x2cc>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fd54 	bl	8000568 <__aeabi_f2d>
 8001ac0:	4604      	mov	r4, r0
 8001ac2:	460d      	mov	r5, r1
 8001ac4:	4b35      	ldr	r3, [pc, #212]	; (8001b9c <Rewrite_History+0x2c0>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fd4d 	bl	8000568 <__aeabi_f2d>
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	4b36      	ldr	r3, [pc, #216]	; (8001bac <Rewrite_History+0x2d0>)
 8001ad4:	f7fe feca 	bl	800086c <__aeabi_ddiv>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4620      	mov	r0, r4
 8001ade:	4629      	mov	r1, r5
 8001ae0:	f7fe fbe4 	bl	80002ac <__adddf3>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	f7ff f88c 	bl	8000c08 <__aeabi_d2f>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4a2d      	ldr	r2, [pc, #180]	; (8001ba8 <Rewrite_History+0x2cc>)
 8001af4:	6013      	str	r3, [r2, #0]
	AngleY += (y_average / 100.0);
 8001af6:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <Rewrite_History+0x2d4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fd34 	bl	8000568 <__aeabi_f2d>
 8001b00:	4604      	mov	r4, r0
 8001b02:	460d      	mov	r5, r1
 8001b04:	4b26      	ldr	r3, [pc, #152]	; (8001ba0 <Rewrite_History+0x2c4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fd2d 	bl	8000568 <__aeabi_f2d>
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	4b26      	ldr	r3, [pc, #152]	; (8001bac <Rewrite_History+0x2d0>)
 8001b14:	f7fe feaa 	bl	800086c <__aeabi_ddiv>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	4629      	mov	r1, r5
 8001b20:	f7fe fbc4 	bl	80002ac <__adddf3>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f7ff f86c 	bl	8000c08 <__aeabi_d2f>
 8001b30:	4603      	mov	r3, r0
 8001b32:	4a1f      	ldr	r2, [pc, #124]	; (8001bb0 <Rewrite_History+0x2d4>)
 8001b34:	6013      	str	r3, [r2, #0]
	AngleZ += (z_average / 100.0);
 8001b36:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <Rewrite_History+0x2d8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fd14 	bl	8000568 <__aeabi_f2d>
 8001b40:	4604      	mov	r4, r0
 8001b42:	460d      	mov	r5, r1
 8001b44:	4b17      	ldr	r3, [pc, #92]	; (8001ba4 <Rewrite_History+0x2c8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fd0d 	bl	8000568 <__aeabi_f2d>
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	4b16      	ldr	r3, [pc, #88]	; (8001bac <Rewrite_History+0x2d0>)
 8001b54:	f7fe fe8a 	bl	800086c <__aeabi_ddiv>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	4629      	mov	r1, r5
 8001b60:	f7fe fba4 	bl	80002ac <__adddf3>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4610      	mov	r0, r2
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	f7ff f84c 	bl	8000c08 <__aeabi_d2f>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4a10      	ldr	r2, [pc, #64]	; (8001bb4 <Rewrite_History+0x2d8>)
 8001b74:	6013      	str	r3, [r2, #0]
}
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200007a4 	.word	0x200007a4
 8001b84:	200007c8 	.word	0x200007c8
 8001b88:	200007ec 	.word	0x200007ec
 8001b8c:	20000810 	.word	0x20000810
 8001b90:	40240000 	.word	0x40240000
 8001b94:	408f4000 	.word	0x408f4000
 8001b98:	40080000 	.word	0x40080000
 8001b9c:	2000081c 	.word	0x2000081c
 8001ba0:	20000820 	.word	0x20000820
 8001ba4:	20000824 	.word	0x20000824
 8001ba8:	20000830 	.word	0x20000830
 8001bac:	40590000 	.word	0x40590000
 8001bb0:	2000082c 	.word	0x2000082c
 8001bb4:	20000834 	.word	0x20000834

08001bb8 <StartDataGathering>:

void StartDataGathering(void const * argument)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Rewrite_History();
 8001bc0:	f7ff fe8c 	bl	80018dc <Rewrite_History>
		osDelay(2);
 8001bc4:	2002      	movs	r0, #2
 8001bc6:	f007 fde2 	bl	800978e <osDelay>
		Rewrite_History();
 8001bca:	e7f9      	b.n	8001bc0 <StartDataGathering+0x8>

08001bcc <CheckForBoundaries>:
	}
}

void CheckForBoundaries()
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
	if(RightYPos <= 0)
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <CheckForBoundaries+0x40>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	dc06      	bgt.n	8001be6 <CheckForBoundaries+0x1a>
	{
		RightYPos = 0;
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <CheckForBoundaries+0x40>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
		RightYSpeed = 0;
 8001bde:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <CheckForBoundaries+0x44>)
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
	}
	if(RightYPos >= 270)
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <CheckForBoundaries+0x40>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001bee:	db07      	blt.n	8001c00 <CheckForBoundaries+0x34>
	{
		RightYPos = 270;
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <CheckForBoundaries+0x40>)
 8001bf2:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001bf6:	601a      	str	r2, [r3, #0]
		RightYSpeed = 0;
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <CheckForBoundaries+0x44>)
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
	}
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	2000000c 	.word	0x2000000c
 8001c10:	20000828 	.word	0x20000828

08001c14 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001c14:	b5b0      	push	{r4, r5, r7, lr}
 8001c16:	b098      	sub	sp, #96	; 0x60
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int test = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	65fb      	str	r3, [r7, #92]	; 0x5c
	char line3[MAX_LINE_LENGTH];

  /* Infinite loop */
  for(;;)
  {
	  osDelay(33);
 8001c20:	2021      	movs	r0, #33	; 0x21
 8001c22:	f007 fdb4 	bl	800978e <osDelay>
	  test++;
 8001c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c28:	3301      	adds	r3, #1
 8001c2a:	65fb      	str	r3, [r7, #92]	; 0x5c
	  RightYSpeed += AngleX / 25.0;
 8001c2c:	4b40      	ldr	r3, [pc, #256]	; (8001d30 <StartDefaultTask+0x11c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fc99 	bl	8000568 <__aeabi_f2d>
 8001c36:	4604      	mov	r4, r0
 8001c38:	460d      	mov	r5, r1
 8001c3a:	4b3e      	ldr	r3, [pc, #248]	; (8001d34 <StartDefaultTask+0x120>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fc92 	bl	8000568 <__aeabi_f2d>
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	4b3b      	ldr	r3, [pc, #236]	; (8001d38 <StartDefaultTask+0x124>)
 8001c4a:	f7fe fe0f 	bl	800086c <__aeabi_ddiv>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4620      	mov	r0, r4
 8001c54:	4629      	mov	r1, r5
 8001c56:	f7fe fb29 	bl	80002ac <__adddf3>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	f7fe ffd1 	bl	8000c08 <__aeabi_d2f>
 8001c66:	4603      	mov	r3, r0
 8001c68:	4a31      	ldr	r2, [pc, #196]	; (8001d30 <StartDefaultTask+0x11c>)
 8001c6a:	6013      	str	r3, [r2, #0]

	  sprintf(line0, "%.5f", AngleY);
 8001c6c:	4b33      	ldr	r3, [pc, #204]	; (8001d3c <StartDefaultTask+0x128>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fc79 	bl	8000568 <__aeabi_f2d>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001c7e:	4930      	ldr	r1, [pc, #192]	; (8001d40 <StartDefaultTask+0x12c>)
 8001c80:	f00a f890 	bl	800bda4 <siprintf>
	  sprintf(line1, "%.5f", x_average);
 8001c84:	4b2f      	ldr	r3, [pc, #188]	; (8001d44 <StartDefaultTask+0x130>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7fe fc6d 	bl	8000568 <__aeabi_f2d>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001c96:	492a      	ldr	r1, [pc, #168]	; (8001d40 <StartDefaultTask+0x12c>)
 8001c98:	f00a f884 	bl	800bda4 <siprintf>
	  sprintf(line2, "%.5f", y_average);
 8001c9c:	4b2a      	ldr	r3, [pc, #168]	; (8001d48 <StartDefaultTask+0x134>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fc61 	bl	8000568 <__aeabi_f2d>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	f107 0020 	add.w	r0, r7, #32
 8001cae:	4924      	ldr	r1, [pc, #144]	; (8001d40 <StartDefaultTask+0x12c>)
 8001cb0:	f00a f878 	bl	800bda4 <siprintf>
	  sprintf(line3, "%.5f", z_average);
 8001cb4:	4b25      	ldr	r3, [pc, #148]	; (8001d4c <StartDefaultTask+0x138>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fc55 	bl	8000568 <__aeabi_f2d>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	f107 000c 	add.w	r0, r7, #12
 8001cc6:	491e      	ldr	r1, [pc, #120]	; (8001d40 <StartDefaultTask+0x12c>)
 8001cc8:	f00a f86c 	bl	800bda4 <siprintf>

	  RightYPos +=RightYSpeed;
 8001ccc:	4b20      	ldr	r3, [pc, #128]	; (8001d50 <StartDefaultTask+0x13c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	ee07 3a90 	vmov	s15, r3
 8001cd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cd8:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <StartDefaultTask+0x11c>)
 8001cda:	edd3 7a00 	vldr	s15, [r3]
 8001cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ce6:	ee17 2a90 	vmov	r2, s15
 8001cea:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <StartDefaultTask+0x13c>)
 8001cec:	601a      	str	r2, [r3, #0]
	  CheckForBoundaries();
 8001cee:	f7ff ff6d 	bl	8001bcc <CheckForBoundaries>

	  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001cf2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001cf6:	f001 fd35 	bl	8003764 <BSP_LCD_Clear>
	  //BSP_LCD_DisplayStringAtLine(0, line0);
	  //BSP_LCD_DisplayStringAtLine(1, line1);
	  //BSP_LCD_DisplayStringAtLine(2, line2);
	  //BSP_LCD_DisplayStringAtLine(3, line3);
	  BSP_LCD_FillCircle(120, 160, 10);
 8001cfa:	220a      	movs	r2, #10
 8001cfc:	21a0      	movs	r1, #160	; 0xa0
 8001cfe:	2078      	movs	r0, #120	; 0x78
 8001d00:	f001 feda 	bl	8003ab8 <BSP_LCD_FillCircle>
	  BSP_LCD_FillRect( LeftXPos, LeftYPos, 10, 50);
 8001d04:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <StartDefaultTask+0x140>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	b298      	uxth	r0, r3
 8001d0a:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <StartDefaultTask+0x144>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	b299      	uxth	r1, r3
 8001d10:	2332      	movs	r3, #50	; 0x32
 8001d12:	220a      	movs	r2, #10
 8001d14:	f001 fe76 	bl	8003a04 <BSP_LCD_FillRect>
	  BSP_LCD_FillRect( RightXPos, RightYPos, 10, 50);
 8001d18:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <StartDefaultTask+0x148>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	b298      	uxth	r0, r3
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <StartDefaultTask+0x13c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	b299      	uxth	r1, r3
 8001d24:	2332      	movs	r3, #50	; 0x32
 8001d26:	220a      	movs	r2, #10
 8001d28:	f001 fe6c 	bl	8003a04 <BSP_LCD_FillRect>
	  osDelay(33);
 8001d2c:	e778      	b.n	8001c20 <StartDefaultTask+0xc>
 8001d2e:	bf00      	nop
 8001d30:	20000828 	.word	0x20000828
 8001d34:	20000830 	.word	0x20000830
 8001d38:	40390000 	.word	0x40390000
 8001d3c:	2000082c 	.word	0x2000082c
 8001d40:	0800f6a4 	.word	0x0800f6a4
 8001d44:	2000081c 	.word	0x2000081c
 8001d48:	20000820 	.word	0x20000820
 8001d4c:	20000824 	.word	0x20000824
 8001d50:	2000000c 	.word	0x2000000c
 8001d54:	20000000 	.word	0x20000000
 8001d58:	20000004 	.word	0x20000004
 8001d5c:	20000008 	.word	0x20000008

08001d60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d101      	bne.n	8001d76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d72:	f002 fa5f 	bl	8004234 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40001000 	.word	0x40001000

08001d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d88:	b672      	cpsid	i
}
 8001d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <Error_Handler+0x8>
	...

08001d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	607b      	str	r3, [r7, #4]
 8001d9a:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_MspInit+0x54>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	4a11      	ldr	r2, [pc, #68]	; (8001de4 <HAL_MspInit+0x54>)
 8001da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da4:	6453      	str	r3, [r2, #68]	; 0x44
 8001da6:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <HAL_MspInit+0x54>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	603b      	str	r3, [r7, #0]
 8001db6:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <HAL_MspInit+0x54>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <HAL_MspInit+0x54>)
 8001dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc2:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <HAL_MspInit+0x54>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	210f      	movs	r1, #15
 8001dd2:	f06f 0001 	mvn.w	r0, #1
 8001dd6:	f002 fb29 	bl	800442c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800

08001de8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a0b      	ldr	r2, [pc, #44]	; (8001e24 <HAL_CRC_MspInit+0x3c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d10d      	bne.n	8001e16 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <HAL_CRC_MspInit+0x40>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a09      	ldr	r2, [pc, #36]	; (8001e28 <HAL_CRC_MspInit+0x40>)
 8001e04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <HAL_CRC_MspInit+0x40>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001e16:	bf00      	nop
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40023000 	.word	0x40023000
 8001e28:	40023800 	.word	0x40023800

08001e2c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a0e      	ldr	r2, [pc, #56]	; (8001e74 <HAL_DMA2D_MspInit+0x48>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d115      	bne.n	8001e6a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <HAL_DMA2D_MspInit+0x4c>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a0c      	ldr	r2, [pc, #48]	; (8001e78 <HAL_DMA2D_MspInit+0x4c>)
 8001e48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <HAL_DMA2D_MspInit+0x4c>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2105      	movs	r1, #5
 8001e5e:	205a      	movs	r0, #90	; 0x5a
 8001e60:	f002 fae4 	bl	800442c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001e64:	205a      	movs	r0, #90	; 0x5a
 8001e66:	f002 fafd 	bl	8004464 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001e6a:	bf00      	nop
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	4002b000 	.word	0x4002b000
 8001e78:	40023800 	.word	0x40023800

08001e7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08a      	sub	sp, #40	; 0x28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a29      	ldr	r2, [pc, #164]	; (8001f40 <HAL_I2C_MspInit+0xc4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d14b      	bne.n	8001f36 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <HAL_I2C_MspInit+0xc8>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a27      	ldr	r2, [pc, #156]	; (8001f44 <HAL_I2C_MspInit+0xc8>)
 8001ea8:	f043 0304 	orr.w	r3, r3, #4
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b25      	ldr	r3, [pc, #148]	; (8001f44 <HAL_I2C_MspInit+0xc8>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <HAL_I2C_MspInit+0xc8>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a20      	ldr	r2, [pc, #128]	; (8001f44 <HAL_I2C_MspInit+0xc8>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <HAL_I2C_MspInit+0xc8>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001ed6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001edc:	2312      	movs	r3, #18
 8001ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ee8:	2304      	movs	r3, #4
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4815      	ldr	r0, [pc, #84]	; (8001f48 <HAL_I2C_MspInit+0xcc>)
 8001ef4:	f003 f8cc 	bl	8005090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001ef8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001efe:	2312      	movs	r3, #18
 8001f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f02:	2301      	movs	r3, #1
 8001f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f06:	2300      	movs	r3, #0
 8001f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f0a:	2304      	movs	r3, #4
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001f0e:	f107 0314 	add.w	r3, r7, #20
 8001f12:	4619      	mov	r1, r3
 8001f14:	480d      	ldr	r0, [pc, #52]	; (8001f4c <HAL_I2C_MspInit+0xd0>)
 8001f16:	f003 f8bb 	bl	8005090 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_I2C_MspInit+0xc8>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	4a08      	ldr	r2, [pc, #32]	; (8001f44 <HAL_I2C_MspInit+0xc8>)
 8001f24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f28:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2a:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_I2C_MspInit+0xc8>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001f36:	bf00      	nop
 8001f38:	3728      	adds	r7, #40	; 0x28
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40005c00 	.word	0x40005c00
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40020800 	.word	0x40020800
 8001f4c:	40020000 	.word	0x40020000

08001f50 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b09a      	sub	sp, #104	; 0x68
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f6c:	2230      	movs	r2, #48	; 0x30
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4618      	mov	r0, r3
 8001f72:	f008 ff80 	bl	800ae76 <memset>
  if(hltdc->Instance==LTDC)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a85      	ldr	r2, [pc, #532]	; (8002190 <HAL_LTDC_MspInit+0x240>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	f040 8103 	bne.w	8002188 <HAL_LTDC_MspInit+0x238>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001f82:	2308      	movs	r3, #8
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001f86:	23c0      	movs	r3, #192	; 0xc0
 8001f88:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001f8a:	2304      	movs	r3, #4
 8001f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8001f8e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001f92:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f004 fdad 	bl	8006af8 <HAL_RCCEx_PeriphCLKConfig>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8001fa4:	f7ff feee 	bl	8001d84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001fa8:	2300      	movs	r3, #0
 8001faa:	623b      	str	r3, [r7, #32]
 8001fac:	4b79      	ldr	r3, [pc, #484]	; (8002194 <HAL_LTDC_MspInit+0x244>)
 8001fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb0:	4a78      	ldr	r2, [pc, #480]	; (8002194 <HAL_LTDC_MspInit+0x244>)
 8001fb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001fb6:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb8:	4b76      	ldr	r3, [pc, #472]	; (8002194 <HAL_LTDC_MspInit+0x244>)
 8001fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fc0:	623b      	str	r3, [r7, #32]
 8001fc2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
 8001fc8:	4b72      	ldr	r3, [pc, #456]	; (8002194 <HAL_LTDC_MspInit+0x244>)
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	4a71      	ldr	r2, [pc, #452]	; (8002194 <HAL_LTDC_MspInit+0x244>)
 8001fce:	f043 0320 	orr.w	r3, r3, #32
 8001fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd4:	4b6f      	ldr	r3, [pc, #444]	; (8002194 <HAL_LTDC_MspInit+0x244>)
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	f003 0320 	and.w	r3, r3, #32
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61bb      	str	r3, [r7, #24]
 8001fe4:	4b6b      	ldr	r3, [pc, #428]	; (8002194 <HAL_LTDC_MspInit+0x244>)
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	4a6a      	ldr	r2, [pc, #424]	; (8002194 <HAL_LTDC_MspInit+0x244>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff0:	4b68      	ldr	r3, [pc, #416]	; (8002194 <HAL_LTDC_MspInit+0x244>)
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	61bb      	str	r3, [r7, #24]
 8001ffa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	4b64      	ldr	r3, [pc, #400]	; (8002194 <HAL_LTDC_MspInit+0x244>)
 8002002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002004:	4a63      	ldr	r2, [pc, #396]	; (8002194 <HAL_LTDC_MspInit+0x244>)
 8002006:	f043 0302 	orr.w	r3, r3, #2
 800200a:	6313      	str	r3, [r2, #48]	; 0x30
 800200c:	4b61      	ldr	r3, [pc, #388]	; (8002194 <HAL_LTDC_MspInit+0x244>)
 800200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002018:	2300      	movs	r3, #0
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	4b5d      	ldr	r3, [pc, #372]	; (8002194 <HAL_LTDC_MspInit+0x244>)
 800201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002020:	4a5c      	ldr	r2, [pc, #368]	; (8002194 <HAL_LTDC_MspInit+0x244>)
 8002022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002026:	6313      	str	r3, [r2, #48]	; 0x30
 8002028:	4b5a      	ldr	r3, [pc, #360]	; (8002194 <HAL_LTDC_MspInit+0x244>)
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	4b56      	ldr	r3, [pc, #344]	; (8002194 <HAL_LTDC_MspInit+0x244>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	4a55      	ldr	r2, [pc, #340]	; (8002194 <HAL_LTDC_MspInit+0x244>)
 800203e:	f043 0304 	orr.w	r3, r3, #4
 8002042:	6313      	str	r3, [r2, #48]	; 0x30
 8002044:	4b53      	ldr	r3, [pc, #332]	; (8002194 <HAL_LTDC_MspInit+0x244>)
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002050:	2300      	movs	r3, #0
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	4b4f      	ldr	r3, [pc, #316]	; (8002194 <HAL_LTDC_MspInit+0x244>)
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002058:	4a4e      	ldr	r2, [pc, #312]	; (8002194 <HAL_LTDC_MspInit+0x244>)
 800205a:	f043 0308 	orr.w	r3, r3, #8
 800205e:	6313      	str	r3, [r2, #48]	; 0x30
 8002060:	4b4c      	ldr	r3, [pc, #304]	; (8002194 <HAL_LTDC_MspInit+0x244>)
 8002062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800206c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002070:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800207e:	230e      	movs	r3, #14
 8002080:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002082:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002086:	4619      	mov	r1, r3
 8002088:	4843      	ldr	r0, [pc, #268]	; (8002198 <HAL_LTDC_MspInit+0x248>)
 800208a:	f003 f801 	bl	8005090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800208e:	f641 0358 	movw	r3, #6232	; 0x1858
 8002092:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002094:	2302      	movs	r3, #2
 8002096:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209c:	2300      	movs	r3, #0
 800209e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020a0:	230e      	movs	r3, #14
 80020a2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020a8:	4619      	mov	r1, r3
 80020aa:	483c      	ldr	r0, [pc, #240]	; (800219c <HAL_LTDC_MspInit+0x24c>)
 80020ac:	f002 fff0 	bl	8005090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80020b0:	2303      	movs	r3, #3
 80020b2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020bc:	2300      	movs	r3, #0
 80020be:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80020c0:	2309      	movs	r3, #9
 80020c2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020c8:	4619      	mov	r1, r3
 80020ca:	4835      	ldr	r0, [pc, #212]	; (80021a0 <HAL_LTDC_MspInit+0x250>)
 80020cc:	f002 ffe0 	bl	8005090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80020d0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80020d4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2302      	movs	r3, #2
 80020d8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020de:	2300      	movs	r3, #0
 80020e0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020e2:	230e      	movs	r3, #14
 80020e4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020ea:	4619      	mov	r1, r3
 80020ec:	482c      	ldr	r0, [pc, #176]	; (80021a0 <HAL_LTDC_MspInit+0x250>)
 80020ee:	f002 ffcf 	bl	8005090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80020f2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80020f6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f8:	2302      	movs	r3, #2
 80020fa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002100:	2300      	movs	r3, #0
 8002102:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002104:	230e      	movs	r3, #14
 8002106:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002108:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800210c:	4619      	mov	r1, r3
 800210e:	4825      	ldr	r0, [pc, #148]	; (80021a4 <HAL_LTDC_MspInit+0x254>)
 8002110:	f002 ffbe 	bl	8005090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002114:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002118:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211a:	2302      	movs	r3, #2
 800211c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002122:	2300      	movs	r3, #0
 8002124:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002126:	230e      	movs	r3, #14
 8002128:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800212a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800212e:	4619      	mov	r1, r3
 8002130:	481d      	ldr	r0, [pc, #116]	; (80021a8 <HAL_LTDC_MspInit+0x258>)
 8002132:	f002 ffad 	bl	8005090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002136:	2348      	movs	r3, #72	; 0x48
 8002138:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213a:	2302      	movs	r3, #2
 800213c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002142:	2300      	movs	r3, #0
 8002144:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002146:	230e      	movs	r3, #14
 8002148:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800214a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800214e:	4619      	mov	r1, r3
 8002150:	4816      	ldr	r0, [pc, #88]	; (80021ac <HAL_LTDC_MspInit+0x25c>)
 8002152:	f002 ff9d 	bl	8005090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002156:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800215a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	2302      	movs	r3, #2
 800215e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002164:	2300      	movs	r3, #0
 8002166:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002168:	2309      	movs	r3, #9
 800216a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800216c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002170:	4619      	mov	r1, r3
 8002172:	480c      	ldr	r0, [pc, #48]	; (80021a4 <HAL_LTDC_MspInit+0x254>)
 8002174:	f002 ff8c 	bl	8005090 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002178:	2200      	movs	r2, #0
 800217a:	2105      	movs	r1, #5
 800217c:	2058      	movs	r0, #88	; 0x58
 800217e:	f002 f955 	bl	800442c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002182:	2058      	movs	r0, #88	; 0x58
 8002184:	f002 f96e 	bl	8004464 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002188:	bf00      	nop
 800218a:	3768      	adds	r7, #104	; 0x68
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40016800 	.word	0x40016800
 8002194:	40023800 	.word	0x40023800
 8002198:	40021400 	.word	0x40021400
 800219c:	40020000 	.word	0x40020000
 80021a0:	40020400 	.word	0x40020400
 80021a4:	40021800 	.word	0x40021800
 80021a8:	40020800 	.word	0x40020800
 80021ac:	40020c00 	.word	0x40020c00

080021b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08a      	sub	sp, #40	; 0x28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a19      	ldr	r2, [pc, #100]	; (8002234 <HAL_SPI_MspInit+0x84>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d12c      	bne.n	800222c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	4b18      	ldr	r3, [pc, #96]	; (8002238 <HAL_SPI_MspInit+0x88>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	4a17      	ldr	r2, [pc, #92]	; (8002238 <HAL_SPI_MspInit+0x88>)
 80021dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021e0:	6453      	str	r3, [r2, #68]	; 0x44
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <HAL_SPI_MspInit+0x88>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	4b11      	ldr	r3, [pc, #68]	; (8002238 <HAL_SPI_MspInit+0x88>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	4a10      	ldr	r2, [pc, #64]	; (8002238 <HAL_SPI_MspInit+0x88>)
 80021f8:	f043 0320 	orr.w	r3, r3, #32
 80021fc:	6313      	str	r3, [r2, #48]	; 0x30
 80021fe:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <HAL_SPI_MspInit+0x88>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f003 0320 	and.w	r3, r3, #32
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800220a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800220e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002210:	2302      	movs	r3, #2
 8002212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002218:	2300      	movs	r3, #0
 800221a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800221c:	2305      	movs	r3, #5
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	4619      	mov	r1, r3
 8002226:	4805      	ldr	r0, [pc, #20]	; (800223c <HAL_SPI_MspInit+0x8c>)
 8002228:	f002 ff32 	bl	8005090 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800222c:	bf00      	nop
 800222e:	3728      	adds	r7, #40	; 0x28
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40015000 	.word	0x40015000
 8002238:	40023800 	.word	0x40023800
 800223c:	40021400 	.word	0x40021400

08002240 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a08      	ldr	r2, [pc, #32]	; (8002270 <HAL_SPI_MspDeInit+0x30>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d10a      	bne.n	8002268 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002252:	4b08      	ldr	r3, [pc, #32]	; (8002274 <HAL_SPI_MspDeInit+0x34>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	4a07      	ldr	r2, [pc, #28]	; (8002274 <HAL_SPI_MspDeInit+0x34>)
 8002258:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800225c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800225e:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002262:	4805      	ldr	r0, [pc, #20]	; (8002278 <HAL_SPI_MspDeInit+0x38>)
 8002264:	f003 f8c0 	bl	80053e8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002268:	bf00      	nop
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40015000 	.word	0x40015000
 8002274:	40023800 	.word	0x40023800
 8002278:	40021400 	.word	0x40021400

0800227c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0b      	ldr	r2, [pc, #44]	; (80022b8 <HAL_TIM_Base_MspInit+0x3c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d10d      	bne.n	80022aa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <HAL_TIM_Base_MspInit+0x40>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	4a09      	ldr	r2, [pc, #36]	; (80022bc <HAL_TIM_Base_MspInit+0x40>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6453      	str	r3, [r2, #68]	; 0x44
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <HAL_TIM_Base_MspInit+0x40>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80022aa:	bf00      	nop
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40010000 	.word	0x40010000
 80022bc:	40023800 	.word	0x40023800

080022c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a1d      	ldr	r2, [pc, #116]	; (8002354 <HAL_UART_MspInit+0x94>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d134      	bne.n	800234c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	4b1c      	ldr	r3, [pc, #112]	; (8002358 <HAL_UART_MspInit+0x98>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	4a1b      	ldr	r2, [pc, #108]	; (8002358 <HAL_UART_MspInit+0x98>)
 80022ec:	f043 0310 	orr.w	r3, r3, #16
 80022f0:	6453      	str	r3, [r2, #68]	; 0x44
 80022f2:	4b19      	ldr	r3, [pc, #100]	; (8002358 <HAL_UART_MspInit+0x98>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	f003 0310 	and.w	r3, r3, #16
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	4b15      	ldr	r3, [pc, #84]	; (8002358 <HAL_UART_MspInit+0x98>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4a14      	ldr	r2, [pc, #80]	; (8002358 <HAL_UART_MspInit+0x98>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4b12      	ldr	r3, [pc, #72]	; (8002358 <HAL_UART_MspInit+0x98>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800231a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800231e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002320:	2302      	movs	r3, #2
 8002322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002328:	2303      	movs	r3, #3
 800232a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800232c:	2307      	movs	r3, #7
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	4619      	mov	r1, r3
 8002336:	4809      	ldr	r0, [pc, #36]	; (800235c <HAL_UART_MspInit+0x9c>)
 8002338:	f002 feaa 	bl	8005090 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800233c:	2200      	movs	r2, #0
 800233e:	2105      	movs	r1, #5
 8002340:	2025      	movs	r0, #37	; 0x25
 8002342:	f002 f873 	bl	800442c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002346:	2025      	movs	r0, #37	; 0x25
 8002348:	f002 f88c 	bl	8004464 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800234c:	bf00      	nop
 800234e:	3728      	adds	r7, #40	; 0x28
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40011000 	.word	0x40011000
 8002358:	40023800 	.word	0x40023800
 800235c:	40020000 	.word	0x40020000

08002360 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002374:	4b3b      	ldr	r3, [pc, #236]	; (8002464 <HAL_FMC_MspInit+0x104>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d16f      	bne.n	800245c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800237c:	4b39      	ldr	r3, [pc, #228]	; (8002464 <HAL_FMC_MspInit+0x104>)
 800237e:	2201      	movs	r2, #1
 8002380:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	603b      	str	r3, [r7, #0]
 8002386:	4b38      	ldr	r3, [pc, #224]	; (8002468 <HAL_FMC_MspInit+0x108>)
 8002388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238a:	4a37      	ldr	r2, [pc, #220]	; (8002468 <HAL_FMC_MspInit+0x108>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	6393      	str	r3, [r2, #56]	; 0x38
 8002392:	4b35      	ldr	r3, [pc, #212]	; (8002468 <HAL_FMC_MspInit+0x108>)
 8002394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800239e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80023a2:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ac:	2303      	movs	r3, #3
 80023ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023b0:	230c      	movs	r3, #12
 80023b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023b4:	1d3b      	adds	r3, r7, #4
 80023b6:	4619      	mov	r1, r3
 80023b8:	482c      	ldr	r0, [pc, #176]	; (800246c <HAL_FMC_MspInit+0x10c>)
 80023ba:	f002 fe69 	bl	8005090 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80023be:	2301      	movs	r3, #1
 80023c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c2:	2302      	movs	r3, #2
 80023c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ca:	2303      	movs	r3, #3
 80023cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023ce:	230c      	movs	r3, #12
 80023d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80023d2:	1d3b      	adds	r3, r7, #4
 80023d4:	4619      	mov	r1, r3
 80023d6:	4826      	ldr	r0, [pc, #152]	; (8002470 <HAL_FMC_MspInit+0x110>)
 80023d8:	f002 fe5a 	bl	8005090 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80023dc:	f248 1333 	movw	r3, #33075	; 0x8133
 80023e0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e2:	2302      	movs	r3, #2
 80023e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ea:	2303      	movs	r3, #3
 80023ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023ee:	230c      	movs	r3, #12
 80023f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023f2:	1d3b      	adds	r3, r7, #4
 80023f4:	4619      	mov	r1, r3
 80023f6:	481f      	ldr	r0, [pc, #124]	; (8002474 <HAL_FMC_MspInit+0x114>)
 80023f8:	f002 fe4a 	bl	8005090 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80023fc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002400:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	2302      	movs	r3, #2
 8002404:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240a:	2303      	movs	r3, #3
 800240c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800240e:	230c      	movs	r3, #12
 8002410:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002412:	1d3b      	adds	r3, r7, #4
 8002414:	4619      	mov	r1, r3
 8002416:	4818      	ldr	r0, [pc, #96]	; (8002478 <HAL_FMC_MspInit+0x118>)
 8002418:	f002 fe3a 	bl	8005090 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800241c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002420:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242a:	2303      	movs	r3, #3
 800242c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800242e:	230c      	movs	r3, #12
 8002430:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	4619      	mov	r1, r3
 8002436:	4811      	ldr	r0, [pc, #68]	; (800247c <HAL_FMC_MspInit+0x11c>)
 8002438:	f002 fe2a 	bl	8005090 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800243c:	2360      	movs	r3, #96	; 0x60
 800243e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002448:	2303      	movs	r3, #3
 800244a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800244c:	230c      	movs	r3, #12
 800244e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002450:	1d3b      	adds	r3, r7, #4
 8002452:	4619      	mov	r1, r3
 8002454:	480a      	ldr	r0, [pc, #40]	; (8002480 <HAL_FMC_MspInit+0x120>)
 8002456:	f002 fe1b 	bl	8005090 <HAL_GPIO_Init>
 800245a:	e000      	b.n	800245e <HAL_FMC_MspInit+0xfe>
    return;
 800245c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	2000083c 	.word	0x2000083c
 8002468:	40023800 	.word	0x40023800
 800246c:	40021400 	.word	0x40021400
 8002470:	40020800 	.word	0x40020800
 8002474:	40021800 	.word	0x40021800
 8002478:	40021000 	.word	0x40021000
 800247c:	40020c00 	.word	0x40020c00
 8002480:	40020400 	.word	0x40020400

08002484 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800248c:	f7ff ff68 	bl	8002360 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08c      	sub	sp, #48	; 0x30
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80024a8:	2200      	movs	r2, #0
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	2036      	movs	r0, #54	; 0x36
 80024ae:	f001 ffbd 	bl	800442c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024b2:	2036      	movs	r0, #54	; 0x36
 80024b4:	f001 ffd6 	bl	8004464 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	4b1f      	ldr	r3, [pc, #124]	; (800253c <HAL_InitTick+0xa4>)
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	4a1e      	ldr	r2, [pc, #120]	; (800253c <HAL_InitTick+0xa4>)
 80024c2:	f043 0310 	orr.w	r3, r3, #16
 80024c6:	6413      	str	r3, [r2, #64]	; 0x40
 80024c8:	4b1c      	ldr	r3, [pc, #112]	; (800253c <HAL_InitTick+0xa4>)
 80024ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024cc:	f003 0310 	and.w	r3, r3, #16
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024d4:	f107 0210 	add.w	r2, r7, #16
 80024d8:	f107 0314 	add.w	r3, r7, #20
 80024dc:	4611      	mov	r1, r2
 80024de:	4618      	mov	r0, r3
 80024e0:	f004 fad8 	bl	8006a94 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80024e4:	f004 faae 	bl	8006a44 <HAL_RCC_GetPCLK1Freq>
 80024e8:	4603      	mov	r3, r0
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f0:	4a13      	ldr	r2, [pc, #76]	; (8002540 <HAL_InitTick+0xa8>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	0c9b      	lsrs	r3, r3, #18
 80024f8:	3b01      	subs	r3, #1
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80024fc:	4b11      	ldr	r3, [pc, #68]	; (8002544 <HAL_InitTick+0xac>)
 80024fe:	4a12      	ldr	r2, [pc, #72]	; (8002548 <HAL_InitTick+0xb0>)
 8002500:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002502:	4b10      	ldr	r3, [pc, #64]	; (8002544 <HAL_InitTick+0xac>)
 8002504:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002508:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800250a:	4a0e      	ldr	r2, [pc, #56]	; (8002544 <HAL_InitTick+0xac>)
 800250c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <HAL_InitTick+0xac>)
 8002512:	2200      	movs	r2, #0
 8002514:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002516:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_InitTick+0xac>)
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800251c:	4809      	ldr	r0, [pc, #36]	; (8002544 <HAL_InitTick+0xac>)
 800251e:	f005 fb1b 	bl	8007b58 <HAL_TIM_Base_Init>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d104      	bne.n	8002532 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002528:	4806      	ldr	r0, [pc, #24]	; (8002544 <HAL_InitTick+0xac>)
 800252a:	f005 fb65 	bl	8007bf8 <HAL_TIM_Base_Start_IT>
 800252e:	4603      	mov	r3, r0
 8002530:	e000      	b.n	8002534 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
}
 8002534:	4618      	mov	r0, r3
 8002536:	3730      	adds	r7, #48	; 0x30
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40023800 	.word	0x40023800
 8002540:	431bde83 	.word	0x431bde83
 8002544:	20000840 	.word	0x20000840
 8002548:	40001000 	.word	0x40001000

0800254c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002550:	e7fe      	b.n	8002550 <NMI_Handler+0x4>

08002552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002556:	e7fe      	b.n	8002556 <HardFault_Handler+0x4>

08002558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800255c:	e7fe      	b.n	800255c <MemManage_Handler+0x4>

0800255e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002562:	e7fe      	b.n	8002562 <BusFault_Handler+0x4>

08002564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002568:	e7fe      	b.n	8002568 <UsageFault_Handler+0x4>

0800256a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <USART1_IRQHandler+0x10>)
 800257e:	f006 f84d 	bl	800861c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000724 	.word	0x20000724

0800258c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002590:	4802      	ldr	r0, [pc, #8]	; (800259c <TIM6_DAC_IRQHandler+0x10>)
 8002592:	f005 fba1 	bl	8007cd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000840 	.word	0x20000840

080025a0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80025a4:	4802      	ldr	r0, [pc, #8]	; (80025b0 <LTDC_IRQHandler+0x10>)
 80025a6:	f003 fad5 	bl	8005b54 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	200005dc 	.word	0x200005dc

080025b4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80025b8:	4802      	ldr	r0, [pc, #8]	; (80025c4 <DMA2D_IRQHandler+0x10>)
 80025ba:	f002 fb2a 	bl	8004c12 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000548 	.word	0x20000548

080025c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
	return 1;
 80025cc:	2301      	movs	r3, #1
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <_kill>:

int _kill(int pid, int sig)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80025e2:	f008 fb17 	bl	800ac14 <__errno>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2216      	movs	r2, #22
 80025ea:	601a      	str	r2, [r3, #0]
	return -1;
 80025ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <_exit>:

void _exit (int status)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002600:	f04f 31ff 	mov.w	r1, #4294967295
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff ffe7 	bl	80025d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800260a:	e7fe      	b.n	800260a <_exit+0x12>

0800260c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	e00a      	b.n	8002634 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800261e:	f3af 8000 	nop.w
 8002622:	4601      	mov	r1, r0
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	60ba      	str	r2, [r7, #8]
 800262a:	b2ca      	uxtb	r2, r1
 800262c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	3301      	adds	r3, #1
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	429a      	cmp	r2, r3
 800263a:	dbf0      	blt.n	800261e <_read+0x12>
	}

return len;
 800263c:	687b      	ldr	r3, [r7, #4]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
	return -1;
 800264e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800266e:	605a      	str	r2, [r3, #4]
	return 0;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <_isatty>:

int _isatty(int file)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
	return 1;
 8002686:	2301      	movs	r3, #1
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
	return 0;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026b8:	4a14      	ldr	r2, [pc, #80]	; (800270c <_sbrk+0x5c>)
 80026ba:	4b15      	ldr	r3, [pc, #84]	; (8002710 <_sbrk+0x60>)
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026c4:	4b13      	ldr	r3, [pc, #76]	; (8002714 <_sbrk+0x64>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d102      	bne.n	80026d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026cc:	4b11      	ldr	r3, [pc, #68]	; (8002714 <_sbrk+0x64>)
 80026ce:	4a12      	ldr	r2, [pc, #72]	; (8002718 <_sbrk+0x68>)
 80026d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026d2:	4b10      	ldr	r3, [pc, #64]	; (8002714 <_sbrk+0x64>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d207      	bcs.n	80026f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026e0:	f008 fa98 	bl	800ac14 <__errno>
 80026e4:	4603      	mov	r3, r0
 80026e6:	220c      	movs	r2, #12
 80026e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295
 80026ee:	e009      	b.n	8002704 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026f0:	4b08      	ldr	r3, [pc, #32]	; (8002714 <_sbrk+0x64>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026f6:	4b07      	ldr	r3, [pc, #28]	; (8002714 <_sbrk+0x64>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4413      	add	r3, r2
 80026fe:	4a05      	ldr	r2, [pc, #20]	; (8002714 <_sbrk+0x64>)
 8002700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002702:	68fb      	ldr	r3, [r7, #12]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	20030000 	.word	0x20030000
 8002710:	00000400 	.word	0x00000400
 8002714:	20000888 	.word	0x20000888
 8002718:	20008c50 	.word	0x20008c50

0800271c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <SystemInit+0x20>)
 8002722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002726:	4a05      	ldr	r2, [pc, #20]	; (800273c <SystemInit+0x20>)
 8002728:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800272c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002778 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002744:	480d      	ldr	r0, [pc, #52]	; (800277c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002746:	490e      	ldr	r1, [pc, #56]	; (8002780 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002748:	4a0e      	ldr	r2, [pc, #56]	; (8002784 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800274a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800274c:	e002      	b.n	8002754 <LoopCopyDataInit>

0800274e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800274e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002752:	3304      	adds	r3, #4

08002754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002758:	d3f9      	bcc.n	800274e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800275a:	4a0b      	ldr	r2, [pc, #44]	; (8002788 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800275c:	4c0b      	ldr	r4, [pc, #44]	; (800278c <LoopFillZerobss+0x26>)
  movs r3, #0
 800275e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002760:	e001      	b.n	8002766 <LoopFillZerobss>

08002762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002764:	3204      	adds	r2, #4

08002766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002768:	d3fb      	bcc.n	8002762 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800276a:	f7ff ffd7 	bl	800271c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800276e:	f008 fb4d 	bl	800ae0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002772:	f7fe fc85 	bl	8001080 <main>
  bx  lr    
 8002776:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002778:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800277c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002780:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 8002784:	08011644 	.word	0x08011644
  ldr r2, =_sbss
 8002788:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 800278c:	20008c4c 	.word	0x20008c4c

08002790 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002790:	e7fe      	b.n	8002790 <ADC_IRQHandler>

08002792 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002796:	f000 fc73 	bl	8003080 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800279a:	20ca      	movs	r0, #202	; 0xca
 800279c:	f000 f95d 	bl	8002a5a <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80027a0:	20c3      	movs	r0, #195	; 0xc3
 80027a2:	f000 f967 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80027a6:	2008      	movs	r0, #8
 80027a8:	f000 f964 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80027ac:	2050      	movs	r0, #80	; 0x50
 80027ae:	f000 f961 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80027b2:	20cf      	movs	r0, #207	; 0xcf
 80027b4:	f000 f951 	bl	8002a5a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80027b8:	2000      	movs	r0, #0
 80027ba:	f000 f95b 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80027be:	20c1      	movs	r0, #193	; 0xc1
 80027c0:	f000 f958 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80027c4:	2030      	movs	r0, #48	; 0x30
 80027c6:	f000 f955 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80027ca:	20ed      	movs	r0, #237	; 0xed
 80027cc:	f000 f945 	bl	8002a5a <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80027d0:	2064      	movs	r0, #100	; 0x64
 80027d2:	f000 f94f 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80027d6:	2003      	movs	r0, #3
 80027d8:	f000 f94c 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80027dc:	2012      	movs	r0, #18
 80027de:	f000 f949 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80027e2:	2081      	movs	r0, #129	; 0x81
 80027e4:	f000 f946 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80027e8:	20e8      	movs	r0, #232	; 0xe8
 80027ea:	f000 f936 	bl	8002a5a <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80027ee:	2085      	movs	r0, #133	; 0x85
 80027f0:	f000 f940 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80027f4:	2000      	movs	r0, #0
 80027f6:	f000 f93d 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80027fa:	2078      	movs	r0, #120	; 0x78
 80027fc:	f000 f93a 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002800:	20cb      	movs	r0, #203	; 0xcb
 8002802:	f000 f92a 	bl	8002a5a <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002806:	2039      	movs	r0, #57	; 0x39
 8002808:	f000 f934 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 800280c:	202c      	movs	r0, #44	; 0x2c
 800280e:	f000 f931 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002812:	2000      	movs	r0, #0
 8002814:	f000 f92e 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002818:	2034      	movs	r0, #52	; 0x34
 800281a:	f000 f92b 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800281e:	2002      	movs	r0, #2
 8002820:	f000 f928 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002824:	20f7      	movs	r0, #247	; 0xf7
 8002826:	f000 f918 	bl	8002a5a <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800282a:	2020      	movs	r0, #32
 800282c:	f000 f922 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002830:	20ea      	movs	r0, #234	; 0xea
 8002832:	f000 f912 	bl	8002a5a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002836:	2000      	movs	r0, #0
 8002838:	f000 f91c 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800283c:	2000      	movs	r0, #0
 800283e:	f000 f919 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002842:	20b1      	movs	r0, #177	; 0xb1
 8002844:	f000 f909 	bl	8002a5a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002848:	2000      	movs	r0, #0
 800284a:	f000 f913 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800284e:	201b      	movs	r0, #27
 8002850:	f000 f910 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002854:	20b6      	movs	r0, #182	; 0xb6
 8002856:	f000 f900 	bl	8002a5a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800285a:	200a      	movs	r0, #10
 800285c:	f000 f90a 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002860:	20a2      	movs	r0, #162	; 0xa2
 8002862:	f000 f907 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002866:	20c0      	movs	r0, #192	; 0xc0
 8002868:	f000 f8f7 	bl	8002a5a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800286c:	2010      	movs	r0, #16
 800286e:	f000 f901 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002872:	20c1      	movs	r0, #193	; 0xc1
 8002874:	f000 f8f1 	bl	8002a5a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002878:	2010      	movs	r0, #16
 800287a:	f000 f8fb 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 800287e:	20c5      	movs	r0, #197	; 0xc5
 8002880:	f000 f8eb 	bl	8002a5a <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002884:	2045      	movs	r0, #69	; 0x45
 8002886:	f000 f8f5 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800288a:	2015      	movs	r0, #21
 800288c:	f000 f8f2 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002890:	20c7      	movs	r0, #199	; 0xc7
 8002892:	f000 f8e2 	bl	8002a5a <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002896:	2090      	movs	r0, #144	; 0x90
 8002898:	f000 f8ec 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 800289c:	2036      	movs	r0, #54	; 0x36
 800289e:	f000 f8dc 	bl	8002a5a <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80028a2:	20c8      	movs	r0, #200	; 0xc8
 80028a4:	f000 f8e6 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80028a8:	20f2      	movs	r0, #242	; 0xf2
 80028aa:	f000 f8d6 	bl	8002a5a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80028ae:	2000      	movs	r0, #0
 80028b0:	f000 f8e0 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80028b4:	20b0      	movs	r0, #176	; 0xb0
 80028b6:	f000 f8d0 	bl	8002a5a <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80028ba:	20c2      	movs	r0, #194	; 0xc2
 80028bc:	f000 f8da 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80028c0:	20b6      	movs	r0, #182	; 0xb6
 80028c2:	f000 f8ca 	bl	8002a5a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80028c6:	200a      	movs	r0, #10
 80028c8:	f000 f8d4 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80028cc:	20a7      	movs	r0, #167	; 0xa7
 80028ce:	f000 f8d1 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80028d2:	2027      	movs	r0, #39	; 0x27
 80028d4:	f000 f8ce 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80028d8:	2004      	movs	r0, #4
 80028da:	f000 f8cb 	bl	8002a74 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80028de:	202a      	movs	r0, #42	; 0x2a
 80028e0:	f000 f8bb 	bl	8002a5a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80028e4:	2000      	movs	r0, #0
 80028e6:	f000 f8c5 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80028ea:	2000      	movs	r0, #0
 80028ec:	f000 f8c2 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80028f0:	2000      	movs	r0, #0
 80028f2:	f000 f8bf 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80028f6:	20ef      	movs	r0, #239	; 0xef
 80028f8:	f000 f8bc 	bl	8002a74 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80028fc:	202b      	movs	r0, #43	; 0x2b
 80028fe:	f000 f8ac 	bl	8002a5a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002902:	2000      	movs	r0, #0
 8002904:	f000 f8b6 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002908:	2000      	movs	r0, #0
 800290a:	f000 f8b3 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800290e:	2001      	movs	r0, #1
 8002910:	f000 f8b0 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002914:	203f      	movs	r0, #63	; 0x3f
 8002916:	f000 f8ad 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800291a:	20f6      	movs	r0, #246	; 0xf6
 800291c:	f000 f89d 	bl	8002a5a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002920:	2001      	movs	r0, #1
 8002922:	f000 f8a7 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002926:	2000      	movs	r0, #0
 8002928:	f000 f8a4 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 800292c:	2006      	movs	r0, #6
 800292e:	f000 f8a1 	bl	8002a74 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002932:	202c      	movs	r0, #44	; 0x2c
 8002934:	f000 f891 	bl	8002a5a <ili9341_WriteReg>
  LCD_Delay(200);
 8002938:	20c8      	movs	r0, #200	; 0xc8
 800293a:	f000 fc8f 	bl	800325c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800293e:	2026      	movs	r0, #38	; 0x26
 8002940:	f000 f88b 	bl	8002a5a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002944:	2001      	movs	r0, #1
 8002946:	f000 f895 	bl	8002a74 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800294a:	20e0      	movs	r0, #224	; 0xe0
 800294c:	f000 f885 	bl	8002a5a <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002950:	200f      	movs	r0, #15
 8002952:	f000 f88f 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002956:	2029      	movs	r0, #41	; 0x29
 8002958:	f000 f88c 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 800295c:	2024      	movs	r0, #36	; 0x24
 800295e:	f000 f889 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002962:	200c      	movs	r0, #12
 8002964:	f000 f886 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002968:	200e      	movs	r0, #14
 800296a:	f000 f883 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800296e:	2009      	movs	r0, #9
 8002970:	f000 f880 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002974:	204e      	movs	r0, #78	; 0x4e
 8002976:	f000 f87d 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800297a:	2078      	movs	r0, #120	; 0x78
 800297c:	f000 f87a 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002980:	203c      	movs	r0, #60	; 0x3c
 8002982:	f000 f877 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002986:	2009      	movs	r0, #9
 8002988:	f000 f874 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 800298c:	2013      	movs	r0, #19
 800298e:	f000 f871 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002992:	2005      	movs	r0, #5
 8002994:	f000 f86e 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002998:	2017      	movs	r0, #23
 800299a:	f000 f86b 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800299e:	2011      	movs	r0, #17
 80029a0:	f000 f868 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80029a4:	2000      	movs	r0, #0
 80029a6:	f000 f865 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80029aa:	20e1      	movs	r0, #225	; 0xe1
 80029ac:	f000 f855 	bl	8002a5a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80029b0:	2000      	movs	r0, #0
 80029b2:	f000 f85f 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80029b6:	2016      	movs	r0, #22
 80029b8:	f000 f85c 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80029bc:	201b      	movs	r0, #27
 80029be:	f000 f859 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80029c2:	2004      	movs	r0, #4
 80029c4:	f000 f856 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80029c8:	2011      	movs	r0, #17
 80029ca:	f000 f853 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80029ce:	2007      	movs	r0, #7
 80029d0:	f000 f850 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80029d4:	2031      	movs	r0, #49	; 0x31
 80029d6:	f000 f84d 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80029da:	2033      	movs	r0, #51	; 0x33
 80029dc:	f000 f84a 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80029e0:	2042      	movs	r0, #66	; 0x42
 80029e2:	f000 f847 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80029e6:	2005      	movs	r0, #5
 80029e8:	f000 f844 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80029ec:	200c      	movs	r0, #12
 80029ee:	f000 f841 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80029f2:	200a      	movs	r0, #10
 80029f4:	f000 f83e 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80029f8:	2028      	movs	r0, #40	; 0x28
 80029fa:	f000 f83b 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80029fe:	202f      	movs	r0, #47	; 0x2f
 8002a00:	f000 f838 	bl	8002a74 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002a04:	200f      	movs	r0, #15
 8002a06:	f000 f835 	bl	8002a74 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8002a0a:	2011      	movs	r0, #17
 8002a0c:	f000 f825 	bl	8002a5a <ili9341_WriteReg>
  LCD_Delay(200);
 8002a10:	20c8      	movs	r0, #200	; 0xc8
 8002a12:	f000 fc23 	bl	800325c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002a16:	2029      	movs	r0, #41	; 0x29
 8002a18:	f000 f81f 	bl	8002a5a <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002a1c:	202c      	movs	r0, #44	; 0x2c
 8002a1e:	f000 f81c 	bl	8002a5a <ili9341_WriteReg>
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002a2a:	f000 fb29 	bl	8003080 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8002a2e:	2103      	movs	r1, #3
 8002a30:	20d3      	movs	r0, #211	; 0xd3
 8002a32:	f000 f82c 	bl	8002a8e <ili9341_ReadData>
 8002a36:	4603      	mov	r3, r0
 8002a38:	b29b      	uxth	r3, r3
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002a42:	2029      	movs	r0, #41	; 0x29
 8002a44:	f000 f809 	bl	8002a5a <ili9341_WriteReg>
}
 8002a48:	bf00      	nop
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002a50:	2028      	movs	r0, #40	; 0x28
 8002a52:	f000 f802 	bl	8002a5a <ili9341_WriteReg>
}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b082      	sub	sp, #8
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	4603      	mov	r3, r0
 8002a62:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 fba4 	bl	80031b4 <LCD_IO_WriteReg>
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002a7e:	88fb      	ldrh	r3, [r7, #6]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fb75 	bl	8003170 <LCD_IO_WriteData>
}
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b082      	sub	sp, #8
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	4603      	mov	r3, r0
 8002a96:	460a      	mov	r2, r1
 8002a98:	80fb      	strh	r3, [r7, #6]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002a9e:	797a      	ldrb	r2, [r7, #5]
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 fba7 	bl	80031f8 <LCD_IO_ReadData>
 8002aaa:	4603      	mov	r3, r0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002ab8:	23f0      	movs	r3, #240	; 0xf0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002ac8:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	4603      	mov	r3, r0
 8002ade:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 8002ae4:	f000 fbc6 	bl	8003274 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8002ae8:	88fb      	ldrh	r3, [r7, #6]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8002aee:	f107 030f 	add.w	r3, r7, #15
 8002af2:	2201      	movs	r2, #1
 8002af4:	2120      	movs	r1, #32
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 fc08 	bl	800330c <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct >> 8);
 8002afc:	88fb      	ldrh	r3, [r7, #6]
 8002afe:	0a1b      	lsrs	r3, r3, #8
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8002b06:	f107 030f 	add.w	r3, r7, #15
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	2123      	movs	r1, #35	; 0x23
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 fbfc 	bl	800330c <GYRO_IO_Write>
}
 8002b14:	bf00      	nop
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b082      	sub	sp, #8
 8002b2e:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 8002b30:	f000 fba0 	bl	8003274 <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8002b34:	1dfb      	adds	r3, r7, #7
 8002b36:	2201      	movs	r2, #1
 8002b38:	210f      	movs	r1, #15
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 fc18 	bl	8003370 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 8002b40:	79fb      	ldrb	r3, [r7, #7]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002b50:	1dfb      	adds	r3, r7, #7
 8002b52:	2201      	movs	r2, #1
 8002b54:	2124      	movs	r1, #36	; 0x24
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fc0a 	bl	8003370 <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002b66:	1dfb      	adds	r3, r7, #7
 8002b68:	2201      	movs	r2, #1
 8002b6a:	2124      	movs	r1, #36	; 0x24
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 fbcd 	bl	800330c <GYRO_IO_Write>
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b084      	sub	sp, #16
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	4603      	mov	r3, r0
 8002b82:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002b84:	2300      	movs	r3, #0
 8002b86:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8002b88:	88fb      	ldrh	r3, [r7, #6]
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8002b8e:	f107 030f 	add.w	r3, r7, #15
 8002b92:	2201      	movs	r2, #1
 8002b94:	2120      	movs	r1, #32
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 fbb8 	bl	800330c <GYRO_IO_Write>
}
 8002b9c:	bf00      	nop
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	73fb      	strb	r3, [r7, #15]
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8002bb6:	f107 030f 	add.w	r3, r7, #15
 8002bba:	2201      	movs	r2, #1
 8002bbc:	2130      	movs	r1, #48	; 0x30
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 fbd6 	bl	8003370 <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8002bc4:	f107 030e 	add.w	r3, r7, #14
 8002bc8:	2201      	movs	r2, #1
 8002bca:	2122      	movs	r1, #34	; 0x22
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 fbcf 	bl	8003370 <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
 8002bd4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8002bdc:	88fb      	ldrh	r3, [r7, #6]
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	121b      	asrs	r3, r3, #8
 8002be2:	b25a      	sxtb	r2, r3
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	b25b      	sxtb	r3, r3
 8002be8:	4313      	orrs	r3, r2
 8002bea:	b25b      	sxtb	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 8002bf0:	7bbb      	ldrb	r3, [r7, #14]
 8002bf2:	f023 0320 	bic.w	r3, r3, #32
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	7bbb      	ldrb	r3, [r7, #14]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8002c06:	f107 030f 	add.w	r3, r7, #15
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	2130      	movs	r1, #48	; 0x30
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fb7c 	bl	800330c <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8002c14:	f107 030e 	add.w	r3, r7, #14
 8002c18:	2201      	movs	r2, #1
 8002c1a:	2122      	movs	r1, #34	; 0x22
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 fb75 	bl	800330c <GYRO_IO_Write>
}
 8002c22:	bf00      	nop
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b084      	sub	sp, #16
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	4603      	mov	r3, r0
 8002c32:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8002c34:	f107 030f 	add.w	r3, r7, #15
 8002c38:	2201      	movs	r2, #1
 8002c3a:	2122      	movs	r1, #34	; 0x22
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 fb97 	bl	8003370 <GYRO_IO_Read>

  if(IntSel == L3GD20_INT1)
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10a      	bne.n	8002c5e <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
 8002c4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	73fb      	strb	r3, [r7, #15]
 8002c5c:	e00c      	b.n	8002c78 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d109      	bne.n	8002c78 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	f023 0308 	bic.w	r3, r3, #8
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	f043 0308 	orr.w	r3, r3, #8
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8002c78:	f107 030f 	add.w	r3, r7, #15
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	2122      	movs	r1, #34	; 0x22
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 fb43 	bl	800330c <GYRO_IO_Write>
}
 8002c86:	bf00      	nop
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b084      	sub	sp, #16
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	4603      	mov	r3, r0
 8002c96:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8002c98:	f107 030f 	add.w	r3, r7, #15
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	2122      	movs	r1, #34	; 0x22
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 fb65 	bl	8003370 <GYRO_IO_Read>

  if(IntSel == L3GD20_INT1)
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d107      	bne.n	8002cbc <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
 8002cb8:	73fb      	strb	r3, [r7, #15]
 8002cba:	e009      	b.n	8002cd0 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d106      	bne.n	8002cd0 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
 8002cc4:	f023 0308 	bic.w	r3, r3, #8
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
 8002cce:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8002cd0:	f107 030f 	add.w	r3, r7, #15
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	2122      	movs	r1, #34	; 0x22
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 fb17 	bl	800330c <GYRO_IO_Write>
}
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b084      	sub	sp, #16
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4603      	mov	r3, r0
 8002cee:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8002cf0:	f107 030f 	add.w	r3, r7, #15
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	2121      	movs	r1, #33	; 0x21
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 fb39 	bl	8003370 <GYRO_IO_Read>

  tmpreg &= 0xC0;
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
 8002d00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8002d08:	7bfa      	ldrb	r2, [r7, #15]
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8002d12:	f107 030f 	add.w	r3, r7, #15
 8002d16:	2201      	movs	r2, #1
 8002d18:	2121      	movs	r1, #33	; 0x21
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 faf6 	bl	800330c <GYRO_IO_Write>
}
 8002d20:	bf00      	nop
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002d32:	f107 030f 	add.w	r3, r7, #15
 8002d36:	2201      	movs	r2, #1
 8002d38:	2124      	movs	r1, #36	; 0x24
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 fb18 	bl	8003370 <GYRO_IO_Read>

  tmpreg &= 0xEF;
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	f023 0310 	bic.w	r3, r3, #16
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 8002d4a:	7bfa      	ldrb	r2, [r7, #15]
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002d54:	f107 030f 	add.w	r3, r7, #15
 8002d58:	2201      	movs	r2, #1
 8002d5a:	2124      	movs	r1, #36	; 0x24
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 fad5 	bl	800330c <GYRO_IO_Write>
}
 8002d62:	bf00      	nop
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08a      	sub	sp, #40	; 0x28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8002d74:	2300      	movs	r3, #0
 8002d76:	61bb      	str	r3, [r7, #24]
 8002d78:	2300      	movs	r3, #0
 8002d7a:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8002d7c:	f107 0310 	add.w	r3, r7, #16
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8002d94:	f107 030f 	add.w	r3, r7, #15
 8002d98:	2201      	movs	r2, #1
 8002d9a:	2123      	movs	r1, #35	; 0x23
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 fae7 	bl	8003370 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8002da2:	f107 0318 	add.w	r3, r7, #24
 8002da6:	2206      	movs	r2, #6
 8002da8:	2128      	movs	r1, #40	; 0x28
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 fae0 	bl	8003370 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d123      	bne.n	8002e02 <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	623b      	str	r3, [r7, #32]
 8002dbe:	e01c      	b.n	8002dfa <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	3328      	adds	r3, #40	; 0x28
 8002dc8:	443b      	add	r3, r7
 8002dca:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	3328      	adds	r3, #40	; 0x28
 8002dda:	443b      	add	r3, r7
 8002ddc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	4413      	add	r3, r2
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	b21a      	sxth	r2, r3
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	3328      	adds	r3, #40	; 0x28
 8002dee:	443b      	add	r3, r7
 8002df0:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	3301      	adds	r3, #1
 8002df8:	623b      	str	r3, [r7, #32]
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	dddf      	ble.n	8002dc0 <L3GD20_ReadXYZAngRate+0x54>
 8002e00:	e022      	b.n	8002e48 <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8002e02:	2300      	movs	r3, #0
 8002e04:	623b      	str	r3, [r7, #32]
 8002e06:	e01c      	b.n	8002e42 <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	3328      	adds	r3, #40	; 0x28
 8002e0e:	443b      	add	r3, r7
 8002e10:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	021b      	lsls	r3, r3, #8
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	3301      	adds	r3, #1
 8002e20:	3328      	adds	r3, #40	; 0x28
 8002e22:	443b      	add	r3, r7
 8002e24:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	b21a      	sxth	r2, r3
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	3328      	adds	r3, #40	; 0x28
 8002e36:	443b      	add	r3, r7
 8002e38:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	623b      	str	r3, [r7, #32]
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	dddf      	ble.n	8002e08 <L3GD20_ReadXYZAngRate+0x9c>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
 8002e4a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e4e:	2b20      	cmp	r3, #32
 8002e50:	d00c      	beq.n	8002e6c <L3GD20_ReadXYZAngRate+0x100>
 8002e52:	2b20      	cmp	r3, #32
 8002e54:	dc0d      	bgt.n	8002e72 <L3GD20_ReadXYZAngRate+0x106>
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <L3GD20_ReadXYZAngRate+0xf4>
 8002e5a:	2b10      	cmp	r3, #16
 8002e5c:	d003      	beq.n	8002e66 <L3GD20_ReadXYZAngRate+0xfa>
 8002e5e:	e008      	b.n	8002e72 <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8002e60:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <L3GD20_ReadXYZAngRate+0x14c>)
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8002e64:	e005      	b.n	8002e72 <L3GD20_ReadXYZAngRate+0x106>

  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8002e66:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <L3GD20_ReadXYZAngRate+0x150>)
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8002e6a:	e002      	b.n	8002e72 <L3GD20_ReadXYZAngRate+0x106>

  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8002e6c:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <L3GD20_ReadXYZAngRate+0x154>)
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8002e70:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8002e72:	2300      	movs	r3, #0
 8002e74:	623b      	str	r3, [r7, #32]
 8002e76:	e016      	b.n	8002ea6 <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	3328      	adds	r3, #40	; 0x28
 8002e7e:	443b      	add	r3, r7
 8002e80:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8002e84:	ee07 3a90 	vmov	s15, r3
 8002e88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	4413      	add	r3, r2
 8002e94:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e9c:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	623b      	str	r3, [r7, #32]
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	dde5      	ble.n	8002e78 <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8002eac:	bf00      	nop
 8002eae:	bf00      	nop
 8002eb0:	3728      	adds	r7, #40	; 0x28
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	410c0000 	.word	0x410c0000
 8002ebc:	418c0000 	.word	0x418c0000
 8002ec0:	428c0000 	.word	0x428c0000

08002ec4 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002ec8:	4819      	ldr	r0, [pc, #100]	; (8002f30 <SPIx_Init+0x6c>)
 8002eca:	f004 fd06 	bl	80078da <HAL_SPI_GetState>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d12b      	bne.n	8002f2c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002ed4:	4b16      	ldr	r3, [pc, #88]	; (8002f30 <SPIx_Init+0x6c>)
 8002ed6:	4a17      	ldr	r2, [pc, #92]	; (8002f34 <SPIx_Init+0x70>)
 8002ed8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002eda:	4b15      	ldr	r3, [pc, #84]	; (8002f30 <SPIx_Init+0x6c>)
 8002edc:	2218      	movs	r2, #24
 8002ede:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002ee0:	4b13      	ldr	r3, [pc, #76]	; (8002f30 <SPIx_Init+0x6c>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002ee6:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <SPIx_Init+0x6c>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002eec:	4b10      	ldr	r3, [pc, #64]	; (8002f30 <SPIx_Init+0x6c>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002ef2:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <SPIx_Init+0x6c>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002ef8:	4b0d      	ldr	r3, [pc, #52]	; (8002f30 <SPIx_Init+0x6c>)
 8002efa:	2207      	movs	r2, #7
 8002efc:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002efe:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <SPIx_Init+0x6c>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002f04:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <SPIx_Init+0x6c>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002f0a:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <SPIx_Init+0x6c>)
 8002f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f10:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002f12:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <SPIx_Init+0x6c>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002f18:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <SPIx_Init+0x6c>)
 8002f1a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f1e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002f20:	4803      	ldr	r0, [pc, #12]	; (8002f30 <SPIx_Init+0x6c>)
 8002f22:	f000 f873 	bl	800300c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002f26:	4802      	ldr	r0, [pc, #8]	; (8002f30 <SPIx_Init+0x6c>)
 8002f28:	f004 f837 	bl	8006f9a <HAL_SPI_Init>
  } 
}
 8002f2c:	bf00      	nop
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	2000088c 	.word	0x2000088c
 8002f34:	40015000 	.word	0x40015000

08002f38 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002f42:	2300      	movs	r3, #0
 8002f44:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <SPIx_Read+0x38>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f107 0108 	add.w	r1, r7, #8
 8002f52:	4808      	ldr	r0, [pc, #32]	; (8002f74 <SPIx_Read+0x3c>)
 8002f54:	f004 fa0e 	bl	8007374 <HAL_SPI_Receive>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002f62:	f000 f847 	bl	8002ff4 <SPIx_Error>
  }
  
  return readvalue;
 8002f66:	68bb      	ldr	r3, [r7, #8]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	20000080 	.word	0x20000080
 8002f74:	2000088c 	.word	0x2000088c

08002f78 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002f86:	4b09      	ldr	r3, [pc, #36]	; (8002fac <SPIx_Write+0x34>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	1db9      	adds	r1, r7, #6
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	4808      	ldr	r0, [pc, #32]	; (8002fb0 <SPIx_Write+0x38>)
 8002f90:	f004 f8b4 	bl	80070fc <HAL_SPI_Transmit>
 8002f94:	4603      	mov	r3, r0
 8002f96:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002f9e:	f000 f829 	bl	8002ff4 <SPIx_Error>
  }
}
 8002fa2:	bf00      	nop
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20000080 	.word	0x20000080
 8002fb0:	2000088c 	.word	0x2000088c

08002fb4 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af02      	add	r7, sp, #8
 8002fba:	4603      	mov	r3, r0
 8002fbc:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8002fc2:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <SPIx_WriteRead+0x38>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f107 020f 	add.w	r2, r7, #15
 8002fca:	1df9      	adds	r1, r7, #7
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	2301      	movs	r3, #1
 8002fd0:	4807      	ldr	r0, [pc, #28]	; (8002ff0 <SPIx_WriteRead+0x3c>)
 8002fd2:	f004 fae0 	bl	8007596 <HAL_SPI_TransmitReceive>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8002fdc:	f000 f80a 	bl	8002ff4 <SPIx_Error>
  }
  
  return receivedbyte;
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000080 	.word	0x20000080
 8002ff0:	2000088c 	.word	0x2000088c

08002ff4 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002ff8:	4803      	ldr	r0, [pc, #12]	; (8003008 <SPIx_Error+0x14>)
 8002ffa:	f004 f857 	bl	80070ac <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002ffe:	f7ff ff61 	bl	8002ec4 <SPIx_Init>
}
 8003002:	bf00      	nop
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	2000088c 	.word	0x2000088c

0800300c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08a      	sub	sp, #40	; 0x28
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8003014:	2300      	movs	r3, #0
 8003016:	613b      	str	r3, [r7, #16]
 8003018:	4b17      	ldr	r3, [pc, #92]	; (8003078 <SPIx_MspInit+0x6c>)
 800301a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301c:	4a16      	ldr	r2, [pc, #88]	; (8003078 <SPIx_MspInit+0x6c>)
 800301e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003022:	6453      	str	r3, [r2, #68]	; 0x44
 8003024:	4b14      	ldr	r3, [pc, #80]	; (8003078 <SPIx_MspInit+0x6c>)
 8003026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003028:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8003030:	2300      	movs	r3, #0
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	4b10      	ldr	r3, [pc, #64]	; (8003078 <SPIx_MspInit+0x6c>)
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	4a0f      	ldr	r2, [pc, #60]	; (8003078 <SPIx_MspInit+0x6c>)
 800303a:	f043 0320 	orr.w	r3, r3, #32
 800303e:	6313      	str	r3, [r2, #48]	; 0x30
 8003040:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <SPIx_MspInit+0x6c>)
 8003042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003044:	f003 0320 	and.w	r3, r3, #32
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800304c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003050:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8003052:	2302      	movs	r3, #2
 8003054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8003056:	2302      	movs	r3, #2
 8003058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800305a:	2301      	movs	r3, #1
 800305c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800305e:	2305      	movs	r3, #5
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8003062:	f107 0314 	add.w	r3, r7, #20
 8003066:	4619      	mov	r1, r3
 8003068:	4804      	ldr	r0, [pc, #16]	; (800307c <SPIx_MspInit+0x70>)
 800306a:	f002 f811 	bl	8005090 <HAL_GPIO_Init>
}
 800306e:	bf00      	nop
 8003070:	3728      	adds	r7, #40	; 0x28
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40023800 	.word	0x40023800
 800307c:	40021400 	.word	0x40021400

08003080 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b088      	sub	sp, #32
 8003084:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8003086:	4b36      	ldr	r3, [pc, #216]	; (8003160 <LCD_IO_Init+0xe0>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d164      	bne.n	8003158 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800308e:	4b34      	ldr	r3, [pc, #208]	; (8003160 <LCD_IO_Init+0xe0>)
 8003090:	2201      	movs	r2, #1
 8003092:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003094:	2300      	movs	r3, #0
 8003096:	60bb      	str	r3, [r7, #8]
 8003098:	4b32      	ldr	r3, [pc, #200]	; (8003164 <LCD_IO_Init+0xe4>)
 800309a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309c:	4a31      	ldr	r2, [pc, #196]	; (8003164 <LCD_IO_Init+0xe4>)
 800309e:	f043 0308 	orr.w	r3, r3, #8
 80030a2:	6313      	str	r3, [r2, #48]	; 0x30
 80030a4:	4b2f      	ldr	r3, [pc, #188]	; (8003164 <LCD_IO_Init+0xe4>)
 80030a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a8:	f003 0308 	and.w	r3, r3, #8
 80030ac:	60bb      	str	r3, [r7, #8]
 80030ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80030b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80030b6:	2301      	movs	r3, #1
 80030b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80030ba:	2300      	movs	r3, #0
 80030bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80030be:	2302      	movs	r3, #2
 80030c0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80030c2:	f107 030c 	add.w	r3, r7, #12
 80030c6:	4619      	mov	r1, r3
 80030c8:	4827      	ldr	r0, [pc, #156]	; (8003168 <LCD_IO_Init+0xe8>)
 80030ca:	f001 ffe1 	bl	8005090 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	4b24      	ldr	r3, [pc, #144]	; (8003164 <LCD_IO_Init+0xe4>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	4a23      	ldr	r2, [pc, #140]	; (8003164 <LCD_IO_Init+0xe4>)
 80030d8:	f043 0308 	orr.w	r3, r3, #8
 80030dc:	6313      	str	r3, [r2, #48]	; 0x30
 80030de:	4b21      	ldr	r3, [pc, #132]	; (8003164 <LCD_IO_Init+0xe4>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	607b      	str	r3, [r7, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80030ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80030f0:	2301      	movs	r3, #1
 80030f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80030f8:	2302      	movs	r3, #2
 80030fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80030fc:	f107 030c 	add.w	r3, r7, #12
 8003100:	4619      	mov	r1, r3
 8003102:	4819      	ldr	r0, [pc, #100]	; (8003168 <LCD_IO_Init+0xe8>)
 8003104:	f001 ffc4 	bl	8005090 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003108:	2300      	movs	r3, #0
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	4b15      	ldr	r3, [pc, #84]	; (8003164 <LCD_IO_Init+0xe4>)
 800310e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003110:	4a14      	ldr	r2, [pc, #80]	; (8003164 <LCD_IO_Init+0xe4>)
 8003112:	f043 0304 	orr.w	r3, r3, #4
 8003116:	6313      	str	r3, [r2, #48]	; 0x30
 8003118:	4b12      	ldr	r3, [pc, #72]	; (8003164 <LCD_IO_Init+0xe4>)
 800311a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	603b      	str	r3, [r7, #0]
 8003122:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003124:	2304      	movs	r3, #4
 8003126:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003128:	2301      	movs	r3, #1
 800312a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800312c:	2300      	movs	r3, #0
 800312e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003130:	2302      	movs	r3, #2
 8003132:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003134:	f107 030c 	add.w	r3, r7, #12
 8003138:	4619      	mov	r1, r3
 800313a:	480c      	ldr	r0, [pc, #48]	; (800316c <LCD_IO_Init+0xec>)
 800313c:	f001 ffa8 	bl	8005090 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003140:	2200      	movs	r2, #0
 8003142:	2104      	movs	r1, #4
 8003144:	4809      	ldr	r0, [pc, #36]	; (800316c <LCD_IO_Init+0xec>)
 8003146:	f002 fa5b 	bl	8005600 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800314a:	2201      	movs	r2, #1
 800314c:	2104      	movs	r1, #4
 800314e:	4807      	ldr	r0, [pc, #28]	; (800316c <LCD_IO_Init+0xec>)
 8003150:	f002 fa56 	bl	8005600 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8003154:	f7ff feb6 	bl	8002ec4 <SPIx_Init>
  }
}
 8003158:	bf00      	nop
 800315a:	3720      	adds	r7, #32
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	200008e4 	.word	0x200008e4
 8003164:	40023800 	.word	0x40023800
 8003168:	40020c00 	.word	0x40020c00
 800316c:	40020800 	.word	0x40020800

08003170 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800317a:	2201      	movs	r2, #1
 800317c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003180:	480a      	ldr	r0, [pc, #40]	; (80031ac <LCD_IO_WriteData+0x3c>)
 8003182:	f002 fa3d 	bl	8005600 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8003186:	2200      	movs	r2, #0
 8003188:	2104      	movs	r1, #4
 800318a:	4809      	ldr	r0, [pc, #36]	; (80031b0 <LCD_IO_WriteData+0x40>)
 800318c:	f002 fa38 	bl	8005600 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8003190:	88fb      	ldrh	r3, [r7, #6]
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff fef0 	bl	8002f78 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003198:	2201      	movs	r2, #1
 800319a:	2104      	movs	r1, #4
 800319c:	4804      	ldr	r0, [pc, #16]	; (80031b0 <LCD_IO_WriteData+0x40>)
 800319e:	f002 fa2f 	bl	8005600 <HAL_GPIO_WritePin>
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40020c00 	.word	0x40020c00
 80031b0:	40020800 	.word	0x40020800

080031b4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80031be:	2200      	movs	r2, #0
 80031c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031c4:	480a      	ldr	r0, [pc, #40]	; (80031f0 <LCD_IO_WriteReg+0x3c>)
 80031c6:	f002 fa1b 	bl	8005600 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80031ca:	2200      	movs	r2, #0
 80031cc:	2104      	movs	r1, #4
 80031ce:	4809      	ldr	r0, [pc, #36]	; (80031f4 <LCD_IO_WriteReg+0x40>)
 80031d0:	f002 fa16 	bl	8005600 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff fecd 	bl	8002f78 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80031de:	2201      	movs	r2, #1
 80031e0:	2104      	movs	r1, #4
 80031e2:	4804      	ldr	r0, [pc, #16]	; (80031f4 <LCD_IO_WriteReg+0x40>)
 80031e4:	f002 fa0c 	bl	8005600 <HAL_GPIO_WritePin>
}
 80031e8:	bf00      	nop
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40020c00 	.word	0x40020c00
 80031f4:	40020800 	.word	0x40020800

080031f8 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	4603      	mov	r3, r0
 8003200:	460a      	mov	r2, r1
 8003202:	80fb      	strh	r3, [r7, #6]
 8003204:	4613      	mov	r3, r2
 8003206:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8003208:	2300      	movs	r3, #0
 800320a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 800320c:	2200      	movs	r2, #0
 800320e:	2104      	movs	r1, #4
 8003210:	4810      	ldr	r0, [pc, #64]	; (8003254 <LCD_IO_ReadData+0x5c>)
 8003212:	f002 f9f5 	bl	8005600 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003216:	2200      	movs	r2, #0
 8003218:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800321c:	480e      	ldr	r0, [pc, #56]	; (8003258 <LCD_IO_ReadData+0x60>)
 800321e:	f002 f9ef 	bl	8005600 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8003222:	88fb      	ldrh	r3, [r7, #6]
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff fea7 	bl	8002f78 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800322a:	797b      	ldrb	r3, [r7, #5]
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff fe83 	bl	8002f38 <SPIx_Read>
 8003232:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003234:	2201      	movs	r2, #1
 8003236:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800323a:	4807      	ldr	r0, [pc, #28]	; (8003258 <LCD_IO_ReadData+0x60>)
 800323c:	f002 f9e0 	bl	8005600 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003240:	2201      	movs	r2, #1
 8003242:	2104      	movs	r1, #4
 8003244:	4803      	ldr	r0, [pc, #12]	; (8003254 <LCD_IO_ReadData+0x5c>)
 8003246:	f002 f9db 	bl	8005600 <HAL_GPIO_WritePin>
  
  return readvalue;
 800324a:	68fb      	ldr	r3, [r7, #12]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40020800 	.word	0x40020800
 8003258:	40020c00 	.word	0x40020c00

0800325c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f001 f805 	bl	8004274 <HAL_Delay>
}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 800327a:	2300      	movs	r3, #0
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	4b20      	ldr	r3, [pc, #128]	; (8003300 <GYRO_IO_Init+0x8c>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	4a1f      	ldr	r2, [pc, #124]	; (8003300 <GYRO_IO_Init+0x8c>)
 8003284:	f043 0304 	orr.w	r3, r3, #4
 8003288:	6313      	str	r3, [r2, #48]	; 0x30
 800328a:	4b1d      	ldr	r3, [pc, #116]	; (8003300 <GYRO_IO_Init+0x8c>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	f003 0304 	and.w	r3, r3, #4
 8003292:	60bb      	str	r3, [r7, #8]
 8003294:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8003296:	2302      	movs	r3, #2
 8003298:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800329a:	2301      	movs	r3, #1
 800329c:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 80032a2:	2301      	movs	r3, #1
 80032a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80032a6:	f107 030c 	add.w	r3, r7, #12
 80032aa:	4619      	mov	r1, r3
 80032ac:	4815      	ldr	r0, [pc, #84]	; (8003304 <GYRO_IO_Init+0x90>)
 80032ae:	f001 feef 	bl	8005090 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 80032b2:	2201      	movs	r2, #1
 80032b4:	2102      	movs	r1, #2
 80032b6:	4813      	ldr	r0, [pc, #76]	; (8003304 <GYRO_IO_Init+0x90>)
 80032b8:	f002 f9a2 	bl	8005600 <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 80032bc:	2300      	movs	r3, #0
 80032be:	607b      	str	r3, [r7, #4]
 80032c0:	4b0f      	ldr	r3, [pc, #60]	; (8003300 <GYRO_IO_Init+0x8c>)
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	4a0e      	ldr	r2, [pc, #56]	; (8003300 <GYRO_IO_Init+0x8c>)
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	6313      	str	r3, [r2, #48]	; 0x30
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <GYRO_IO_Init+0x8c>)
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	607b      	str	r3, [r7, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 80032d8:	2306      	movs	r3, #6
 80032da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80032dc:	2300      	movs	r3, #0
 80032de:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80032e0:	2302      	movs	r3, #2
 80032e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 80032e8:	f107 030c 	add.w	r3, r7, #12
 80032ec:	4619      	mov	r1, r3
 80032ee:	4806      	ldr	r0, [pc, #24]	; (8003308 <GYRO_IO_Init+0x94>)
 80032f0:	f001 fece 	bl	8005090 <HAL_GPIO_Init>

  SPIx_Init();
 80032f4:	f7ff fde6 	bl	8002ec4 <SPIx_Init>
}
 80032f8:	bf00      	nop
 80032fa:	3720      	adds	r7, #32
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40023800 	.word	0x40023800
 8003304:	40020800 	.word	0x40020800
 8003308:	40020000 	.word	0x40020000

0800330c <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	70fb      	strb	r3, [r7, #3]
 8003318:	4613      	mov	r3, r2
 800331a:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 800331c:	883b      	ldrh	r3, [r7, #0]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d903      	bls.n	800332a <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8003322:	78fb      	ldrb	r3, [r7, #3]
 8003324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003328:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800332a:	2200      	movs	r2, #0
 800332c:	2102      	movs	r1, #2
 800332e:	480f      	ldr	r0, [pc, #60]	; (800336c <GYRO_IO_Write+0x60>)
 8003330:	f002 f966 	bl	8005600 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8003334:	78fb      	ldrb	r3, [r7, #3]
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff fe3c 	bl	8002fb4 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 800333c:	e00a      	b.n	8003354 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff fe36 	bl	8002fb4 <SPIx_WriteRead>
    NumByteToWrite--;
 8003348:	883b      	ldrh	r3, [r7, #0]
 800334a:	3b01      	subs	r3, #1
 800334c:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3301      	adds	r3, #1
 8003352:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8003354:	883b      	ldrh	r3, [r7, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f1      	bne.n	800333e <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 800335a:	2201      	movs	r2, #1
 800335c:	2102      	movs	r1, #2
 800335e:	4803      	ldr	r0, [pc, #12]	; (800336c <GYRO_IO_Write+0x60>)
 8003360:	f002 f94e 	bl	8005600 <HAL_GPIO_WritePin>
}
 8003364:	bf00      	nop
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40020800 	.word	0x40020800

08003370 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	70fb      	strb	r3, [r7, #3]
 800337c:	4613      	mov	r3, r2
 800337e:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8003380:	883b      	ldrh	r3, [r7, #0]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d904      	bls.n	8003390 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8003386:	78fb      	ldrb	r3, [r7, #3]
 8003388:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800338c:	70fb      	strb	r3, [r7, #3]
 800338e:	e003      	b.n	8003398 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003396:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8003398:	2200      	movs	r2, #0
 800339a:	2102      	movs	r1, #2
 800339c:	4810      	ldr	r0, [pc, #64]	; (80033e0 <GYRO_IO_Read+0x70>)
 800339e:	f002 f92f 	bl	8005600 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80033a2:	78fb      	ldrb	r3, [r7, #3]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff fe05 	bl	8002fb4 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80033aa:	e00c      	b.n	80033c6 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80033ac:	2000      	movs	r0, #0
 80033ae:	f7ff fe01 	bl	8002fb4 <SPIx_WriteRead>
 80033b2:	4603      	mov	r3, r0
 80033b4:	461a      	mov	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 80033ba:	883b      	ldrh	r3, [r7, #0]
 80033bc:	3b01      	subs	r3, #1
 80033be:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3301      	adds	r3, #1
 80033c4:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 80033c6:	883b      	ldrh	r3, [r7, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1ef      	bne.n	80033ac <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80033cc:	2201      	movs	r2, #1
 80033ce:	2102      	movs	r1, #2
 80033d0:	4803      	ldr	r0, [pc, #12]	; (80033e0 <GYRO_IO_Read+0x70>)
 80033d2:	f002 f915 	bl	8005600 <HAL_GPIO_WritePin>
}  
 80033d6:	bf00      	nop
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40020800 	.word	0x40020800

080033e4 <BSP_GYRO_Init>:
  * @brief  Set Gyroscope Initialization.
  * @param  None
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80033ee:	2300      	movs	r3, #0
 80033f0:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure={0,0};
 80033f2:	2300      	movs	r3, #0
 80033f4:	703b      	strb	r3, [r7, #0]
 80033f6:	2300      	movs	r3, #0
 80033f8:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 80033fa:	4b2d      	ldr	r3, [pc, #180]	; (80034b0 <BSP_GYRO_Init+0xcc>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	4798      	blx	r3
 8003400:	4603      	mov	r3, r0
 8003402:	2bd4      	cmp	r3, #212	; 0xd4
 8003404:	d005      	beq.n	8003412 <BSP_GYRO_Init+0x2e>
 8003406:	4b2a      	ldr	r3, [pc, #168]	; (80034b0 <BSP_GYRO_Init+0xcc>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	4798      	blx	r3
 800340c:	4603      	mov	r3, r0
 800340e:	2bd5      	cmp	r3, #213	; 0xd5
 8003410:	d146      	bne.n	80034a0 <BSP_GYRO_Init+0xbc>
  {	
    /* Initialize the Gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8003412:	4b28      	ldr	r3, [pc, #160]	; (80034b4 <BSP_GYRO_Init+0xd0>)
 8003414:	4a26      	ldr	r2, [pc, #152]	; (80034b0 <BSP_GYRO_Init+0xcc>)
 8003416:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the Gyroscope structure */
    L3GD20_InitStructure.Power_Mode = L3GD20_MODE_ACTIVE;
 8003418:	2308      	movs	r3, #8
 800341a:	713b      	strb	r3, [r7, #4]
    L3GD20_InitStructure.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 800341c:	2300      	movs	r3, #0
 800341e:	717b      	strb	r3, [r7, #5]
    L3GD20_InitStructure.Axes_Enable = L3GD20_AXES_ENABLE;
 8003420:	2307      	movs	r3, #7
 8003422:	71bb      	strb	r3, [r7, #6]
    L3GD20_InitStructure.Band_Width = L3GD20_BANDWIDTH_4;
 8003424:	2330      	movs	r3, #48	; 0x30
 8003426:	71fb      	strb	r3, [r7, #7]
    L3GD20_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8003428:	2300      	movs	r3, #0
 800342a:	723b      	strb	r3, [r7, #8]
    L3GD20_InitStructure.Endianness = L3GD20_BLE_LSB;
 800342c:	2300      	movs	r3, #0
 800342e:	727b      	strb	r3, [r7, #9]
    L3GD20_InitStructure.Full_Scale = L3GD20_FULLSCALE_500; 
 8003430:	2310      	movs	r3, #16
 8003432:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8003434:	793a      	ldrb	r2, [r7, #4]
 8003436:	797b      	ldrb	r3, [r7, #5]
 8003438:	4313      	orrs	r3, r2
 800343a:	b2da      	uxtb	r2, r3
                       L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 800343c:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 800343e:	4313      	orrs	r3, r2
 8003440:	b2da      	uxtb	r2, r3
                       L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 8003442:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8003444:	4313      	orrs	r3, r2
 8003446:	b2db      	uxtb	r3, r3
 8003448:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 800344a:	7a3a      	ldrb	r2, [r7, #8]
 800344c:	7a7b      	ldrb	r3, [r7, #9]
 800344e:	4313      	orrs	r3, r2
 8003450:	b2da      	uxtb	r2, r3
                         L3GD20_InitStructure.Full_Scale) << 8);
 8003452:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 8003454:	4313      	orrs	r3, r2
 8003456:	b2db      	uxtb	r3, r3
 8003458:	b29b      	uxth	r3, r3
 800345a:	021b      	lsls	r3, r3, #8
 800345c:	b29a      	uxth	r2, r3
 800345e:	89bb      	ldrh	r3, [r7, #12]
 8003460:	4313      	orrs	r3, r2
 8003462:	81bb      	strh	r3, [r7, #12]
    
    /* Configure the Gyroscope main parameters */	 
    GyroscopeDrv->Init(ctrl);
 8003464:	4b13      	ldr	r3, [pc, #76]	; (80034b4 <BSP_GYRO_Init+0xd0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	89ba      	ldrh	r2, [r7, #12]
 800346c:	4610      	mov	r0, r2
 800346e:	4798      	blx	r3

    L3GD20_FilterStructure.HighPassFilter_Mode_Selection = L3GD20_HPM_NORMAL_MODE_RES;
 8003470:	2300      	movs	r3, #0
 8003472:	703b      	strb	r3, [r7, #0]
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8003474:	2300      	movs	r3, #0
 8003476:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
 8003478:	783a      	ldrb	r2, [r7, #0]
                       L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));
 800347a:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
 800347c:	4313      	orrs	r3, r2
 800347e:	b2db      	uxtb	r3, r3
 8003480:	81bb      	strh	r3, [r7, #12]

    /* Configure the Gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8003482:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <BSP_GYRO_Init+0xd0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	89ba      	ldrh	r2, [r7, #12]
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	4610      	mov	r0, r2
 800348e:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8003490:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <BSP_GYRO_Init+0xd0>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	2010      	movs	r0, #16
 8003498:	4798      	blx	r3

    ret = GYRO_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	73fb      	strb	r3, [r7, #15]
 800349e:	e001      	b.n	80034a4 <BSP_GYRO_Init+0xc0>
  }
  else
  {
    ret = GYRO_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	2000004c 	.word	0x2000004c
 80034b4:	200008e8 	.word	0x200008e8

080034b8 <BSP_GYRO_GetXYZ>:
  * @brief  Gets XYZ angular acceleration/
  * @param  pfData: pointer on floating array         
  * @retval None
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 80034c0:	4b06      	ldr	r3, [pc, #24]	; (80034dc <BSP_GYRO_GetXYZ+0x24>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d004      	beq.n	80034d4 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 80034ca:	4b04      	ldr	r3, [pc, #16]	; (80034dc <BSP_GYRO_GetXYZ+0x24>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	4798      	blx	r3
  }
}
 80034d4:	bf00      	nop
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	200008e8 	.word	0x200008e8

080034e0 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80034e4:	4b2d      	ldr	r3, [pc, #180]	; (800359c <BSP_LCD_Init+0xbc>)
 80034e6:	4a2e      	ldr	r2, [pc, #184]	; (80035a0 <BSP_LCD_Init+0xc0>)
 80034e8:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80034ea:	4b2c      	ldr	r3, [pc, #176]	; (800359c <BSP_LCD_Init+0xbc>)
 80034ec:	2209      	movs	r2, #9
 80034ee:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80034f0:	4b2a      	ldr	r3, [pc, #168]	; (800359c <BSP_LCD_Init+0xbc>)
 80034f2:	2201      	movs	r2, #1
 80034f4:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80034f6:	4b29      	ldr	r3, [pc, #164]	; (800359c <BSP_LCD_Init+0xbc>)
 80034f8:	221d      	movs	r2, #29
 80034fa:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80034fc:	4b27      	ldr	r3, [pc, #156]	; (800359c <BSP_LCD_Init+0xbc>)
 80034fe:	2203      	movs	r2, #3
 8003500:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8003502:	4b26      	ldr	r3, [pc, #152]	; (800359c <BSP_LCD_Init+0xbc>)
 8003504:	f240 120d 	movw	r2, #269	; 0x10d
 8003508:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800350a:	4b24      	ldr	r3, [pc, #144]	; (800359c <BSP_LCD_Init+0xbc>)
 800350c:	f240 1243 	movw	r2, #323	; 0x143
 8003510:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8003512:	4b22      	ldr	r3, [pc, #136]	; (800359c <BSP_LCD_Init+0xbc>)
 8003514:	f240 1217 	movw	r2, #279	; 0x117
 8003518:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 800351a:	4b20      	ldr	r3, [pc, #128]	; (800359c <BSP_LCD_Init+0xbc>)
 800351c:	f240 1247 	movw	r2, #327	; 0x147
 8003520:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8003522:	4b1e      	ldr	r3, [pc, #120]	; (800359c <BSP_LCD_Init+0xbc>)
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800352a:	4b1c      	ldr	r3, [pc, #112]	; (800359c <BSP_LCD_Init+0xbc>)
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8003532:	4b1a      	ldr	r3, [pc, #104]	; (800359c <BSP_LCD_Init+0xbc>)
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800353a:	4b1a      	ldr	r3, [pc, #104]	; (80035a4 <BSP_LCD_Init+0xc4>)
 800353c:	2208      	movs	r2, #8
 800353e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003540:	4b18      	ldr	r3, [pc, #96]	; (80035a4 <BSP_LCD_Init+0xc4>)
 8003542:	22c0      	movs	r2, #192	; 0xc0
 8003544:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003546:	4b17      	ldr	r3, [pc, #92]	; (80035a4 <BSP_LCD_Init+0xc4>)
 8003548:	2204      	movs	r2, #4
 800354a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800354c:	4b15      	ldr	r3, [pc, #84]	; (80035a4 <BSP_LCD_Init+0xc4>)
 800354e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003552:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8003554:	4813      	ldr	r0, [pc, #76]	; (80035a4 <BSP_LCD_Init+0xc4>)
 8003556:	f003 facf 	bl	8006af8 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800355a:	4b10      	ldr	r3, [pc, #64]	; (800359c <BSP_LCD_Init+0xbc>)
 800355c:	2200      	movs	r2, #0
 800355e:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003560:	4b0e      	ldr	r3, [pc, #56]	; (800359c <BSP_LCD_Init+0xbc>)
 8003562:	2200      	movs	r2, #0
 8003564:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003566:	4b0d      	ldr	r3, [pc, #52]	; (800359c <BSP_LCD_Init+0xbc>)
 8003568:	2200      	movs	r2, #0
 800356a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800356c:	4b0b      	ldr	r3, [pc, #44]	; (800359c <BSP_LCD_Init+0xbc>)
 800356e:	2200      	movs	r2, #0
 8003570:	611a      	str	r2, [r3, #16]
    
    MspInit();
 8003572:	f000 fb51 	bl	8003c18 <MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8003576:	4809      	ldr	r0, [pc, #36]	; (800359c <BSP_LCD_Init+0xbc>)
 8003578:	f002 fa1c 	bl	80059b4 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 800357c:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <BSP_LCD_Init+0xc8>)
 800357e:	4a0b      	ldr	r2, [pc, #44]	; (80035ac <BSP_LCD_Init+0xcc>)
 8003580:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8003582:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <BSP_LCD_Init+0xc8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800358a:	f000 fc79 	bl	8003e80 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800358e:	4808      	ldr	r0, [pc, #32]	; (80035b0 <BSP_LCD_Init+0xd0>)
 8003590:	f000 f8ce 	bl	8003730 <BSP_LCD_SetFont>

  return LCD_OK;
 8003594:	2300      	movs	r3, #0
}  
 8003596:	4618      	mov	r0, r3
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	200008ec 	.word	0x200008ec
 80035a0:	40016800 	.word	0x40016800
 80035a4:	200009d4 	.word	0x200009d4
 80035a8:	20000a20 	.word	0x20000a20
 80035ac:	20000014 	.word	0x20000014
 80035b0:	20000084 	.word	0x20000084

080035b4 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80035b8:	4b03      	ldr	r3, [pc, #12]	; (80035c8 <BSP_LCD_GetXSize+0x14>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035be:	4798      	blx	r3
 80035c0:	4603      	mov	r3, r0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	20000a20 	.word	0x20000a20

080035cc <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None    
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80035d0:	4b03      	ldr	r3, [pc, #12]	; (80035e0 <BSP_LCD_GetYSize+0x14>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d6:	4798      	blx	r3
 80035d8:	4603      	mov	r3, r0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20000a20 	.word	0x20000a20

080035e4 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b090      	sub	sp, #64	; 0x40
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	6039      	str	r1, [r7, #0]
 80035ee:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80035f4:	f7ff ffde 	bl	80035b4 <BSP_LCD_GetXSize>
 80035f8:	4603      	mov	r3, r0
 80035fa:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003600:	f7ff ffe4 	bl	80035cc <BSP_LCD_GetYSize>
 8003604:	4603      	mov	r3, r0
 8003606:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003608:	2300      	movs	r3, #0
 800360a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8003610:	23ff      	movs	r3, #255	; 0xff
 8003612:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8003614:	2300      	movs	r3, #0
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8003618:	2300      	movs	r3, #0
 800361a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800361e:	2300      	movs	r3, #0
 8003620:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8003624:	2300      	movs	r3, #0
 8003626:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800362a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800362e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003630:	2307      	movs	r3, #7
 8003632:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003634:	f7ff ffbe 	bl	80035b4 <BSP_LCD_GetXSize>
 8003638:	4603      	mov	r3, r0
 800363a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800363c:	f7ff ffc6 	bl	80035cc <BSP_LCD_GetYSize>
 8003640:	4603      	mov	r3, r0
 8003642:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8003644:	88fa      	ldrh	r2, [r7, #6]
 8003646:	f107 030c 	add.w	r3, r7, #12
 800364a:	4619      	mov	r1, r3
 800364c:	4814      	ldr	r0, [pc, #80]	; (80036a0 <BSP_LCD_LayerDefaultInit+0xbc>)
 800364e:	f002 fb39 	bl	8005cc4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003652:	88fa      	ldrh	r2, [r7, #6]
 8003654:	4913      	ldr	r1, [pc, #76]	; (80036a4 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003656:	4613      	mov	r3, r2
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	3304      	adds	r3, #4
 8003662:	f04f 32ff 	mov.w	r2, #4294967295
 8003666:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003668:	88fa      	ldrh	r2, [r7, #6]
 800366a:	490e      	ldr	r1, [pc, #56]	; (80036a4 <BSP_LCD_LayerDefaultInit+0xc0>)
 800366c:	4613      	mov	r3, r2
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	4413      	add	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	3308      	adds	r3, #8
 8003678:	4a0b      	ldr	r2, [pc, #44]	; (80036a8 <BSP_LCD_LayerDefaultInit+0xc4>)
 800367a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800367c:	88fa      	ldrh	r2, [r7, #6]
 800367e:	4909      	ldr	r1, [pc, #36]	; (80036a4 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003680:	4613      	mov	r3, r2
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	4413      	add	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800368e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8003690:	4803      	ldr	r0, [pc, #12]	; (80036a0 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003692:	f002 fb55 	bl	8005d40 <HAL_LTDC_EnableDither>
}
 8003696:	bf00      	nop
 8003698:	3740      	adds	r7, #64	; 0x40
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	200008ec 	.word	0x200008ec
 80036a4:	20000a08 	.word	0x20000a08
 80036a8:	20000084 	.word	0x20000084

080036ac <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80036b4:	4a04      	ldr	r2, [pc, #16]	; (80036c8 <BSP_LCD_SelectLayer+0x1c>)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6013      	str	r3, [r2, #0]
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	20000a04 	.word	0x20000a04

080036cc <BSP_LCD_SetTextColor>:
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80036d4:	4b07      	ldr	r3, [pc, #28]	; (80036f4 <BSP_LCD_SetTextColor+0x28>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	4907      	ldr	r1, [pc, #28]	; (80036f8 <BSP_LCD_SetTextColor+0x2c>)
 80036da:	4613      	mov	r3, r2
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	4413      	add	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	440b      	add	r3, r1
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	601a      	str	r2, [r3, #0]
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	20000a04 	.word	0x20000a04
 80036f8:	20000a08 	.word	0x20000a08

080036fc <BSP_LCD_SetBackColor>:
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003704:	4b08      	ldr	r3, [pc, #32]	; (8003728 <BSP_LCD_SetBackColor+0x2c>)
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	4908      	ldr	r1, [pc, #32]	; (800372c <BSP_LCD_SetBackColor+0x30>)
 800370a:	4613      	mov	r3, r2
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	4413      	add	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	3304      	adds	r3, #4
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	601a      	str	r2, [r3, #0]
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	20000a04 	.word	0x20000a04
 800372c:	20000a08 	.word	0x20000a08

08003730 <BSP_LCD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8003738:	4b08      	ldr	r3, [pc, #32]	; (800375c <BSP_LCD_SetFont+0x2c>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	4908      	ldr	r1, [pc, #32]	; (8003760 <BSP_LCD_SetFont+0x30>)
 800373e:	4613      	mov	r3, r2
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	4413      	add	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	440b      	add	r3, r1
 8003748:	3308      	adds	r3, #8
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	601a      	str	r2, [r3, #0]
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	20000a04 	.word	0x20000a04
 8003760:	20000a08 	.word	0x20000a08

08003764 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003766:	b085      	sub	sp, #20
 8003768:	af02      	add	r7, sp, #8
 800376a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800376c:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <BSP_LCD_Clear+0x48>)
 800376e:	681c      	ldr	r4, [r3, #0]
 8003770:	4b0e      	ldr	r3, [pc, #56]	; (80037ac <BSP_LCD_Clear+0x48>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a0e      	ldr	r2, [pc, #56]	; (80037b0 <BSP_LCD_Clear+0x4c>)
 8003776:	2134      	movs	r1, #52	; 0x34
 8003778:	fb01 f303 	mul.w	r3, r1, r3
 800377c:	4413      	add	r3, r2
 800377e:	335c      	adds	r3, #92	; 0x5c
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	461e      	mov	r6, r3
 8003784:	f7ff ff16 	bl	80035b4 <BSP_LCD_GetXSize>
 8003788:	4605      	mov	r5, r0
 800378a:	f7ff ff1f 	bl	80035cc <BSP_LCD_GetYSize>
 800378e:	4602      	mov	r2, r0
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	9301      	str	r3, [sp, #4]
 8003794:	2300      	movs	r3, #0
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	4613      	mov	r3, r2
 800379a:	462a      	mov	r2, r5
 800379c:	4631      	mov	r1, r6
 800379e:	4620      	mov	r0, r4
 80037a0:	f000 fb36 	bl	8003e10 <FillBuffer>
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037ac:	20000a04 	.word	0x20000a04
 80037b0:	200008ec 	.word	0x200008ec

080037b4 <BSP_LCD_DrawHLine>:
  * @param  Ypos: the Y position
  * @param  Length: line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80037b4:	b5b0      	push	{r4, r5, r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af02      	add	r7, sp, #8
 80037ba:	4603      	mov	r3, r0
 80037bc:	80fb      	strh	r3, [r7, #6]
 80037be:	460b      	mov	r3, r1
 80037c0:	80bb      	strh	r3, [r7, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80037ca:	4b16      	ldr	r3, [pc, #88]	; (8003824 <BSP_LCD_DrawHLine+0x70>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a16      	ldr	r2, [pc, #88]	; (8003828 <BSP_LCD_DrawHLine+0x74>)
 80037d0:	2134      	movs	r1, #52	; 0x34
 80037d2:	fb01 f303 	mul.w	r3, r1, r3
 80037d6:	4413      	add	r3, r2
 80037d8:	335c      	adds	r3, #92	; 0x5c
 80037da:	681c      	ldr	r4, [r3, #0]
 80037dc:	f7ff feea 	bl	80035b4 <BSP_LCD_GetXSize>
 80037e0:	4602      	mov	r2, r0
 80037e2:	88bb      	ldrh	r3, [r7, #4]
 80037e4:	fb03 f202 	mul.w	r2, r3, r2
 80037e8:	88fb      	ldrh	r3, [r7, #6]
 80037ea:	4413      	add	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4423      	add	r3, r4
 80037f0:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80037f2:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <BSP_LCD_DrawHLine+0x70>)
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	68f9      	ldr	r1, [r7, #12]
 80037f8:	887c      	ldrh	r4, [r7, #2]
 80037fa:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <BSP_LCD_DrawHLine+0x70>)
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	4d0b      	ldr	r5, [pc, #44]	; (800382c <BSP_LCD_DrawHLine+0x78>)
 8003800:	4613      	mov	r3, r2
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	4413      	add	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	442b      	add	r3, r5
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	9301      	str	r3, [sp, #4]
 800380e:	2300      	movs	r3, #0
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	2301      	movs	r3, #1
 8003814:	4622      	mov	r2, r4
 8003816:	f000 fafb 	bl	8003e10 <FillBuffer>
}
 800381a:	bf00      	nop
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bdb0      	pop	{r4, r5, r7, pc}
 8003822:	bf00      	nop
 8003824:	20000a04 	.word	0x20000a04
 8003828:	200008ec 	.word	0x200008ec
 800382c:	20000a08 	.word	0x20000a08

08003830 <BSP_LCD_DrawCircle>:
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003830:	b590      	push	{r4, r7, lr}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	80fb      	strh	r3, [r7, #6]
 800383a:	460b      	mov	r3, r1
 800383c:	80bb      	strh	r3, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8003842:	887b      	ldrh	r3, [r7, #2]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	f1c3 0303 	rsb	r3, r3, #3
 800384a:	617b      	str	r3, [r7, #20]
  curx = 0;
 800384c:	2300      	movs	r3, #0
 800384e:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003850:	887b      	ldrh	r3, [r7, #2]
 8003852:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8003854:	e0c7      	b.n	80039e6 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	b29a      	uxth	r2, r3
 800385a:	88fb      	ldrh	r3, [r7, #6]
 800385c:	4413      	add	r3, r2
 800385e:	b298      	uxth	r0, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	b29b      	uxth	r3, r3
 8003864:	88ba      	ldrh	r2, [r7, #4]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	b299      	uxth	r1, r3
 800386a:	4b64      	ldr	r3, [pc, #400]	; (80039fc <BSP_LCD_DrawCircle+0x1cc>)
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	4c64      	ldr	r4, [pc, #400]	; (8003a00 <BSP_LCD_DrawCircle+0x1d0>)
 8003870:	4613      	mov	r3, r2
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	4413      	add	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4423      	add	r3, r4
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	f000 faa1 	bl	8003dc4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	b29b      	uxth	r3, r3
 8003886:	88fa      	ldrh	r2, [r7, #6]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	b298      	uxth	r0, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	b29b      	uxth	r3, r3
 8003890:	88ba      	ldrh	r2, [r7, #4]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	b299      	uxth	r1, r3
 8003896:	4b59      	ldr	r3, [pc, #356]	; (80039fc <BSP_LCD_DrawCircle+0x1cc>)
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	4c59      	ldr	r4, [pc, #356]	; (8003a00 <BSP_LCD_DrawCircle+0x1d0>)
 800389c:	4613      	mov	r3, r2
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4423      	add	r3, r4
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	f000 fa8b 	bl	8003dc4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	88fb      	ldrh	r3, [r7, #6]
 80038b4:	4413      	add	r3, r2
 80038b6:	b298      	uxth	r0, r3
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	88ba      	ldrh	r2, [r7, #4]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	b299      	uxth	r1, r3
 80038c2:	4b4e      	ldr	r3, [pc, #312]	; (80039fc <BSP_LCD_DrawCircle+0x1cc>)
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	4c4e      	ldr	r4, [pc, #312]	; (8003a00 <BSP_LCD_DrawCircle+0x1d0>)
 80038c8:	4613      	mov	r3, r2
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4423      	add	r3, r4
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	461a      	mov	r2, r3
 80038d6:	f000 fa75 	bl	8003dc4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	b29b      	uxth	r3, r3
 80038de:	88fa      	ldrh	r2, [r7, #6]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	b298      	uxth	r0, r3
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	88ba      	ldrh	r2, [r7, #4]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	b299      	uxth	r1, r3
 80038ee:	4b43      	ldr	r3, [pc, #268]	; (80039fc <BSP_LCD_DrawCircle+0x1cc>)
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	4c43      	ldr	r4, [pc, #268]	; (8003a00 <BSP_LCD_DrawCircle+0x1d0>)
 80038f4:	4613      	mov	r3, r2
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4423      	add	r3, r4
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	f000 fa5f 	bl	8003dc4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	b29a      	uxth	r2, r3
 800390a:	88fb      	ldrh	r3, [r7, #6]
 800390c:	4413      	add	r3, r2
 800390e:	b298      	uxth	r0, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	b29a      	uxth	r2, r3
 8003914:	88bb      	ldrh	r3, [r7, #4]
 8003916:	4413      	add	r3, r2
 8003918:	b299      	uxth	r1, r3
 800391a:	4b38      	ldr	r3, [pc, #224]	; (80039fc <BSP_LCD_DrawCircle+0x1cc>)
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	4c38      	ldr	r4, [pc, #224]	; (8003a00 <BSP_LCD_DrawCircle+0x1d0>)
 8003920:	4613      	mov	r3, r2
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4423      	add	r3, r4
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	461a      	mov	r2, r3
 800392e:	f000 fa49 	bl	8003dc4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	b29b      	uxth	r3, r3
 8003936:	88fa      	ldrh	r2, [r7, #6]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	b298      	uxth	r0, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	b29a      	uxth	r2, r3
 8003940:	88bb      	ldrh	r3, [r7, #4]
 8003942:	4413      	add	r3, r2
 8003944:	b299      	uxth	r1, r3
 8003946:	4b2d      	ldr	r3, [pc, #180]	; (80039fc <BSP_LCD_DrawCircle+0x1cc>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	4c2d      	ldr	r4, [pc, #180]	; (8003a00 <BSP_LCD_DrawCircle+0x1d0>)
 800394c:	4613      	mov	r3, r2
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4423      	add	r3, r4
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	461a      	mov	r2, r3
 800395a:	f000 fa33 	bl	8003dc4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	b29a      	uxth	r2, r3
 8003962:	88fb      	ldrh	r3, [r7, #6]
 8003964:	4413      	add	r3, r2
 8003966:	b298      	uxth	r0, r3
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	b29a      	uxth	r2, r3
 800396c:	88bb      	ldrh	r3, [r7, #4]
 800396e:	4413      	add	r3, r2
 8003970:	b299      	uxth	r1, r3
 8003972:	4b22      	ldr	r3, [pc, #136]	; (80039fc <BSP_LCD_DrawCircle+0x1cc>)
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	4c22      	ldr	r4, [pc, #136]	; (8003a00 <BSP_LCD_DrawCircle+0x1d0>)
 8003978:	4613      	mov	r3, r2
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4423      	add	r3, r4
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	461a      	mov	r2, r3
 8003986:	f000 fa1d 	bl	8003dc4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	b29b      	uxth	r3, r3
 800398e:	88fa      	ldrh	r2, [r7, #6]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	b298      	uxth	r0, r3
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	b29a      	uxth	r2, r3
 8003998:	88bb      	ldrh	r3, [r7, #4]
 800399a:	4413      	add	r3, r2
 800399c:	b299      	uxth	r1, r3
 800399e:	4b17      	ldr	r3, [pc, #92]	; (80039fc <BSP_LCD_DrawCircle+0x1cc>)
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	4c17      	ldr	r4, [pc, #92]	; (8003a00 <BSP_LCD_DrawCircle+0x1d0>)
 80039a4:	4613      	mov	r3, r2
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	4413      	add	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4423      	add	r3, r4
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	461a      	mov	r2, r3
 80039b2:	f000 fa07 	bl	8003dc4 <BSP_LCD_DrawPixel>

    if (d < 0)
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	da06      	bge.n	80039ca <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	009a      	lsls	r2, r3, #2
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	4413      	add	r3, r2
 80039c4:	3306      	adds	r3, #6
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	e00a      	b.n	80039e0 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	009a      	lsls	r2, r3, #2
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	4413      	add	r3, r2
 80039d6:	330a      	adds	r3, #10
 80039d8:	617b      	str	r3, [r7, #20]
      cury--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	3b01      	subs	r3, #1
 80039de:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	3301      	adds	r3, #1
 80039e4:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	f67f af33 	bls.w	8003856 <BSP_LCD_DrawCircle+0x26>
  } 
}
 80039f0:	bf00      	nop
 80039f2:	bf00      	nop
 80039f4:	371c      	adds	r7, #28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd90      	pop	{r4, r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20000a04 	.word	0x20000a04
 8003a00:	20000a08 	.word	0x20000a08

08003a04 <BSP_LCD_FillRect>:
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a08:	b086      	sub	sp, #24
 8003a0a:	af02      	add	r7, sp, #8
 8003a0c:	4604      	mov	r4, r0
 8003a0e:	4608      	mov	r0, r1
 8003a10:	4611      	mov	r1, r2
 8003a12:	461a      	mov	r2, r3
 8003a14:	4623      	mov	r3, r4
 8003a16:	80fb      	strh	r3, [r7, #6]
 8003a18:	4603      	mov	r3, r0
 8003a1a:	80bb      	strh	r3, [r7, #4]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	807b      	strh	r3, [r7, #2]
 8003a20:	4613      	mov	r3, r2
 8003a22:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8003a24:	2300      	movs	r3, #0
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003a28:	4b20      	ldr	r3, [pc, #128]	; (8003aac <BSP_LCD_FillRect+0xa8>)
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	4920      	ldr	r1, [pc, #128]	; (8003ab0 <BSP_LCD_FillRect+0xac>)
 8003a2e:	4613      	mov	r3, r2
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	4413      	add	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	440b      	add	r3, r1
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff fe46 	bl	80036cc <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003a40:	4b1a      	ldr	r3, [pc, #104]	; (8003aac <BSP_LCD_FillRect+0xa8>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a1b      	ldr	r2, [pc, #108]	; (8003ab4 <BSP_LCD_FillRect+0xb0>)
 8003a46:	2134      	movs	r1, #52	; 0x34
 8003a48:	fb01 f303 	mul.w	r3, r1, r3
 8003a4c:	4413      	add	r3, r2
 8003a4e:	335c      	adds	r3, #92	; 0x5c
 8003a50:	681c      	ldr	r4, [r3, #0]
 8003a52:	f7ff fdaf 	bl	80035b4 <BSP_LCD_GetXSize>
 8003a56:	4602      	mov	r2, r0
 8003a58:	88bb      	ldrh	r3, [r7, #4]
 8003a5a:	fb03 f202 	mul.w	r2, r3, r2
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4423      	add	r3, r4
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003a68:	4b10      	ldr	r3, [pc, #64]	; (8003aac <BSP_LCD_FillRect+0xa8>)
 8003a6a:	681c      	ldr	r4, [r3, #0]
 8003a6c:	68fd      	ldr	r5, [r7, #12]
 8003a6e:	887e      	ldrh	r6, [r7, #2]
 8003a70:	f8b7 8000 	ldrh.w	r8, [r7]
 8003a74:	f7ff fd9e 	bl	80035b4 <BSP_LCD_GetXSize>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	887b      	ldrh	r3, [r7, #2]
 8003a7c:	1ad1      	subs	r1, r2, r3
 8003a7e:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <BSP_LCD_FillRect+0xa8>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	480b      	ldr	r0, [pc, #44]	; (8003ab0 <BSP_LCD_FillRect+0xac>)
 8003a84:	4613      	mov	r3, r2
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	4413      	add	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4403      	add	r3, r0
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	9301      	str	r3, [sp, #4]
 8003a92:	9100      	str	r1, [sp, #0]
 8003a94:	4643      	mov	r3, r8
 8003a96:	4632      	mov	r2, r6
 8003a98:	4629      	mov	r1, r5
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	f000 f9b8 	bl	8003e10 <FillBuffer>
}
 8003aa0:	bf00      	nop
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003aaa:	bf00      	nop
 8003aac:	20000a04 	.word	0x20000a04
 8003ab0:	20000a08 	.word	0x20000a08
 8003ab4:	200008ec 	.word	0x200008ec

08003ab8 <BSP_LCD_FillCircle>:
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	80fb      	strh	r3, [r7, #6]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	80bb      	strh	r3, [r7, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8003aca:	887b      	ldrh	r3, [r7, #2]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	f1c3 0303 	rsb	r3, r3, #3
 8003ad2:	617b      	str	r3, [r7, #20]

  curx = 0;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003ad8:	887b      	ldrh	r3, [r7, #2]
 8003ada:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003adc:	4b44      	ldr	r3, [pc, #272]	; (8003bf0 <BSP_LCD_FillCircle+0x138>)
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	4944      	ldr	r1, [pc, #272]	; (8003bf4 <BSP_LCD_FillCircle+0x13c>)
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff fdec 	bl	80036cc <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8003af4:	e061      	b.n	8003bba <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d021      	beq.n	8003b40 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	88fa      	ldrh	r2, [r7, #6]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	b298      	uxth	r0, r3
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	88bb      	ldrh	r3, [r7, #4]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	b299      	uxth	r1, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	461a      	mov	r2, r3
 8003b1a:	f7ff fe4b 	bl	80037b4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	88fa      	ldrh	r2, [r7, #6]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	b298      	uxth	r0, r3
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	88ba      	ldrh	r2, [r7, #4]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	b299      	uxth	r1, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	f7ff fe3a 	bl	80037b4 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d021      	beq.n	8003b8a <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	88fa      	ldrh	r2, [r7, #6]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	b298      	uxth	r0, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	88ba      	ldrh	r2, [r7, #4]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	b299      	uxth	r1, r3
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	461a      	mov	r2, r3
 8003b64:	f7ff fe26 	bl	80037b4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	88fa      	ldrh	r2, [r7, #6]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	b298      	uxth	r0, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	88bb      	ldrh	r3, [r7, #4]
 8003b78:	4413      	add	r3, r2
 8003b7a:	b299      	uxth	r1, r3
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	461a      	mov	r2, r3
 8003b86:	f7ff fe15 	bl	80037b4 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	da06      	bge.n	8003b9e <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	009a      	lsls	r2, r3, #2
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	4413      	add	r3, r2
 8003b98:	3306      	adds	r3, #6
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	e00a      	b.n	8003bb4 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	009a      	lsls	r2, r3, #2
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	4413      	add	r3, r2
 8003baa:	330a      	adds	r3, #10
 8003bac:	617b      	str	r3, [r7, #20]
      cury--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d999      	bls.n	8003af6 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003bc2:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <BSP_LCD_FillCircle+0x138>)
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	490b      	ldr	r1, [pc, #44]	; (8003bf4 <BSP_LCD_FillCircle+0x13c>)
 8003bc8:	4613      	mov	r3, r2
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	4413      	add	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff fd79 	bl	80036cc <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003bda:	887a      	ldrh	r2, [r7, #2]
 8003bdc:	88b9      	ldrh	r1, [r7, #4]
 8003bde:	88fb      	ldrh	r3, [r7, #6]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff fe25 	bl	8003830 <BSP_LCD_DrawCircle>
}
 8003be6:	bf00      	nop
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20000a04 	.word	0x20000a04
 8003bf4:	20000a08 	.word	0x20000a08

08003bf8 <BSP_LCD_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003bfc:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <BSP_LCD_DisplayOn+0x1c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003c06:	4b03      	ldr	r3, [pc, #12]	; (8003c14 <BSP_LCD_DisplayOn+0x1c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	4798      	blx	r3
  }
}
 8003c0e:	bf00      	nop
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000a20 	.word	0x20000a20

08003c18 <MspInit>:
  * @brief  Initializes the LTDC MSP.
  * @param  None
  * @retval None
  */
static void MspInit(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08e      	sub	sp, #56	; 0x38
 8003c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __LTDC_CLK_ENABLE();
 8003c1e:	2300      	movs	r3, #0
 8003c20:	623b      	str	r3, [r7, #32]
 8003c22:	4b61      	ldr	r3, [pc, #388]	; (8003da8 <MspInit+0x190>)
 8003c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c26:	4a60      	ldr	r2, [pc, #384]	; (8003da8 <MspInit+0x190>)
 8003c28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c2e:	4b5e      	ldr	r3, [pc, #376]	; (8003da8 <MspInit+0x190>)
 8003c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c36:	623b      	str	r3, [r7, #32]
 8003c38:	6a3b      	ldr	r3, [r7, #32]
  __DMA2D_CLK_ENABLE(); 
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
 8003c3e:	4b5a      	ldr	r3, [pc, #360]	; (8003da8 <MspInit+0x190>)
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	4a59      	ldr	r2, [pc, #356]	; (8003da8 <MspInit+0x190>)
 8003c44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c48:	6313      	str	r3, [r2, #48]	; 0x30
 8003c4a:	4b57      	ldr	r3, [pc, #348]	; (8003da8 <MspInit+0x190>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c52:	61fb      	str	r3, [r7, #28]
 8003c54:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __GPIOA_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	4b53      	ldr	r3, [pc, #332]	; (8003da8 <MspInit+0x190>)
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	4a52      	ldr	r2, [pc, #328]	; (8003da8 <MspInit+0x190>)
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	6313      	str	r3, [r2, #48]	; 0x30
 8003c66:	4b50      	ldr	r3, [pc, #320]	; (8003da8 <MspInit+0x190>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	61bb      	str	r3, [r7, #24]
 8003c70:	69bb      	ldr	r3, [r7, #24]
  __GPIOB_CLK_ENABLE();
 8003c72:	2300      	movs	r3, #0
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	4b4c      	ldr	r3, [pc, #304]	; (8003da8 <MspInit+0x190>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	4a4b      	ldr	r2, [pc, #300]	; (8003da8 <MspInit+0x190>)
 8003c7c:	f043 0302 	orr.w	r3, r3, #2
 8003c80:	6313      	str	r3, [r2, #48]	; 0x30
 8003c82:	4b49      	ldr	r3, [pc, #292]	; (8003da8 <MspInit+0x190>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	617b      	str	r3, [r7, #20]
 8003c8c:	697b      	ldr	r3, [r7, #20]
  __GPIOC_CLK_ENABLE();
 8003c8e:	2300      	movs	r3, #0
 8003c90:	613b      	str	r3, [r7, #16]
 8003c92:	4b45      	ldr	r3, [pc, #276]	; (8003da8 <MspInit+0x190>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	4a44      	ldr	r2, [pc, #272]	; (8003da8 <MspInit+0x190>)
 8003c98:	f043 0304 	orr.w	r3, r3, #4
 8003c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c9e:	4b42      	ldr	r3, [pc, #264]	; (8003da8 <MspInit+0x190>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	f003 0304 	and.w	r3, r3, #4
 8003ca6:	613b      	str	r3, [r7, #16]
 8003ca8:	693b      	ldr	r3, [r7, #16]
  __GPIOD_CLK_ENABLE();
 8003caa:	2300      	movs	r3, #0
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	4b3e      	ldr	r3, [pc, #248]	; (8003da8 <MspInit+0x190>)
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	4a3d      	ldr	r2, [pc, #244]	; (8003da8 <MspInit+0x190>)
 8003cb4:	f043 0308 	orr.w	r3, r3, #8
 8003cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cba:	4b3b      	ldr	r3, [pc, #236]	; (8003da8 <MspInit+0x190>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
  __GPIOF_CLK_ENABLE();
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60bb      	str	r3, [r7, #8]
 8003cca:	4b37      	ldr	r3, [pc, #220]	; (8003da8 <MspInit+0x190>)
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	4a36      	ldr	r2, [pc, #216]	; (8003da8 <MspInit+0x190>)
 8003cd0:	f043 0320 	orr.w	r3, r3, #32
 8003cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cd6:	4b34      	ldr	r3, [pc, #208]	; (8003da8 <MspInit+0x190>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	60bb      	str	r3, [r7, #8]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
  __GPIOG_CLK_ENABLE();
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	607b      	str	r3, [r7, #4]
 8003ce6:	4b30      	ldr	r3, [pc, #192]	; (8003da8 <MspInit+0x190>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	4a2f      	ldr	r2, [pc, #188]	; (8003da8 <MspInit+0x190>)
 8003cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cf2:	4b2d      	ldr	r3, [pc, #180]	; (8003da8 <MspInit+0x190>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfa:	607b      	str	r3, [r7, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003cfe:	f641 0358 	movw	r3, #6232	; 0x1858
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003d04:	2302      	movs	r3, #2
 8003d06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003d10:	230e      	movs	r3, #14
 8003d12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4824      	ldr	r0, [pc, #144]	; (8003dac <MspInit+0x194>)
 8003d1c:	f001 f9b8 	bl	8005090 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003d20:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4820      	ldr	r0, [pc, #128]	; (8003db0 <MspInit+0x198>)
 8003d2e:	f001 f9af 	bl	8005090 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003d32:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	481d      	ldr	r0, [pc, #116]	; (8003db4 <MspInit+0x19c>)
 8003d40:	f001 f9a6 	bl	8005090 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003d44:	2348      	movs	r3, #72	; 0x48
 8003d46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	481a      	ldr	r0, [pc, #104]	; (8003db8 <MspInit+0x1a0>)
 8003d50:	f001 f99e 	bl	8005090 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d5e:	4619      	mov	r1, r3
 8003d60:	4816      	ldr	r0, [pc, #88]	; (8003dbc <MspInit+0x1a4>)
 8003d62:	f001 f995 	bl	8005090 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003d66:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d70:	4619      	mov	r1, r3
 8003d72:	4813      	ldr	r0, [pc, #76]	; (8003dc0 <MspInit+0x1a8>)
 8003d74:	f001 f98c 	bl	8005090 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003d7c:	2309      	movs	r3, #9
 8003d7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d84:	4619      	mov	r1, r3
 8003d86:	480a      	ldr	r0, [pc, #40]	; (8003db0 <MspInit+0x198>)
 8003d88:	f001 f982 	bl	8005090 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003d8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d96:	4619      	mov	r1, r3
 8003d98:	4809      	ldr	r0, [pc, #36]	; (8003dc0 <MspInit+0x1a8>)
 8003d9a:	f001 f979 	bl	8005090 <HAL_GPIO_Init>
}
 8003d9e:	bf00      	nop
 8003da0:	3738      	adds	r7, #56	; 0x38
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40023800 	.word	0x40023800
 8003dac:	40020000 	.word	0x40020000
 8003db0:	40020400 	.word	0x40020400
 8003db4:	40020800 	.word	0x40020800
 8003db8:	40020c00 	.word	0x40020c00
 8003dbc:	40021400 	.word	0x40021400
 8003dc0:	40021800 	.word	0x40021800

08003dc4 <BSP_LCD_DrawPixel>:
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003dc4:	b5b0      	push	{r4, r5, r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	603a      	str	r2, [r7, #0]
 8003dce:	80fb      	strh	r3, [r7, #6]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003dd4:	4b0c      	ldr	r3, [pc, #48]	; (8003e08 <BSP_LCD_DrawPixel+0x44>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a0c      	ldr	r2, [pc, #48]	; (8003e0c <BSP_LCD_DrawPixel+0x48>)
 8003dda:	2134      	movs	r1, #52	; 0x34
 8003ddc:	fb01 f303 	mul.w	r3, r1, r3
 8003de0:	4413      	add	r3, r2
 8003de2:	335c      	adds	r3, #92	; 0x5c
 8003de4:	681c      	ldr	r4, [r3, #0]
 8003de6:	88bd      	ldrh	r5, [r7, #4]
 8003de8:	f7ff fbe4 	bl	80035b4 <BSP_LCD_GetXSize>
 8003dec:	4603      	mov	r3, r0
 8003dee:	fb03 f205 	mul.w	r2, r3, r5
 8003df2:	88fb      	ldrh	r3, [r7, #6]
 8003df4:	4413      	add	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4423      	add	r3, r4
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	6013      	str	r3, [r2, #0]
}
 8003e00:	bf00      	nop
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bdb0      	pop	{r4, r5, r7, pc}
 8003e08:	20000a04 	.word	0x20000a04
 8003e0c:	200008ec 	.word	0x200008ec

08003e10 <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  * @retval None
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af02      	add	r7, sp, #8
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003e1e:	4b16      	ldr	r3, [pc, #88]	; (8003e78 <FillBuffer+0x68>)
 8003e20:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003e24:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003e26:	4b14      	ldr	r3, [pc, #80]	; (8003e78 <FillBuffer+0x68>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003e2c:	4a12      	ldr	r2, [pc, #72]	; (8003e78 <FillBuffer+0x68>)
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8003e32:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <FillBuffer+0x68>)
 8003e34:	4a11      	ldr	r2, [pc, #68]	; (8003e7c <FillBuffer+0x6c>)
 8003e36:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003e38:	480f      	ldr	r0, [pc, #60]	; (8003e78 <FillBuffer+0x68>)
 8003e3a:	f000 fd8d 	bl	8004958 <HAL_DMA2D_Init>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d115      	bne.n	8003e70 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003e44:	68f9      	ldr	r1, [r7, #12]
 8003e46:	480c      	ldr	r0, [pc, #48]	; (8003e78 <FillBuffer+0x68>)
 8003e48:	f000 fff4 	bl	8004e34 <HAL_DMA2D_ConfigLayer>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10e      	bne.n	8003e70 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	69f9      	ldr	r1, [r7, #28]
 8003e5c:	4806      	ldr	r0, [pc, #24]	; (8003e78 <FillBuffer+0x68>)
 8003e5e:	f000 fdc4 	bl	80049ea <HAL_DMA2D_Start>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d103      	bne.n	8003e70 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003e68:	210a      	movs	r1, #10
 8003e6a:	4803      	ldr	r0, [pc, #12]	; (8003e78 <FillBuffer+0x68>)
 8003e6c:	f000 fde8 	bl	8004a40 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003e70:	bf00      	nop
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	20000994 	.word	0x20000994
 8003e7c:	4002b000 	.word	0x4002b000

08003e80 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param  None
  * @retval None
  */
void BSP_SDRAM_Init(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003e84:	4b22      	ldr	r3, [pc, #136]	; (8003f10 <BSP_SDRAM_Init+0x90>)
 8003e86:	4a23      	ldr	r2, [pc, #140]	; (8003f14 <BSP_SDRAM_Init+0x94>)
 8003e88:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003e8a:	4b23      	ldr	r3, [pc, #140]	; (8003f18 <BSP_SDRAM_Init+0x98>)
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003e90:	4b21      	ldr	r3, [pc, #132]	; (8003f18 <BSP_SDRAM_Init+0x98>)
 8003e92:	2207      	movs	r2, #7
 8003e94:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003e96:	4b20      	ldr	r3, [pc, #128]	; (8003f18 <BSP_SDRAM_Init+0x98>)
 8003e98:	2204      	movs	r2, #4
 8003e9a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003e9c:	4b1e      	ldr	r3, [pc, #120]	; (8003f18 <BSP_SDRAM_Init+0x98>)
 8003e9e:	2207      	movs	r2, #7
 8003ea0:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003ea2:	4b1d      	ldr	r3, [pc, #116]	; (8003f18 <BSP_SDRAM_Init+0x98>)
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003ea8:	4b1b      	ldr	r3, [pc, #108]	; (8003f18 <BSP_SDRAM_Init+0x98>)
 8003eaa:	2202      	movs	r2, #2
 8003eac:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003eae:	4b1a      	ldr	r3, [pc, #104]	; (8003f18 <BSP_SDRAM_Init+0x98>)
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003eb4:	4b16      	ldr	r3, [pc, #88]	; (8003f10 <BSP_SDRAM_Init+0x90>)
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003eba:	4b15      	ldr	r3, [pc, #84]	; (8003f10 <BSP_SDRAM_Init+0x90>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003ec0:	4b13      	ldr	r3, [pc, #76]	; (8003f10 <BSP_SDRAM_Init+0x90>)
 8003ec2:	2204      	movs	r2, #4
 8003ec4:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003ec6:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <BSP_SDRAM_Init+0x90>)
 8003ec8:	2210      	movs	r2, #16
 8003eca:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003ecc:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <BSP_SDRAM_Init+0x90>)
 8003ece:	2240      	movs	r2, #64	; 0x40
 8003ed0:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003ed2:	4b0f      	ldr	r3, [pc, #60]	; (8003f10 <BSP_SDRAM_Init+0x90>)
 8003ed4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003ed8:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003eda:	4b0d      	ldr	r3, [pc, #52]	; (8003f10 <BSP_SDRAM_Init+0x90>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <BSP_SDRAM_Init+0x90>)
 8003ee2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ee6:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003ee8:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <BSP_SDRAM_Init+0x90>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003eee:	4b08      	ldr	r3, [pc, #32]	; (8003f10 <BSP_SDRAM_Init+0x90>)
 8003ef0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ef4:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  MspInit();
 8003ef6:	f000 f871 	bl	8003fdc <MspInit>
  HAL_SDRAM_Init(&SdramHandle, &Timing);
 8003efa:	4907      	ldr	r1, [pc, #28]	; (8003f18 <BSP_SDRAM_Init+0x98>)
 8003efc:	4804      	ldr	r0, [pc, #16]	; (8003f10 <BSP_SDRAM_Init+0x90>)
 8003efe:	f002 ffbb 	bl	8006e78 <HAL_SDRAM_Init>
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003f02:	f240 506a 	movw	r0, #1386	; 0x56a
 8003f06:	f000 f809 	bl	8003f1c <BSP_SDRAM_Initialization_sequence>
}
 8003f0a:	bf00      	nop
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	20000a24 	.word	0x20000a24
 8003f14:	a0000140 	.word	0xa0000140
 8003f18:	20000a58 	.word	0x20000a58

08003f1c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003f24:	2300      	movs	r3, #0
 8003f26:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003f28:	4b2a      	ldr	r3, [pc, #168]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003f2e:	4b29      	ldr	r3, [pc, #164]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f30:	2208      	movs	r2, #8
 8003f32:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003f34:	4b27      	ldr	r3, [pc, #156]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f36:	2201      	movs	r2, #1
 8003f38:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003f3a:	4b26      	ldr	r3, [pc, #152]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003f40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f44:	4923      	ldr	r1, [pc, #140]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f46:	4824      	ldr	r0, [pc, #144]	; (8003fd8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003f48:	f002 ffca 	bl	8006ee0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003f4c:	2001      	movs	r0, #1
 8003f4e:	f000 f991 	bl	8004274 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003f52:	4b20      	ldr	r3, [pc, #128]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f54:	2202      	movs	r2, #2
 8003f56:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003f58:	4b1e      	ldr	r3, [pc, #120]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f5a:	2208      	movs	r2, #8
 8003f5c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003f5e:	4b1d      	ldr	r3, [pc, #116]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f60:	2201      	movs	r2, #1
 8003f62:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003f64:	4b1b      	ldr	r3, [pc, #108]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003f6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f6e:	4919      	ldr	r1, [pc, #100]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f70:	4819      	ldr	r0, [pc, #100]	; (8003fd8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003f72:	f002 ffb5 	bl	8006ee0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003f76:	4b17      	ldr	r3, [pc, #92]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f78:	2203      	movs	r2, #3
 8003f7a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003f7c:	4b15      	ldr	r3, [pc, #84]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f7e:	2208      	movs	r2, #8
 8003f80:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003f82:	4b14      	ldr	r3, [pc, #80]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f84:	2204      	movs	r2, #4
 8003f86:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003f88:	4b12      	ldr	r3, [pc, #72]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003f8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f92:	4910      	ldr	r1, [pc, #64]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f94:	4810      	ldr	r0, [pc, #64]	; (8003fd8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003f96:	f002 ffa3 	bl	8006ee0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003f9a:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003f9e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003fa0:	4b0c      	ldr	r3, [pc, #48]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fa2:	2204      	movs	r2, #4
 8003fa4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003fa6:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fa8:	2208      	movs	r2, #8
 8003faa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003fac:	4b09      	ldr	r3, [pc, #36]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fae:	2201      	movs	r2, #1
 8003fb0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4a07      	ldr	r2, [pc, #28]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fb6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003fb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fbc:	4905      	ldr	r1, [pc, #20]	; (8003fd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fbe:	4806      	ldr	r0, [pc, #24]	; (8003fd8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003fc0:	f002 ff8e 	bl	8006ee0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	4804      	ldr	r0, [pc, #16]	; (8003fd8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003fc8:	f002 ffbf 	bl	8006f4a <HAL_SDRAM_ProgramRefreshRate>
}
 8003fcc:	bf00      	nop
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	20000a74 	.word	0x20000a74
 8003fd8:	20000a24 	.word	0x20000a24

08003fdc <MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  None
  * @retval None
  */
static void MspInit(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08e      	sub	sp, #56	; 0x38
 8003fe0:	af00      	add	r7, sp, #0
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;
  SDRAM_HandleTypeDef  *hsdram = &SdramHandle;
 8003fe2:	4b79      	ldr	r3, [pc, #484]	; (80041c8 <MspInit+0x1ec>)
 8003fe4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Enable FMC clock */
  __FMC_CLK_ENABLE();
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61fb      	str	r3, [r7, #28]
 8003fea:	4b78      	ldr	r3, [pc, #480]	; (80041cc <MspInit+0x1f0>)
 8003fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fee:	4a77      	ldr	r2, [pc, #476]	; (80041cc <MspInit+0x1f0>)
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	6393      	str	r3, [r2, #56]	; 0x38
 8003ff6:	4b75      	ldr	r3, [pc, #468]	; (80041cc <MspInit+0x1f0>)
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	61fb      	str	r3, [r7, #28]
 8004000:	69fb      	ldr	r3, [r7, #28]

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004002:	2300      	movs	r3, #0
 8004004:	61bb      	str	r3, [r7, #24]
 8004006:	4b71      	ldr	r3, [pc, #452]	; (80041cc <MspInit+0x1f0>)
 8004008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400a:	4a70      	ldr	r2, [pc, #448]	; (80041cc <MspInit+0x1f0>)
 800400c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004010:	6313      	str	r3, [r2, #48]	; 0x30
 8004012:	4b6e      	ldr	r3, [pc, #440]	; (80041cc <MspInit+0x1f0>)
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800401a:	61bb      	str	r3, [r7, #24]
 800401c:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __GPIOB_CLK_ENABLE();
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	4b6a      	ldr	r3, [pc, #424]	; (80041cc <MspInit+0x1f0>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	4a69      	ldr	r2, [pc, #420]	; (80041cc <MspInit+0x1f0>)
 8004028:	f043 0302 	orr.w	r3, r3, #2
 800402c:	6313      	str	r3, [r2, #48]	; 0x30
 800402e:	4b67      	ldr	r3, [pc, #412]	; (80041cc <MspInit+0x1f0>)
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	697b      	ldr	r3, [r7, #20]
  __GPIOC_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	613b      	str	r3, [r7, #16]
 800403e:	4b63      	ldr	r3, [pc, #396]	; (80041cc <MspInit+0x1f0>)
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	4a62      	ldr	r2, [pc, #392]	; (80041cc <MspInit+0x1f0>)
 8004044:	f043 0304 	orr.w	r3, r3, #4
 8004048:	6313      	str	r3, [r2, #48]	; 0x30
 800404a:	4b60      	ldr	r3, [pc, #384]	; (80041cc <MspInit+0x1f0>)
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	f003 0304 	and.w	r3, r3, #4
 8004052:	613b      	str	r3, [r7, #16]
 8004054:	693b      	ldr	r3, [r7, #16]
  __GPIOD_CLK_ENABLE();
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	4b5c      	ldr	r3, [pc, #368]	; (80041cc <MspInit+0x1f0>)
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	4a5b      	ldr	r2, [pc, #364]	; (80041cc <MspInit+0x1f0>)
 8004060:	f043 0308 	orr.w	r3, r3, #8
 8004064:	6313      	str	r3, [r2, #48]	; 0x30
 8004066:	4b59      	ldr	r3, [pc, #356]	; (80041cc <MspInit+0x1f0>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	68fb      	ldr	r3, [r7, #12]
  __GPIOE_CLK_ENABLE();
 8004072:	2300      	movs	r3, #0
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	4b55      	ldr	r3, [pc, #340]	; (80041cc <MspInit+0x1f0>)
 8004078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407a:	4a54      	ldr	r2, [pc, #336]	; (80041cc <MspInit+0x1f0>)
 800407c:	f043 0310 	orr.w	r3, r3, #16
 8004080:	6313      	str	r3, [r2, #48]	; 0x30
 8004082:	4b52      	ldr	r3, [pc, #328]	; (80041cc <MspInit+0x1f0>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	f003 0310 	and.w	r3, r3, #16
 800408a:	60bb      	str	r3, [r7, #8]
 800408c:	68bb      	ldr	r3, [r7, #8]
  __GPIOF_CLK_ENABLE();
 800408e:	2300      	movs	r3, #0
 8004090:	607b      	str	r3, [r7, #4]
 8004092:	4b4e      	ldr	r3, [pc, #312]	; (80041cc <MspInit+0x1f0>)
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	4a4d      	ldr	r2, [pc, #308]	; (80041cc <MspInit+0x1f0>)
 8004098:	f043 0320 	orr.w	r3, r3, #32
 800409c:	6313      	str	r3, [r2, #48]	; 0x30
 800409e:	4b4b      	ldr	r3, [pc, #300]	; (80041cc <MspInit+0x1f0>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	f003 0320 	and.w	r3, r3, #32
 80040a6:	607b      	str	r3, [r7, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
  __GPIOG_CLK_ENABLE();
 80040aa:	2300      	movs	r3, #0
 80040ac:	603b      	str	r3, [r7, #0]
 80040ae:	4b47      	ldr	r3, [pc, #284]	; (80041cc <MspInit+0x1f0>)
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	4a46      	ldr	r2, [pc, #280]	; (80041cc <MspInit+0x1f0>)
 80040b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040b8:	6313      	str	r3, [r2, #48]	; 0x30
 80040ba:	4b44      	ldr	r3, [pc, #272]	; (80041cc <MspInit+0x1f0>)
 80040bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c2:	603b      	str	r3, [r7, #0]
 80040c4:	683b      	ldr	r3, [r7, #0]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80040c6:	2302      	movs	r3, #2
 80040c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80040ca:	2302      	movs	r3, #2
 80040cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80040d2:	230c      	movs	r3, #12
 80040d4:	633b      	str	r3, [r7, #48]	; 0x30

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80040d6:	2360      	movs	r3, #96	; 0x60
 80040d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80040da:	f107 0320 	add.w	r3, r7, #32
 80040de:	4619      	mov	r1, r3
 80040e0:	483b      	ldr	r0, [pc, #236]	; (80041d0 <MspInit+0x1f4>)
 80040e2:	f000 ffd5 	bl	8005090 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80040e6:	2301      	movs	r3, #1
 80040e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80040ea:	f107 0320 	add.w	r3, r7, #32
 80040ee:	4619      	mov	r1, r3
 80040f0:	4838      	ldr	r0, [pc, #224]	; (80041d4 <MspInit+0x1f8>)
 80040f2:	f000 ffcd 	bl	8005090 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80040f6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80040fa:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80040fc:	f107 0320 	add.w	r3, r7, #32
 8004100:	4619      	mov	r1, r3
 8004102:	4835      	ldr	r0, [pc, #212]	; (80041d8 <MspInit+0x1fc>)
 8004104:	f000 ffc4 	bl	8005090 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8004108:	f64f 7383 	movw	r3, #65411	; 0xff83
 800410c:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800410e:	f107 0320 	add.w	r3, r7, #32
 8004112:	4619      	mov	r1, r3
 8004114:	4831      	ldr	r0, [pc, #196]	; (80041dc <MspInit+0x200>)
 8004116:	f000 ffbb 	bl	8005090 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800411a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800411e:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004120:	f107 0320 	add.w	r3, r7, #32
 8004124:	4619      	mov	r1, r3
 8004126:	482e      	ldr	r0, [pc, #184]	; (80041e0 <MspInit+0x204>)
 8004128:	f000 ffb2 	bl	8005090 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800412c:	f248 1333 	movw	r3, #33075	; 0x8133
 8004130:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004132:	f107 0320 	add.w	r3, r7, #32
 8004136:	4619      	mov	r1, r3
 8004138:	482a      	ldr	r0, [pc, #168]	; (80041e4 <MspInit+0x208>)
 800413a:	f000 ffa9 	bl	8005090 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800413e:	4b2a      	ldr	r3, [pc, #168]	; (80041e8 <MspInit+0x20c>)
 8004140:	2200      	movs	r2, #0
 8004142:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004144:	4b28      	ldr	r3, [pc, #160]	; (80041e8 <MspInit+0x20c>)
 8004146:	2280      	movs	r2, #128	; 0x80
 8004148:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800414a:	4b27      	ldr	r3, [pc, #156]	; (80041e8 <MspInit+0x20c>)
 800414c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004150:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8004152:	4b25      	ldr	r3, [pc, #148]	; (80041e8 <MspInit+0x20c>)
 8004154:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004158:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800415a:	4b23      	ldr	r3, [pc, #140]	; (80041e8 <MspInit+0x20c>)
 800415c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004160:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004162:	4b21      	ldr	r3, [pc, #132]	; (80041e8 <MspInit+0x20c>)
 8004164:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004168:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800416a:	4b1f      	ldr	r3, [pc, #124]	; (80041e8 <MspInit+0x20c>)
 800416c:	2200      	movs	r2, #0
 800416e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004170:	4b1d      	ldr	r3, [pc, #116]	; (80041e8 <MspInit+0x20c>)
 8004172:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004176:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004178:	4b1b      	ldr	r3, [pc, #108]	; (80041e8 <MspInit+0x20c>)
 800417a:	2200      	movs	r2, #0
 800417c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800417e:	4b1a      	ldr	r3, [pc, #104]	; (80041e8 <MspInit+0x20c>)
 8004180:	2203      	movs	r2, #3
 8004182:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004184:	4b18      	ldr	r3, [pc, #96]	; (80041e8 <MspInit+0x20c>)
 8004186:	2200      	movs	r2, #0
 8004188:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800418a:	4b17      	ldr	r3, [pc, #92]	; (80041e8 <MspInit+0x20c>)
 800418c:	2200      	movs	r2, #0
 800418e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8004190:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <MspInit+0x20c>)
 8004192:	4a16      	ldr	r2, [pc, #88]	; (80041ec <MspInit+0x210>)
 8004194:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8004196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004198:	4a13      	ldr	r2, [pc, #76]	; (80041e8 <MspInit+0x20c>)
 800419a:	631a      	str	r2, [r3, #48]	; 0x30
 800419c:	4a12      	ldr	r2, [pc, #72]	; (80041e8 <MspInit+0x20c>)
 800419e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80041a2:	4811      	ldr	r0, [pc, #68]	; (80041e8 <MspInit+0x20c>)
 80041a4:	f000 fa36 	bl	8004614 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80041a8:	480f      	ldr	r0, [pc, #60]	; (80041e8 <MspInit+0x20c>)
 80041aa:	f000 f985 	bl	80044b8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0, 0);
 80041ae:	2200      	movs	r2, #0
 80041b0:	2100      	movs	r1, #0
 80041b2:	2038      	movs	r0, #56	; 0x38
 80041b4:	f000 f93a 	bl	800442c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80041b8:	2038      	movs	r0, #56	; 0x38
 80041ba:	f000 f953 	bl	8004464 <HAL_NVIC_EnableIRQ>
}
 80041be:	bf00      	nop
 80041c0:	3738      	adds	r7, #56	; 0x38
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20000a24 	.word	0x20000a24
 80041cc:	40023800 	.word	0x40023800
 80041d0:	40020400 	.word	0x40020400
 80041d4:	40020800 	.word	0x40020800
 80041d8:	40020c00 	.word	0x40020c00
 80041dc:	40021000 	.word	0x40021000
 80041e0:	40021400 	.word	0x40021400
 80041e4:	40021800 	.word	0x40021800
 80041e8:	20000a84 	.word	0x20000a84
 80041ec:	40026410 	.word	0x40026410

080041f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041f4:	4b0e      	ldr	r3, [pc, #56]	; (8004230 <HAL_Init+0x40>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a0d      	ldr	r2, [pc, #52]	; (8004230 <HAL_Init+0x40>)
 80041fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004200:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <HAL_Init+0x40>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a0a      	ldr	r2, [pc, #40]	; (8004230 <HAL_Init+0x40>)
 8004206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800420a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800420c:	4b08      	ldr	r3, [pc, #32]	; (8004230 <HAL_Init+0x40>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a07      	ldr	r2, [pc, #28]	; (8004230 <HAL_Init+0x40>)
 8004212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004216:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004218:	2003      	movs	r0, #3
 800421a:	f000 f8fc 	bl	8004416 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800421e:	200f      	movs	r0, #15
 8004220:	f7fe f93a 	bl	8002498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004224:	f7fd fdb4 	bl	8001d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	40023c00 	.word	0x40023c00

08004234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004238:	4b06      	ldr	r3, [pc, #24]	; (8004254 <HAL_IncTick+0x20>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	461a      	mov	r2, r3
 800423e:	4b06      	ldr	r3, [pc, #24]	; (8004258 <HAL_IncTick+0x24>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4413      	add	r3, r2
 8004244:	4a04      	ldr	r2, [pc, #16]	; (8004258 <HAL_IncTick+0x24>)
 8004246:	6013      	str	r3, [r2, #0]
}
 8004248:	bf00      	nop
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	20000090 	.word	0x20000090
 8004258:	20000ae4 	.word	0x20000ae4

0800425c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  return uwTick;
 8004260:	4b03      	ldr	r3, [pc, #12]	; (8004270 <HAL_GetTick+0x14>)
 8004262:	681b      	ldr	r3, [r3, #0]
}
 8004264:	4618      	mov	r0, r3
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	20000ae4 	.word	0x20000ae4

08004274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800427c:	f7ff ffee 	bl	800425c <HAL_GetTick>
 8004280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428c:	d005      	beq.n	800429a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800428e:	4b0a      	ldr	r3, [pc, #40]	; (80042b8 <HAL_Delay+0x44>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4413      	add	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800429a:	bf00      	nop
 800429c:	f7ff ffde 	bl	800425c <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d8f7      	bhi.n	800429c <HAL_Delay+0x28>
  {
  }
}
 80042ac:	bf00      	nop
 80042ae:	bf00      	nop
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	20000090 	.word	0x20000090

080042bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042cc:	4b0c      	ldr	r3, [pc, #48]	; (8004300 <__NVIC_SetPriorityGrouping+0x44>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042d8:	4013      	ands	r3, r2
 80042da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042ee:	4a04      	ldr	r2, [pc, #16]	; (8004300 <__NVIC_SetPriorityGrouping+0x44>)
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	60d3      	str	r3, [r2, #12]
}
 80042f4:	bf00      	nop
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	e000ed00 	.word	0xe000ed00

08004304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004308:	4b04      	ldr	r3, [pc, #16]	; (800431c <__NVIC_GetPriorityGrouping+0x18>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	0a1b      	lsrs	r3, r3, #8
 800430e:	f003 0307 	and.w	r3, r3, #7
}
 8004312:	4618      	mov	r0, r3
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	e000ed00 	.word	0xe000ed00

08004320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	4603      	mov	r3, r0
 8004328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800432a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800432e:	2b00      	cmp	r3, #0
 8004330:	db0b      	blt.n	800434a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004332:	79fb      	ldrb	r3, [r7, #7]
 8004334:	f003 021f 	and.w	r2, r3, #31
 8004338:	4907      	ldr	r1, [pc, #28]	; (8004358 <__NVIC_EnableIRQ+0x38>)
 800433a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	2001      	movs	r0, #1
 8004342:	fa00 f202 	lsl.w	r2, r0, r2
 8004346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	e000e100 	.word	0xe000e100

0800435c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	4603      	mov	r3, r0
 8004364:	6039      	str	r1, [r7, #0]
 8004366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436c:	2b00      	cmp	r3, #0
 800436e:	db0a      	blt.n	8004386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	b2da      	uxtb	r2, r3
 8004374:	490c      	ldr	r1, [pc, #48]	; (80043a8 <__NVIC_SetPriority+0x4c>)
 8004376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437a:	0112      	lsls	r2, r2, #4
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	440b      	add	r3, r1
 8004380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004384:	e00a      	b.n	800439c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	b2da      	uxtb	r2, r3
 800438a:	4908      	ldr	r1, [pc, #32]	; (80043ac <__NVIC_SetPriority+0x50>)
 800438c:	79fb      	ldrb	r3, [r7, #7]
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	3b04      	subs	r3, #4
 8004394:	0112      	lsls	r2, r2, #4
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	440b      	add	r3, r1
 800439a:	761a      	strb	r2, [r3, #24]
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	e000e100 	.word	0xe000e100
 80043ac:	e000ed00 	.word	0xe000ed00

080043b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b089      	sub	sp, #36	; 0x24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	f1c3 0307 	rsb	r3, r3, #7
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	bf28      	it	cs
 80043ce:	2304      	movcs	r3, #4
 80043d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	3304      	adds	r3, #4
 80043d6:	2b06      	cmp	r3, #6
 80043d8:	d902      	bls.n	80043e0 <NVIC_EncodePriority+0x30>
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	3b03      	subs	r3, #3
 80043de:	e000      	b.n	80043e2 <NVIC_EncodePriority+0x32>
 80043e0:	2300      	movs	r3, #0
 80043e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043e4:	f04f 32ff 	mov.w	r2, #4294967295
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	fa02 f303 	lsl.w	r3, r2, r3
 80043ee:	43da      	mvns	r2, r3
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	401a      	ands	r2, r3
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043f8:	f04f 31ff 	mov.w	r1, #4294967295
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004402:	43d9      	mvns	r1, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004408:	4313      	orrs	r3, r2
         );
}
 800440a:	4618      	mov	r0, r3
 800440c:	3724      	adds	r7, #36	; 0x24
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b082      	sub	sp, #8
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7ff ff4c 	bl	80042bc <__NVIC_SetPriorityGrouping>
}
 8004424:	bf00      	nop
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	4603      	mov	r3, r0
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800443a:	2300      	movs	r3, #0
 800443c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800443e:	f7ff ff61 	bl	8004304 <__NVIC_GetPriorityGrouping>
 8004442:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	68b9      	ldr	r1, [r7, #8]
 8004448:	6978      	ldr	r0, [r7, #20]
 800444a:	f7ff ffb1 	bl	80043b0 <NVIC_EncodePriority>
 800444e:	4602      	mov	r2, r0
 8004450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004454:	4611      	mov	r1, r2
 8004456:	4618      	mov	r0, r3
 8004458:	f7ff ff80 	bl	800435c <__NVIC_SetPriority>
}
 800445c:	bf00      	nop
 800445e:	3718      	adds	r7, #24
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	4603      	mov	r3, r0
 800446c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800446e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff ff54 	bl	8004320 <__NVIC_EnableIRQ>
}
 8004478:	bf00      	nop
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e00e      	b.n	80044b0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	795b      	ldrb	r3, [r3, #5]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	d105      	bne.n	80044a8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7fd fca0 	bl	8001de8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80044c4:	f7ff feca 	bl	800425c <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e099      	b.n	8004608 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0201 	bic.w	r2, r2, #1
 80044f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044f4:	e00f      	b.n	8004516 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044f6:	f7ff feb1 	bl	800425c <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b05      	cmp	r3, #5
 8004502:	d908      	bls.n	8004516 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2220      	movs	r2, #32
 8004508:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2203      	movs	r2, #3
 800450e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e078      	b.n	8004608 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1e8      	bne.n	80044f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	4b38      	ldr	r3, [pc, #224]	; (8004610 <HAL_DMA_Init+0x158>)
 8004530:	4013      	ands	r3, r2
 8004532:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004542:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800454e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800455a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	4313      	orrs	r3, r2
 8004566:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	2b04      	cmp	r3, #4
 800456e:	d107      	bne.n	8004580 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004578:	4313      	orrs	r3, r2
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	4313      	orrs	r3, r2
 800457e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f023 0307 	bic.w	r3, r3, #7
 8004596:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	4313      	orrs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d117      	bne.n	80045da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00e      	beq.n	80045da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f94f 	bl	8004860 <DMA_CheckFifoParam>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d008      	beq.n	80045da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2240      	movs	r2, #64	; 0x40
 80045cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80045d6:	2301      	movs	r3, #1
 80045d8:	e016      	b.n	8004608 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f906 	bl	80047f4 <DMA_CalcBaseAndBitshift>
 80045e8:	4603      	mov	r3, r0
 80045ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f0:	223f      	movs	r2, #63	; 0x3f
 80045f2:	409a      	lsls	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	f010803f 	.word	0xf010803f

08004614 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e050      	b.n	80046c8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d101      	bne.n	8004636 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004632:	2302      	movs	r3, #2
 8004634:	e048      	b.n	80046c8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0201 	bic.w	r2, r2, #1
 8004644:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2200      	movs	r2, #0
 8004654:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2200      	movs	r2, #0
 800465c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2200      	movs	r2, #0
 8004664:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2200      	movs	r2, #0
 800466c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2221      	movs	r2, #33	; 0x21
 8004674:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f8bc 	bl	80047f4 <DMA_CalcBaseAndBitshift>
 800467c:	4603      	mov	r3, r0
 800467e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a8:	223f      	movs	r2, #63	; 0x3f
 80046aa:	409a      	lsls	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046de:	f7ff fdbd 	bl	800425c <HAL_GetTick>
 80046e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d008      	beq.n	8004702 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2280      	movs	r2, #128	; 0x80
 80046f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e052      	b.n	80047a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0216 	bic.w	r2, r2, #22
 8004710:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695a      	ldr	r2, [r3, #20]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004720:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	2b00      	cmp	r3, #0
 8004728:	d103      	bne.n	8004732 <HAL_DMA_Abort+0x62>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800472e:	2b00      	cmp	r3, #0
 8004730:	d007      	beq.n	8004742 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0208 	bic.w	r2, r2, #8
 8004740:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0201 	bic.w	r2, r2, #1
 8004750:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004752:	e013      	b.n	800477c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004754:	f7ff fd82 	bl	800425c <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b05      	cmp	r3, #5
 8004760:	d90c      	bls.n	800477c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2220      	movs	r2, #32
 8004766:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2203      	movs	r2, #3
 800476c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e015      	b.n	80047a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1e4      	bne.n	8004754 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800478e:	223f      	movs	r2, #63	; 0x3f
 8004790:	409a      	lsls	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d004      	beq.n	80047ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2280      	movs	r2, #128	; 0x80
 80047c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e00c      	b.n	80047e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2205      	movs	r2, #5
 80047d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0201 	bic.w	r2, r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	b2db      	uxtb	r3, r3
 8004802:	3b10      	subs	r3, #16
 8004804:	4a14      	ldr	r2, [pc, #80]	; (8004858 <DMA_CalcBaseAndBitshift+0x64>)
 8004806:	fba2 2303 	umull	r2, r3, r2, r3
 800480a:	091b      	lsrs	r3, r3, #4
 800480c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800480e:	4a13      	ldr	r2, [pc, #76]	; (800485c <DMA_CalcBaseAndBitshift+0x68>)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4413      	add	r3, r2
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2b03      	cmp	r3, #3
 8004820:	d909      	bls.n	8004836 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800482a:	f023 0303 	bic.w	r3, r3, #3
 800482e:	1d1a      	adds	r2, r3, #4
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	659a      	str	r2, [r3, #88]	; 0x58
 8004834:	e007      	b.n	8004846 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800483e:	f023 0303 	bic.w	r3, r3, #3
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800484a:	4618      	mov	r0, r3
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	aaaaaaab 	.word	0xaaaaaaab
 800485c:	08011184 	.word	0x08011184

08004860 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004868:	2300      	movs	r3, #0
 800486a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004870:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d11f      	bne.n	80048ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b03      	cmp	r3, #3
 800487e:	d856      	bhi.n	800492e <DMA_CheckFifoParam+0xce>
 8004880:	a201      	add	r2, pc, #4	; (adr r2, 8004888 <DMA_CheckFifoParam+0x28>)
 8004882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004886:	bf00      	nop
 8004888:	08004899 	.word	0x08004899
 800488c:	080048ab 	.word	0x080048ab
 8004890:	08004899 	.word	0x08004899
 8004894:	0800492f 	.word	0x0800492f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d046      	beq.n	8004932 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a8:	e043      	b.n	8004932 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048b2:	d140      	bne.n	8004936 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048b8:	e03d      	b.n	8004936 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048c2:	d121      	bne.n	8004908 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2b03      	cmp	r3, #3
 80048c8:	d837      	bhi.n	800493a <DMA_CheckFifoParam+0xda>
 80048ca:	a201      	add	r2, pc, #4	; (adr r2, 80048d0 <DMA_CheckFifoParam+0x70>)
 80048cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d0:	080048e1 	.word	0x080048e1
 80048d4:	080048e7 	.word	0x080048e7
 80048d8:	080048e1 	.word	0x080048e1
 80048dc:	080048f9 	.word	0x080048f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	73fb      	strb	r3, [r7, #15]
      break;
 80048e4:	e030      	b.n	8004948 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d025      	beq.n	800493e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048f6:	e022      	b.n	800493e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004900:	d11f      	bne.n	8004942 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004906:	e01c      	b.n	8004942 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	2b02      	cmp	r3, #2
 800490c:	d903      	bls.n	8004916 <DMA_CheckFifoParam+0xb6>
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	2b03      	cmp	r3, #3
 8004912:	d003      	beq.n	800491c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004914:	e018      	b.n	8004948 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	73fb      	strb	r3, [r7, #15]
      break;
 800491a:	e015      	b.n	8004948 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004920:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00e      	beq.n	8004946 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	73fb      	strb	r3, [r7, #15]
      break;
 800492c:	e00b      	b.n	8004946 <DMA_CheckFifoParam+0xe6>
      break;
 800492e:	bf00      	nop
 8004930:	e00a      	b.n	8004948 <DMA_CheckFifoParam+0xe8>
      break;
 8004932:	bf00      	nop
 8004934:	e008      	b.n	8004948 <DMA_CheckFifoParam+0xe8>
      break;
 8004936:	bf00      	nop
 8004938:	e006      	b.n	8004948 <DMA_CheckFifoParam+0xe8>
      break;
 800493a:	bf00      	nop
 800493c:	e004      	b.n	8004948 <DMA_CheckFifoParam+0xe8>
      break;
 800493e:	bf00      	nop
 8004940:	e002      	b.n	8004948 <DMA_CheckFifoParam+0xe8>
      break;   
 8004942:	bf00      	nop
 8004944:	e000      	b.n	8004948 <DMA_CheckFifoParam+0xe8>
      break;
 8004946:	bf00      	nop
    }
  } 
  
  return status; 
 8004948:	7bfb      	ldrb	r3, [r7, #15]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop

08004958 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e03b      	b.n	80049e2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d106      	bne.n	8004984 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7fd fa54 	bl	8001e2c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a8:	f023 0107 	bic.w	r1, r3, #7
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689a      	ldr	r2, [r3, #8]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80049c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	68d1      	ldr	r1, [r2, #12]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6812      	ldr	r2, [r2, #0]
 80049ce:	430b      	orrs	r3, r1
 80049d0:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b086      	sub	sp, #24
 80049ee:	af02      	add	r7, sp, #8
 80049f0:	60f8      	str	r0, [r7, #12]
 80049f2:	60b9      	str	r1, [r7, #8]
 80049f4:	607a      	str	r2, [r7, #4]
 80049f6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d101      	bne.n	8004a06 <HAL_DMA2D_Start+0x1c>
 8004a02:	2302      	movs	r3, #2
 8004a04:	e018      	b.n	8004a38 <HAL_DMA2D_Start+0x4e>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2202      	movs	r2, #2
 8004a12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	68b9      	ldr	r1, [r7, #8]
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 fa99 	bl	8004f58 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f042 0201 	orr.w	r2, r2, #1
 8004a34:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d056      	beq.n	8004b0a <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a5c:	f7ff fbfe 	bl	800425c <HAL_GetTick>
 8004a60:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004a62:	e04b      	b.n	8004afc <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d023      	beq.n	8004abe <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f003 0320 	and.w	r3, r3, #32
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d005      	beq.n	8004a8c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a84:	f043 0202 	orr.w	r2, r3, #2
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d005      	beq.n	8004aa2 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9a:	f043 0201 	orr.w	r2, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2221      	movs	r2, #33	; 0x21
 8004aa8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2204      	movs	r2, #4
 8004aae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e0a5      	b.n	8004c0a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac4:	d01a      	beq.n	8004afc <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ac6:	f7ff fbc9 	bl	800425c <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d302      	bcc.n	8004adc <HAL_DMA2D_PollForTransfer+0x9c>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10f      	bne.n	8004afc <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae0:	f043 0220 	orr.w	r2, r3, #32
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2203      	movs	r2, #3
 8004aec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e086      	b.n	8004c0a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0ac      	beq.n	8004a64 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	f003 0320 	and.w	r3, r3, #32
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d061      	beq.n	8004bf0 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b2c:	f7ff fb96 	bl	800425c <HAL_GetTick>
 8004b30:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004b32:	e056      	b.n	8004be2 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d02e      	beq.n	8004ba4 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f003 0308 	and.w	r3, r3, #8
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d005      	beq.n	8004b5c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b54:	f043 0204 	orr.w	r2, r3, #4
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d005      	beq.n	8004b72 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b6a:	f043 0202 	orr.w	r2, r3, #2
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d005      	beq.n	8004b88 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b80:	f043 0201 	orr.w	r2, r3, #1
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2229      	movs	r2, #41	; 0x29
 8004b8e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2204      	movs	r2, #4
 8004b94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e032      	b.n	8004c0a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004baa:	d01a      	beq.n	8004be2 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004bac:	f7ff fb56 	bl	800425c <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d302      	bcc.n	8004bc2 <HAL_DMA2D_PollForTransfer+0x182>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10f      	bne.n	8004be2 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc6:	f043 0220 	orr.w	r2, r3, #32
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2203      	movs	r2, #3
 8004bd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e013      	b.n	8004c0a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f003 0310 	and.w	r3, r3, #16
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0a1      	beq.n	8004b34 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2212      	movs	r2, #18
 8004bf6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d026      	beq.n	8004c82 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d021      	beq.n	8004c82 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c4c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c52:	f043 0201 	orr.w	r2, r3, #1
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2204      	movs	r2, #4
 8004c66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f003 0320 	and.w	r3, r3, #32
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d026      	beq.n	8004cda <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d021      	beq.n	8004cda <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ca4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2220      	movs	r2, #32
 8004cac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb2:	f043 0202 	orr.w	r2, r3, #2
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2204      	movs	r2, #4
 8004cbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f003 0308 	and.w	r3, r3, #8
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d026      	beq.n	8004d32 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d021      	beq.n	8004d32 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cfc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2208      	movs	r2, #8
 8004d04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0a:	f043 0204 	orr.w	r2, r3, #4
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2204      	movs	r2, #4
 8004d16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d013      	beq.n	8004d64 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00e      	beq.n	8004d64 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d54:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2204      	movs	r2, #4
 8004d5c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f853 	bl	8004e0a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d024      	beq.n	8004db8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d01f      	beq.n	8004db8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d86:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f003 0310 	and.w	r3, r3, #16
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d01f      	beq.n	8004e02 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d01a      	beq.n	8004e02 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004dda:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2210      	movs	r2, #16
 8004de2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f80e 	bl	8004e1e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004e02:	bf00      	nop
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
	...

08004e34 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_DMA2D_ConfigLayer+0x20>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e079      	b.n	8004f48 <HAL_DMA2D_ConfigLayer+0x114>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	3318      	adds	r3, #24
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	041b      	lsls	r3, r3, #16
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004e7e:	4b35      	ldr	r3, [pc, #212]	; (8004f54 <HAL_DMA2D_ConfigLayer+0x120>)
 8004e80:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2b0a      	cmp	r3, #10
 8004e88:	d003      	beq.n	8004e92 <HAL_DMA2D_ConfigLayer+0x5e>
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b09      	cmp	r3, #9
 8004e90:	d107      	bne.n	8004ea2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	e005      	b.n	8004eae <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	061b      	lsls	r3, r3, #24
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d120      	bne.n	8004ef6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	43db      	mvns	r3, r3
 8004ebe:	ea02 0103 	and.w	r1, r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	6812      	ldr	r2, [r2, #0]
 8004ed4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2b0a      	cmp	r3, #10
 8004edc:	d003      	beq.n	8004ee6 <HAL_DMA2D_ConfigLayer+0xb2>
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2b09      	cmp	r3, #9
 8004ee4:	d127      	bne.n	8004f36 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004ef2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ef4:	e01f      	b.n	8004f36 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69da      	ldr	r2, [r3, #28]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	43db      	mvns	r3, r3
 8004f00:	ea02 0103 	and.w	r1, r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	6812      	ldr	r2, [r2, #0]
 8004f16:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	2b0a      	cmp	r3, #10
 8004f1e:	d003      	beq.n	8004f28 <HAL_DMA2D_ConfigLayer+0xf4>
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2b09      	cmp	r3, #9
 8004f26:	d106      	bne.n	8004f36 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	68da      	ldr	r2, [r3, #12]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004f34:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	371c      	adds	r7, #28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	ff03000f 	.word	0xff03000f

08004f58 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b08b      	sub	sp, #44	; 0x2c
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
 8004f64:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	041a      	lsls	r2, r3, #16
 8004f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f76:	431a      	orrs	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f90:	d174      	bne.n	800507c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004f98:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004fa0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004fa8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d108      	bne.n	8004fca <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc8:	e053      	b.n	8005072 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d106      	bne.n	8004fe0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8004fde:	e048      	b.n	8005072 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d111      	bne.n	800500c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	0cdb      	lsrs	r3, r3, #19
 8004fec:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	0a9b      	lsrs	r3, r3, #10
 8004ff2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	08db      	lsrs	r3, r3, #3
 8004ff8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	02db      	lsls	r3, r3, #11
 8005002:	4313      	orrs	r3, r2
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	4313      	orrs	r3, r2
 8005008:	627b      	str	r3, [r7, #36]	; 0x24
 800500a:	e032      	b.n	8005072 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	2b03      	cmp	r3, #3
 8005012:	d117      	bne.n	8005044 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	0fdb      	lsrs	r3, r3, #31
 8005018:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	0cdb      	lsrs	r3, r3, #19
 800501e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	0adb      	lsrs	r3, r3, #11
 8005024:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	08db      	lsrs	r3, r3, #3
 800502a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	029b      	lsls	r3, r3, #10
 8005034:	431a      	orrs	r2, r3
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	03db      	lsls	r3, r3, #15
 800503a:	4313      	orrs	r3, r2
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	4313      	orrs	r3, r2
 8005040:	627b      	str	r3, [r7, #36]	; 0x24
 8005042:	e016      	b.n	8005072 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	0f1b      	lsrs	r3, r3, #28
 8005048:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	0d1b      	lsrs	r3, r3, #20
 800504e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	0b1b      	lsrs	r3, r3, #12
 8005054:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	091b      	lsrs	r3, r3, #4
 800505a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	011a      	lsls	r2, r3, #4
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	021b      	lsls	r3, r3, #8
 8005064:	431a      	orrs	r2, r3
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	031b      	lsls	r3, r3, #12
 800506a:	4313      	orrs	r3, r2
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	4313      	orrs	r3, r2
 8005070:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005078:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800507a:	e003      	b.n	8005084 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	60da      	str	r2, [r3, #12]
}
 8005084:	bf00      	nop
 8005086:	372c      	adds	r7, #44	; 0x2c
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005090:	b480      	push	{r7}
 8005092:	b089      	sub	sp, #36	; 0x24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800509a:	2300      	movs	r3, #0
 800509c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800509e:	2300      	movs	r3, #0
 80050a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050a6:	2300      	movs	r3, #0
 80050a8:	61fb      	str	r3, [r7, #28]
 80050aa:	e177      	b.n	800539c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050ac:	2201      	movs	r2, #1
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	fa02 f303 	lsl.w	r3, r2, r3
 80050b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	4013      	ands	r3, r2
 80050be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	f040 8166 	bne.w	8005396 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d005      	beq.n	80050e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d130      	bne.n	8005144 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	2203      	movs	r2, #3
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	43db      	mvns	r3, r3
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	4013      	ands	r3, r2
 80050f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	fa02 f303 	lsl.w	r3, r2, r3
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	4313      	orrs	r3, r2
 800510a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005118:	2201      	movs	r2, #1
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	fa02 f303 	lsl.w	r3, r2, r3
 8005120:	43db      	mvns	r3, r3
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	4013      	ands	r3, r2
 8005126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	091b      	lsrs	r3, r3, #4
 800512e:	f003 0201 	and.w	r2, r3, #1
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	4313      	orrs	r3, r2
 800513c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f003 0303 	and.w	r3, r3, #3
 800514c:	2b03      	cmp	r3, #3
 800514e:	d017      	beq.n	8005180 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	2203      	movs	r2, #3
 800515c:	fa02 f303 	lsl.w	r3, r2, r3
 8005160:	43db      	mvns	r3, r3
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	4013      	ands	r3, r2
 8005166:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	4313      	orrs	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f003 0303 	and.w	r3, r3, #3
 8005188:	2b02      	cmp	r3, #2
 800518a:	d123      	bne.n	80051d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	08da      	lsrs	r2, r3, #3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3208      	adds	r2, #8
 8005194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005198:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	220f      	movs	r2, #15
 80051a4:	fa02 f303 	lsl.w	r3, r2, r3
 80051a8:	43db      	mvns	r3, r3
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	4013      	ands	r3, r2
 80051ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	691a      	ldr	r2, [r3, #16]
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	08da      	lsrs	r2, r3, #3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3208      	adds	r2, #8
 80051ce:	69b9      	ldr	r1, [r7, #24]
 80051d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	2203      	movs	r2, #3
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	43db      	mvns	r3, r3
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	4013      	ands	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f003 0203 	and.w	r2, r3, #3
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	fa02 f303 	lsl.w	r3, r2, r3
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	4313      	orrs	r3, r2
 8005200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 80c0 	beq.w	8005396 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005216:	2300      	movs	r3, #0
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	4b66      	ldr	r3, [pc, #408]	; (80053b4 <HAL_GPIO_Init+0x324>)
 800521c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521e:	4a65      	ldr	r2, [pc, #404]	; (80053b4 <HAL_GPIO_Init+0x324>)
 8005220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005224:	6453      	str	r3, [r2, #68]	; 0x44
 8005226:	4b63      	ldr	r3, [pc, #396]	; (80053b4 <HAL_GPIO_Init+0x324>)
 8005228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005232:	4a61      	ldr	r2, [pc, #388]	; (80053b8 <HAL_GPIO_Init+0x328>)
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	089b      	lsrs	r3, r3, #2
 8005238:	3302      	adds	r3, #2
 800523a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800523e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	220f      	movs	r2, #15
 800524a:	fa02 f303 	lsl.w	r3, r2, r3
 800524e:	43db      	mvns	r3, r3
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	4013      	ands	r3, r2
 8005254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a58      	ldr	r2, [pc, #352]	; (80053bc <HAL_GPIO_Init+0x32c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d037      	beq.n	80052ce <HAL_GPIO_Init+0x23e>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a57      	ldr	r2, [pc, #348]	; (80053c0 <HAL_GPIO_Init+0x330>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d031      	beq.n	80052ca <HAL_GPIO_Init+0x23a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a56      	ldr	r2, [pc, #344]	; (80053c4 <HAL_GPIO_Init+0x334>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d02b      	beq.n	80052c6 <HAL_GPIO_Init+0x236>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a55      	ldr	r2, [pc, #340]	; (80053c8 <HAL_GPIO_Init+0x338>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d025      	beq.n	80052c2 <HAL_GPIO_Init+0x232>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a54      	ldr	r2, [pc, #336]	; (80053cc <HAL_GPIO_Init+0x33c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d01f      	beq.n	80052be <HAL_GPIO_Init+0x22e>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a53      	ldr	r2, [pc, #332]	; (80053d0 <HAL_GPIO_Init+0x340>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d019      	beq.n	80052ba <HAL_GPIO_Init+0x22a>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a52      	ldr	r2, [pc, #328]	; (80053d4 <HAL_GPIO_Init+0x344>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d013      	beq.n	80052b6 <HAL_GPIO_Init+0x226>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a51      	ldr	r2, [pc, #324]	; (80053d8 <HAL_GPIO_Init+0x348>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00d      	beq.n	80052b2 <HAL_GPIO_Init+0x222>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a50      	ldr	r2, [pc, #320]	; (80053dc <HAL_GPIO_Init+0x34c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d007      	beq.n	80052ae <HAL_GPIO_Init+0x21e>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a4f      	ldr	r2, [pc, #316]	; (80053e0 <HAL_GPIO_Init+0x350>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d101      	bne.n	80052aa <HAL_GPIO_Init+0x21a>
 80052a6:	2309      	movs	r3, #9
 80052a8:	e012      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052aa:	230a      	movs	r3, #10
 80052ac:	e010      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052ae:	2308      	movs	r3, #8
 80052b0:	e00e      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052b2:	2307      	movs	r3, #7
 80052b4:	e00c      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052b6:	2306      	movs	r3, #6
 80052b8:	e00a      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052ba:	2305      	movs	r3, #5
 80052bc:	e008      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052be:	2304      	movs	r3, #4
 80052c0:	e006      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052c2:	2303      	movs	r3, #3
 80052c4:	e004      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e002      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052ca:	2301      	movs	r3, #1
 80052cc:	e000      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052ce:	2300      	movs	r3, #0
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	f002 0203 	and.w	r2, r2, #3
 80052d6:	0092      	lsls	r2, r2, #2
 80052d8:	4093      	lsls	r3, r2
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	4313      	orrs	r3, r2
 80052de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052e0:	4935      	ldr	r1, [pc, #212]	; (80053b8 <HAL_GPIO_Init+0x328>)
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	089b      	lsrs	r3, r3, #2
 80052e6:	3302      	adds	r3, #2
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052ee:	4b3d      	ldr	r3, [pc, #244]	; (80053e4 <HAL_GPIO_Init+0x354>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	43db      	mvns	r3, r3
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	4013      	ands	r3, r2
 80052fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	4313      	orrs	r3, r2
 8005310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005312:	4a34      	ldr	r2, [pc, #208]	; (80053e4 <HAL_GPIO_Init+0x354>)
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005318:	4b32      	ldr	r3, [pc, #200]	; (80053e4 <HAL_GPIO_Init+0x354>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	43db      	mvns	r3, r3
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	4013      	ands	r3, r2
 8005326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d003      	beq.n	800533c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	4313      	orrs	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800533c:	4a29      	ldr	r2, [pc, #164]	; (80053e4 <HAL_GPIO_Init+0x354>)
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005342:	4b28      	ldr	r3, [pc, #160]	; (80053e4 <HAL_GPIO_Init+0x354>)
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	43db      	mvns	r3, r3
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	4013      	ands	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	4313      	orrs	r3, r2
 8005364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005366:	4a1f      	ldr	r2, [pc, #124]	; (80053e4 <HAL_GPIO_Init+0x354>)
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800536c:	4b1d      	ldr	r3, [pc, #116]	; (80053e4 <HAL_GPIO_Init+0x354>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	43db      	mvns	r3, r3
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	4013      	ands	r3, r2
 800537a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	4313      	orrs	r3, r2
 800538e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005390:	4a14      	ldr	r2, [pc, #80]	; (80053e4 <HAL_GPIO_Init+0x354>)
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	3301      	adds	r3, #1
 800539a:	61fb      	str	r3, [r7, #28]
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	2b0f      	cmp	r3, #15
 80053a0:	f67f ae84 	bls.w	80050ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053a4:	bf00      	nop
 80053a6:	bf00      	nop
 80053a8:	3724      	adds	r7, #36	; 0x24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	40023800 	.word	0x40023800
 80053b8:	40013800 	.word	0x40013800
 80053bc:	40020000 	.word	0x40020000
 80053c0:	40020400 	.word	0x40020400
 80053c4:	40020800 	.word	0x40020800
 80053c8:	40020c00 	.word	0x40020c00
 80053cc:	40021000 	.word	0x40021000
 80053d0:	40021400 	.word	0x40021400
 80053d4:	40021800 	.word	0x40021800
 80053d8:	40021c00 	.word	0x40021c00
 80053dc:	40022000 	.word	0x40022000
 80053e0:	40022400 	.word	0x40022400
 80053e4:	40013c00 	.word	0x40013c00

080053e8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053fe:	2300      	movs	r3, #0
 8005400:	617b      	str	r3, [r7, #20]
 8005402:	e0d9      	b.n	80055b8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005404:	2201      	movs	r2, #1
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	fa02 f303 	lsl.w	r3, r2, r3
 800540c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	4013      	ands	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	429a      	cmp	r2, r3
 800541c:	f040 80c9 	bne.w	80055b2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005420:	4a6b      	ldr	r2, [pc, #428]	; (80055d0 <HAL_GPIO_DeInit+0x1e8>)
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	089b      	lsrs	r3, r3, #2
 8005426:	3302      	adds	r3, #2
 8005428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800542c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f003 0303 	and.w	r3, r3, #3
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	220f      	movs	r2, #15
 8005438:	fa02 f303 	lsl.w	r3, r2, r3
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	4013      	ands	r3, r2
 8005440:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a63      	ldr	r2, [pc, #396]	; (80055d4 <HAL_GPIO_DeInit+0x1ec>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d037      	beq.n	80054ba <HAL_GPIO_DeInit+0xd2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a62      	ldr	r2, [pc, #392]	; (80055d8 <HAL_GPIO_DeInit+0x1f0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d031      	beq.n	80054b6 <HAL_GPIO_DeInit+0xce>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a61      	ldr	r2, [pc, #388]	; (80055dc <HAL_GPIO_DeInit+0x1f4>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d02b      	beq.n	80054b2 <HAL_GPIO_DeInit+0xca>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a60      	ldr	r2, [pc, #384]	; (80055e0 <HAL_GPIO_DeInit+0x1f8>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d025      	beq.n	80054ae <HAL_GPIO_DeInit+0xc6>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a5f      	ldr	r2, [pc, #380]	; (80055e4 <HAL_GPIO_DeInit+0x1fc>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d01f      	beq.n	80054aa <HAL_GPIO_DeInit+0xc2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a5e      	ldr	r2, [pc, #376]	; (80055e8 <HAL_GPIO_DeInit+0x200>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d019      	beq.n	80054a6 <HAL_GPIO_DeInit+0xbe>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a5d      	ldr	r2, [pc, #372]	; (80055ec <HAL_GPIO_DeInit+0x204>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d013      	beq.n	80054a2 <HAL_GPIO_DeInit+0xba>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a5c      	ldr	r2, [pc, #368]	; (80055f0 <HAL_GPIO_DeInit+0x208>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d00d      	beq.n	800549e <HAL_GPIO_DeInit+0xb6>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a5b      	ldr	r2, [pc, #364]	; (80055f4 <HAL_GPIO_DeInit+0x20c>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d007      	beq.n	800549a <HAL_GPIO_DeInit+0xb2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a5a      	ldr	r2, [pc, #360]	; (80055f8 <HAL_GPIO_DeInit+0x210>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d101      	bne.n	8005496 <HAL_GPIO_DeInit+0xae>
 8005492:	2309      	movs	r3, #9
 8005494:	e012      	b.n	80054bc <HAL_GPIO_DeInit+0xd4>
 8005496:	230a      	movs	r3, #10
 8005498:	e010      	b.n	80054bc <HAL_GPIO_DeInit+0xd4>
 800549a:	2308      	movs	r3, #8
 800549c:	e00e      	b.n	80054bc <HAL_GPIO_DeInit+0xd4>
 800549e:	2307      	movs	r3, #7
 80054a0:	e00c      	b.n	80054bc <HAL_GPIO_DeInit+0xd4>
 80054a2:	2306      	movs	r3, #6
 80054a4:	e00a      	b.n	80054bc <HAL_GPIO_DeInit+0xd4>
 80054a6:	2305      	movs	r3, #5
 80054a8:	e008      	b.n	80054bc <HAL_GPIO_DeInit+0xd4>
 80054aa:	2304      	movs	r3, #4
 80054ac:	e006      	b.n	80054bc <HAL_GPIO_DeInit+0xd4>
 80054ae:	2303      	movs	r3, #3
 80054b0:	e004      	b.n	80054bc <HAL_GPIO_DeInit+0xd4>
 80054b2:	2302      	movs	r3, #2
 80054b4:	e002      	b.n	80054bc <HAL_GPIO_DeInit+0xd4>
 80054b6:	2301      	movs	r3, #1
 80054b8:	e000      	b.n	80054bc <HAL_GPIO_DeInit+0xd4>
 80054ba:	2300      	movs	r3, #0
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	f002 0203 	and.w	r2, r2, #3
 80054c2:	0092      	lsls	r2, r2, #2
 80054c4:	4093      	lsls	r3, r2
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d132      	bne.n	8005532 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80054cc:	4b4b      	ldr	r3, [pc, #300]	; (80055fc <HAL_GPIO_DeInit+0x214>)
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	43db      	mvns	r3, r3
 80054d4:	4949      	ldr	r1, [pc, #292]	; (80055fc <HAL_GPIO_DeInit+0x214>)
 80054d6:	4013      	ands	r3, r2
 80054d8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80054da:	4b48      	ldr	r3, [pc, #288]	; (80055fc <HAL_GPIO_DeInit+0x214>)
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	43db      	mvns	r3, r3
 80054e2:	4946      	ldr	r1, [pc, #280]	; (80055fc <HAL_GPIO_DeInit+0x214>)
 80054e4:	4013      	ands	r3, r2
 80054e6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80054e8:	4b44      	ldr	r3, [pc, #272]	; (80055fc <HAL_GPIO_DeInit+0x214>)
 80054ea:	68da      	ldr	r2, [r3, #12]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	43db      	mvns	r3, r3
 80054f0:	4942      	ldr	r1, [pc, #264]	; (80055fc <HAL_GPIO_DeInit+0x214>)
 80054f2:	4013      	ands	r3, r2
 80054f4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80054f6:	4b41      	ldr	r3, [pc, #260]	; (80055fc <HAL_GPIO_DeInit+0x214>)
 80054f8:	689a      	ldr	r2, [r3, #8]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	43db      	mvns	r3, r3
 80054fe:	493f      	ldr	r1, [pc, #252]	; (80055fc <HAL_GPIO_DeInit+0x214>)
 8005500:	4013      	ands	r3, r2
 8005502:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f003 0303 	and.w	r3, r3, #3
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	220f      	movs	r2, #15
 800550e:	fa02 f303 	lsl.w	r3, r2, r3
 8005512:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005514:	4a2e      	ldr	r2, [pc, #184]	; (80055d0 <HAL_GPIO_DeInit+0x1e8>)
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	089b      	lsrs	r3, r3, #2
 800551a:	3302      	adds	r3, #2
 800551c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	43da      	mvns	r2, r3
 8005524:	482a      	ldr	r0, [pc, #168]	; (80055d0 <HAL_GPIO_DeInit+0x1e8>)
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	089b      	lsrs	r3, r3, #2
 800552a:	400a      	ands	r2, r1
 800552c:	3302      	adds	r3, #2
 800552e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	2103      	movs	r1, #3
 800553c:	fa01 f303 	lsl.w	r3, r1, r3
 8005540:	43db      	mvns	r3, r3
 8005542:	401a      	ands	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	08da      	lsrs	r2, r3, #3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3208      	adds	r2, #8
 8005550:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	220f      	movs	r2, #15
 800555e:	fa02 f303 	lsl.w	r3, r2, r3
 8005562:	43db      	mvns	r3, r3
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	08d2      	lsrs	r2, r2, #3
 8005568:	4019      	ands	r1, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	3208      	adds	r2, #8
 800556e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	2103      	movs	r1, #3
 800557c:	fa01 f303 	lsl.w	r3, r1, r3
 8005580:	43db      	mvns	r3, r3
 8005582:	401a      	ands	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	2101      	movs	r1, #1
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	fa01 f303 	lsl.w	r3, r1, r3
 8005594:	43db      	mvns	r3, r3
 8005596:	401a      	ands	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	2103      	movs	r1, #3
 80055a6:	fa01 f303 	lsl.w	r3, r1, r3
 80055aa:	43db      	mvns	r3, r3
 80055ac:	401a      	ands	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	3301      	adds	r3, #1
 80055b6:	617b      	str	r3, [r7, #20]
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	2b0f      	cmp	r3, #15
 80055bc:	f67f af22 	bls.w	8005404 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80055c0:	bf00      	nop
 80055c2:	bf00      	nop
 80055c4:	371c      	adds	r7, #28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	40013800 	.word	0x40013800
 80055d4:	40020000 	.word	0x40020000
 80055d8:	40020400 	.word	0x40020400
 80055dc:	40020800 	.word	0x40020800
 80055e0:	40020c00 	.word	0x40020c00
 80055e4:	40021000 	.word	0x40021000
 80055e8:	40021400 	.word	0x40021400
 80055ec:	40021800 	.word	0x40021800
 80055f0:	40021c00 	.word	0x40021c00
 80055f4:	40022000 	.word	0x40022000
 80055f8:	40022400 	.word	0x40022400
 80055fc:	40013c00 	.word	0x40013c00

08005600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	460b      	mov	r3, r1
 800560a:	807b      	strh	r3, [r7, #2]
 800560c:	4613      	mov	r3, r2
 800560e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005610:	787b      	ldrb	r3, [r7, #1]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005616:	887a      	ldrh	r2, [r7, #2]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800561c:	e003      	b.n	8005626 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800561e:	887b      	ldrh	r3, [r7, #2]
 8005620:	041a      	lsls	r2, r3, #16
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	619a      	str	r2, [r3, #24]
}
 8005626:	bf00      	nop
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
	...

08005634 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e12b      	b.n	800589e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d106      	bne.n	8005660 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7fc fc0e 	bl	8001e7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2224      	movs	r2, #36	; 0x24
 8005664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f022 0201 	bic.w	r2, r2, #1
 8005676:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005686:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005696:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005698:	f001 f9d4 	bl	8006a44 <HAL_RCC_GetPCLK1Freq>
 800569c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	4a81      	ldr	r2, [pc, #516]	; (80058a8 <HAL_I2C_Init+0x274>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d807      	bhi.n	80056b8 <HAL_I2C_Init+0x84>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4a80      	ldr	r2, [pc, #512]	; (80058ac <HAL_I2C_Init+0x278>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	bf94      	ite	ls
 80056b0:	2301      	movls	r3, #1
 80056b2:	2300      	movhi	r3, #0
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	e006      	b.n	80056c6 <HAL_I2C_Init+0x92>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	4a7d      	ldr	r2, [pc, #500]	; (80058b0 <HAL_I2C_Init+0x27c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	bf94      	ite	ls
 80056c0:	2301      	movls	r3, #1
 80056c2:	2300      	movhi	r3, #0
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e0e7      	b.n	800589e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	4a78      	ldr	r2, [pc, #480]	; (80058b4 <HAL_I2C_Init+0x280>)
 80056d2:	fba2 2303 	umull	r2, r3, r2, r3
 80056d6:	0c9b      	lsrs	r3, r3, #18
 80056d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	4a6a      	ldr	r2, [pc, #424]	; (80058a8 <HAL_I2C_Init+0x274>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d802      	bhi.n	8005708 <HAL_I2C_Init+0xd4>
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	3301      	adds	r3, #1
 8005706:	e009      	b.n	800571c <HAL_I2C_Init+0xe8>
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800570e:	fb02 f303 	mul.w	r3, r2, r3
 8005712:	4a69      	ldr	r2, [pc, #420]	; (80058b8 <HAL_I2C_Init+0x284>)
 8005714:	fba2 2303 	umull	r2, r3, r2, r3
 8005718:	099b      	lsrs	r3, r3, #6
 800571a:	3301      	adds	r3, #1
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	6812      	ldr	r2, [r2, #0]
 8005720:	430b      	orrs	r3, r1
 8005722:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800572e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	495c      	ldr	r1, [pc, #368]	; (80058a8 <HAL_I2C_Init+0x274>)
 8005738:	428b      	cmp	r3, r1
 800573a:	d819      	bhi.n	8005770 <HAL_I2C_Init+0x13c>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	1e59      	subs	r1, r3, #1
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	005b      	lsls	r3, r3, #1
 8005746:	fbb1 f3f3 	udiv	r3, r1, r3
 800574a:	1c59      	adds	r1, r3, #1
 800574c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005750:	400b      	ands	r3, r1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00a      	beq.n	800576c <HAL_I2C_Init+0x138>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	1e59      	subs	r1, r3, #1
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	fbb1 f3f3 	udiv	r3, r1, r3
 8005764:	3301      	adds	r3, #1
 8005766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800576a:	e051      	b.n	8005810 <HAL_I2C_Init+0x1dc>
 800576c:	2304      	movs	r3, #4
 800576e:	e04f      	b.n	8005810 <HAL_I2C_Init+0x1dc>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d111      	bne.n	800579c <HAL_I2C_Init+0x168>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	1e58      	subs	r0, r3, #1
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6859      	ldr	r1, [r3, #4]
 8005780:	460b      	mov	r3, r1
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	440b      	add	r3, r1
 8005786:	fbb0 f3f3 	udiv	r3, r0, r3
 800578a:	3301      	adds	r3, #1
 800578c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005790:	2b00      	cmp	r3, #0
 8005792:	bf0c      	ite	eq
 8005794:	2301      	moveq	r3, #1
 8005796:	2300      	movne	r3, #0
 8005798:	b2db      	uxtb	r3, r3
 800579a:	e012      	b.n	80057c2 <HAL_I2C_Init+0x18e>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	1e58      	subs	r0, r3, #1
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6859      	ldr	r1, [r3, #4]
 80057a4:	460b      	mov	r3, r1
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	440b      	add	r3, r1
 80057aa:	0099      	lsls	r1, r3, #2
 80057ac:	440b      	add	r3, r1
 80057ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80057b2:	3301      	adds	r3, #1
 80057b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	bf0c      	ite	eq
 80057bc:	2301      	moveq	r3, #1
 80057be:	2300      	movne	r3, #0
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <HAL_I2C_Init+0x196>
 80057c6:	2301      	movs	r3, #1
 80057c8:	e022      	b.n	8005810 <HAL_I2C_Init+0x1dc>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10e      	bne.n	80057f0 <HAL_I2C_Init+0x1bc>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	1e58      	subs	r0, r3, #1
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6859      	ldr	r1, [r3, #4]
 80057da:	460b      	mov	r3, r1
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	440b      	add	r3, r1
 80057e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80057e4:	3301      	adds	r3, #1
 80057e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ee:	e00f      	b.n	8005810 <HAL_I2C_Init+0x1dc>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	1e58      	subs	r0, r3, #1
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6859      	ldr	r1, [r3, #4]
 80057f8:	460b      	mov	r3, r1
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	440b      	add	r3, r1
 80057fe:	0099      	lsls	r1, r3, #2
 8005800:	440b      	add	r3, r1
 8005802:	fbb0 f3f3 	udiv	r3, r0, r3
 8005806:	3301      	adds	r3, #1
 8005808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800580c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005810:	6879      	ldr	r1, [r7, #4]
 8005812:	6809      	ldr	r1, [r1, #0]
 8005814:	4313      	orrs	r3, r2
 8005816:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	69da      	ldr	r2, [r3, #28]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	431a      	orrs	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800583e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6911      	ldr	r1, [r2, #16]
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	68d2      	ldr	r2, [r2, #12]
 800584a:	4311      	orrs	r1, r2
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	6812      	ldr	r2, [r2, #0]
 8005850:	430b      	orrs	r3, r1
 8005852:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	695a      	ldr	r2, [r3, #20]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	431a      	orrs	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0201 	orr.w	r2, r2, #1
 800587e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2220      	movs	r2, #32
 800588a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	000186a0 	.word	0x000186a0
 80058ac:	001e847f 	.word	0x001e847f
 80058b0:	003d08ff 	.word	0x003d08ff
 80058b4:	431bde83 	.word	0x431bde83
 80058b8:	10624dd3 	.word	0x10624dd3

080058bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b20      	cmp	r3, #32
 80058d0:	d129      	bne.n	8005926 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2224      	movs	r2, #36	; 0x24
 80058d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0201 	bic.w	r2, r2, #1
 80058e8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 0210 	bic.w	r2, r2, #16
 80058f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f042 0201 	orr.w	r2, r2, #1
 8005918:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2220      	movs	r2, #32
 800591e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005922:	2300      	movs	r3, #0
 8005924:	e000      	b.n	8005928 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005926:	2302      	movs	r3, #2
  }
}
 8005928:	4618      	mov	r0, r3
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800593e:	2300      	movs	r3, #0
 8005940:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b20      	cmp	r3, #32
 800594c:	d12a      	bne.n	80059a4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2224      	movs	r2, #36	; 0x24
 8005952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 0201 	bic.w	r2, r2, #1
 8005964:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800596e:	89fb      	ldrh	r3, [r7, #14]
 8005970:	f023 030f 	bic.w	r3, r3, #15
 8005974:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	b29a      	uxth	r2, r3
 800597a:	89fb      	ldrh	r3, [r7, #14]
 800597c:	4313      	orrs	r3, r2
 800597e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	89fa      	ldrh	r2, [r7, #14]
 8005986:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f042 0201 	orr.w	r2, r2, #1
 8005996:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2220      	movs	r2, #32
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80059a0:	2300      	movs	r3, #0
 80059a2:	e000      	b.n	80059a6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80059a4:	2302      	movs	r3, #2
  }
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
	...

080059b4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e0bf      	b.n	8005b46 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d106      	bne.n	80059e0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7fc fab8 	bl	8001f50 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699a      	ldr	r2, [r3, #24]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80059f6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6999      	ldr	r1, [r3, #24]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a0c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6899      	ldr	r1, [r3, #8]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	4b4a      	ldr	r3, [pc, #296]	; (8005b50 <HAL_LTDC_Init+0x19c>)
 8005a28:	400b      	ands	r3, r1
 8005a2a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	041b      	lsls	r3, r3, #16
 8005a32:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6899      	ldr	r1, [r3, #8]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	699a      	ldr	r2, [r3, #24]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	431a      	orrs	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68d9      	ldr	r1, [r3, #12]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	4b3e      	ldr	r3, [pc, #248]	; (8005b50 <HAL_LTDC_Init+0x19c>)
 8005a56:	400b      	ands	r3, r1
 8005a58:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	041b      	lsls	r3, r3, #16
 8005a60:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68d9      	ldr	r1, [r3, #12]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a1a      	ldr	r2, [r3, #32]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	431a      	orrs	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	430a      	orrs	r2, r1
 8005a76:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6919      	ldr	r1, [r3, #16]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	4b33      	ldr	r3, [pc, #204]	; (8005b50 <HAL_LTDC_Init+0x19c>)
 8005a84:	400b      	ands	r3, r1
 8005a86:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	041b      	lsls	r3, r3, #16
 8005a8e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6919      	ldr	r1, [r3, #16]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6959      	ldr	r1, [r3, #20]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	4b27      	ldr	r3, [pc, #156]	; (8005b50 <HAL_LTDC_Init+0x19c>)
 8005ab2:	400b      	ands	r3, r1
 8005ab4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aba:	041b      	lsls	r3, r3, #16
 8005abc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6959      	ldr	r1, [r3, #20]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	431a      	orrs	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ada:	021b      	lsls	r3, r3, #8
 8005adc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005ae4:	041b      	lsls	r3, r3, #16
 8005ae6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005af6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	430a      	orrs	r2, r1
 8005b12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 0206 	orr.w	r2, r2, #6
 8005b22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	699a      	ldr	r2, [r3, #24]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f042 0201 	orr.w	r2, r2, #1
 8005b32:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	f000f800 	.word	0xf000f800

08005b54 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b62:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f003 0304 	and.w	r3, r3, #4
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d023      	beq.n	8005bbe <HAL_LTDC_IRQHandler+0x6a>
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d01e      	beq.n	8005bbe <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0204 	bic.w	r2, r2, #4
 8005b8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2204      	movs	r2, #4
 8005b96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b9e:	f043 0201 	orr.w	r2, r3, #1
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2204      	movs	r2, #4
 8005bac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f86f 	bl	8005c9c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d023      	beq.n	8005c10 <HAL_LTDC_IRQHandler+0xbc>
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d01e      	beq.n	8005c10 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 0202 	bic.w	r2, r2, #2
 8005be0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2202      	movs	r2, #2
 8005be8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005bf0:	f043 0202 	orr.w	r2, r3, #2
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2204      	movs	r2, #4
 8005bfe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f846 	bl	8005c9c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d01b      	beq.n	8005c52 <HAL_LTDC_IRQHandler+0xfe>
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d016      	beq.n	8005c52 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 0201 	bic.w	r2, r2, #1
 8005c32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 f82f 	bl	8005cb0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f003 0308 	and.w	r3, r3, #8
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d01b      	beq.n	8005c94 <HAL_LTDC_IRQHandler+0x140>
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f003 0308 	and.w	r3, r3, #8
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d016      	beq.n	8005c94 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0208 	bic.w	r2, r2, #8
 8005c74:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2208      	movs	r2, #8
 8005c7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7fb fe14 	bl	80018bc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005c94:	bf00      	nop
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005cc4:	b5b0      	push	{r4, r5, r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d101      	bne.n	8005cde <HAL_LTDC_ConfigLayer+0x1a>
 8005cda:	2302      	movs	r3, #2
 8005cdc:	e02c      	b.n	8005d38 <HAL_LTDC_ConfigLayer+0x74>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2202      	movs	r2, #2
 8005cea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2134      	movs	r1, #52	; 0x34
 8005cf4:	fb01 f303 	mul.w	r3, r1, r3
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	4614      	mov	r4, r2
 8005d02:	461d      	mov	r5, r3
 8005d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d10:	682b      	ldr	r3, [r5, #0]
 8005d12:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	68b9      	ldr	r1, [r7, #8]
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 f83b 	bl	8005d94 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2201      	movs	r2, #1
 8005d24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bdb0      	pop	{r4, r5, r7, pc}

08005d40 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d101      	bne.n	8005d56 <HAL_LTDC_EnableDither+0x16>
 8005d52:	2302      	movs	r3, #2
 8005d54:	e016      	b.n	8005d84 <HAL_LTDC_EnableDither+0x44>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2202      	movs	r2, #2
 8005d62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8005d66:	4b0a      	ldr	r3, [pc, #40]	; (8005d90 <HAL_LTDC_EnableDither+0x50>)
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	4a09      	ldr	r2, [pc, #36]	; (8005d90 <HAL_LTDC_EnableDither+0x50>)
 8005d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d70:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	40016800 	.word	0x40016800

08005d94 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b089      	sub	sp, #36	; 0x24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	0c1b      	lsrs	r3, r3, #16
 8005dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005db0:	4413      	add	r3, r2
 8005db2:	041b      	lsls	r3, r3, #16
 8005db4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	01db      	lsls	r3, r3, #7
 8005dc0:	4413      	add	r3, r2
 8005dc2:	3384      	adds	r3, #132	; 0x84
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	6812      	ldr	r2, [r2, #0]
 8005dca:	4611      	mov	r1, r2
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	01d2      	lsls	r2, r2, #7
 8005dd0:	440a      	add	r2, r1
 8005dd2:	3284      	adds	r2, #132	; 0x84
 8005dd4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005dd8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	0c1b      	lsrs	r3, r3, #16
 8005de6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005dea:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005dec:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4619      	mov	r1, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	01db      	lsls	r3, r3, #7
 8005df8:	440b      	add	r3, r1
 8005dfa:	3384      	adds	r3, #132	; 0x84
 8005dfc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005e02:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	68da      	ldr	r2, [r3, #12]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e12:	4413      	add	r3, r2
 8005e14:	041b      	lsls	r3, r3, #16
 8005e16:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	01db      	lsls	r3, r3, #7
 8005e22:	4413      	add	r3, r2
 8005e24:	3384      	adds	r3, #132	; 0x84
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	6812      	ldr	r2, [r2, #0]
 8005e2c:	4611      	mov	r1, r2
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	01d2      	lsls	r2, r2, #7
 8005e32:	440a      	add	r2, r1
 8005e34:	3284      	adds	r2, #132	; 0x84
 8005e36:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005e3a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e4a:	4413      	add	r3, r2
 8005e4c:	1c5a      	adds	r2, r3, #1
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4619      	mov	r1, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	01db      	lsls	r3, r3, #7
 8005e58:	440b      	add	r3, r1
 8005e5a:	3384      	adds	r3, #132	; 0x84
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	01db      	lsls	r3, r3, #7
 8005e6e:	4413      	add	r3, r2
 8005e70:	3384      	adds	r3, #132	; 0x84
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	6812      	ldr	r2, [r2, #0]
 8005e78:	4611      	mov	r1, r2
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	01d2      	lsls	r2, r2, #7
 8005e7e:	440a      	add	r2, r1
 8005e80:	3284      	adds	r2, #132	; 0x84
 8005e82:	f023 0307 	bic.w	r3, r3, #7
 8005e86:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	01db      	lsls	r3, r3, #7
 8005e92:	4413      	add	r3, r2
 8005e94:	3384      	adds	r3, #132	; 0x84
 8005e96:	461a      	mov	r2, r3
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005ea4:	021b      	lsls	r3, r3, #8
 8005ea6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005eae:	041b      	lsls	r3, r3, #16
 8005eb0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	061b      	lsls	r3, r3, #24
 8005eb8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	01db      	lsls	r3, r3, #7
 8005ec4:	4413      	add	r3, r2
 8005ec6:	3384      	adds	r3, #132	; 0x84
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	01db      	lsls	r3, r3, #7
 8005ed4:	4413      	add	r3, r2
 8005ed6:	3384      	adds	r3, #132	; 0x84
 8005ed8:	461a      	mov	r2, r3
 8005eda:	2300      	movs	r3, #0
 8005edc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	431a      	orrs	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	01db      	lsls	r3, r3, #7
 8005ef8:	440b      	add	r3, r1
 8005efa:	3384      	adds	r3, #132	; 0x84
 8005efc:	4619      	mov	r1, r3
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	01db      	lsls	r3, r3, #7
 8005f0e:	4413      	add	r3, r2
 8005f10:	3384      	adds	r3, #132	; 0x84
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	6812      	ldr	r2, [r2, #0]
 8005f18:	4611      	mov	r1, r2
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	01d2      	lsls	r2, r2, #7
 8005f1e:	440a      	add	r2, r1
 8005f20:	3284      	adds	r2, #132	; 0x84
 8005f22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005f26:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	01db      	lsls	r3, r3, #7
 8005f32:	4413      	add	r3, r2
 8005f34:	3384      	adds	r3, #132	; 0x84
 8005f36:	461a      	mov	r2, r3
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	461a      	mov	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	01db      	lsls	r3, r3, #7
 8005f48:	4413      	add	r3, r2
 8005f4a:	3384      	adds	r3, #132	; 0x84
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	6812      	ldr	r2, [r2, #0]
 8005f52:	4611      	mov	r1, r2
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	01d2      	lsls	r2, r2, #7
 8005f58:	440a      	add	r2, r1
 8005f5a:	3284      	adds	r2, #132	; 0x84
 8005f5c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005f60:	f023 0307 	bic.w	r3, r3, #7
 8005f64:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	69da      	ldr	r2, [r3, #28]
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	68f9      	ldr	r1, [r7, #12]
 8005f70:	6809      	ldr	r1, [r1, #0]
 8005f72:	4608      	mov	r0, r1
 8005f74:	6879      	ldr	r1, [r7, #4]
 8005f76:	01c9      	lsls	r1, r1, #7
 8005f78:	4401      	add	r1, r0
 8005f7a:	3184      	adds	r1, #132	; 0x84
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	461a      	mov	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	01db      	lsls	r3, r3, #7
 8005f8a:	4413      	add	r3, r2
 8005f8c:	3384      	adds	r3, #132	; 0x84
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	461a      	mov	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	01db      	lsls	r3, r3, #7
 8005f9a:	4413      	add	r3, r2
 8005f9c:	3384      	adds	r3, #132	; 0x84
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	461a      	mov	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	01db      	lsls	r3, r3, #7
 8005fae:	4413      	add	r3, r2
 8005fb0:	3384      	adds	r3, #132	; 0x84
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d102      	bne.n	8005fc8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005fc2:	2304      	movs	r3, #4
 8005fc4:	61fb      	str	r3, [r7, #28]
 8005fc6:	e01b      	b.n	8006000 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d102      	bne.n	8005fd6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	61fb      	str	r3, [r7, #28]
 8005fd4:	e014      	b.n	8006000 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	2b04      	cmp	r3, #4
 8005fdc:	d00b      	beq.n	8005ff6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d007      	beq.n	8005ff6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	d003      	beq.n	8005ff6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005ff2:	2b07      	cmp	r3, #7
 8005ff4:	d102      	bne.n	8005ffc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	61fb      	str	r3, [r7, #28]
 8005ffa:	e001      	b.n	8006000 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	461a      	mov	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	01db      	lsls	r3, r3, #7
 800600a:	4413      	add	r3, r2
 800600c:	3384      	adds	r3, #132	; 0x84
 800600e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	6812      	ldr	r2, [r2, #0]
 8006014:	4611      	mov	r1, r2
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	01d2      	lsls	r2, r2, #7
 800601a:	440a      	add	r2, r1
 800601c:	3284      	adds	r2, #132	; 0x84
 800601e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006022:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006028:	69fa      	ldr	r2, [r7, #28]
 800602a:	fb02 f303 	mul.w	r3, r2, r3
 800602e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	6859      	ldr	r1, [r3, #4]
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	1acb      	subs	r3, r1, r3
 800603a:	69f9      	ldr	r1, [r7, #28]
 800603c:	fb01 f303 	mul.w	r3, r1, r3
 8006040:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006042:	68f9      	ldr	r1, [r7, #12]
 8006044:	6809      	ldr	r1, [r1, #0]
 8006046:	4608      	mov	r0, r1
 8006048:	6879      	ldr	r1, [r7, #4]
 800604a:	01c9      	lsls	r1, r1, #7
 800604c:	4401      	add	r1, r0
 800604e:	3184      	adds	r1, #132	; 0x84
 8006050:	4313      	orrs	r3, r2
 8006052:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	461a      	mov	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	01db      	lsls	r3, r3, #7
 800605e:	4413      	add	r3, r2
 8006060:	3384      	adds	r3, #132	; 0x84
 8006062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	6812      	ldr	r2, [r2, #0]
 8006068:	4611      	mov	r1, r2
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	01d2      	lsls	r2, r2, #7
 800606e:	440a      	add	r2, r1
 8006070:	3284      	adds	r2, #132	; 0x84
 8006072:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006076:	f023 0307 	bic.w	r3, r3, #7
 800607a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	461a      	mov	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	01db      	lsls	r3, r3, #7
 8006086:	4413      	add	r3, r2
 8006088:	3384      	adds	r3, #132	; 0x84
 800608a:	461a      	mov	r2, r3
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006090:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	01db      	lsls	r3, r3, #7
 800609c:	4413      	add	r3, r2
 800609e:	3384      	adds	r3, #132	; 0x84
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	6812      	ldr	r2, [r2, #0]
 80060a6:	4611      	mov	r1, r2
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	01d2      	lsls	r2, r2, #7
 80060ac:	440a      	add	r2, r1
 80060ae:	3284      	adds	r2, #132	; 0x84
 80060b0:	f043 0301 	orr.w	r3, r3, #1
 80060b4:	6013      	str	r3, [r2, #0]
}
 80060b6:	bf00      	nop
 80060b8:	3724      	adds	r7, #36	; 0x24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
	...

080060c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80060ca:	2300      	movs	r3, #0
 80060cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80060ce:	2300      	movs	r3, #0
 80060d0:	603b      	str	r3, [r7, #0]
 80060d2:	4b20      	ldr	r3, [pc, #128]	; (8006154 <HAL_PWREx_EnableOverDrive+0x90>)
 80060d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d6:	4a1f      	ldr	r2, [pc, #124]	; (8006154 <HAL_PWREx_EnableOverDrive+0x90>)
 80060d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060dc:	6413      	str	r3, [r2, #64]	; 0x40
 80060de:	4b1d      	ldr	r3, [pc, #116]	; (8006154 <HAL_PWREx_EnableOverDrive+0x90>)
 80060e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060e6:	603b      	str	r3, [r7, #0]
 80060e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80060ea:	4b1b      	ldr	r3, [pc, #108]	; (8006158 <HAL_PWREx_EnableOverDrive+0x94>)
 80060ec:	2201      	movs	r2, #1
 80060ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060f0:	f7fe f8b4 	bl	800425c <HAL_GetTick>
 80060f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80060f6:	e009      	b.n	800610c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80060f8:	f7fe f8b0 	bl	800425c <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006106:	d901      	bls.n	800610c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e01f      	b.n	800614c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800610c:	4b13      	ldr	r3, [pc, #76]	; (800615c <HAL_PWREx_EnableOverDrive+0x98>)
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006118:	d1ee      	bne.n	80060f8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800611a:	4b11      	ldr	r3, [pc, #68]	; (8006160 <HAL_PWREx_EnableOverDrive+0x9c>)
 800611c:	2201      	movs	r2, #1
 800611e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006120:	f7fe f89c 	bl	800425c <HAL_GetTick>
 8006124:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006126:	e009      	b.n	800613c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006128:	f7fe f898 	bl	800425c <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006136:	d901      	bls.n	800613c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e007      	b.n	800614c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800613c:	4b07      	ldr	r3, [pc, #28]	; (800615c <HAL_PWREx_EnableOverDrive+0x98>)
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006144:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006148:	d1ee      	bne.n	8006128 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	40023800 	.word	0x40023800
 8006158:	420e0040 	.word	0x420e0040
 800615c:	40007000 	.word	0x40007000
 8006160:	420e0044 	.word	0x420e0044

08006164 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e267      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d075      	beq.n	800626e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006182:	4b88      	ldr	r3, [pc, #544]	; (80063a4 <HAL_RCC_OscConfig+0x240>)
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f003 030c 	and.w	r3, r3, #12
 800618a:	2b04      	cmp	r3, #4
 800618c:	d00c      	beq.n	80061a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800618e:	4b85      	ldr	r3, [pc, #532]	; (80063a4 <HAL_RCC_OscConfig+0x240>)
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006196:	2b08      	cmp	r3, #8
 8006198:	d112      	bne.n	80061c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800619a:	4b82      	ldr	r3, [pc, #520]	; (80063a4 <HAL_RCC_OscConfig+0x240>)
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061a6:	d10b      	bne.n	80061c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061a8:	4b7e      	ldr	r3, [pc, #504]	; (80063a4 <HAL_RCC_OscConfig+0x240>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d05b      	beq.n	800626c <HAL_RCC_OscConfig+0x108>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d157      	bne.n	800626c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e242      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c8:	d106      	bne.n	80061d8 <HAL_RCC_OscConfig+0x74>
 80061ca:	4b76      	ldr	r3, [pc, #472]	; (80063a4 <HAL_RCC_OscConfig+0x240>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a75      	ldr	r2, [pc, #468]	; (80063a4 <HAL_RCC_OscConfig+0x240>)
 80061d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	e01d      	b.n	8006214 <HAL_RCC_OscConfig+0xb0>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061e0:	d10c      	bne.n	80061fc <HAL_RCC_OscConfig+0x98>
 80061e2:	4b70      	ldr	r3, [pc, #448]	; (80063a4 <HAL_RCC_OscConfig+0x240>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a6f      	ldr	r2, [pc, #444]	; (80063a4 <HAL_RCC_OscConfig+0x240>)
 80061e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061ec:	6013      	str	r3, [r2, #0]
 80061ee:	4b6d      	ldr	r3, [pc, #436]	; (80063a4 <HAL_RCC_OscConfig+0x240>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a6c      	ldr	r2, [pc, #432]	; (80063a4 <HAL_RCC_OscConfig+0x240>)
 80061f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061f8:	6013      	str	r3, [r2, #0]
 80061fa:	e00b      	b.n	8006214 <HAL_RCC_OscConfig+0xb0>
 80061fc:	4b69      	ldr	r3, [pc, #420]	; (80063a4 <HAL_RCC_OscConfig+0x240>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a68      	ldr	r2, [pc, #416]	; (80063a4 <HAL_RCC_OscConfig+0x240>)
 8006202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006206:	6013      	str	r3, [r2, #0]
 8006208:	4b66      	ldr	r3, [pc, #408]	; (80063a4 <HAL_RCC_OscConfig+0x240>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a65      	ldr	r2, [pc, #404]	; (80063a4 <HAL_RCC_OscConfig+0x240>)
 800620e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d013      	beq.n	8006244 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800621c:	f7fe f81e 	bl	800425c <HAL_GetTick>
 8006220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006222:	e008      	b.n	8006236 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006224:	f7fe f81a 	bl	800425c <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	2b64      	cmp	r3, #100	; 0x64
 8006230:	d901      	bls.n	8006236 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e207      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006236:	4b5b      	ldr	r3, [pc, #364]	; (80063a4 <HAL_RCC_OscConfig+0x240>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d0f0      	beq.n	8006224 <HAL_RCC_OscConfig+0xc0>
 8006242:	e014      	b.n	800626e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006244:	f7fe f80a 	bl	800425c <HAL_GetTick>
 8006248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800624a:	e008      	b.n	800625e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800624c:	f7fe f806 	bl	800425c <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b64      	cmp	r3, #100	; 0x64
 8006258:	d901      	bls.n	800625e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e1f3      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800625e:	4b51      	ldr	r3, [pc, #324]	; (80063a4 <HAL_RCC_OscConfig+0x240>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1f0      	bne.n	800624c <HAL_RCC_OscConfig+0xe8>
 800626a:	e000      	b.n	800626e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800626c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d063      	beq.n	8006342 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800627a:	4b4a      	ldr	r3, [pc, #296]	; (80063a4 <HAL_RCC_OscConfig+0x240>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f003 030c 	and.w	r3, r3, #12
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00b      	beq.n	800629e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006286:	4b47      	ldr	r3, [pc, #284]	; (80063a4 <HAL_RCC_OscConfig+0x240>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800628e:	2b08      	cmp	r3, #8
 8006290:	d11c      	bne.n	80062cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006292:	4b44      	ldr	r3, [pc, #272]	; (80063a4 <HAL_RCC_OscConfig+0x240>)
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d116      	bne.n	80062cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800629e:	4b41      	ldr	r3, [pc, #260]	; (80063a4 <HAL_RCC_OscConfig+0x240>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d005      	beq.n	80062b6 <HAL_RCC_OscConfig+0x152>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d001      	beq.n	80062b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e1c7      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062b6:	4b3b      	ldr	r3, [pc, #236]	; (80063a4 <HAL_RCC_OscConfig+0x240>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	4937      	ldr	r1, [pc, #220]	; (80063a4 <HAL_RCC_OscConfig+0x240>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062ca:	e03a      	b.n	8006342 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d020      	beq.n	8006316 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062d4:	4b34      	ldr	r3, [pc, #208]	; (80063a8 <HAL_RCC_OscConfig+0x244>)
 80062d6:	2201      	movs	r2, #1
 80062d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062da:	f7fd ffbf 	bl	800425c <HAL_GetTick>
 80062de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062e0:	e008      	b.n	80062f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062e2:	f7fd ffbb 	bl	800425c <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d901      	bls.n	80062f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e1a8      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062f4:	4b2b      	ldr	r3, [pc, #172]	; (80063a4 <HAL_RCC_OscConfig+0x240>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0f0      	beq.n	80062e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006300:	4b28      	ldr	r3, [pc, #160]	; (80063a4 <HAL_RCC_OscConfig+0x240>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	00db      	lsls	r3, r3, #3
 800630e:	4925      	ldr	r1, [pc, #148]	; (80063a4 <HAL_RCC_OscConfig+0x240>)
 8006310:	4313      	orrs	r3, r2
 8006312:	600b      	str	r3, [r1, #0]
 8006314:	e015      	b.n	8006342 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006316:	4b24      	ldr	r3, [pc, #144]	; (80063a8 <HAL_RCC_OscConfig+0x244>)
 8006318:	2200      	movs	r2, #0
 800631a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800631c:	f7fd ff9e 	bl	800425c <HAL_GetTick>
 8006320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006322:	e008      	b.n	8006336 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006324:	f7fd ff9a 	bl	800425c <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b02      	cmp	r3, #2
 8006330:	d901      	bls.n	8006336 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e187      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006336:	4b1b      	ldr	r3, [pc, #108]	; (80063a4 <HAL_RCC_OscConfig+0x240>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1f0      	bne.n	8006324 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0308 	and.w	r3, r3, #8
 800634a:	2b00      	cmp	r3, #0
 800634c:	d036      	beq.n	80063bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d016      	beq.n	8006384 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006356:	4b15      	ldr	r3, [pc, #84]	; (80063ac <HAL_RCC_OscConfig+0x248>)
 8006358:	2201      	movs	r2, #1
 800635a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800635c:	f7fd ff7e 	bl	800425c <HAL_GetTick>
 8006360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006362:	e008      	b.n	8006376 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006364:	f7fd ff7a 	bl	800425c <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	2b02      	cmp	r3, #2
 8006370:	d901      	bls.n	8006376 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e167      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006376:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <HAL_RCC_OscConfig+0x240>)
 8006378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d0f0      	beq.n	8006364 <HAL_RCC_OscConfig+0x200>
 8006382:	e01b      	b.n	80063bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006384:	4b09      	ldr	r3, [pc, #36]	; (80063ac <HAL_RCC_OscConfig+0x248>)
 8006386:	2200      	movs	r2, #0
 8006388:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800638a:	f7fd ff67 	bl	800425c <HAL_GetTick>
 800638e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006390:	e00e      	b.n	80063b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006392:	f7fd ff63 	bl	800425c <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d907      	bls.n	80063b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e150      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
 80063a4:	40023800 	.word	0x40023800
 80063a8:	42470000 	.word	0x42470000
 80063ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063b0:	4b88      	ldr	r3, [pc, #544]	; (80065d4 <HAL_RCC_OscConfig+0x470>)
 80063b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1ea      	bne.n	8006392 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0304 	and.w	r3, r3, #4
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 8097 	beq.w	80064f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063ca:	2300      	movs	r3, #0
 80063cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063ce:	4b81      	ldr	r3, [pc, #516]	; (80065d4 <HAL_RCC_OscConfig+0x470>)
 80063d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10f      	bne.n	80063fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063da:	2300      	movs	r3, #0
 80063dc:	60bb      	str	r3, [r7, #8]
 80063de:	4b7d      	ldr	r3, [pc, #500]	; (80065d4 <HAL_RCC_OscConfig+0x470>)
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	4a7c      	ldr	r2, [pc, #496]	; (80065d4 <HAL_RCC_OscConfig+0x470>)
 80063e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063e8:	6413      	str	r3, [r2, #64]	; 0x40
 80063ea:	4b7a      	ldr	r3, [pc, #488]	; (80065d4 <HAL_RCC_OscConfig+0x470>)
 80063ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063f2:	60bb      	str	r3, [r7, #8]
 80063f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063f6:	2301      	movs	r3, #1
 80063f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063fa:	4b77      	ldr	r3, [pc, #476]	; (80065d8 <HAL_RCC_OscConfig+0x474>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006402:	2b00      	cmp	r3, #0
 8006404:	d118      	bne.n	8006438 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006406:	4b74      	ldr	r3, [pc, #464]	; (80065d8 <HAL_RCC_OscConfig+0x474>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a73      	ldr	r2, [pc, #460]	; (80065d8 <HAL_RCC_OscConfig+0x474>)
 800640c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006412:	f7fd ff23 	bl	800425c <HAL_GetTick>
 8006416:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006418:	e008      	b.n	800642c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800641a:	f7fd ff1f 	bl	800425c <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	2b02      	cmp	r3, #2
 8006426:	d901      	bls.n	800642c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e10c      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800642c:	4b6a      	ldr	r3, [pc, #424]	; (80065d8 <HAL_RCC_OscConfig+0x474>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006434:	2b00      	cmp	r3, #0
 8006436:	d0f0      	beq.n	800641a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d106      	bne.n	800644e <HAL_RCC_OscConfig+0x2ea>
 8006440:	4b64      	ldr	r3, [pc, #400]	; (80065d4 <HAL_RCC_OscConfig+0x470>)
 8006442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006444:	4a63      	ldr	r2, [pc, #396]	; (80065d4 <HAL_RCC_OscConfig+0x470>)
 8006446:	f043 0301 	orr.w	r3, r3, #1
 800644a:	6713      	str	r3, [r2, #112]	; 0x70
 800644c:	e01c      	b.n	8006488 <HAL_RCC_OscConfig+0x324>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	2b05      	cmp	r3, #5
 8006454:	d10c      	bne.n	8006470 <HAL_RCC_OscConfig+0x30c>
 8006456:	4b5f      	ldr	r3, [pc, #380]	; (80065d4 <HAL_RCC_OscConfig+0x470>)
 8006458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800645a:	4a5e      	ldr	r2, [pc, #376]	; (80065d4 <HAL_RCC_OscConfig+0x470>)
 800645c:	f043 0304 	orr.w	r3, r3, #4
 8006460:	6713      	str	r3, [r2, #112]	; 0x70
 8006462:	4b5c      	ldr	r3, [pc, #368]	; (80065d4 <HAL_RCC_OscConfig+0x470>)
 8006464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006466:	4a5b      	ldr	r2, [pc, #364]	; (80065d4 <HAL_RCC_OscConfig+0x470>)
 8006468:	f043 0301 	orr.w	r3, r3, #1
 800646c:	6713      	str	r3, [r2, #112]	; 0x70
 800646e:	e00b      	b.n	8006488 <HAL_RCC_OscConfig+0x324>
 8006470:	4b58      	ldr	r3, [pc, #352]	; (80065d4 <HAL_RCC_OscConfig+0x470>)
 8006472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006474:	4a57      	ldr	r2, [pc, #348]	; (80065d4 <HAL_RCC_OscConfig+0x470>)
 8006476:	f023 0301 	bic.w	r3, r3, #1
 800647a:	6713      	str	r3, [r2, #112]	; 0x70
 800647c:	4b55      	ldr	r3, [pc, #340]	; (80065d4 <HAL_RCC_OscConfig+0x470>)
 800647e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006480:	4a54      	ldr	r2, [pc, #336]	; (80065d4 <HAL_RCC_OscConfig+0x470>)
 8006482:	f023 0304 	bic.w	r3, r3, #4
 8006486:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d015      	beq.n	80064bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006490:	f7fd fee4 	bl	800425c <HAL_GetTick>
 8006494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006496:	e00a      	b.n	80064ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006498:	f7fd fee0 	bl	800425c <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e0cb      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064ae:	4b49      	ldr	r3, [pc, #292]	; (80065d4 <HAL_RCC_OscConfig+0x470>)
 80064b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b2:	f003 0302 	and.w	r3, r3, #2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d0ee      	beq.n	8006498 <HAL_RCC_OscConfig+0x334>
 80064ba:	e014      	b.n	80064e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064bc:	f7fd fece 	bl	800425c <HAL_GetTick>
 80064c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064c2:	e00a      	b.n	80064da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064c4:	f7fd feca 	bl	800425c <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d901      	bls.n	80064da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e0b5      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064da:	4b3e      	ldr	r3, [pc, #248]	; (80065d4 <HAL_RCC_OscConfig+0x470>)
 80064dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1ee      	bne.n	80064c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064e6:	7dfb      	ldrb	r3, [r7, #23]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d105      	bne.n	80064f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064ec:	4b39      	ldr	r3, [pc, #228]	; (80065d4 <HAL_RCC_OscConfig+0x470>)
 80064ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f0:	4a38      	ldr	r2, [pc, #224]	; (80065d4 <HAL_RCC_OscConfig+0x470>)
 80064f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 80a1 	beq.w	8006644 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006502:	4b34      	ldr	r3, [pc, #208]	; (80065d4 <HAL_RCC_OscConfig+0x470>)
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f003 030c 	and.w	r3, r3, #12
 800650a:	2b08      	cmp	r3, #8
 800650c:	d05c      	beq.n	80065c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	2b02      	cmp	r3, #2
 8006514:	d141      	bne.n	800659a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006516:	4b31      	ldr	r3, [pc, #196]	; (80065dc <HAL_RCC_OscConfig+0x478>)
 8006518:	2200      	movs	r2, #0
 800651a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800651c:	f7fd fe9e 	bl	800425c <HAL_GetTick>
 8006520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006522:	e008      	b.n	8006536 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006524:	f7fd fe9a 	bl	800425c <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	2b02      	cmp	r3, #2
 8006530:	d901      	bls.n	8006536 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e087      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006536:	4b27      	ldr	r3, [pc, #156]	; (80065d4 <HAL_RCC_OscConfig+0x470>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1f0      	bne.n	8006524 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	69da      	ldr	r2, [r3, #28]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	431a      	orrs	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	019b      	lsls	r3, r3, #6
 8006552:	431a      	orrs	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006558:	085b      	lsrs	r3, r3, #1
 800655a:	3b01      	subs	r3, #1
 800655c:	041b      	lsls	r3, r3, #16
 800655e:	431a      	orrs	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006564:	061b      	lsls	r3, r3, #24
 8006566:	491b      	ldr	r1, [pc, #108]	; (80065d4 <HAL_RCC_OscConfig+0x470>)
 8006568:	4313      	orrs	r3, r2
 800656a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800656c:	4b1b      	ldr	r3, [pc, #108]	; (80065dc <HAL_RCC_OscConfig+0x478>)
 800656e:	2201      	movs	r2, #1
 8006570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006572:	f7fd fe73 	bl	800425c <HAL_GetTick>
 8006576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006578:	e008      	b.n	800658c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800657a:	f7fd fe6f 	bl	800425c <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	2b02      	cmp	r3, #2
 8006586:	d901      	bls.n	800658c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e05c      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800658c:	4b11      	ldr	r3, [pc, #68]	; (80065d4 <HAL_RCC_OscConfig+0x470>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d0f0      	beq.n	800657a <HAL_RCC_OscConfig+0x416>
 8006598:	e054      	b.n	8006644 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800659a:	4b10      	ldr	r3, [pc, #64]	; (80065dc <HAL_RCC_OscConfig+0x478>)
 800659c:	2200      	movs	r2, #0
 800659e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065a0:	f7fd fe5c 	bl	800425c <HAL_GetTick>
 80065a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065a6:	e008      	b.n	80065ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065a8:	f7fd fe58 	bl	800425c <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d901      	bls.n	80065ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e045      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ba:	4b06      	ldr	r3, [pc, #24]	; (80065d4 <HAL_RCC_OscConfig+0x470>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1f0      	bne.n	80065a8 <HAL_RCC_OscConfig+0x444>
 80065c6:	e03d      	b.n	8006644 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d107      	bne.n	80065e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e038      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
 80065d4:	40023800 	.word	0x40023800
 80065d8:	40007000 	.word	0x40007000
 80065dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80065e0:	4b1b      	ldr	r3, [pc, #108]	; (8006650 <HAL_RCC_OscConfig+0x4ec>)
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d028      	beq.n	8006640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d121      	bne.n	8006640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006606:	429a      	cmp	r2, r3
 8006608:	d11a      	bne.n	8006640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006610:	4013      	ands	r3, r2
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006616:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006618:	4293      	cmp	r3, r2
 800661a:	d111      	bne.n	8006640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006626:	085b      	lsrs	r3, r3, #1
 8006628:	3b01      	subs	r3, #1
 800662a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800662c:	429a      	cmp	r2, r3
 800662e:	d107      	bne.n	8006640 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800663c:	429a      	cmp	r2, r3
 800663e:	d001      	beq.n	8006644 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e000      	b.n	8006646 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3718      	adds	r7, #24
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	40023800 	.word	0x40023800

08006654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e0cc      	b.n	8006802 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006668:	4b68      	ldr	r3, [pc, #416]	; (800680c <HAL_RCC_ClockConfig+0x1b8>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 030f 	and.w	r3, r3, #15
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	429a      	cmp	r2, r3
 8006674:	d90c      	bls.n	8006690 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006676:	4b65      	ldr	r3, [pc, #404]	; (800680c <HAL_RCC_ClockConfig+0x1b8>)
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	b2d2      	uxtb	r2, r2
 800667c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800667e:	4b63      	ldr	r3, [pc, #396]	; (800680c <HAL_RCC_ClockConfig+0x1b8>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 030f 	and.w	r3, r3, #15
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	429a      	cmp	r2, r3
 800668a:	d001      	beq.n	8006690 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e0b8      	b.n	8006802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d020      	beq.n	80066de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0304 	and.w	r3, r3, #4
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d005      	beq.n	80066b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066a8:	4b59      	ldr	r3, [pc, #356]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	4a58      	ldr	r2, [pc, #352]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80066ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80066b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0308 	and.w	r3, r3, #8
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d005      	beq.n	80066cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066c0:	4b53      	ldr	r3, [pc, #332]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	4a52      	ldr	r2, [pc, #328]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80066c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80066ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066cc:	4b50      	ldr	r3, [pc, #320]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	494d      	ldr	r1, [pc, #308]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d044      	beq.n	8006774 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d107      	bne.n	8006702 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066f2:	4b47      	ldr	r3, [pc, #284]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d119      	bne.n	8006732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e07f      	b.n	8006802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	2b02      	cmp	r3, #2
 8006708:	d003      	beq.n	8006712 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800670e:	2b03      	cmp	r3, #3
 8006710:	d107      	bne.n	8006722 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006712:	4b3f      	ldr	r3, [pc, #252]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d109      	bne.n	8006732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e06f      	b.n	8006802 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006722:	4b3b      	ldr	r3, [pc, #236]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e067      	b.n	8006802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006732:	4b37      	ldr	r3, [pc, #220]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f023 0203 	bic.w	r2, r3, #3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	4934      	ldr	r1, [pc, #208]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 8006740:	4313      	orrs	r3, r2
 8006742:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006744:	f7fd fd8a 	bl	800425c <HAL_GetTick>
 8006748:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800674a:	e00a      	b.n	8006762 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800674c:	f7fd fd86 	bl	800425c <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	f241 3288 	movw	r2, #5000	; 0x1388
 800675a:	4293      	cmp	r3, r2
 800675c:	d901      	bls.n	8006762 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e04f      	b.n	8006802 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006762:	4b2b      	ldr	r3, [pc, #172]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f003 020c 	and.w	r2, r3, #12
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	429a      	cmp	r2, r3
 8006772:	d1eb      	bne.n	800674c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006774:	4b25      	ldr	r3, [pc, #148]	; (800680c <HAL_RCC_ClockConfig+0x1b8>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 030f 	and.w	r3, r3, #15
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	429a      	cmp	r2, r3
 8006780:	d20c      	bcs.n	800679c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006782:	4b22      	ldr	r3, [pc, #136]	; (800680c <HAL_RCC_ClockConfig+0x1b8>)
 8006784:	683a      	ldr	r2, [r7, #0]
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800678a:	4b20      	ldr	r3, [pc, #128]	; (800680c <HAL_RCC_ClockConfig+0x1b8>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 030f 	and.w	r3, r3, #15
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	429a      	cmp	r2, r3
 8006796:	d001      	beq.n	800679c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e032      	b.n	8006802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0304 	and.w	r3, r3, #4
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d008      	beq.n	80067ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067a8:	4b19      	ldr	r3, [pc, #100]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	4916      	ldr	r1, [pc, #88]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0308 	and.w	r3, r3, #8
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d009      	beq.n	80067da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067c6:	4b12      	ldr	r3, [pc, #72]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	00db      	lsls	r3, r3, #3
 80067d4:	490e      	ldr	r1, [pc, #56]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80067da:	f000 f821 	bl	8006820 <HAL_RCC_GetSysClockFreq>
 80067de:	4602      	mov	r2, r0
 80067e0:	4b0b      	ldr	r3, [pc, #44]	; (8006810 <HAL_RCC_ClockConfig+0x1bc>)
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	091b      	lsrs	r3, r3, #4
 80067e6:	f003 030f 	and.w	r3, r3, #15
 80067ea:	490a      	ldr	r1, [pc, #40]	; (8006814 <HAL_RCC_ClockConfig+0x1c0>)
 80067ec:	5ccb      	ldrb	r3, [r1, r3]
 80067ee:	fa22 f303 	lsr.w	r3, r2, r3
 80067f2:	4a09      	ldr	r2, [pc, #36]	; (8006818 <HAL_RCC_ClockConfig+0x1c4>)
 80067f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80067f6:	4b09      	ldr	r3, [pc, #36]	; (800681c <HAL_RCC_ClockConfig+0x1c8>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fb fe4c 	bl	8002498 <HAL_InitTick>

  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	40023c00 	.word	0x40023c00
 8006810:	40023800 	.word	0x40023800
 8006814:	0800f6b4 	.word	0x0800f6b4
 8006818:	20000010 	.word	0x20000010
 800681c:	2000008c 	.word	0x2000008c

08006820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006824:	b094      	sub	sp, #80	; 0x50
 8006826:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006828:	2300      	movs	r3, #0
 800682a:	647b      	str	r3, [r7, #68]	; 0x44
 800682c:	2300      	movs	r3, #0
 800682e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006830:	2300      	movs	r3, #0
 8006832:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006834:	2300      	movs	r3, #0
 8006836:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006838:	4b79      	ldr	r3, [pc, #484]	; (8006a20 <HAL_RCC_GetSysClockFreq+0x200>)
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f003 030c 	and.w	r3, r3, #12
 8006840:	2b08      	cmp	r3, #8
 8006842:	d00d      	beq.n	8006860 <HAL_RCC_GetSysClockFreq+0x40>
 8006844:	2b08      	cmp	r3, #8
 8006846:	f200 80e1 	bhi.w	8006a0c <HAL_RCC_GetSysClockFreq+0x1ec>
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <HAL_RCC_GetSysClockFreq+0x34>
 800684e:	2b04      	cmp	r3, #4
 8006850:	d003      	beq.n	800685a <HAL_RCC_GetSysClockFreq+0x3a>
 8006852:	e0db      	b.n	8006a0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006854:	4b73      	ldr	r3, [pc, #460]	; (8006a24 <HAL_RCC_GetSysClockFreq+0x204>)
 8006856:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006858:	e0db      	b.n	8006a12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800685a:	4b73      	ldr	r3, [pc, #460]	; (8006a28 <HAL_RCC_GetSysClockFreq+0x208>)
 800685c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800685e:	e0d8      	b.n	8006a12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006860:	4b6f      	ldr	r3, [pc, #444]	; (8006a20 <HAL_RCC_GetSysClockFreq+0x200>)
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006868:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800686a:	4b6d      	ldr	r3, [pc, #436]	; (8006a20 <HAL_RCC_GetSysClockFreq+0x200>)
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d063      	beq.n	800693e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006876:	4b6a      	ldr	r3, [pc, #424]	; (8006a20 <HAL_RCC_GetSysClockFreq+0x200>)
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	099b      	lsrs	r3, r3, #6
 800687c:	2200      	movs	r2, #0
 800687e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006880:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006888:	633b      	str	r3, [r7, #48]	; 0x30
 800688a:	2300      	movs	r3, #0
 800688c:	637b      	str	r3, [r7, #52]	; 0x34
 800688e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006892:	4622      	mov	r2, r4
 8006894:	462b      	mov	r3, r5
 8006896:	f04f 0000 	mov.w	r0, #0
 800689a:	f04f 0100 	mov.w	r1, #0
 800689e:	0159      	lsls	r1, r3, #5
 80068a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068a4:	0150      	lsls	r0, r2, #5
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4621      	mov	r1, r4
 80068ac:	1a51      	subs	r1, r2, r1
 80068ae:	6139      	str	r1, [r7, #16]
 80068b0:	4629      	mov	r1, r5
 80068b2:	eb63 0301 	sbc.w	r3, r3, r1
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	f04f 0200 	mov.w	r2, #0
 80068bc:	f04f 0300 	mov.w	r3, #0
 80068c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068c4:	4659      	mov	r1, fp
 80068c6:	018b      	lsls	r3, r1, #6
 80068c8:	4651      	mov	r1, sl
 80068ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80068ce:	4651      	mov	r1, sl
 80068d0:	018a      	lsls	r2, r1, #6
 80068d2:	4651      	mov	r1, sl
 80068d4:	ebb2 0801 	subs.w	r8, r2, r1
 80068d8:	4659      	mov	r1, fp
 80068da:	eb63 0901 	sbc.w	r9, r3, r1
 80068de:	f04f 0200 	mov.w	r2, #0
 80068e2:	f04f 0300 	mov.w	r3, #0
 80068e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068f2:	4690      	mov	r8, r2
 80068f4:	4699      	mov	r9, r3
 80068f6:	4623      	mov	r3, r4
 80068f8:	eb18 0303 	adds.w	r3, r8, r3
 80068fc:	60bb      	str	r3, [r7, #8]
 80068fe:	462b      	mov	r3, r5
 8006900:	eb49 0303 	adc.w	r3, r9, r3
 8006904:	60fb      	str	r3, [r7, #12]
 8006906:	f04f 0200 	mov.w	r2, #0
 800690a:	f04f 0300 	mov.w	r3, #0
 800690e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006912:	4629      	mov	r1, r5
 8006914:	024b      	lsls	r3, r1, #9
 8006916:	4621      	mov	r1, r4
 8006918:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800691c:	4621      	mov	r1, r4
 800691e:	024a      	lsls	r2, r1, #9
 8006920:	4610      	mov	r0, r2
 8006922:	4619      	mov	r1, r3
 8006924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006926:	2200      	movs	r2, #0
 8006928:	62bb      	str	r3, [r7, #40]	; 0x28
 800692a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800692c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006930:	f7fa f9ba 	bl	8000ca8 <__aeabi_uldivmod>
 8006934:	4602      	mov	r2, r0
 8006936:	460b      	mov	r3, r1
 8006938:	4613      	mov	r3, r2
 800693a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800693c:	e058      	b.n	80069f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800693e:	4b38      	ldr	r3, [pc, #224]	; (8006a20 <HAL_RCC_GetSysClockFreq+0x200>)
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	099b      	lsrs	r3, r3, #6
 8006944:	2200      	movs	r2, #0
 8006946:	4618      	mov	r0, r3
 8006948:	4611      	mov	r1, r2
 800694a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800694e:	623b      	str	r3, [r7, #32]
 8006950:	2300      	movs	r3, #0
 8006952:	627b      	str	r3, [r7, #36]	; 0x24
 8006954:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006958:	4642      	mov	r2, r8
 800695a:	464b      	mov	r3, r9
 800695c:	f04f 0000 	mov.w	r0, #0
 8006960:	f04f 0100 	mov.w	r1, #0
 8006964:	0159      	lsls	r1, r3, #5
 8006966:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800696a:	0150      	lsls	r0, r2, #5
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	4641      	mov	r1, r8
 8006972:	ebb2 0a01 	subs.w	sl, r2, r1
 8006976:	4649      	mov	r1, r9
 8006978:	eb63 0b01 	sbc.w	fp, r3, r1
 800697c:	f04f 0200 	mov.w	r2, #0
 8006980:	f04f 0300 	mov.w	r3, #0
 8006984:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006988:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800698c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006990:	ebb2 040a 	subs.w	r4, r2, sl
 8006994:	eb63 050b 	sbc.w	r5, r3, fp
 8006998:	f04f 0200 	mov.w	r2, #0
 800699c:	f04f 0300 	mov.w	r3, #0
 80069a0:	00eb      	lsls	r3, r5, #3
 80069a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069a6:	00e2      	lsls	r2, r4, #3
 80069a8:	4614      	mov	r4, r2
 80069aa:	461d      	mov	r5, r3
 80069ac:	4643      	mov	r3, r8
 80069ae:	18e3      	adds	r3, r4, r3
 80069b0:	603b      	str	r3, [r7, #0]
 80069b2:	464b      	mov	r3, r9
 80069b4:	eb45 0303 	adc.w	r3, r5, r3
 80069b8:	607b      	str	r3, [r7, #4]
 80069ba:	f04f 0200 	mov.w	r2, #0
 80069be:	f04f 0300 	mov.w	r3, #0
 80069c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80069c6:	4629      	mov	r1, r5
 80069c8:	028b      	lsls	r3, r1, #10
 80069ca:	4621      	mov	r1, r4
 80069cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069d0:	4621      	mov	r1, r4
 80069d2:	028a      	lsls	r2, r1, #10
 80069d4:	4610      	mov	r0, r2
 80069d6:	4619      	mov	r1, r3
 80069d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069da:	2200      	movs	r2, #0
 80069dc:	61bb      	str	r3, [r7, #24]
 80069de:	61fa      	str	r2, [r7, #28]
 80069e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069e4:	f7fa f960 	bl	8000ca8 <__aeabi_uldivmod>
 80069e8:	4602      	mov	r2, r0
 80069ea:	460b      	mov	r3, r1
 80069ec:	4613      	mov	r3, r2
 80069ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80069f0:	4b0b      	ldr	r3, [pc, #44]	; (8006a20 <HAL_RCC_GetSysClockFreq+0x200>)
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	0c1b      	lsrs	r3, r3, #16
 80069f6:	f003 0303 	and.w	r3, r3, #3
 80069fa:	3301      	adds	r3, #1
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006a00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a0a:	e002      	b.n	8006a12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a0c:	4b05      	ldr	r3, [pc, #20]	; (8006a24 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3750      	adds	r7, #80	; 0x50
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a1e:	bf00      	nop
 8006a20:	40023800 	.word	0x40023800
 8006a24:	00f42400 	.word	0x00f42400
 8006a28:	007a1200 	.word	0x007a1200

08006a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a30:	4b03      	ldr	r3, [pc, #12]	; (8006a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a32:	681b      	ldr	r3, [r3, #0]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	20000010 	.word	0x20000010

08006a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a48:	f7ff fff0 	bl	8006a2c <HAL_RCC_GetHCLKFreq>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	4b05      	ldr	r3, [pc, #20]	; (8006a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	0a9b      	lsrs	r3, r3, #10
 8006a54:	f003 0307 	and.w	r3, r3, #7
 8006a58:	4903      	ldr	r1, [pc, #12]	; (8006a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a5a:	5ccb      	ldrb	r3, [r1, r3]
 8006a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	40023800 	.word	0x40023800
 8006a68:	0800f6c4 	.word	0x0800f6c4

08006a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006a70:	f7ff ffdc 	bl	8006a2c <HAL_RCC_GetHCLKFreq>
 8006a74:	4602      	mov	r2, r0
 8006a76:	4b05      	ldr	r3, [pc, #20]	; (8006a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	0b5b      	lsrs	r3, r3, #13
 8006a7c:	f003 0307 	and.w	r3, r3, #7
 8006a80:	4903      	ldr	r1, [pc, #12]	; (8006a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a82:	5ccb      	ldrb	r3, [r1, r3]
 8006a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	40023800 	.word	0x40023800
 8006a90:	0800f6c4 	.word	0x0800f6c4

08006a94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	220f      	movs	r2, #15
 8006aa2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006aa4:	4b12      	ldr	r3, [pc, #72]	; (8006af0 <HAL_RCC_GetClockConfig+0x5c>)
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	f003 0203 	and.w	r2, r3, #3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006ab0:	4b0f      	ldr	r3, [pc, #60]	; (8006af0 <HAL_RCC_GetClockConfig+0x5c>)
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006abc:	4b0c      	ldr	r3, [pc, #48]	; (8006af0 <HAL_RCC_GetClockConfig+0x5c>)
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006ac8:	4b09      	ldr	r3, [pc, #36]	; (8006af0 <HAL_RCC_GetClockConfig+0x5c>)
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	08db      	lsrs	r3, r3, #3
 8006ace:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006ad6:	4b07      	ldr	r3, [pc, #28]	; (8006af4 <HAL_RCC_GetClockConfig+0x60>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 020f 	and.w	r2, r3, #15
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	601a      	str	r2, [r3, #0]
}
 8006ae2:	bf00      	nop
 8006ae4:	370c      	adds	r7, #12
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	40023800 	.word	0x40023800
 8006af4:	40023c00 	.word	0x40023c00

08006af8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b00:	2300      	movs	r3, #0
 8006b02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006b04:	2300      	movs	r3, #0
 8006b06:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0301 	and.w	r3, r3, #1
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10b      	bne.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d105      	bne.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d075      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006b2c:	4b91      	ldr	r3, [pc, #580]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b32:	f7fd fb93 	bl	800425c <HAL_GetTick>
 8006b36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b38:	e008      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b3a:	f7fd fb8f 	bl	800425c <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d901      	bls.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e189      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b4c:	4b8a      	ldr	r3, [pc, #552]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1f0      	bne.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0301 	and.w	r3, r3, #1
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d009      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	019a      	lsls	r2, r3, #6
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	071b      	lsls	r3, r3, #28
 8006b70:	4981      	ldr	r1, [pc, #516]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0302 	and.w	r3, r3, #2
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d01f      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b84:	4b7c      	ldr	r3, [pc, #496]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b8a:	0f1b      	lsrs	r3, r3, #28
 8006b8c:	f003 0307 	and.w	r3, r3, #7
 8006b90:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	019a      	lsls	r2, r3, #6
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	061b      	lsls	r3, r3, #24
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	071b      	lsls	r3, r3, #28
 8006ba4:	4974      	ldr	r1, [pc, #464]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006bac:	4b72      	ldr	r3, [pc, #456]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bb2:	f023 021f 	bic.w	r2, r3, #31
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	69db      	ldr	r3, [r3, #28]
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	496e      	ldr	r1, [pc, #440]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00d      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	019a      	lsls	r2, r3, #6
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	061b      	lsls	r3, r3, #24
 8006bdc:	431a      	orrs	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	071b      	lsls	r3, r3, #28
 8006be4:	4964      	ldr	r1, [pc, #400]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006bec:	4b61      	ldr	r3, [pc, #388]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006bee:	2201      	movs	r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bf2:	f7fd fb33 	bl	800425c <HAL_GetTick>
 8006bf6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bf8:	e008      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006bfa:	f7fd fb2f 	bl	800425c <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d901      	bls.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e129      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c0c:	4b5a      	ldr	r3, [pc, #360]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d0f0      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0304 	and.w	r3, r3, #4
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d105      	bne.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d079      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006c30:	4b52      	ldr	r3, [pc, #328]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c36:	f7fd fb11 	bl	800425c <HAL_GetTick>
 8006c3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c3c:	e008      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006c3e:	f7fd fb0d 	bl	800425c <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d901      	bls.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e107      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c50:	4b49      	ldr	r3, [pc, #292]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c5c:	d0ef      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0304 	and.w	r3, r3, #4
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d020      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006c6a:	4b43      	ldr	r3, [pc, #268]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c70:	0f1b      	lsrs	r3, r3, #28
 8006c72:	f003 0307 	and.w	r3, r3, #7
 8006c76:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	019a      	lsls	r2, r3, #6
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	061b      	lsls	r3, r3, #24
 8006c84:	431a      	orrs	r2, r3
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	071b      	lsls	r3, r3, #28
 8006c8a:	493b      	ldr	r1, [pc, #236]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006c92:	4b39      	ldr	r3, [pc, #228]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c98:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	021b      	lsls	r3, r3, #8
 8006ca4:	4934      	ldr	r1, [pc, #208]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0308 	and.w	r3, r3, #8
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d01e      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006cb8:	4b2f      	ldr	r3, [pc, #188]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cbe:	0e1b      	lsrs	r3, r3, #24
 8006cc0:	f003 030f 	and.w	r3, r3, #15
 8006cc4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	019a      	lsls	r2, r3, #6
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	061b      	lsls	r3, r3, #24
 8006cd0:	431a      	orrs	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	071b      	lsls	r3, r3, #28
 8006cd8:	4927      	ldr	r1, [pc, #156]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006ce0:	4b25      	ldr	r3, [pc, #148]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ce6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cee:	4922      	ldr	r1, [pc, #136]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006cf6:	4b21      	ldr	r3, [pc, #132]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cfc:	f7fd faae 	bl	800425c <HAL_GetTick>
 8006d00:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d02:	e008      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006d04:	f7fd faaa 	bl	800425c <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d901      	bls.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e0a4      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d16:	4b18      	ldr	r3, [pc, #96]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d22:	d1ef      	bne.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0320 	and.w	r3, r3, #32
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 808b 	beq.w	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d32:	2300      	movs	r3, #0
 8006d34:	60fb      	str	r3, [r7, #12]
 8006d36:	4b10      	ldr	r3, [pc, #64]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3a:	4a0f      	ldr	r2, [pc, #60]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d40:	6413      	str	r3, [r2, #64]	; 0x40
 8006d42:	4b0d      	ldr	r3, [pc, #52]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d4a:	60fb      	str	r3, [r7, #12]
 8006d4c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006d4e:	4b0c      	ldr	r3, [pc, #48]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a0b      	ldr	r2, [pc, #44]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d58:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006d5a:	f7fd fa7f 	bl	800425c <HAL_GetTick>
 8006d5e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d60:	e010      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006d62:	f7fd fa7b 	bl	800425c <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d909      	bls.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006d70:	2303      	movs	r3, #3
 8006d72:	e075      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006d74:	42470068 	.word	0x42470068
 8006d78:	40023800 	.word	0x40023800
 8006d7c:	42470070 	.word	0x42470070
 8006d80:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d84:	4b38      	ldr	r3, [pc, #224]	; (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d0e8      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d90:	4b36      	ldr	r3, [pc, #216]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d98:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d02f      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d028      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006dae:	4b2f      	ldr	r3, [pc, #188]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006db6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006db8:	4b2d      	ldr	r3, [pc, #180]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006dba:	2201      	movs	r2, #1
 8006dbc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006dbe:	4b2c      	ldr	r3, [pc, #176]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006dc4:	4a29      	ldr	r2, [pc, #164]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006dca:	4b28      	ldr	r3, [pc, #160]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d114      	bne.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006dd6:	f7fd fa41 	bl	800425c <HAL_GetTick>
 8006dda:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ddc:	e00a      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dde:	f7fd fa3d 	bl	800425c <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d901      	bls.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e035      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006df4:	4b1d      	ldr	r3, [pc, #116]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d0ee      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e0c:	d10d      	bne.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006e0e:	4b17      	ldr	r3, [pc, #92]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e22:	4912      	ldr	r1, [pc, #72]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	608b      	str	r3, [r1, #8]
 8006e28:	e005      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006e2a:	4b10      	ldr	r3, [pc, #64]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	4a0f      	ldr	r2, [pc, #60]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e30:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006e34:	6093      	str	r3, [r2, #8]
 8006e36:	4b0d      	ldr	r3, [pc, #52]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e42:	490a      	ldr	r1, [pc, #40]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0310 	and.w	r3, r3, #16
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d004      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006e5a:	4b06      	ldr	r3, [pc, #24]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006e5c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3718      	adds	r7, #24
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	40007000 	.word	0x40007000
 8006e6c:	40023800 	.word	0x40023800
 8006e70:	42470e40 	.word	0x42470e40
 8006e74:	424711e0 	.word	0x424711e0

08006e78 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e025      	b.n	8006ed8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d106      	bne.n	8006ea6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7fb faef 	bl	8002484 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2202      	movs	r2, #2
 8006eaa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	4610      	mov	r0, r2
 8006eba:	f002 fae3 	bl	8009484 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6818      	ldr	r0, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	f002 fb38 	bl	800953e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3708      	adds	r7, #8
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006ef2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006ef4:	7dfb      	ldrb	r3, [r7, #23]
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d101      	bne.n	8006efe <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006efa:	2302      	movs	r3, #2
 8006efc:	e021      	b.n	8006f42 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006efe:	7dfb      	ldrb	r3, [r7, #23]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d002      	beq.n	8006f0a <HAL_SDRAM_SendCommand+0x2a>
 8006f04:	7dfb      	ldrb	r3, [r7, #23]
 8006f06:	2b05      	cmp	r3, #5
 8006f08:	d118      	bne.n	8006f3c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	68b9      	ldr	r1, [r7, #8]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f002 fb78 	bl	8009610 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d104      	bne.n	8006f32 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2205      	movs	r2, #5
 8006f2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006f30:	e006      	b.n	8006f40 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006f3a:	e001      	b.n	8006f40 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e000      	b.n	8006f42 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3718      	adds	r7, #24
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b082      	sub	sp, #8
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
 8006f52:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d101      	bne.n	8006f64 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006f60:	2302      	movs	r3, #2
 8006f62:	e016      	b.n	8006f92 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d10f      	bne.n	8006f90 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2202      	movs	r2, #2
 8006f74:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f002 fb83 	bl	800968a <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	e000      	b.n	8006f92 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e07b      	b.n	80070a4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d108      	bne.n	8006fc6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fbc:	d009      	beq.n	8006fd2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	61da      	str	r2, [r3, #28]
 8006fc4:	e005      	b.n	8006fd2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d106      	bne.n	8006ff2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f7fb f8df 	bl	80021b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007008:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800701a:	431a      	orrs	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007024:	431a      	orrs	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	f003 0302 	and.w	r3, r3, #2
 800702e:	431a      	orrs	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	431a      	orrs	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007042:	431a      	orrs	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	69db      	ldr	r3, [r3, #28]
 8007048:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800704c:	431a      	orrs	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007056:	ea42 0103 	orr.w	r1, r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800705e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	430a      	orrs	r2, r1
 8007068:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	0c1b      	lsrs	r3, r3, #16
 8007070:	f003 0104 	and.w	r1, r3, #4
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007078:	f003 0210 	and.w	r2, r3, #16
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	430a      	orrs	r2, r1
 8007082:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	69da      	ldr	r2, [r3, #28]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007092:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e01a      	b.n	80070f4 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2202      	movs	r2, #2
 80070c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070d4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7fb f8b2 	bl	8002240 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3708      	adds	r7, #8
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b088      	sub	sp, #32
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	603b      	str	r3, [r7, #0]
 8007108:	4613      	mov	r3, r2
 800710a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800710c:	2300      	movs	r3, #0
 800710e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007116:	2b01      	cmp	r3, #1
 8007118:	d101      	bne.n	800711e <HAL_SPI_Transmit+0x22>
 800711a:	2302      	movs	r3, #2
 800711c:	e126      	b.n	800736c <HAL_SPI_Transmit+0x270>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2201      	movs	r2, #1
 8007122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007126:	f7fd f899 	bl	800425c <HAL_GetTick>
 800712a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800712c:	88fb      	ldrh	r3, [r7, #6]
 800712e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b01      	cmp	r3, #1
 800713a:	d002      	beq.n	8007142 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800713c:	2302      	movs	r3, #2
 800713e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007140:	e10b      	b.n	800735a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <HAL_SPI_Transmit+0x52>
 8007148:	88fb      	ldrh	r3, [r7, #6]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d102      	bne.n	8007154 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007152:	e102      	b.n	800735a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2203      	movs	r2, #3
 8007158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	88fa      	ldrh	r2, [r7, #6]
 800716c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	88fa      	ldrh	r2, [r7, #6]
 8007172:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2200      	movs	r2, #0
 800718a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800719a:	d10f      	bne.n	80071bc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c6:	2b40      	cmp	r3, #64	; 0x40
 80071c8:	d007      	beq.n	80071da <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071e2:	d14b      	bne.n	800727c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d002      	beq.n	80071f2 <HAL_SPI_Transmit+0xf6>
 80071ec:	8afb      	ldrh	r3, [r7, #22]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d13e      	bne.n	8007270 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f6:	881a      	ldrh	r2, [r3, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007202:	1c9a      	adds	r2, r3, #2
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800720c:	b29b      	uxth	r3, r3
 800720e:	3b01      	subs	r3, #1
 8007210:	b29a      	uxth	r2, r3
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007216:	e02b      	b.n	8007270 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f003 0302 	and.w	r3, r3, #2
 8007222:	2b02      	cmp	r3, #2
 8007224:	d112      	bne.n	800724c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722a:	881a      	ldrh	r2, [r3, #0]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007236:	1c9a      	adds	r2, r3, #2
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007240:	b29b      	uxth	r3, r3
 8007242:	3b01      	subs	r3, #1
 8007244:	b29a      	uxth	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	86da      	strh	r2, [r3, #54]	; 0x36
 800724a:	e011      	b.n	8007270 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800724c:	f7fd f806 	bl	800425c <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	683a      	ldr	r2, [r7, #0]
 8007258:	429a      	cmp	r2, r3
 800725a:	d803      	bhi.n	8007264 <HAL_SPI_Transmit+0x168>
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007262:	d102      	bne.n	800726a <HAL_SPI_Transmit+0x16e>
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d102      	bne.n	8007270 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800726e:	e074      	b.n	800735a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007274:	b29b      	uxth	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1ce      	bne.n	8007218 <HAL_SPI_Transmit+0x11c>
 800727a:	e04c      	b.n	8007316 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <HAL_SPI_Transmit+0x18e>
 8007284:	8afb      	ldrh	r3, [r7, #22]
 8007286:	2b01      	cmp	r3, #1
 8007288:	d140      	bne.n	800730c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	330c      	adds	r3, #12
 8007294:	7812      	ldrb	r2, [r2, #0]
 8007296:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729c:	1c5a      	adds	r2, r3, #1
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	3b01      	subs	r3, #1
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80072b0:	e02c      	b.n	800730c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f003 0302 	and.w	r3, r3, #2
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d113      	bne.n	80072e8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	330c      	adds	r3, #12
 80072ca:	7812      	ldrb	r2, [r2, #0]
 80072cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d2:	1c5a      	adds	r2, r3, #1
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072dc:	b29b      	uxth	r3, r3
 80072de:	3b01      	subs	r3, #1
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	86da      	strh	r2, [r3, #54]	; 0x36
 80072e6:	e011      	b.n	800730c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072e8:	f7fc ffb8 	bl	800425c <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	683a      	ldr	r2, [r7, #0]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d803      	bhi.n	8007300 <HAL_SPI_Transmit+0x204>
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fe:	d102      	bne.n	8007306 <HAL_SPI_Transmit+0x20a>
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d102      	bne.n	800730c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	77fb      	strb	r3, [r7, #31]
          goto error;
 800730a:	e026      	b.n	800735a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007310:	b29b      	uxth	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1cd      	bne.n	80072b2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007316:	69ba      	ldr	r2, [r7, #24]
 8007318:	6839      	ldr	r1, [r7, #0]
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f000 fbda 	bl	8007ad4 <SPI_EndRxTxTransaction>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d002      	beq.n	800732c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2220      	movs	r2, #32
 800732a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10a      	bne.n	800734a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007334:	2300      	movs	r3, #0
 8007336:	613b      	str	r3, [r7, #16]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	613b      	str	r3, [r7, #16]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	613b      	str	r3, [r7, #16]
 8007348:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734e:	2b00      	cmp	r3, #0
 8007350:	d002      	beq.n	8007358 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	77fb      	strb	r3, [r7, #31]
 8007356:	e000      	b.n	800735a <HAL_SPI_Transmit+0x25e>
  }

error:
 8007358:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2201      	movs	r2, #1
 800735e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800736a:	7ffb      	ldrb	r3, [r7, #31]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3720      	adds	r7, #32
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b088      	sub	sp, #32
 8007378:	af02      	add	r7, sp, #8
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	603b      	str	r3, [r7, #0]
 8007380:	4613      	mov	r3, r2
 8007382:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007384:	2300      	movs	r3, #0
 8007386:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007390:	d112      	bne.n	80073b8 <HAL_SPI_Receive+0x44>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10e      	bne.n	80073b8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2204      	movs	r2, #4
 800739e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80073a2:	88fa      	ldrh	r2, [r7, #6]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	4613      	mov	r3, r2
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	68b9      	ldr	r1, [r7, #8]
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f000 f8f1 	bl	8007596 <HAL_SPI_TransmitReceive>
 80073b4:	4603      	mov	r3, r0
 80073b6:	e0ea      	b.n	800758e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d101      	bne.n	80073c6 <HAL_SPI_Receive+0x52>
 80073c2:	2302      	movs	r3, #2
 80073c4:	e0e3      	b.n	800758e <HAL_SPI_Receive+0x21a>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2201      	movs	r2, #1
 80073ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073ce:	f7fc ff45 	bl	800425c <HAL_GetTick>
 80073d2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d002      	beq.n	80073e6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80073e0:	2302      	movs	r3, #2
 80073e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80073e4:	e0ca      	b.n	800757c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d002      	beq.n	80073f2 <HAL_SPI_Receive+0x7e>
 80073ec:	88fb      	ldrh	r3, [r7, #6]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d102      	bne.n	80073f8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80073f6:	e0c1      	b.n	800757c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2204      	movs	r2, #4
 80073fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	88fa      	ldrh	r2, [r7, #6]
 8007410:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	88fa      	ldrh	r2, [r7, #6]
 8007416:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2200      	movs	r2, #0
 800741c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800743e:	d10f      	bne.n	8007460 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800744e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800745e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746a:	2b40      	cmp	r3, #64	; 0x40
 800746c:	d007      	beq.n	800747e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800747c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d162      	bne.n	800754c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007486:	e02e      	b.n	80074e6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	2b01      	cmp	r3, #1
 8007494:	d115      	bne.n	80074c2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f103 020c 	add.w	r2, r3, #12
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a2:	7812      	ldrb	r2, [r2, #0]
 80074a4:	b2d2      	uxtb	r2, r2
 80074a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ac:	1c5a      	adds	r2, r3, #1
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	3b01      	subs	r3, #1
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80074c0:	e011      	b.n	80074e6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074c2:	f7fc fecb 	bl	800425c <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	683a      	ldr	r2, [r7, #0]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d803      	bhi.n	80074da <HAL_SPI_Receive+0x166>
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d8:	d102      	bne.n	80074e0 <HAL_SPI_Receive+0x16c>
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d102      	bne.n	80074e6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80074e4:	e04a      	b.n	800757c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1cb      	bne.n	8007488 <HAL_SPI_Receive+0x114>
 80074f0:	e031      	b.n	8007556 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	f003 0301 	and.w	r3, r3, #1
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d113      	bne.n	8007528 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68da      	ldr	r2, [r3, #12]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750a:	b292      	uxth	r2, r2
 800750c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007512:	1c9a      	adds	r2, r3, #2
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800751c:	b29b      	uxth	r3, r3
 800751e:	3b01      	subs	r3, #1
 8007520:	b29a      	uxth	r2, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007526:	e011      	b.n	800754c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007528:	f7fc fe98 	bl	800425c <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	429a      	cmp	r2, r3
 8007536:	d803      	bhi.n	8007540 <HAL_SPI_Receive+0x1cc>
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800753e:	d102      	bne.n	8007546 <HAL_SPI_Receive+0x1d2>
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d102      	bne.n	800754c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	75fb      	strb	r3, [r7, #23]
          goto error;
 800754a:	e017      	b.n	800757c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007550:	b29b      	uxth	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1cd      	bne.n	80074f2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	6839      	ldr	r1, [r7, #0]
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f000 fa54 	bl	8007a08 <SPI_EndRxTransaction>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d002      	beq.n	800756c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2220      	movs	r2, #32
 800756a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007570:	2b00      	cmp	r3, #0
 8007572:	d002      	beq.n	800757a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	75fb      	strb	r3, [r7, #23]
 8007578:	e000      	b.n	800757c <HAL_SPI_Receive+0x208>
  }

error :
 800757a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800758c:	7dfb      	ldrb	r3, [r7, #23]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3718      	adds	r7, #24
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b08c      	sub	sp, #48	; 0x30
 800759a:	af00      	add	r7, sp, #0
 800759c:	60f8      	str	r0, [r7, #12]
 800759e:	60b9      	str	r1, [r7, #8]
 80075a0:	607a      	str	r2, [r7, #4]
 80075a2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80075a4:	2301      	movs	r3, #1
 80075a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80075a8:	2300      	movs	r3, #0
 80075aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d101      	bne.n	80075bc <HAL_SPI_TransmitReceive+0x26>
 80075b8:	2302      	movs	r3, #2
 80075ba:	e18a      	b.n	80078d2 <HAL_SPI_TransmitReceive+0x33c>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075c4:	f7fc fe4a 	bl	800425c <HAL_GetTick>
 80075c8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80075da:	887b      	ldrh	r3, [r7, #2]
 80075dc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80075de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d00f      	beq.n	8007606 <HAL_SPI_TransmitReceive+0x70>
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075ec:	d107      	bne.n	80075fe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d103      	bne.n	80075fe <HAL_SPI_TransmitReceive+0x68>
 80075f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075fa:	2b04      	cmp	r3, #4
 80075fc:	d003      	beq.n	8007606 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80075fe:	2302      	movs	r3, #2
 8007600:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007604:	e15b      	b.n	80078be <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d005      	beq.n	8007618 <HAL_SPI_TransmitReceive+0x82>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d002      	beq.n	8007618 <HAL_SPI_TransmitReceive+0x82>
 8007612:	887b      	ldrh	r3, [r7, #2]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d103      	bne.n	8007620 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800761e:	e14e      	b.n	80078be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007626:	b2db      	uxtb	r3, r3
 8007628:	2b04      	cmp	r3, #4
 800762a:	d003      	beq.n	8007634 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2205      	movs	r2, #5
 8007630:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	887a      	ldrh	r2, [r7, #2]
 8007644:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	887a      	ldrh	r2, [r7, #2]
 800764a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	887a      	ldrh	r2, [r7, #2]
 8007656:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	887a      	ldrh	r2, [r7, #2]
 800765c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007674:	2b40      	cmp	r3, #64	; 0x40
 8007676:	d007      	beq.n	8007688 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007686:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007690:	d178      	bne.n	8007784 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d002      	beq.n	80076a0 <HAL_SPI_TransmitReceive+0x10a>
 800769a:	8b7b      	ldrh	r3, [r7, #26]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d166      	bne.n	800776e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a4:	881a      	ldrh	r2, [r3, #0]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b0:	1c9a      	adds	r2, r3, #2
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	3b01      	subs	r3, #1
 80076be:	b29a      	uxth	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076c4:	e053      	b.n	800776e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f003 0302 	and.w	r3, r3, #2
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d11b      	bne.n	800770c <HAL_SPI_TransmitReceive+0x176>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076d8:	b29b      	uxth	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d016      	beq.n	800770c <HAL_SPI_TransmitReceive+0x176>
 80076de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d113      	bne.n	800770c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e8:	881a      	ldrh	r2, [r3, #0]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f4:	1c9a      	adds	r2, r3, #2
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076fe:	b29b      	uxth	r3, r3
 8007700:	3b01      	subs	r3, #1
 8007702:	b29a      	uxth	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007708:	2300      	movs	r3, #0
 800770a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	2b01      	cmp	r3, #1
 8007718:	d119      	bne.n	800774e <HAL_SPI_TransmitReceive+0x1b8>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800771e:	b29b      	uxth	r3, r3
 8007720:	2b00      	cmp	r3, #0
 8007722:	d014      	beq.n	800774e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68da      	ldr	r2, [r3, #12]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772e:	b292      	uxth	r2, r2
 8007730:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007736:	1c9a      	adds	r2, r3, #2
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007740:	b29b      	uxth	r3, r3
 8007742:	3b01      	subs	r3, #1
 8007744:	b29a      	uxth	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800774a:	2301      	movs	r3, #1
 800774c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800774e:	f7fc fd85 	bl	800425c <HAL_GetTick>
 8007752:	4602      	mov	r2, r0
 8007754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800775a:	429a      	cmp	r2, r3
 800775c:	d807      	bhi.n	800776e <HAL_SPI_TransmitReceive+0x1d8>
 800775e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007764:	d003      	beq.n	800776e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800776c:	e0a7      	b.n	80078be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007772:	b29b      	uxth	r3, r3
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1a6      	bne.n	80076c6 <HAL_SPI_TransmitReceive+0x130>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800777c:	b29b      	uxth	r3, r3
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1a1      	bne.n	80076c6 <HAL_SPI_TransmitReceive+0x130>
 8007782:	e07c      	b.n	800787e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d002      	beq.n	8007792 <HAL_SPI_TransmitReceive+0x1fc>
 800778c:	8b7b      	ldrh	r3, [r7, #26]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d16b      	bne.n	800786a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	330c      	adds	r3, #12
 800779c:	7812      	ldrb	r2, [r2, #0]
 800779e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a4:	1c5a      	adds	r2, r3, #1
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	3b01      	subs	r3, #1
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077b8:	e057      	b.n	800786a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	f003 0302 	and.w	r3, r3, #2
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d11c      	bne.n	8007802 <HAL_SPI_TransmitReceive+0x26c>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d017      	beq.n	8007802 <HAL_SPI_TransmitReceive+0x26c>
 80077d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d114      	bne.n	8007802 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	330c      	adds	r3, #12
 80077e2:	7812      	ldrb	r2, [r2, #0]
 80077e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ea:	1c5a      	adds	r2, r3, #1
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	3b01      	subs	r3, #1
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077fe:	2300      	movs	r3, #0
 8007800:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	2b01      	cmp	r3, #1
 800780e:	d119      	bne.n	8007844 <HAL_SPI_TransmitReceive+0x2ae>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007814:	b29b      	uxth	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	d014      	beq.n	8007844 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68da      	ldr	r2, [r3, #12]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007824:	b2d2      	uxtb	r2, r2
 8007826:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782c:	1c5a      	adds	r2, r3, #1
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007836:	b29b      	uxth	r3, r3
 8007838:	3b01      	subs	r3, #1
 800783a:	b29a      	uxth	r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007840:	2301      	movs	r3, #1
 8007842:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007844:	f7fc fd0a 	bl	800425c <HAL_GetTick>
 8007848:	4602      	mov	r2, r0
 800784a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007850:	429a      	cmp	r2, r3
 8007852:	d803      	bhi.n	800785c <HAL_SPI_TransmitReceive+0x2c6>
 8007854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785a:	d102      	bne.n	8007862 <HAL_SPI_TransmitReceive+0x2cc>
 800785c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785e:	2b00      	cmp	r3, #0
 8007860:	d103      	bne.n	800786a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007868:	e029      	b.n	80078be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800786e:	b29b      	uxth	r3, r3
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1a2      	bne.n	80077ba <HAL_SPI_TransmitReceive+0x224>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007878:	b29b      	uxth	r3, r3
 800787a:	2b00      	cmp	r3, #0
 800787c:	d19d      	bne.n	80077ba <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800787e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007880:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f000 f926 	bl	8007ad4 <SPI_EndRxTxTransaction>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d006      	beq.n	800789c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2220      	movs	r2, #32
 8007898:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800789a:	e010      	b.n	80078be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10b      	bne.n	80078bc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078a4:	2300      	movs	r3, #0
 80078a6:	617b      	str	r3, [r7, #20]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	617b      	str	r3, [r7, #20]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	617b      	str	r3, [r7, #20]
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	e000      	b.n	80078be <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80078bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80078ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3730      	adds	r7, #48	; 0x30
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80078da:	b480      	push	{r7}
 80078dc:	b083      	sub	sp, #12
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078e8:	b2db      	uxtb	r3, r3
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
	...

080078f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b088      	sub	sp, #32
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	603b      	str	r3, [r7, #0]
 8007904:	4613      	mov	r3, r2
 8007906:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007908:	f7fc fca8 	bl	800425c <HAL_GetTick>
 800790c:	4602      	mov	r2, r0
 800790e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007910:	1a9b      	subs	r3, r3, r2
 8007912:	683a      	ldr	r2, [r7, #0]
 8007914:	4413      	add	r3, r2
 8007916:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007918:	f7fc fca0 	bl	800425c <HAL_GetTick>
 800791c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800791e:	4b39      	ldr	r3, [pc, #228]	; (8007a04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	015b      	lsls	r3, r3, #5
 8007924:	0d1b      	lsrs	r3, r3, #20
 8007926:	69fa      	ldr	r2, [r7, #28]
 8007928:	fb02 f303 	mul.w	r3, r2, r3
 800792c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800792e:	e054      	b.n	80079da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007936:	d050      	beq.n	80079da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007938:	f7fc fc90 	bl	800425c <HAL_GetTick>
 800793c:	4602      	mov	r2, r0
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	69fa      	ldr	r2, [r7, #28]
 8007944:	429a      	cmp	r2, r3
 8007946:	d902      	bls.n	800794e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d13d      	bne.n	80079ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685a      	ldr	r2, [r3, #4]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800795c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007966:	d111      	bne.n	800798c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007970:	d004      	beq.n	800797c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800797a:	d107      	bne.n	800798c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800798a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007994:	d10f      	bne.n	80079b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079a4:	601a      	str	r2, [r3, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80079c6:	2303      	movs	r3, #3
 80079c8:	e017      	b.n	80079fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80079d0:	2300      	movs	r3, #0
 80079d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	3b01      	subs	r3, #1
 80079d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	689a      	ldr	r2, [r3, #8]
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	4013      	ands	r3, r2
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	bf0c      	ite	eq
 80079ea:	2301      	moveq	r3, #1
 80079ec:	2300      	movne	r3, #0
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	461a      	mov	r2, r3
 80079f2:	79fb      	ldrb	r3, [r7, #7]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d19b      	bne.n	8007930 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3720      	adds	r7, #32
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	20000010 	.word	0x20000010

08007a08 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af02      	add	r7, sp, #8
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a1c:	d111      	bne.n	8007a42 <SPI_EndRxTransaction+0x3a>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a26:	d004      	beq.n	8007a32 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a30:	d107      	bne.n	8007a42 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a40:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a4a:	d12a      	bne.n	8007aa2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a54:	d012      	beq.n	8007a7c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	2180      	movs	r1, #128	; 0x80
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f7ff ff49 	bl	80078f8 <SPI_WaitFlagStateUntilTimeout>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d02d      	beq.n	8007ac8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a70:	f043 0220 	orr.w	r2, r3, #32
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e026      	b.n	8007aca <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2200      	movs	r2, #0
 8007a84:	2101      	movs	r1, #1
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f7ff ff36 	bl	80078f8 <SPI_WaitFlagStateUntilTimeout>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d01a      	beq.n	8007ac8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a96:	f043 0220 	orr.w	r2, r3, #32
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e013      	b.n	8007aca <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	9300      	str	r3, [sp, #0]
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	2101      	movs	r1, #1
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f7ff ff23 	bl	80078f8 <SPI_WaitFlagStateUntilTimeout>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d007      	beq.n	8007ac8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007abc:	f043 0220 	orr.w	r2, r3, #32
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e000      	b.n	8007aca <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
	...

08007ad4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b088      	sub	sp, #32
 8007ad8:	af02      	add	r7, sp, #8
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007ae0:	4b1b      	ldr	r3, [pc, #108]	; (8007b50 <SPI_EndRxTxTransaction+0x7c>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a1b      	ldr	r2, [pc, #108]	; (8007b54 <SPI_EndRxTxTransaction+0x80>)
 8007ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aea:	0d5b      	lsrs	r3, r3, #21
 8007aec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007af0:	fb02 f303 	mul.w	r3, r2, r3
 8007af4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007afe:	d112      	bne.n	8007b26 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	9300      	str	r3, [sp, #0]
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2200      	movs	r2, #0
 8007b08:	2180      	movs	r1, #128	; 0x80
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f7ff fef4 	bl	80078f8 <SPI_WaitFlagStateUntilTimeout>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d016      	beq.n	8007b44 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b1a:	f043 0220 	orr.w	r2, r3, #32
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e00f      	b.n	8007b46 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00a      	beq.n	8007b42 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b3c:	2b80      	cmp	r3, #128	; 0x80
 8007b3e:	d0f2      	beq.n	8007b26 <SPI_EndRxTxTransaction+0x52>
 8007b40:	e000      	b.n	8007b44 <SPI_EndRxTxTransaction+0x70>
        break;
 8007b42:	bf00      	nop
  }

  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3718      	adds	r7, #24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	20000010 	.word	0x20000010
 8007b54:	165e9f81 	.word	0x165e9f81

08007b58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d101      	bne.n	8007b6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e041      	b.n	8007bee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d106      	bne.n	8007b84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f7fa fb7c 	bl	800227c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2202      	movs	r2, #2
 8007b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	3304      	adds	r3, #4
 8007b94:	4619      	mov	r1, r3
 8007b96:	4610      	mov	r0, r2
 8007b98:	f000 fa96 	bl	80080c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3708      	adds	r7, #8
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
	...

08007bf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d001      	beq.n	8007c10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e04e      	b.n	8007cae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2202      	movs	r2, #2
 8007c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68da      	ldr	r2, [r3, #12]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f042 0201 	orr.w	r2, r2, #1
 8007c26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a23      	ldr	r2, [pc, #140]	; (8007cbc <HAL_TIM_Base_Start_IT+0xc4>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d022      	beq.n	8007c78 <HAL_TIM_Base_Start_IT+0x80>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c3a:	d01d      	beq.n	8007c78 <HAL_TIM_Base_Start_IT+0x80>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a1f      	ldr	r2, [pc, #124]	; (8007cc0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d018      	beq.n	8007c78 <HAL_TIM_Base_Start_IT+0x80>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a1e      	ldr	r2, [pc, #120]	; (8007cc4 <HAL_TIM_Base_Start_IT+0xcc>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d013      	beq.n	8007c78 <HAL_TIM_Base_Start_IT+0x80>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a1c      	ldr	r2, [pc, #112]	; (8007cc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d00e      	beq.n	8007c78 <HAL_TIM_Base_Start_IT+0x80>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a1b      	ldr	r2, [pc, #108]	; (8007ccc <HAL_TIM_Base_Start_IT+0xd4>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d009      	beq.n	8007c78 <HAL_TIM_Base_Start_IT+0x80>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a19      	ldr	r2, [pc, #100]	; (8007cd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d004      	beq.n	8007c78 <HAL_TIM_Base_Start_IT+0x80>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a18      	ldr	r2, [pc, #96]	; (8007cd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d111      	bne.n	8007c9c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	f003 0307 	and.w	r3, r3, #7
 8007c82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2b06      	cmp	r3, #6
 8007c88:	d010      	beq.n	8007cac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f042 0201 	orr.w	r2, r2, #1
 8007c98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c9a:	e007      	b.n	8007cac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f042 0201 	orr.w	r2, r2, #1
 8007caa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3714      	adds	r7, #20
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	40010000 	.word	0x40010000
 8007cc0:	40000400 	.word	0x40000400
 8007cc4:	40000800 	.word	0x40000800
 8007cc8:	40000c00 	.word	0x40000c00
 8007ccc:	40010400 	.word	0x40010400
 8007cd0:	40014000 	.word	0x40014000
 8007cd4:	40001800 	.word	0x40001800

08007cd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	f003 0302 	and.w	r3, r3, #2
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d122      	bne.n	8007d34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	f003 0302 	and.w	r3, r3, #2
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d11b      	bne.n	8007d34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f06f 0202 	mvn.w	r2, #2
 8007d04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	f003 0303 	and.w	r3, r3, #3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d003      	beq.n	8007d22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f9b5 	bl	800808a <HAL_TIM_IC_CaptureCallback>
 8007d20:	e005      	b.n	8007d2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f9a7 	bl	8008076 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f9b8 	bl	800809e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	f003 0304 	and.w	r3, r3, #4
 8007d3e:	2b04      	cmp	r3, #4
 8007d40:	d122      	bne.n	8007d88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	f003 0304 	and.w	r3, r3, #4
 8007d4c:	2b04      	cmp	r3, #4
 8007d4e:	d11b      	bne.n	8007d88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f06f 0204 	mvn.w	r2, #4
 8007d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2202      	movs	r2, #2
 8007d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d003      	beq.n	8007d76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f98b 	bl	800808a <HAL_TIM_IC_CaptureCallback>
 8007d74:	e005      	b.n	8007d82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f97d 	bl	8008076 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f98e 	bl	800809e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	f003 0308 	and.w	r3, r3, #8
 8007d92:	2b08      	cmp	r3, #8
 8007d94:	d122      	bne.n	8007ddc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	f003 0308 	and.w	r3, r3, #8
 8007da0:	2b08      	cmp	r3, #8
 8007da2:	d11b      	bne.n	8007ddc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f06f 0208 	mvn.w	r2, #8
 8007dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2204      	movs	r2, #4
 8007db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	f003 0303 	and.w	r3, r3, #3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d003      	beq.n	8007dca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f961 	bl	800808a <HAL_TIM_IC_CaptureCallback>
 8007dc8:	e005      	b.n	8007dd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f953 	bl	8008076 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f964 	bl	800809e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	f003 0310 	and.w	r3, r3, #16
 8007de6:	2b10      	cmp	r3, #16
 8007de8:	d122      	bne.n	8007e30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	f003 0310 	and.w	r3, r3, #16
 8007df4:	2b10      	cmp	r3, #16
 8007df6:	d11b      	bne.n	8007e30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f06f 0210 	mvn.w	r2, #16
 8007e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2208      	movs	r2, #8
 8007e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	69db      	ldr	r3, [r3, #28]
 8007e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d003      	beq.n	8007e1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f937 	bl	800808a <HAL_TIM_IC_CaptureCallback>
 8007e1c:	e005      	b.n	8007e2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f929 	bl	8008076 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f93a 	bl	800809e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	f003 0301 	and.w	r3, r3, #1
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d10e      	bne.n	8007e5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	f003 0301 	and.w	r3, r3, #1
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d107      	bne.n	8007e5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f06f 0201 	mvn.w	r2, #1
 8007e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f7f9 ff82 	bl	8001d60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e66:	2b80      	cmp	r3, #128	; 0x80
 8007e68:	d10e      	bne.n	8007e88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e74:	2b80      	cmp	r3, #128	; 0x80
 8007e76:	d107      	bne.n	8007e88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fae0 	bl	8008448 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e92:	2b40      	cmp	r3, #64	; 0x40
 8007e94:	d10e      	bne.n	8007eb4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea0:	2b40      	cmp	r3, #64	; 0x40
 8007ea2:	d107      	bne.n	8007eb4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f8ff 	bl	80080b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	f003 0320 	and.w	r3, r3, #32
 8007ebe:	2b20      	cmp	r3, #32
 8007ec0:	d10e      	bne.n	8007ee0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	f003 0320 	and.w	r3, r3, #32
 8007ecc:	2b20      	cmp	r3, #32
 8007ece:	d107      	bne.n	8007ee0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f06f 0220 	mvn.w	r2, #32
 8007ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 faaa 	bl	8008434 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ee0:	bf00      	nop
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d101      	bne.n	8007f04 <HAL_TIM_ConfigClockSource+0x1c>
 8007f00:	2302      	movs	r3, #2
 8007f02:	e0b4      	b.n	800806e <HAL_TIM_ConfigClockSource+0x186>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2202      	movs	r2, #2
 8007f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007f22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f3c:	d03e      	beq.n	8007fbc <HAL_TIM_ConfigClockSource+0xd4>
 8007f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f42:	f200 8087 	bhi.w	8008054 <HAL_TIM_ConfigClockSource+0x16c>
 8007f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f4a:	f000 8086 	beq.w	800805a <HAL_TIM_ConfigClockSource+0x172>
 8007f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f52:	d87f      	bhi.n	8008054 <HAL_TIM_ConfigClockSource+0x16c>
 8007f54:	2b70      	cmp	r3, #112	; 0x70
 8007f56:	d01a      	beq.n	8007f8e <HAL_TIM_ConfigClockSource+0xa6>
 8007f58:	2b70      	cmp	r3, #112	; 0x70
 8007f5a:	d87b      	bhi.n	8008054 <HAL_TIM_ConfigClockSource+0x16c>
 8007f5c:	2b60      	cmp	r3, #96	; 0x60
 8007f5e:	d050      	beq.n	8008002 <HAL_TIM_ConfigClockSource+0x11a>
 8007f60:	2b60      	cmp	r3, #96	; 0x60
 8007f62:	d877      	bhi.n	8008054 <HAL_TIM_ConfigClockSource+0x16c>
 8007f64:	2b50      	cmp	r3, #80	; 0x50
 8007f66:	d03c      	beq.n	8007fe2 <HAL_TIM_ConfigClockSource+0xfa>
 8007f68:	2b50      	cmp	r3, #80	; 0x50
 8007f6a:	d873      	bhi.n	8008054 <HAL_TIM_ConfigClockSource+0x16c>
 8007f6c:	2b40      	cmp	r3, #64	; 0x40
 8007f6e:	d058      	beq.n	8008022 <HAL_TIM_ConfigClockSource+0x13a>
 8007f70:	2b40      	cmp	r3, #64	; 0x40
 8007f72:	d86f      	bhi.n	8008054 <HAL_TIM_ConfigClockSource+0x16c>
 8007f74:	2b30      	cmp	r3, #48	; 0x30
 8007f76:	d064      	beq.n	8008042 <HAL_TIM_ConfigClockSource+0x15a>
 8007f78:	2b30      	cmp	r3, #48	; 0x30
 8007f7a:	d86b      	bhi.n	8008054 <HAL_TIM_ConfigClockSource+0x16c>
 8007f7c:	2b20      	cmp	r3, #32
 8007f7e:	d060      	beq.n	8008042 <HAL_TIM_ConfigClockSource+0x15a>
 8007f80:	2b20      	cmp	r3, #32
 8007f82:	d867      	bhi.n	8008054 <HAL_TIM_ConfigClockSource+0x16c>
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d05c      	beq.n	8008042 <HAL_TIM_ConfigClockSource+0x15a>
 8007f88:	2b10      	cmp	r3, #16
 8007f8a:	d05a      	beq.n	8008042 <HAL_TIM_ConfigClockSource+0x15a>
 8007f8c:	e062      	b.n	8008054 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6818      	ldr	r0, [r3, #0]
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	6899      	ldr	r1, [r3, #8]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	685a      	ldr	r2, [r3, #4]
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	f000 f9ad 	bl	80082fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007fb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68ba      	ldr	r2, [r7, #8]
 8007fb8:	609a      	str	r2, [r3, #8]
      break;
 8007fba:	e04f      	b.n	800805c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6818      	ldr	r0, [r3, #0]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	6899      	ldr	r1, [r3, #8]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	685a      	ldr	r2, [r3, #4]
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	f000 f996 	bl	80082fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	689a      	ldr	r2, [r3, #8]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fde:	609a      	str	r2, [r3, #8]
      break;
 8007fe0:	e03c      	b.n	800805c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6818      	ldr	r0, [r3, #0]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	6859      	ldr	r1, [r3, #4]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	f000 f90a 	bl	8008208 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2150      	movs	r1, #80	; 0x50
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 f963 	bl	80082c6 <TIM_ITRx_SetConfig>
      break;
 8008000:	e02c      	b.n	800805c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6818      	ldr	r0, [r3, #0]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	6859      	ldr	r1, [r3, #4]
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	461a      	mov	r2, r3
 8008010:	f000 f929 	bl	8008266 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2160      	movs	r1, #96	; 0x60
 800801a:	4618      	mov	r0, r3
 800801c:	f000 f953 	bl	80082c6 <TIM_ITRx_SetConfig>
      break;
 8008020:	e01c      	b.n	800805c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6818      	ldr	r0, [r3, #0]
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	6859      	ldr	r1, [r3, #4]
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	461a      	mov	r2, r3
 8008030:	f000 f8ea 	bl	8008208 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2140      	movs	r1, #64	; 0x40
 800803a:	4618      	mov	r0, r3
 800803c:	f000 f943 	bl	80082c6 <TIM_ITRx_SetConfig>
      break;
 8008040:	e00c      	b.n	800805c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4619      	mov	r1, r3
 800804c:	4610      	mov	r0, r2
 800804e:	f000 f93a 	bl	80082c6 <TIM_ITRx_SetConfig>
      break;
 8008052:	e003      	b.n	800805c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	73fb      	strb	r3, [r7, #15]
      break;
 8008058:	e000      	b.n	800805c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800805a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800806c:	7bfb      	ldrb	r3, [r7, #15]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008076:	b480      	push	{r7}
 8008078:	b083      	sub	sp, #12
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800807e:	bf00      	nop
 8008080:	370c      	adds	r7, #12
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800808a:	b480      	push	{r7}
 800808c:	b083      	sub	sp, #12
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008092:	bf00      	nop
 8008094:	370c      	adds	r7, #12
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800809e:	b480      	push	{r7}
 80080a0:	b083      	sub	sp, #12
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080a6:	bf00      	nop
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr

080080b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b083      	sub	sp, #12
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080ba:	bf00      	nop
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
	...

080080c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a40      	ldr	r2, [pc, #256]	; (80081dc <TIM_Base_SetConfig+0x114>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d013      	beq.n	8008108 <TIM_Base_SetConfig+0x40>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080e6:	d00f      	beq.n	8008108 <TIM_Base_SetConfig+0x40>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a3d      	ldr	r2, [pc, #244]	; (80081e0 <TIM_Base_SetConfig+0x118>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d00b      	beq.n	8008108 <TIM_Base_SetConfig+0x40>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a3c      	ldr	r2, [pc, #240]	; (80081e4 <TIM_Base_SetConfig+0x11c>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d007      	beq.n	8008108 <TIM_Base_SetConfig+0x40>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a3b      	ldr	r2, [pc, #236]	; (80081e8 <TIM_Base_SetConfig+0x120>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d003      	beq.n	8008108 <TIM_Base_SetConfig+0x40>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a3a      	ldr	r2, [pc, #232]	; (80081ec <TIM_Base_SetConfig+0x124>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d108      	bne.n	800811a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800810e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	4313      	orrs	r3, r2
 8008118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a2f      	ldr	r2, [pc, #188]	; (80081dc <TIM_Base_SetConfig+0x114>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d02b      	beq.n	800817a <TIM_Base_SetConfig+0xb2>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008128:	d027      	beq.n	800817a <TIM_Base_SetConfig+0xb2>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a2c      	ldr	r2, [pc, #176]	; (80081e0 <TIM_Base_SetConfig+0x118>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d023      	beq.n	800817a <TIM_Base_SetConfig+0xb2>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a2b      	ldr	r2, [pc, #172]	; (80081e4 <TIM_Base_SetConfig+0x11c>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d01f      	beq.n	800817a <TIM_Base_SetConfig+0xb2>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a2a      	ldr	r2, [pc, #168]	; (80081e8 <TIM_Base_SetConfig+0x120>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d01b      	beq.n	800817a <TIM_Base_SetConfig+0xb2>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a29      	ldr	r2, [pc, #164]	; (80081ec <TIM_Base_SetConfig+0x124>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d017      	beq.n	800817a <TIM_Base_SetConfig+0xb2>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a28      	ldr	r2, [pc, #160]	; (80081f0 <TIM_Base_SetConfig+0x128>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d013      	beq.n	800817a <TIM_Base_SetConfig+0xb2>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a27      	ldr	r2, [pc, #156]	; (80081f4 <TIM_Base_SetConfig+0x12c>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d00f      	beq.n	800817a <TIM_Base_SetConfig+0xb2>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a26      	ldr	r2, [pc, #152]	; (80081f8 <TIM_Base_SetConfig+0x130>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d00b      	beq.n	800817a <TIM_Base_SetConfig+0xb2>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a25      	ldr	r2, [pc, #148]	; (80081fc <TIM_Base_SetConfig+0x134>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d007      	beq.n	800817a <TIM_Base_SetConfig+0xb2>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a24      	ldr	r2, [pc, #144]	; (8008200 <TIM_Base_SetConfig+0x138>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d003      	beq.n	800817a <TIM_Base_SetConfig+0xb2>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a23      	ldr	r2, [pc, #140]	; (8008204 <TIM_Base_SetConfig+0x13c>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d108      	bne.n	800818c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	4313      	orrs	r3, r2
 800818a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	695b      	ldr	r3, [r3, #20]
 8008196:	4313      	orrs	r3, r2
 8008198:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	689a      	ldr	r2, [r3, #8]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a0a      	ldr	r2, [pc, #40]	; (80081dc <TIM_Base_SetConfig+0x114>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d003      	beq.n	80081c0 <TIM_Base_SetConfig+0xf8>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4a0c      	ldr	r2, [pc, #48]	; (80081ec <TIM_Base_SetConfig+0x124>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d103      	bne.n	80081c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	691a      	ldr	r2, [r3, #16]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	615a      	str	r2, [r3, #20]
}
 80081ce:	bf00      	nop
 80081d0:	3714      	adds	r7, #20
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	40010000 	.word	0x40010000
 80081e0:	40000400 	.word	0x40000400
 80081e4:	40000800 	.word	0x40000800
 80081e8:	40000c00 	.word	0x40000c00
 80081ec:	40010400 	.word	0x40010400
 80081f0:	40014000 	.word	0x40014000
 80081f4:	40014400 	.word	0x40014400
 80081f8:	40014800 	.word	0x40014800
 80081fc:	40001800 	.word	0x40001800
 8008200:	40001c00 	.word	0x40001c00
 8008204:	40002000 	.word	0x40002000

08008208 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008208:	b480      	push	{r7}
 800820a:	b087      	sub	sp, #28
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6a1b      	ldr	r3, [r3, #32]
 8008218:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6a1b      	ldr	r3, [r3, #32]
 800821e:	f023 0201 	bic.w	r2, r3, #1
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	699b      	ldr	r3, [r3, #24]
 800822a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008232:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	011b      	lsls	r3, r3, #4
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	4313      	orrs	r3, r2
 800823c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	f023 030a 	bic.w	r3, r3, #10
 8008244:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	4313      	orrs	r3, r2
 800824c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	693a      	ldr	r2, [r7, #16]
 8008252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	621a      	str	r2, [r3, #32]
}
 800825a:	bf00      	nop
 800825c:	371c      	adds	r7, #28
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr

08008266 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008266:	b480      	push	{r7}
 8008268:	b087      	sub	sp, #28
 800826a:	af00      	add	r7, sp, #0
 800826c:	60f8      	str	r0, [r7, #12]
 800826e:	60b9      	str	r1, [r7, #8]
 8008270:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	f023 0210 	bic.w	r2, r3, #16
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6a1b      	ldr	r3, [r3, #32]
 8008288:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008290:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	031b      	lsls	r3, r3, #12
 8008296:	697a      	ldr	r2, [r7, #20]
 8008298:	4313      	orrs	r3, r2
 800829a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80082a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	011b      	lsls	r3, r3, #4
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	697a      	ldr	r2, [r7, #20]
 80082b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	621a      	str	r2, [r3, #32]
}
 80082ba:	bf00      	nop
 80082bc:	371c      	adds	r7, #28
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr

080082c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80082c6:	b480      	push	{r7}
 80082c8:	b085      	sub	sp, #20
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	f043 0307 	orr.w	r3, r3, #7
 80082e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	609a      	str	r2, [r3, #8]
}
 80082f0:	bf00      	nop
 80082f2:	3714      	adds	r7, #20
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b087      	sub	sp, #28
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
 8008308:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008316:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	021a      	lsls	r2, r3, #8
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	431a      	orrs	r2, r3
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	4313      	orrs	r3, r2
 8008324:	697a      	ldr	r2, [r7, #20]
 8008326:	4313      	orrs	r3, r2
 8008328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	697a      	ldr	r2, [r7, #20]
 800832e:	609a      	str	r2, [r3, #8]
}
 8008330:	bf00      	nop
 8008332:	371c      	adds	r7, #28
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800834c:	2b01      	cmp	r3, #1
 800834e:	d101      	bne.n	8008354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008350:	2302      	movs	r3, #2
 8008352:	e05a      	b.n	800840a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2202      	movs	r2, #2
 8008360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800837a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	4313      	orrs	r3, r2
 8008384:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a21      	ldr	r2, [pc, #132]	; (8008418 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d022      	beq.n	80083de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083a0:	d01d      	beq.n	80083de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a1d      	ldr	r2, [pc, #116]	; (800841c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d018      	beq.n	80083de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a1b      	ldr	r2, [pc, #108]	; (8008420 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d013      	beq.n	80083de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a1a      	ldr	r2, [pc, #104]	; (8008424 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d00e      	beq.n	80083de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a18      	ldr	r2, [pc, #96]	; (8008428 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d009      	beq.n	80083de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a17      	ldr	r2, [pc, #92]	; (800842c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d004      	beq.n	80083de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a15      	ldr	r2, [pc, #84]	; (8008430 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d10c      	bne.n	80083f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	40010000 	.word	0x40010000
 800841c:	40000400 	.word	0x40000400
 8008420:	40000800 	.word	0x40000800
 8008424:	40000c00 	.word	0x40000c00
 8008428:	40010400 	.word	0x40010400
 800842c:	40014000 	.word	0x40014000
 8008430:	40001800 	.word	0x40001800

08008434 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008450:	bf00      	nop
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e03f      	b.n	80084ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b00      	cmp	r3, #0
 8008478:	d106      	bne.n	8008488 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7f9 ff1c 	bl	80022c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2224      	movs	r2, #36	; 0x24
 800848c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68da      	ldr	r2, [r3, #12]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800849e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 fd7b 	bl	8008f9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	691a      	ldr	r2, [r3, #16]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	695a      	ldr	r2, [r3, #20]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80084c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68da      	ldr	r2, [r3, #12]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2220      	movs	r2, #32
 80084e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2220      	movs	r2, #32
 80084e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3708      	adds	r7, #8
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b08a      	sub	sp, #40	; 0x28
 80084fa:	af02      	add	r7, sp, #8
 80084fc:	60f8      	str	r0, [r7, #12]
 80084fe:	60b9      	str	r1, [r7, #8]
 8008500:	603b      	str	r3, [r7, #0]
 8008502:	4613      	mov	r3, r2
 8008504:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008506:	2300      	movs	r3, #0
 8008508:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008510:	b2db      	uxtb	r3, r3
 8008512:	2b20      	cmp	r3, #32
 8008514:	d17c      	bne.n	8008610 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d002      	beq.n	8008522 <HAL_UART_Transmit+0x2c>
 800851c:	88fb      	ldrh	r3, [r7, #6]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d101      	bne.n	8008526 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e075      	b.n	8008612 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800852c:	2b01      	cmp	r3, #1
 800852e:	d101      	bne.n	8008534 <HAL_UART_Transmit+0x3e>
 8008530:	2302      	movs	r3, #2
 8008532:	e06e      	b.n	8008612 <HAL_UART_Transmit+0x11c>
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2221      	movs	r2, #33	; 0x21
 8008546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800854a:	f7fb fe87 	bl	800425c <HAL_GetTick>
 800854e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	88fa      	ldrh	r2, [r7, #6]
 8008554:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	88fa      	ldrh	r2, [r7, #6]
 800855a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008564:	d108      	bne.n	8008578 <HAL_UART_Transmit+0x82>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d104      	bne.n	8008578 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800856e:	2300      	movs	r3, #0
 8008570:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	61bb      	str	r3, [r7, #24]
 8008576:	e003      	b.n	8008580 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800857c:	2300      	movs	r3, #0
 800857e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008588:	e02a      	b.n	80085e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	9300      	str	r3, [sp, #0]
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	2200      	movs	r2, #0
 8008592:	2180      	movs	r1, #128	; 0x80
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f000 faf9 	bl	8008b8c <UART_WaitOnFlagUntilTimeout>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d001      	beq.n	80085a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e036      	b.n	8008612 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10b      	bne.n	80085c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	881b      	ldrh	r3, [r3, #0]
 80085ae:	461a      	mov	r2, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	3302      	adds	r3, #2
 80085be:	61bb      	str	r3, [r7, #24]
 80085c0:	e007      	b.n	80085d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	781a      	ldrb	r2, [r3, #0]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	3301      	adds	r3, #1
 80085d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	3b01      	subs	r3, #1
 80085da:	b29a      	uxth	r2, r3
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d1cf      	bne.n	800858a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	9300      	str	r3, [sp, #0]
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	2200      	movs	r2, #0
 80085f2:	2140      	movs	r1, #64	; 0x40
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f000 fac9 	bl	8008b8c <UART_WaitOnFlagUntilTimeout>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d001      	beq.n	8008604 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008600:	2303      	movs	r3, #3
 8008602:	e006      	b.n	8008612 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2220      	movs	r2, #32
 8008608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	e000      	b.n	8008612 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008610:	2302      	movs	r3, #2
  }
}
 8008612:	4618      	mov	r0, r3
 8008614:	3720      	adds	r7, #32
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
	...

0800861c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b0ba      	sub	sp, #232	; 0xe8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	695b      	ldr	r3, [r3, #20]
 800863e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008642:	2300      	movs	r3, #0
 8008644:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008648:	2300      	movs	r3, #0
 800864a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800864e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008652:	f003 030f 	and.w	r3, r3, #15
 8008656:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800865a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10f      	bne.n	8008682 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008666:	f003 0320 	and.w	r3, r3, #32
 800866a:	2b00      	cmp	r3, #0
 800866c:	d009      	beq.n	8008682 <HAL_UART_IRQHandler+0x66>
 800866e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008672:	f003 0320 	and.w	r3, r3, #32
 8008676:	2b00      	cmp	r3, #0
 8008678:	d003      	beq.n	8008682 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fbd3 	bl	8008e26 <UART_Receive_IT>
      return;
 8008680:	e256      	b.n	8008b30 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008682:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008686:	2b00      	cmp	r3, #0
 8008688:	f000 80de 	beq.w	8008848 <HAL_UART_IRQHandler+0x22c>
 800868c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008690:	f003 0301 	and.w	r3, r3, #1
 8008694:	2b00      	cmp	r3, #0
 8008696:	d106      	bne.n	80086a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800869c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f000 80d1 	beq.w	8008848 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80086a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086aa:	f003 0301 	and.w	r3, r3, #1
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00b      	beq.n	80086ca <HAL_UART_IRQHandler+0xae>
 80086b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d005      	beq.n	80086ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c2:	f043 0201 	orr.w	r2, r3, #1
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ce:	f003 0304 	and.w	r3, r3, #4
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00b      	beq.n	80086ee <HAL_UART_IRQHandler+0xd2>
 80086d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d005      	beq.n	80086ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e6:	f043 0202 	orr.w	r2, r3, #2
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086f2:	f003 0302 	and.w	r3, r3, #2
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00b      	beq.n	8008712 <HAL_UART_IRQHandler+0xf6>
 80086fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	2b00      	cmp	r3, #0
 8008704:	d005      	beq.n	8008712 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870a:	f043 0204 	orr.w	r2, r3, #4
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008716:	f003 0308 	and.w	r3, r3, #8
 800871a:	2b00      	cmp	r3, #0
 800871c:	d011      	beq.n	8008742 <HAL_UART_IRQHandler+0x126>
 800871e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008722:	f003 0320 	and.w	r3, r3, #32
 8008726:	2b00      	cmp	r3, #0
 8008728:	d105      	bne.n	8008736 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800872a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	2b00      	cmp	r3, #0
 8008734:	d005      	beq.n	8008742 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873a:	f043 0208 	orr.w	r2, r3, #8
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008746:	2b00      	cmp	r3, #0
 8008748:	f000 81ed 	beq.w	8008b26 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800874c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008750:	f003 0320 	and.w	r3, r3, #32
 8008754:	2b00      	cmp	r3, #0
 8008756:	d008      	beq.n	800876a <HAL_UART_IRQHandler+0x14e>
 8008758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800875c:	f003 0320 	and.w	r3, r3, #32
 8008760:	2b00      	cmp	r3, #0
 8008762:	d002      	beq.n	800876a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fb5e 	bl	8008e26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	695b      	ldr	r3, [r3, #20]
 8008770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008774:	2b40      	cmp	r3, #64	; 0x40
 8008776:	bf0c      	ite	eq
 8008778:	2301      	moveq	r3, #1
 800877a:	2300      	movne	r3, #0
 800877c:	b2db      	uxtb	r3, r3
 800877e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008786:	f003 0308 	and.w	r3, r3, #8
 800878a:	2b00      	cmp	r3, #0
 800878c:	d103      	bne.n	8008796 <HAL_UART_IRQHandler+0x17a>
 800878e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008792:	2b00      	cmp	r3, #0
 8008794:	d04f      	beq.n	8008836 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 fa66 	bl	8008c68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a6:	2b40      	cmp	r3, #64	; 0x40
 80087a8:	d141      	bne.n	800882e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	3314      	adds	r3, #20
 80087b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087b8:	e853 3f00 	ldrex	r3, [r3]
 80087bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80087c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	3314      	adds	r3, #20
 80087d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80087d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80087da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80087e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80087e6:	e841 2300 	strex	r3, r2, [r1]
 80087ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80087ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1d9      	bne.n	80087aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d013      	beq.n	8008826 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008802:	4a7d      	ldr	r2, [pc, #500]	; (80089f8 <HAL_UART_IRQHandler+0x3dc>)
 8008804:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880a:	4618      	mov	r0, r3
 800880c:	f7fb ffd0 	bl	80047b0 <HAL_DMA_Abort_IT>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d016      	beq.n	8008844 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008820:	4610      	mov	r0, r2
 8008822:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008824:	e00e      	b.n	8008844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f99a 	bl	8008b60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800882c:	e00a      	b.n	8008844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f996 	bl	8008b60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008834:	e006      	b.n	8008844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f992 	bl	8008b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008842:	e170      	b.n	8008b26 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008844:	bf00      	nop
    return;
 8008846:	e16e      	b.n	8008b26 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884c:	2b01      	cmp	r3, #1
 800884e:	f040 814a 	bne.w	8008ae6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008856:	f003 0310 	and.w	r3, r3, #16
 800885a:	2b00      	cmp	r3, #0
 800885c:	f000 8143 	beq.w	8008ae6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008864:	f003 0310 	and.w	r3, r3, #16
 8008868:	2b00      	cmp	r3, #0
 800886a:	f000 813c 	beq.w	8008ae6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800886e:	2300      	movs	r3, #0
 8008870:	60bb      	str	r3, [r7, #8]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	60bb      	str	r3, [r7, #8]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	60bb      	str	r3, [r7, #8]
 8008882:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800888e:	2b40      	cmp	r3, #64	; 0x40
 8008890:	f040 80b4 	bne.w	80089fc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80088a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f000 8140 	beq.w	8008b2a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80088ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088b2:	429a      	cmp	r2, r3
 80088b4:	f080 8139 	bcs.w	8008b2a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c4:	69db      	ldr	r3, [r3, #28]
 80088c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088ca:	f000 8088 	beq.w	80089de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	330c      	adds	r3, #12
 80088d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088dc:	e853 3f00 	ldrex	r3, [r3]
 80088e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80088e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	330c      	adds	r3, #12
 80088f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80088fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80088fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008902:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008906:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800890a:	e841 2300 	strex	r3, r2, [r1]
 800890e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008912:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1d9      	bne.n	80088ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	3314      	adds	r3, #20
 8008920:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008924:	e853 3f00 	ldrex	r3, [r3]
 8008928:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800892a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800892c:	f023 0301 	bic.w	r3, r3, #1
 8008930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	3314      	adds	r3, #20
 800893a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800893e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008942:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008944:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008946:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800894a:	e841 2300 	strex	r3, r2, [r1]
 800894e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1e1      	bne.n	800891a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	3314      	adds	r3, #20
 800895c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008960:	e853 3f00 	ldrex	r3, [r3]
 8008964:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800896c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	3314      	adds	r3, #20
 8008976:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800897a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800897c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008980:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008982:	e841 2300 	strex	r3, r2, [r1]
 8008986:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1e3      	bne.n	8008956 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2220      	movs	r2, #32
 8008992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	330c      	adds	r3, #12
 80089a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089a6:	e853 3f00 	ldrex	r3, [r3]
 80089aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80089ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089ae:	f023 0310 	bic.w	r3, r3, #16
 80089b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	330c      	adds	r3, #12
 80089bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80089c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80089c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089c8:	e841 2300 	strex	r3, r2, [r1]
 80089cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80089ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d1e3      	bne.n	800899c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d8:	4618      	mov	r0, r3
 80089da:	f7fb fe79 	bl	80046d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	4619      	mov	r1, r3
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 f8c0 	bl	8008b74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80089f4:	e099      	b.n	8008b2a <HAL_UART_IRQHandler+0x50e>
 80089f6:	bf00      	nop
 80089f8:	08008d2f 	.word	0x08008d2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f000 808b 	beq.w	8008b2e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008a18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 8086 	beq.w	8008b2e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	330c      	adds	r3, #12
 8008a28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2c:	e853 3f00 	ldrex	r3, [r3]
 8008a30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	330c      	adds	r3, #12
 8008a42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008a46:	647a      	str	r2, [r7, #68]	; 0x44
 8008a48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a4e:	e841 2300 	strex	r3, r2, [r1]
 8008a52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1e3      	bne.n	8008a22 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	3314      	adds	r3, #20
 8008a60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	e853 3f00 	ldrex	r3, [r3]
 8008a68:	623b      	str	r3, [r7, #32]
   return(result);
 8008a6a:	6a3b      	ldr	r3, [r7, #32]
 8008a6c:	f023 0301 	bic.w	r3, r3, #1
 8008a70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	3314      	adds	r3, #20
 8008a7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a7e:	633a      	str	r2, [r7, #48]	; 0x30
 8008a80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a86:	e841 2300 	strex	r3, r2, [r1]
 8008a8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1e3      	bne.n	8008a5a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2220      	movs	r2, #32
 8008a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	330c      	adds	r3, #12
 8008aa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	e853 3f00 	ldrex	r3, [r3]
 8008aae:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f023 0310 	bic.w	r3, r3, #16
 8008ab6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	330c      	adds	r3, #12
 8008ac0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008ac4:	61fa      	str	r2, [r7, #28]
 8008ac6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac8:	69b9      	ldr	r1, [r7, #24]
 8008aca:	69fa      	ldr	r2, [r7, #28]
 8008acc:	e841 2300 	strex	r3, r2, [r1]
 8008ad0:	617b      	str	r3, [r7, #20]
   return(result);
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1e3      	bne.n	8008aa0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ad8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008adc:	4619      	mov	r1, r3
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f848 	bl	8008b74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ae4:	e023      	b.n	8008b2e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d009      	beq.n	8008b06 <HAL_UART_IRQHandler+0x4ea>
 8008af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d003      	beq.n	8008b06 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f929 	bl	8008d56 <UART_Transmit_IT>
    return;
 8008b04:	e014      	b.n	8008b30 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00e      	beq.n	8008b30 <HAL_UART_IRQHandler+0x514>
 8008b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d008      	beq.n	8008b30 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f969 	bl	8008df6 <UART_EndTransmit_IT>
    return;
 8008b24:	e004      	b.n	8008b30 <HAL_UART_IRQHandler+0x514>
    return;
 8008b26:	bf00      	nop
 8008b28:	e002      	b.n	8008b30 <HAL_UART_IRQHandler+0x514>
      return;
 8008b2a:	bf00      	nop
 8008b2c:	e000      	b.n	8008b30 <HAL_UART_IRQHandler+0x514>
      return;
 8008b2e:	bf00      	nop
  }
}
 8008b30:	37e8      	adds	r7, #232	; 0xe8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop

08008b38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008b40:	bf00      	nop
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b68:	bf00      	nop
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b80:	bf00      	nop
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b090      	sub	sp, #64	; 0x40
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	603b      	str	r3, [r7, #0]
 8008b98:	4613      	mov	r3, r2
 8008b9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b9c:	e050      	b.n	8008c40 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba4:	d04c      	beq.n	8008c40 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d007      	beq.n	8008bbc <UART_WaitOnFlagUntilTimeout+0x30>
 8008bac:	f7fb fb56 	bl	800425c <HAL_GetTick>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	1ad3      	subs	r3, r2, r3
 8008bb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d241      	bcs.n	8008c40 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	330c      	adds	r3, #12
 8008bc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc6:	e853 3f00 	ldrex	r3, [r3]
 8008bca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	330c      	adds	r3, #12
 8008bda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008bdc:	637a      	str	r2, [r7, #52]	; 0x34
 8008bde:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008be2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008be4:	e841 2300 	strex	r3, r2, [r1]
 8008be8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d1e5      	bne.n	8008bbc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	3314      	adds	r3, #20
 8008bf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	e853 3f00 	ldrex	r3, [r3]
 8008bfe:	613b      	str	r3, [r7, #16]
   return(result);
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	f023 0301 	bic.w	r3, r3, #1
 8008c06:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	3314      	adds	r3, #20
 8008c0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c10:	623a      	str	r2, [r7, #32]
 8008c12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c14:	69f9      	ldr	r1, [r7, #28]
 8008c16:	6a3a      	ldr	r2, [r7, #32]
 8008c18:	e841 2300 	strex	r3, r2, [r1]
 8008c1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d1e5      	bne.n	8008bf0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2220      	movs	r2, #32
 8008c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2220      	movs	r2, #32
 8008c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008c3c:	2303      	movs	r3, #3
 8008c3e:	e00f      	b.n	8008c60 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	4013      	ands	r3, r2
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	bf0c      	ite	eq
 8008c50:	2301      	moveq	r3, #1
 8008c52:	2300      	movne	r3, #0
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	461a      	mov	r2, r3
 8008c58:	79fb      	ldrb	r3, [r7, #7]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d09f      	beq.n	8008b9e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3740      	adds	r7, #64	; 0x40
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b095      	sub	sp, #84	; 0x54
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	330c      	adds	r3, #12
 8008c76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c7a:	e853 3f00 	ldrex	r3, [r3]
 8008c7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	330c      	adds	r3, #12
 8008c8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c90:	643a      	str	r2, [r7, #64]	; 0x40
 8008c92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c98:	e841 2300 	strex	r3, r2, [r1]
 8008c9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d1e5      	bne.n	8008c70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	3314      	adds	r3, #20
 8008caa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cac:	6a3b      	ldr	r3, [r7, #32]
 8008cae:	e853 3f00 	ldrex	r3, [r3]
 8008cb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	f023 0301 	bic.w	r3, r3, #1
 8008cba:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	3314      	adds	r3, #20
 8008cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ccc:	e841 2300 	strex	r3, r2, [r1]
 8008cd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d1e5      	bne.n	8008ca4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d119      	bne.n	8008d14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	330c      	adds	r3, #12
 8008ce6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	e853 3f00 	ldrex	r3, [r3]
 8008cee:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	f023 0310 	bic.w	r3, r3, #16
 8008cf6:	647b      	str	r3, [r7, #68]	; 0x44
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	330c      	adds	r3, #12
 8008cfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d00:	61ba      	str	r2, [r7, #24]
 8008d02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d04:	6979      	ldr	r1, [r7, #20]
 8008d06:	69ba      	ldr	r2, [r7, #24]
 8008d08:	e841 2300 	strex	r3, r2, [r1]
 8008d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d1e5      	bne.n	8008ce0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2220      	movs	r2, #32
 8008d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008d22:	bf00      	nop
 8008d24:	3754      	adds	r7, #84	; 0x54
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr

08008d2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b084      	sub	sp, #16
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2200      	movs	r2, #0
 8008d46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	f7ff ff09 	bl	8008b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d4e:	bf00      	nop
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008d56:	b480      	push	{r7}
 8008d58:	b085      	sub	sp, #20
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	2b21      	cmp	r3, #33	; 0x21
 8008d68:	d13e      	bne.n	8008de8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d72:	d114      	bne.n	8008d9e <UART_Transmit_IT+0x48>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d110      	bne.n	8008d9e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6a1b      	ldr	r3, [r3, #32]
 8008d80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	881b      	ldrh	r3, [r3, #0]
 8008d86:	461a      	mov	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a1b      	ldr	r3, [r3, #32]
 8008d96:	1c9a      	adds	r2, r3, #2
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	621a      	str	r2, [r3, #32]
 8008d9c:	e008      	b.n	8008db0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a1b      	ldr	r3, [r3, #32]
 8008da2:	1c59      	adds	r1, r3, #1
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	6211      	str	r1, [r2, #32]
 8008da8:	781a      	ldrb	r2, [r3, #0]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	3b01      	subs	r3, #1
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d10f      	bne.n	8008de4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	68da      	ldr	r2, [r3, #12]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008dd2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68da      	ldr	r2, [r3, #12]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008de2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008de4:	2300      	movs	r3, #0
 8008de6:	e000      	b.n	8008dea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008de8:	2302      	movs	r3, #2
  }
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr

08008df6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b082      	sub	sp, #8
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68da      	ldr	r2, [r3, #12]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2220      	movs	r2, #32
 8008e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f7ff fe8e 	bl	8008b38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b08c      	sub	sp, #48	; 0x30
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	2b22      	cmp	r3, #34	; 0x22
 8008e38:	f040 80ab 	bne.w	8008f92 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e44:	d117      	bne.n	8008e76 <UART_Receive_IT+0x50>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d113      	bne.n	8008e76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e56:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6e:	1c9a      	adds	r2, r3, #2
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	629a      	str	r2, [r3, #40]	; 0x28
 8008e74:	e026      	b.n	8008ec4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e88:	d007      	beq.n	8008e9a <UART_Receive_IT+0x74>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d10a      	bne.n	8008ea8 <UART_Receive_IT+0x82>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	691b      	ldr	r3, [r3, #16]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d106      	bne.n	8008ea8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	b2da      	uxtb	r2, r3
 8008ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea4:	701a      	strb	r2, [r3, #0]
 8008ea6:	e008      	b.n	8008eba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eb4:	b2da      	uxtb	r2, r3
 8008eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ebe:	1c5a      	adds	r2, r3, #1
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	3b01      	subs	r3, #1
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d15a      	bne.n	8008f8e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	68da      	ldr	r2, [r3, #12]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f022 0220 	bic.w	r2, r2, #32
 8008ee6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68da      	ldr	r2, [r3, #12]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ef6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	695a      	ldr	r2, [r3, #20]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f022 0201 	bic.w	r2, r2, #1
 8008f06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2220      	movs	r2, #32
 8008f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d135      	bne.n	8008f84 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	330c      	adds	r3, #12
 8008f24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	e853 3f00 	ldrex	r3, [r3]
 8008f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	f023 0310 	bic.w	r3, r3, #16
 8008f34:	627b      	str	r3, [r7, #36]	; 0x24
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	330c      	adds	r3, #12
 8008f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f3e:	623a      	str	r2, [r7, #32]
 8008f40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f42:	69f9      	ldr	r1, [r7, #28]
 8008f44:	6a3a      	ldr	r2, [r7, #32]
 8008f46:	e841 2300 	strex	r3, r2, [r1]
 8008f4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1e5      	bne.n	8008f1e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 0310 	and.w	r3, r3, #16
 8008f5c:	2b10      	cmp	r3, #16
 8008f5e:	d10a      	bne.n	8008f76 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f60:	2300      	movs	r3, #0
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	60fb      	str	r3, [r7, #12]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	60fb      	str	r3, [r7, #12]
 8008f74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f7ff fdf9 	bl	8008b74 <HAL_UARTEx_RxEventCallback>
 8008f82:	e002      	b.n	8008f8a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f7ff fde1 	bl	8008b4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	e002      	b.n	8008f94 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	e000      	b.n	8008f94 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008f92:	2302      	movs	r3, #2
  }
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3730      	adds	r7, #48	; 0x30
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fa0:	b0c0      	sub	sp, #256	; 0x100
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	691b      	ldr	r3, [r3, #16]
 8008fb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fb8:	68d9      	ldr	r1, [r3, #12]
 8008fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	ea40 0301 	orr.w	r3, r0, r1
 8008fc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fca:	689a      	ldr	r2, [r3, #8]
 8008fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	431a      	orrs	r2, r3
 8008fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	431a      	orrs	r2, r3
 8008fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fe0:	69db      	ldr	r3, [r3, #28]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008ff4:	f021 010c 	bic.w	r1, r1, #12
 8008ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009002:	430b      	orrs	r3, r1
 8009004:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	695b      	ldr	r3, [r3, #20]
 800900e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009016:	6999      	ldr	r1, [r3, #24]
 8009018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	ea40 0301 	orr.w	r3, r0, r1
 8009022:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	4b8f      	ldr	r3, [pc, #572]	; (8009268 <UART_SetConfig+0x2cc>)
 800902c:	429a      	cmp	r2, r3
 800902e:	d005      	beq.n	800903c <UART_SetConfig+0xa0>
 8009030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	4b8d      	ldr	r3, [pc, #564]	; (800926c <UART_SetConfig+0x2d0>)
 8009038:	429a      	cmp	r2, r3
 800903a:	d104      	bne.n	8009046 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800903c:	f7fd fd16 	bl	8006a6c <HAL_RCC_GetPCLK2Freq>
 8009040:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009044:	e003      	b.n	800904e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009046:	f7fd fcfd 	bl	8006a44 <HAL_RCC_GetPCLK1Freq>
 800904a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800904e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009052:	69db      	ldr	r3, [r3, #28]
 8009054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009058:	f040 810c 	bne.w	8009274 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800905c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009060:	2200      	movs	r2, #0
 8009062:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009066:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800906a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800906e:	4622      	mov	r2, r4
 8009070:	462b      	mov	r3, r5
 8009072:	1891      	adds	r1, r2, r2
 8009074:	65b9      	str	r1, [r7, #88]	; 0x58
 8009076:	415b      	adcs	r3, r3
 8009078:	65fb      	str	r3, [r7, #92]	; 0x5c
 800907a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800907e:	4621      	mov	r1, r4
 8009080:	eb12 0801 	adds.w	r8, r2, r1
 8009084:	4629      	mov	r1, r5
 8009086:	eb43 0901 	adc.w	r9, r3, r1
 800908a:	f04f 0200 	mov.w	r2, #0
 800908e:	f04f 0300 	mov.w	r3, #0
 8009092:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009096:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800909a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800909e:	4690      	mov	r8, r2
 80090a0:	4699      	mov	r9, r3
 80090a2:	4623      	mov	r3, r4
 80090a4:	eb18 0303 	adds.w	r3, r8, r3
 80090a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80090ac:	462b      	mov	r3, r5
 80090ae:	eb49 0303 	adc.w	r3, r9, r3
 80090b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80090b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80090c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80090c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80090ca:	460b      	mov	r3, r1
 80090cc:	18db      	adds	r3, r3, r3
 80090ce:	653b      	str	r3, [r7, #80]	; 0x50
 80090d0:	4613      	mov	r3, r2
 80090d2:	eb42 0303 	adc.w	r3, r2, r3
 80090d6:	657b      	str	r3, [r7, #84]	; 0x54
 80090d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80090dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80090e0:	f7f7 fde2 	bl	8000ca8 <__aeabi_uldivmod>
 80090e4:	4602      	mov	r2, r0
 80090e6:	460b      	mov	r3, r1
 80090e8:	4b61      	ldr	r3, [pc, #388]	; (8009270 <UART_SetConfig+0x2d4>)
 80090ea:	fba3 2302 	umull	r2, r3, r3, r2
 80090ee:	095b      	lsrs	r3, r3, #5
 80090f0:	011c      	lsls	r4, r3, #4
 80090f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090f6:	2200      	movs	r2, #0
 80090f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80090fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009100:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009104:	4642      	mov	r2, r8
 8009106:	464b      	mov	r3, r9
 8009108:	1891      	adds	r1, r2, r2
 800910a:	64b9      	str	r1, [r7, #72]	; 0x48
 800910c:	415b      	adcs	r3, r3
 800910e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009110:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009114:	4641      	mov	r1, r8
 8009116:	eb12 0a01 	adds.w	sl, r2, r1
 800911a:	4649      	mov	r1, r9
 800911c:	eb43 0b01 	adc.w	fp, r3, r1
 8009120:	f04f 0200 	mov.w	r2, #0
 8009124:	f04f 0300 	mov.w	r3, #0
 8009128:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800912c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009130:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009134:	4692      	mov	sl, r2
 8009136:	469b      	mov	fp, r3
 8009138:	4643      	mov	r3, r8
 800913a:	eb1a 0303 	adds.w	r3, sl, r3
 800913e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009142:	464b      	mov	r3, r9
 8009144:	eb4b 0303 	adc.w	r3, fp, r3
 8009148:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800914c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009158:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800915c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009160:	460b      	mov	r3, r1
 8009162:	18db      	adds	r3, r3, r3
 8009164:	643b      	str	r3, [r7, #64]	; 0x40
 8009166:	4613      	mov	r3, r2
 8009168:	eb42 0303 	adc.w	r3, r2, r3
 800916c:	647b      	str	r3, [r7, #68]	; 0x44
 800916e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009172:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009176:	f7f7 fd97 	bl	8000ca8 <__aeabi_uldivmod>
 800917a:	4602      	mov	r2, r0
 800917c:	460b      	mov	r3, r1
 800917e:	4611      	mov	r1, r2
 8009180:	4b3b      	ldr	r3, [pc, #236]	; (8009270 <UART_SetConfig+0x2d4>)
 8009182:	fba3 2301 	umull	r2, r3, r3, r1
 8009186:	095b      	lsrs	r3, r3, #5
 8009188:	2264      	movs	r2, #100	; 0x64
 800918a:	fb02 f303 	mul.w	r3, r2, r3
 800918e:	1acb      	subs	r3, r1, r3
 8009190:	00db      	lsls	r3, r3, #3
 8009192:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009196:	4b36      	ldr	r3, [pc, #216]	; (8009270 <UART_SetConfig+0x2d4>)
 8009198:	fba3 2302 	umull	r2, r3, r3, r2
 800919c:	095b      	lsrs	r3, r3, #5
 800919e:	005b      	lsls	r3, r3, #1
 80091a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80091a4:	441c      	add	r4, r3
 80091a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091aa:	2200      	movs	r2, #0
 80091ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80091b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80091b8:	4642      	mov	r2, r8
 80091ba:	464b      	mov	r3, r9
 80091bc:	1891      	adds	r1, r2, r2
 80091be:	63b9      	str	r1, [r7, #56]	; 0x38
 80091c0:	415b      	adcs	r3, r3
 80091c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80091c8:	4641      	mov	r1, r8
 80091ca:	1851      	adds	r1, r2, r1
 80091cc:	6339      	str	r1, [r7, #48]	; 0x30
 80091ce:	4649      	mov	r1, r9
 80091d0:	414b      	adcs	r3, r1
 80091d2:	637b      	str	r3, [r7, #52]	; 0x34
 80091d4:	f04f 0200 	mov.w	r2, #0
 80091d8:	f04f 0300 	mov.w	r3, #0
 80091dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80091e0:	4659      	mov	r1, fp
 80091e2:	00cb      	lsls	r3, r1, #3
 80091e4:	4651      	mov	r1, sl
 80091e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091ea:	4651      	mov	r1, sl
 80091ec:	00ca      	lsls	r2, r1, #3
 80091ee:	4610      	mov	r0, r2
 80091f0:	4619      	mov	r1, r3
 80091f2:	4603      	mov	r3, r0
 80091f4:	4642      	mov	r2, r8
 80091f6:	189b      	adds	r3, r3, r2
 80091f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80091fc:	464b      	mov	r3, r9
 80091fe:	460a      	mov	r2, r1
 8009200:	eb42 0303 	adc.w	r3, r2, r3
 8009204:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009214:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009218:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800921c:	460b      	mov	r3, r1
 800921e:	18db      	adds	r3, r3, r3
 8009220:	62bb      	str	r3, [r7, #40]	; 0x28
 8009222:	4613      	mov	r3, r2
 8009224:	eb42 0303 	adc.w	r3, r2, r3
 8009228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800922a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800922e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009232:	f7f7 fd39 	bl	8000ca8 <__aeabi_uldivmod>
 8009236:	4602      	mov	r2, r0
 8009238:	460b      	mov	r3, r1
 800923a:	4b0d      	ldr	r3, [pc, #52]	; (8009270 <UART_SetConfig+0x2d4>)
 800923c:	fba3 1302 	umull	r1, r3, r3, r2
 8009240:	095b      	lsrs	r3, r3, #5
 8009242:	2164      	movs	r1, #100	; 0x64
 8009244:	fb01 f303 	mul.w	r3, r1, r3
 8009248:	1ad3      	subs	r3, r2, r3
 800924a:	00db      	lsls	r3, r3, #3
 800924c:	3332      	adds	r3, #50	; 0x32
 800924e:	4a08      	ldr	r2, [pc, #32]	; (8009270 <UART_SetConfig+0x2d4>)
 8009250:	fba2 2303 	umull	r2, r3, r2, r3
 8009254:	095b      	lsrs	r3, r3, #5
 8009256:	f003 0207 	and.w	r2, r3, #7
 800925a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4422      	add	r2, r4
 8009262:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009264:	e105      	b.n	8009472 <UART_SetConfig+0x4d6>
 8009266:	bf00      	nop
 8009268:	40011000 	.word	0x40011000
 800926c:	40011400 	.word	0x40011400
 8009270:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009278:	2200      	movs	r2, #0
 800927a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800927e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009282:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009286:	4642      	mov	r2, r8
 8009288:	464b      	mov	r3, r9
 800928a:	1891      	adds	r1, r2, r2
 800928c:	6239      	str	r1, [r7, #32]
 800928e:	415b      	adcs	r3, r3
 8009290:	627b      	str	r3, [r7, #36]	; 0x24
 8009292:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009296:	4641      	mov	r1, r8
 8009298:	1854      	adds	r4, r2, r1
 800929a:	4649      	mov	r1, r9
 800929c:	eb43 0501 	adc.w	r5, r3, r1
 80092a0:	f04f 0200 	mov.w	r2, #0
 80092a4:	f04f 0300 	mov.w	r3, #0
 80092a8:	00eb      	lsls	r3, r5, #3
 80092aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80092ae:	00e2      	lsls	r2, r4, #3
 80092b0:	4614      	mov	r4, r2
 80092b2:	461d      	mov	r5, r3
 80092b4:	4643      	mov	r3, r8
 80092b6:	18e3      	adds	r3, r4, r3
 80092b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80092bc:	464b      	mov	r3, r9
 80092be:	eb45 0303 	adc.w	r3, r5, r3
 80092c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80092c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80092d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80092d6:	f04f 0200 	mov.w	r2, #0
 80092da:	f04f 0300 	mov.w	r3, #0
 80092de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80092e2:	4629      	mov	r1, r5
 80092e4:	008b      	lsls	r3, r1, #2
 80092e6:	4621      	mov	r1, r4
 80092e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092ec:	4621      	mov	r1, r4
 80092ee:	008a      	lsls	r2, r1, #2
 80092f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80092f4:	f7f7 fcd8 	bl	8000ca8 <__aeabi_uldivmod>
 80092f8:	4602      	mov	r2, r0
 80092fa:	460b      	mov	r3, r1
 80092fc:	4b60      	ldr	r3, [pc, #384]	; (8009480 <UART_SetConfig+0x4e4>)
 80092fe:	fba3 2302 	umull	r2, r3, r3, r2
 8009302:	095b      	lsrs	r3, r3, #5
 8009304:	011c      	lsls	r4, r3, #4
 8009306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800930a:	2200      	movs	r2, #0
 800930c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009310:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009314:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009318:	4642      	mov	r2, r8
 800931a:	464b      	mov	r3, r9
 800931c:	1891      	adds	r1, r2, r2
 800931e:	61b9      	str	r1, [r7, #24]
 8009320:	415b      	adcs	r3, r3
 8009322:	61fb      	str	r3, [r7, #28]
 8009324:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009328:	4641      	mov	r1, r8
 800932a:	1851      	adds	r1, r2, r1
 800932c:	6139      	str	r1, [r7, #16]
 800932e:	4649      	mov	r1, r9
 8009330:	414b      	adcs	r3, r1
 8009332:	617b      	str	r3, [r7, #20]
 8009334:	f04f 0200 	mov.w	r2, #0
 8009338:	f04f 0300 	mov.w	r3, #0
 800933c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009340:	4659      	mov	r1, fp
 8009342:	00cb      	lsls	r3, r1, #3
 8009344:	4651      	mov	r1, sl
 8009346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800934a:	4651      	mov	r1, sl
 800934c:	00ca      	lsls	r2, r1, #3
 800934e:	4610      	mov	r0, r2
 8009350:	4619      	mov	r1, r3
 8009352:	4603      	mov	r3, r0
 8009354:	4642      	mov	r2, r8
 8009356:	189b      	adds	r3, r3, r2
 8009358:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800935c:	464b      	mov	r3, r9
 800935e:	460a      	mov	r2, r1
 8009360:	eb42 0303 	adc.w	r3, r2, r3
 8009364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	67bb      	str	r3, [r7, #120]	; 0x78
 8009372:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009374:	f04f 0200 	mov.w	r2, #0
 8009378:	f04f 0300 	mov.w	r3, #0
 800937c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009380:	4649      	mov	r1, r9
 8009382:	008b      	lsls	r3, r1, #2
 8009384:	4641      	mov	r1, r8
 8009386:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800938a:	4641      	mov	r1, r8
 800938c:	008a      	lsls	r2, r1, #2
 800938e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009392:	f7f7 fc89 	bl	8000ca8 <__aeabi_uldivmod>
 8009396:	4602      	mov	r2, r0
 8009398:	460b      	mov	r3, r1
 800939a:	4b39      	ldr	r3, [pc, #228]	; (8009480 <UART_SetConfig+0x4e4>)
 800939c:	fba3 1302 	umull	r1, r3, r3, r2
 80093a0:	095b      	lsrs	r3, r3, #5
 80093a2:	2164      	movs	r1, #100	; 0x64
 80093a4:	fb01 f303 	mul.w	r3, r1, r3
 80093a8:	1ad3      	subs	r3, r2, r3
 80093aa:	011b      	lsls	r3, r3, #4
 80093ac:	3332      	adds	r3, #50	; 0x32
 80093ae:	4a34      	ldr	r2, [pc, #208]	; (8009480 <UART_SetConfig+0x4e4>)
 80093b0:	fba2 2303 	umull	r2, r3, r2, r3
 80093b4:	095b      	lsrs	r3, r3, #5
 80093b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093ba:	441c      	add	r4, r3
 80093bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093c0:	2200      	movs	r2, #0
 80093c2:	673b      	str	r3, [r7, #112]	; 0x70
 80093c4:	677a      	str	r2, [r7, #116]	; 0x74
 80093c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80093ca:	4642      	mov	r2, r8
 80093cc:	464b      	mov	r3, r9
 80093ce:	1891      	adds	r1, r2, r2
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	415b      	adcs	r3, r3
 80093d4:	60fb      	str	r3, [r7, #12]
 80093d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80093da:	4641      	mov	r1, r8
 80093dc:	1851      	adds	r1, r2, r1
 80093de:	6039      	str	r1, [r7, #0]
 80093e0:	4649      	mov	r1, r9
 80093e2:	414b      	adcs	r3, r1
 80093e4:	607b      	str	r3, [r7, #4]
 80093e6:	f04f 0200 	mov.w	r2, #0
 80093ea:	f04f 0300 	mov.w	r3, #0
 80093ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80093f2:	4659      	mov	r1, fp
 80093f4:	00cb      	lsls	r3, r1, #3
 80093f6:	4651      	mov	r1, sl
 80093f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093fc:	4651      	mov	r1, sl
 80093fe:	00ca      	lsls	r2, r1, #3
 8009400:	4610      	mov	r0, r2
 8009402:	4619      	mov	r1, r3
 8009404:	4603      	mov	r3, r0
 8009406:	4642      	mov	r2, r8
 8009408:	189b      	adds	r3, r3, r2
 800940a:	66bb      	str	r3, [r7, #104]	; 0x68
 800940c:	464b      	mov	r3, r9
 800940e:	460a      	mov	r2, r1
 8009410:	eb42 0303 	adc.w	r3, r2, r3
 8009414:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	663b      	str	r3, [r7, #96]	; 0x60
 8009420:	667a      	str	r2, [r7, #100]	; 0x64
 8009422:	f04f 0200 	mov.w	r2, #0
 8009426:	f04f 0300 	mov.w	r3, #0
 800942a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800942e:	4649      	mov	r1, r9
 8009430:	008b      	lsls	r3, r1, #2
 8009432:	4641      	mov	r1, r8
 8009434:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009438:	4641      	mov	r1, r8
 800943a:	008a      	lsls	r2, r1, #2
 800943c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009440:	f7f7 fc32 	bl	8000ca8 <__aeabi_uldivmod>
 8009444:	4602      	mov	r2, r0
 8009446:	460b      	mov	r3, r1
 8009448:	4b0d      	ldr	r3, [pc, #52]	; (8009480 <UART_SetConfig+0x4e4>)
 800944a:	fba3 1302 	umull	r1, r3, r3, r2
 800944e:	095b      	lsrs	r3, r3, #5
 8009450:	2164      	movs	r1, #100	; 0x64
 8009452:	fb01 f303 	mul.w	r3, r1, r3
 8009456:	1ad3      	subs	r3, r2, r3
 8009458:	011b      	lsls	r3, r3, #4
 800945a:	3332      	adds	r3, #50	; 0x32
 800945c:	4a08      	ldr	r2, [pc, #32]	; (8009480 <UART_SetConfig+0x4e4>)
 800945e:	fba2 2303 	umull	r2, r3, r2, r3
 8009462:	095b      	lsrs	r3, r3, #5
 8009464:	f003 020f 	and.w	r2, r3, #15
 8009468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4422      	add	r2, r4
 8009470:	609a      	str	r2, [r3, #8]
}
 8009472:	bf00      	nop
 8009474:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009478:	46bd      	mov	sp, r7
 800947a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800947e:	bf00      	nop
 8009480:	51eb851f 	.word	0x51eb851f

08009484 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d123      	bne.n	80094de <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800949e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	6851      	ldr	r1, [r2, #4]
 80094a6:	683a      	ldr	r2, [r7, #0]
 80094a8:	6892      	ldr	r2, [r2, #8]
 80094aa:	4311      	orrs	r1, r2
 80094ac:	683a      	ldr	r2, [r7, #0]
 80094ae:	68d2      	ldr	r2, [r2, #12]
 80094b0:	4311      	orrs	r1, r2
 80094b2:	683a      	ldr	r2, [r7, #0]
 80094b4:	6912      	ldr	r2, [r2, #16]
 80094b6:	4311      	orrs	r1, r2
 80094b8:	683a      	ldr	r2, [r7, #0]
 80094ba:	6952      	ldr	r2, [r2, #20]
 80094bc:	4311      	orrs	r1, r2
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	6992      	ldr	r2, [r2, #24]
 80094c2:	4311      	orrs	r1, r2
 80094c4:	683a      	ldr	r2, [r7, #0]
 80094c6:	69d2      	ldr	r2, [r2, #28]
 80094c8:	4311      	orrs	r1, r2
 80094ca:	683a      	ldr	r2, [r7, #0]
 80094cc:	6a12      	ldr	r2, [r2, #32]
 80094ce:	4311      	orrs	r1, r2
 80094d0:	683a      	ldr	r2, [r7, #0]
 80094d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80094d4:	430a      	orrs	r2, r1
 80094d6:	431a      	orrs	r2, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	601a      	str	r2, [r3, #0]
 80094dc:	e028      	b.n	8009530 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	69d9      	ldr	r1, [r3, #28]
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	6a1b      	ldr	r3, [r3, #32]
 80094ee:	4319      	orrs	r1, r3
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f4:	430b      	orrs	r3, r1
 80094f6:	431a      	orrs	r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009504:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009508:	683a      	ldr	r2, [r7, #0]
 800950a:	6851      	ldr	r1, [r2, #4]
 800950c:	683a      	ldr	r2, [r7, #0]
 800950e:	6892      	ldr	r2, [r2, #8]
 8009510:	4311      	orrs	r1, r2
 8009512:	683a      	ldr	r2, [r7, #0]
 8009514:	68d2      	ldr	r2, [r2, #12]
 8009516:	4311      	orrs	r1, r2
 8009518:	683a      	ldr	r2, [r7, #0]
 800951a:	6912      	ldr	r2, [r2, #16]
 800951c:	4311      	orrs	r1, r2
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	6952      	ldr	r2, [r2, #20]
 8009522:	4311      	orrs	r1, r2
 8009524:	683a      	ldr	r2, [r7, #0]
 8009526:	6992      	ldr	r2, [r2, #24]
 8009528:	430a      	orrs	r2, r1
 800952a:	431a      	orrs	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	370c      	adds	r7, #12
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr

0800953e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800953e:	b480      	push	{r7}
 8009540:	b085      	sub	sp, #20
 8009542:	af00      	add	r7, sp, #0
 8009544:	60f8      	str	r0, [r7, #12]
 8009546:	60b9      	str	r1, [r7, #8]
 8009548:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d128      	bne.n	80095a2 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	1e59      	subs	r1, r3, #1
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	3b01      	subs	r3, #1
 8009564:	011b      	lsls	r3, r3, #4
 8009566:	4319      	orrs	r1, r3
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	3b01      	subs	r3, #1
 800956e:	021b      	lsls	r3, r3, #8
 8009570:	4319      	orrs	r1, r3
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	3b01      	subs	r3, #1
 8009578:	031b      	lsls	r3, r3, #12
 800957a:	4319      	orrs	r1, r3
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	3b01      	subs	r3, #1
 8009582:	041b      	lsls	r3, r3, #16
 8009584:	4319      	orrs	r1, r3
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	695b      	ldr	r3, [r3, #20]
 800958a:	3b01      	subs	r3, #1
 800958c:	051b      	lsls	r3, r3, #20
 800958e:	4319      	orrs	r1, r3
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	699b      	ldr	r3, [r3, #24]
 8009594:	3b01      	subs	r3, #1
 8009596:	061b      	lsls	r3, r3, #24
 8009598:	430b      	orrs	r3, r1
 800959a:	431a      	orrs	r2, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	609a      	str	r2, [r3, #8]
 80095a0:	e02f      	b.n	8009602 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80095aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	68d2      	ldr	r2, [r2, #12]
 80095b2:	3a01      	subs	r2, #1
 80095b4:	0311      	lsls	r1, r2, #12
 80095b6:	68ba      	ldr	r2, [r7, #8]
 80095b8:	6952      	ldr	r2, [r2, #20]
 80095ba:	3a01      	subs	r2, #1
 80095bc:	0512      	lsls	r2, r2, #20
 80095be:	430a      	orrs	r2, r1
 80095c0:	431a      	orrs	r2, r3
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	1e59      	subs	r1, r3, #1
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	3b01      	subs	r3, #1
 80095da:	011b      	lsls	r3, r3, #4
 80095dc:	4319      	orrs	r1, r3
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	3b01      	subs	r3, #1
 80095e4:	021b      	lsls	r3, r3, #8
 80095e6:	4319      	orrs	r1, r3
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	691b      	ldr	r3, [r3, #16]
 80095ec:	3b01      	subs	r3, #1
 80095ee:	041b      	lsls	r3, r3, #16
 80095f0:	4319      	orrs	r1, r3
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	699b      	ldr	r3, [r3, #24]
 80095f6:	3b01      	subs	r3, #1
 80095f8:	061b      	lsls	r3, r3, #24
 80095fa:	430b      	orrs	r3, r1
 80095fc:	431a      	orrs	r2, r3
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8009602:	2300      	movs	r3, #0
}
 8009604:	4618      	mov	r0, r3
 8009606:	3714      	adds	r7, #20
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b086      	sub	sp, #24
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800961c:	2300      	movs	r3, #0
 800961e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	691b      	ldr	r3, [r3, #16]
 8009624:	0d9b      	lsrs	r3, r3, #22
 8009626:	059b      	lsls	r3, r3, #22
 8009628:	68ba      	ldr	r2, [r7, #8]
 800962a:	6811      	ldr	r1, [r2, #0]
 800962c:	68ba      	ldr	r2, [r7, #8]
 800962e:	6852      	ldr	r2, [r2, #4]
 8009630:	4311      	orrs	r1, r2
 8009632:	68ba      	ldr	r2, [r7, #8]
 8009634:	6892      	ldr	r2, [r2, #8]
 8009636:	3a01      	subs	r2, #1
 8009638:	0152      	lsls	r2, r2, #5
 800963a:	4311      	orrs	r1, r2
 800963c:	68ba      	ldr	r2, [r7, #8]
 800963e:	68d2      	ldr	r2, [r2, #12]
 8009640:	0252      	lsls	r2, r2, #9
 8009642:	430a      	orrs	r2, r1
 8009644:	431a      	orrs	r2, r3
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800964a:	f7fa fe07 	bl	800425c <HAL_GetTick>
 800964e:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009650:	e010      	b.n	8009674 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009658:	d00c      	beq.n	8009674 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d007      	beq.n	8009670 <FMC_SDRAM_SendCommand+0x60>
 8009660:	f7fa fdfc 	bl	800425c <HAL_GetTick>
 8009664:	4602      	mov	r2, r0
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	1ad3      	subs	r3, r2, r3
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	429a      	cmp	r2, r3
 800966e:	d201      	bcs.n	8009674 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8009670:	2303      	movs	r3, #3
 8009672:	e006      	b.n	8009682 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	699b      	ldr	r3, [r3, #24]
 8009678:	f003 0320 	and.w	r3, r3, #32
 800967c:	2b20      	cmp	r3, #32
 800967e:	d0e8      	beq.n	8009652 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8009680:	2300      	movs	r3, #0
}
 8009682:	4618      	mov	r0, r3
 8009684:	3718      	adds	r7, #24
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800968a:	b480      	push	{r7}
 800968c:	b083      	sub	sp, #12
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
 8009692:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	695b      	ldr	r3, [r3, #20]
 8009698:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800969c:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80096a0:	683a      	ldr	r2, [r7, #0]
 80096a2:	0052      	lsls	r2, r2, #1
 80096a4:	431a      	orrs	r2, r3
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b085      	sub	sp, #20
 80096bc:	af00      	add	r7, sp, #0
 80096be:	4603      	mov	r3, r0
 80096c0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80096c2:	2300      	movs	r3, #0
 80096c4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80096c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80096ca:	2b84      	cmp	r3, #132	; 0x84
 80096cc:	d005      	beq.n	80096da <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80096ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	4413      	add	r3, r2
 80096d6:	3303      	adds	r3, #3
 80096d8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80096da:	68fb      	ldr	r3, [r7, #12]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3714      	adds	r7, #20
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80096ec:	f000 fb02 	bl	8009cf4 <vTaskStartScheduler>
  
  return osOK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80096f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096f8:	b089      	sub	sp, #36	; 0x24
 80096fa:	af04      	add	r7, sp, #16
 80096fc:	6078      	str	r0, [r7, #4]
 80096fe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	695b      	ldr	r3, [r3, #20]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d020      	beq.n	800974a <osThreadCreate+0x54>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	699b      	ldr	r3, [r3, #24]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d01c      	beq.n	800974a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	685c      	ldr	r4, [r3, #4]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681d      	ldr	r5, [r3, #0]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	691e      	ldr	r6, [r3, #16]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009722:	4618      	mov	r0, r3
 8009724:	f7ff ffc8 	bl	80096b8 <makeFreeRtosPriority>
 8009728:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	695b      	ldr	r3, [r3, #20]
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009732:	9202      	str	r2, [sp, #8]
 8009734:	9301      	str	r3, [sp, #4]
 8009736:	9100      	str	r1, [sp, #0]
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	4632      	mov	r2, r6
 800973c:	4629      	mov	r1, r5
 800973e:	4620      	mov	r0, r4
 8009740:	f000 f8ed 	bl	800991e <xTaskCreateStatic>
 8009744:	4603      	mov	r3, r0
 8009746:	60fb      	str	r3, [r7, #12]
 8009748:	e01c      	b.n	8009784 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	685c      	ldr	r4, [r3, #4]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009756:	b29e      	uxth	r6, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800975e:	4618      	mov	r0, r3
 8009760:	f7ff ffaa 	bl	80096b8 <makeFreeRtosPriority>
 8009764:	4602      	mov	r2, r0
 8009766:	f107 030c 	add.w	r3, r7, #12
 800976a:	9301      	str	r3, [sp, #4]
 800976c:	9200      	str	r2, [sp, #0]
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	4632      	mov	r2, r6
 8009772:	4629      	mov	r1, r5
 8009774:	4620      	mov	r0, r4
 8009776:	f000 f92f 	bl	80099d8 <xTaskCreate>
 800977a:	4603      	mov	r3, r0
 800977c:	2b01      	cmp	r3, #1
 800977e:	d001      	beq.n	8009784 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009780:	2300      	movs	r3, #0
 8009782:	e000      	b.n	8009786 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009784:	68fb      	ldr	r3, [r7, #12]
}
 8009786:	4618      	mov	r0, r3
 8009788:	3714      	adds	r7, #20
 800978a:	46bd      	mov	sp, r7
 800978c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800978e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800978e:	b580      	push	{r7, lr}
 8009790:	b084      	sub	sp, #16
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d001      	beq.n	80097a4 <osDelay+0x16>
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	e000      	b.n	80097a6 <osDelay+0x18>
 80097a4:	2301      	movs	r3, #1
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 fa70 	bl	8009c8c <vTaskDelay>
  
  return osOK;
 80097ac:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80097b6:	b480      	push	{r7}
 80097b8:	b083      	sub	sp, #12
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f103 0208 	add.w	r2, r3, #8
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f04f 32ff 	mov.w	r2, #4294967295
 80097ce:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f103 0208 	add.w	r2, r3, #8
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f103 0208 	add.w	r2, r3, #8
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80097ea:	bf00      	nop
 80097ec:	370c      	adds	r7, #12
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80097f6:	b480      	push	{r7}
 80097f8:	b083      	sub	sp, #12
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009804:	bf00      	nop
 8009806:	370c      	adds	r7, #12
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009810:	b480      	push	{r7}
 8009812:	b085      	sub	sp, #20
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	68fa      	ldr	r2, [r7, #12]
 8009824:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	689a      	ldr	r2, [r3, #8]
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	683a      	ldr	r2, [r7, #0]
 8009834:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	683a      	ldr	r2, [r7, #0]
 800983a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	1c5a      	adds	r2, r3, #1
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	601a      	str	r2, [r3, #0]
}
 800984c:	bf00      	nop
 800984e:	3714      	adds	r7, #20
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009858:	b480      	push	{r7}
 800985a:	b085      	sub	sp, #20
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800986e:	d103      	bne.n	8009878 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	60fb      	str	r3, [r7, #12]
 8009876:	e00c      	b.n	8009892 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	3308      	adds	r3, #8
 800987c:	60fb      	str	r3, [r7, #12]
 800987e:	e002      	b.n	8009886 <vListInsert+0x2e>
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	60fb      	str	r3, [r7, #12]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	429a      	cmp	r2, r3
 8009890:	d2f6      	bcs.n	8009880 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	685a      	ldr	r2, [r3, #4]
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	683a      	ldr	r2, [r7, #0]
 80098a0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	68fa      	ldr	r2, [r7, #12]
 80098a6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	683a      	ldr	r2, [r7, #0]
 80098ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	1c5a      	adds	r2, r3, #1
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	601a      	str	r2, [r3, #0]
}
 80098be:	bf00      	nop
 80098c0:	3714      	adds	r7, #20
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr

080098ca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80098ca:	b480      	push	{r7}
 80098cc:	b085      	sub	sp, #20
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	6892      	ldr	r2, [r2, #8]
 80098e0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	6852      	ldr	r2, [r2, #4]
 80098ea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d103      	bne.n	80098fe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	689a      	ldr	r2, [r3, #8]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2200      	movs	r2, #0
 8009902:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	1e5a      	subs	r2, r3, #1
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
}
 8009912:	4618      	mov	r0, r3
 8009914:	3714      	adds	r7, #20
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr

0800991e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800991e:	b580      	push	{r7, lr}
 8009920:	b08e      	sub	sp, #56	; 0x38
 8009922:	af04      	add	r7, sp, #16
 8009924:	60f8      	str	r0, [r7, #12]
 8009926:	60b9      	str	r1, [r7, #8]
 8009928:	607a      	str	r2, [r7, #4]
 800992a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800992c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800992e:	2b00      	cmp	r3, #0
 8009930:	d10a      	bne.n	8009948 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009936:	f383 8811 	msr	BASEPRI, r3
 800993a:	f3bf 8f6f 	isb	sy
 800993e:	f3bf 8f4f 	dsb	sy
 8009942:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009944:	bf00      	nop
 8009946:	e7fe      	b.n	8009946 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994a:	2b00      	cmp	r3, #0
 800994c:	d10a      	bne.n	8009964 <xTaskCreateStatic+0x46>
	__asm volatile
 800994e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009952:	f383 8811 	msr	BASEPRI, r3
 8009956:	f3bf 8f6f 	isb	sy
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	61fb      	str	r3, [r7, #28]
}
 8009960:	bf00      	nop
 8009962:	e7fe      	b.n	8009962 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009964:	23b8      	movs	r3, #184	; 0xb8
 8009966:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	2bb8      	cmp	r3, #184	; 0xb8
 800996c:	d00a      	beq.n	8009984 <xTaskCreateStatic+0x66>
	__asm volatile
 800996e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	61bb      	str	r3, [r7, #24]
}
 8009980:	bf00      	nop
 8009982:	e7fe      	b.n	8009982 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009984:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009988:	2b00      	cmp	r3, #0
 800998a:	d01e      	beq.n	80099ca <xTaskCreateStatic+0xac>
 800998c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800998e:	2b00      	cmp	r3, #0
 8009990:	d01b      	beq.n	80099ca <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009994:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009998:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800999a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800999c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999e:	2202      	movs	r2, #2
 80099a0:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80099a4:	2300      	movs	r3, #0
 80099a6:	9303      	str	r3, [sp, #12]
 80099a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099aa:	9302      	str	r3, [sp, #8]
 80099ac:	f107 0314 	add.w	r3, r7, #20
 80099b0:	9301      	str	r3, [sp, #4]
 80099b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b4:	9300      	str	r3, [sp, #0]
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	68b9      	ldr	r1, [r7, #8]
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f000 f851 	bl	8009a64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80099c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099c4:	f000 f8f8 	bl	8009bb8 <prvAddNewTaskToReadyList>
 80099c8:	e001      	b.n	80099ce <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80099ca:	2300      	movs	r3, #0
 80099cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80099ce:	697b      	ldr	r3, [r7, #20]
	}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3728      	adds	r7, #40	; 0x28
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b08c      	sub	sp, #48	; 0x30
 80099dc:	af04      	add	r7, sp, #16
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	603b      	str	r3, [r7, #0]
 80099e4:	4613      	mov	r3, r2
 80099e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80099e8:	88fb      	ldrh	r3, [r7, #6]
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	4618      	mov	r0, r3
 80099ee:	f000 ff23 	bl	800a838 <pvPortMalloc>
 80099f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00e      	beq.n	8009a18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80099fa:	20b8      	movs	r0, #184	; 0xb8
 80099fc:	f000 ff1c 	bl	800a838 <pvPortMalloc>
 8009a00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d003      	beq.n	8009a10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	697a      	ldr	r2, [r7, #20]
 8009a0c:	631a      	str	r2, [r3, #48]	; 0x30
 8009a0e:	e005      	b.n	8009a1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009a10:	6978      	ldr	r0, [r7, #20]
 8009a12:	f000 ffe1 	bl	800a9d8 <vPortFree>
 8009a16:	e001      	b.n	8009a1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d017      	beq.n	8009a52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	2200      	movs	r2, #0
 8009a26:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009a2a:	88fa      	ldrh	r2, [r7, #6]
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	9303      	str	r3, [sp, #12]
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	9302      	str	r3, [sp, #8]
 8009a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a36:	9301      	str	r3, [sp, #4]
 8009a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3a:	9300      	str	r3, [sp, #0]
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	68b9      	ldr	r1, [r7, #8]
 8009a40:	68f8      	ldr	r0, [r7, #12]
 8009a42:	f000 f80f 	bl	8009a64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a46:	69f8      	ldr	r0, [r7, #28]
 8009a48:	f000 f8b6 	bl	8009bb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	61bb      	str	r3, [r7, #24]
 8009a50:	e002      	b.n	8009a58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009a52:	f04f 33ff 	mov.w	r3, #4294967295
 8009a56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009a58:	69bb      	ldr	r3, [r7, #24]
	}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3720      	adds	r7, #32
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
	...

08009a64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b088      	sub	sp, #32
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	607a      	str	r2, [r7, #4]
 8009a70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a74:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	21a5      	movs	r1, #165	; 0xa5
 8009a7e:	f001 f9fa 	bl	800ae76 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	4413      	add	r3, r2
 8009a92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	f023 0307 	bic.w	r3, r3, #7
 8009a9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	f003 0307 	and.w	r3, r3, #7
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00a      	beq.n	8009abc <prvInitialiseNewTask+0x58>
	__asm volatile
 8009aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aaa:	f383 8811 	msr	BASEPRI, r3
 8009aae:	f3bf 8f6f 	isb	sy
 8009ab2:	f3bf 8f4f 	dsb	sy
 8009ab6:	617b      	str	r3, [r7, #20]
}
 8009ab8:	bf00      	nop
 8009aba:	e7fe      	b.n	8009aba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d01f      	beq.n	8009b02 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	61fb      	str	r3, [r7, #28]
 8009ac6:	e012      	b.n	8009aee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009ac8:	68ba      	ldr	r2, [r7, #8]
 8009aca:	69fb      	ldr	r3, [r7, #28]
 8009acc:	4413      	add	r3, r2
 8009ace:	7819      	ldrb	r1, [r3, #0]
 8009ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	3334      	adds	r3, #52	; 0x34
 8009ad8:	460a      	mov	r2, r1
 8009ada:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009adc:	68ba      	ldr	r2, [r7, #8]
 8009ade:	69fb      	ldr	r3, [r7, #28]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d006      	beq.n	8009af6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	3301      	adds	r3, #1
 8009aec:	61fb      	str	r3, [r7, #28]
 8009aee:	69fb      	ldr	r3, [r7, #28]
 8009af0:	2b0f      	cmp	r3, #15
 8009af2:	d9e9      	bls.n	8009ac8 <prvInitialiseNewTask+0x64>
 8009af4:	e000      	b.n	8009af8 <prvInitialiseNewTask+0x94>
			{
				break;
 8009af6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afa:	2200      	movs	r2, #0
 8009afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b00:	e003      	b.n	8009b0a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0c:	2b06      	cmp	r3, #6
 8009b0e:	d901      	bls.n	8009b14 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009b10:	2306      	movs	r3, #6
 8009b12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b1e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b22:	2200      	movs	r2, #0
 8009b24:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b28:	3304      	adds	r3, #4
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7ff fe63 	bl	80097f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b32:	3318      	adds	r3, #24
 8009b34:	4618      	mov	r0, r3
 8009b36:	f7ff fe5e 	bl	80097f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b42:	f1c3 0207 	rsb	r2, r3, #7
 8009b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8009b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b52:	2200      	movs	r2, #0
 8009b54:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b60:	2200      	movs	r2, #0
 8009b62:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b68:	3350      	adds	r3, #80	; 0x50
 8009b6a:	2260      	movs	r2, #96	; 0x60
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f001 f981 	bl	800ae76 <memset>
 8009b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b76:	4a0d      	ldr	r2, [pc, #52]	; (8009bac <prvInitialiseNewTask+0x148>)
 8009b78:	655a      	str	r2, [r3, #84]	; 0x54
 8009b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7c:	4a0c      	ldr	r2, [pc, #48]	; (8009bb0 <prvInitialiseNewTask+0x14c>)
 8009b7e:	659a      	str	r2, [r3, #88]	; 0x58
 8009b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b82:	4a0c      	ldr	r2, [pc, #48]	; (8009bb4 <prvInitialiseNewTask+0x150>)
 8009b84:	65da      	str	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009b86:	683a      	ldr	r2, [r7, #0]
 8009b88:	68f9      	ldr	r1, [r7, #12]
 8009b8a:	69b8      	ldr	r0, [r7, #24]
 8009b8c:	f000 fc48 	bl	800a420 <pxPortInitialiseStack>
 8009b90:	4602      	mov	r2, r0
 8009b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b94:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d002      	beq.n	8009ba2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ba0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ba2:	bf00      	nop
 8009ba4:	3720      	adds	r7, #32
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	080111ac 	.word	0x080111ac
 8009bb0:	080111cc 	.word	0x080111cc
 8009bb4:	0801118c 	.word	0x0801118c

08009bb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009bc0:	f000 fd58 	bl	800a674 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009bc4:	4b2a      	ldr	r3, [pc, #168]	; (8009c70 <prvAddNewTaskToReadyList+0xb8>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	3301      	adds	r3, #1
 8009bca:	4a29      	ldr	r2, [pc, #164]	; (8009c70 <prvAddNewTaskToReadyList+0xb8>)
 8009bcc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009bce:	4b29      	ldr	r3, [pc, #164]	; (8009c74 <prvAddNewTaskToReadyList+0xbc>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d109      	bne.n	8009bea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009bd6:	4a27      	ldr	r2, [pc, #156]	; (8009c74 <prvAddNewTaskToReadyList+0xbc>)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009bdc:	4b24      	ldr	r3, [pc, #144]	; (8009c70 <prvAddNewTaskToReadyList+0xb8>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d110      	bne.n	8009c06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009be4:	f000 faf4 	bl	800a1d0 <prvInitialiseTaskLists>
 8009be8:	e00d      	b.n	8009c06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009bea:	4b23      	ldr	r3, [pc, #140]	; (8009c78 <prvAddNewTaskToReadyList+0xc0>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d109      	bne.n	8009c06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009bf2:	4b20      	ldr	r3, [pc, #128]	; (8009c74 <prvAddNewTaskToReadyList+0xbc>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d802      	bhi.n	8009c06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009c00:	4a1c      	ldr	r2, [pc, #112]	; (8009c74 <prvAddNewTaskToReadyList+0xbc>)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009c06:	4b1d      	ldr	r3, [pc, #116]	; (8009c7c <prvAddNewTaskToReadyList+0xc4>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	4a1b      	ldr	r2, [pc, #108]	; (8009c7c <prvAddNewTaskToReadyList+0xc4>)
 8009c0e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c14:	2201      	movs	r2, #1
 8009c16:	409a      	lsls	r2, r3
 8009c18:	4b19      	ldr	r3, [pc, #100]	; (8009c80 <prvAddNewTaskToReadyList+0xc8>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	4a18      	ldr	r2, [pc, #96]	; (8009c80 <prvAddNewTaskToReadyList+0xc8>)
 8009c20:	6013      	str	r3, [r2, #0]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c26:	4613      	mov	r3, r2
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	4413      	add	r3, r2
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	4a15      	ldr	r2, [pc, #84]	; (8009c84 <prvAddNewTaskToReadyList+0xcc>)
 8009c30:	441a      	add	r2, r3
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	3304      	adds	r3, #4
 8009c36:	4619      	mov	r1, r3
 8009c38:	4610      	mov	r0, r2
 8009c3a:	f7ff fde9 	bl	8009810 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009c3e:	f000 fd49 	bl	800a6d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009c42:	4b0d      	ldr	r3, [pc, #52]	; (8009c78 <prvAddNewTaskToReadyList+0xc0>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d00e      	beq.n	8009c68 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009c4a:	4b0a      	ldr	r3, [pc, #40]	; (8009c74 <prvAddNewTaskToReadyList+0xbc>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d207      	bcs.n	8009c68 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009c58:	4b0b      	ldr	r3, [pc, #44]	; (8009c88 <prvAddNewTaskToReadyList+0xd0>)
 8009c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c5e:	601a      	str	r2, [r3, #0]
 8009c60:	f3bf 8f4f 	dsb	sy
 8009c64:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c68:	bf00      	nop
 8009c6a:	3708      	adds	r7, #8
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	20000be8 	.word	0x20000be8
 8009c74:	20000ae8 	.word	0x20000ae8
 8009c78:	20000bf4 	.word	0x20000bf4
 8009c7c:	20000c04 	.word	0x20000c04
 8009c80:	20000bf0 	.word	0x20000bf0
 8009c84:	20000aec 	.word	0x20000aec
 8009c88:	e000ed04 	.word	0xe000ed04

08009c8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009c94:	2300      	movs	r3, #0
 8009c96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d017      	beq.n	8009cce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009c9e:	4b13      	ldr	r3, [pc, #76]	; (8009cec <vTaskDelay+0x60>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d00a      	beq.n	8009cbc <vTaskDelay+0x30>
	__asm volatile
 8009ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009caa:	f383 8811 	msr	BASEPRI, r3
 8009cae:	f3bf 8f6f 	isb	sy
 8009cb2:	f3bf 8f4f 	dsb	sy
 8009cb6:	60bb      	str	r3, [r7, #8]
}
 8009cb8:	bf00      	nop
 8009cba:	e7fe      	b.n	8009cba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009cbc:	f000 f884 	bl	8009dc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 fb46 	bl	800a354 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009cc8:	f000 f88c 	bl	8009de4 <xTaskResumeAll>
 8009ccc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d107      	bne.n	8009ce4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009cd4:	4b06      	ldr	r3, [pc, #24]	; (8009cf0 <vTaskDelay+0x64>)
 8009cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cda:	601a      	str	r2, [r3, #0]
 8009cdc:	f3bf 8f4f 	dsb	sy
 8009ce0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ce4:	bf00      	nop
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	20000c10 	.word	0x20000c10
 8009cf0:	e000ed04 	.word	0xe000ed04

08009cf4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b08a      	sub	sp, #40	; 0x28
 8009cf8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009d02:	463a      	mov	r2, r7
 8009d04:	1d39      	adds	r1, r7, #4
 8009d06:	f107 0308 	add.w	r3, r7, #8
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7f7 f99e 	bl	800104c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009d10:	6839      	ldr	r1, [r7, #0]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	68ba      	ldr	r2, [r7, #8]
 8009d16:	9202      	str	r2, [sp, #8]
 8009d18:	9301      	str	r3, [sp, #4]
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	9300      	str	r3, [sp, #0]
 8009d1e:	2300      	movs	r3, #0
 8009d20:	460a      	mov	r2, r1
 8009d22:	4921      	ldr	r1, [pc, #132]	; (8009da8 <vTaskStartScheduler+0xb4>)
 8009d24:	4821      	ldr	r0, [pc, #132]	; (8009dac <vTaskStartScheduler+0xb8>)
 8009d26:	f7ff fdfa 	bl	800991e <xTaskCreateStatic>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	4a20      	ldr	r2, [pc, #128]	; (8009db0 <vTaskStartScheduler+0xbc>)
 8009d2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009d30:	4b1f      	ldr	r3, [pc, #124]	; (8009db0 <vTaskStartScheduler+0xbc>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d002      	beq.n	8009d3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	617b      	str	r3, [r7, #20]
 8009d3c:	e001      	b.n	8009d42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d11b      	bne.n	8009d80 <vTaskStartScheduler+0x8c>
	__asm volatile
 8009d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4c:	f383 8811 	msr	BASEPRI, r3
 8009d50:	f3bf 8f6f 	isb	sy
 8009d54:	f3bf 8f4f 	dsb	sy
 8009d58:	613b      	str	r3, [r7, #16]
}
 8009d5a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009d5c:	4b15      	ldr	r3, [pc, #84]	; (8009db4 <vTaskStartScheduler+0xc0>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	3350      	adds	r3, #80	; 0x50
 8009d62:	4a15      	ldr	r2, [pc, #84]	; (8009db8 <vTaskStartScheduler+0xc4>)
 8009d64:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009d66:	4b15      	ldr	r3, [pc, #84]	; (8009dbc <vTaskStartScheduler+0xc8>)
 8009d68:	f04f 32ff 	mov.w	r2, #4294967295
 8009d6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009d6e:	4b14      	ldr	r3, [pc, #80]	; (8009dc0 <vTaskStartScheduler+0xcc>)
 8009d70:	2201      	movs	r2, #1
 8009d72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009d74:	4b13      	ldr	r3, [pc, #76]	; (8009dc4 <vTaskStartScheduler+0xd0>)
 8009d76:	2200      	movs	r2, #0
 8009d78:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009d7a:	f000 fbd9 	bl	800a530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009d7e:	e00e      	b.n	8009d9e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d86:	d10a      	bne.n	8009d9e <vTaskStartScheduler+0xaa>
	__asm volatile
 8009d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8c:	f383 8811 	msr	BASEPRI, r3
 8009d90:	f3bf 8f6f 	isb	sy
 8009d94:	f3bf 8f4f 	dsb	sy
 8009d98:	60fb      	str	r3, [r7, #12]
}
 8009d9a:	bf00      	nop
 8009d9c:	e7fe      	b.n	8009d9c <vTaskStartScheduler+0xa8>
}
 8009d9e:	bf00      	nop
 8009da0:	3718      	adds	r7, #24
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	0800f6ac 	.word	0x0800f6ac
 8009dac:	0800a19d 	.word	0x0800a19d
 8009db0:	20000c0c 	.word	0x20000c0c
 8009db4:	20000ae8 	.word	0x20000ae8
 8009db8:	20000098 	.word	0x20000098
 8009dbc:	20000c08 	.word	0x20000c08
 8009dc0:	20000bf4 	.word	0x20000bf4
 8009dc4:	20000bec 	.word	0x20000bec

08009dc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009dc8:	b480      	push	{r7}
 8009dca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009dcc:	4b04      	ldr	r3, [pc, #16]	; (8009de0 <vTaskSuspendAll+0x18>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	4a03      	ldr	r2, [pc, #12]	; (8009de0 <vTaskSuspendAll+0x18>)
 8009dd4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009dd6:	bf00      	nop
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr
 8009de0:	20000c10 	.word	0x20000c10

08009de4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009dea:	2300      	movs	r3, #0
 8009dec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009dee:	2300      	movs	r3, #0
 8009df0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009df2:	4b41      	ldr	r3, [pc, #260]	; (8009ef8 <xTaskResumeAll+0x114>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d10a      	bne.n	8009e10 <xTaskResumeAll+0x2c>
	__asm volatile
 8009dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfe:	f383 8811 	msr	BASEPRI, r3
 8009e02:	f3bf 8f6f 	isb	sy
 8009e06:	f3bf 8f4f 	dsb	sy
 8009e0a:	603b      	str	r3, [r7, #0]
}
 8009e0c:	bf00      	nop
 8009e0e:	e7fe      	b.n	8009e0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009e10:	f000 fc30 	bl	800a674 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009e14:	4b38      	ldr	r3, [pc, #224]	; (8009ef8 <xTaskResumeAll+0x114>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	4a37      	ldr	r2, [pc, #220]	; (8009ef8 <xTaskResumeAll+0x114>)
 8009e1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e1e:	4b36      	ldr	r3, [pc, #216]	; (8009ef8 <xTaskResumeAll+0x114>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d161      	bne.n	8009eea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009e26:	4b35      	ldr	r3, [pc, #212]	; (8009efc <xTaskResumeAll+0x118>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d05d      	beq.n	8009eea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e2e:	e02e      	b.n	8009e8e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e30:	4b33      	ldr	r3, [pc, #204]	; (8009f00 <xTaskResumeAll+0x11c>)
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	68db      	ldr	r3, [r3, #12]
 8009e36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	3318      	adds	r3, #24
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7ff fd44 	bl	80098ca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	3304      	adds	r3, #4
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7ff fd3f 	bl	80098ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e50:	2201      	movs	r2, #1
 8009e52:	409a      	lsls	r2, r3
 8009e54:	4b2b      	ldr	r3, [pc, #172]	; (8009f04 <xTaskResumeAll+0x120>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	4a2a      	ldr	r2, [pc, #168]	; (8009f04 <xTaskResumeAll+0x120>)
 8009e5c:	6013      	str	r3, [r2, #0]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e62:	4613      	mov	r3, r2
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	4413      	add	r3, r2
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	4a27      	ldr	r2, [pc, #156]	; (8009f08 <xTaskResumeAll+0x124>)
 8009e6c:	441a      	add	r2, r3
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	3304      	adds	r3, #4
 8009e72:	4619      	mov	r1, r3
 8009e74:	4610      	mov	r0, r2
 8009e76:	f7ff fccb 	bl	8009810 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e7e:	4b23      	ldr	r3, [pc, #140]	; (8009f0c <xTaskResumeAll+0x128>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d302      	bcc.n	8009e8e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009e88:	4b21      	ldr	r3, [pc, #132]	; (8009f10 <xTaskResumeAll+0x12c>)
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e8e:	4b1c      	ldr	r3, [pc, #112]	; (8009f00 <xTaskResumeAll+0x11c>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d1cc      	bne.n	8009e30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d001      	beq.n	8009ea0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009e9c:	f000 fa3a 	bl	800a314 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009ea0:	4b1c      	ldr	r3, [pc, #112]	; (8009f14 <xTaskResumeAll+0x130>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d010      	beq.n	8009ece <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009eac:	f000 f836 	bl	8009f1c <xTaskIncrementTick>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d002      	beq.n	8009ebc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009eb6:	4b16      	ldr	r3, [pc, #88]	; (8009f10 <xTaskResumeAll+0x12c>)
 8009eb8:	2201      	movs	r2, #1
 8009eba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	3b01      	subs	r3, #1
 8009ec0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d1f1      	bne.n	8009eac <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009ec8:	4b12      	ldr	r3, [pc, #72]	; (8009f14 <xTaskResumeAll+0x130>)
 8009eca:	2200      	movs	r2, #0
 8009ecc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009ece:	4b10      	ldr	r3, [pc, #64]	; (8009f10 <xTaskResumeAll+0x12c>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d009      	beq.n	8009eea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009eda:	4b0f      	ldr	r3, [pc, #60]	; (8009f18 <xTaskResumeAll+0x134>)
 8009edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ee0:	601a      	str	r2, [r3, #0]
 8009ee2:	f3bf 8f4f 	dsb	sy
 8009ee6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009eea:	f000 fbf3 	bl	800a6d4 <vPortExitCritical>

	return xAlreadyYielded;
 8009eee:	68bb      	ldr	r3, [r7, #8]
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3710      	adds	r7, #16
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	20000c10 	.word	0x20000c10
 8009efc:	20000be8 	.word	0x20000be8
 8009f00:	20000ba8 	.word	0x20000ba8
 8009f04:	20000bf0 	.word	0x20000bf0
 8009f08:	20000aec 	.word	0x20000aec
 8009f0c:	20000ae8 	.word	0x20000ae8
 8009f10:	20000bfc 	.word	0x20000bfc
 8009f14:	20000bf8 	.word	0x20000bf8
 8009f18:	e000ed04 	.word	0xe000ed04

08009f1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b086      	sub	sp, #24
 8009f20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009f22:	2300      	movs	r3, #0
 8009f24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f26:	4b4e      	ldr	r3, [pc, #312]	; (800a060 <xTaskIncrementTick+0x144>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	f040 808e 	bne.w	800a04c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009f30:	4b4c      	ldr	r3, [pc, #304]	; (800a064 <xTaskIncrementTick+0x148>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	3301      	adds	r3, #1
 8009f36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009f38:	4a4a      	ldr	r2, [pc, #296]	; (800a064 <xTaskIncrementTick+0x148>)
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d120      	bne.n	8009f86 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009f44:	4b48      	ldr	r3, [pc, #288]	; (800a068 <xTaskIncrementTick+0x14c>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00a      	beq.n	8009f64 <xTaskIncrementTick+0x48>
	__asm volatile
 8009f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	603b      	str	r3, [r7, #0]
}
 8009f60:	bf00      	nop
 8009f62:	e7fe      	b.n	8009f62 <xTaskIncrementTick+0x46>
 8009f64:	4b40      	ldr	r3, [pc, #256]	; (800a068 <xTaskIncrementTick+0x14c>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	60fb      	str	r3, [r7, #12]
 8009f6a:	4b40      	ldr	r3, [pc, #256]	; (800a06c <xTaskIncrementTick+0x150>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a3e      	ldr	r2, [pc, #248]	; (800a068 <xTaskIncrementTick+0x14c>)
 8009f70:	6013      	str	r3, [r2, #0]
 8009f72:	4a3e      	ldr	r2, [pc, #248]	; (800a06c <xTaskIncrementTick+0x150>)
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6013      	str	r3, [r2, #0]
 8009f78:	4b3d      	ldr	r3, [pc, #244]	; (800a070 <xTaskIncrementTick+0x154>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	4a3c      	ldr	r2, [pc, #240]	; (800a070 <xTaskIncrementTick+0x154>)
 8009f80:	6013      	str	r3, [r2, #0]
 8009f82:	f000 f9c7 	bl	800a314 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009f86:	4b3b      	ldr	r3, [pc, #236]	; (800a074 <xTaskIncrementTick+0x158>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	693a      	ldr	r2, [r7, #16]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d348      	bcc.n	800a022 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f90:	4b35      	ldr	r3, [pc, #212]	; (800a068 <xTaskIncrementTick+0x14c>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d104      	bne.n	8009fa4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f9a:	4b36      	ldr	r3, [pc, #216]	; (800a074 <xTaskIncrementTick+0x158>)
 8009f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009fa0:	601a      	str	r2, [r3, #0]
					break;
 8009fa2:	e03e      	b.n	800a022 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fa4:	4b30      	ldr	r3, [pc, #192]	; (800a068 <xTaskIncrementTick+0x14c>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	68db      	ldr	r3, [r3, #12]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009fb4:	693a      	ldr	r2, [r7, #16]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d203      	bcs.n	8009fc4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009fbc:	4a2d      	ldr	r2, [pc, #180]	; (800a074 <xTaskIncrementTick+0x158>)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009fc2:	e02e      	b.n	800a022 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	3304      	adds	r3, #4
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7ff fc7e 	bl	80098ca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d004      	beq.n	8009fe0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	3318      	adds	r3, #24
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7ff fc75 	bl	80098ca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	409a      	lsls	r2, r3
 8009fe8:	4b23      	ldr	r3, [pc, #140]	; (800a078 <xTaskIncrementTick+0x15c>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4313      	orrs	r3, r2
 8009fee:	4a22      	ldr	r2, [pc, #136]	; (800a078 <xTaskIncrementTick+0x15c>)
 8009ff0:	6013      	str	r3, [r2, #0]
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff6:	4613      	mov	r3, r2
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	4413      	add	r3, r2
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	4a1f      	ldr	r2, [pc, #124]	; (800a07c <xTaskIncrementTick+0x160>)
 800a000:	441a      	add	r2, r3
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	3304      	adds	r3, #4
 800a006:	4619      	mov	r1, r3
 800a008:	4610      	mov	r0, r2
 800a00a:	f7ff fc01 	bl	8009810 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a012:	4b1b      	ldr	r3, [pc, #108]	; (800a080 <xTaskIncrementTick+0x164>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a018:	429a      	cmp	r2, r3
 800a01a:	d3b9      	bcc.n	8009f90 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a01c:	2301      	movs	r3, #1
 800a01e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a020:	e7b6      	b.n	8009f90 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a022:	4b17      	ldr	r3, [pc, #92]	; (800a080 <xTaskIncrementTick+0x164>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a028:	4914      	ldr	r1, [pc, #80]	; (800a07c <xTaskIncrementTick+0x160>)
 800a02a:	4613      	mov	r3, r2
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	4413      	add	r3, r2
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	440b      	add	r3, r1
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2b01      	cmp	r3, #1
 800a038:	d901      	bls.n	800a03e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a03a:	2301      	movs	r3, #1
 800a03c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a03e:	4b11      	ldr	r3, [pc, #68]	; (800a084 <xTaskIncrementTick+0x168>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d007      	beq.n	800a056 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a046:	2301      	movs	r3, #1
 800a048:	617b      	str	r3, [r7, #20]
 800a04a:	e004      	b.n	800a056 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a04c:	4b0e      	ldr	r3, [pc, #56]	; (800a088 <xTaskIncrementTick+0x16c>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	3301      	adds	r3, #1
 800a052:	4a0d      	ldr	r2, [pc, #52]	; (800a088 <xTaskIncrementTick+0x16c>)
 800a054:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a056:	697b      	ldr	r3, [r7, #20]
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3718      	adds	r7, #24
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	20000c10 	.word	0x20000c10
 800a064:	20000bec 	.word	0x20000bec
 800a068:	20000ba0 	.word	0x20000ba0
 800a06c:	20000ba4 	.word	0x20000ba4
 800a070:	20000c00 	.word	0x20000c00
 800a074:	20000c08 	.word	0x20000c08
 800a078:	20000bf0 	.word	0x20000bf0
 800a07c:	20000aec 	.word	0x20000aec
 800a080:	20000ae8 	.word	0x20000ae8
 800a084:	20000bfc 	.word	0x20000bfc
 800a088:	20000bf8 	.word	0x20000bf8

0800a08c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b088      	sub	sp, #32
 800a090:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a092:	4b3c      	ldr	r3, [pc, #240]	; (800a184 <vTaskSwitchContext+0xf8>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d003      	beq.n	800a0a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a09a:	4b3b      	ldr	r3, [pc, #236]	; (800a188 <vTaskSwitchContext+0xfc>)
 800a09c:	2201      	movs	r2, #1
 800a09e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a0a0:	e06b      	b.n	800a17a <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 800a0a2:	4b39      	ldr	r3, [pc, #228]	; (800a188 <vTaskSwitchContext+0xfc>)
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800a0a8:	4b38      	ldr	r3, [pc, #224]	; (800a18c <vTaskSwitchContext+0x100>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ae:	61fb      	str	r3, [r7, #28]
 800a0b0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800a0b4:	61bb      	str	r3, [r7, #24]
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	69ba      	ldr	r2, [r7, #24]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d111      	bne.n	800a0e4 <vTaskSwitchContext+0x58>
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	3304      	adds	r3, #4
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	69ba      	ldr	r2, [r7, #24]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d10b      	bne.n	800a0e4 <vTaskSwitchContext+0x58>
 800a0cc:	69fb      	ldr	r3, [r7, #28]
 800a0ce:	3308      	adds	r3, #8
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	69ba      	ldr	r2, [r7, #24]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d105      	bne.n	800a0e4 <vTaskSwitchContext+0x58>
 800a0d8:	69fb      	ldr	r3, [r7, #28]
 800a0da:	330c      	adds	r3, #12
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	69ba      	ldr	r2, [r7, #24]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d008      	beq.n	800a0f6 <vTaskSwitchContext+0x6a>
 800a0e4:	4b29      	ldr	r3, [pc, #164]	; (800a18c <vTaskSwitchContext+0x100>)
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	4b28      	ldr	r3, [pc, #160]	; (800a18c <vTaskSwitchContext+0x100>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	3334      	adds	r3, #52	; 0x34
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	4610      	mov	r0, r2
 800a0f2:	f7f6 ff98 	bl	8001026 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0f6:	4b26      	ldr	r3, [pc, #152]	; (800a190 <vTaskSwitchContext+0x104>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	fab3 f383 	clz	r3, r3
 800a102:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a104:	7afb      	ldrb	r3, [r7, #11]
 800a106:	f1c3 031f 	rsb	r3, r3, #31
 800a10a:	617b      	str	r3, [r7, #20]
 800a10c:	4921      	ldr	r1, [pc, #132]	; (800a194 <vTaskSwitchContext+0x108>)
 800a10e:	697a      	ldr	r2, [r7, #20]
 800a110:	4613      	mov	r3, r2
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	4413      	add	r3, r2
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	440b      	add	r3, r1
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d10a      	bne.n	800a136 <vTaskSwitchContext+0xaa>
	__asm volatile
 800a120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a124:	f383 8811 	msr	BASEPRI, r3
 800a128:	f3bf 8f6f 	isb	sy
 800a12c:	f3bf 8f4f 	dsb	sy
 800a130:	607b      	str	r3, [r7, #4]
}
 800a132:	bf00      	nop
 800a134:	e7fe      	b.n	800a134 <vTaskSwitchContext+0xa8>
 800a136:	697a      	ldr	r2, [r7, #20]
 800a138:	4613      	mov	r3, r2
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	4413      	add	r3, r2
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	4a14      	ldr	r2, [pc, #80]	; (800a194 <vTaskSwitchContext+0x108>)
 800a142:	4413      	add	r3, r2
 800a144:	613b      	str	r3, [r7, #16]
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	685a      	ldr	r2, [r3, #4]
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	605a      	str	r2, [r3, #4]
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	685a      	ldr	r2, [r3, #4]
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	3308      	adds	r3, #8
 800a158:	429a      	cmp	r2, r3
 800a15a:	d104      	bne.n	800a166 <vTaskSwitchContext+0xda>
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	685a      	ldr	r2, [r3, #4]
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	605a      	str	r2, [r3, #4]
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	4a07      	ldr	r2, [pc, #28]	; (800a18c <vTaskSwitchContext+0x100>)
 800a16e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a170:	4b06      	ldr	r3, [pc, #24]	; (800a18c <vTaskSwitchContext+0x100>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	3350      	adds	r3, #80	; 0x50
 800a176:	4a08      	ldr	r2, [pc, #32]	; (800a198 <vTaskSwitchContext+0x10c>)
 800a178:	6013      	str	r3, [r2, #0]
}
 800a17a:	bf00      	nop
 800a17c:	3720      	adds	r7, #32
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	20000c10 	.word	0x20000c10
 800a188:	20000bfc 	.word	0x20000bfc
 800a18c:	20000ae8 	.word	0x20000ae8
 800a190:	20000bf0 	.word	0x20000bf0
 800a194:	20000aec 	.word	0x20000aec
 800a198:	20000098 	.word	0x20000098

0800a19c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a1a4:	f000 f854 	bl	800a250 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a1a8:	4b07      	ldr	r3, [pc, #28]	; (800a1c8 <prvIdleTask+0x2c>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d907      	bls.n	800a1c0 <prvIdleTask+0x24>
			{
				taskYIELD();
 800a1b0:	4b06      	ldr	r3, [pc, #24]	; (800a1cc <prvIdleTask+0x30>)
 800a1b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1b6:	601a      	str	r2, [r3, #0]
 800a1b8:	f3bf 8f4f 	dsb	sy
 800a1bc:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800a1c0:	f7f6 ff2a 	bl	8001018 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800a1c4:	e7ee      	b.n	800a1a4 <prvIdleTask+0x8>
 800a1c6:	bf00      	nop
 800a1c8:	20000aec 	.word	0x20000aec
 800a1cc:	e000ed04 	.word	0xe000ed04

0800a1d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	607b      	str	r3, [r7, #4]
 800a1da:	e00c      	b.n	800a1f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	4613      	mov	r3, r2
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	4413      	add	r3, r2
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	4a12      	ldr	r2, [pc, #72]	; (800a230 <prvInitialiseTaskLists+0x60>)
 800a1e8:	4413      	add	r3, r2
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7ff fae3 	bl	80097b6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	607b      	str	r3, [r7, #4]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2b06      	cmp	r3, #6
 800a1fa:	d9ef      	bls.n	800a1dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a1fc:	480d      	ldr	r0, [pc, #52]	; (800a234 <prvInitialiseTaskLists+0x64>)
 800a1fe:	f7ff fada 	bl	80097b6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a202:	480d      	ldr	r0, [pc, #52]	; (800a238 <prvInitialiseTaskLists+0x68>)
 800a204:	f7ff fad7 	bl	80097b6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a208:	480c      	ldr	r0, [pc, #48]	; (800a23c <prvInitialiseTaskLists+0x6c>)
 800a20a:	f7ff fad4 	bl	80097b6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a20e:	480c      	ldr	r0, [pc, #48]	; (800a240 <prvInitialiseTaskLists+0x70>)
 800a210:	f7ff fad1 	bl	80097b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a214:	480b      	ldr	r0, [pc, #44]	; (800a244 <prvInitialiseTaskLists+0x74>)
 800a216:	f7ff face 	bl	80097b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a21a:	4b0b      	ldr	r3, [pc, #44]	; (800a248 <prvInitialiseTaskLists+0x78>)
 800a21c:	4a05      	ldr	r2, [pc, #20]	; (800a234 <prvInitialiseTaskLists+0x64>)
 800a21e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a220:	4b0a      	ldr	r3, [pc, #40]	; (800a24c <prvInitialiseTaskLists+0x7c>)
 800a222:	4a05      	ldr	r2, [pc, #20]	; (800a238 <prvInitialiseTaskLists+0x68>)
 800a224:	601a      	str	r2, [r3, #0]
}
 800a226:	bf00      	nop
 800a228:	3708      	adds	r7, #8
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	20000aec 	.word	0x20000aec
 800a234:	20000b78 	.word	0x20000b78
 800a238:	20000b8c 	.word	0x20000b8c
 800a23c:	20000ba8 	.word	0x20000ba8
 800a240:	20000bbc 	.word	0x20000bbc
 800a244:	20000bd4 	.word	0x20000bd4
 800a248:	20000ba0 	.word	0x20000ba0
 800a24c:	20000ba4 	.word	0x20000ba4

0800a250 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a256:	e019      	b.n	800a28c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a258:	f000 fa0c 	bl	800a674 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a25c:	4b10      	ldr	r3, [pc, #64]	; (800a2a0 <prvCheckTasksWaitingTermination+0x50>)
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	3304      	adds	r3, #4
 800a268:	4618      	mov	r0, r3
 800a26a:	f7ff fb2e 	bl	80098ca <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a26e:	4b0d      	ldr	r3, [pc, #52]	; (800a2a4 <prvCheckTasksWaitingTermination+0x54>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	3b01      	subs	r3, #1
 800a274:	4a0b      	ldr	r2, [pc, #44]	; (800a2a4 <prvCheckTasksWaitingTermination+0x54>)
 800a276:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a278:	4b0b      	ldr	r3, [pc, #44]	; (800a2a8 <prvCheckTasksWaitingTermination+0x58>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	3b01      	subs	r3, #1
 800a27e:	4a0a      	ldr	r2, [pc, #40]	; (800a2a8 <prvCheckTasksWaitingTermination+0x58>)
 800a280:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a282:	f000 fa27 	bl	800a6d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 f810 	bl	800a2ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a28c:	4b06      	ldr	r3, [pc, #24]	; (800a2a8 <prvCheckTasksWaitingTermination+0x58>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d1e1      	bne.n	800a258 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a294:	bf00      	nop
 800a296:	bf00      	nop
 800a298:	3708      	adds	r7, #8
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	20000bbc 	.word	0x20000bbc
 800a2a4:	20000be8 	.word	0x20000be8
 800a2a8:	20000bd0 	.word	0x20000bd0

0800a2ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	3350      	adds	r3, #80	; 0x50
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f001 fd01 	bl	800bcc0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d108      	bne.n	800a2da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f000 fb83 	bl	800a9d8 <vPortFree>
				vPortFree( pxTCB );
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 fb80 	bl	800a9d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a2d8:	e018      	b.n	800a30c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d103      	bne.n	800a2ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 fb77 	bl	800a9d8 <vPortFree>
	}
 800a2ea:	e00f      	b.n	800a30c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800a2f2:	2b02      	cmp	r3, #2
 800a2f4:	d00a      	beq.n	800a30c <prvDeleteTCB+0x60>
	__asm volatile
 800a2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	60fb      	str	r3, [r7, #12]
}
 800a308:	bf00      	nop
 800a30a:	e7fe      	b.n	800a30a <prvDeleteTCB+0x5e>
	}
 800a30c:	bf00      	nop
 800a30e:	3710      	adds	r7, #16
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a31a:	4b0c      	ldr	r3, [pc, #48]	; (800a34c <prvResetNextTaskUnblockTime+0x38>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d104      	bne.n	800a32e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a324:	4b0a      	ldr	r3, [pc, #40]	; (800a350 <prvResetNextTaskUnblockTime+0x3c>)
 800a326:	f04f 32ff 	mov.w	r2, #4294967295
 800a32a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a32c:	e008      	b.n	800a340 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a32e:	4b07      	ldr	r3, [pc, #28]	; (800a34c <prvResetNextTaskUnblockTime+0x38>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	4a04      	ldr	r2, [pc, #16]	; (800a350 <prvResetNextTaskUnblockTime+0x3c>)
 800a33e:	6013      	str	r3, [r2, #0]
}
 800a340:	bf00      	nop
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr
 800a34c:	20000ba0 	.word	0x20000ba0
 800a350:	20000c08 	.word	0x20000c08

0800a354 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a35e:	4b29      	ldr	r3, [pc, #164]	; (800a404 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a364:	4b28      	ldr	r3, [pc, #160]	; (800a408 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	3304      	adds	r3, #4
 800a36a:	4618      	mov	r0, r3
 800a36c:	f7ff faad 	bl	80098ca <uxListRemove>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d10b      	bne.n	800a38e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a376:	4b24      	ldr	r3, [pc, #144]	; (800a408 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37c:	2201      	movs	r2, #1
 800a37e:	fa02 f303 	lsl.w	r3, r2, r3
 800a382:	43da      	mvns	r2, r3
 800a384:	4b21      	ldr	r3, [pc, #132]	; (800a40c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4013      	ands	r3, r2
 800a38a:	4a20      	ldr	r2, [pc, #128]	; (800a40c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a38c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a394:	d10a      	bne.n	800a3ac <prvAddCurrentTaskToDelayedList+0x58>
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d007      	beq.n	800a3ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a39c:	4b1a      	ldr	r3, [pc, #104]	; (800a408 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	3304      	adds	r3, #4
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	481a      	ldr	r0, [pc, #104]	; (800a410 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a3a6:	f7ff fa33 	bl	8009810 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a3aa:	e026      	b.n	800a3fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a3b4:	4b14      	ldr	r3, [pc, #80]	; (800a408 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	68ba      	ldr	r2, [r7, #8]
 800a3ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a3bc:	68ba      	ldr	r2, [r7, #8]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d209      	bcs.n	800a3d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3c4:	4b13      	ldr	r3, [pc, #76]	; (800a414 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	4b0f      	ldr	r3, [pc, #60]	; (800a408 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	3304      	adds	r3, #4
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	4610      	mov	r0, r2
 800a3d2:	f7ff fa41 	bl	8009858 <vListInsert>
}
 800a3d6:	e010      	b.n	800a3fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3d8:	4b0f      	ldr	r3, [pc, #60]	; (800a418 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	4b0a      	ldr	r3, [pc, #40]	; (800a408 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	3304      	adds	r3, #4
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	4610      	mov	r0, r2
 800a3e6:	f7ff fa37 	bl	8009858 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a3ea:	4b0c      	ldr	r3, [pc, #48]	; (800a41c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	68ba      	ldr	r2, [r7, #8]
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d202      	bcs.n	800a3fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a3f4:	4a09      	ldr	r2, [pc, #36]	; (800a41c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	6013      	str	r3, [r2, #0]
}
 800a3fa:	bf00      	nop
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	20000bec 	.word	0x20000bec
 800a408:	20000ae8 	.word	0x20000ae8
 800a40c:	20000bf0 	.word	0x20000bf0
 800a410:	20000bd4 	.word	0x20000bd4
 800a414:	20000ba4 	.word	0x20000ba4
 800a418:	20000ba0 	.word	0x20000ba0
 800a41c:	20000c08 	.word	0x20000c08

0800a420 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a420:	b480      	push	{r7}
 800a422:	b085      	sub	sp, #20
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	3b04      	subs	r3, #4
 800a430:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a438:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	3b04      	subs	r3, #4
 800a43e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	f023 0201 	bic.w	r2, r3, #1
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	3b04      	subs	r3, #4
 800a44e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a450:	4a0c      	ldr	r2, [pc, #48]	; (800a484 <pxPortInitialiseStack+0x64>)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	3b14      	subs	r3, #20
 800a45a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	3b04      	subs	r3, #4
 800a466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f06f 0202 	mvn.w	r2, #2
 800a46e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	3b20      	subs	r3, #32
 800a474:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a476:	68fb      	ldr	r3, [r7, #12]
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3714      	adds	r7, #20
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr
 800a484:	0800a489 	.word	0x0800a489

0800a488 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a488:	b480      	push	{r7}
 800a48a:	b085      	sub	sp, #20
 800a48c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a48e:	2300      	movs	r3, #0
 800a490:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a492:	4b12      	ldr	r3, [pc, #72]	; (800a4dc <prvTaskExitError+0x54>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a49a:	d00a      	beq.n	800a4b2 <prvTaskExitError+0x2a>
	__asm volatile
 800a49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a0:	f383 8811 	msr	BASEPRI, r3
 800a4a4:	f3bf 8f6f 	isb	sy
 800a4a8:	f3bf 8f4f 	dsb	sy
 800a4ac:	60fb      	str	r3, [r7, #12]
}
 800a4ae:	bf00      	nop
 800a4b0:	e7fe      	b.n	800a4b0 <prvTaskExitError+0x28>
	__asm volatile
 800a4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b6:	f383 8811 	msr	BASEPRI, r3
 800a4ba:	f3bf 8f6f 	isb	sy
 800a4be:	f3bf 8f4f 	dsb	sy
 800a4c2:	60bb      	str	r3, [r7, #8]
}
 800a4c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a4c6:	bf00      	nop
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d0fc      	beq.n	800a4c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a4ce:	bf00      	nop
 800a4d0:	bf00      	nop
 800a4d2:	3714      	adds	r7, #20
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr
 800a4dc:	20000094 	.word	0x20000094

0800a4e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a4e0:	4b07      	ldr	r3, [pc, #28]	; (800a500 <pxCurrentTCBConst2>)
 800a4e2:	6819      	ldr	r1, [r3, #0]
 800a4e4:	6808      	ldr	r0, [r1, #0]
 800a4e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ea:	f380 8809 	msr	PSP, r0
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	f04f 0000 	mov.w	r0, #0
 800a4f6:	f380 8811 	msr	BASEPRI, r0
 800a4fa:	4770      	bx	lr
 800a4fc:	f3af 8000 	nop.w

0800a500 <pxCurrentTCBConst2>:
 800a500:	20000ae8 	.word	0x20000ae8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a504:	bf00      	nop
 800a506:	bf00      	nop

0800a508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a508:	4808      	ldr	r0, [pc, #32]	; (800a52c <prvPortStartFirstTask+0x24>)
 800a50a:	6800      	ldr	r0, [r0, #0]
 800a50c:	6800      	ldr	r0, [r0, #0]
 800a50e:	f380 8808 	msr	MSP, r0
 800a512:	f04f 0000 	mov.w	r0, #0
 800a516:	f380 8814 	msr	CONTROL, r0
 800a51a:	b662      	cpsie	i
 800a51c:	b661      	cpsie	f
 800a51e:	f3bf 8f4f 	dsb	sy
 800a522:	f3bf 8f6f 	isb	sy
 800a526:	df00      	svc	0
 800a528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a52a:	bf00      	nop
 800a52c:	e000ed08 	.word	0xe000ed08

0800a530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a536:	4b46      	ldr	r3, [pc, #280]	; (800a650 <xPortStartScheduler+0x120>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a46      	ldr	r2, [pc, #280]	; (800a654 <xPortStartScheduler+0x124>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d10a      	bne.n	800a556 <xPortStartScheduler+0x26>
	__asm volatile
 800a540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a544:	f383 8811 	msr	BASEPRI, r3
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	f3bf 8f4f 	dsb	sy
 800a550:	613b      	str	r3, [r7, #16]
}
 800a552:	bf00      	nop
 800a554:	e7fe      	b.n	800a554 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a556:	4b3e      	ldr	r3, [pc, #248]	; (800a650 <xPortStartScheduler+0x120>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a3f      	ldr	r2, [pc, #252]	; (800a658 <xPortStartScheduler+0x128>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d10a      	bne.n	800a576 <xPortStartScheduler+0x46>
	__asm volatile
 800a560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a564:	f383 8811 	msr	BASEPRI, r3
 800a568:	f3bf 8f6f 	isb	sy
 800a56c:	f3bf 8f4f 	dsb	sy
 800a570:	60fb      	str	r3, [r7, #12]
}
 800a572:	bf00      	nop
 800a574:	e7fe      	b.n	800a574 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a576:	4b39      	ldr	r3, [pc, #228]	; (800a65c <xPortStartScheduler+0x12c>)
 800a578:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	22ff      	movs	r2, #255	; 0xff
 800a586:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a590:	78fb      	ldrb	r3, [r7, #3]
 800a592:	b2db      	uxtb	r3, r3
 800a594:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a598:	b2da      	uxtb	r2, r3
 800a59a:	4b31      	ldr	r3, [pc, #196]	; (800a660 <xPortStartScheduler+0x130>)
 800a59c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a59e:	4b31      	ldr	r3, [pc, #196]	; (800a664 <xPortStartScheduler+0x134>)
 800a5a0:	2207      	movs	r2, #7
 800a5a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5a4:	e009      	b.n	800a5ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a5a6:	4b2f      	ldr	r3, [pc, #188]	; (800a664 <xPortStartScheduler+0x134>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	3b01      	subs	r3, #1
 800a5ac:	4a2d      	ldr	r2, [pc, #180]	; (800a664 <xPortStartScheduler+0x134>)
 800a5ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a5b0:	78fb      	ldrb	r3, [r7, #3]
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	005b      	lsls	r3, r3, #1
 800a5b6:	b2db      	uxtb	r3, r3
 800a5b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5ba:	78fb      	ldrb	r3, [r7, #3]
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5c2:	2b80      	cmp	r3, #128	; 0x80
 800a5c4:	d0ef      	beq.n	800a5a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a5c6:	4b27      	ldr	r3, [pc, #156]	; (800a664 <xPortStartScheduler+0x134>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f1c3 0307 	rsb	r3, r3, #7
 800a5ce:	2b04      	cmp	r3, #4
 800a5d0:	d00a      	beq.n	800a5e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d6:	f383 8811 	msr	BASEPRI, r3
 800a5da:	f3bf 8f6f 	isb	sy
 800a5de:	f3bf 8f4f 	dsb	sy
 800a5e2:	60bb      	str	r3, [r7, #8]
}
 800a5e4:	bf00      	nop
 800a5e6:	e7fe      	b.n	800a5e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a5e8:	4b1e      	ldr	r3, [pc, #120]	; (800a664 <xPortStartScheduler+0x134>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	021b      	lsls	r3, r3, #8
 800a5ee:	4a1d      	ldr	r2, [pc, #116]	; (800a664 <xPortStartScheduler+0x134>)
 800a5f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a5f2:	4b1c      	ldr	r3, [pc, #112]	; (800a664 <xPortStartScheduler+0x134>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a5fa:	4a1a      	ldr	r2, [pc, #104]	; (800a664 <xPortStartScheduler+0x134>)
 800a5fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	b2da      	uxtb	r2, r3
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a606:	4b18      	ldr	r3, [pc, #96]	; (800a668 <xPortStartScheduler+0x138>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a17      	ldr	r2, [pc, #92]	; (800a668 <xPortStartScheduler+0x138>)
 800a60c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a610:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a612:	4b15      	ldr	r3, [pc, #84]	; (800a668 <xPortStartScheduler+0x138>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a14      	ldr	r2, [pc, #80]	; (800a668 <xPortStartScheduler+0x138>)
 800a618:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a61c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a61e:	f000 f8dd 	bl	800a7dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a622:	4b12      	ldr	r3, [pc, #72]	; (800a66c <xPortStartScheduler+0x13c>)
 800a624:	2200      	movs	r2, #0
 800a626:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a628:	f000 f8fc 	bl	800a824 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a62c:	4b10      	ldr	r3, [pc, #64]	; (800a670 <xPortStartScheduler+0x140>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4a0f      	ldr	r2, [pc, #60]	; (800a670 <xPortStartScheduler+0x140>)
 800a632:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a636:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a638:	f7ff ff66 	bl	800a508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a63c:	f7ff fd26 	bl	800a08c <vTaskSwitchContext>
	prvTaskExitError();
 800a640:	f7ff ff22 	bl	800a488 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3718      	adds	r7, #24
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	e000ed00 	.word	0xe000ed00
 800a654:	410fc271 	.word	0x410fc271
 800a658:	410fc270 	.word	0x410fc270
 800a65c:	e000e400 	.word	0xe000e400
 800a660:	20000c14 	.word	0x20000c14
 800a664:	20000c18 	.word	0x20000c18
 800a668:	e000ed20 	.word	0xe000ed20
 800a66c:	20000094 	.word	0x20000094
 800a670:	e000ef34 	.word	0xe000ef34

0800a674 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
	__asm volatile
 800a67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67e:	f383 8811 	msr	BASEPRI, r3
 800a682:	f3bf 8f6f 	isb	sy
 800a686:	f3bf 8f4f 	dsb	sy
 800a68a:	607b      	str	r3, [r7, #4]
}
 800a68c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a68e:	4b0f      	ldr	r3, [pc, #60]	; (800a6cc <vPortEnterCritical+0x58>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	3301      	adds	r3, #1
 800a694:	4a0d      	ldr	r2, [pc, #52]	; (800a6cc <vPortEnterCritical+0x58>)
 800a696:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a698:	4b0c      	ldr	r3, [pc, #48]	; (800a6cc <vPortEnterCritical+0x58>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d10f      	bne.n	800a6c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a6a0:	4b0b      	ldr	r3, [pc, #44]	; (800a6d0 <vPortEnterCritical+0x5c>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d00a      	beq.n	800a6c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ae:	f383 8811 	msr	BASEPRI, r3
 800a6b2:	f3bf 8f6f 	isb	sy
 800a6b6:	f3bf 8f4f 	dsb	sy
 800a6ba:	603b      	str	r3, [r7, #0]
}
 800a6bc:	bf00      	nop
 800a6be:	e7fe      	b.n	800a6be <vPortEnterCritical+0x4a>
	}
}
 800a6c0:	bf00      	nop
 800a6c2:	370c      	adds	r7, #12
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr
 800a6cc:	20000094 	.word	0x20000094
 800a6d0:	e000ed04 	.word	0xe000ed04

0800a6d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a6da:	4b12      	ldr	r3, [pc, #72]	; (800a724 <vPortExitCritical+0x50>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d10a      	bne.n	800a6f8 <vPortExitCritical+0x24>
	__asm volatile
 800a6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e6:	f383 8811 	msr	BASEPRI, r3
 800a6ea:	f3bf 8f6f 	isb	sy
 800a6ee:	f3bf 8f4f 	dsb	sy
 800a6f2:	607b      	str	r3, [r7, #4]
}
 800a6f4:	bf00      	nop
 800a6f6:	e7fe      	b.n	800a6f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a6f8:	4b0a      	ldr	r3, [pc, #40]	; (800a724 <vPortExitCritical+0x50>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	3b01      	subs	r3, #1
 800a6fe:	4a09      	ldr	r2, [pc, #36]	; (800a724 <vPortExitCritical+0x50>)
 800a700:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a702:	4b08      	ldr	r3, [pc, #32]	; (800a724 <vPortExitCritical+0x50>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d105      	bne.n	800a716 <vPortExitCritical+0x42>
 800a70a:	2300      	movs	r3, #0
 800a70c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a714:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a716:	bf00      	nop
 800a718:	370c      	adds	r7, #12
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	20000094 	.word	0x20000094
	...

0800a730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a730:	f3ef 8009 	mrs	r0, PSP
 800a734:	f3bf 8f6f 	isb	sy
 800a738:	4b15      	ldr	r3, [pc, #84]	; (800a790 <pxCurrentTCBConst>)
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	f01e 0f10 	tst.w	lr, #16
 800a740:	bf08      	it	eq
 800a742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a74a:	6010      	str	r0, [r2, #0]
 800a74c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a750:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a754:	f380 8811 	msr	BASEPRI, r0
 800a758:	f3bf 8f4f 	dsb	sy
 800a75c:	f3bf 8f6f 	isb	sy
 800a760:	f7ff fc94 	bl	800a08c <vTaskSwitchContext>
 800a764:	f04f 0000 	mov.w	r0, #0
 800a768:	f380 8811 	msr	BASEPRI, r0
 800a76c:	bc09      	pop	{r0, r3}
 800a76e:	6819      	ldr	r1, [r3, #0]
 800a770:	6808      	ldr	r0, [r1, #0]
 800a772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a776:	f01e 0f10 	tst.w	lr, #16
 800a77a:	bf08      	it	eq
 800a77c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a780:	f380 8809 	msr	PSP, r0
 800a784:	f3bf 8f6f 	isb	sy
 800a788:	4770      	bx	lr
 800a78a:	bf00      	nop
 800a78c:	f3af 8000 	nop.w

0800a790 <pxCurrentTCBConst>:
 800a790:	20000ae8 	.word	0x20000ae8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a794:	bf00      	nop
 800a796:	bf00      	nop

0800a798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
	__asm volatile
 800a79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a2:	f383 8811 	msr	BASEPRI, r3
 800a7a6:	f3bf 8f6f 	isb	sy
 800a7aa:	f3bf 8f4f 	dsb	sy
 800a7ae:	607b      	str	r3, [r7, #4]
}
 800a7b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a7b2:	f7ff fbb3 	bl	8009f1c <xTaskIncrementTick>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d003      	beq.n	800a7c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a7bc:	4b06      	ldr	r3, [pc, #24]	; (800a7d8 <SysTick_Handler+0x40>)
 800a7be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7c2:	601a      	str	r2, [r3, #0]
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	f383 8811 	msr	BASEPRI, r3
}
 800a7ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a7d0:	bf00      	nop
 800a7d2:	3708      	adds	r7, #8
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	e000ed04 	.word	0xe000ed04

0800a7dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a7dc:	b480      	push	{r7}
 800a7de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a7e0:	4b0b      	ldr	r3, [pc, #44]	; (800a810 <vPortSetupTimerInterrupt+0x34>)
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a7e6:	4b0b      	ldr	r3, [pc, #44]	; (800a814 <vPortSetupTimerInterrupt+0x38>)
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a7ec:	4b0a      	ldr	r3, [pc, #40]	; (800a818 <vPortSetupTimerInterrupt+0x3c>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a0a      	ldr	r2, [pc, #40]	; (800a81c <vPortSetupTimerInterrupt+0x40>)
 800a7f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7f6:	099b      	lsrs	r3, r3, #6
 800a7f8:	4a09      	ldr	r2, [pc, #36]	; (800a820 <vPortSetupTimerInterrupt+0x44>)
 800a7fa:	3b01      	subs	r3, #1
 800a7fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a7fe:	4b04      	ldr	r3, [pc, #16]	; (800a810 <vPortSetupTimerInterrupt+0x34>)
 800a800:	2207      	movs	r2, #7
 800a802:	601a      	str	r2, [r3, #0]
}
 800a804:	bf00      	nop
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr
 800a80e:	bf00      	nop
 800a810:	e000e010 	.word	0xe000e010
 800a814:	e000e018 	.word	0xe000e018
 800a818:	20000010 	.word	0x20000010
 800a81c:	10624dd3 	.word	0x10624dd3
 800a820:	e000e014 	.word	0xe000e014

0800a824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a824:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a834 <vPortEnableVFP+0x10>
 800a828:	6801      	ldr	r1, [r0, #0]
 800a82a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a82e:	6001      	str	r1, [r0, #0]
 800a830:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a832:	bf00      	nop
 800a834:	e000ed88 	.word	0xe000ed88

0800a838 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b08a      	sub	sp, #40	; 0x28
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a840:	2300      	movs	r3, #0
 800a842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a844:	f7ff fac0 	bl	8009dc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a848:	4b5d      	ldr	r3, [pc, #372]	; (800a9c0 <pvPortMalloc+0x188>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d101      	bne.n	800a854 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a850:	f000 f924 	bl	800aa9c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a854:	4b5b      	ldr	r3, [pc, #364]	; (800a9c4 <pvPortMalloc+0x18c>)
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	4013      	ands	r3, r2
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	f040 8093 	bne.w	800a988 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d01d      	beq.n	800a8a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a868:	2208      	movs	r2, #8
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4413      	add	r3, r2
 800a86e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f003 0307 	and.w	r3, r3, #7
 800a876:	2b00      	cmp	r3, #0
 800a878:	d014      	beq.n	800a8a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f023 0307 	bic.w	r3, r3, #7
 800a880:	3308      	adds	r3, #8
 800a882:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f003 0307 	and.w	r3, r3, #7
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00a      	beq.n	800a8a4 <pvPortMalloc+0x6c>
	__asm volatile
 800a88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a892:	f383 8811 	msr	BASEPRI, r3
 800a896:	f3bf 8f6f 	isb	sy
 800a89a:	f3bf 8f4f 	dsb	sy
 800a89e:	617b      	str	r3, [r7, #20]
}
 800a8a0:	bf00      	nop
 800a8a2:	e7fe      	b.n	800a8a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d06e      	beq.n	800a988 <pvPortMalloc+0x150>
 800a8aa:	4b47      	ldr	r3, [pc, #284]	; (800a9c8 <pvPortMalloc+0x190>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d869      	bhi.n	800a988 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a8b4:	4b45      	ldr	r3, [pc, #276]	; (800a9cc <pvPortMalloc+0x194>)
 800a8b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a8b8:	4b44      	ldr	r3, [pc, #272]	; (800a9cc <pvPortMalloc+0x194>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a8be:	e004      	b.n	800a8ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d903      	bls.n	800a8dc <pvPortMalloc+0xa4>
 800a8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d1f1      	bne.n	800a8c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a8dc:	4b38      	ldr	r3, [pc, #224]	; (800a9c0 <pvPortMalloc+0x188>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d050      	beq.n	800a988 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a8e6:	6a3b      	ldr	r3, [r7, #32]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	2208      	movs	r2, #8
 800a8ec:	4413      	add	r3, r2
 800a8ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f2:	681a      	ldr	r2, [r3, #0]
 800a8f4:	6a3b      	ldr	r3, [r7, #32]
 800a8f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fa:	685a      	ldr	r2, [r3, #4]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	1ad2      	subs	r2, r2, r3
 800a900:	2308      	movs	r3, #8
 800a902:	005b      	lsls	r3, r3, #1
 800a904:	429a      	cmp	r2, r3
 800a906:	d91f      	bls.n	800a948 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	4413      	add	r3, r2
 800a90e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a910:	69bb      	ldr	r3, [r7, #24]
 800a912:	f003 0307 	and.w	r3, r3, #7
 800a916:	2b00      	cmp	r3, #0
 800a918:	d00a      	beq.n	800a930 <pvPortMalloc+0xf8>
	__asm volatile
 800a91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91e:	f383 8811 	msr	BASEPRI, r3
 800a922:	f3bf 8f6f 	isb	sy
 800a926:	f3bf 8f4f 	dsb	sy
 800a92a:	613b      	str	r3, [r7, #16]
}
 800a92c:	bf00      	nop
 800a92e:	e7fe      	b.n	800a92e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a932:	685a      	ldr	r2, [r3, #4]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	1ad2      	subs	r2, r2, r3
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a942:	69b8      	ldr	r0, [r7, #24]
 800a944:	f000 f90c 	bl	800ab60 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a948:	4b1f      	ldr	r3, [pc, #124]	; (800a9c8 <pvPortMalloc+0x190>)
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	4a1d      	ldr	r2, [pc, #116]	; (800a9c8 <pvPortMalloc+0x190>)
 800a954:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a956:	4b1c      	ldr	r3, [pc, #112]	; (800a9c8 <pvPortMalloc+0x190>)
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	4b1d      	ldr	r3, [pc, #116]	; (800a9d0 <pvPortMalloc+0x198>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d203      	bcs.n	800a96a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a962:	4b19      	ldr	r3, [pc, #100]	; (800a9c8 <pvPortMalloc+0x190>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a1a      	ldr	r2, [pc, #104]	; (800a9d0 <pvPortMalloc+0x198>)
 800a968:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96c:	685a      	ldr	r2, [r3, #4]
 800a96e:	4b15      	ldr	r3, [pc, #84]	; (800a9c4 <pvPortMalloc+0x18c>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	431a      	orrs	r2, r3
 800a974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a976:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97a:	2200      	movs	r2, #0
 800a97c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a97e:	4b15      	ldr	r3, [pc, #84]	; (800a9d4 <pvPortMalloc+0x19c>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	3301      	adds	r3, #1
 800a984:	4a13      	ldr	r2, [pc, #76]	; (800a9d4 <pvPortMalloc+0x19c>)
 800a986:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a988:	f7ff fa2c 	bl	8009de4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d101      	bne.n	800a996 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800a992:	f7f6 fb53 	bl	800103c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a996:	69fb      	ldr	r3, [r7, #28]
 800a998:	f003 0307 	and.w	r3, r3, #7
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d00a      	beq.n	800a9b6 <pvPortMalloc+0x17e>
	__asm volatile
 800a9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a4:	f383 8811 	msr	BASEPRI, r3
 800a9a8:	f3bf 8f6f 	isb	sy
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	60fb      	str	r3, [r7, #12]
}
 800a9b2:	bf00      	nop
 800a9b4:	e7fe      	b.n	800a9b4 <pvPortMalloc+0x17c>
	return pvReturn;
 800a9b6:	69fb      	ldr	r3, [r7, #28]
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3728      	adds	r7, #40	; 0x28
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	20008c24 	.word	0x20008c24
 800a9c4:	20008c38 	.word	0x20008c38
 800a9c8:	20008c28 	.word	0x20008c28
 800a9cc:	20008c1c 	.word	0x20008c1c
 800a9d0:	20008c2c 	.word	0x20008c2c
 800a9d4:	20008c30 	.word	0x20008c30

0800a9d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b086      	sub	sp, #24
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d04d      	beq.n	800aa86 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a9ea:	2308      	movs	r3, #8
 800a9ec:	425b      	negs	r3, r3
 800a9ee:	697a      	ldr	r2, [r7, #20]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	685a      	ldr	r2, [r3, #4]
 800a9fc:	4b24      	ldr	r3, [pc, #144]	; (800aa90 <vPortFree+0xb8>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4013      	ands	r3, r2
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d10a      	bne.n	800aa1c <vPortFree+0x44>
	__asm volatile
 800aa06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa0a:	f383 8811 	msr	BASEPRI, r3
 800aa0e:	f3bf 8f6f 	isb	sy
 800aa12:	f3bf 8f4f 	dsb	sy
 800aa16:	60fb      	str	r3, [r7, #12]
}
 800aa18:	bf00      	nop
 800aa1a:	e7fe      	b.n	800aa1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00a      	beq.n	800aa3a <vPortFree+0x62>
	__asm volatile
 800aa24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa28:	f383 8811 	msr	BASEPRI, r3
 800aa2c:	f3bf 8f6f 	isb	sy
 800aa30:	f3bf 8f4f 	dsb	sy
 800aa34:	60bb      	str	r3, [r7, #8]
}
 800aa36:	bf00      	nop
 800aa38:	e7fe      	b.n	800aa38 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	685a      	ldr	r2, [r3, #4]
 800aa3e:	4b14      	ldr	r3, [pc, #80]	; (800aa90 <vPortFree+0xb8>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4013      	ands	r3, r2
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d01e      	beq.n	800aa86 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d11a      	bne.n	800aa86 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	685a      	ldr	r2, [r3, #4]
 800aa54:	4b0e      	ldr	r3, [pc, #56]	; (800aa90 <vPortFree+0xb8>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	43db      	mvns	r3, r3
 800aa5a:	401a      	ands	r2, r3
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aa60:	f7ff f9b2 	bl	8009dc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	685a      	ldr	r2, [r3, #4]
 800aa68:	4b0a      	ldr	r3, [pc, #40]	; (800aa94 <vPortFree+0xbc>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	4a09      	ldr	r2, [pc, #36]	; (800aa94 <vPortFree+0xbc>)
 800aa70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aa72:	6938      	ldr	r0, [r7, #16]
 800aa74:	f000 f874 	bl	800ab60 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aa78:	4b07      	ldr	r3, [pc, #28]	; (800aa98 <vPortFree+0xc0>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	4a06      	ldr	r2, [pc, #24]	; (800aa98 <vPortFree+0xc0>)
 800aa80:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aa82:	f7ff f9af 	bl	8009de4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aa86:	bf00      	nop
 800aa88:	3718      	adds	r7, #24
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	20008c38 	.word	0x20008c38
 800aa94:	20008c28 	.word	0x20008c28
 800aa98:	20008c34 	.word	0x20008c34

0800aa9c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aaa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aaa6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aaa8:	4b27      	ldr	r3, [pc, #156]	; (800ab48 <prvHeapInit+0xac>)
 800aaaa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f003 0307 	and.w	r3, r3, #7
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00c      	beq.n	800aad0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	3307      	adds	r3, #7
 800aaba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f023 0307 	bic.w	r3, r3, #7
 800aac2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aac4:	68ba      	ldr	r2, [r7, #8]
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	1ad3      	subs	r3, r2, r3
 800aaca:	4a1f      	ldr	r2, [pc, #124]	; (800ab48 <prvHeapInit+0xac>)
 800aacc:	4413      	add	r3, r2
 800aace:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aad4:	4a1d      	ldr	r2, [pc, #116]	; (800ab4c <prvHeapInit+0xb0>)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aada:	4b1c      	ldr	r3, [pc, #112]	; (800ab4c <prvHeapInit+0xb0>)
 800aadc:	2200      	movs	r2, #0
 800aade:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	68ba      	ldr	r2, [r7, #8]
 800aae4:	4413      	add	r3, r2
 800aae6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aae8:	2208      	movs	r2, #8
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	1a9b      	subs	r3, r3, r2
 800aaee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f023 0307 	bic.w	r3, r3, #7
 800aaf6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	4a15      	ldr	r2, [pc, #84]	; (800ab50 <prvHeapInit+0xb4>)
 800aafc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aafe:	4b14      	ldr	r3, [pc, #80]	; (800ab50 <prvHeapInit+0xb4>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2200      	movs	r2, #0
 800ab04:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ab06:	4b12      	ldr	r3, [pc, #72]	; (800ab50 <prvHeapInit+0xb4>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	68fa      	ldr	r2, [r7, #12]
 800ab16:	1ad2      	subs	r2, r2, r3
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ab1c:	4b0c      	ldr	r3, [pc, #48]	; (800ab50 <prvHeapInit+0xb4>)
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	4a0a      	ldr	r2, [pc, #40]	; (800ab54 <prvHeapInit+0xb8>)
 800ab2a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	4a09      	ldr	r2, [pc, #36]	; (800ab58 <prvHeapInit+0xbc>)
 800ab32:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ab34:	4b09      	ldr	r3, [pc, #36]	; (800ab5c <prvHeapInit+0xc0>)
 800ab36:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ab3a:	601a      	str	r2, [r3, #0]
}
 800ab3c:	bf00      	nop
 800ab3e:	3714      	adds	r7, #20
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr
 800ab48:	20000c1c 	.word	0x20000c1c
 800ab4c:	20008c1c 	.word	0x20008c1c
 800ab50:	20008c24 	.word	0x20008c24
 800ab54:	20008c2c 	.word	0x20008c2c
 800ab58:	20008c28 	.word	0x20008c28
 800ab5c:	20008c38 	.word	0x20008c38

0800ab60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ab60:	b480      	push	{r7}
 800ab62:	b085      	sub	sp, #20
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ab68:	4b28      	ldr	r3, [pc, #160]	; (800ac0c <prvInsertBlockIntoFreeList+0xac>)
 800ab6a:	60fb      	str	r3, [r7, #12]
 800ab6c:	e002      	b.n	800ab74 <prvInsertBlockIntoFreeList+0x14>
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	60fb      	str	r3, [r7, #12]
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d8f7      	bhi.n	800ab6e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	68ba      	ldr	r2, [r7, #8]
 800ab88:	4413      	add	r3, r2
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d108      	bne.n	800aba2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	685a      	ldr	r2, [r3, #4]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	441a      	add	r2, r3
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	68ba      	ldr	r2, [r7, #8]
 800abac:	441a      	add	r2, r3
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d118      	bne.n	800abe8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	4b15      	ldr	r3, [pc, #84]	; (800ac10 <prvInsertBlockIntoFreeList+0xb0>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d00d      	beq.n	800abde <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	685a      	ldr	r2, [r3, #4]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	441a      	add	r2, r3
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	681a      	ldr	r2, [r3, #0]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	601a      	str	r2, [r3, #0]
 800abdc:	e008      	b.n	800abf0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800abde:	4b0c      	ldr	r3, [pc, #48]	; (800ac10 <prvInsertBlockIntoFreeList+0xb0>)
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	601a      	str	r2, [r3, #0]
 800abe6:	e003      	b.n	800abf0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800abf0:	68fa      	ldr	r2, [r7, #12]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d002      	beq.n	800abfe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abfe:	bf00      	nop
 800ac00:	3714      	adds	r7, #20
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr
 800ac0a:	bf00      	nop
 800ac0c:	20008c1c 	.word	0x20008c1c
 800ac10:	20008c24 	.word	0x20008c24

0800ac14 <__errno>:
 800ac14:	4b01      	ldr	r3, [pc, #4]	; (800ac1c <__errno+0x8>)
 800ac16:	6818      	ldr	r0, [r3, #0]
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop
 800ac1c:	20000098 	.word	0x20000098

0800ac20 <std>:
 800ac20:	2300      	movs	r3, #0
 800ac22:	b510      	push	{r4, lr}
 800ac24:	4604      	mov	r4, r0
 800ac26:	e9c0 3300 	strd	r3, r3, [r0]
 800ac2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac2e:	6083      	str	r3, [r0, #8]
 800ac30:	8181      	strh	r1, [r0, #12]
 800ac32:	6643      	str	r3, [r0, #100]	; 0x64
 800ac34:	81c2      	strh	r2, [r0, #14]
 800ac36:	6183      	str	r3, [r0, #24]
 800ac38:	4619      	mov	r1, r3
 800ac3a:	2208      	movs	r2, #8
 800ac3c:	305c      	adds	r0, #92	; 0x5c
 800ac3e:	f000 f91a 	bl	800ae76 <memset>
 800ac42:	4b05      	ldr	r3, [pc, #20]	; (800ac58 <std+0x38>)
 800ac44:	6263      	str	r3, [r4, #36]	; 0x24
 800ac46:	4b05      	ldr	r3, [pc, #20]	; (800ac5c <std+0x3c>)
 800ac48:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac4a:	4b05      	ldr	r3, [pc, #20]	; (800ac60 <std+0x40>)
 800ac4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac4e:	4b05      	ldr	r3, [pc, #20]	; (800ac64 <std+0x44>)
 800ac50:	6224      	str	r4, [r4, #32]
 800ac52:	6323      	str	r3, [r4, #48]	; 0x30
 800ac54:	bd10      	pop	{r4, pc}
 800ac56:	bf00      	nop
 800ac58:	0800bde5 	.word	0x0800bde5
 800ac5c:	0800be07 	.word	0x0800be07
 800ac60:	0800be3f 	.word	0x0800be3f
 800ac64:	0800be63 	.word	0x0800be63

0800ac68 <_cleanup_r>:
 800ac68:	4901      	ldr	r1, [pc, #4]	; (800ac70 <_cleanup_r+0x8>)
 800ac6a:	f000 b8af 	b.w	800adcc <_fwalk_reent>
 800ac6e:	bf00      	nop
 800ac70:	0800da11 	.word	0x0800da11

0800ac74 <__sfmoreglue>:
 800ac74:	b570      	push	{r4, r5, r6, lr}
 800ac76:	2268      	movs	r2, #104	; 0x68
 800ac78:	1e4d      	subs	r5, r1, #1
 800ac7a:	4355      	muls	r5, r2
 800ac7c:	460e      	mov	r6, r1
 800ac7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac82:	f000 f921 	bl	800aec8 <_malloc_r>
 800ac86:	4604      	mov	r4, r0
 800ac88:	b140      	cbz	r0, 800ac9c <__sfmoreglue+0x28>
 800ac8a:	2100      	movs	r1, #0
 800ac8c:	e9c0 1600 	strd	r1, r6, [r0]
 800ac90:	300c      	adds	r0, #12
 800ac92:	60a0      	str	r0, [r4, #8]
 800ac94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac98:	f000 f8ed 	bl	800ae76 <memset>
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	bd70      	pop	{r4, r5, r6, pc}

0800aca0 <__sfp_lock_acquire>:
 800aca0:	4801      	ldr	r0, [pc, #4]	; (800aca8 <__sfp_lock_acquire+0x8>)
 800aca2:	f000 b8d8 	b.w	800ae56 <__retarget_lock_acquire_recursive>
 800aca6:	bf00      	nop
 800aca8:	20008c3d 	.word	0x20008c3d

0800acac <__sfp_lock_release>:
 800acac:	4801      	ldr	r0, [pc, #4]	; (800acb4 <__sfp_lock_release+0x8>)
 800acae:	f000 b8d3 	b.w	800ae58 <__retarget_lock_release_recursive>
 800acb2:	bf00      	nop
 800acb4:	20008c3d 	.word	0x20008c3d

0800acb8 <__sinit_lock_acquire>:
 800acb8:	4801      	ldr	r0, [pc, #4]	; (800acc0 <__sinit_lock_acquire+0x8>)
 800acba:	f000 b8cc 	b.w	800ae56 <__retarget_lock_acquire_recursive>
 800acbe:	bf00      	nop
 800acc0:	20008c3e 	.word	0x20008c3e

0800acc4 <__sinit_lock_release>:
 800acc4:	4801      	ldr	r0, [pc, #4]	; (800accc <__sinit_lock_release+0x8>)
 800acc6:	f000 b8c7 	b.w	800ae58 <__retarget_lock_release_recursive>
 800acca:	bf00      	nop
 800accc:	20008c3e 	.word	0x20008c3e

0800acd0 <__sinit>:
 800acd0:	b510      	push	{r4, lr}
 800acd2:	4604      	mov	r4, r0
 800acd4:	f7ff fff0 	bl	800acb8 <__sinit_lock_acquire>
 800acd8:	69a3      	ldr	r3, [r4, #24]
 800acda:	b11b      	cbz	r3, 800ace4 <__sinit+0x14>
 800acdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ace0:	f7ff bff0 	b.w	800acc4 <__sinit_lock_release>
 800ace4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ace8:	6523      	str	r3, [r4, #80]	; 0x50
 800acea:	4b13      	ldr	r3, [pc, #76]	; (800ad38 <__sinit+0x68>)
 800acec:	4a13      	ldr	r2, [pc, #76]	; (800ad3c <__sinit+0x6c>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	62a2      	str	r2, [r4, #40]	; 0x28
 800acf2:	42a3      	cmp	r3, r4
 800acf4:	bf04      	itt	eq
 800acf6:	2301      	moveq	r3, #1
 800acf8:	61a3      	streq	r3, [r4, #24]
 800acfa:	4620      	mov	r0, r4
 800acfc:	f000 f820 	bl	800ad40 <__sfp>
 800ad00:	6060      	str	r0, [r4, #4]
 800ad02:	4620      	mov	r0, r4
 800ad04:	f000 f81c 	bl	800ad40 <__sfp>
 800ad08:	60a0      	str	r0, [r4, #8]
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	f000 f818 	bl	800ad40 <__sfp>
 800ad10:	2200      	movs	r2, #0
 800ad12:	60e0      	str	r0, [r4, #12]
 800ad14:	2104      	movs	r1, #4
 800ad16:	6860      	ldr	r0, [r4, #4]
 800ad18:	f7ff ff82 	bl	800ac20 <std>
 800ad1c:	68a0      	ldr	r0, [r4, #8]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	2109      	movs	r1, #9
 800ad22:	f7ff ff7d 	bl	800ac20 <std>
 800ad26:	68e0      	ldr	r0, [r4, #12]
 800ad28:	2202      	movs	r2, #2
 800ad2a:	2112      	movs	r1, #18
 800ad2c:	f7ff ff78 	bl	800ac20 <std>
 800ad30:	2301      	movs	r3, #1
 800ad32:	61a3      	str	r3, [r4, #24]
 800ad34:	e7d2      	b.n	800acdc <__sinit+0xc>
 800ad36:	bf00      	nop
 800ad38:	080111ec 	.word	0x080111ec
 800ad3c:	0800ac69 	.word	0x0800ac69

0800ad40 <__sfp>:
 800ad40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad42:	4607      	mov	r7, r0
 800ad44:	f7ff ffac 	bl	800aca0 <__sfp_lock_acquire>
 800ad48:	4b1e      	ldr	r3, [pc, #120]	; (800adc4 <__sfp+0x84>)
 800ad4a:	681e      	ldr	r6, [r3, #0]
 800ad4c:	69b3      	ldr	r3, [r6, #24]
 800ad4e:	b913      	cbnz	r3, 800ad56 <__sfp+0x16>
 800ad50:	4630      	mov	r0, r6
 800ad52:	f7ff ffbd 	bl	800acd0 <__sinit>
 800ad56:	3648      	adds	r6, #72	; 0x48
 800ad58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad5c:	3b01      	subs	r3, #1
 800ad5e:	d503      	bpl.n	800ad68 <__sfp+0x28>
 800ad60:	6833      	ldr	r3, [r6, #0]
 800ad62:	b30b      	cbz	r3, 800ada8 <__sfp+0x68>
 800ad64:	6836      	ldr	r6, [r6, #0]
 800ad66:	e7f7      	b.n	800ad58 <__sfp+0x18>
 800ad68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad6c:	b9d5      	cbnz	r5, 800ada4 <__sfp+0x64>
 800ad6e:	4b16      	ldr	r3, [pc, #88]	; (800adc8 <__sfp+0x88>)
 800ad70:	60e3      	str	r3, [r4, #12]
 800ad72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad76:	6665      	str	r5, [r4, #100]	; 0x64
 800ad78:	f000 f86c 	bl	800ae54 <__retarget_lock_init_recursive>
 800ad7c:	f7ff ff96 	bl	800acac <__sfp_lock_release>
 800ad80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad88:	6025      	str	r5, [r4, #0]
 800ad8a:	61a5      	str	r5, [r4, #24]
 800ad8c:	2208      	movs	r2, #8
 800ad8e:	4629      	mov	r1, r5
 800ad90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad94:	f000 f86f 	bl	800ae76 <memset>
 800ad98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ada0:	4620      	mov	r0, r4
 800ada2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ada4:	3468      	adds	r4, #104	; 0x68
 800ada6:	e7d9      	b.n	800ad5c <__sfp+0x1c>
 800ada8:	2104      	movs	r1, #4
 800adaa:	4638      	mov	r0, r7
 800adac:	f7ff ff62 	bl	800ac74 <__sfmoreglue>
 800adb0:	4604      	mov	r4, r0
 800adb2:	6030      	str	r0, [r6, #0]
 800adb4:	2800      	cmp	r0, #0
 800adb6:	d1d5      	bne.n	800ad64 <__sfp+0x24>
 800adb8:	f7ff ff78 	bl	800acac <__sfp_lock_release>
 800adbc:	230c      	movs	r3, #12
 800adbe:	603b      	str	r3, [r7, #0]
 800adc0:	e7ee      	b.n	800ada0 <__sfp+0x60>
 800adc2:	bf00      	nop
 800adc4:	080111ec 	.word	0x080111ec
 800adc8:	ffff0001 	.word	0xffff0001

0800adcc <_fwalk_reent>:
 800adcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800add0:	4606      	mov	r6, r0
 800add2:	4688      	mov	r8, r1
 800add4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800add8:	2700      	movs	r7, #0
 800adda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adde:	f1b9 0901 	subs.w	r9, r9, #1
 800ade2:	d505      	bpl.n	800adf0 <_fwalk_reent+0x24>
 800ade4:	6824      	ldr	r4, [r4, #0]
 800ade6:	2c00      	cmp	r4, #0
 800ade8:	d1f7      	bne.n	800adda <_fwalk_reent+0xe>
 800adea:	4638      	mov	r0, r7
 800adec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adf0:	89ab      	ldrh	r3, [r5, #12]
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d907      	bls.n	800ae06 <_fwalk_reent+0x3a>
 800adf6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800adfa:	3301      	adds	r3, #1
 800adfc:	d003      	beq.n	800ae06 <_fwalk_reent+0x3a>
 800adfe:	4629      	mov	r1, r5
 800ae00:	4630      	mov	r0, r6
 800ae02:	47c0      	blx	r8
 800ae04:	4307      	orrs	r7, r0
 800ae06:	3568      	adds	r5, #104	; 0x68
 800ae08:	e7e9      	b.n	800adde <_fwalk_reent+0x12>
	...

0800ae0c <__libc_init_array>:
 800ae0c:	b570      	push	{r4, r5, r6, lr}
 800ae0e:	4d0d      	ldr	r5, [pc, #52]	; (800ae44 <__libc_init_array+0x38>)
 800ae10:	4c0d      	ldr	r4, [pc, #52]	; (800ae48 <__libc_init_array+0x3c>)
 800ae12:	1b64      	subs	r4, r4, r5
 800ae14:	10a4      	asrs	r4, r4, #2
 800ae16:	2600      	movs	r6, #0
 800ae18:	42a6      	cmp	r6, r4
 800ae1a:	d109      	bne.n	800ae30 <__libc_init_array+0x24>
 800ae1c:	4d0b      	ldr	r5, [pc, #44]	; (800ae4c <__libc_init_array+0x40>)
 800ae1e:	4c0c      	ldr	r4, [pc, #48]	; (800ae50 <__libc_init_array+0x44>)
 800ae20:	f004 fc08 	bl	800f634 <_init>
 800ae24:	1b64      	subs	r4, r4, r5
 800ae26:	10a4      	asrs	r4, r4, #2
 800ae28:	2600      	movs	r6, #0
 800ae2a:	42a6      	cmp	r6, r4
 800ae2c:	d105      	bne.n	800ae3a <__libc_init_array+0x2e>
 800ae2e:	bd70      	pop	{r4, r5, r6, pc}
 800ae30:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae34:	4798      	blx	r3
 800ae36:	3601      	adds	r6, #1
 800ae38:	e7ee      	b.n	800ae18 <__libc_init_array+0xc>
 800ae3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae3e:	4798      	blx	r3
 800ae40:	3601      	adds	r6, #1
 800ae42:	e7f2      	b.n	800ae2a <__libc_init_array+0x1e>
 800ae44:	0801163c 	.word	0x0801163c
 800ae48:	0801163c 	.word	0x0801163c
 800ae4c:	0801163c 	.word	0x0801163c
 800ae50:	08011640 	.word	0x08011640

0800ae54 <__retarget_lock_init_recursive>:
 800ae54:	4770      	bx	lr

0800ae56 <__retarget_lock_acquire_recursive>:
 800ae56:	4770      	bx	lr

0800ae58 <__retarget_lock_release_recursive>:
 800ae58:	4770      	bx	lr

0800ae5a <memcpy>:
 800ae5a:	440a      	add	r2, r1
 800ae5c:	4291      	cmp	r1, r2
 800ae5e:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae62:	d100      	bne.n	800ae66 <memcpy+0xc>
 800ae64:	4770      	bx	lr
 800ae66:	b510      	push	{r4, lr}
 800ae68:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae70:	4291      	cmp	r1, r2
 800ae72:	d1f9      	bne.n	800ae68 <memcpy+0xe>
 800ae74:	bd10      	pop	{r4, pc}

0800ae76 <memset>:
 800ae76:	4402      	add	r2, r0
 800ae78:	4603      	mov	r3, r0
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d100      	bne.n	800ae80 <memset+0xa>
 800ae7e:	4770      	bx	lr
 800ae80:	f803 1b01 	strb.w	r1, [r3], #1
 800ae84:	e7f9      	b.n	800ae7a <memset+0x4>
	...

0800ae88 <sbrk_aligned>:
 800ae88:	b570      	push	{r4, r5, r6, lr}
 800ae8a:	4e0e      	ldr	r6, [pc, #56]	; (800aec4 <sbrk_aligned+0x3c>)
 800ae8c:	460c      	mov	r4, r1
 800ae8e:	6831      	ldr	r1, [r6, #0]
 800ae90:	4605      	mov	r5, r0
 800ae92:	b911      	cbnz	r1, 800ae9a <sbrk_aligned+0x12>
 800ae94:	f000 ff70 	bl	800bd78 <_sbrk_r>
 800ae98:	6030      	str	r0, [r6, #0]
 800ae9a:	4621      	mov	r1, r4
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	f000 ff6b 	bl	800bd78 <_sbrk_r>
 800aea2:	1c43      	adds	r3, r0, #1
 800aea4:	d00a      	beq.n	800aebc <sbrk_aligned+0x34>
 800aea6:	1cc4      	adds	r4, r0, #3
 800aea8:	f024 0403 	bic.w	r4, r4, #3
 800aeac:	42a0      	cmp	r0, r4
 800aeae:	d007      	beq.n	800aec0 <sbrk_aligned+0x38>
 800aeb0:	1a21      	subs	r1, r4, r0
 800aeb2:	4628      	mov	r0, r5
 800aeb4:	f000 ff60 	bl	800bd78 <_sbrk_r>
 800aeb8:	3001      	adds	r0, #1
 800aeba:	d101      	bne.n	800aec0 <sbrk_aligned+0x38>
 800aebc:	f04f 34ff 	mov.w	r4, #4294967295
 800aec0:	4620      	mov	r0, r4
 800aec2:	bd70      	pop	{r4, r5, r6, pc}
 800aec4:	20008c44 	.word	0x20008c44

0800aec8 <_malloc_r>:
 800aec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aecc:	1ccd      	adds	r5, r1, #3
 800aece:	f025 0503 	bic.w	r5, r5, #3
 800aed2:	3508      	adds	r5, #8
 800aed4:	2d0c      	cmp	r5, #12
 800aed6:	bf38      	it	cc
 800aed8:	250c      	movcc	r5, #12
 800aeda:	2d00      	cmp	r5, #0
 800aedc:	4607      	mov	r7, r0
 800aede:	db01      	blt.n	800aee4 <_malloc_r+0x1c>
 800aee0:	42a9      	cmp	r1, r5
 800aee2:	d905      	bls.n	800aef0 <_malloc_r+0x28>
 800aee4:	230c      	movs	r3, #12
 800aee6:	603b      	str	r3, [r7, #0]
 800aee8:	2600      	movs	r6, #0
 800aeea:	4630      	mov	r0, r6
 800aeec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aef0:	4e2e      	ldr	r6, [pc, #184]	; (800afac <_malloc_r+0xe4>)
 800aef2:	f003 f969 	bl	800e1c8 <__malloc_lock>
 800aef6:	6833      	ldr	r3, [r6, #0]
 800aef8:	461c      	mov	r4, r3
 800aefa:	bb34      	cbnz	r4, 800af4a <_malloc_r+0x82>
 800aefc:	4629      	mov	r1, r5
 800aefe:	4638      	mov	r0, r7
 800af00:	f7ff ffc2 	bl	800ae88 <sbrk_aligned>
 800af04:	1c43      	adds	r3, r0, #1
 800af06:	4604      	mov	r4, r0
 800af08:	d14d      	bne.n	800afa6 <_malloc_r+0xde>
 800af0a:	6834      	ldr	r4, [r6, #0]
 800af0c:	4626      	mov	r6, r4
 800af0e:	2e00      	cmp	r6, #0
 800af10:	d140      	bne.n	800af94 <_malloc_r+0xcc>
 800af12:	6823      	ldr	r3, [r4, #0]
 800af14:	4631      	mov	r1, r6
 800af16:	4638      	mov	r0, r7
 800af18:	eb04 0803 	add.w	r8, r4, r3
 800af1c:	f000 ff2c 	bl	800bd78 <_sbrk_r>
 800af20:	4580      	cmp	r8, r0
 800af22:	d13a      	bne.n	800af9a <_malloc_r+0xd2>
 800af24:	6821      	ldr	r1, [r4, #0]
 800af26:	3503      	adds	r5, #3
 800af28:	1a6d      	subs	r5, r5, r1
 800af2a:	f025 0503 	bic.w	r5, r5, #3
 800af2e:	3508      	adds	r5, #8
 800af30:	2d0c      	cmp	r5, #12
 800af32:	bf38      	it	cc
 800af34:	250c      	movcc	r5, #12
 800af36:	4629      	mov	r1, r5
 800af38:	4638      	mov	r0, r7
 800af3a:	f7ff ffa5 	bl	800ae88 <sbrk_aligned>
 800af3e:	3001      	adds	r0, #1
 800af40:	d02b      	beq.n	800af9a <_malloc_r+0xd2>
 800af42:	6823      	ldr	r3, [r4, #0]
 800af44:	442b      	add	r3, r5
 800af46:	6023      	str	r3, [r4, #0]
 800af48:	e00e      	b.n	800af68 <_malloc_r+0xa0>
 800af4a:	6822      	ldr	r2, [r4, #0]
 800af4c:	1b52      	subs	r2, r2, r5
 800af4e:	d41e      	bmi.n	800af8e <_malloc_r+0xc6>
 800af50:	2a0b      	cmp	r2, #11
 800af52:	d916      	bls.n	800af82 <_malloc_r+0xba>
 800af54:	1961      	adds	r1, r4, r5
 800af56:	42a3      	cmp	r3, r4
 800af58:	6025      	str	r5, [r4, #0]
 800af5a:	bf18      	it	ne
 800af5c:	6059      	strne	r1, [r3, #4]
 800af5e:	6863      	ldr	r3, [r4, #4]
 800af60:	bf08      	it	eq
 800af62:	6031      	streq	r1, [r6, #0]
 800af64:	5162      	str	r2, [r4, r5]
 800af66:	604b      	str	r3, [r1, #4]
 800af68:	4638      	mov	r0, r7
 800af6a:	f104 060b 	add.w	r6, r4, #11
 800af6e:	f003 f931 	bl	800e1d4 <__malloc_unlock>
 800af72:	f026 0607 	bic.w	r6, r6, #7
 800af76:	1d23      	adds	r3, r4, #4
 800af78:	1af2      	subs	r2, r6, r3
 800af7a:	d0b6      	beq.n	800aeea <_malloc_r+0x22>
 800af7c:	1b9b      	subs	r3, r3, r6
 800af7e:	50a3      	str	r3, [r4, r2]
 800af80:	e7b3      	b.n	800aeea <_malloc_r+0x22>
 800af82:	6862      	ldr	r2, [r4, #4]
 800af84:	42a3      	cmp	r3, r4
 800af86:	bf0c      	ite	eq
 800af88:	6032      	streq	r2, [r6, #0]
 800af8a:	605a      	strne	r2, [r3, #4]
 800af8c:	e7ec      	b.n	800af68 <_malloc_r+0xa0>
 800af8e:	4623      	mov	r3, r4
 800af90:	6864      	ldr	r4, [r4, #4]
 800af92:	e7b2      	b.n	800aefa <_malloc_r+0x32>
 800af94:	4634      	mov	r4, r6
 800af96:	6876      	ldr	r6, [r6, #4]
 800af98:	e7b9      	b.n	800af0e <_malloc_r+0x46>
 800af9a:	230c      	movs	r3, #12
 800af9c:	603b      	str	r3, [r7, #0]
 800af9e:	4638      	mov	r0, r7
 800afa0:	f003 f918 	bl	800e1d4 <__malloc_unlock>
 800afa4:	e7a1      	b.n	800aeea <_malloc_r+0x22>
 800afa6:	6025      	str	r5, [r4, #0]
 800afa8:	e7de      	b.n	800af68 <_malloc_r+0xa0>
 800afaa:	bf00      	nop
 800afac:	20008c40 	.word	0x20008c40

0800afb0 <__cvt>:
 800afb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afb4:	ec55 4b10 	vmov	r4, r5, d0
 800afb8:	2d00      	cmp	r5, #0
 800afba:	460e      	mov	r6, r1
 800afbc:	4619      	mov	r1, r3
 800afbe:	462b      	mov	r3, r5
 800afc0:	bfbb      	ittet	lt
 800afc2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800afc6:	461d      	movlt	r5, r3
 800afc8:	2300      	movge	r3, #0
 800afca:	232d      	movlt	r3, #45	; 0x2d
 800afcc:	700b      	strb	r3, [r1, #0]
 800afce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afd0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800afd4:	4691      	mov	r9, r2
 800afd6:	f023 0820 	bic.w	r8, r3, #32
 800afda:	bfbc      	itt	lt
 800afdc:	4622      	movlt	r2, r4
 800afde:	4614      	movlt	r4, r2
 800afe0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800afe4:	d005      	beq.n	800aff2 <__cvt+0x42>
 800afe6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800afea:	d100      	bne.n	800afee <__cvt+0x3e>
 800afec:	3601      	adds	r6, #1
 800afee:	2102      	movs	r1, #2
 800aff0:	e000      	b.n	800aff4 <__cvt+0x44>
 800aff2:	2103      	movs	r1, #3
 800aff4:	ab03      	add	r3, sp, #12
 800aff6:	9301      	str	r3, [sp, #4]
 800aff8:	ab02      	add	r3, sp, #8
 800affa:	9300      	str	r3, [sp, #0]
 800affc:	ec45 4b10 	vmov	d0, r4, r5
 800b000:	4653      	mov	r3, sl
 800b002:	4632      	mov	r2, r6
 800b004:	f001 fe90 	bl	800cd28 <_dtoa_r>
 800b008:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b00c:	4607      	mov	r7, r0
 800b00e:	d102      	bne.n	800b016 <__cvt+0x66>
 800b010:	f019 0f01 	tst.w	r9, #1
 800b014:	d022      	beq.n	800b05c <__cvt+0xac>
 800b016:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b01a:	eb07 0906 	add.w	r9, r7, r6
 800b01e:	d110      	bne.n	800b042 <__cvt+0x92>
 800b020:	783b      	ldrb	r3, [r7, #0]
 800b022:	2b30      	cmp	r3, #48	; 0x30
 800b024:	d10a      	bne.n	800b03c <__cvt+0x8c>
 800b026:	2200      	movs	r2, #0
 800b028:	2300      	movs	r3, #0
 800b02a:	4620      	mov	r0, r4
 800b02c:	4629      	mov	r1, r5
 800b02e:	f7f5 fd5b 	bl	8000ae8 <__aeabi_dcmpeq>
 800b032:	b918      	cbnz	r0, 800b03c <__cvt+0x8c>
 800b034:	f1c6 0601 	rsb	r6, r6, #1
 800b038:	f8ca 6000 	str.w	r6, [sl]
 800b03c:	f8da 3000 	ldr.w	r3, [sl]
 800b040:	4499      	add	r9, r3
 800b042:	2200      	movs	r2, #0
 800b044:	2300      	movs	r3, #0
 800b046:	4620      	mov	r0, r4
 800b048:	4629      	mov	r1, r5
 800b04a:	f7f5 fd4d 	bl	8000ae8 <__aeabi_dcmpeq>
 800b04e:	b108      	cbz	r0, 800b054 <__cvt+0xa4>
 800b050:	f8cd 900c 	str.w	r9, [sp, #12]
 800b054:	2230      	movs	r2, #48	; 0x30
 800b056:	9b03      	ldr	r3, [sp, #12]
 800b058:	454b      	cmp	r3, r9
 800b05a:	d307      	bcc.n	800b06c <__cvt+0xbc>
 800b05c:	9b03      	ldr	r3, [sp, #12]
 800b05e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b060:	1bdb      	subs	r3, r3, r7
 800b062:	4638      	mov	r0, r7
 800b064:	6013      	str	r3, [r2, #0]
 800b066:	b004      	add	sp, #16
 800b068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b06c:	1c59      	adds	r1, r3, #1
 800b06e:	9103      	str	r1, [sp, #12]
 800b070:	701a      	strb	r2, [r3, #0]
 800b072:	e7f0      	b.n	800b056 <__cvt+0xa6>

0800b074 <__exponent>:
 800b074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b076:	4603      	mov	r3, r0
 800b078:	2900      	cmp	r1, #0
 800b07a:	bfb8      	it	lt
 800b07c:	4249      	neglt	r1, r1
 800b07e:	f803 2b02 	strb.w	r2, [r3], #2
 800b082:	bfb4      	ite	lt
 800b084:	222d      	movlt	r2, #45	; 0x2d
 800b086:	222b      	movge	r2, #43	; 0x2b
 800b088:	2909      	cmp	r1, #9
 800b08a:	7042      	strb	r2, [r0, #1]
 800b08c:	dd2a      	ble.n	800b0e4 <__exponent+0x70>
 800b08e:	f10d 0407 	add.w	r4, sp, #7
 800b092:	46a4      	mov	ip, r4
 800b094:	270a      	movs	r7, #10
 800b096:	46a6      	mov	lr, r4
 800b098:	460a      	mov	r2, r1
 800b09a:	fb91 f6f7 	sdiv	r6, r1, r7
 800b09e:	fb07 1516 	mls	r5, r7, r6, r1
 800b0a2:	3530      	adds	r5, #48	; 0x30
 800b0a4:	2a63      	cmp	r2, #99	; 0x63
 800b0a6:	f104 34ff 	add.w	r4, r4, #4294967295
 800b0aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b0ae:	4631      	mov	r1, r6
 800b0b0:	dcf1      	bgt.n	800b096 <__exponent+0x22>
 800b0b2:	3130      	adds	r1, #48	; 0x30
 800b0b4:	f1ae 0502 	sub.w	r5, lr, #2
 800b0b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b0bc:	1c44      	adds	r4, r0, #1
 800b0be:	4629      	mov	r1, r5
 800b0c0:	4561      	cmp	r1, ip
 800b0c2:	d30a      	bcc.n	800b0da <__exponent+0x66>
 800b0c4:	f10d 0209 	add.w	r2, sp, #9
 800b0c8:	eba2 020e 	sub.w	r2, r2, lr
 800b0cc:	4565      	cmp	r5, ip
 800b0ce:	bf88      	it	hi
 800b0d0:	2200      	movhi	r2, #0
 800b0d2:	4413      	add	r3, r2
 800b0d4:	1a18      	subs	r0, r3, r0
 800b0d6:	b003      	add	sp, #12
 800b0d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0de:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b0e2:	e7ed      	b.n	800b0c0 <__exponent+0x4c>
 800b0e4:	2330      	movs	r3, #48	; 0x30
 800b0e6:	3130      	adds	r1, #48	; 0x30
 800b0e8:	7083      	strb	r3, [r0, #2]
 800b0ea:	70c1      	strb	r1, [r0, #3]
 800b0ec:	1d03      	adds	r3, r0, #4
 800b0ee:	e7f1      	b.n	800b0d4 <__exponent+0x60>

0800b0f0 <_printf_float>:
 800b0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f4:	ed2d 8b02 	vpush	{d8}
 800b0f8:	b08d      	sub	sp, #52	; 0x34
 800b0fa:	460c      	mov	r4, r1
 800b0fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b100:	4616      	mov	r6, r2
 800b102:	461f      	mov	r7, r3
 800b104:	4605      	mov	r5, r0
 800b106:	f003 f82f 	bl	800e168 <_localeconv_r>
 800b10a:	f8d0 a000 	ldr.w	sl, [r0]
 800b10e:	4650      	mov	r0, sl
 800b110:	f7f5 f86e 	bl	80001f0 <strlen>
 800b114:	2300      	movs	r3, #0
 800b116:	930a      	str	r3, [sp, #40]	; 0x28
 800b118:	6823      	ldr	r3, [r4, #0]
 800b11a:	9305      	str	r3, [sp, #20]
 800b11c:	f8d8 3000 	ldr.w	r3, [r8]
 800b120:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b124:	3307      	adds	r3, #7
 800b126:	f023 0307 	bic.w	r3, r3, #7
 800b12a:	f103 0208 	add.w	r2, r3, #8
 800b12e:	f8c8 2000 	str.w	r2, [r8]
 800b132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b136:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b13a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b13e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b142:	9307      	str	r3, [sp, #28]
 800b144:	f8cd 8018 	str.w	r8, [sp, #24]
 800b148:	ee08 0a10 	vmov	s16, r0
 800b14c:	4b9f      	ldr	r3, [pc, #636]	; (800b3cc <_printf_float+0x2dc>)
 800b14e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b152:	f04f 32ff 	mov.w	r2, #4294967295
 800b156:	f7f5 fcf9 	bl	8000b4c <__aeabi_dcmpun>
 800b15a:	bb88      	cbnz	r0, 800b1c0 <_printf_float+0xd0>
 800b15c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b160:	4b9a      	ldr	r3, [pc, #616]	; (800b3cc <_printf_float+0x2dc>)
 800b162:	f04f 32ff 	mov.w	r2, #4294967295
 800b166:	f7f5 fcd3 	bl	8000b10 <__aeabi_dcmple>
 800b16a:	bb48      	cbnz	r0, 800b1c0 <_printf_float+0xd0>
 800b16c:	2200      	movs	r2, #0
 800b16e:	2300      	movs	r3, #0
 800b170:	4640      	mov	r0, r8
 800b172:	4649      	mov	r1, r9
 800b174:	f7f5 fcc2 	bl	8000afc <__aeabi_dcmplt>
 800b178:	b110      	cbz	r0, 800b180 <_printf_float+0x90>
 800b17a:	232d      	movs	r3, #45	; 0x2d
 800b17c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b180:	4b93      	ldr	r3, [pc, #588]	; (800b3d0 <_printf_float+0x2e0>)
 800b182:	4894      	ldr	r0, [pc, #592]	; (800b3d4 <_printf_float+0x2e4>)
 800b184:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b188:	bf94      	ite	ls
 800b18a:	4698      	movls	r8, r3
 800b18c:	4680      	movhi	r8, r0
 800b18e:	2303      	movs	r3, #3
 800b190:	6123      	str	r3, [r4, #16]
 800b192:	9b05      	ldr	r3, [sp, #20]
 800b194:	f023 0204 	bic.w	r2, r3, #4
 800b198:	6022      	str	r2, [r4, #0]
 800b19a:	f04f 0900 	mov.w	r9, #0
 800b19e:	9700      	str	r7, [sp, #0]
 800b1a0:	4633      	mov	r3, r6
 800b1a2:	aa0b      	add	r2, sp, #44	; 0x2c
 800b1a4:	4621      	mov	r1, r4
 800b1a6:	4628      	mov	r0, r5
 800b1a8:	f000 f9d8 	bl	800b55c <_printf_common>
 800b1ac:	3001      	adds	r0, #1
 800b1ae:	f040 8090 	bne.w	800b2d2 <_printf_float+0x1e2>
 800b1b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b1b6:	b00d      	add	sp, #52	; 0x34
 800b1b8:	ecbd 8b02 	vpop	{d8}
 800b1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1c0:	4642      	mov	r2, r8
 800b1c2:	464b      	mov	r3, r9
 800b1c4:	4640      	mov	r0, r8
 800b1c6:	4649      	mov	r1, r9
 800b1c8:	f7f5 fcc0 	bl	8000b4c <__aeabi_dcmpun>
 800b1cc:	b140      	cbz	r0, 800b1e0 <_printf_float+0xf0>
 800b1ce:	464b      	mov	r3, r9
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	bfbc      	itt	lt
 800b1d4:	232d      	movlt	r3, #45	; 0x2d
 800b1d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b1da:	487f      	ldr	r0, [pc, #508]	; (800b3d8 <_printf_float+0x2e8>)
 800b1dc:	4b7f      	ldr	r3, [pc, #508]	; (800b3dc <_printf_float+0x2ec>)
 800b1de:	e7d1      	b.n	800b184 <_printf_float+0x94>
 800b1e0:	6863      	ldr	r3, [r4, #4]
 800b1e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b1e6:	9206      	str	r2, [sp, #24]
 800b1e8:	1c5a      	adds	r2, r3, #1
 800b1ea:	d13f      	bne.n	800b26c <_printf_float+0x17c>
 800b1ec:	2306      	movs	r3, #6
 800b1ee:	6063      	str	r3, [r4, #4]
 800b1f0:	9b05      	ldr	r3, [sp, #20]
 800b1f2:	6861      	ldr	r1, [r4, #4]
 800b1f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	9303      	str	r3, [sp, #12]
 800b1fc:	ab0a      	add	r3, sp, #40	; 0x28
 800b1fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b202:	ab09      	add	r3, sp, #36	; 0x24
 800b204:	ec49 8b10 	vmov	d0, r8, r9
 800b208:	9300      	str	r3, [sp, #0]
 800b20a:	6022      	str	r2, [r4, #0]
 800b20c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b210:	4628      	mov	r0, r5
 800b212:	f7ff fecd 	bl	800afb0 <__cvt>
 800b216:	9b06      	ldr	r3, [sp, #24]
 800b218:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b21a:	2b47      	cmp	r3, #71	; 0x47
 800b21c:	4680      	mov	r8, r0
 800b21e:	d108      	bne.n	800b232 <_printf_float+0x142>
 800b220:	1cc8      	adds	r0, r1, #3
 800b222:	db02      	blt.n	800b22a <_printf_float+0x13a>
 800b224:	6863      	ldr	r3, [r4, #4]
 800b226:	4299      	cmp	r1, r3
 800b228:	dd41      	ble.n	800b2ae <_printf_float+0x1be>
 800b22a:	f1ab 0b02 	sub.w	fp, fp, #2
 800b22e:	fa5f fb8b 	uxtb.w	fp, fp
 800b232:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b236:	d820      	bhi.n	800b27a <_printf_float+0x18a>
 800b238:	3901      	subs	r1, #1
 800b23a:	465a      	mov	r2, fp
 800b23c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b240:	9109      	str	r1, [sp, #36]	; 0x24
 800b242:	f7ff ff17 	bl	800b074 <__exponent>
 800b246:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b248:	1813      	adds	r3, r2, r0
 800b24a:	2a01      	cmp	r2, #1
 800b24c:	4681      	mov	r9, r0
 800b24e:	6123      	str	r3, [r4, #16]
 800b250:	dc02      	bgt.n	800b258 <_printf_float+0x168>
 800b252:	6822      	ldr	r2, [r4, #0]
 800b254:	07d2      	lsls	r2, r2, #31
 800b256:	d501      	bpl.n	800b25c <_printf_float+0x16c>
 800b258:	3301      	adds	r3, #1
 800b25a:	6123      	str	r3, [r4, #16]
 800b25c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b260:	2b00      	cmp	r3, #0
 800b262:	d09c      	beq.n	800b19e <_printf_float+0xae>
 800b264:	232d      	movs	r3, #45	; 0x2d
 800b266:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b26a:	e798      	b.n	800b19e <_printf_float+0xae>
 800b26c:	9a06      	ldr	r2, [sp, #24]
 800b26e:	2a47      	cmp	r2, #71	; 0x47
 800b270:	d1be      	bne.n	800b1f0 <_printf_float+0x100>
 800b272:	2b00      	cmp	r3, #0
 800b274:	d1bc      	bne.n	800b1f0 <_printf_float+0x100>
 800b276:	2301      	movs	r3, #1
 800b278:	e7b9      	b.n	800b1ee <_printf_float+0xfe>
 800b27a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b27e:	d118      	bne.n	800b2b2 <_printf_float+0x1c2>
 800b280:	2900      	cmp	r1, #0
 800b282:	6863      	ldr	r3, [r4, #4]
 800b284:	dd0b      	ble.n	800b29e <_printf_float+0x1ae>
 800b286:	6121      	str	r1, [r4, #16]
 800b288:	b913      	cbnz	r3, 800b290 <_printf_float+0x1a0>
 800b28a:	6822      	ldr	r2, [r4, #0]
 800b28c:	07d0      	lsls	r0, r2, #31
 800b28e:	d502      	bpl.n	800b296 <_printf_float+0x1a6>
 800b290:	3301      	adds	r3, #1
 800b292:	440b      	add	r3, r1
 800b294:	6123      	str	r3, [r4, #16]
 800b296:	65a1      	str	r1, [r4, #88]	; 0x58
 800b298:	f04f 0900 	mov.w	r9, #0
 800b29c:	e7de      	b.n	800b25c <_printf_float+0x16c>
 800b29e:	b913      	cbnz	r3, 800b2a6 <_printf_float+0x1b6>
 800b2a0:	6822      	ldr	r2, [r4, #0]
 800b2a2:	07d2      	lsls	r2, r2, #31
 800b2a4:	d501      	bpl.n	800b2aa <_printf_float+0x1ba>
 800b2a6:	3302      	adds	r3, #2
 800b2a8:	e7f4      	b.n	800b294 <_printf_float+0x1a4>
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	e7f2      	b.n	800b294 <_printf_float+0x1a4>
 800b2ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b2b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2b4:	4299      	cmp	r1, r3
 800b2b6:	db05      	blt.n	800b2c4 <_printf_float+0x1d4>
 800b2b8:	6823      	ldr	r3, [r4, #0]
 800b2ba:	6121      	str	r1, [r4, #16]
 800b2bc:	07d8      	lsls	r0, r3, #31
 800b2be:	d5ea      	bpl.n	800b296 <_printf_float+0x1a6>
 800b2c0:	1c4b      	adds	r3, r1, #1
 800b2c2:	e7e7      	b.n	800b294 <_printf_float+0x1a4>
 800b2c4:	2900      	cmp	r1, #0
 800b2c6:	bfd4      	ite	le
 800b2c8:	f1c1 0202 	rsble	r2, r1, #2
 800b2cc:	2201      	movgt	r2, #1
 800b2ce:	4413      	add	r3, r2
 800b2d0:	e7e0      	b.n	800b294 <_printf_float+0x1a4>
 800b2d2:	6823      	ldr	r3, [r4, #0]
 800b2d4:	055a      	lsls	r2, r3, #21
 800b2d6:	d407      	bmi.n	800b2e8 <_printf_float+0x1f8>
 800b2d8:	6923      	ldr	r3, [r4, #16]
 800b2da:	4642      	mov	r2, r8
 800b2dc:	4631      	mov	r1, r6
 800b2de:	4628      	mov	r0, r5
 800b2e0:	47b8      	blx	r7
 800b2e2:	3001      	adds	r0, #1
 800b2e4:	d12c      	bne.n	800b340 <_printf_float+0x250>
 800b2e6:	e764      	b.n	800b1b2 <_printf_float+0xc2>
 800b2e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b2ec:	f240 80e0 	bls.w	800b4b0 <_printf_float+0x3c0>
 800b2f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	f7f5 fbf6 	bl	8000ae8 <__aeabi_dcmpeq>
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	d034      	beq.n	800b36a <_printf_float+0x27a>
 800b300:	4a37      	ldr	r2, [pc, #220]	; (800b3e0 <_printf_float+0x2f0>)
 800b302:	2301      	movs	r3, #1
 800b304:	4631      	mov	r1, r6
 800b306:	4628      	mov	r0, r5
 800b308:	47b8      	blx	r7
 800b30a:	3001      	adds	r0, #1
 800b30c:	f43f af51 	beq.w	800b1b2 <_printf_float+0xc2>
 800b310:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b314:	429a      	cmp	r2, r3
 800b316:	db02      	blt.n	800b31e <_printf_float+0x22e>
 800b318:	6823      	ldr	r3, [r4, #0]
 800b31a:	07d8      	lsls	r0, r3, #31
 800b31c:	d510      	bpl.n	800b340 <_printf_float+0x250>
 800b31e:	ee18 3a10 	vmov	r3, s16
 800b322:	4652      	mov	r2, sl
 800b324:	4631      	mov	r1, r6
 800b326:	4628      	mov	r0, r5
 800b328:	47b8      	blx	r7
 800b32a:	3001      	adds	r0, #1
 800b32c:	f43f af41 	beq.w	800b1b2 <_printf_float+0xc2>
 800b330:	f04f 0800 	mov.w	r8, #0
 800b334:	f104 091a 	add.w	r9, r4, #26
 800b338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b33a:	3b01      	subs	r3, #1
 800b33c:	4543      	cmp	r3, r8
 800b33e:	dc09      	bgt.n	800b354 <_printf_float+0x264>
 800b340:	6823      	ldr	r3, [r4, #0]
 800b342:	079b      	lsls	r3, r3, #30
 800b344:	f100 8105 	bmi.w	800b552 <_printf_float+0x462>
 800b348:	68e0      	ldr	r0, [r4, #12]
 800b34a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b34c:	4298      	cmp	r0, r3
 800b34e:	bfb8      	it	lt
 800b350:	4618      	movlt	r0, r3
 800b352:	e730      	b.n	800b1b6 <_printf_float+0xc6>
 800b354:	2301      	movs	r3, #1
 800b356:	464a      	mov	r2, r9
 800b358:	4631      	mov	r1, r6
 800b35a:	4628      	mov	r0, r5
 800b35c:	47b8      	blx	r7
 800b35e:	3001      	adds	r0, #1
 800b360:	f43f af27 	beq.w	800b1b2 <_printf_float+0xc2>
 800b364:	f108 0801 	add.w	r8, r8, #1
 800b368:	e7e6      	b.n	800b338 <_printf_float+0x248>
 800b36a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	dc39      	bgt.n	800b3e4 <_printf_float+0x2f4>
 800b370:	4a1b      	ldr	r2, [pc, #108]	; (800b3e0 <_printf_float+0x2f0>)
 800b372:	2301      	movs	r3, #1
 800b374:	4631      	mov	r1, r6
 800b376:	4628      	mov	r0, r5
 800b378:	47b8      	blx	r7
 800b37a:	3001      	adds	r0, #1
 800b37c:	f43f af19 	beq.w	800b1b2 <_printf_float+0xc2>
 800b380:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b384:	4313      	orrs	r3, r2
 800b386:	d102      	bne.n	800b38e <_printf_float+0x29e>
 800b388:	6823      	ldr	r3, [r4, #0]
 800b38a:	07d9      	lsls	r1, r3, #31
 800b38c:	d5d8      	bpl.n	800b340 <_printf_float+0x250>
 800b38e:	ee18 3a10 	vmov	r3, s16
 800b392:	4652      	mov	r2, sl
 800b394:	4631      	mov	r1, r6
 800b396:	4628      	mov	r0, r5
 800b398:	47b8      	blx	r7
 800b39a:	3001      	adds	r0, #1
 800b39c:	f43f af09 	beq.w	800b1b2 <_printf_float+0xc2>
 800b3a0:	f04f 0900 	mov.w	r9, #0
 800b3a4:	f104 0a1a 	add.w	sl, r4, #26
 800b3a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3aa:	425b      	negs	r3, r3
 800b3ac:	454b      	cmp	r3, r9
 800b3ae:	dc01      	bgt.n	800b3b4 <_printf_float+0x2c4>
 800b3b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3b2:	e792      	b.n	800b2da <_printf_float+0x1ea>
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	4652      	mov	r2, sl
 800b3b8:	4631      	mov	r1, r6
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	47b8      	blx	r7
 800b3be:	3001      	adds	r0, #1
 800b3c0:	f43f aef7 	beq.w	800b1b2 <_printf_float+0xc2>
 800b3c4:	f109 0901 	add.w	r9, r9, #1
 800b3c8:	e7ee      	b.n	800b3a8 <_printf_float+0x2b8>
 800b3ca:	bf00      	nop
 800b3cc:	7fefffff 	.word	0x7fefffff
 800b3d0:	080111f0 	.word	0x080111f0
 800b3d4:	080111f4 	.word	0x080111f4
 800b3d8:	080111fc 	.word	0x080111fc
 800b3dc:	080111f8 	.word	0x080111f8
 800b3e0:	08011200 	.word	0x08011200
 800b3e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	bfa8      	it	ge
 800b3ec:	461a      	movge	r2, r3
 800b3ee:	2a00      	cmp	r2, #0
 800b3f0:	4691      	mov	r9, r2
 800b3f2:	dc37      	bgt.n	800b464 <_printf_float+0x374>
 800b3f4:	f04f 0b00 	mov.w	fp, #0
 800b3f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b3fc:	f104 021a 	add.w	r2, r4, #26
 800b400:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b402:	9305      	str	r3, [sp, #20]
 800b404:	eba3 0309 	sub.w	r3, r3, r9
 800b408:	455b      	cmp	r3, fp
 800b40a:	dc33      	bgt.n	800b474 <_printf_float+0x384>
 800b40c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b410:	429a      	cmp	r2, r3
 800b412:	db3b      	blt.n	800b48c <_printf_float+0x39c>
 800b414:	6823      	ldr	r3, [r4, #0]
 800b416:	07da      	lsls	r2, r3, #31
 800b418:	d438      	bmi.n	800b48c <_printf_float+0x39c>
 800b41a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b41c:	9a05      	ldr	r2, [sp, #20]
 800b41e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b420:	1a9a      	subs	r2, r3, r2
 800b422:	eba3 0901 	sub.w	r9, r3, r1
 800b426:	4591      	cmp	r9, r2
 800b428:	bfa8      	it	ge
 800b42a:	4691      	movge	r9, r2
 800b42c:	f1b9 0f00 	cmp.w	r9, #0
 800b430:	dc35      	bgt.n	800b49e <_printf_float+0x3ae>
 800b432:	f04f 0800 	mov.w	r8, #0
 800b436:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b43a:	f104 0a1a 	add.w	sl, r4, #26
 800b43e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b442:	1a9b      	subs	r3, r3, r2
 800b444:	eba3 0309 	sub.w	r3, r3, r9
 800b448:	4543      	cmp	r3, r8
 800b44a:	f77f af79 	ble.w	800b340 <_printf_float+0x250>
 800b44e:	2301      	movs	r3, #1
 800b450:	4652      	mov	r2, sl
 800b452:	4631      	mov	r1, r6
 800b454:	4628      	mov	r0, r5
 800b456:	47b8      	blx	r7
 800b458:	3001      	adds	r0, #1
 800b45a:	f43f aeaa 	beq.w	800b1b2 <_printf_float+0xc2>
 800b45e:	f108 0801 	add.w	r8, r8, #1
 800b462:	e7ec      	b.n	800b43e <_printf_float+0x34e>
 800b464:	4613      	mov	r3, r2
 800b466:	4631      	mov	r1, r6
 800b468:	4642      	mov	r2, r8
 800b46a:	4628      	mov	r0, r5
 800b46c:	47b8      	blx	r7
 800b46e:	3001      	adds	r0, #1
 800b470:	d1c0      	bne.n	800b3f4 <_printf_float+0x304>
 800b472:	e69e      	b.n	800b1b2 <_printf_float+0xc2>
 800b474:	2301      	movs	r3, #1
 800b476:	4631      	mov	r1, r6
 800b478:	4628      	mov	r0, r5
 800b47a:	9205      	str	r2, [sp, #20]
 800b47c:	47b8      	blx	r7
 800b47e:	3001      	adds	r0, #1
 800b480:	f43f ae97 	beq.w	800b1b2 <_printf_float+0xc2>
 800b484:	9a05      	ldr	r2, [sp, #20]
 800b486:	f10b 0b01 	add.w	fp, fp, #1
 800b48a:	e7b9      	b.n	800b400 <_printf_float+0x310>
 800b48c:	ee18 3a10 	vmov	r3, s16
 800b490:	4652      	mov	r2, sl
 800b492:	4631      	mov	r1, r6
 800b494:	4628      	mov	r0, r5
 800b496:	47b8      	blx	r7
 800b498:	3001      	adds	r0, #1
 800b49a:	d1be      	bne.n	800b41a <_printf_float+0x32a>
 800b49c:	e689      	b.n	800b1b2 <_printf_float+0xc2>
 800b49e:	9a05      	ldr	r2, [sp, #20]
 800b4a0:	464b      	mov	r3, r9
 800b4a2:	4442      	add	r2, r8
 800b4a4:	4631      	mov	r1, r6
 800b4a6:	4628      	mov	r0, r5
 800b4a8:	47b8      	blx	r7
 800b4aa:	3001      	adds	r0, #1
 800b4ac:	d1c1      	bne.n	800b432 <_printf_float+0x342>
 800b4ae:	e680      	b.n	800b1b2 <_printf_float+0xc2>
 800b4b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4b2:	2a01      	cmp	r2, #1
 800b4b4:	dc01      	bgt.n	800b4ba <_printf_float+0x3ca>
 800b4b6:	07db      	lsls	r3, r3, #31
 800b4b8:	d538      	bpl.n	800b52c <_printf_float+0x43c>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	4642      	mov	r2, r8
 800b4be:	4631      	mov	r1, r6
 800b4c0:	4628      	mov	r0, r5
 800b4c2:	47b8      	blx	r7
 800b4c4:	3001      	adds	r0, #1
 800b4c6:	f43f ae74 	beq.w	800b1b2 <_printf_float+0xc2>
 800b4ca:	ee18 3a10 	vmov	r3, s16
 800b4ce:	4652      	mov	r2, sl
 800b4d0:	4631      	mov	r1, r6
 800b4d2:	4628      	mov	r0, r5
 800b4d4:	47b8      	blx	r7
 800b4d6:	3001      	adds	r0, #1
 800b4d8:	f43f ae6b 	beq.w	800b1b2 <_printf_float+0xc2>
 800b4dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	f7f5 fb00 	bl	8000ae8 <__aeabi_dcmpeq>
 800b4e8:	b9d8      	cbnz	r0, 800b522 <_printf_float+0x432>
 800b4ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4ec:	f108 0201 	add.w	r2, r8, #1
 800b4f0:	3b01      	subs	r3, #1
 800b4f2:	4631      	mov	r1, r6
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	47b8      	blx	r7
 800b4f8:	3001      	adds	r0, #1
 800b4fa:	d10e      	bne.n	800b51a <_printf_float+0x42a>
 800b4fc:	e659      	b.n	800b1b2 <_printf_float+0xc2>
 800b4fe:	2301      	movs	r3, #1
 800b500:	4652      	mov	r2, sl
 800b502:	4631      	mov	r1, r6
 800b504:	4628      	mov	r0, r5
 800b506:	47b8      	blx	r7
 800b508:	3001      	adds	r0, #1
 800b50a:	f43f ae52 	beq.w	800b1b2 <_printf_float+0xc2>
 800b50e:	f108 0801 	add.w	r8, r8, #1
 800b512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b514:	3b01      	subs	r3, #1
 800b516:	4543      	cmp	r3, r8
 800b518:	dcf1      	bgt.n	800b4fe <_printf_float+0x40e>
 800b51a:	464b      	mov	r3, r9
 800b51c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b520:	e6dc      	b.n	800b2dc <_printf_float+0x1ec>
 800b522:	f04f 0800 	mov.w	r8, #0
 800b526:	f104 0a1a 	add.w	sl, r4, #26
 800b52a:	e7f2      	b.n	800b512 <_printf_float+0x422>
 800b52c:	2301      	movs	r3, #1
 800b52e:	4642      	mov	r2, r8
 800b530:	e7df      	b.n	800b4f2 <_printf_float+0x402>
 800b532:	2301      	movs	r3, #1
 800b534:	464a      	mov	r2, r9
 800b536:	4631      	mov	r1, r6
 800b538:	4628      	mov	r0, r5
 800b53a:	47b8      	blx	r7
 800b53c:	3001      	adds	r0, #1
 800b53e:	f43f ae38 	beq.w	800b1b2 <_printf_float+0xc2>
 800b542:	f108 0801 	add.w	r8, r8, #1
 800b546:	68e3      	ldr	r3, [r4, #12]
 800b548:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b54a:	1a5b      	subs	r3, r3, r1
 800b54c:	4543      	cmp	r3, r8
 800b54e:	dcf0      	bgt.n	800b532 <_printf_float+0x442>
 800b550:	e6fa      	b.n	800b348 <_printf_float+0x258>
 800b552:	f04f 0800 	mov.w	r8, #0
 800b556:	f104 0919 	add.w	r9, r4, #25
 800b55a:	e7f4      	b.n	800b546 <_printf_float+0x456>

0800b55c <_printf_common>:
 800b55c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b560:	4616      	mov	r6, r2
 800b562:	4699      	mov	r9, r3
 800b564:	688a      	ldr	r2, [r1, #8]
 800b566:	690b      	ldr	r3, [r1, #16]
 800b568:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b56c:	4293      	cmp	r3, r2
 800b56e:	bfb8      	it	lt
 800b570:	4613      	movlt	r3, r2
 800b572:	6033      	str	r3, [r6, #0]
 800b574:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b578:	4607      	mov	r7, r0
 800b57a:	460c      	mov	r4, r1
 800b57c:	b10a      	cbz	r2, 800b582 <_printf_common+0x26>
 800b57e:	3301      	adds	r3, #1
 800b580:	6033      	str	r3, [r6, #0]
 800b582:	6823      	ldr	r3, [r4, #0]
 800b584:	0699      	lsls	r1, r3, #26
 800b586:	bf42      	ittt	mi
 800b588:	6833      	ldrmi	r3, [r6, #0]
 800b58a:	3302      	addmi	r3, #2
 800b58c:	6033      	strmi	r3, [r6, #0]
 800b58e:	6825      	ldr	r5, [r4, #0]
 800b590:	f015 0506 	ands.w	r5, r5, #6
 800b594:	d106      	bne.n	800b5a4 <_printf_common+0x48>
 800b596:	f104 0a19 	add.w	sl, r4, #25
 800b59a:	68e3      	ldr	r3, [r4, #12]
 800b59c:	6832      	ldr	r2, [r6, #0]
 800b59e:	1a9b      	subs	r3, r3, r2
 800b5a0:	42ab      	cmp	r3, r5
 800b5a2:	dc26      	bgt.n	800b5f2 <_printf_common+0x96>
 800b5a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b5a8:	1e13      	subs	r3, r2, #0
 800b5aa:	6822      	ldr	r2, [r4, #0]
 800b5ac:	bf18      	it	ne
 800b5ae:	2301      	movne	r3, #1
 800b5b0:	0692      	lsls	r2, r2, #26
 800b5b2:	d42b      	bmi.n	800b60c <_printf_common+0xb0>
 800b5b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b5b8:	4649      	mov	r1, r9
 800b5ba:	4638      	mov	r0, r7
 800b5bc:	47c0      	blx	r8
 800b5be:	3001      	adds	r0, #1
 800b5c0:	d01e      	beq.n	800b600 <_printf_common+0xa4>
 800b5c2:	6823      	ldr	r3, [r4, #0]
 800b5c4:	68e5      	ldr	r5, [r4, #12]
 800b5c6:	6832      	ldr	r2, [r6, #0]
 800b5c8:	f003 0306 	and.w	r3, r3, #6
 800b5cc:	2b04      	cmp	r3, #4
 800b5ce:	bf08      	it	eq
 800b5d0:	1aad      	subeq	r5, r5, r2
 800b5d2:	68a3      	ldr	r3, [r4, #8]
 800b5d4:	6922      	ldr	r2, [r4, #16]
 800b5d6:	bf0c      	ite	eq
 800b5d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5dc:	2500      	movne	r5, #0
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	bfc4      	itt	gt
 800b5e2:	1a9b      	subgt	r3, r3, r2
 800b5e4:	18ed      	addgt	r5, r5, r3
 800b5e6:	2600      	movs	r6, #0
 800b5e8:	341a      	adds	r4, #26
 800b5ea:	42b5      	cmp	r5, r6
 800b5ec:	d11a      	bne.n	800b624 <_printf_common+0xc8>
 800b5ee:	2000      	movs	r0, #0
 800b5f0:	e008      	b.n	800b604 <_printf_common+0xa8>
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	4652      	mov	r2, sl
 800b5f6:	4649      	mov	r1, r9
 800b5f8:	4638      	mov	r0, r7
 800b5fa:	47c0      	blx	r8
 800b5fc:	3001      	adds	r0, #1
 800b5fe:	d103      	bne.n	800b608 <_printf_common+0xac>
 800b600:	f04f 30ff 	mov.w	r0, #4294967295
 800b604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b608:	3501      	adds	r5, #1
 800b60a:	e7c6      	b.n	800b59a <_printf_common+0x3e>
 800b60c:	18e1      	adds	r1, r4, r3
 800b60e:	1c5a      	adds	r2, r3, #1
 800b610:	2030      	movs	r0, #48	; 0x30
 800b612:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b616:	4422      	add	r2, r4
 800b618:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b61c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b620:	3302      	adds	r3, #2
 800b622:	e7c7      	b.n	800b5b4 <_printf_common+0x58>
 800b624:	2301      	movs	r3, #1
 800b626:	4622      	mov	r2, r4
 800b628:	4649      	mov	r1, r9
 800b62a:	4638      	mov	r0, r7
 800b62c:	47c0      	blx	r8
 800b62e:	3001      	adds	r0, #1
 800b630:	d0e6      	beq.n	800b600 <_printf_common+0xa4>
 800b632:	3601      	adds	r6, #1
 800b634:	e7d9      	b.n	800b5ea <_printf_common+0x8e>
	...

0800b638 <_printf_i>:
 800b638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b63c:	7e0f      	ldrb	r7, [r1, #24]
 800b63e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b640:	2f78      	cmp	r7, #120	; 0x78
 800b642:	4691      	mov	r9, r2
 800b644:	4680      	mov	r8, r0
 800b646:	460c      	mov	r4, r1
 800b648:	469a      	mov	sl, r3
 800b64a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b64e:	d807      	bhi.n	800b660 <_printf_i+0x28>
 800b650:	2f62      	cmp	r7, #98	; 0x62
 800b652:	d80a      	bhi.n	800b66a <_printf_i+0x32>
 800b654:	2f00      	cmp	r7, #0
 800b656:	f000 80d8 	beq.w	800b80a <_printf_i+0x1d2>
 800b65a:	2f58      	cmp	r7, #88	; 0x58
 800b65c:	f000 80a3 	beq.w	800b7a6 <_printf_i+0x16e>
 800b660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b664:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b668:	e03a      	b.n	800b6e0 <_printf_i+0xa8>
 800b66a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b66e:	2b15      	cmp	r3, #21
 800b670:	d8f6      	bhi.n	800b660 <_printf_i+0x28>
 800b672:	a101      	add	r1, pc, #4	; (adr r1, 800b678 <_printf_i+0x40>)
 800b674:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b678:	0800b6d1 	.word	0x0800b6d1
 800b67c:	0800b6e5 	.word	0x0800b6e5
 800b680:	0800b661 	.word	0x0800b661
 800b684:	0800b661 	.word	0x0800b661
 800b688:	0800b661 	.word	0x0800b661
 800b68c:	0800b661 	.word	0x0800b661
 800b690:	0800b6e5 	.word	0x0800b6e5
 800b694:	0800b661 	.word	0x0800b661
 800b698:	0800b661 	.word	0x0800b661
 800b69c:	0800b661 	.word	0x0800b661
 800b6a0:	0800b661 	.word	0x0800b661
 800b6a4:	0800b7f1 	.word	0x0800b7f1
 800b6a8:	0800b715 	.word	0x0800b715
 800b6ac:	0800b7d3 	.word	0x0800b7d3
 800b6b0:	0800b661 	.word	0x0800b661
 800b6b4:	0800b661 	.word	0x0800b661
 800b6b8:	0800b813 	.word	0x0800b813
 800b6bc:	0800b661 	.word	0x0800b661
 800b6c0:	0800b715 	.word	0x0800b715
 800b6c4:	0800b661 	.word	0x0800b661
 800b6c8:	0800b661 	.word	0x0800b661
 800b6cc:	0800b7db 	.word	0x0800b7db
 800b6d0:	682b      	ldr	r3, [r5, #0]
 800b6d2:	1d1a      	adds	r2, r3, #4
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	602a      	str	r2, [r5, #0]
 800b6d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	e0a3      	b.n	800b82c <_printf_i+0x1f4>
 800b6e4:	6820      	ldr	r0, [r4, #0]
 800b6e6:	6829      	ldr	r1, [r5, #0]
 800b6e8:	0606      	lsls	r6, r0, #24
 800b6ea:	f101 0304 	add.w	r3, r1, #4
 800b6ee:	d50a      	bpl.n	800b706 <_printf_i+0xce>
 800b6f0:	680e      	ldr	r6, [r1, #0]
 800b6f2:	602b      	str	r3, [r5, #0]
 800b6f4:	2e00      	cmp	r6, #0
 800b6f6:	da03      	bge.n	800b700 <_printf_i+0xc8>
 800b6f8:	232d      	movs	r3, #45	; 0x2d
 800b6fa:	4276      	negs	r6, r6
 800b6fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b700:	485e      	ldr	r0, [pc, #376]	; (800b87c <_printf_i+0x244>)
 800b702:	230a      	movs	r3, #10
 800b704:	e019      	b.n	800b73a <_printf_i+0x102>
 800b706:	680e      	ldr	r6, [r1, #0]
 800b708:	602b      	str	r3, [r5, #0]
 800b70a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b70e:	bf18      	it	ne
 800b710:	b236      	sxthne	r6, r6
 800b712:	e7ef      	b.n	800b6f4 <_printf_i+0xbc>
 800b714:	682b      	ldr	r3, [r5, #0]
 800b716:	6820      	ldr	r0, [r4, #0]
 800b718:	1d19      	adds	r1, r3, #4
 800b71a:	6029      	str	r1, [r5, #0]
 800b71c:	0601      	lsls	r1, r0, #24
 800b71e:	d501      	bpl.n	800b724 <_printf_i+0xec>
 800b720:	681e      	ldr	r6, [r3, #0]
 800b722:	e002      	b.n	800b72a <_printf_i+0xf2>
 800b724:	0646      	lsls	r6, r0, #25
 800b726:	d5fb      	bpl.n	800b720 <_printf_i+0xe8>
 800b728:	881e      	ldrh	r6, [r3, #0]
 800b72a:	4854      	ldr	r0, [pc, #336]	; (800b87c <_printf_i+0x244>)
 800b72c:	2f6f      	cmp	r7, #111	; 0x6f
 800b72e:	bf0c      	ite	eq
 800b730:	2308      	moveq	r3, #8
 800b732:	230a      	movne	r3, #10
 800b734:	2100      	movs	r1, #0
 800b736:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b73a:	6865      	ldr	r5, [r4, #4]
 800b73c:	60a5      	str	r5, [r4, #8]
 800b73e:	2d00      	cmp	r5, #0
 800b740:	bfa2      	ittt	ge
 800b742:	6821      	ldrge	r1, [r4, #0]
 800b744:	f021 0104 	bicge.w	r1, r1, #4
 800b748:	6021      	strge	r1, [r4, #0]
 800b74a:	b90e      	cbnz	r6, 800b750 <_printf_i+0x118>
 800b74c:	2d00      	cmp	r5, #0
 800b74e:	d04d      	beq.n	800b7ec <_printf_i+0x1b4>
 800b750:	4615      	mov	r5, r2
 800b752:	fbb6 f1f3 	udiv	r1, r6, r3
 800b756:	fb03 6711 	mls	r7, r3, r1, r6
 800b75a:	5dc7      	ldrb	r7, [r0, r7]
 800b75c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b760:	4637      	mov	r7, r6
 800b762:	42bb      	cmp	r3, r7
 800b764:	460e      	mov	r6, r1
 800b766:	d9f4      	bls.n	800b752 <_printf_i+0x11a>
 800b768:	2b08      	cmp	r3, #8
 800b76a:	d10b      	bne.n	800b784 <_printf_i+0x14c>
 800b76c:	6823      	ldr	r3, [r4, #0]
 800b76e:	07de      	lsls	r6, r3, #31
 800b770:	d508      	bpl.n	800b784 <_printf_i+0x14c>
 800b772:	6923      	ldr	r3, [r4, #16]
 800b774:	6861      	ldr	r1, [r4, #4]
 800b776:	4299      	cmp	r1, r3
 800b778:	bfde      	ittt	le
 800b77a:	2330      	movle	r3, #48	; 0x30
 800b77c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b780:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b784:	1b52      	subs	r2, r2, r5
 800b786:	6122      	str	r2, [r4, #16]
 800b788:	f8cd a000 	str.w	sl, [sp]
 800b78c:	464b      	mov	r3, r9
 800b78e:	aa03      	add	r2, sp, #12
 800b790:	4621      	mov	r1, r4
 800b792:	4640      	mov	r0, r8
 800b794:	f7ff fee2 	bl	800b55c <_printf_common>
 800b798:	3001      	adds	r0, #1
 800b79a:	d14c      	bne.n	800b836 <_printf_i+0x1fe>
 800b79c:	f04f 30ff 	mov.w	r0, #4294967295
 800b7a0:	b004      	add	sp, #16
 800b7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7a6:	4835      	ldr	r0, [pc, #212]	; (800b87c <_printf_i+0x244>)
 800b7a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b7ac:	6829      	ldr	r1, [r5, #0]
 800b7ae:	6823      	ldr	r3, [r4, #0]
 800b7b0:	f851 6b04 	ldr.w	r6, [r1], #4
 800b7b4:	6029      	str	r1, [r5, #0]
 800b7b6:	061d      	lsls	r5, r3, #24
 800b7b8:	d514      	bpl.n	800b7e4 <_printf_i+0x1ac>
 800b7ba:	07df      	lsls	r7, r3, #31
 800b7bc:	bf44      	itt	mi
 800b7be:	f043 0320 	orrmi.w	r3, r3, #32
 800b7c2:	6023      	strmi	r3, [r4, #0]
 800b7c4:	b91e      	cbnz	r6, 800b7ce <_printf_i+0x196>
 800b7c6:	6823      	ldr	r3, [r4, #0]
 800b7c8:	f023 0320 	bic.w	r3, r3, #32
 800b7cc:	6023      	str	r3, [r4, #0]
 800b7ce:	2310      	movs	r3, #16
 800b7d0:	e7b0      	b.n	800b734 <_printf_i+0xfc>
 800b7d2:	6823      	ldr	r3, [r4, #0]
 800b7d4:	f043 0320 	orr.w	r3, r3, #32
 800b7d8:	6023      	str	r3, [r4, #0]
 800b7da:	2378      	movs	r3, #120	; 0x78
 800b7dc:	4828      	ldr	r0, [pc, #160]	; (800b880 <_printf_i+0x248>)
 800b7de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b7e2:	e7e3      	b.n	800b7ac <_printf_i+0x174>
 800b7e4:	0659      	lsls	r1, r3, #25
 800b7e6:	bf48      	it	mi
 800b7e8:	b2b6      	uxthmi	r6, r6
 800b7ea:	e7e6      	b.n	800b7ba <_printf_i+0x182>
 800b7ec:	4615      	mov	r5, r2
 800b7ee:	e7bb      	b.n	800b768 <_printf_i+0x130>
 800b7f0:	682b      	ldr	r3, [r5, #0]
 800b7f2:	6826      	ldr	r6, [r4, #0]
 800b7f4:	6961      	ldr	r1, [r4, #20]
 800b7f6:	1d18      	adds	r0, r3, #4
 800b7f8:	6028      	str	r0, [r5, #0]
 800b7fa:	0635      	lsls	r5, r6, #24
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	d501      	bpl.n	800b804 <_printf_i+0x1cc>
 800b800:	6019      	str	r1, [r3, #0]
 800b802:	e002      	b.n	800b80a <_printf_i+0x1d2>
 800b804:	0670      	lsls	r0, r6, #25
 800b806:	d5fb      	bpl.n	800b800 <_printf_i+0x1c8>
 800b808:	8019      	strh	r1, [r3, #0]
 800b80a:	2300      	movs	r3, #0
 800b80c:	6123      	str	r3, [r4, #16]
 800b80e:	4615      	mov	r5, r2
 800b810:	e7ba      	b.n	800b788 <_printf_i+0x150>
 800b812:	682b      	ldr	r3, [r5, #0]
 800b814:	1d1a      	adds	r2, r3, #4
 800b816:	602a      	str	r2, [r5, #0]
 800b818:	681d      	ldr	r5, [r3, #0]
 800b81a:	6862      	ldr	r2, [r4, #4]
 800b81c:	2100      	movs	r1, #0
 800b81e:	4628      	mov	r0, r5
 800b820:	f7f4 fcee 	bl	8000200 <memchr>
 800b824:	b108      	cbz	r0, 800b82a <_printf_i+0x1f2>
 800b826:	1b40      	subs	r0, r0, r5
 800b828:	6060      	str	r0, [r4, #4]
 800b82a:	6863      	ldr	r3, [r4, #4]
 800b82c:	6123      	str	r3, [r4, #16]
 800b82e:	2300      	movs	r3, #0
 800b830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b834:	e7a8      	b.n	800b788 <_printf_i+0x150>
 800b836:	6923      	ldr	r3, [r4, #16]
 800b838:	462a      	mov	r2, r5
 800b83a:	4649      	mov	r1, r9
 800b83c:	4640      	mov	r0, r8
 800b83e:	47d0      	blx	sl
 800b840:	3001      	adds	r0, #1
 800b842:	d0ab      	beq.n	800b79c <_printf_i+0x164>
 800b844:	6823      	ldr	r3, [r4, #0]
 800b846:	079b      	lsls	r3, r3, #30
 800b848:	d413      	bmi.n	800b872 <_printf_i+0x23a>
 800b84a:	68e0      	ldr	r0, [r4, #12]
 800b84c:	9b03      	ldr	r3, [sp, #12]
 800b84e:	4298      	cmp	r0, r3
 800b850:	bfb8      	it	lt
 800b852:	4618      	movlt	r0, r3
 800b854:	e7a4      	b.n	800b7a0 <_printf_i+0x168>
 800b856:	2301      	movs	r3, #1
 800b858:	4632      	mov	r2, r6
 800b85a:	4649      	mov	r1, r9
 800b85c:	4640      	mov	r0, r8
 800b85e:	47d0      	blx	sl
 800b860:	3001      	adds	r0, #1
 800b862:	d09b      	beq.n	800b79c <_printf_i+0x164>
 800b864:	3501      	adds	r5, #1
 800b866:	68e3      	ldr	r3, [r4, #12]
 800b868:	9903      	ldr	r1, [sp, #12]
 800b86a:	1a5b      	subs	r3, r3, r1
 800b86c:	42ab      	cmp	r3, r5
 800b86e:	dcf2      	bgt.n	800b856 <_printf_i+0x21e>
 800b870:	e7eb      	b.n	800b84a <_printf_i+0x212>
 800b872:	2500      	movs	r5, #0
 800b874:	f104 0619 	add.w	r6, r4, #25
 800b878:	e7f5      	b.n	800b866 <_printf_i+0x22e>
 800b87a:	bf00      	nop
 800b87c:	08011202 	.word	0x08011202
 800b880:	08011213 	.word	0x08011213

0800b884 <_scanf_float>:
 800b884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b888:	b087      	sub	sp, #28
 800b88a:	4617      	mov	r7, r2
 800b88c:	9303      	str	r3, [sp, #12]
 800b88e:	688b      	ldr	r3, [r1, #8]
 800b890:	1e5a      	subs	r2, r3, #1
 800b892:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b896:	bf83      	ittte	hi
 800b898:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b89c:	195b      	addhi	r3, r3, r5
 800b89e:	9302      	strhi	r3, [sp, #8]
 800b8a0:	2300      	movls	r3, #0
 800b8a2:	bf86      	itte	hi
 800b8a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b8a8:	608b      	strhi	r3, [r1, #8]
 800b8aa:	9302      	strls	r3, [sp, #8]
 800b8ac:	680b      	ldr	r3, [r1, #0]
 800b8ae:	468b      	mov	fp, r1
 800b8b0:	2500      	movs	r5, #0
 800b8b2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b8b6:	f84b 3b1c 	str.w	r3, [fp], #28
 800b8ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b8be:	4680      	mov	r8, r0
 800b8c0:	460c      	mov	r4, r1
 800b8c2:	465e      	mov	r6, fp
 800b8c4:	46aa      	mov	sl, r5
 800b8c6:	46a9      	mov	r9, r5
 800b8c8:	9501      	str	r5, [sp, #4]
 800b8ca:	68a2      	ldr	r2, [r4, #8]
 800b8cc:	b152      	cbz	r2, 800b8e4 <_scanf_float+0x60>
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	2b4e      	cmp	r3, #78	; 0x4e
 800b8d4:	d864      	bhi.n	800b9a0 <_scanf_float+0x11c>
 800b8d6:	2b40      	cmp	r3, #64	; 0x40
 800b8d8:	d83c      	bhi.n	800b954 <_scanf_float+0xd0>
 800b8da:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b8de:	b2c8      	uxtb	r0, r1
 800b8e0:	280e      	cmp	r0, #14
 800b8e2:	d93a      	bls.n	800b95a <_scanf_float+0xd6>
 800b8e4:	f1b9 0f00 	cmp.w	r9, #0
 800b8e8:	d003      	beq.n	800b8f2 <_scanf_float+0x6e>
 800b8ea:	6823      	ldr	r3, [r4, #0]
 800b8ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8f0:	6023      	str	r3, [r4, #0]
 800b8f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b8f6:	f1ba 0f01 	cmp.w	sl, #1
 800b8fa:	f200 8113 	bhi.w	800bb24 <_scanf_float+0x2a0>
 800b8fe:	455e      	cmp	r6, fp
 800b900:	f200 8105 	bhi.w	800bb0e <_scanf_float+0x28a>
 800b904:	2501      	movs	r5, #1
 800b906:	4628      	mov	r0, r5
 800b908:	b007      	add	sp, #28
 800b90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b90e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b912:	2a0d      	cmp	r2, #13
 800b914:	d8e6      	bhi.n	800b8e4 <_scanf_float+0x60>
 800b916:	a101      	add	r1, pc, #4	; (adr r1, 800b91c <_scanf_float+0x98>)
 800b918:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b91c:	0800ba5b 	.word	0x0800ba5b
 800b920:	0800b8e5 	.word	0x0800b8e5
 800b924:	0800b8e5 	.word	0x0800b8e5
 800b928:	0800b8e5 	.word	0x0800b8e5
 800b92c:	0800babb 	.word	0x0800babb
 800b930:	0800ba93 	.word	0x0800ba93
 800b934:	0800b8e5 	.word	0x0800b8e5
 800b938:	0800b8e5 	.word	0x0800b8e5
 800b93c:	0800ba69 	.word	0x0800ba69
 800b940:	0800b8e5 	.word	0x0800b8e5
 800b944:	0800b8e5 	.word	0x0800b8e5
 800b948:	0800b8e5 	.word	0x0800b8e5
 800b94c:	0800b8e5 	.word	0x0800b8e5
 800b950:	0800ba21 	.word	0x0800ba21
 800b954:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b958:	e7db      	b.n	800b912 <_scanf_float+0x8e>
 800b95a:	290e      	cmp	r1, #14
 800b95c:	d8c2      	bhi.n	800b8e4 <_scanf_float+0x60>
 800b95e:	a001      	add	r0, pc, #4	; (adr r0, 800b964 <_scanf_float+0xe0>)
 800b960:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b964:	0800ba13 	.word	0x0800ba13
 800b968:	0800b8e5 	.word	0x0800b8e5
 800b96c:	0800ba13 	.word	0x0800ba13
 800b970:	0800baa7 	.word	0x0800baa7
 800b974:	0800b8e5 	.word	0x0800b8e5
 800b978:	0800b9c1 	.word	0x0800b9c1
 800b97c:	0800b9fd 	.word	0x0800b9fd
 800b980:	0800b9fd 	.word	0x0800b9fd
 800b984:	0800b9fd 	.word	0x0800b9fd
 800b988:	0800b9fd 	.word	0x0800b9fd
 800b98c:	0800b9fd 	.word	0x0800b9fd
 800b990:	0800b9fd 	.word	0x0800b9fd
 800b994:	0800b9fd 	.word	0x0800b9fd
 800b998:	0800b9fd 	.word	0x0800b9fd
 800b99c:	0800b9fd 	.word	0x0800b9fd
 800b9a0:	2b6e      	cmp	r3, #110	; 0x6e
 800b9a2:	d809      	bhi.n	800b9b8 <_scanf_float+0x134>
 800b9a4:	2b60      	cmp	r3, #96	; 0x60
 800b9a6:	d8b2      	bhi.n	800b90e <_scanf_float+0x8a>
 800b9a8:	2b54      	cmp	r3, #84	; 0x54
 800b9aa:	d077      	beq.n	800ba9c <_scanf_float+0x218>
 800b9ac:	2b59      	cmp	r3, #89	; 0x59
 800b9ae:	d199      	bne.n	800b8e4 <_scanf_float+0x60>
 800b9b0:	2d07      	cmp	r5, #7
 800b9b2:	d197      	bne.n	800b8e4 <_scanf_float+0x60>
 800b9b4:	2508      	movs	r5, #8
 800b9b6:	e029      	b.n	800ba0c <_scanf_float+0x188>
 800b9b8:	2b74      	cmp	r3, #116	; 0x74
 800b9ba:	d06f      	beq.n	800ba9c <_scanf_float+0x218>
 800b9bc:	2b79      	cmp	r3, #121	; 0x79
 800b9be:	e7f6      	b.n	800b9ae <_scanf_float+0x12a>
 800b9c0:	6821      	ldr	r1, [r4, #0]
 800b9c2:	05c8      	lsls	r0, r1, #23
 800b9c4:	d51a      	bpl.n	800b9fc <_scanf_float+0x178>
 800b9c6:	9b02      	ldr	r3, [sp, #8]
 800b9c8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b9cc:	6021      	str	r1, [r4, #0]
 800b9ce:	f109 0901 	add.w	r9, r9, #1
 800b9d2:	b11b      	cbz	r3, 800b9dc <_scanf_float+0x158>
 800b9d4:	3b01      	subs	r3, #1
 800b9d6:	3201      	adds	r2, #1
 800b9d8:	9302      	str	r3, [sp, #8]
 800b9da:	60a2      	str	r2, [r4, #8]
 800b9dc:	68a3      	ldr	r3, [r4, #8]
 800b9de:	3b01      	subs	r3, #1
 800b9e0:	60a3      	str	r3, [r4, #8]
 800b9e2:	6923      	ldr	r3, [r4, #16]
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	6123      	str	r3, [r4, #16]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	3b01      	subs	r3, #1
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	607b      	str	r3, [r7, #4]
 800b9f0:	f340 8084 	ble.w	800bafc <_scanf_float+0x278>
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	603b      	str	r3, [r7, #0]
 800b9fa:	e766      	b.n	800b8ca <_scanf_float+0x46>
 800b9fc:	eb1a 0f05 	cmn.w	sl, r5
 800ba00:	f47f af70 	bne.w	800b8e4 <_scanf_float+0x60>
 800ba04:	6822      	ldr	r2, [r4, #0]
 800ba06:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ba0a:	6022      	str	r2, [r4, #0]
 800ba0c:	f806 3b01 	strb.w	r3, [r6], #1
 800ba10:	e7e4      	b.n	800b9dc <_scanf_float+0x158>
 800ba12:	6822      	ldr	r2, [r4, #0]
 800ba14:	0610      	lsls	r0, r2, #24
 800ba16:	f57f af65 	bpl.w	800b8e4 <_scanf_float+0x60>
 800ba1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba1e:	e7f4      	b.n	800ba0a <_scanf_float+0x186>
 800ba20:	f1ba 0f00 	cmp.w	sl, #0
 800ba24:	d10e      	bne.n	800ba44 <_scanf_float+0x1c0>
 800ba26:	f1b9 0f00 	cmp.w	r9, #0
 800ba2a:	d10e      	bne.n	800ba4a <_scanf_float+0x1c6>
 800ba2c:	6822      	ldr	r2, [r4, #0]
 800ba2e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ba32:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ba36:	d108      	bne.n	800ba4a <_scanf_float+0x1c6>
 800ba38:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ba3c:	6022      	str	r2, [r4, #0]
 800ba3e:	f04f 0a01 	mov.w	sl, #1
 800ba42:	e7e3      	b.n	800ba0c <_scanf_float+0x188>
 800ba44:	f1ba 0f02 	cmp.w	sl, #2
 800ba48:	d055      	beq.n	800baf6 <_scanf_float+0x272>
 800ba4a:	2d01      	cmp	r5, #1
 800ba4c:	d002      	beq.n	800ba54 <_scanf_float+0x1d0>
 800ba4e:	2d04      	cmp	r5, #4
 800ba50:	f47f af48 	bne.w	800b8e4 <_scanf_float+0x60>
 800ba54:	3501      	adds	r5, #1
 800ba56:	b2ed      	uxtb	r5, r5
 800ba58:	e7d8      	b.n	800ba0c <_scanf_float+0x188>
 800ba5a:	f1ba 0f01 	cmp.w	sl, #1
 800ba5e:	f47f af41 	bne.w	800b8e4 <_scanf_float+0x60>
 800ba62:	f04f 0a02 	mov.w	sl, #2
 800ba66:	e7d1      	b.n	800ba0c <_scanf_float+0x188>
 800ba68:	b97d      	cbnz	r5, 800ba8a <_scanf_float+0x206>
 800ba6a:	f1b9 0f00 	cmp.w	r9, #0
 800ba6e:	f47f af3c 	bne.w	800b8ea <_scanf_float+0x66>
 800ba72:	6822      	ldr	r2, [r4, #0]
 800ba74:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ba78:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ba7c:	f47f af39 	bne.w	800b8f2 <_scanf_float+0x6e>
 800ba80:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ba84:	6022      	str	r2, [r4, #0]
 800ba86:	2501      	movs	r5, #1
 800ba88:	e7c0      	b.n	800ba0c <_scanf_float+0x188>
 800ba8a:	2d03      	cmp	r5, #3
 800ba8c:	d0e2      	beq.n	800ba54 <_scanf_float+0x1d0>
 800ba8e:	2d05      	cmp	r5, #5
 800ba90:	e7de      	b.n	800ba50 <_scanf_float+0x1cc>
 800ba92:	2d02      	cmp	r5, #2
 800ba94:	f47f af26 	bne.w	800b8e4 <_scanf_float+0x60>
 800ba98:	2503      	movs	r5, #3
 800ba9a:	e7b7      	b.n	800ba0c <_scanf_float+0x188>
 800ba9c:	2d06      	cmp	r5, #6
 800ba9e:	f47f af21 	bne.w	800b8e4 <_scanf_float+0x60>
 800baa2:	2507      	movs	r5, #7
 800baa4:	e7b2      	b.n	800ba0c <_scanf_float+0x188>
 800baa6:	6822      	ldr	r2, [r4, #0]
 800baa8:	0591      	lsls	r1, r2, #22
 800baaa:	f57f af1b 	bpl.w	800b8e4 <_scanf_float+0x60>
 800baae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800bab2:	6022      	str	r2, [r4, #0]
 800bab4:	f8cd 9004 	str.w	r9, [sp, #4]
 800bab8:	e7a8      	b.n	800ba0c <_scanf_float+0x188>
 800baba:	6822      	ldr	r2, [r4, #0]
 800babc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800bac0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bac4:	d006      	beq.n	800bad4 <_scanf_float+0x250>
 800bac6:	0550      	lsls	r0, r2, #21
 800bac8:	f57f af0c 	bpl.w	800b8e4 <_scanf_float+0x60>
 800bacc:	f1b9 0f00 	cmp.w	r9, #0
 800bad0:	f43f af0f 	beq.w	800b8f2 <_scanf_float+0x6e>
 800bad4:	0591      	lsls	r1, r2, #22
 800bad6:	bf58      	it	pl
 800bad8:	9901      	ldrpl	r1, [sp, #4]
 800bada:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bade:	bf58      	it	pl
 800bae0:	eba9 0101 	subpl.w	r1, r9, r1
 800bae4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800bae8:	bf58      	it	pl
 800baea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800baee:	6022      	str	r2, [r4, #0]
 800baf0:	f04f 0900 	mov.w	r9, #0
 800baf4:	e78a      	b.n	800ba0c <_scanf_float+0x188>
 800baf6:	f04f 0a03 	mov.w	sl, #3
 800bafa:	e787      	b.n	800ba0c <_scanf_float+0x188>
 800bafc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bb00:	4639      	mov	r1, r7
 800bb02:	4640      	mov	r0, r8
 800bb04:	4798      	blx	r3
 800bb06:	2800      	cmp	r0, #0
 800bb08:	f43f aedf 	beq.w	800b8ca <_scanf_float+0x46>
 800bb0c:	e6ea      	b.n	800b8e4 <_scanf_float+0x60>
 800bb0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bb12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb16:	463a      	mov	r2, r7
 800bb18:	4640      	mov	r0, r8
 800bb1a:	4798      	blx	r3
 800bb1c:	6923      	ldr	r3, [r4, #16]
 800bb1e:	3b01      	subs	r3, #1
 800bb20:	6123      	str	r3, [r4, #16]
 800bb22:	e6ec      	b.n	800b8fe <_scanf_float+0x7a>
 800bb24:	1e6b      	subs	r3, r5, #1
 800bb26:	2b06      	cmp	r3, #6
 800bb28:	d825      	bhi.n	800bb76 <_scanf_float+0x2f2>
 800bb2a:	2d02      	cmp	r5, #2
 800bb2c:	d836      	bhi.n	800bb9c <_scanf_float+0x318>
 800bb2e:	455e      	cmp	r6, fp
 800bb30:	f67f aee8 	bls.w	800b904 <_scanf_float+0x80>
 800bb34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bb38:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb3c:	463a      	mov	r2, r7
 800bb3e:	4640      	mov	r0, r8
 800bb40:	4798      	blx	r3
 800bb42:	6923      	ldr	r3, [r4, #16]
 800bb44:	3b01      	subs	r3, #1
 800bb46:	6123      	str	r3, [r4, #16]
 800bb48:	e7f1      	b.n	800bb2e <_scanf_float+0x2aa>
 800bb4a:	9802      	ldr	r0, [sp, #8]
 800bb4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bb50:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800bb54:	9002      	str	r0, [sp, #8]
 800bb56:	463a      	mov	r2, r7
 800bb58:	4640      	mov	r0, r8
 800bb5a:	4798      	blx	r3
 800bb5c:	6923      	ldr	r3, [r4, #16]
 800bb5e:	3b01      	subs	r3, #1
 800bb60:	6123      	str	r3, [r4, #16]
 800bb62:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bb66:	fa5f fa8a 	uxtb.w	sl, sl
 800bb6a:	f1ba 0f02 	cmp.w	sl, #2
 800bb6e:	d1ec      	bne.n	800bb4a <_scanf_float+0x2c6>
 800bb70:	3d03      	subs	r5, #3
 800bb72:	b2ed      	uxtb	r5, r5
 800bb74:	1b76      	subs	r6, r6, r5
 800bb76:	6823      	ldr	r3, [r4, #0]
 800bb78:	05da      	lsls	r2, r3, #23
 800bb7a:	d52f      	bpl.n	800bbdc <_scanf_float+0x358>
 800bb7c:	055b      	lsls	r3, r3, #21
 800bb7e:	d510      	bpl.n	800bba2 <_scanf_float+0x31e>
 800bb80:	455e      	cmp	r6, fp
 800bb82:	f67f aebf 	bls.w	800b904 <_scanf_float+0x80>
 800bb86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bb8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb8e:	463a      	mov	r2, r7
 800bb90:	4640      	mov	r0, r8
 800bb92:	4798      	blx	r3
 800bb94:	6923      	ldr	r3, [r4, #16]
 800bb96:	3b01      	subs	r3, #1
 800bb98:	6123      	str	r3, [r4, #16]
 800bb9a:	e7f1      	b.n	800bb80 <_scanf_float+0x2fc>
 800bb9c:	46aa      	mov	sl, r5
 800bb9e:	9602      	str	r6, [sp, #8]
 800bba0:	e7df      	b.n	800bb62 <_scanf_float+0x2de>
 800bba2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bba6:	6923      	ldr	r3, [r4, #16]
 800bba8:	2965      	cmp	r1, #101	; 0x65
 800bbaa:	f103 33ff 	add.w	r3, r3, #4294967295
 800bbae:	f106 35ff 	add.w	r5, r6, #4294967295
 800bbb2:	6123      	str	r3, [r4, #16]
 800bbb4:	d00c      	beq.n	800bbd0 <_scanf_float+0x34c>
 800bbb6:	2945      	cmp	r1, #69	; 0x45
 800bbb8:	d00a      	beq.n	800bbd0 <_scanf_float+0x34c>
 800bbba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bbbe:	463a      	mov	r2, r7
 800bbc0:	4640      	mov	r0, r8
 800bbc2:	4798      	blx	r3
 800bbc4:	6923      	ldr	r3, [r4, #16]
 800bbc6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bbca:	3b01      	subs	r3, #1
 800bbcc:	1eb5      	subs	r5, r6, #2
 800bbce:	6123      	str	r3, [r4, #16]
 800bbd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bbd4:	463a      	mov	r2, r7
 800bbd6:	4640      	mov	r0, r8
 800bbd8:	4798      	blx	r3
 800bbda:	462e      	mov	r6, r5
 800bbdc:	6825      	ldr	r5, [r4, #0]
 800bbde:	f015 0510 	ands.w	r5, r5, #16
 800bbe2:	d159      	bne.n	800bc98 <_scanf_float+0x414>
 800bbe4:	7035      	strb	r5, [r6, #0]
 800bbe6:	6823      	ldr	r3, [r4, #0]
 800bbe8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bbec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bbf0:	d11b      	bne.n	800bc2a <_scanf_float+0x3a6>
 800bbf2:	9b01      	ldr	r3, [sp, #4]
 800bbf4:	454b      	cmp	r3, r9
 800bbf6:	eba3 0209 	sub.w	r2, r3, r9
 800bbfa:	d123      	bne.n	800bc44 <_scanf_float+0x3c0>
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	4659      	mov	r1, fp
 800bc00:	4640      	mov	r0, r8
 800bc02:	f000 ff57 	bl	800cab4 <_strtod_r>
 800bc06:	6822      	ldr	r2, [r4, #0]
 800bc08:	9b03      	ldr	r3, [sp, #12]
 800bc0a:	f012 0f02 	tst.w	r2, #2
 800bc0e:	ec57 6b10 	vmov	r6, r7, d0
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	d021      	beq.n	800bc5a <_scanf_float+0x3d6>
 800bc16:	9903      	ldr	r1, [sp, #12]
 800bc18:	1d1a      	adds	r2, r3, #4
 800bc1a:	600a      	str	r2, [r1, #0]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	e9c3 6700 	strd	r6, r7, [r3]
 800bc22:	68e3      	ldr	r3, [r4, #12]
 800bc24:	3301      	adds	r3, #1
 800bc26:	60e3      	str	r3, [r4, #12]
 800bc28:	e66d      	b.n	800b906 <_scanf_float+0x82>
 800bc2a:	9b04      	ldr	r3, [sp, #16]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d0e5      	beq.n	800bbfc <_scanf_float+0x378>
 800bc30:	9905      	ldr	r1, [sp, #20]
 800bc32:	230a      	movs	r3, #10
 800bc34:	462a      	mov	r2, r5
 800bc36:	3101      	adds	r1, #1
 800bc38:	4640      	mov	r0, r8
 800bc3a:	f000 ffc3 	bl	800cbc4 <_strtol_r>
 800bc3e:	9b04      	ldr	r3, [sp, #16]
 800bc40:	9e05      	ldr	r6, [sp, #20]
 800bc42:	1ac2      	subs	r2, r0, r3
 800bc44:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800bc48:	429e      	cmp	r6, r3
 800bc4a:	bf28      	it	cs
 800bc4c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800bc50:	4912      	ldr	r1, [pc, #72]	; (800bc9c <_scanf_float+0x418>)
 800bc52:	4630      	mov	r0, r6
 800bc54:	f000 f8a6 	bl	800bda4 <siprintf>
 800bc58:	e7d0      	b.n	800bbfc <_scanf_float+0x378>
 800bc5a:	9903      	ldr	r1, [sp, #12]
 800bc5c:	f012 0f04 	tst.w	r2, #4
 800bc60:	f103 0204 	add.w	r2, r3, #4
 800bc64:	600a      	str	r2, [r1, #0]
 800bc66:	d1d9      	bne.n	800bc1c <_scanf_float+0x398>
 800bc68:	f8d3 8000 	ldr.w	r8, [r3]
 800bc6c:	ee10 2a10 	vmov	r2, s0
 800bc70:	ee10 0a10 	vmov	r0, s0
 800bc74:	463b      	mov	r3, r7
 800bc76:	4639      	mov	r1, r7
 800bc78:	f7f4 ff68 	bl	8000b4c <__aeabi_dcmpun>
 800bc7c:	b128      	cbz	r0, 800bc8a <_scanf_float+0x406>
 800bc7e:	4808      	ldr	r0, [pc, #32]	; (800bca0 <_scanf_float+0x41c>)
 800bc80:	f000 f88a 	bl	800bd98 <nanf>
 800bc84:	ed88 0a00 	vstr	s0, [r8]
 800bc88:	e7cb      	b.n	800bc22 <_scanf_float+0x39e>
 800bc8a:	4630      	mov	r0, r6
 800bc8c:	4639      	mov	r1, r7
 800bc8e:	f7f4 ffbb 	bl	8000c08 <__aeabi_d2f>
 800bc92:	f8c8 0000 	str.w	r0, [r8]
 800bc96:	e7c4      	b.n	800bc22 <_scanf_float+0x39e>
 800bc98:	2500      	movs	r5, #0
 800bc9a:	e634      	b.n	800b906 <_scanf_float+0x82>
 800bc9c:	08011224 	.word	0x08011224
 800bca0:	08011630 	.word	0x08011630

0800bca4 <cleanup_glue>:
 800bca4:	b538      	push	{r3, r4, r5, lr}
 800bca6:	460c      	mov	r4, r1
 800bca8:	6809      	ldr	r1, [r1, #0]
 800bcaa:	4605      	mov	r5, r0
 800bcac:	b109      	cbz	r1, 800bcb2 <cleanup_glue+0xe>
 800bcae:	f7ff fff9 	bl	800bca4 <cleanup_glue>
 800bcb2:	4621      	mov	r1, r4
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcba:	f002 bf69 	b.w	800eb90 <_free_r>
	...

0800bcc0 <_reclaim_reent>:
 800bcc0:	4b2c      	ldr	r3, [pc, #176]	; (800bd74 <_reclaim_reent+0xb4>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4283      	cmp	r3, r0
 800bcc6:	b570      	push	{r4, r5, r6, lr}
 800bcc8:	4604      	mov	r4, r0
 800bcca:	d051      	beq.n	800bd70 <_reclaim_reent+0xb0>
 800bccc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bcce:	b143      	cbz	r3, 800bce2 <_reclaim_reent+0x22>
 800bcd0:	68db      	ldr	r3, [r3, #12]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d14a      	bne.n	800bd6c <_reclaim_reent+0xac>
 800bcd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcd8:	6819      	ldr	r1, [r3, #0]
 800bcda:	b111      	cbz	r1, 800bce2 <_reclaim_reent+0x22>
 800bcdc:	4620      	mov	r0, r4
 800bcde:	f002 ff57 	bl	800eb90 <_free_r>
 800bce2:	6961      	ldr	r1, [r4, #20]
 800bce4:	b111      	cbz	r1, 800bcec <_reclaim_reent+0x2c>
 800bce6:	4620      	mov	r0, r4
 800bce8:	f002 ff52 	bl	800eb90 <_free_r>
 800bcec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bcee:	b111      	cbz	r1, 800bcf6 <_reclaim_reent+0x36>
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	f002 ff4d 	bl	800eb90 <_free_r>
 800bcf6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bcf8:	b111      	cbz	r1, 800bd00 <_reclaim_reent+0x40>
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	f002 ff48 	bl	800eb90 <_free_r>
 800bd00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bd02:	b111      	cbz	r1, 800bd0a <_reclaim_reent+0x4a>
 800bd04:	4620      	mov	r0, r4
 800bd06:	f002 ff43 	bl	800eb90 <_free_r>
 800bd0a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bd0c:	b111      	cbz	r1, 800bd14 <_reclaim_reent+0x54>
 800bd0e:	4620      	mov	r0, r4
 800bd10:	f002 ff3e 	bl	800eb90 <_free_r>
 800bd14:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bd16:	b111      	cbz	r1, 800bd1e <_reclaim_reent+0x5e>
 800bd18:	4620      	mov	r0, r4
 800bd1a:	f002 ff39 	bl	800eb90 <_free_r>
 800bd1e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bd20:	b111      	cbz	r1, 800bd28 <_reclaim_reent+0x68>
 800bd22:	4620      	mov	r0, r4
 800bd24:	f002 ff34 	bl	800eb90 <_free_r>
 800bd28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd2a:	b111      	cbz	r1, 800bd32 <_reclaim_reent+0x72>
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	f002 ff2f 	bl	800eb90 <_free_r>
 800bd32:	69a3      	ldr	r3, [r4, #24]
 800bd34:	b1e3      	cbz	r3, 800bd70 <_reclaim_reent+0xb0>
 800bd36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bd38:	4620      	mov	r0, r4
 800bd3a:	4798      	blx	r3
 800bd3c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bd3e:	b1b9      	cbz	r1, 800bd70 <_reclaim_reent+0xb0>
 800bd40:	4620      	mov	r0, r4
 800bd42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd46:	f7ff bfad 	b.w	800bca4 <cleanup_glue>
 800bd4a:	5949      	ldr	r1, [r1, r5]
 800bd4c:	b941      	cbnz	r1, 800bd60 <_reclaim_reent+0xa0>
 800bd4e:	3504      	adds	r5, #4
 800bd50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd52:	2d80      	cmp	r5, #128	; 0x80
 800bd54:	68d9      	ldr	r1, [r3, #12]
 800bd56:	d1f8      	bne.n	800bd4a <_reclaim_reent+0x8a>
 800bd58:	4620      	mov	r0, r4
 800bd5a:	f002 ff19 	bl	800eb90 <_free_r>
 800bd5e:	e7ba      	b.n	800bcd6 <_reclaim_reent+0x16>
 800bd60:	680e      	ldr	r6, [r1, #0]
 800bd62:	4620      	mov	r0, r4
 800bd64:	f002 ff14 	bl	800eb90 <_free_r>
 800bd68:	4631      	mov	r1, r6
 800bd6a:	e7ef      	b.n	800bd4c <_reclaim_reent+0x8c>
 800bd6c:	2500      	movs	r5, #0
 800bd6e:	e7ef      	b.n	800bd50 <_reclaim_reent+0x90>
 800bd70:	bd70      	pop	{r4, r5, r6, pc}
 800bd72:	bf00      	nop
 800bd74:	20000098 	.word	0x20000098

0800bd78 <_sbrk_r>:
 800bd78:	b538      	push	{r3, r4, r5, lr}
 800bd7a:	4d06      	ldr	r5, [pc, #24]	; (800bd94 <_sbrk_r+0x1c>)
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	4604      	mov	r4, r0
 800bd80:	4608      	mov	r0, r1
 800bd82:	602b      	str	r3, [r5, #0]
 800bd84:	f7f6 fc94 	bl	80026b0 <_sbrk>
 800bd88:	1c43      	adds	r3, r0, #1
 800bd8a:	d102      	bne.n	800bd92 <_sbrk_r+0x1a>
 800bd8c:	682b      	ldr	r3, [r5, #0]
 800bd8e:	b103      	cbz	r3, 800bd92 <_sbrk_r+0x1a>
 800bd90:	6023      	str	r3, [r4, #0]
 800bd92:	bd38      	pop	{r3, r4, r5, pc}
 800bd94:	20008c48 	.word	0x20008c48

0800bd98 <nanf>:
 800bd98:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bda0 <nanf+0x8>
 800bd9c:	4770      	bx	lr
 800bd9e:	bf00      	nop
 800bda0:	7fc00000 	.word	0x7fc00000

0800bda4 <siprintf>:
 800bda4:	b40e      	push	{r1, r2, r3}
 800bda6:	b500      	push	{lr}
 800bda8:	b09c      	sub	sp, #112	; 0x70
 800bdaa:	ab1d      	add	r3, sp, #116	; 0x74
 800bdac:	9002      	str	r0, [sp, #8]
 800bdae:	9006      	str	r0, [sp, #24]
 800bdb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bdb4:	4809      	ldr	r0, [pc, #36]	; (800bddc <siprintf+0x38>)
 800bdb6:	9107      	str	r1, [sp, #28]
 800bdb8:	9104      	str	r1, [sp, #16]
 800bdba:	4909      	ldr	r1, [pc, #36]	; (800bde0 <siprintf+0x3c>)
 800bdbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdc0:	9105      	str	r1, [sp, #20]
 800bdc2:	6800      	ldr	r0, [r0, #0]
 800bdc4:	9301      	str	r3, [sp, #4]
 800bdc6:	a902      	add	r1, sp, #8
 800bdc8:	f002 ff8a 	bl	800ece0 <_svfiprintf_r>
 800bdcc:	9b02      	ldr	r3, [sp, #8]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	701a      	strb	r2, [r3, #0]
 800bdd2:	b01c      	add	sp, #112	; 0x70
 800bdd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdd8:	b003      	add	sp, #12
 800bdda:	4770      	bx	lr
 800bddc:	20000098 	.word	0x20000098
 800bde0:	ffff0208 	.word	0xffff0208

0800bde4 <__sread>:
 800bde4:	b510      	push	{r4, lr}
 800bde6:	460c      	mov	r4, r1
 800bde8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdec:	f003 f878 	bl	800eee0 <_read_r>
 800bdf0:	2800      	cmp	r0, #0
 800bdf2:	bfab      	itete	ge
 800bdf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bdf6:	89a3      	ldrhlt	r3, [r4, #12]
 800bdf8:	181b      	addge	r3, r3, r0
 800bdfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bdfe:	bfac      	ite	ge
 800be00:	6563      	strge	r3, [r4, #84]	; 0x54
 800be02:	81a3      	strhlt	r3, [r4, #12]
 800be04:	bd10      	pop	{r4, pc}

0800be06 <__swrite>:
 800be06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be0a:	461f      	mov	r7, r3
 800be0c:	898b      	ldrh	r3, [r1, #12]
 800be0e:	05db      	lsls	r3, r3, #23
 800be10:	4605      	mov	r5, r0
 800be12:	460c      	mov	r4, r1
 800be14:	4616      	mov	r6, r2
 800be16:	d505      	bpl.n	800be24 <__swrite+0x1e>
 800be18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be1c:	2302      	movs	r3, #2
 800be1e:	2200      	movs	r2, #0
 800be20:	f002 f9a6 	bl	800e170 <_lseek_r>
 800be24:	89a3      	ldrh	r3, [r4, #12]
 800be26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be2e:	81a3      	strh	r3, [r4, #12]
 800be30:	4632      	mov	r2, r6
 800be32:	463b      	mov	r3, r7
 800be34:	4628      	mov	r0, r5
 800be36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be3a:	f000 bec5 	b.w	800cbc8 <_write_r>

0800be3e <__sseek>:
 800be3e:	b510      	push	{r4, lr}
 800be40:	460c      	mov	r4, r1
 800be42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be46:	f002 f993 	bl	800e170 <_lseek_r>
 800be4a:	1c43      	adds	r3, r0, #1
 800be4c:	89a3      	ldrh	r3, [r4, #12]
 800be4e:	bf15      	itete	ne
 800be50:	6560      	strne	r0, [r4, #84]	; 0x54
 800be52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be5a:	81a3      	strheq	r3, [r4, #12]
 800be5c:	bf18      	it	ne
 800be5e:	81a3      	strhne	r3, [r4, #12]
 800be60:	bd10      	pop	{r4, pc}

0800be62 <__sclose>:
 800be62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be66:	f000 bec1 	b.w	800cbec <_close_r>

0800be6a <sulp>:
 800be6a:	b570      	push	{r4, r5, r6, lr}
 800be6c:	4604      	mov	r4, r0
 800be6e:	460d      	mov	r5, r1
 800be70:	ec45 4b10 	vmov	d0, r4, r5
 800be74:	4616      	mov	r6, r2
 800be76:	f002 fd25 	bl	800e8c4 <__ulp>
 800be7a:	ec51 0b10 	vmov	r0, r1, d0
 800be7e:	b17e      	cbz	r6, 800bea0 <sulp+0x36>
 800be80:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800be84:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800be88:	2b00      	cmp	r3, #0
 800be8a:	dd09      	ble.n	800bea0 <sulp+0x36>
 800be8c:	051b      	lsls	r3, r3, #20
 800be8e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800be92:	2400      	movs	r4, #0
 800be94:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800be98:	4622      	mov	r2, r4
 800be9a:	462b      	mov	r3, r5
 800be9c:	f7f4 fbbc 	bl	8000618 <__aeabi_dmul>
 800bea0:	bd70      	pop	{r4, r5, r6, pc}
 800bea2:	0000      	movs	r0, r0
 800bea4:	0000      	movs	r0, r0
	...

0800bea8 <_strtod_l>:
 800bea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beac:	ed2d 8b02 	vpush	{d8}
 800beb0:	b09d      	sub	sp, #116	; 0x74
 800beb2:	461f      	mov	r7, r3
 800beb4:	2300      	movs	r3, #0
 800beb6:	9318      	str	r3, [sp, #96]	; 0x60
 800beb8:	4ba2      	ldr	r3, [pc, #648]	; (800c144 <_strtod_l+0x29c>)
 800beba:	9213      	str	r2, [sp, #76]	; 0x4c
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	9305      	str	r3, [sp, #20]
 800bec0:	4604      	mov	r4, r0
 800bec2:	4618      	mov	r0, r3
 800bec4:	4688      	mov	r8, r1
 800bec6:	f7f4 f993 	bl	80001f0 <strlen>
 800beca:	f04f 0a00 	mov.w	sl, #0
 800bece:	4605      	mov	r5, r0
 800bed0:	f04f 0b00 	mov.w	fp, #0
 800bed4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bed8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800beda:	781a      	ldrb	r2, [r3, #0]
 800bedc:	2a2b      	cmp	r2, #43	; 0x2b
 800bede:	d04e      	beq.n	800bf7e <_strtod_l+0xd6>
 800bee0:	d83b      	bhi.n	800bf5a <_strtod_l+0xb2>
 800bee2:	2a0d      	cmp	r2, #13
 800bee4:	d834      	bhi.n	800bf50 <_strtod_l+0xa8>
 800bee6:	2a08      	cmp	r2, #8
 800bee8:	d834      	bhi.n	800bf54 <_strtod_l+0xac>
 800beea:	2a00      	cmp	r2, #0
 800beec:	d03e      	beq.n	800bf6c <_strtod_l+0xc4>
 800beee:	2300      	movs	r3, #0
 800bef0:	930a      	str	r3, [sp, #40]	; 0x28
 800bef2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bef4:	7833      	ldrb	r3, [r6, #0]
 800bef6:	2b30      	cmp	r3, #48	; 0x30
 800bef8:	f040 80b0 	bne.w	800c05c <_strtod_l+0x1b4>
 800befc:	7873      	ldrb	r3, [r6, #1]
 800befe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bf02:	2b58      	cmp	r3, #88	; 0x58
 800bf04:	d168      	bne.n	800bfd8 <_strtod_l+0x130>
 800bf06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf08:	9301      	str	r3, [sp, #4]
 800bf0a:	ab18      	add	r3, sp, #96	; 0x60
 800bf0c:	9702      	str	r7, [sp, #8]
 800bf0e:	9300      	str	r3, [sp, #0]
 800bf10:	4a8d      	ldr	r2, [pc, #564]	; (800c148 <_strtod_l+0x2a0>)
 800bf12:	ab19      	add	r3, sp, #100	; 0x64
 800bf14:	a917      	add	r1, sp, #92	; 0x5c
 800bf16:	4620      	mov	r0, r4
 800bf18:	f001 fe1e 	bl	800db58 <__gethex>
 800bf1c:	f010 0707 	ands.w	r7, r0, #7
 800bf20:	4605      	mov	r5, r0
 800bf22:	d005      	beq.n	800bf30 <_strtod_l+0x88>
 800bf24:	2f06      	cmp	r7, #6
 800bf26:	d12c      	bne.n	800bf82 <_strtod_l+0xda>
 800bf28:	3601      	adds	r6, #1
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	9617      	str	r6, [sp, #92]	; 0x5c
 800bf2e:	930a      	str	r3, [sp, #40]	; 0x28
 800bf30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	f040 8590 	bne.w	800ca58 <_strtod_l+0xbb0>
 800bf38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf3a:	b1eb      	cbz	r3, 800bf78 <_strtod_l+0xd0>
 800bf3c:	4652      	mov	r2, sl
 800bf3e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bf42:	ec43 2b10 	vmov	d0, r2, r3
 800bf46:	b01d      	add	sp, #116	; 0x74
 800bf48:	ecbd 8b02 	vpop	{d8}
 800bf4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf50:	2a20      	cmp	r2, #32
 800bf52:	d1cc      	bne.n	800beee <_strtod_l+0x46>
 800bf54:	3301      	adds	r3, #1
 800bf56:	9317      	str	r3, [sp, #92]	; 0x5c
 800bf58:	e7be      	b.n	800bed8 <_strtod_l+0x30>
 800bf5a:	2a2d      	cmp	r2, #45	; 0x2d
 800bf5c:	d1c7      	bne.n	800beee <_strtod_l+0x46>
 800bf5e:	2201      	movs	r2, #1
 800bf60:	920a      	str	r2, [sp, #40]	; 0x28
 800bf62:	1c5a      	adds	r2, r3, #1
 800bf64:	9217      	str	r2, [sp, #92]	; 0x5c
 800bf66:	785b      	ldrb	r3, [r3, #1]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d1c2      	bne.n	800bef2 <_strtod_l+0x4a>
 800bf6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf6e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	f040 856e 	bne.w	800ca54 <_strtod_l+0xbac>
 800bf78:	4652      	mov	r2, sl
 800bf7a:	465b      	mov	r3, fp
 800bf7c:	e7e1      	b.n	800bf42 <_strtod_l+0x9a>
 800bf7e:	2200      	movs	r2, #0
 800bf80:	e7ee      	b.n	800bf60 <_strtod_l+0xb8>
 800bf82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bf84:	b13a      	cbz	r2, 800bf96 <_strtod_l+0xee>
 800bf86:	2135      	movs	r1, #53	; 0x35
 800bf88:	a81a      	add	r0, sp, #104	; 0x68
 800bf8a:	f002 fda6 	bl	800eada <__copybits>
 800bf8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bf90:	4620      	mov	r0, r4
 800bf92:	f002 f965 	bl	800e260 <_Bfree>
 800bf96:	3f01      	subs	r7, #1
 800bf98:	2f04      	cmp	r7, #4
 800bf9a:	d806      	bhi.n	800bfaa <_strtod_l+0x102>
 800bf9c:	e8df f007 	tbb	[pc, r7]
 800bfa0:	1714030a 	.word	0x1714030a
 800bfa4:	0a          	.byte	0x0a
 800bfa5:	00          	.byte	0x00
 800bfa6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800bfaa:	0728      	lsls	r0, r5, #28
 800bfac:	d5c0      	bpl.n	800bf30 <_strtod_l+0x88>
 800bfae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800bfb2:	e7bd      	b.n	800bf30 <_strtod_l+0x88>
 800bfb4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800bfb8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bfba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bfbe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bfc2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bfc6:	e7f0      	b.n	800bfaa <_strtod_l+0x102>
 800bfc8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c14c <_strtod_l+0x2a4>
 800bfcc:	e7ed      	b.n	800bfaa <_strtod_l+0x102>
 800bfce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800bfd2:	f04f 3aff 	mov.w	sl, #4294967295
 800bfd6:	e7e8      	b.n	800bfaa <_strtod_l+0x102>
 800bfd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bfda:	1c5a      	adds	r2, r3, #1
 800bfdc:	9217      	str	r2, [sp, #92]	; 0x5c
 800bfde:	785b      	ldrb	r3, [r3, #1]
 800bfe0:	2b30      	cmp	r3, #48	; 0x30
 800bfe2:	d0f9      	beq.n	800bfd8 <_strtod_l+0x130>
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d0a3      	beq.n	800bf30 <_strtod_l+0x88>
 800bfe8:	2301      	movs	r3, #1
 800bfea:	f04f 0900 	mov.w	r9, #0
 800bfee:	9304      	str	r3, [sp, #16]
 800bff0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bff2:	9308      	str	r3, [sp, #32]
 800bff4:	f8cd 901c 	str.w	r9, [sp, #28]
 800bff8:	464f      	mov	r7, r9
 800bffa:	220a      	movs	r2, #10
 800bffc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800bffe:	7806      	ldrb	r6, [r0, #0]
 800c000:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c004:	b2d9      	uxtb	r1, r3
 800c006:	2909      	cmp	r1, #9
 800c008:	d92a      	bls.n	800c060 <_strtod_l+0x1b8>
 800c00a:	9905      	ldr	r1, [sp, #20]
 800c00c:	462a      	mov	r2, r5
 800c00e:	f002 ff83 	bl	800ef18 <strncmp>
 800c012:	b398      	cbz	r0, 800c07c <_strtod_l+0x1d4>
 800c014:	2000      	movs	r0, #0
 800c016:	4632      	mov	r2, r6
 800c018:	463d      	mov	r5, r7
 800c01a:	9005      	str	r0, [sp, #20]
 800c01c:	4603      	mov	r3, r0
 800c01e:	2a65      	cmp	r2, #101	; 0x65
 800c020:	d001      	beq.n	800c026 <_strtod_l+0x17e>
 800c022:	2a45      	cmp	r2, #69	; 0x45
 800c024:	d118      	bne.n	800c058 <_strtod_l+0x1b0>
 800c026:	b91d      	cbnz	r5, 800c030 <_strtod_l+0x188>
 800c028:	9a04      	ldr	r2, [sp, #16]
 800c02a:	4302      	orrs	r2, r0
 800c02c:	d09e      	beq.n	800bf6c <_strtod_l+0xc4>
 800c02e:	2500      	movs	r5, #0
 800c030:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c034:	f108 0201 	add.w	r2, r8, #1
 800c038:	9217      	str	r2, [sp, #92]	; 0x5c
 800c03a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c03e:	2a2b      	cmp	r2, #43	; 0x2b
 800c040:	d075      	beq.n	800c12e <_strtod_l+0x286>
 800c042:	2a2d      	cmp	r2, #45	; 0x2d
 800c044:	d07b      	beq.n	800c13e <_strtod_l+0x296>
 800c046:	f04f 0c00 	mov.w	ip, #0
 800c04a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c04e:	2909      	cmp	r1, #9
 800c050:	f240 8082 	bls.w	800c158 <_strtod_l+0x2b0>
 800c054:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c058:	2600      	movs	r6, #0
 800c05a:	e09d      	b.n	800c198 <_strtod_l+0x2f0>
 800c05c:	2300      	movs	r3, #0
 800c05e:	e7c4      	b.n	800bfea <_strtod_l+0x142>
 800c060:	2f08      	cmp	r7, #8
 800c062:	bfd8      	it	le
 800c064:	9907      	ldrle	r1, [sp, #28]
 800c066:	f100 0001 	add.w	r0, r0, #1
 800c06a:	bfda      	itte	le
 800c06c:	fb02 3301 	mlale	r3, r2, r1, r3
 800c070:	9307      	strle	r3, [sp, #28]
 800c072:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c076:	3701      	adds	r7, #1
 800c078:	9017      	str	r0, [sp, #92]	; 0x5c
 800c07a:	e7bf      	b.n	800bffc <_strtod_l+0x154>
 800c07c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c07e:	195a      	adds	r2, r3, r5
 800c080:	9217      	str	r2, [sp, #92]	; 0x5c
 800c082:	5d5a      	ldrb	r2, [r3, r5]
 800c084:	2f00      	cmp	r7, #0
 800c086:	d037      	beq.n	800c0f8 <_strtod_l+0x250>
 800c088:	9005      	str	r0, [sp, #20]
 800c08a:	463d      	mov	r5, r7
 800c08c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c090:	2b09      	cmp	r3, #9
 800c092:	d912      	bls.n	800c0ba <_strtod_l+0x212>
 800c094:	2301      	movs	r3, #1
 800c096:	e7c2      	b.n	800c01e <_strtod_l+0x176>
 800c098:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c09a:	1c5a      	adds	r2, r3, #1
 800c09c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c09e:	785a      	ldrb	r2, [r3, #1]
 800c0a0:	3001      	adds	r0, #1
 800c0a2:	2a30      	cmp	r2, #48	; 0x30
 800c0a4:	d0f8      	beq.n	800c098 <_strtod_l+0x1f0>
 800c0a6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c0aa:	2b08      	cmp	r3, #8
 800c0ac:	f200 84d9 	bhi.w	800ca62 <_strtod_l+0xbba>
 800c0b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c0b2:	9005      	str	r0, [sp, #20]
 800c0b4:	2000      	movs	r0, #0
 800c0b6:	9308      	str	r3, [sp, #32]
 800c0b8:	4605      	mov	r5, r0
 800c0ba:	3a30      	subs	r2, #48	; 0x30
 800c0bc:	f100 0301 	add.w	r3, r0, #1
 800c0c0:	d014      	beq.n	800c0ec <_strtod_l+0x244>
 800c0c2:	9905      	ldr	r1, [sp, #20]
 800c0c4:	4419      	add	r1, r3
 800c0c6:	9105      	str	r1, [sp, #20]
 800c0c8:	462b      	mov	r3, r5
 800c0ca:	eb00 0e05 	add.w	lr, r0, r5
 800c0ce:	210a      	movs	r1, #10
 800c0d0:	4573      	cmp	r3, lr
 800c0d2:	d113      	bne.n	800c0fc <_strtod_l+0x254>
 800c0d4:	182b      	adds	r3, r5, r0
 800c0d6:	2b08      	cmp	r3, #8
 800c0d8:	f105 0501 	add.w	r5, r5, #1
 800c0dc:	4405      	add	r5, r0
 800c0de:	dc1c      	bgt.n	800c11a <_strtod_l+0x272>
 800c0e0:	9907      	ldr	r1, [sp, #28]
 800c0e2:	230a      	movs	r3, #10
 800c0e4:	fb03 2301 	mla	r3, r3, r1, r2
 800c0e8:	9307      	str	r3, [sp, #28]
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c0ee:	1c51      	adds	r1, r2, #1
 800c0f0:	9117      	str	r1, [sp, #92]	; 0x5c
 800c0f2:	7852      	ldrb	r2, [r2, #1]
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	e7c9      	b.n	800c08c <_strtod_l+0x1e4>
 800c0f8:	4638      	mov	r0, r7
 800c0fa:	e7d2      	b.n	800c0a2 <_strtod_l+0x1fa>
 800c0fc:	2b08      	cmp	r3, #8
 800c0fe:	dc04      	bgt.n	800c10a <_strtod_l+0x262>
 800c100:	9e07      	ldr	r6, [sp, #28]
 800c102:	434e      	muls	r6, r1
 800c104:	9607      	str	r6, [sp, #28]
 800c106:	3301      	adds	r3, #1
 800c108:	e7e2      	b.n	800c0d0 <_strtod_l+0x228>
 800c10a:	f103 0c01 	add.w	ip, r3, #1
 800c10e:	f1bc 0f10 	cmp.w	ip, #16
 800c112:	bfd8      	it	le
 800c114:	fb01 f909 	mulle.w	r9, r1, r9
 800c118:	e7f5      	b.n	800c106 <_strtod_l+0x25e>
 800c11a:	2d10      	cmp	r5, #16
 800c11c:	bfdc      	itt	le
 800c11e:	230a      	movle	r3, #10
 800c120:	fb03 2909 	mlale	r9, r3, r9, r2
 800c124:	e7e1      	b.n	800c0ea <_strtod_l+0x242>
 800c126:	2300      	movs	r3, #0
 800c128:	9305      	str	r3, [sp, #20]
 800c12a:	2301      	movs	r3, #1
 800c12c:	e77c      	b.n	800c028 <_strtod_l+0x180>
 800c12e:	f04f 0c00 	mov.w	ip, #0
 800c132:	f108 0202 	add.w	r2, r8, #2
 800c136:	9217      	str	r2, [sp, #92]	; 0x5c
 800c138:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c13c:	e785      	b.n	800c04a <_strtod_l+0x1a2>
 800c13e:	f04f 0c01 	mov.w	ip, #1
 800c142:	e7f6      	b.n	800c132 <_strtod_l+0x28a>
 800c144:	08011478 	.word	0x08011478
 800c148:	0801122c 	.word	0x0801122c
 800c14c:	7ff00000 	.word	0x7ff00000
 800c150:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c152:	1c51      	adds	r1, r2, #1
 800c154:	9117      	str	r1, [sp, #92]	; 0x5c
 800c156:	7852      	ldrb	r2, [r2, #1]
 800c158:	2a30      	cmp	r2, #48	; 0x30
 800c15a:	d0f9      	beq.n	800c150 <_strtod_l+0x2a8>
 800c15c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c160:	2908      	cmp	r1, #8
 800c162:	f63f af79 	bhi.w	800c058 <_strtod_l+0x1b0>
 800c166:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c16a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c16c:	9206      	str	r2, [sp, #24]
 800c16e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c170:	1c51      	adds	r1, r2, #1
 800c172:	9117      	str	r1, [sp, #92]	; 0x5c
 800c174:	7852      	ldrb	r2, [r2, #1]
 800c176:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c17a:	2e09      	cmp	r6, #9
 800c17c:	d937      	bls.n	800c1ee <_strtod_l+0x346>
 800c17e:	9e06      	ldr	r6, [sp, #24]
 800c180:	1b89      	subs	r1, r1, r6
 800c182:	2908      	cmp	r1, #8
 800c184:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c188:	dc02      	bgt.n	800c190 <_strtod_l+0x2e8>
 800c18a:	4576      	cmp	r6, lr
 800c18c:	bfa8      	it	ge
 800c18e:	4676      	movge	r6, lr
 800c190:	f1bc 0f00 	cmp.w	ip, #0
 800c194:	d000      	beq.n	800c198 <_strtod_l+0x2f0>
 800c196:	4276      	negs	r6, r6
 800c198:	2d00      	cmp	r5, #0
 800c19a:	d14d      	bne.n	800c238 <_strtod_l+0x390>
 800c19c:	9904      	ldr	r1, [sp, #16]
 800c19e:	4301      	orrs	r1, r0
 800c1a0:	f47f aec6 	bne.w	800bf30 <_strtod_l+0x88>
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	f47f aee1 	bne.w	800bf6c <_strtod_l+0xc4>
 800c1aa:	2a69      	cmp	r2, #105	; 0x69
 800c1ac:	d027      	beq.n	800c1fe <_strtod_l+0x356>
 800c1ae:	dc24      	bgt.n	800c1fa <_strtod_l+0x352>
 800c1b0:	2a49      	cmp	r2, #73	; 0x49
 800c1b2:	d024      	beq.n	800c1fe <_strtod_l+0x356>
 800c1b4:	2a4e      	cmp	r2, #78	; 0x4e
 800c1b6:	f47f aed9 	bne.w	800bf6c <_strtod_l+0xc4>
 800c1ba:	499f      	ldr	r1, [pc, #636]	; (800c438 <_strtod_l+0x590>)
 800c1bc:	a817      	add	r0, sp, #92	; 0x5c
 800c1be:	f001 ff23 	bl	800e008 <__match>
 800c1c2:	2800      	cmp	r0, #0
 800c1c4:	f43f aed2 	beq.w	800bf6c <_strtod_l+0xc4>
 800c1c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	2b28      	cmp	r3, #40	; 0x28
 800c1ce:	d12d      	bne.n	800c22c <_strtod_l+0x384>
 800c1d0:	499a      	ldr	r1, [pc, #616]	; (800c43c <_strtod_l+0x594>)
 800c1d2:	aa1a      	add	r2, sp, #104	; 0x68
 800c1d4:	a817      	add	r0, sp, #92	; 0x5c
 800c1d6:	f001 ff2b 	bl	800e030 <__hexnan>
 800c1da:	2805      	cmp	r0, #5
 800c1dc:	d126      	bne.n	800c22c <_strtod_l+0x384>
 800c1de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c1e0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c1e4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c1e8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c1ec:	e6a0      	b.n	800bf30 <_strtod_l+0x88>
 800c1ee:	210a      	movs	r1, #10
 800c1f0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c1f4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c1f8:	e7b9      	b.n	800c16e <_strtod_l+0x2c6>
 800c1fa:	2a6e      	cmp	r2, #110	; 0x6e
 800c1fc:	e7db      	b.n	800c1b6 <_strtod_l+0x30e>
 800c1fe:	4990      	ldr	r1, [pc, #576]	; (800c440 <_strtod_l+0x598>)
 800c200:	a817      	add	r0, sp, #92	; 0x5c
 800c202:	f001 ff01 	bl	800e008 <__match>
 800c206:	2800      	cmp	r0, #0
 800c208:	f43f aeb0 	beq.w	800bf6c <_strtod_l+0xc4>
 800c20c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c20e:	498d      	ldr	r1, [pc, #564]	; (800c444 <_strtod_l+0x59c>)
 800c210:	3b01      	subs	r3, #1
 800c212:	a817      	add	r0, sp, #92	; 0x5c
 800c214:	9317      	str	r3, [sp, #92]	; 0x5c
 800c216:	f001 fef7 	bl	800e008 <__match>
 800c21a:	b910      	cbnz	r0, 800c222 <_strtod_l+0x37a>
 800c21c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c21e:	3301      	adds	r3, #1
 800c220:	9317      	str	r3, [sp, #92]	; 0x5c
 800c222:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c454 <_strtod_l+0x5ac>
 800c226:	f04f 0a00 	mov.w	sl, #0
 800c22a:	e681      	b.n	800bf30 <_strtod_l+0x88>
 800c22c:	4886      	ldr	r0, [pc, #536]	; (800c448 <_strtod_l+0x5a0>)
 800c22e:	f002 fe6b 	bl	800ef08 <nan>
 800c232:	ec5b ab10 	vmov	sl, fp, d0
 800c236:	e67b      	b.n	800bf30 <_strtod_l+0x88>
 800c238:	9b05      	ldr	r3, [sp, #20]
 800c23a:	9807      	ldr	r0, [sp, #28]
 800c23c:	1af3      	subs	r3, r6, r3
 800c23e:	2f00      	cmp	r7, #0
 800c240:	bf08      	it	eq
 800c242:	462f      	moveq	r7, r5
 800c244:	2d10      	cmp	r5, #16
 800c246:	9306      	str	r3, [sp, #24]
 800c248:	46a8      	mov	r8, r5
 800c24a:	bfa8      	it	ge
 800c24c:	f04f 0810 	movge.w	r8, #16
 800c250:	f7f4 f968 	bl	8000524 <__aeabi_ui2d>
 800c254:	2d09      	cmp	r5, #9
 800c256:	4682      	mov	sl, r0
 800c258:	468b      	mov	fp, r1
 800c25a:	dd13      	ble.n	800c284 <_strtod_l+0x3dc>
 800c25c:	4b7b      	ldr	r3, [pc, #492]	; (800c44c <_strtod_l+0x5a4>)
 800c25e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c262:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c266:	f7f4 f9d7 	bl	8000618 <__aeabi_dmul>
 800c26a:	4682      	mov	sl, r0
 800c26c:	4648      	mov	r0, r9
 800c26e:	468b      	mov	fp, r1
 800c270:	f7f4 f958 	bl	8000524 <__aeabi_ui2d>
 800c274:	4602      	mov	r2, r0
 800c276:	460b      	mov	r3, r1
 800c278:	4650      	mov	r0, sl
 800c27a:	4659      	mov	r1, fp
 800c27c:	f7f4 f816 	bl	80002ac <__adddf3>
 800c280:	4682      	mov	sl, r0
 800c282:	468b      	mov	fp, r1
 800c284:	2d0f      	cmp	r5, #15
 800c286:	dc38      	bgt.n	800c2fa <_strtod_l+0x452>
 800c288:	9b06      	ldr	r3, [sp, #24]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	f43f ae50 	beq.w	800bf30 <_strtod_l+0x88>
 800c290:	dd24      	ble.n	800c2dc <_strtod_l+0x434>
 800c292:	2b16      	cmp	r3, #22
 800c294:	dc0b      	bgt.n	800c2ae <_strtod_l+0x406>
 800c296:	496d      	ldr	r1, [pc, #436]	; (800c44c <_strtod_l+0x5a4>)
 800c298:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c29c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2a0:	4652      	mov	r2, sl
 800c2a2:	465b      	mov	r3, fp
 800c2a4:	f7f4 f9b8 	bl	8000618 <__aeabi_dmul>
 800c2a8:	4682      	mov	sl, r0
 800c2aa:	468b      	mov	fp, r1
 800c2ac:	e640      	b.n	800bf30 <_strtod_l+0x88>
 800c2ae:	9a06      	ldr	r2, [sp, #24]
 800c2b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	db20      	blt.n	800c2fa <_strtod_l+0x452>
 800c2b8:	4c64      	ldr	r4, [pc, #400]	; (800c44c <_strtod_l+0x5a4>)
 800c2ba:	f1c5 050f 	rsb	r5, r5, #15
 800c2be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c2c2:	4652      	mov	r2, sl
 800c2c4:	465b      	mov	r3, fp
 800c2c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2ca:	f7f4 f9a5 	bl	8000618 <__aeabi_dmul>
 800c2ce:	9b06      	ldr	r3, [sp, #24]
 800c2d0:	1b5d      	subs	r5, r3, r5
 800c2d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c2d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c2da:	e7e3      	b.n	800c2a4 <_strtod_l+0x3fc>
 800c2dc:	9b06      	ldr	r3, [sp, #24]
 800c2de:	3316      	adds	r3, #22
 800c2e0:	db0b      	blt.n	800c2fa <_strtod_l+0x452>
 800c2e2:	9b05      	ldr	r3, [sp, #20]
 800c2e4:	1b9e      	subs	r6, r3, r6
 800c2e6:	4b59      	ldr	r3, [pc, #356]	; (800c44c <_strtod_l+0x5a4>)
 800c2e8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c2ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c2f0:	4650      	mov	r0, sl
 800c2f2:	4659      	mov	r1, fp
 800c2f4:	f7f4 faba 	bl	800086c <__aeabi_ddiv>
 800c2f8:	e7d6      	b.n	800c2a8 <_strtod_l+0x400>
 800c2fa:	9b06      	ldr	r3, [sp, #24]
 800c2fc:	eba5 0808 	sub.w	r8, r5, r8
 800c300:	4498      	add	r8, r3
 800c302:	f1b8 0f00 	cmp.w	r8, #0
 800c306:	dd74      	ble.n	800c3f2 <_strtod_l+0x54a>
 800c308:	f018 030f 	ands.w	r3, r8, #15
 800c30c:	d00a      	beq.n	800c324 <_strtod_l+0x47c>
 800c30e:	494f      	ldr	r1, [pc, #316]	; (800c44c <_strtod_l+0x5a4>)
 800c310:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c314:	4652      	mov	r2, sl
 800c316:	465b      	mov	r3, fp
 800c318:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c31c:	f7f4 f97c 	bl	8000618 <__aeabi_dmul>
 800c320:	4682      	mov	sl, r0
 800c322:	468b      	mov	fp, r1
 800c324:	f038 080f 	bics.w	r8, r8, #15
 800c328:	d04f      	beq.n	800c3ca <_strtod_l+0x522>
 800c32a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c32e:	dd22      	ble.n	800c376 <_strtod_l+0x4ce>
 800c330:	2500      	movs	r5, #0
 800c332:	462e      	mov	r6, r5
 800c334:	9507      	str	r5, [sp, #28]
 800c336:	9505      	str	r5, [sp, #20]
 800c338:	2322      	movs	r3, #34	; 0x22
 800c33a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c454 <_strtod_l+0x5ac>
 800c33e:	6023      	str	r3, [r4, #0]
 800c340:	f04f 0a00 	mov.w	sl, #0
 800c344:	9b07      	ldr	r3, [sp, #28]
 800c346:	2b00      	cmp	r3, #0
 800c348:	f43f adf2 	beq.w	800bf30 <_strtod_l+0x88>
 800c34c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c34e:	4620      	mov	r0, r4
 800c350:	f001 ff86 	bl	800e260 <_Bfree>
 800c354:	9905      	ldr	r1, [sp, #20]
 800c356:	4620      	mov	r0, r4
 800c358:	f001 ff82 	bl	800e260 <_Bfree>
 800c35c:	4631      	mov	r1, r6
 800c35e:	4620      	mov	r0, r4
 800c360:	f001 ff7e 	bl	800e260 <_Bfree>
 800c364:	9907      	ldr	r1, [sp, #28]
 800c366:	4620      	mov	r0, r4
 800c368:	f001 ff7a 	bl	800e260 <_Bfree>
 800c36c:	4629      	mov	r1, r5
 800c36e:	4620      	mov	r0, r4
 800c370:	f001 ff76 	bl	800e260 <_Bfree>
 800c374:	e5dc      	b.n	800bf30 <_strtod_l+0x88>
 800c376:	4b36      	ldr	r3, [pc, #216]	; (800c450 <_strtod_l+0x5a8>)
 800c378:	9304      	str	r3, [sp, #16]
 800c37a:	2300      	movs	r3, #0
 800c37c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c380:	4650      	mov	r0, sl
 800c382:	4659      	mov	r1, fp
 800c384:	4699      	mov	r9, r3
 800c386:	f1b8 0f01 	cmp.w	r8, #1
 800c38a:	dc21      	bgt.n	800c3d0 <_strtod_l+0x528>
 800c38c:	b10b      	cbz	r3, 800c392 <_strtod_l+0x4ea>
 800c38e:	4682      	mov	sl, r0
 800c390:	468b      	mov	fp, r1
 800c392:	4b2f      	ldr	r3, [pc, #188]	; (800c450 <_strtod_l+0x5a8>)
 800c394:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c398:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c39c:	4652      	mov	r2, sl
 800c39e:	465b      	mov	r3, fp
 800c3a0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c3a4:	f7f4 f938 	bl	8000618 <__aeabi_dmul>
 800c3a8:	4b2a      	ldr	r3, [pc, #168]	; (800c454 <_strtod_l+0x5ac>)
 800c3aa:	460a      	mov	r2, r1
 800c3ac:	400b      	ands	r3, r1
 800c3ae:	492a      	ldr	r1, [pc, #168]	; (800c458 <_strtod_l+0x5b0>)
 800c3b0:	428b      	cmp	r3, r1
 800c3b2:	4682      	mov	sl, r0
 800c3b4:	d8bc      	bhi.n	800c330 <_strtod_l+0x488>
 800c3b6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c3ba:	428b      	cmp	r3, r1
 800c3bc:	bf86      	itte	hi
 800c3be:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c45c <_strtod_l+0x5b4>
 800c3c2:	f04f 3aff 	movhi.w	sl, #4294967295
 800c3c6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	9304      	str	r3, [sp, #16]
 800c3ce:	e084      	b.n	800c4da <_strtod_l+0x632>
 800c3d0:	f018 0f01 	tst.w	r8, #1
 800c3d4:	d005      	beq.n	800c3e2 <_strtod_l+0x53a>
 800c3d6:	9b04      	ldr	r3, [sp, #16]
 800c3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3dc:	f7f4 f91c 	bl	8000618 <__aeabi_dmul>
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	9a04      	ldr	r2, [sp, #16]
 800c3e4:	3208      	adds	r2, #8
 800c3e6:	f109 0901 	add.w	r9, r9, #1
 800c3ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c3ee:	9204      	str	r2, [sp, #16]
 800c3f0:	e7c9      	b.n	800c386 <_strtod_l+0x4de>
 800c3f2:	d0ea      	beq.n	800c3ca <_strtod_l+0x522>
 800c3f4:	f1c8 0800 	rsb	r8, r8, #0
 800c3f8:	f018 020f 	ands.w	r2, r8, #15
 800c3fc:	d00a      	beq.n	800c414 <_strtod_l+0x56c>
 800c3fe:	4b13      	ldr	r3, [pc, #76]	; (800c44c <_strtod_l+0x5a4>)
 800c400:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c404:	4650      	mov	r0, sl
 800c406:	4659      	mov	r1, fp
 800c408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40c:	f7f4 fa2e 	bl	800086c <__aeabi_ddiv>
 800c410:	4682      	mov	sl, r0
 800c412:	468b      	mov	fp, r1
 800c414:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c418:	d0d7      	beq.n	800c3ca <_strtod_l+0x522>
 800c41a:	f1b8 0f1f 	cmp.w	r8, #31
 800c41e:	dd1f      	ble.n	800c460 <_strtod_l+0x5b8>
 800c420:	2500      	movs	r5, #0
 800c422:	462e      	mov	r6, r5
 800c424:	9507      	str	r5, [sp, #28]
 800c426:	9505      	str	r5, [sp, #20]
 800c428:	2322      	movs	r3, #34	; 0x22
 800c42a:	f04f 0a00 	mov.w	sl, #0
 800c42e:	f04f 0b00 	mov.w	fp, #0
 800c432:	6023      	str	r3, [r4, #0]
 800c434:	e786      	b.n	800c344 <_strtod_l+0x49c>
 800c436:	bf00      	nop
 800c438:	080111fd 	.word	0x080111fd
 800c43c:	08011240 	.word	0x08011240
 800c440:	080111f5 	.word	0x080111f5
 800c444:	08011384 	.word	0x08011384
 800c448:	08011630 	.word	0x08011630
 800c44c:	08011510 	.word	0x08011510
 800c450:	080114e8 	.word	0x080114e8
 800c454:	7ff00000 	.word	0x7ff00000
 800c458:	7ca00000 	.word	0x7ca00000
 800c45c:	7fefffff 	.word	0x7fefffff
 800c460:	f018 0310 	ands.w	r3, r8, #16
 800c464:	bf18      	it	ne
 800c466:	236a      	movne	r3, #106	; 0x6a
 800c468:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c818 <_strtod_l+0x970>
 800c46c:	9304      	str	r3, [sp, #16]
 800c46e:	4650      	mov	r0, sl
 800c470:	4659      	mov	r1, fp
 800c472:	2300      	movs	r3, #0
 800c474:	f018 0f01 	tst.w	r8, #1
 800c478:	d004      	beq.n	800c484 <_strtod_l+0x5dc>
 800c47a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c47e:	f7f4 f8cb 	bl	8000618 <__aeabi_dmul>
 800c482:	2301      	movs	r3, #1
 800c484:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c488:	f109 0908 	add.w	r9, r9, #8
 800c48c:	d1f2      	bne.n	800c474 <_strtod_l+0x5cc>
 800c48e:	b10b      	cbz	r3, 800c494 <_strtod_l+0x5ec>
 800c490:	4682      	mov	sl, r0
 800c492:	468b      	mov	fp, r1
 800c494:	9b04      	ldr	r3, [sp, #16]
 800c496:	b1c3      	cbz	r3, 800c4ca <_strtod_l+0x622>
 800c498:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c49c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	4659      	mov	r1, fp
 800c4a4:	dd11      	ble.n	800c4ca <_strtod_l+0x622>
 800c4a6:	2b1f      	cmp	r3, #31
 800c4a8:	f340 8124 	ble.w	800c6f4 <_strtod_l+0x84c>
 800c4ac:	2b34      	cmp	r3, #52	; 0x34
 800c4ae:	bfde      	ittt	le
 800c4b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c4b4:	f04f 33ff 	movle.w	r3, #4294967295
 800c4b8:	fa03 f202 	lslle.w	r2, r3, r2
 800c4bc:	f04f 0a00 	mov.w	sl, #0
 800c4c0:	bfcc      	ite	gt
 800c4c2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c4c6:	ea02 0b01 	andle.w	fp, r2, r1
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	4650      	mov	r0, sl
 800c4d0:	4659      	mov	r1, fp
 800c4d2:	f7f4 fb09 	bl	8000ae8 <__aeabi_dcmpeq>
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	d1a2      	bne.n	800c420 <_strtod_l+0x578>
 800c4da:	9b07      	ldr	r3, [sp, #28]
 800c4dc:	9300      	str	r3, [sp, #0]
 800c4de:	9908      	ldr	r1, [sp, #32]
 800c4e0:	462b      	mov	r3, r5
 800c4e2:	463a      	mov	r2, r7
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	f001 ff23 	bl	800e330 <__s2b>
 800c4ea:	9007      	str	r0, [sp, #28]
 800c4ec:	2800      	cmp	r0, #0
 800c4ee:	f43f af1f 	beq.w	800c330 <_strtod_l+0x488>
 800c4f2:	9b05      	ldr	r3, [sp, #20]
 800c4f4:	1b9e      	subs	r6, r3, r6
 800c4f6:	9b06      	ldr	r3, [sp, #24]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	bfb4      	ite	lt
 800c4fc:	4633      	movlt	r3, r6
 800c4fe:	2300      	movge	r3, #0
 800c500:	930c      	str	r3, [sp, #48]	; 0x30
 800c502:	9b06      	ldr	r3, [sp, #24]
 800c504:	2500      	movs	r5, #0
 800c506:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c50a:	9312      	str	r3, [sp, #72]	; 0x48
 800c50c:	462e      	mov	r6, r5
 800c50e:	9b07      	ldr	r3, [sp, #28]
 800c510:	4620      	mov	r0, r4
 800c512:	6859      	ldr	r1, [r3, #4]
 800c514:	f001 fe64 	bl	800e1e0 <_Balloc>
 800c518:	9005      	str	r0, [sp, #20]
 800c51a:	2800      	cmp	r0, #0
 800c51c:	f43f af0c 	beq.w	800c338 <_strtod_l+0x490>
 800c520:	9b07      	ldr	r3, [sp, #28]
 800c522:	691a      	ldr	r2, [r3, #16]
 800c524:	3202      	adds	r2, #2
 800c526:	f103 010c 	add.w	r1, r3, #12
 800c52a:	0092      	lsls	r2, r2, #2
 800c52c:	300c      	adds	r0, #12
 800c52e:	f7fe fc94 	bl	800ae5a <memcpy>
 800c532:	ec4b ab10 	vmov	d0, sl, fp
 800c536:	aa1a      	add	r2, sp, #104	; 0x68
 800c538:	a919      	add	r1, sp, #100	; 0x64
 800c53a:	4620      	mov	r0, r4
 800c53c:	f002 fa3e 	bl	800e9bc <__d2b>
 800c540:	ec4b ab18 	vmov	d8, sl, fp
 800c544:	9018      	str	r0, [sp, #96]	; 0x60
 800c546:	2800      	cmp	r0, #0
 800c548:	f43f aef6 	beq.w	800c338 <_strtod_l+0x490>
 800c54c:	2101      	movs	r1, #1
 800c54e:	4620      	mov	r0, r4
 800c550:	f001 ff88 	bl	800e464 <__i2b>
 800c554:	4606      	mov	r6, r0
 800c556:	2800      	cmp	r0, #0
 800c558:	f43f aeee 	beq.w	800c338 <_strtod_l+0x490>
 800c55c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c55e:	9904      	ldr	r1, [sp, #16]
 800c560:	2b00      	cmp	r3, #0
 800c562:	bfab      	itete	ge
 800c564:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c566:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c568:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c56a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c56e:	bfac      	ite	ge
 800c570:	eb03 0902 	addge.w	r9, r3, r2
 800c574:	1ad7      	sublt	r7, r2, r3
 800c576:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c578:	eba3 0801 	sub.w	r8, r3, r1
 800c57c:	4490      	add	r8, r2
 800c57e:	4ba1      	ldr	r3, [pc, #644]	; (800c804 <_strtod_l+0x95c>)
 800c580:	f108 38ff 	add.w	r8, r8, #4294967295
 800c584:	4598      	cmp	r8, r3
 800c586:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c58a:	f280 80c7 	bge.w	800c71c <_strtod_l+0x874>
 800c58e:	eba3 0308 	sub.w	r3, r3, r8
 800c592:	2b1f      	cmp	r3, #31
 800c594:	eba2 0203 	sub.w	r2, r2, r3
 800c598:	f04f 0101 	mov.w	r1, #1
 800c59c:	f300 80b1 	bgt.w	800c702 <_strtod_l+0x85a>
 800c5a0:	fa01 f303 	lsl.w	r3, r1, r3
 800c5a4:	930d      	str	r3, [sp, #52]	; 0x34
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	9308      	str	r3, [sp, #32]
 800c5aa:	eb09 0802 	add.w	r8, r9, r2
 800c5ae:	9b04      	ldr	r3, [sp, #16]
 800c5b0:	45c1      	cmp	r9, r8
 800c5b2:	4417      	add	r7, r2
 800c5b4:	441f      	add	r7, r3
 800c5b6:	464b      	mov	r3, r9
 800c5b8:	bfa8      	it	ge
 800c5ba:	4643      	movge	r3, r8
 800c5bc:	42bb      	cmp	r3, r7
 800c5be:	bfa8      	it	ge
 800c5c0:	463b      	movge	r3, r7
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	bfc2      	ittt	gt
 800c5c6:	eba8 0803 	subgt.w	r8, r8, r3
 800c5ca:	1aff      	subgt	r7, r7, r3
 800c5cc:	eba9 0903 	subgt.w	r9, r9, r3
 800c5d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	dd17      	ble.n	800c606 <_strtod_l+0x75e>
 800c5d6:	4631      	mov	r1, r6
 800c5d8:	461a      	mov	r2, r3
 800c5da:	4620      	mov	r0, r4
 800c5dc:	f002 f802 	bl	800e5e4 <__pow5mult>
 800c5e0:	4606      	mov	r6, r0
 800c5e2:	2800      	cmp	r0, #0
 800c5e4:	f43f aea8 	beq.w	800c338 <_strtod_l+0x490>
 800c5e8:	4601      	mov	r1, r0
 800c5ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c5ec:	4620      	mov	r0, r4
 800c5ee:	f001 ff4f 	bl	800e490 <__multiply>
 800c5f2:	900b      	str	r0, [sp, #44]	; 0x2c
 800c5f4:	2800      	cmp	r0, #0
 800c5f6:	f43f ae9f 	beq.w	800c338 <_strtod_l+0x490>
 800c5fa:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	f001 fe2f 	bl	800e260 <_Bfree>
 800c602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c604:	9318      	str	r3, [sp, #96]	; 0x60
 800c606:	f1b8 0f00 	cmp.w	r8, #0
 800c60a:	f300 808c 	bgt.w	800c726 <_strtod_l+0x87e>
 800c60e:	9b06      	ldr	r3, [sp, #24]
 800c610:	2b00      	cmp	r3, #0
 800c612:	dd08      	ble.n	800c626 <_strtod_l+0x77e>
 800c614:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c616:	9905      	ldr	r1, [sp, #20]
 800c618:	4620      	mov	r0, r4
 800c61a:	f001 ffe3 	bl	800e5e4 <__pow5mult>
 800c61e:	9005      	str	r0, [sp, #20]
 800c620:	2800      	cmp	r0, #0
 800c622:	f43f ae89 	beq.w	800c338 <_strtod_l+0x490>
 800c626:	2f00      	cmp	r7, #0
 800c628:	dd08      	ble.n	800c63c <_strtod_l+0x794>
 800c62a:	9905      	ldr	r1, [sp, #20]
 800c62c:	463a      	mov	r2, r7
 800c62e:	4620      	mov	r0, r4
 800c630:	f002 f832 	bl	800e698 <__lshift>
 800c634:	9005      	str	r0, [sp, #20]
 800c636:	2800      	cmp	r0, #0
 800c638:	f43f ae7e 	beq.w	800c338 <_strtod_l+0x490>
 800c63c:	f1b9 0f00 	cmp.w	r9, #0
 800c640:	dd08      	ble.n	800c654 <_strtod_l+0x7ac>
 800c642:	4631      	mov	r1, r6
 800c644:	464a      	mov	r2, r9
 800c646:	4620      	mov	r0, r4
 800c648:	f002 f826 	bl	800e698 <__lshift>
 800c64c:	4606      	mov	r6, r0
 800c64e:	2800      	cmp	r0, #0
 800c650:	f43f ae72 	beq.w	800c338 <_strtod_l+0x490>
 800c654:	9a05      	ldr	r2, [sp, #20]
 800c656:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c658:	4620      	mov	r0, r4
 800c65a:	f002 f8a9 	bl	800e7b0 <__mdiff>
 800c65e:	4605      	mov	r5, r0
 800c660:	2800      	cmp	r0, #0
 800c662:	f43f ae69 	beq.w	800c338 <_strtod_l+0x490>
 800c666:	68c3      	ldr	r3, [r0, #12]
 800c668:	930b      	str	r3, [sp, #44]	; 0x2c
 800c66a:	2300      	movs	r3, #0
 800c66c:	60c3      	str	r3, [r0, #12]
 800c66e:	4631      	mov	r1, r6
 800c670:	f002 f882 	bl	800e778 <__mcmp>
 800c674:	2800      	cmp	r0, #0
 800c676:	da60      	bge.n	800c73a <_strtod_l+0x892>
 800c678:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c67a:	ea53 030a 	orrs.w	r3, r3, sl
 800c67e:	f040 8082 	bne.w	800c786 <_strtod_l+0x8de>
 800c682:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c686:	2b00      	cmp	r3, #0
 800c688:	d17d      	bne.n	800c786 <_strtod_l+0x8de>
 800c68a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c68e:	0d1b      	lsrs	r3, r3, #20
 800c690:	051b      	lsls	r3, r3, #20
 800c692:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c696:	d976      	bls.n	800c786 <_strtod_l+0x8de>
 800c698:	696b      	ldr	r3, [r5, #20]
 800c69a:	b913      	cbnz	r3, 800c6a2 <_strtod_l+0x7fa>
 800c69c:	692b      	ldr	r3, [r5, #16]
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	dd71      	ble.n	800c786 <_strtod_l+0x8de>
 800c6a2:	4629      	mov	r1, r5
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	4620      	mov	r0, r4
 800c6a8:	f001 fff6 	bl	800e698 <__lshift>
 800c6ac:	4631      	mov	r1, r6
 800c6ae:	4605      	mov	r5, r0
 800c6b0:	f002 f862 	bl	800e778 <__mcmp>
 800c6b4:	2800      	cmp	r0, #0
 800c6b6:	dd66      	ble.n	800c786 <_strtod_l+0x8de>
 800c6b8:	9904      	ldr	r1, [sp, #16]
 800c6ba:	4a53      	ldr	r2, [pc, #332]	; (800c808 <_strtod_l+0x960>)
 800c6bc:	465b      	mov	r3, fp
 800c6be:	2900      	cmp	r1, #0
 800c6c0:	f000 8081 	beq.w	800c7c6 <_strtod_l+0x91e>
 800c6c4:	ea02 010b 	and.w	r1, r2, fp
 800c6c8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c6cc:	dc7b      	bgt.n	800c7c6 <_strtod_l+0x91e>
 800c6ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c6d2:	f77f aea9 	ble.w	800c428 <_strtod_l+0x580>
 800c6d6:	4b4d      	ldr	r3, [pc, #308]	; (800c80c <_strtod_l+0x964>)
 800c6d8:	4650      	mov	r0, sl
 800c6da:	4659      	mov	r1, fp
 800c6dc:	2200      	movs	r2, #0
 800c6de:	f7f3 ff9b 	bl	8000618 <__aeabi_dmul>
 800c6e2:	460b      	mov	r3, r1
 800c6e4:	4303      	orrs	r3, r0
 800c6e6:	bf08      	it	eq
 800c6e8:	2322      	moveq	r3, #34	; 0x22
 800c6ea:	4682      	mov	sl, r0
 800c6ec:	468b      	mov	fp, r1
 800c6ee:	bf08      	it	eq
 800c6f0:	6023      	streq	r3, [r4, #0]
 800c6f2:	e62b      	b.n	800c34c <_strtod_l+0x4a4>
 800c6f4:	f04f 32ff 	mov.w	r2, #4294967295
 800c6f8:	fa02 f303 	lsl.w	r3, r2, r3
 800c6fc:	ea03 0a0a 	and.w	sl, r3, sl
 800c700:	e6e3      	b.n	800c4ca <_strtod_l+0x622>
 800c702:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c706:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c70a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c70e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c712:	fa01 f308 	lsl.w	r3, r1, r8
 800c716:	9308      	str	r3, [sp, #32]
 800c718:	910d      	str	r1, [sp, #52]	; 0x34
 800c71a:	e746      	b.n	800c5aa <_strtod_l+0x702>
 800c71c:	2300      	movs	r3, #0
 800c71e:	9308      	str	r3, [sp, #32]
 800c720:	2301      	movs	r3, #1
 800c722:	930d      	str	r3, [sp, #52]	; 0x34
 800c724:	e741      	b.n	800c5aa <_strtod_l+0x702>
 800c726:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c728:	4642      	mov	r2, r8
 800c72a:	4620      	mov	r0, r4
 800c72c:	f001 ffb4 	bl	800e698 <__lshift>
 800c730:	9018      	str	r0, [sp, #96]	; 0x60
 800c732:	2800      	cmp	r0, #0
 800c734:	f47f af6b 	bne.w	800c60e <_strtod_l+0x766>
 800c738:	e5fe      	b.n	800c338 <_strtod_l+0x490>
 800c73a:	465f      	mov	r7, fp
 800c73c:	d16e      	bne.n	800c81c <_strtod_l+0x974>
 800c73e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c740:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c744:	b342      	cbz	r2, 800c798 <_strtod_l+0x8f0>
 800c746:	4a32      	ldr	r2, [pc, #200]	; (800c810 <_strtod_l+0x968>)
 800c748:	4293      	cmp	r3, r2
 800c74a:	d128      	bne.n	800c79e <_strtod_l+0x8f6>
 800c74c:	9b04      	ldr	r3, [sp, #16]
 800c74e:	4651      	mov	r1, sl
 800c750:	b1eb      	cbz	r3, 800c78e <_strtod_l+0x8e6>
 800c752:	4b2d      	ldr	r3, [pc, #180]	; (800c808 <_strtod_l+0x960>)
 800c754:	403b      	ands	r3, r7
 800c756:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c75a:	f04f 32ff 	mov.w	r2, #4294967295
 800c75e:	d819      	bhi.n	800c794 <_strtod_l+0x8ec>
 800c760:	0d1b      	lsrs	r3, r3, #20
 800c762:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c766:	fa02 f303 	lsl.w	r3, r2, r3
 800c76a:	4299      	cmp	r1, r3
 800c76c:	d117      	bne.n	800c79e <_strtod_l+0x8f6>
 800c76e:	4b29      	ldr	r3, [pc, #164]	; (800c814 <_strtod_l+0x96c>)
 800c770:	429f      	cmp	r7, r3
 800c772:	d102      	bne.n	800c77a <_strtod_l+0x8d2>
 800c774:	3101      	adds	r1, #1
 800c776:	f43f addf 	beq.w	800c338 <_strtod_l+0x490>
 800c77a:	4b23      	ldr	r3, [pc, #140]	; (800c808 <_strtod_l+0x960>)
 800c77c:	403b      	ands	r3, r7
 800c77e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c782:	f04f 0a00 	mov.w	sl, #0
 800c786:	9b04      	ldr	r3, [sp, #16]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d1a4      	bne.n	800c6d6 <_strtod_l+0x82e>
 800c78c:	e5de      	b.n	800c34c <_strtod_l+0x4a4>
 800c78e:	f04f 33ff 	mov.w	r3, #4294967295
 800c792:	e7ea      	b.n	800c76a <_strtod_l+0x8c2>
 800c794:	4613      	mov	r3, r2
 800c796:	e7e8      	b.n	800c76a <_strtod_l+0x8c2>
 800c798:	ea53 030a 	orrs.w	r3, r3, sl
 800c79c:	d08c      	beq.n	800c6b8 <_strtod_l+0x810>
 800c79e:	9b08      	ldr	r3, [sp, #32]
 800c7a0:	b1db      	cbz	r3, 800c7da <_strtod_l+0x932>
 800c7a2:	423b      	tst	r3, r7
 800c7a4:	d0ef      	beq.n	800c786 <_strtod_l+0x8de>
 800c7a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7a8:	9a04      	ldr	r2, [sp, #16]
 800c7aa:	4650      	mov	r0, sl
 800c7ac:	4659      	mov	r1, fp
 800c7ae:	b1c3      	cbz	r3, 800c7e2 <_strtod_l+0x93a>
 800c7b0:	f7ff fb5b 	bl	800be6a <sulp>
 800c7b4:	4602      	mov	r2, r0
 800c7b6:	460b      	mov	r3, r1
 800c7b8:	ec51 0b18 	vmov	r0, r1, d8
 800c7bc:	f7f3 fd76 	bl	80002ac <__adddf3>
 800c7c0:	4682      	mov	sl, r0
 800c7c2:	468b      	mov	fp, r1
 800c7c4:	e7df      	b.n	800c786 <_strtod_l+0x8de>
 800c7c6:	4013      	ands	r3, r2
 800c7c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c7cc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c7d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c7d4:	f04f 3aff 	mov.w	sl, #4294967295
 800c7d8:	e7d5      	b.n	800c786 <_strtod_l+0x8de>
 800c7da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7dc:	ea13 0f0a 	tst.w	r3, sl
 800c7e0:	e7e0      	b.n	800c7a4 <_strtod_l+0x8fc>
 800c7e2:	f7ff fb42 	bl	800be6a <sulp>
 800c7e6:	4602      	mov	r2, r0
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	ec51 0b18 	vmov	r0, r1, d8
 800c7ee:	f7f3 fd5b 	bl	80002a8 <__aeabi_dsub>
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	4682      	mov	sl, r0
 800c7f8:	468b      	mov	fp, r1
 800c7fa:	f7f4 f975 	bl	8000ae8 <__aeabi_dcmpeq>
 800c7fe:	2800      	cmp	r0, #0
 800c800:	d0c1      	beq.n	800c786 <_strtod_l+0x8de>
 800c802:	e611      	b.n	800c428 <_strtod_l+0x580>
 800c804:	fffffc02 	.word	0xfffffc02
 800c808:	7ff00000 	.word	0x7ff00000
 800c80c:	39500000 	.word	0x39500000
 800c810:	000fffff 	.word	0x000fffff
 800c814:	7fefffff 	.word	0x7fefffff
 800c818:	08011258 	.word	0x08011258
 800c81c:	4631      	mov	r1, r6
 800c81e:	4628      	mov	r0, r5
 800c820:	f002 f928 	bl	800ea74 <__ratio>
 800c824:	ec59 8b10 	vmov	r8, r9, d0
 800c828:	ee10 0a10 	vmov	r0, s0
 800c82c:	2200      	movs	r2, #0
 800c82e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c832:	4649      	mov	r1, r9
 800c834:	f7f4 f96c 	bl	8000b10 <__aeabi_dcmple>
 800c838:	2800      	cmp	r0, #0
 800c83a:	d07a      	beq.n	800c932 <_strtod_l+0xa8a>
 800c83c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d04a      	beq.n	800c8d8 <_strtod_l+0xa30>
 800c842:	4b95      	ldr	r3, [pc, #596]	; (800ca98 <_strtod_l+0xbf0>)
 800c844:	2200      	movs	r2, #0
 800c846:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c84a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ca98 <_strtod_l+0xbf0>
 800c84e:	f04f 0800 	mov.w	r8, #0
 800c852:	4b92      	ldr	r3, [pc, #584]	; (800ca9c <_strtod_l+0xbf4>)
 800c854:	403b      	ands	r3, r7
 800c856:	930d      	str	r3, [sp, #52]	; 0x34
 800c858:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c85a:	4b91      	ldr	r3, [pc, #580]	; (800caa0 <_strtod_l+0xbf8>)
 800c85c:	429a      	cmp	r2, r3
 800c85e:	f040 80b0 	bne.w	800c9c2 <_strtod_l+0xb1a>
 800c862:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c866:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c86a:	ec4b ab10 	vmov	d0, sl, fp
 800c86e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c872:	f002 f827 	bl	800e8c4 <__ulp>
 800c876:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c87a:	ec53 2b10 	vmov	r2, r3, d0
 800c87e:	f7f3 fecb 	bl	8000618 <__aeabi_dmul>
 800c882:	4652      	mov	r2, sl
 800c884:	465b      	mov	r3, fp
 800c886:	f7f3 fd11 	bl	80002ac <__adddf3>
 800c88a:	460b      	mov	r3, r1
 800c88c:	4983      	ldr	r1, [pc, #524]	; (800ca9c <_strtod_l+0xbf4>)
 800c88e:	4a85      	ldr	r2, [pc, #532]	; (800caa4 <_strtod_l+0xbfc>)
 800c890:	4019      	ands	r1, r3
 800c892:	4291      	cmp	r1, r2
 800c894:	4682      	mov	sl, r0
 800c896:	d960      	bls.n	800c95a <_strtod_l+0xab2>
 800c898:	ee18 3a90 	vmov	r3, s17
 800c89c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d104      	bne.n	800c8ae <_strtod_l+0xa06>
 800c8a4:	ee18 3a10 	vmov	r3, s16
 800c8a8:	3301      	adds	r3, #1
 800c8aa:	f43f ad45 	beq.w	800c338 <_strtod_l+0x490>
 800c8ae:	f8df b200 	ldr.w	fp, [pc, #512]	; 800cab0 <_strtod_l+0xc08>
 800c8b2:	f04f 3aff 	mov.w	sl, #4294967295
 800c8b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	f001 fcd1 	bl	800e260 <_Bfree>
 800c8be:	9905      	ldr	r1, [sp, #20]
 800c8c0:	4620      	mov	r0, r4
 800c8c2:	f001 fccd 	bl	800e260 <_Bfree>
 800c8c6:	4631      	mov	r1, r6
 800c8c8:	4620      	mov	r0, r4
 800c8ca:	f001 fcc9 	bl	800e260 <_Bfree>
 800c8ce:	4629      	mov	r1, r5
 800c8d0:	4620      	mov	r0, r4
 800c8d2:	f001 fcc5 	bl	800e260 <_Bfree>
 800c8d6:	e61a      	b.n	800c50e <_strtod_l+0x666>
 800c8d8:	f1ba 0f00 	cmp.w	sl, #0
 800c8dc:	d11b      	bne.n	800c916 <_strtod_l+0xa6e>
 800c8de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c8e2:	b9f3      	cbnz	r3, 800c922 <_strtod_l+0xa7a>
 800c8e4:	4b6c      	ldr	r3, [pc, #432]	; (800ca98 <_strtod_l+0xbf0>)
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	4640      	mov	r0, r8
 800c8ea:	4649      	mov	r1, r9
 800c8ec:	f7f4 f906 	bl	8000afc <__aeabi_dcmplt>
 800c8f0:	b9d0      	cbnz	r0, 800c928 <_strtod_l+0xa80>
 800c8f2:	4640      	mov	r0, r8
 800c8f4:	4649      	mov	r1, r9
 800c8f6:	4b6c      	ldr	r3, [pc, #432]	; (800caa8 <_strtod_l+0xc00>)
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	f7f3 fe8d 	bl	8000618 <__aeabi_dmul>
 800c8fe:	4680      	mov	r8, r0
 800c900:	4689      	mov	r9, r1
 800c902:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c906:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c90a:	9315      	str	r3, [sp, #84]	; 0x54
 800c90c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c910:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c914:	e79d      	b.n	800c852 <_strtod_l+0x9aa>
 800c916:	f1ba 0f01 	cmp.w	sl, #1
 800c91a:	d102      	bne.n	800c922 <_strtod_l+0xa7a>
 800c91c:	2f00      	cmp	r7, #0
 800c91e:	f43f ad83 	beq.w	800c428 <_strtod_l+0x580>
 800c922:	4b62      	ldr	r3, [pc, #392]	; (800caac <_strtod_l+0xc04>)
 800c924:	2200      	movs	r2, #0
 800c926:	e78e      	b.n	800c846 <_strtod_l+0x99e>
 800c928:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800caa8 <_strtod_l+0xc00>
 800c92c:	f04f 0800 	mov.w	r8, #0
 800c930:	e7e7      	b.n	800c902 <_strtod_l+0xa5a>
 800c932:	4b5d      	ldr	r3, [pc, #372]	; (800caa8 <_strtod_l+0xc00>)
 800c934:	4640      	mov	r0, r8
 800c936:	4649      	mov	r1, r9
 800c938:	2200      	movs	r2, #0
 800c93a:	f7f3 fe6d 	bl	8000618 <__aeabi_dmul>
 800c93e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c940:	4680      	mov	r8, r0
 800c942:	4689      	mov	r9, r1
 800c944:	b933      	cbnz	r3, 800c954 <_strtod_l+0xaac>
 800c946:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c94a:	900e      	str	r0, [sp, #56]	; 0x38
 800c94c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c94e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c952:	e7dd      	b.n	800c910 <_strtod_l+0xa68>
 800c954:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c958:	e7f9      	b.n	800c94e <_strtod_l+0xaa6>
 800c95a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c95e:	9b04      	ldr	r3, [sp, #16]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d1a8      	bne.n	800c8b6 <_strtod_l+0xa0e>
 800c964:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c968:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c96a:	0d1b      	lsrs	r3, r3, #20
 800c96c:	051b      	lsls	r3, r3, #20
 800c96e:	429a      	cmp	r2, r3
 800c970:	d1a1      	bne.n	800c8b6 <_strtod_l+0xa0e>
 800c972:	4640      	mov	r0, r8
 800c974:	4649      	mov	r1, r9
 800c976:	f7f4 f9af 	bl	8000cd8 <__aeabi_d2lz>
 800c97a:	f7f3 fe1f 	bl	80005bc <__aeabi_l2d>
 800c97e:	4602      	mov	r2, r0
 800c980:	460b      	mov	r3, r1
 800c982:	4640      	mov	r0, r8
 800c984:	4649      	mov	r1, r9
 800c986:	f7f3 fc8f 	bl	80002a8 <__aeabi_dsub>
 800c98a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c98c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c990:	ea43 030a 	orr.w	r3, r3, sl
 800c994:	4313      	orrs	r3, r2
 800c996:	4680      	mov	r8, r0
 800c998:	4689      	mov	r9, r1
 800c99a:	d055      	beq.n	800ca48 <_strtod_l+0xba0>
 800c99c:	a336      	add	r3, pc, #216	; (adr r3, 800ca78 <_strtod_l+0xbd0>)
 800c99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a2:	f7f4 f8ab 	bl	8000afc <__aeabi_dcmplt>
 800c9a6:	2800      	cmp	r0, #0
 800c9a8:	f47f acd0 	bne.w	800c34c <_strtod_l+0x4a4>
 800c9ac:	a334      	add	r3, pc, #208	; (adr r3, 800ca80 <_strtod_l+0xbd8>)
 800c9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b2:	4640      	mov	r0, r8
 800c9b4:	4649      	mov	r1, r9
 800c9b6:	f7f4 f8bf 	bl	8000b38 <__aeabi_dcmpgt>
 800c9ba:	2800      	cmp	r0, #0
 800c9bc:	f43f af7b 	beq.w	800c8b6 <_strtod_l+0xa0e>
 800c9c0:	e4c4      	b.n	800c34c <_strtod_l+0x4a4>
 800c9c2:	9b04      	ldr	r3, [sp, #16]
 800c9c4:	b333      	cbz	r3, 800ca14 <_strtod_l+0xb6c>
 800c9c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9c8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c9cc:	d822      	bhi.n	800ca14 <_strtod_l+0xb6c>
 800c9ce:	a32e      	add	r3, pc, #184	; (adr r3, 800ca88 <_strtod_l+0xbe0>)
 800c9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d4:	4640      	mov	r0, r8
 800c9d6:	4649      	mov	r1, r9
 800c9d8:	f7f4 f89a 	bl	8000b10 <__aeabi_dcmple>
 800c9dc:	b1a0      	cbz	r0, 800ca08 <_strtod_l+0xb60>
 800c9de:	4649      	mov	r1, r9
 800c9e0:	4640      	mov	r0, r8
 800c9e2:	f7f4 f8f1 	bl	8000bc8 <__aeabi_d2uiz>
 800c9e6:	2801      	cmp	r0, #1
 800c9e8:	bf38      	it	cc
 800c9ea:	2001      	movcc	r0, #1
 800c9ec:	f7f3 fd9a 	bl	8000524 <__aeabi_ui2d>
 800c9f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9f2:	4680      	mov	r8, r0
 800c9f4:	4689      	mov	r9, r1
 800c9f6:	bb23      	cbnz	r3, 800ca42 <_strtod_l+0xb9a>
 800c9f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9fc:	9010      	str	r0, [sp, #64]	; 0x40
 800c9fe:	9311      	str	r3, [sp, #68]	; 0x44
 800ca00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ca04:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ca08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ca0c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ca10:	1a9b      	subs	r3, r3, r2
 800ca12:	9309      	str	r3, [sp, #36]	; 0x24
 800ca14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ca18:	eeb0 0a48 	vmov.f32	s0, s16
 800ca1c:	eef0 0a68 	vmov.f32	s1, s17
 800ca20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ca24:	f001 ff4e 	bl	800e8c4 <__ulp>
 800ca28:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ca2c:	ec53 2b10 	vmov	r2, r3, d0
 800ca30:	f7f3 fdf2 	bl	8000618 <__aeabi_dmul>
 800ca34:	ec53 2b18 	vmov	r2, r3, d8
 800ca38:	f7f3 fc38 	bl	80002ac <__adddf3>
 800ca3c:	4682      	mov	sl, r0
 800ca3e:	468b      	mov	fp, r1
 800ca40:	e78d      	b.n	800c95e <_strtod_l+0xab6>
 800ca42:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ca46:	e7db      	b.n	800ca00 <_strtod_l+0xb58>
 800ca48:	a311      	add	r3, pc, #68	; (adr r3, 800ca90 <_strtod_l+0xbe8>)
 800ca4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4e:	f7f4 f855 	bl	8000afc <__aeabi_dcmplt>
 800ca52:	e7b2      	b.n	800c9ba <_strtod_l+0xb12>
 800ca54:	2300      	movs	r3, #0
 800ca56:	930a      	str	r3, [sp, #40]	; 0x28
 800ca58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ca5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ca5c:	6013      	str	r3, [r2, #0]
 800ca5e:	f7ff ba6b 	b.w	800bf38 <_strtod_l+0x90>
 800ca62:	2a65      	cmp	r2, #101	; 0x65
 800ca64:	f43f ab5f 	beq.w	800c126 <_strtod_l+0x27e>
 800ca68:	2a45      	cmp	r2, #69	; 0x45
 800ca6a:	f43f ab5c 	beq.w	800c126 <_strtod_l+0x27e>
 800ca6e:	2301      	movs	r3, #1
 800ca70:	f7ff bb94 	b.w	800c19c <_strtod_l+0x2f4>
 800ca74:	f3af 8000 	nop.w
 800ca78:	94a03595 	.word	0x94a03595
 800ca7c:	3fdfffff 	.word	0x3fdfffff
 800ca80:	35afe535 	.word	0x35afe535
 800ca84:	3fe00000 	.word	0x3fe00000
 800ca88:	ffc00000 	.word	0xffc00000
 800ca8c:	41dfffff 	.word	0x41dfffff
 800ca90:	94a03595 	.word	0x94a03595
 800ca94:	3fcfffff 	.word	0x3fcfffff
 800ca98:	3ff00000 	.word	0x3ff00000
 800ca9c:	7ff00000 	.word	0x7ff00000
 800caa0:	7fe00000 	.word	0x7fe00000
 800caa4:	7c9fffff 	.word	0x7c9fffff
 800caa8:	3fe00000 	.word	0x3fe00000
 800caac:	bff00000 	.word	0xbff00000
 800cab0:	7fefffff 	.word	0x7fefffff

0800cab4 <_strtod_r>:
 800cab4:	4b01      	ldr	r3, [pc, #4]	; (800cabc <_strtod_r+0x8>)
 800cab6:	f7ff b9f7 	b.w	800bea8 <_strtod_l>
 800caba:	bf00      	nop
 800cabc:	20000100 	.word	0x20000100

0800cac0 <_strtol_l.constprop.0>:
 800cac0:	2b01      	cmp	r3, #1
 800cac2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cac6:	d001      	beq.n	800cacc <_strtol_l.constprop.0+0xc>
 800cac8:	2b24      	cmp	r3, #36	; 0x24
 800caca:	d906      	bls.n	800cada <_strtol_l.constprop.0+0x1a>
 800cacc:	f7fe f8a2 	bl	800ac14 <__errno>
 800cad0:	2316      	movs	r3, #22
 800cad2:	6003      	str	r3, [r0, #0]
 800cad4:	2000      	movs	r0, #0
 800cad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cada:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cbc0 <_strtol_l.constprop.0+0x100>
 800cade:	460d      	mov	r5, r1
 800cae0:	462e      	mov	r6, r5
 800cae2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cae6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800caea:	f017 0708 	ands.w	r7, r7, #8
 800caee:	d1f7      	bne.n	800cae0 <_strtol_l.constprop.0+0x20>
 800caf0:	2c2d      	cmp	r4, #45	; 0x2d
 800caf2:	d132      	bne.n	800cb5a <_strtol_l.constprop.0+0x9a>
 800caf4:	782c      	ldrb	r4, [r5, #0]
 800caf6:	2701      	movs	r7, #1
 800caf8:	1cb5      	adds	r5, r6, #2
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d05b      	beq.n	800cbb6 <_strtol_l.constprop.0+0xf6>
 800cafe:	2b10      	cmp	r3, #16
 800cb00:	d109      	bne.n	800cb16 <_strtol_l.constprop.0+0x56>
 800cb02:	2c30      	cmp	r4, #48	; 0x30
 800cb04:	d107      	bne.n	800cb16 <_strtol_l.constprop.0+0x56>
 800cb06:	782c      	ldrb	r4, [r5, #0]
 800cb08:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cb0c:	2c58      	cmp	r4, #88	; 0x58
 800cb0e:	d14d      	bne.n	800cbac <_strtol_l.constprop.0+0xec>
 800cb10:	786c      	ldrb	r4, [r5, #1]
 800cb12:	2310      	movs	r3, #16
 800cb14:	3502      	adds	r5, #2
 800cb16:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cb1a:	f108 38ff 	add.w	r8, r8, #4294967295
 800cb1e:	f04f 0c00 	mov.w	ip, #0
 800cb22:	fbb8 f9f3 	udiv	r9, r8, r3
 800cb26:	4666      	mov	r6, ip
 800cb28:	fb03 8a19 	mls	sl, r3, r9, r8
 800cb2c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800cb30:	f1be 0f09 	cmp.w	lr, #9
 800cb34:	d816      	bhi.n	800cb64 <_strtol_l.constprop.0+0xa4>
 800cb36:	4674      	mov	r4, lr
 800cb38:	42a3      	cmp	r3, r4
 800cb3a:	dd24      	ble.n	800cb86 <_strtol_l.constprop.0+0xc6>
 800cb3c:	f1bc 0f00 	cmp.w	ip, #0
 800cb40:	db1e      	blt.n	800cb80 <_strtol_l.constprop.0+0xc0>
 800cb42:	45b1      	cmp	r9, r6
 800cb44:	d31c      	bcc.n	800cb80 <_strtol_l.constprop.0+0xc0>
 800cb46:	d101      	bne.n	800cb4c <_strtol_l.constprop.0+0x8c>
 800cb48:	45a2      	cmp	sl, r4
 800cb4a:	db19      	blt.n	800cb80 <_strtol_l.constprop.0+0xc0>
 800cb4c:	fb06 4603 	mla	r6, r6, r3, r4
 800cb50:	f04f 0c01 	mov.w	ip, #1
 800cb54:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb58:	e7e8      	b.n	800cb2c <_strtol_l.constprop.0+0x6c>
 800cb5a:	2c2b      	cmp	r4, #43	; 0x2b
 800cb5c:	bf04      	itt	eq
 800cb5e:	782c      	ldrbeq	r4, [r5, #0]
 800cb60:	1cb5      	addeq	r5, r6, #2
 800cb62:	e7ca      	b.n	800cafa <_strtol_l.constprop.0+0x3a>
 800cb64:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800cb68:	f1be 0f19 	cmp.w	lr, #25
 800cb6c:	d801      	bhi.n	800cb72 <_strtol_l.constprop.0+0xb2>
 800cb6e:	3c37      	subs	r4, #55	; 0x37
 800cb70:	e7e2      	b.n	800cb38 <_strtol_l.constprop.0+0x78>
 800cb72:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800cb76:	f1be 0f19 	cmp.w	lr, #25
 800cb7a:	d804      	bhi.n	800cb86 <_strtol_l.constprop.0+0xc6>
 800cb7c:	3c57      	subs	r4, #87	; 0x57
 800cb7e:	e7db      	b.n	800cb38 <_strtol_l.constprop.0+0x78>
 800cb80:	f04f 3cff 	mov.w	ip, #4294967295
 800cb84:	e7e6      	b.n	800cb54 <_strtol_l.constprop.0+0x94>
 800cb86:	f1bc 0f00 	cmp.w	ip, #0
 800cb8a:	da05      	bge.n	800cb98 <_strtol_l.constprop.0+0xd8>
 800cb8c:	2322      	movs	r3, #34	; 0x22
 800cb8e:	6003      	str	r3, [r0, #0]
 800cb90:	4646      	mov	r6, r8
 800cb92:	b942      	cbnz	r2, 800cba6 <_strtol_l.constprop.0+0xe6>
 800cb94:	4630      	mov	r0, r6
 800cb96:	e79e      	b.n	800cad6 <_strtol_l.constprop.0+0x16>
 800cb98:	b107      	cbz	r7, 800cb9c <_strtol_l.constprop.0+0xdc>
 800cb9a:	4276      	negs	r6, r6
 800cb9c:	2a00      	cmp	r2, #0
 800cb9e:	d0f9      	beq.n	800cb94 <_strtol_l.constprop.0+0xd4>
 800cba0:	f1bc 0f00 	cmp.w	ip, #0
 800cba4:	d000      	beq.n	800cba8 <_strtol_l.constprop.0+0xe8>
 800cba6:	1e69      	subs	r1, r5, #1
 800cba8:	6011      	str	r1, [r2, #0]
 800cbaa:	e7f3      	b.n	800cb94 <_strtol_l.constprop.0+0xd4>
 800cbac:	2430      	movs	r4, #48	; 0x30
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d1b1      	bne.n	800cb16 <_strtol_l.constprop.0+0x56>
 800cbb2:	2308      	movs	r3, #8
 800cbb4:	e7af      	b.n	800cb16 <_strtol_l.constprop.0+0x56>
 800cbb6:	2c30      	cmp	r4, #48	; 0x30
 800cbb8:	d0a5      	beq.n	800cb06 <_strtol_l.constprop.0+0x46>
 800cbba:	230a      	movs	r3, #10
 800cbbc:	e7ab      	b.n	800cb16 <_strtol_l.constprop.0+0x56>
 800cbbe:	bf00      	nop
 800cbc0:	08011281 	.word	0x08011281

0800cbc4 <_strtol_r>:
 800cbc4:	f7ff bf7c 	b.w	800cac0 <_strtol_l.constprop.0>

0800cbc8 <_write_r>:
 800cbc8:	b538      	push	{r3, r4, r5, lr}
 800cbca:	4d07      	ldr	r5, [pc, #28]	; (800cbe8 <_write_r+0x20>)
 800cbcc:	4604      	mov	r4, r0
 800cbce:	4608      	mov	r0, r1
 800cbd0:	4611      	mov	r1, r2
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	602a      	str	r2, [r5, #0]
 800cbd6:	461a      	mov	r2, r3
 800cbd8:	f7f4 fe5a 	bl	8001890 <_write>
 800cbdc:	1c43      	adds	r3, r0, #1
 800cbde:	d102      	bne.n	800cbe6 <_write_r+0x1e>
 800cbe0:	682b      	ldr	r3, [r5, #0]
 800cbe2:	b103      	cbz	r3, 800cbe6 <_write_r+0x1e>
 800cbe4:	6023      	str	r3, [r4, #0]
 800cbe6:	bd38      	pop	{r3, r4, r5, pc}
 800cbe8:	20008c48 	.word	0x20008c48

0800cbec <_close_r>:
 800cbec:	b538      	push	{r3, r4, r5, lr}
 800cbee:	4d06      	ldr	r5, [pc, #24]	; (800cc08 <_close_r+0x1c>)
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	4604      	mov	r4, r0
 800cbf4:	4608      	mov	r0, r1
 800cbf6:	602b      	str	r3, [r5, #0]
 800cbf8:	f7f5 fd25 	bl	8002646 <_close>
 800cbfc:	1c43      	adds	r3, r0, #1
 800cbfe:	d102      	bne.n	800cc06 <_close_r+0x1a>
 800cc00:	682b      	ldr	r3, [r5, #0]
 800cc02:	b103      	cbz	r3, 800cc06 <_close_r+0x1a>
 800cc04:	6023      	str	r3, [r4, #0]
 800cc06:	bd38      	pop	{r3, r4, r5, pc}
 800cc08:	20008c48 	.word	0x20008c48

0800cc0c <quorem>:
 800cc0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc10:	6903      	ldr	r3, [r0, #16]
 800cc12:	690c      	ldr	r4, [r1, #16]
 800cc14:	42a3      	cmp	r3, r4
 800cc16:	4607      	mov	r7, r0
 800cc18:	f2c0 8081 	blt.w	800cd1e <quorem+0x112>
 800cc1c:	3c01      	subs	r4, #1
 800cc1e:	f101 0814 	add.w	r8, r1, #20
 800cc22:	f100 0514 	add.w	r5, r0, #20
 800cc26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc2a:	9301      	str	r3, [sp, #4]
 800cc2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cc30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc34:	3301      	adds	r3, #1
 800cc36:	429a      	cmp	r2, r3
 800cc38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cc3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cc40:	fbb2 f6f3 	udiv	r6, r2, r3
 800cc44:	d331      	bcc.n	800ccaa <quorem+0x9e>
 800cc46:	f04f 0e00 	mov.w	lr, #0
 800cc4a:	4640      	mov	r0, r8
 800cc4c:	46ac      	mov	ip, r5
 800cc4e:	46f2      	mov	sl, lr
 800cc50:	f850 2b04 	ldr.w	r2, [r0], #4
 800cc54:	b293      	uxth	r3, r2
 800cc56:	fb06 e303 	mla	r3, r6, r3, lr
 800cc5a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cc5e:	b29b      	uxth	r3, r3
 800cc60:	ebaa 0303 	sub.w	r3, sl, r3
 800cc64:	f8dc a000 	ldr.w	sl, [ip]
 800cc68:	0c12      	lsrs	r2, r2, #16
 800cc6a:	fa13 f38a 	uxtah	r3, r3, sl
 800cc6e:	fb06 e202 	mla	r2, r6, r2, lr
 800cc72:	9300      	str	r3, [sp, #0]
 800cc74:	9b00      	ldr	r3, [sp, #0]
 800cc76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cc7a:	b292      	uxth	r2, r2
 800cc7c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cc80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cc84:	f8bd 3000 	ldrh.w	r3, [sp]
 800cc88:	4581      	cmp	r9, r0
 800cc8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc8e:	f84c 3b04 	str.w	r3, [ip], #4
 800cc92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cc96:	d2db      	bcs.n	800cc50 <quorem+0x44>
 800cc98:	f855 300b 	ldr.w	r3, [r5, fp]
 800cc9c:	b92b      	cbnz	r3, 800ccaa <quorem+0x9e>
 800cc9e:	9b01      	ldr	r3, [sp, #4]
 800cca0:	3b04      	subs	r3, #4
 800cca2:	429d      	cmp	r5, r3
 800cca4:	461a      	mov	r2, r3
 800cca6:	d32e      	bcc.n	800cd06 <quorem+0xfa>
 800cca8:	613c      	str	r4, [r7, #16]
 800ccaa:	4638      	mov	r0, r7
 800ccac:	f001 fd64 	bl	800e778 <__mcmp>
 800ccb0:	2800      	cmp	r0, #0
 800ccb2:	db24      	blt.n	800ccfe <quorem+0xf2>
 800ccb4:	3601      	adds	r6, #1
 800ccb6:	4628      	mov	r0, r5
 800ccb8:	f04f 0c00 	mov.w	ip, #0
 800ccbc:	f858 2b04 	ldr.w	r2, [r8], #4
 800ccc0:	f8d0 e000 	ldr.w	lr, [r0]
 800ccc4:	b293      	uxth	r3, r2
 800ccc6:	ebac 0303 	sub.w	r3, ip, r3
 800ccca:	0c12      	lsrs	r2, r2, #16
 800cccc:	fa13 f38e 	uxtah	r3, r3, lr
 800ccd0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ccd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ccd8:	b29b      	uxth	r3, r3
 800ccda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ccde:	45c1      	cmp	r9, r8
 800cce0:	f840 3b04 	str.w	r3, [r0], #4
 800cce4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cce8:	d2e8      	bcs.n	800ccbc <quorem+0xb0>
 800ccea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ccee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ccf2:	b922      	cbnz	r2, 800ccfe <quorem+0xf2>
 800ccf4:	3b04      	subs	r3, #4
 800ccf6:	429d      	cmp	r5, r3
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	d30a      	bcc.n	800cd12 <quorem+0x106>
 800ccfc:	613c      	str	r4, [r7, #16]
 800ccfe:	4630      	mov	r0, r6
 800cd00:	b003      	add	sp, #12
 800cd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd06:	6812      	ldr	r2, [r2, #0]
 800cd08:	3b04      	subs	r3, #4
 800cd0a:	2a00      	cmp	r2, #0
 800cd0c:	d1cc      	bne.n	800cca8 <quorem+0x9c>
 800cd0e:	3c01      	subs	r4, #1
 800cd10:	e7c7      	b.n	800cca2 <quorem+0x96>
 800cd12:	6812      	ldr	r2, [r2, #0]
 800cd14:	3b04      	subs	r3, #4
 800cd16:	2a00      	cmp	r2, #0
 800cd18:	d1f0      	bne.n	800ccfc <quorem+0xf0>
 800cd1a:	3c01      	subs	r4, #1
 800cd1c:	e7eb      	b.n	800ccf6 <quorem+0xea>
 800cd1e:	2000      	movs	r0, #0
 800cd20:	e7ee      	b.n	800cd00 <quorem+0xf4>
 800cd22:	0000      	movs	r0, r0
 800cd24:	0000      	movs	r0, r0
	...

0800cd28 <_dtoa_r>:
 800cd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd2c:	ed2d 8b04 	vpush	{d8-d9}
 800cd30:	ec57 6b10 	vmov	r6, r7, d0
 800cd34:	b093      	sub	sp, #76	; 0x4c
 800cd36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cd38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cd3c:	9106      	str	r1, [sp, #24]
 800cd3e:	ee10 aa10 	vmov	sl, s0
 800cd42:	4604      	mov	r4, r0
 800cd44:	9209      	str	r2, [sp, #36]	; 0x24
 800cd46:	930c      	str	r3, [sp, #48]	; 0x30
 800cd48:	46bb      	mov	fp, r7
 800cd4a:	b975      	cbnz	r5, 800cd6a <_dtoa_r+0x42>
 800cd4c:	2010      	movs	r0, #16
 800cd4e:	f001 fa21 	bl	800e194 <malloc>
 800cd52:	4602      	mov	r2, r0
 800cd54:	6260      	str	r0, [r4, #36]	; 0x24
 800cd56:	b920      	cbnz	r0, 800cd62 <_dtoa_r+0x3a>
 800cd58:	4ba7      	ldr	r3, [pc, #668]	; (800cff8 <_dtoa_r+0x2d0>)
 800cd5a:	21ea      	movs	r1, #234	; 0xea
 800cd5c:	48a7      	ldr	r0, [pc, #668]	; (800cffc <_dtoa_r+0x2d4>)
 800cd5e:	f002 f8fd 	bl	800ef5c <__assert_func>
 800cd62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cd66:	6005      	str	r5, [r0, #0]
 800cd68:	60c5      	str	r5, [r0, #12]
 800cd6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd6c:	6819      	ldr	r1, [r3, #0]
 800cd6e:	b151      	cbz	r1, 800cd86 <_dtoa_r+0x5e>
 800cd70:	685a      	ldr	r2, [r3, #4]
 800cd72:	604a      	str	r2, [r1, #4]
 800cd74:	2301      	movs	r3, #1
 800cd76:	4093      	lsls	r3, r2
 800cd78:	608b      	str	r3, [r1, #8]
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	f001 fa70 	bl	800e260 <_Bfree>
 800cd80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd82:	2200      	movs	r2, #0
 800cd84:	601a      	str	r2, [r3, #0]
 800cd86:	1e3b      	subs	r3, r7, #0
 800cd88:	bfaa      	itet	ge
 800cd8a:	2300      	movge	r3, #0
 800cd8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cd90:	f8c8 3000 	strge.w	r3, [r8]
 800cd94:	4b9a      	ldr	r3, [pc, #616]	; (800d000 <_dtoa_r+0x2d8>)
 800cd96:	bfbc      	itt	lt
 800cd98:	2201      	movlt	r2, #1
 800cd9a:	f8c8 2000 	strlt.w	r2, [r8]
 800cd9e:	ea33 030b 	bics.w	r3, r3, fp
 800cda2:	d11b      	bne.n	800cddc <_dtoa_r+0xb4>
 800cda4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cda6:	f242 730f 	movw	r3, #9999	; 0x270f
 800cdaa:	6013      	str	r3, [r2, #0]
 800cdac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cdb0:	4333      	orrs	r3, r6
 800cdb2:	f000 8592 	beq.w	800d8da <_dtoa_r+0xbb2>
 800cdb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cdb8:	b963      	cbnz	r3, 800cdd4 <_dtoa_r+0xac>
 800cdba:	4b92      	ldr	r3, [pc, #584]	; (800d004 <_dtoa_r+0x2dc>)
 800cdbc:	e022      	b.n	800ce04 <_dtoa_r+0xdc>
 800cdbe:	4b92      	ldr	r3, [pc, #584]	; (800d008 <_dtoa_r+0x2e0>)
 800cdc0:	9301      	str	r3, [sp, #4]
 800cdc2:	3308      	adds	r3, #8
 800cdc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cdc6:	6013      	str	r3, [r2, #0]
 800cdc8:	9801      	ldr	r0, [sp, #4]
 800cdca:	b013      	add	sp, #76	; 0x4c
 800cdcc:	ecbd 8b04 	vpop	{d8-d9}
 800cdd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdd4:	4b8b      	ldr	r3, [pc, #556]	; (800d004 <_dtoa_r+0x2dc>)
 800cdd6:	9301      	str	r3, [sp, #4]
 800cdd8:	3303      	adds	r3, #3
 800cdda:	e7f3      	b.n	800cdc4 <_dtoa_r+0x9c>
 800cddc:	2200      	movs	r2, #0
 800cdde:	2300      	movs	r3, #0
 800cde0:	4650      	mov	r0, sl
 800cde2:	4659      	mov	r1, fp
 800cde4:	f7f3 fe80 	bl	8000ae8 <__aeabi_dcmpeq>
 800cde8:	ec4b ab19 	vmov	d9, sl, fp
 800cdec:	4680      	mov	r8, r0
 800cdee:	b158      	cbz	r0, 800ce08 <_dtoa_r+0xe0>
 800cdf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	6013      	str	r3, [r2, #0]
 800cdf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	f000 856b 	beq.w	800d8d4 <_dtoa_r+0xbac>
 800cdfe:	4883      	ldr	r0, [pc, #524]	; (800d00c <_dtoa_r+0x2e4>)
 800ce00:	6018      	str	r0, [r3, #0]
 800ce02:	1e43      	subs	r3, r0, #1
 800ce04:	9301      	str	r3, [sp, #4]
 800ce06:	e7df      	b.n	800cdc8 <_dtoa_r+0xa0>
 800ce08:	ec4b ab10 	vmov	d0, sl, fp
 800ce0c:	aa10      	add	r2, sp, #64	; 0x40
 800ce0e:	a911      	add	r1, sp, #68	; 0x44
 800ce10:	4620      	mov	r0, r4
 800ce12:	f001 fdd3 	bl	800e9bc <__d2b>
 800ce16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ce1a:	ee08 0a10 	vmov	s16, r0
 800ce1e:	2d00      	cmp	r5, #0
 800ce20:	f000 8084 	beq.w	800cf2c <_dtoa_r+0x204>
 800ce24:	ee19 3a90 	vmov	r3, s19
 800ce28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ce30:	4656      	mov	r6, sl
 800ce32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ce36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ce3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ce3e:	4b74      	ldr	r3, [pc, #464]	; (800d010 <_dtoa_r+0x2e8>)
 800ce40:	2200      	movs	r2, #0
 800ce42:	4630      	mov	r0, r6
 800ce44:	4639      	mov	r1, r7
 800ce46:	f7f3 fa2f 	bl	80002a8 <__aeabi_dsub>
 800ce4a:	a365      	add	r3, pc, #404	; (adr r3, 800cfe0 <_dtoa_r+0x2b8>)
 800ce4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce50:	f7f3 fbe2 	bl	8000618 <__aeabi_dmul>
 800ce54:	a364      	add	r3, pc, #400	; (adr r3, 800cfe8 <_dtoa_r+0x2c0>)
 800ce56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce5a:	f7f3 fa27 	bl	80002ac <__adddf3>
 800ce5e:	4606      	mov	r6, r0
 800ce60:	4628      	mov	r0, r5
 800ce62:	460f      	mov	r7, r1
 800ce64:	f7f3 fb6e 	bl	8000544 <__aeabi_i2d>
 800ce68:	a361      	add	r3, pc, #388	; (adr r3, 800cff0 <_dtoa_r+0x2c8>)
 800ce6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6e:	f7f3 fbd3 	bl	8000618 <__aeabi_dmul>
 800ce72:	4602      	mov	r2, r0
 800ce74:	460b      	mov	r3, r1
 800ce76:	4630      	mov	r0, r6
 800ce78:	4639      	mov	r1, r7
 800ce7a:	f7f3 fa17 	bl	80002ac <__adddf3>
 800ce7e:	4606      	mov	r6, r0
 800ce80:	460f      	mov	r7, r1
 800ce82:	f7f3 fe79 	bl	8000b78 <__aeabi_d2iz>
 800ce86:	2200      	movs	r2, #0
 800ce88:	9000      	str	r0, [sp, #0]
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	4630      	mov	r0, r6
 800ce8e:	4639      	mov	r1, r7
 800ce90:	f7f3 fe34 	bl	8000afc <__aeabi_dcmplt>
 800ce94:	b150      	cbz	r0, 800ceac <_dtoa_r+0x184>
 800ce96:	9800      	ldr	r0, [sp, #0]
 800ce98:	f7f3 fb54 	bl	8000544 <__aeabi_i2d>
 800ce9c:	4632      	mov	r2, r6
 800ce9e:	463b      	mov	r3, r7
 800cea0:	f7f3 fe22 	bl	8000ae8 <__aeabi_dcmpeq>
 800cea4:	b910      	cbnz	r0, 800ceac <_dtoa_r+0x184>
 800cea6:	9b00      	ldr	r3, [sp, #0]
 800cea8:	3b01      	subs	r3, #1
 800ceaa:	9300      	str	r3, [sp, #0]
 800ceac:	9b00      	ldr	r3, [sp, #0]
 800ceae:	2b16      	cmp	r3, #22
 800ceb0:	d85a      	bhi.n	800cf68 <_dtoa_r+0x240>
 800ceb2:	9a00      	ldr	r2, [sp, #0]
 800ceb4:	4b57      	ldr	r3, [pc, #348]	; (800d014 <_dtoa_r+0x2ec>)
 800ceb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ceba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cebe:	ec51 0b19 	vmov	r0, r1, d9
 800cec2:	f7f3 fe1b 	bl	8000afc <__aeabi_dcmplt>
 800cec6:	2800      	cmp	r0, #0
 800cec8:	d050      	beq.n	800cf6c <_dtoa_r+0x244>
 800ceca:	9b00      	ldr	r3, [sp, #0]
 800cecc:	3b01      	subs	r3, #1
 800cece:	9300      	str	r3, [sp, #0]
 800ced0:	2300      	movs	r3, #0
 800ced2:	930b      	str	r3, [sp, #44]	; 0x2c
 800ced4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ced6:	1b5d      	subs	r5, r3, r5
 800ced8:	1e6b      	subs	r3, r5, #1
 800ceda:	9305      	str	r3, [sp, #20]
 800cedc:	bf45      	ittet	mi
 800cede:	f1c5 0301 	rsbmi	r3, r5, #1
 800cee2:	9304      	strmi	r3, [sp, #16]
 800cee4:	2300      	movpl	r3, #0
 800cee6:	2300      	movmi	r3, #0
 800cee8:	bf4c      	ite	mi
 800ceea:	9305      	strmi	r3, [sp, #20]
 800ceec:	9304      	strpl	r3, [sp, #16]
 800ceee:	9b00      	ldr	r3, [sp, #0]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	db3d      	blt.n	800cf70 <_dtoa_r+0x248>
 800cef4:	9b05      	ldr	r3, [sp, #20]
 800cef6:	9a00      	ldr	r2, [sp, #0]
 800cef8:	920a      	str	r2, [sp, #40]	; 0x28
 800cefa:	4413      	add	r3, r2
 800cefc:	9305      	str	r3, [sp, #20]
 800cefe:	2300      	movs	r3, #0
 800cf00:	9307      	str	r3, [sp, #28]
 800cf02:	9b06      	ldr	r3, [sp, #24]
 800cf04:	2b09      	cmp	r3, #9
 800cf06:	f200 8089 	bhi.w	800d01c <_dtoa_r+0x2f4>
 800cf0a:	2b05      	cmp	r3, #5
 800cf0c:	bfc4      	itt	gt
 800cf0e:	3b04      	subgt	r3, #4
 800cf10:	9306      	strgt	r3, [sp, #24]
 800cf12:	9b06      	ldr	r3, [sp, #24]
 800cf14:	f1a3 0302 	sub.w	r3, r3, #2
 800cf18:	bfcc      	ite	gt
 800cf1a:	2500      	movgt	r5, #0
 800cf1c:	2501      	movle	r5, #1
 800cf1e:	2b03      	cmp	r3, #3
 800cf20:	f200 8087 	bhi.w	800d032 <_dtoa_r+0x30a>
 800cf24:	e8df f003 	tbb	[pc, r3]
 800cf28:	59383a2d 	.word	0x59383a2d
 800cf2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cf30:	441d      	add	r5, r3
 800cf32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cf36:	2b20      	cmp	r3, #32
 800cf38:	bfc1      	itttt	gt
 800cf3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cf3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cf42:	fa0b f303 	lslgt.w	r3, fp, r3
 800cf46:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cf4a:	bfda      	itte	le
 800cf4c:	f1c3 0320 	rsble	r3, r3, #32
 800cf50:	fa06 f003 	lslle.w	r0, r6, r3
 800cf54:	4318      	orrgt	r0, r3
 800cf56:	f7f3 fae5 	bl	8000524 <__aeabi_ui2d>
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	4606      	mov	r6, r0
 800cf5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cf62:	3d01      	subs	r5, #1
 800cf64:	930e      	str	r3, [sp, #56]	; 0x38
 800cf66:	e76a      	b.n	800ce3e <_dtoa_r+0x116>
 800cf68:	2301      	movs	r3, #1
 800cf6a:	e7b2      	b.n	800ced2 <_dtoa_r+0x1aa>
 800cf6c:	900b      	str	r0, [sp, #44]	; 0x2c
 800cf6e:	e7b1      	b.n	800ced4 <_dtoa_r+0x1ac>
 800cf70:	9b04      	ldr	r3, [sp, #16]
 800cf72:	9a00      	ldr	r2, [sp, #0]
 800cf74:	1a9b      	subs	r3, r3, r2
 800cf76:	9304      	str	r3, [sp, #16]
 800cf78:	4253      	negs	r3, r2
 800cf7a:	9307      	str	r3, [sp, #28]
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	930a      	str	r3, [sp, #40]	; 0x28
 800cf80:	e7bf      	b.n	800cf02 <_dtoa_r+0x1da>
 800cf82:	2300      	movs	r3, #0
 800cf84:	9308      	str	r3, [sp, #32]
 800cf86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	dc55      	bgt.n	800d038 <_dtoa_r+0x310>
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cf92:	461a      	mov	r2, r3
 800cf94:	9209      	str	r2, [sp, #36]	; 0x24
 800cf96:	e00c      	b.n	800cfb2 <_dtoa_r+0x28a>
 800cf98:	2301      	movs	r3, #1
 800cf9a:	e7f3      	b.n	800cf84 <_dtoa_r+0x25c>
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfa0:	9308      	str	r3, [sp, #32]
 800cfa2:	9b00      	ldr	r3, [sp, #0]
 800cfa4:	4413      	add	r3, r2
 800cfa6:	9302      	str	r3, [sp, #8]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	2b01      	cmp	r3, #1
 800cfac:	9303      	str	r3, [sp, #12]
 800cfae:	bfb8      	it	lt
 800cfb0:	2301      	movlt	r3, #1
 800cfb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	6042      	str	r2, [r0, #4]
 800cfb8:	2204      	movs	r2, #4
 800cfba:	f102 0614 	add.w	r6, r2, #20
 800cfbe:	429e      	cmp	r6, r3
 800cfc0:	6841      	ldr	r1, [r0, #4]
 800cfc2:	d93d      	bls.n	800d040 <_dtoa_r+0x318>
 800cfc4:	4620      	mov	r0, r4
 800cfc6:	f001 f90b 	bl	800e1e0 <_Balloc>
 800cfca:	9001      	str	r0, [sp, #4]
 800cfcc:	2800      	cmp	r0, #0
 800cfce:	d13b      	bne.n	800d048 <_dtoa_r+0x320>
 800cfd0:	4b11      	ldr	r3, [pc, #68]	; (800d018 <_dtoa_r+0x2f0>)
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cfd8:	e6c0      	b.n	800cd5c <_dtoa_r+0x34>
 800cfda:	2301      	movs	r3, #1
 800cfdc:	e7df      	b.n	800cf9e <_dtoa_r+0x276>
 800cfde:	bf00      	nop
 800cfe0:	636f4361 	.word	0x636f4361
 800cfe4:	3fd287a7 	.word	0x3fd287a7
 800cfe8:	8b60c8b3 	.word	0x8b60c8b3
 800cfec:	3fc68a28 	.word	0x3fc68a28
 800cff0:	509f79fb 	.word	0x509f79fb
 800cff4:	3fd34413 	.word	0x3fd34413
 800cff8:	0801138e 	.word	0x0801138e
 800cffc:	080113a5 	.word	0x080113a5
 800d000:	7ff00000 	.word	0x7ff00000
 800d004:	0801138a 	.word	0x0801138a
 800d008:	08011381 	.word	0x08011381
 800d00c:	08011201 	.word	0x08011201
 800d010:	3ff80000 	.word	0x3ff80000
 800d014:	08011510 	.word	0x08011510
 800d018:	08011400 	.word	0x08011400
 800d01c:	2501      	movs	r5, #1
 800d01e:	2300      	movs	r3, #0
 800d020:	9306      	str	r3, [sp, #24]
 800d022:	9508      	str	r5, [sp, #32]
 800d024:	f04f 33ff 	mov.w	r3, #4294967295
 800d028:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d02c:	2200      	movs	r2, #0
 800d02e:	2312      	movs	r3, #18
 800d030:	e7b0      	b.n	800cf94 <_dtoa_r+0x26c>
 800d032:	2301      	movs	r3, #1
 800d034:	9308      	str	r3, [sp, #32]
 800d036:	e7f5      	b.n	800d024 <_dtoa_r+0x2fc>
 800d038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d03a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d03e:	e7b8      	b.n	800cfb2 <_dtoa_r+0x28a>
 800d040:	3101      	adds	r1, #1
 800d042:	6041      	str	r1, [r0, #4]
 800d044:	0052      	lsls	r2, r2, #1
 800d046:	e7b8      	b.n	800cfba <_dtoa_r+0x292>
 800d048:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d04a:	9a01      	ldr	r2, [sp, #4]
 800d04c:	601a      	str	r2, [r3, #0]
 800d04e:	9b03      	ldr	r3, [sp, #12]
 800d050:	2b0e      	cmp	r3, #14
 800d052:	f200 809d 	bhi.w	800d190 <_dtoa_r+0x468>
 800d056:	2d00      	cmp	r5, #0
 800d058:	f000 809a 	beq.w	800d190 <_dtoa_r+0x468>
 800d05c:	9b00      	ldr	r3, [sp, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	dd32      	ble.n	800d0c8 <_dtoa_r+0x3a0>
 800d062:	4ab7      	ldr	r2, [pc, #732]	; (800d340 <_dtoa_r+0x618>)
 800d064:	f003 030f 	and.w	r3, r3, #15
 800d068:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d06c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d070:	9b00      	ldr	r3, [sp, #0]
 800d072:	05d8      	lsls	r0, r3, #23
 800d074:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d078:	d516      	bpl.n	800d0a8 <_dtoa_r+0x380>
 800d07a:	4bb2      	ldr	r3, [pc, #712]	; (800d344 <_dtoa_r+0x61c>)
 800d07c:	ec51 0b19 	vmov	r0, r1, d9
 800d080:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d084:	f7f3 fbf2 	bl	800086c <__aeabi_ddiv>
 800d088:	f007 070f 	and.w	r7, r7, #15
 800d08c:	4682      	mov	sl, r0
 800d08e:	468b      	mov	fp, r1
 800d090:	2503      	movs	r5, #3
 800d092:	4eac      	ldr	r6, [pc, #688]	; (800d344 <_dtoa_r+0x61c>)
 800d094:	b957      	cbnz	r7, 800d0ac <_dtoa_r+0x384>
 800d096:	4642      	mov	r2, r8
 800d098:	464b      	mov	r3, r9
 800d09a:	4650      	mov	r0, sl
 800d09c:	4659      	mov	r1, fp
 800d09e:	f7f3 fbe5 	bl	800086c <__aeabi_ddiv>
 800d0a2:	4682      	mov	sl, r0
 800d0a4:	468b      	mov	fp, r1
 800d0a6:	e028      	b.n	800d0fa <_dtoa_r+0x3d2>
 800d0a8:	2502      	movs	r5, #2
 800d0aa:	e7f2      	b.n	800d092 <_dtoa_r+0x36a>
 800d0ac:	07f9      	lsls	r1, r7, #31
 800d0ae:	d508      	bpl.n	800d0c2 <_dtoa_r+0x39a>
 800d0b0:	4640      	mov	r0, r8
 800d0b2:	4649      	mov	r1, r9
 800d0b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d0b8:	f7f3 faae 	bl	8000618 <__aeabi_dmul>
 800d0bc:	3501      	adds	r5, #1
 800d0be:	4680      	mov	r8, r0
 800d0c0:	4689      	mov	r9, r1
 800d0c2:	107f      	asrs	r7, r7, #1
 800d0c4:	3608      	adds	r6, #8
 800d0c6:	e7e5      	b.n	800d094 <_dtoa_r+0x36c>
 800d0c8:	f000 809b 	beq.w	800d202 <_dtoa_r+0x4da>
 800d0cc:	9b00      	ldr	r3, [sp, #0]
 800d0ce:	4f9d      	ldr	r7, [pc, #628]	; (800d344 <_dtoa_r+0x61c>)
 800d0d0:	425e      	negs	r6, r3
 800d0d2:	4b9b      	ldr	r3, [pc, #620]	; (800d340 <_dtoa_r+0x618>)
 800d0d4:	f006 020f 	and.w	r2, r6, #15
 800d0d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e0:	ec51 0b19 	vmov	r0, r1, d9
 800d0e4:	f7f3 fa98 	bl	8000618 <__aeabi_dmul>
 800d0e8:	1136      	asrs	r6, r6, #4
 800d0ea:	4682      	mov	sl, r0
 800d0ec:	468b      	mov	fp, r1
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	2502      	movs	r5, #2
 800d0f2:	2e00      	cmp	r6, #0
 800d0f4:	d17a      	bne.n	800d1ec <_dtoa_r+0x4c4>
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d1d3      	bne.n	800d0a2 <_dtoa_r+0x37a>
 800d0fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	f000 8082 	beq.w	800d206 <_dtoa_r+0x4de>
 800d102:	4b91      	ldr	r3, [pc, #580]	; (800d348 <_dtoa_r+0x620>)
 800d104:	2200      	movs	r2, #0
 800d106:	4650      	mov	r0, sl
 800d108:	4659      	mov	r1, fp
 800d10a:	f7f3 fcf7 	bl	8000afc <__aeabi_dcmplt>
 800d10e:	2800      	cmp	r0, #0
 800d110:	d079      	beq.n	800d206 <_dtoa_r+0x4de>
 800d112:	9b03      	ldr	r3, [sp, #12]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d076      	beq.n	800d206 <_dtoa_r+0x4de>
 800d118:	9b02      	ldr	r3, [sp, #8]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	dd36      	ble.n	800d18c <_dtoa_r+0x464>
 800d11e:	9b00      	ldr	r3, [sp, #0]
 800d120:	4650      	mov	r0, sl
 800d122:	4659      	mov	r1, fp
 800d124:	1e5f      	subs	r7, r3, #1
 800d126:	2200      	movs	r2, #0
 800d128:	4b88      	ldr	r3, [pc, #544]	; (800d34c <_dtoa_r+0x624>)
 800d12a:	f7f3 fa75 	bl	8000618 <__aeabi_dmul>
 800d12e:	9e02      	ldr	r6, [sp, #8]
 800d130:	4682      	mov	sl, r0
 800d132:	468b      	mov	fp, r1
 800d134:	3501      	adds	r5, #1
 800d136:	4628      	mov	r0, r5
 800d138:	f7f3 fa04 	bl	8000544 <__aeabi_i2d>
 800d13c:	4652      	mov	r2, sl
 800d13e:	465b      	mov	r3, fp
 800d140:	f7f3 fa6a 	bl	8000618 <__aeabi_dmul>
 800d144:	4b82      	ldr	r3, [pc, #520]	; (800d350 <_dtoa_r+0x628>)
 800d146:	2200      	movs	r2, #0
 800d148:	f7f3 f8b0 	bl	80002ac <__adddf3>
 800d14c:	46d0      	mov	r8, sl
 800d14e:	46d9      	mov	r9, fp
 800d150:	4682      	mov	sl, r0
 800d152:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d156:	2e00      	cmp	r6, #0
 800d158:	d158      	bne.n	800d20c <_dtoa_r+0x4e4>
 800d15a:	4b7e      	ldr	r3, [pc, #504]	; (800d354 <_dtoa_r+0x62c>)
 800d15c:	2200      	movs	r2, #0
 800d15e:	4640      	mov	r0, r8
 800d160:	4649      	mov	r1, r9
 800d162:	f7f3 f8a1 	bl	80002a8 <__aeabi_dsub>
 800d166:	4652      	mov	r2, sl
 800d168:	465b      	mov	r3, fp
 800d16a:	4680      	mov	r8, r0
 800d16c:	4689      	mov	r9, r1
 800d16e:	f7f3 fce3 	bl	8000b38 <__aeabi_dcmpgt>
 800d172:	2800      	cmp	r0, #0
 800d174:	f040 8295 	bne.w	800d6a2 <_dtoa_r+0x97a>
 800d178:	4652      	mov	r2, sl
 800d17a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d17e:	4640      	mov	r0, r8
 800d180:	4649      	mov	r1, r9
 800d182:	f7f3 fcbb 	bl	8000afc <__aeabi_dcmplt>
 800d186:	2800      	cmp	r0, #0
 800d188:	f040 8289 	bne.w	800d69e <_dtoa_r+0x976>
 800d18c:	ec5b ab19 	vmov	sl, fp, d9
 800d190:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d192:	2b00      	cmp	r3, #0
 800d194:	f2c0 8148 	blt.w	800d428 <_dtoa_r+0x700>
 800d198:	9a00      	ldr	r2, [sp, #0]
 800d19a:	2a0e      	cmp	r2, #14
 800d19c:	f300 8144 	bgt.w	800d428 <_dtoa_r+0x700>
 800d1a0:	4b67      	ldr	r3, [pc, #412]	; (800d340 <_dtoa_r+0x618>)
 800d1a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d1aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	f280 80d5 	bge.w	800d35c <_dtoa_r+0x634>
 800d1b2:	9b03      	ldr	r3, [sp, #12]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	f300 80d1 	bgt.w	800d35c <_dtoa_r+0x634>
 800d1ba:	f040 826f 	bne.w	800d69c <_dtoa_r+0x974>
 800d1be:	4b65      	ldr	r3, [pc, #404]	; (800d354 <_dtoa_r+0x62c>)
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	4640      	mov	r0, r8
 800d1c4:	4649      	mov	r1, r9
 800d1c6:	f7f3 fa27 	bl	8000618 <__aeabi_dmul>
 800d1ca:	4652      	mov	r2, sl
 800d1cc:	465b      	mov	r3, fp
 800d1ce:	f7f3 fca9 	bl	8000b24 <__aeabi_dcmpge>
 800d1d2:	9e03      	ldr	r6, [sp, #12]
 800d1d4:	4637      	mov	r7, r6
 800d1d6:	2800      	cmp	r0, #0
 800d1d8:	f040 8245 	bne.w	800d666 <_dtoa_r+0x93e>
 800d1dc:	9d01      	ldr	r5, [sp, #4]
 800d1de:	2331      	movs	r3, #49	; 0x31
 800d1e0:	f805 3b01 	strb.w	r3, [r5], #1
 800d1e4:	9b00      	ldr	r3, [sp, #0]
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	9300      	str	r3, [sp, #0]
 800d1ea:	e240      	b.n	800d66e <_dtoa_r+0x946>
 800d1ec:	07f2      	lsls	r2, r6, #31
 800d1ee:	d505      	bpl.n	800d1fc <_dtoa_r+0x4d4>
 800d1f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1f4:	f7f3 fa10 	bl	8000618 <__aeabi_dmul>
 800d1f8:	3501      	adds	r5, #1
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	1076      	asrs	r6, r6, #1
 800d1fe:	3708      	adds	r7, #8
 800d200:	e777      	b.n	800d0f2 <_dtoa_r+0x3ca>
 800d202:	2502      	movs	r5, #2
 800d204:	e779      	b.n	800d0fa <_dtoa_r+0x3d2>
 800d206:	9f00      	ldr	r7, [sp, #0]
 800d208:	9e03      	ldr	r6, [sp, #12]
 800d20a:	e794      	b.n	800d136 <_dtoa_r+0x40e>
 800d20c:	9901      	ldr	r1, [sp, #4]
 800d20e:	4b4c      	ldr	r3, [pc, #304]	; (800d340 <_dtoa_r+0x618>)
 800d210:	4431      	add	r1, r6
 800d212:	910d      	str	r1, [sp, #52]	; 0x34
 800d214:	9908      	ldr	r1, [sp, #32]
 800d216:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d21a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d21e:	2900      	cmp	r1, #0
 800d220:	d043      	beq.n	800d2aa <_dtoa_r+0x582>
 800d222:	494d      	ldr	r1, [pc, #308]	; (800d358 <_dtoa_r+0x630>)
 800d224:	2000      	movs	r0, #0
 800d226:	f7f3 fb21 	bl	800086c <__aeabi_ddiv>
 800d22a:	4652      	mov	r2, sl
 800d22c:	465b      	mov	r3, fp
 800d22e:	f7f3 f83b 	bl	80002a8 <__aeabi_dsub>
 800d232:	9d01      	ldr	r5, [sp, #4]
 800d234:	4682      	mov	sl, r0
 800d236:	468b      	mov	fp, r1
 800d238:	4649      	mov	r1, r9
 800d23a:	4640      	mov	r0, r8
 800d23c:	f7f3 fc9c 	bl	8000b78 <__aeabi_d2iz>
 800d240:	4606      	mov	r6, r0
 800d242:	f7f3 f97f 	bl	8000544 <__aeabi_i2d>
 800d246:	4602      	mov	r2, r0
 800d248:	460b      	mov	r3, r1
 800d24a:	4640      	mov	r0, r8
 800d24c:	4649      	mov	r1, r9
 800d24e:	f7f3 f82b 	bl	80002a8 <__aeabi_dsub>
 800d252:	3630      	adds	r6, #48	; 0x30
 800d254:	f805 6b01 	strb.w	r6, [r5], #1
 800d258:	4652      	mov	r2, sl
 800d25a:	465b      	mov	r3, fp
 800d25c:	4680      	mov	r8, r0
 800d25e:	4689      	mov	r9, r1
 800d260:	f7f3 fc4c 	bl	8000afc <__aeabi_dcmplt>
 800d264:	2800      	cmp	r0, #0
 800d266:	d163      	bne.n	800d330 <_dtoa_r+0x608>
 800d268:	4642      	mov	r2, r8
 800d26a:	464b      	mov	r3, r9
 800d26c:	4936      	ldr	r1, [pc, #216]	; (800d348 <_dtoa_r+0x620>)
 800d26e:	2000      	movs	r0, #0
 800d270:	f7f3 f81a 	bl	80002a8 <__aeabi_dsub>
 800d274:	4652      	mov	r2, sl
 800d276:	465b      	mov	r3, fp
 800d278:	f7f3 fc40 	bl	8000afc <__aeabi_dcmplt>
 800d27c:	2800      	cmp	r0, #0
 800d27e:	f040 80b5 	bne.w	800d3ec <_dtoa_r+0x6c4>
 800d282:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d284:	429d      	cmp	r5, r3
 800d286:	d081      	beq.n	800d18c <_dtoa_r+0x464>
 800d288:	4b30      	ldr	r3, [pc, #192]	; (800d34c <_dtoa_r+0x624>)
 800d28a:	2200      	movs	r2, #0
 800d28c:	4650      	mov	r0, sl
 800d28e:	4659      	mov	r1, fp
 800d290:	f7f3 f9c2 	bl	8000618 <__aeabi_dmul>
 800d294:	4b2d      	ldr	r3, [pc, #180]	; (800d34c <_dtoa_r+0x624>)
 800d296:	4682      	mov	sl, r0
 800d298:	468b      	mov	fp, r1
 800d29a:	4640      	mov	r0, r8
 800d29c:	4649      	mov	r1, r9
 800d29e:	2200      	movs	r2, #0
 800d2a0:	f7f3 f9ba 	bl	8000618 <__aeabi_dmul>
 800d2a4:	4680      	mov	r8, r0
 800d2a6:	4689      	mov	r9, r1
 800d2a8:	e7c6      	b.n	800d238 <_dtoa_r+0x510>
 800d2aa:	4650      	mov	r0, sl
 800d2ac:	4659      	mov	r1, fp
 800d2ae:	f7f3 f9b3 	bl	8000618 <__aeabi_dmul>
 800d2b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2b4:	9d01      	ldr	r5, [sp, #4]
 800d2b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d2b8:	4682      	mov	sl, r0
 800d2ba:	468b      	mov	fp, r1
 800d2bc:	4649      	mov	r1, r9
 800d2be:	4640      	mov	r0, r8
 800d2c0:	f7f3 fc5a 	bl	8000b78 <__aeabi_d2iz>
 800d2c4:	4606      	mov	r6, r0
 800d2c6:	f7f3 f93d 	bl	8000544 <__aeabi_i2d>
 800d2ca:	3630      	adds	r6, #48	; 0x30
 800d2cc:	4602      	mov	r2, r0
 800d2ce:	460b      	mov	r3, r1
 800d2d0:	4640      	mov	r0, r8
 800d2d2:	4649      	mov	r1, r9
 800d2d4:	f7f2 ffe8 	bl	80002a8 <__aeabi_dsub>
 800d2d8:	f805 6b01 	strb.w	r6, [r5], #1
 800d2dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2de:	429d      	cmp	r5, r3
 800d2e0:	4680      	mov	r8, r0
 800d2e2:	4689      	mov	r9, r1
 800d2e4:	f04f 0200 	mov.w	r2, #0
 800d2e8:	d124      	bne.n	800d334 <_dtoa_r+0x60c>
 800d2ea:	4b1b      	ldr	r3, [pc, #108]	; (800d358 <_dtoa_r+0x630>)
 800d2ec:	4650      	mov	r0, sl
 800d2ee:	4659      	mov	r1, fp
 800d2f0:	f7f2 ffdc 	bl	80002ac <__adddf3>
 800d2f4:	4602      	mov	r2, r0
 800d2f6:	460b      	mov	r3, r1
 800d2f8:	4640      	mov	r0, r8
 800d2fa:	4649      	mov	r1, r9
 800d2fc:	f7f3 fc1c 	bl	8000b38 <__aeabi_dcmpgt>
 800d300:	2800      	cmp	r0, #0
 800d302:	d173      	bne.n	800d3ec <_dtoa_r+0x6c4>
 800d304:	4652      	mov	r2, sl
 800d306:	465b      	mov	r3, fp
 800d308:	4913      	ldr	r1, [pc, #76]	; (800d358 <_dtoa_r+0x630>)
 800d30a:	2000      	movs	r0, #0
 800d30c:	f7f2 ffcc 	bl	80002a8 <__aeabi_dsub>
 800d310:	4602      	mov	r2, r0
 800d312:	460b      	mov	r3, r1
 800d314:	4640      	mov	r0, r8
 800d316:	4649      	mov	r1, r9
 800d318:	f7f3 fbf0 	bl	8000afc <__aeabi_dcmplt>
 800d31c:	2800      	cmp	r0, #0
 800d31e:	f43f af35 	beq.w	800d18c <_dtoa_r+0x464>
 800d322:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d324:	1e6b      	subs	r3, r5, #1
 800d326:	930f      	str	r3, [sp, #60]	; 0x3c
 800d328:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d32c:	2b30      	cmp	r3, #48	; 0x30
 800d32e:	d0f8      	beq.n	800d322 <_dtoa_r+0x5fa>
 800d330:	9700      	str	r7, [sp, #0]
 800d332:	e049      	b.n	800d3c8 <_dtoa_r+0x6a0>
 800d334:	4b05      	ldr	r3, [pc, #20]	; (800d34c <_dtoa_r+0x624>)
 800d336:	f7f3 f96f 	bl	8000618 <__aeabi_dmul>
 800d33a:	4680      	mov	r8, r0
 800d33c:	4689      	mov	r9, r1
 800d33e:	e7bd      	b.n	800d2bc <_dtoa_r+0x594>
 800d340:	08011510 	.word	0x08011510
 800d344:	080114e8 	.word	0x080114e8
 800d348:	3ff00000 	.word	0x3ff00000
 800d34c:	40240000 	.word	0x40240000
 800d350:	401c0000 	.word	0x401c0000
 800d354:	40140000 	.word	0x40140000
 800d358:	3fe00000 	.word	0x3fe00000
 800d35c:	9d01      	ldr	r5, [sp, #4]
 800d35e:	4656      	mov	r6, sl
 800d360:	465f      	mov	r7, fp
 800d362:	4642      	mov	r2, r8
 800d364:	464b      	mov	r3, r9
 800d366:	4630      	mov	r0, r6
 800d368:	4639      	mov	r1, r7
 800d36a:	f7f3 fa7f 	bl	800086c <__aeabi_ddiv>
 800d36e:	f7f3 fc03 	bl	8000b78 <__aeabi_d2iz>
 800d372:	4682      	mov	sl, r0
 800d374:	f7f3 f8e6 	bl	8000544 <__aeabi_i2d>
 800d378:	4642      	mov	r2, r8
 800d37a:	464b      	mov	r3, r9
 800d37c:	f7f3 f94c 	bl	8000618 <__aeabi_dmul>
 800d380:	4602      	mov	r2, r0
 800d382:	460b      	mov	r3, r1
 800d384:	4630      	mov	r0, r6
 800d386:	4639      	mov	r1, r7
 800d388:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d38c:	f7f2 ff8c 	bl	80002a8 <__aeabi_dsub>
 800d390:	f805 6b01 	strb.w	r6, [r5], #1
 800d394:	9e01      	ldr	r6, [sp, #4]
 800d396:	9f03      	ldr	r7, [sp, #12]
 800d398:	1bae      	subs	r6, r5, r6
 800d39a:	42b7      	cmp	r7, r6
 800d39c:	4602      	mov	r2, r0
 800d39e:	460b      	mov	r3, r1
 800d3a0:	d135      	bne.n	800d40e <_dtoa_r+0x6e6>
 800d3a2:	f7f2 ff83 	bl	80002ac <__adddf3>
 800d3a6:	4642      	mov	r2, r8
 800d3a8:	464b      	mov	r3, r9
 800d3aa:	4606      	mov	r6, r0
 800d3ac:	460f      	mov	r7, r1
 800d3ae:	f7f3 fbc3 	bl	8000b38 <__aeabi_dcmpgt>
 800d3b2:	b9d0      	cbnz	r0, 800d3ea <_dtoa_r+0x6c2>
 800d3b4:	4642      	mov	r2, r8
 800d3b6:	464b      	mov	r3, r9
 800d3b8:	4630      	mov	r0, r6
 800d3ba:	4639      	mov	r1, r7
 800d3bc:	f7f3 fb94 	bl	8000ae8 <__aeabi_dcmpeq>
 800d3c0:	b110      	cbz	r0, 800d3c8 <_dtoa_r+0x6a0>
 800d3c2:	f01a 0f01 	tst.w	sl, #1
 800d3c6:	d110      	bne.n	800d3ea <_dtoa_r+0x6c2>
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	ee18 1a10 	vmov	r1, s16
 800d3ce:	f000 ff47 	bl	800e260 <_Bfree>
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	9800      	ldr	r0, [sp, #0]
 800d3d6:	702b      	strb	r3, [r5, #0]
 800d3d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d3da:	3001      	adds	r0, #1
 800d3dc:	6018      	str	r0, [r3, #0]
 800d3de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	f43f acf1 	beq.w	800cdc8 <_dtoa_r+0xa0>
 800d3e6:	601d      	str	r5, [r3, #0]
 800d3e8:	e4ee      	b.n	800cdc8 <_dtoa_r+0xa0>
 800d3ea:	9f00      	ldr	r7, [sp, #0]
 800d3ec:	462b      	mov	r3, r5
 800d3ee:	461d      	mov	r5, r3
 800d3f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d3f4:	2a39      	cmp	r2, #57	; 0x39
 800d3f6:	d106      	bne.n	800d406 <_dtoa_r+0x6de>
 800d3f8:	9a01      	ldr	r2, [sp, #4]
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d1f7      	bne.n	800d3ee <_dtoa_r+0x6c6>
 800d3fe:	9901      	ldr	r1, [sp, #4]
 800d400:	2230      	movs	r2, #48	; 0x30
 800d402:	3701      	adds	r7, #1
 800d404:	700a      	strb	r2, [r1, #0]
 800d406:	781a      	ldrb	r2, [r3, #0]
 800d408:	3201      	adds	r2, #1
 800d40a:	701a      	strb	r2, [r3, #0]
 800d40c:	e790      	b.n	800d330 <_dtoa_r+0x608>
 800d40e:	4ba6      	ldr	r3, [pc, #664]	; (800d6a8 <_dtoa_r+0x980>)
 800d410:	2200      	movs	r2, #0
 800d412:	f7f3 f901 	bl	8000618 <__aeabi_dmul>
 800d416:	2200      	movs	r2, #0
 800d418:	2300      	movs	r3, #0
 800d41a:	4606      	mov	r6, r0
 800d41c:	460f      	mov	r7, r1
 800d41e:	f7f3 fb63 	bl	8000ae8 <__aeabi_dcmpeq>
 800d422:	2800      	cmp	r0, #0
 800d424:	d09d      	beq.n	800d362 <_dtoa_r+0x63a>
 800d426:	e7cf      	b.n	800d3c8 <_dtoa_r+0x6a0>
 800d428:	9a08      	ldr	r2, [sp, #32]
 800d42a:	2a00      	cmp	r2, #0
 800d42c:	f000 80d7 	beq.w	800d5de <_dtoa_r+0x8b6>
 800d430:	9a06      	ldr	r2, [sp, #24]
 800d432:	2a01      	cmp	r2, #1
 800d434:	f300 80ba 	bgt.w	800d5ac <_dtoa_r+0x884>
 800d438:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d43a:	2a00      	cmp	r2, #0
 800d43c:	f000 80b2 	beq.w	800d5a4 <_dtoa_r+0x87c>
 800d440:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d444:	9e07      	ldr	r6, [sp, #28]
 800d446:	9d04      	ldr	r5, [sp, #16]
 800d448:	9a04      	ldr	r2, [sp, #16]
 800d44a:	441a      	add	r2, r3
 800d44c:	9204      	str	r2, [sp, #16]
 800d44e:	9a05      	ldr	r2, [sp, #20]
 800d450:	2101      	movs	r1, #1
 800d452:	441a      	add	r2, r3
 800d454:	4620      	mov	r0, r4
 800d456:	9205      	str	r2, [sp, #20]
 800d458:	f001 f804 	bl	800e464 <__i2b>
 800d45c:	4607      	mov	r7, r0
 800d45e:	2d00      	cmp	r5, #0
 800d460:	dd0c      	ble.n	800d47c <_dtoa_r+0x754>
 800d462:	9b05      	ldr	r3, [sp, #20]
 800d464:	2b00      	cmp	r3, #0
 800d466:	dd09      	ble.n	800d47c <_dtoa_r+0x754>
 800d468:	42ab      	cmp	r3, r5
 800d46a:	9a04      	ldr	r2, [sp, #16]
 800d46c:	bfa8      	it	ge
 800d46e:	462b      	movge	r3, r5
 800d470:	1ad2      	subs	r2, r2, r3
 800d472:	9204      	str	r2, [sp, #16]
 800d474:	9a05      	ldr	r2, [sp, #20]
 800d476:	1aed      	subs	r5, r5, r3
 800d478:	1ad3      	subs	r3, r2, r3
 800d47a:	9305      	str	r3, [sp, #20]
 800d47c:	9b07      	ldr	r3, [sp, #28]
 800d47e:	b31b      	cbz	r3, 800d4c8 <_dtoa_r+0x7a0>
 800d480:	9b08      	ldr	r3, [sp, #32]
 800d482:	2b00      	cmp	r3, #0
 800d484:	f000 80af 	beq.w	800d5e6 <_dtoa_r+0x8be>
 800d488:	2e00      	cmp	r6, #0
 800d48a:	dd13      	ble.n	800d4b4 <_dtoa_r+0x78c>
 800d48c:	4639      	mov	r1, r7
 800d48e:	4632      	mov	r2, r6
 800d490:	4620      	mov	r0, r4
 800d492:	f001 f8a7 	bl	800e5e4 <__pow5mult>
 800d496:	ee18 2a10 	vmov	r2, s16
 800d49a:	4601      	mov	r1, r0
 800d49c:	4607      	mov	r7, r0
 800d49e:	4620      	mov	r0, r4
 800d4a0:	f000 fff6 	bl	800e490 <__multiply>
 800d4a4:	ee18 1a10 	vmov	r1, s16
 800d4a8:	4680      	mov	r8, r0
 800d4aa:	4620      	mov	r0, r4
 800d4ac:	f000 fed8 	bl	800e260 <_Bfree>
 800d4b0:	ee08 8a10 	vmov	s16, r8
 800d4b4:	9b07      	ldr	r3, [sp, #28]
 800d4b6:	1b9a      	subs	r2, r3, r6
 800d4b8:	d006      	beq.n	800d4c8 <_dtoa_r+0x7a0>
 800d4ba:	ee18 1a10 	vmov	r1, s16
 800d4be:	4620      	mov	r0, r4
 800d4c0:	f001 f890 	bl	800e5e4 <__pow5mult>
 800d4c4:	ee08 0a10 	vmov	s16, r0
 800d4c8:	2101      	movs	r1, #1
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	f000 ffca 	bl	800e464 <__i2b>
 800d4d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	4606      	mov	r6, r0
 800d4d6:	f340 8088 	ble.w	800d5ea <_dtoa_r+0x8c2>
 800d4da:	461a      	mov	r2, r3
 800d4dc:	4601      	mov	r1, r0
 800d4de:	4620      	mov	r0, r4
 800d4e0:	f001 f880 	bl	800e5e4 <__pow5mult>
 800d4e4:	9b06      	ldr	r3, [sp, #24]
 800d4e6:	2b01      	cmp	r3, #1
 800d4e8:	4606      	mov	r6, r0
 800d4ea:	f340 8081 	ble.w	800d5f0 <_dtoa_r+0x8c8>
 800d4ee:	f04f 0800 	mov.w	r8, #0
 800d4f2:	6933      	ldr	r3, [r6, #16]
 800d4f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d4f8:	6918      	ldr	r0, [r3, #16]
 800d4fa:	f000 ff63 	bl	800e3c4 <__hi0bits>
 800d4fe:	f1c0 0020 	rsb	r0, r0, #32
 800d502:	9b05      	ldr	r3, [sp, #20]
 800d504:	4418      	add	r0, r3
 800d506:	f010 001f 	ands.w	r0, r0, #31
 800d50a:	f000 8092 	beq.w	800d632 <_dtoa_r+0x90a>
 800d50e:	f1c0 0320 	rsb	r3, r0, #32
 800d512:	2b04      	cmp	r3, #4
 800d514:	f340 808a 	ble.w	800d62c <_dtoa_r+0x904>
 800d518:	f1c0 001c 	rsb	r0, r0, #28
 800d51c:	9b04      	ldr	r3, [sp, #16]
 800d51e:	4403      	add	r3, r0
 800d520:	9304      	str	r3, [sp, #16]
 800d522:	9b05      	ldr	r3, [sp, #20]
 800d524:	4403      	add	r3, r0
 800d526:	4405      	add	r5, r0
 800d528:	9305      	str	r3, [sp, #20]
 800d52a:	9b04      	ldr	r3, [sp, #16]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	dd07      	ble.n	800d540 <_dtoa_r+0x818>
 800d530:	ee18 1a10 	vmov	r1, s16
 800d534:	461a      	mov	r2, r3
 800d536:	4620      	mov	r0, r4
 800d538:	f001 f8ae 	bl	800e698 <__lshift>
 800d53c:	ee08 0a10 	vmov	s16, r0
 800d540:	9b05      	ldr	r3, [sp, #20]
 800d542:	2b00      	cmp	r3, #0
 800d544:	dd05      	ble.n	800d552 <_dtoa_r+0x82a>
 800d546:	4631      	mov	r1, r6
 800d548:	461a      	mov	r2, r3
 800d54a:	4620      	mov	r0, r4
 800d54c:	f001 f8a4 	bl	800e698 <__lshift>
 800d550:	4606      	mov	r6, r0
 800d552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d554:	2b00      	cmp	r3, #0
 800d556:	d06e      	beq.n	800d636 <_dtoa_r+0x90e>
 800d558:	ee18 0a10 	vmov	r0, s16
 800d55c:	4631      	mov	r1, r6
 800d55e:	f001 f90b 	bl	800e778 <__mcmp>
 800d562:	2800      	cmp	r0, #0
 800d564:	da67      	bge.n	800d636 <_dtoa_r+0x90e>
 800d566:	9b00      	ldr	r3, [sp, #0]
 800d568:	3b01      	subs	r3, #1
 800d56a:	ee18 1a10 	vmov	r1, s16
 800d56e:	9300      	str	r3, [sp, #0]
 800d570:	220a      	movs	r2, #10
 800d572:	2300      	movs	r3, #0
 800d574:	4620      	mov	r0, r4
 800d576:	f000 fe95 	bl	800e2a4 <__multadd>
 800d57a:	9b08      	ldr	r3, [sp, #32]
 800d57c:	ee08 0a10 	vmov	s16, r0
 800d580:	2b00      	cmp	r3, #0
 800d582:	f000 81b1 	beq.w	800d8e8 <_dtoa_r+0xbc0>
 800d586:	2300      	movs	r3, #0
 800d588:	4639      	mov	r1, r7
 800d58a:	220a      	movs	r2, #10
 800d58c:	4620      	mov	r0, r4
 800d58e:	f000 fe89 	bl	800e2a4 <__multadd>
 800d592:	9b02      	ldr	r3, [sp, #8]
 800d594:	2b00      	cmp	r3, #0
 800d596:	4607      	mov	r7, r0
 800d598:	f300 808e 	bgt.w	800d6b8 <_dtoa_r+0x990>
 800d59c:	9b06      	ldr	r3, [sp, #24]
 800d59e:	2b02      	cmp	r3, #2
 800d5a0:	dc51      	bgt.n	800d646 <_dtoa_r+0x91e>
 800d5a2:	e089      	b.n	800d6b8 <_dtoa_r+0x990>
 800d5a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d5a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d5aa:	e74b      	b.n	800d444 <_dtoa_r+0x71c>
 800d5ac:	9b03      	ldr	r3, [sp, #12]
 800d5ae:	1e5e      	subs	r6, r3, #1
 800d5b0:	9b07      	ldr	r3, [sp, #28]
 800d5b2:	42b3      	cmp	r3, r6
 800d5b4:	bfbf      	itttt	lt
 800d5b6:	9b07      	ldrlt	r3, [sp, #28]
 800d5b8:	9607      	strlt	r6, [sp, #28]
 800d5ba:	1af2      	sublt	r2, r6, r3
 800d5bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d5be:	bfb6      	itet	lt
 800d5c0:	189b      	addlt	r3, r3, r2
 800d5c2:	1b9e      	subge	r6, r3, r6
 800d5c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d5c6:	9b03      	ldr	r3, [sp, #12]
 800d5c8:	bfb8      	it	lt
 800d5ca:	2600      	movlt	r6, #0
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	bfb7      	itett	lt
 800d5d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d5d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d5d8:	1a9d      	sublt	r5, r3, r2
 800d5da:	2300      	movlt	r3, #0
 800d5dc:	e734      	b.n	800d448 <_dtoa_r+0x720>
 800d5de:	9e07      	ldr	r6, [sp, #28]
 800d5e0:	9d04      	ldr	r5, [sp, #16]
 800d5e2:	9f08      	ldr	r7, [sp, #32]
 800d5e4:	e73b      	b.n	800d45e <_dtoa_r+0x736>
 800d5e6:	9a07      	ldr	r2, [sp, #28]
 800d5e8:	e767      	b.n	800d4ba <_dtoa_r+0x792>
 800d5ea:	9b06      	ldr	r3, [sp, #24]
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	dc18      	bgt.n	800d622 <_dtoa_r+0x8fa>
 800d5f0:	f1ba 0f00 	cmp.w	sl, #0
 800d5f4:	d115      	bne.n	800d622 <_dtoa_r+0x8fa>
 800d5f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d5fa:	b993      	cbnz	r3, 800d622 <_dtoa_r+0x8fa>
 800d5fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d600:	0d1b      	lsrs	r3, r3, #20
 800d602:	051b      	lsls	r3, r3, #20
 800d604:	b183      	cbz	r3, 800d628 <_dtoa_r+0x900>
 800d606:	9b04      	ldr	r3, [sp, #16]
 800d608:	3301      	adds	r3, #1
 800d60a:	9304      	str	r3, [sp, #16]
 800d60c:	9b05      	ldr	r3, [sp, #20]
 800d60e:	3301      	adds	r3, #1
 800d610:	9305      	str	r3, [sp, #20]
 800d612:	f04f 0801 	mov.w	r8, #1
 800d616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d618:	2b00      	cmp	r3, #0
 800d61a:	f47f af6a 	bne.w	800d4f2 <_dtoa_r+0x7ca>
 800d61e:	2001      	movs	r0, #1
 800d620:	e76f      	b.n	800d502 <_dtoa_r+0x7da>
 800d622:	f04f 0800 	mov.w	r8, #0
 800d626:	e7f6      	b.n	800d616 <_dtoa_r+0x8ee>
 800d628:	4698      	mov	r8, r3
 800d62a:	e7f4      	b.n	800d616 <_dtoa_r+0x8ee>
 800d62c:	f43f af7d 	beq.w	800d52a <_dtoa_r+0x802>
 800d630:	4618      	mov	r0, r3
 800d632:	301c      	adds	r0, #28
 800d634:	e772      	b.n	800d51c <_dtoa_r+0x7f4>
 800d636:	9b03      	ldr	r3, [sp, #12]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	dc37      	bgt.n	800d6ac <_dtoa_r+0x984>
 800d63c:	9b06      	ldr	r3, [sp, #24]
 800d63e:	2b02      	cmp	r3, #2
 800d640:	dd34      	ble.n	800d6ac <_dtoa_r+0x984>
 800d642:	9b03      	ldr	r3, [sp, #12]
 800d644:	9302      	str	r3, [sp, #8]
 800d646:	9b02      	ldr	r3, [sp, #8]
 800d648:	b96b      	cbnz	r3, 800d666 <_dtoa_r+0x93e>
 800d64a:	4631      	mov	r1, r6
 800d64c:	2205      	movs	r2, #5
 800d64e:	4620      	mov	r0, r4
 800d650:	f000 fe28 	bl	800e2a4 <__multadd>
 800d654:	4601      	mov	r1, r0
 800d656:	4606      	mov	r6, r0
 800d658:	ee18 0a10 	vmov	r0, s16
 800d65c:	f001 f88c 	bl	800e778 <__mcmp>
 800d660:	2800      	cmp	r0, #0
 800d662:	f73f adbb 	bgt.w	800d1dc <_dtoa_r+0x4b4>
 800d666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d668:	9d01      	ldr	r5, [sp, #4]
 800d66a:	43db      	mvns	r3, r3
 800d66c:	9300      	str	r3, [sp, #0]
 800d66e:	f04f 0800 	mov.w	r8, #0
 800d672:	4631      	mov	r1, r6
 800d674:	4620      	mov	r0, r4
 800d676:	f000 fdf3 	bl	800e260 <_Bfree>
 800d67a:	2f00      	cmp	r7, #0
 800d67c:	f43f aea4 	beq.w	800d3c8 <_dtoa_r+0x6a0>
 800d680:	f1b8 0f00 	cmp.w	r8, #0
 800d684:	d005      	beq.n	800d692 <_dtoa_r+0x96a>
 800d686:	45b8      	cmp	r8, r7
 800d688:	d003      	beq.n	800d692 <_dtoa_r+0x96a>
 800d68a:	4641      	mov	r1, r8
 800d68c:	4620      	mov	r0, r4
 800d68e:	f000 fde7 	bl	800e260 <_Bfree>
 800d692:	4639      	mov	r1, r7
 800d694:	4620      	mov	r0, r4
 800d696:	f000 fde3 	bl	800e260 <_Bfree>
 800d69a:	e695      	b.n	800d3c8 <_dtoa_r+0x6a0>
 800d69c:	2600      	movs	r6, #0
 800d69e:	4637      	mov	r7, r6
 800d6a0:	e7e1      	b.n	800d666 <_dtoa_r+0x93e>
 800d6a2:	9700      	str	r7, [sp, #0]
 800d6a4:	4637      	mov	r7, r6
 800d6a6:	e599      	b.n	800d1dc <_dtoa_r+0x4b4>
 800d6a8:	40240000 	.word	0x40240000
 800d6ac:	9b08      	ldr	r3, [sp, #32]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	f000 80ca 	beq.w	800d848 <_dtoa_r+0xb20>
 800d6b4:	9b03      	ldr	r3, [sp, #12]
 800d6b6:	9302      	str	r3, [sp, #8]
 800d6b8:	2d00      	cmp	r5, #0
 800d6ba:	dd05      	ble.n	800d6c8 <_dtoa_r+0x9a0>
 800d6bc:	4639      	mov	r1, r7
 800d6be:	462a      	mov	r2, r5
 800d6c0:	4620      	mov	r0, r4
 800d6c2:	f000 ffe9 	bl	800e698 <__lshift>
 800d6c6:	4607      	mov	r7, r0
 800d6c8:	f1b8 0f00 	cmp.w	r8, #0
 800d6cc:	d05b      	beq.n	800d786 <_dtoa_r+0xa5e>
 800d6ce:	6879      	ldr	r1, [r7, #4]
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	f000 fd85 	bl	800e1e0 <_Balloc>
 800d6d6:	4605      	mov	r5, r0
 800d6d8:	b928      	cbnz	r0, 800d6e6 <_dtoa_r+0x9be>
 800d6da:	4b87      	ldr	r3, [pc, #540]	; (800d8f8 <_dtoa_r+0xbd0>)
 800d6dc:	4602      	mov	r2, r0
 800d6de:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d6e2:	f7ff bb3b 	b.w	800cd5c <_dtoa_r+0x34>
 800d6e6:	693a      	ldr	r2, [r7, #16]
 800d6e8:	3202      	adds	r2, #2
 800d6ea:	0092      	lsls	r2, r2, #2
 800d6ec:	f107 010c 	add.w	r1, r7, #12
 800d6f0:	300c      	adds	r0, #12
 800d6f2:	f7fd fbb2 	bl	800ae5a <memcpy>
 800d6f6:	2201      	movs	r2, #1
 800d6f8:	4629      	mov	r1, r5
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	f000 ffcc 	bl	800e698 <__lshift>
 800d700:	9b01      	ldr	r3, [sp, #4]
 800d702:	f103 0901 	add.w	r9, r3, #1
 800d706:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d70a:	4413      	add	r3, r2
 800d70c:	9305      	str	r3, [sp, #20]
 800d70e:	f00a 0301 	and.w	r3, sl, #1
 800d712:	46b8      	mov	r8, r7
 800d714:	9304      	str	r3, [sp, #16]
 800d716:	4607      	mov	r7, r0
 800d718:	4631      	mov	r1, r6
 800d71a:	ee18 0a10 	vmov	r0, s16
 800d71e:	f7ff fa75 	bl	800cc0c <quorem>
 800d722:	4641      	mov	r1, r8
 800d724:	9002      	str	r0, [sp, #8]
 800d726:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d72a:	ee18 0a10 	vmov	r0, s16
 800d72e:	f001 f823 	bl	800e778 <__mcmp>
 800d732:	463a      	mov	r2, r7
 800d734:	9003      	str	r0, [sp, #12]
 800d736:	4631      	mov	r1, r6
 800d738:	4620      	mov	r0, r4
 800d73a:	f001 f839 	bl	800e7b0 <__mdiff>
 800d73e:	68c2      	ldr	r2, [r0, #12]
 800d740:	f109 3bff 	add.w	fp, r9, #4294967295
 800d744:	4605      	mov	r5, r0
 800d746:	bb02      	cbnz	r2, 800d78a <_dtoa_r+0xa62>
 800d748:	4601      	mov	r1, r0
 800d74a:	ee18 0a10 	vmov	r0, s16
 800d74e:	f001 f813 	bl	800e778 <__mcmp>
 800d752:	4602      	mov	r2, r0
 800d754:	4629      	mov	r1, r5
 800d756:	4620      	mov	r0, r4
 800d758:	9207      	str	r2, [sp, #28]
 800d75a:	f000 fd81 	bl	800e260 <_Bfree>
 800d75e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d762:	ea43 0102 	orr.w	r1, r3, r2
 800d766:	9b04      	ldr	r3, [sp, #16]
 800d768:	430b      	orrs	r3, r1
 800d76a:	464d      	mov	r5, r9
 800d76c:	d10f      	bne.n	800d78e <_dtoa_r+0xa66>
 800d76e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d772:	d02a      	beq.n	800d7ca <_dtoa_r+0xaa2>
 800d774:	9b03      	ldr	r3, [sp, #12]
 800d776:	2b00      	cmp	r3, #0
 800d778:	dd02      	ble.n	800d780 <_dtoa_r+0xa58>
 800d77a:	9b02      	ldr	r3, [sp, #8]
 800d77c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d780:	f88b a000 	strb.w	sl, [fp]
 800d784:	e775      	b.n	800d672 <_dtoa_r+0x94a>
 800d786:	4638      	mov	r0, r7
 800d788:	e7ba      	b.n	800d700 <_dtoa_r+0x9d8>
 800d78a:	2201      	movs	r2, #1
 800d78c:	e7e2      	b.n	800d754 <_dtoa_r+0xa2c>
 800d78e:	9b03      	ldr	r3, [sp, #12]
 800d790:	2b00      	cmp	r3, #0
 800d792:	db04      	blt.n	800d79e <_dtoa_r+0xa76>
 800d794:	9906      	ldr	r1, [sp, #24]
 800d796:	430b      	orrs	r3, r1
 800d798:	9904      	ldr	r1, [sp, #16]
 800d79a:	430b      	orrs	r3, r1
 800d79c:	d122      	bne.n	800d7e4 <_dtoa_r+0xabc>
 800d79e:	2a00      	cmp	r2, #0
 800d7a0:	ddee      	ble.n	800d780 <_dtoa_r+0xa58>
 800d7a2:	ee18 1a10 	vmov	r1, s16
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	4620      	mov	r0, r4
 800d7aa:	f000 ff75 	bl	800e698 <__lshift>
 800d7ae:	4631      	mov	r1, r6
 800d7b0:	ee08 0a10 	vmov	s16, r0
 800d7b4:	f000 ffe0 	bl	800e778 <__mcmp>
 800d7b8:	2800      	cmp	r0, #0
 800d7ba:	dc03      	bgt.n	800d7c4 <_dtoa_r+0xa9c>
 800d7bc:	d1e0      	bne.n	800d780 <_dtoa_r+0xa58>
 800d7be:	f01a 0f01 	tst.w	sl, #1
 800d7c2:	d0dd      	beq.n	800d780 <_dtoa_r+0xa58>
 800d7c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d7c8:	d1d7      	bne.n	800d77a <_dtoa_r+0xa52>
 800d7ca:	2339      	movs	r3, #57	; 0x39
 800d7cc:	f88b 3000 	strb.w	r3, [fp]
 800d7d0:	462b      	mov	r3, r5
 800d7d2:	461d      	mov	r5, r3
 800d7d4:	3b01      	subs	r3, #1
 800d7d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d7da:	2a39      	cmp	r2, #57	; 0x39
 800d7dc:	d071      	beq.n	800d8c2 <_dtoa_r+0xb9a>
 800d7de:	3201      	adds	r2, #1
 800d7e0:	701a      	strb	r2, [r3, #0]
 800d7e2:	e746      	b.n	800d672 <_dtoa_r+0x94a>
 800d7e4:	2a00      	cmp	r2, #0
 800d7e6:	dd07      	ble.n	800d7f8 <_dtoa_r+0xad0>
 800d7e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d7ec:	d0ed      	beq.n	800d7ca <_dtoa_r+0xaa2>
 800d7ee:	f10a 0301 	add.w	r3, sl, #1
 800d7f2:	f88b 3000 	strb.w	r3, [fp]
 800d7f6:	e73c      	b.n	800d672 <_dtoa_r+0x94a>
 800d7f8:	9b05      	ldr	r3, [sp, #20]
 800d7fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d7fe:	4599      	cmp	r9, r3
 800d800:	d047      	beq.n	800d892 <_dtoa_r+0xb6a>
 800d802:	ee18 1a10 	vmov	r1, s16
 800d806:	2300      	movs	r3, #0
 800d808:	220a      	movs	r2, #10
 800d80a:	4620      	mov	r0, r4
 800d80c:	f000 fd4a 	bl	800e2a4 <__multadd>
 800d810:	45b8      	cmp	r8, r7
 800d812:	ee08 0a10 	vmov	s16, r0
 800d816:	f04f 0300 	mov.w	r3, #0
 800d81a:	f04f 020a 	mov.w	r2, #10
 800d81e:	4641      	mov	r1, r8
 800d820:	4620      	mov	r0, r4
 800d822:	d106      	bne.n	800d832 <_dtoa_r+0xb0a>
 800d824:	f000 fd3e 	bl	800e2a4 <__multadd>
 800d828:	4680      	mov	r8, r0
 800d82a:	4607      	mov	r7, r0
 800d82c:	f109 0901 	add.w	r9, r9, #1
 800d830:	e772      	b.n	800d718 <_dtoa_r+0x9f0>
 800d832:	f000 fd37 	bl	800e2a4 <__multadd>
 800d836:	4639      	mov	r1, r7
 800d838:	4680      	mov	r8, r0
 800d83a:	2300      	movs	r3, #0
 800d83c:	220a      	movs	r2, #10
 800d83e:	4620      	mov	r0, r4
 800d840:	f000 fd30 	bl	800e2a4 <__multadd>
 800d844:	4607      	mov	r7, r0
 800d846:	e7f1      	b.n	800d82c <_dtoa_r+0xb04>
 800d848:	9b03      	ldr	r3, [sp, #12]
 800d84a:	9302      	str	r3, [sp, #8]
 800d84c:	9d01      	ldr	r5, [sp, #4]
 800d84e:	ee18 0a10 	vmov	r0, s16
 800d852:	4631      	mov	r1, r6
 800d854:	f7ff f9da 	bl	800cc0c <quorem>
 800d858:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d85c:	9b01      	ldr	r3, [sp, #4]
 800d85e:	f805 ab01 	strb.w	sl, [r5], #1
 800d862:	1aea      	subs	r2, r5, r3
 800d864:	9b02      	ldr	r3, [sp, #8]
 800d866:	4293      	cmp	r3, r2
 800d868:	dd09      	ble.n	800d87e <_dtoa_r+0xb56>
 800d86a:	ee18 1a10 	vmov	r1, s16
 800d86e:	2300      	movs	r3, #0
 800d870:	220a      	movs	r2, #10
 800d872:	4620      	mov	r0, r4
 800d874:	f000 fd16 	bl	800e2a4 <__multadd>
 800d878:	ee08 0a10 	vmov	s16, r0
 800d87c:	e7e7      	b.n	800d84e <_dtoa_r+0xb26>
 800d87e:	9b02      	ldr	r3, [sp, #8]
 800d880:	2b00      	cmp	r3, #0
 800d882:	bfc8      	it	gt
 800d884:	461d      	movgt	r5, r3
 800d886:	9b01      	ldr	r3, [sp, #4]
 800d888:	bfd8      	it	le
 800d88a:	2501      	movle	r5, #1
 800d88c:	441d      	add	r5, r3
 800d88e:	f04f 0800 	mov.w	r8, #0
 800d892:	ee18 1a10 	vmov	r1, s16
 800d896:	2201      	movs	r2, #1
 800d898:	4620      	mov	r0, r4
 800d89a:	f000 fefd 	bl	800e698 <__lshift>
 800d89e:	4631      	mov	r1, r6
 800d8a0:	ee08 0a10 	vmov	s16, r0
 800d8a4:	f000 ff68 	bl	800e778 <__mcmp>
 800d8a8:	2800      	cmp	r0, #0
 800d8aa:	dc91      	bgt.n	800d7d0 <_dtoa_r+0xaa8>
 800d8ac:	d102      	bne.n	800d8b4 <_dtoa_r+0xb8c>
 800d8ae:	f01a 0f01 	tst.w	sl, #1
 800d8b2:	d18d      	bne.n	800d7d0 <_dtoa_r+0xaa8>
 800d8b4:	462b      	mov	r3, r5
 800d8b6:	461d      	mov	r5, r3
 800d8b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d8bc:	2a30      	cmp	r2, #48	; 0x30
 800d8be:	d0fa      	beq.n	800d8b6 <_dtoa_r+0xb8e>
 800d8c0:	e6d7      	b.n	800d672 <_dtoa_r+0x94a>
 800d8c2:	9a01      	ldr	r2, [sp, #4]
 800d8c4:	429a      	cmp	r2, r3
 800d8c6:	d184      	bne.n	800d7d2 <_dtoa_r+0xaaa>
 800d8c8:	9b00      	ldr	r3, [sp, #0]
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	9300      	str	r3, [sp, #0]
 800d8ce:	2331      	movs	r3, #49	; 0x31
 800d8d0:	7013      	strb	r3, [r2, #0]
 800d8d2:	e6ce      	b.n	800d672 <_dtoa_r+0x94a>
 800d8d4:	4b09      	ldr	r3, [pc, #36]	; (800d8fc <_dtoa_r+0xbd4>)
 800d8d6:	f7ff ba95 	b.w	800ce04 <_dtoa_r+0xdc>
 800d8da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	f47f aa6e 	bne.w	800cdbe <_dtoa_r+0x96>
 800d8e2:	4b07      	ldr	r3, [pc, #28]	; (800d900 <_dtoa_r+0xbd8>)
 800d8e4:	f7ff ba8e 	b.w	800ce04 <_dtoa_r+0xdc>
 800d8e8:	9b02      	ldr	r3, [sp, #8]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	dcae      	bgt.n	800d84c <_dtoa_r+0xb24>
 800d8ee:	9b06      	ldr	r3, [sp, #24]
 800d8f0:	2b02      	cmp	r3, #2
 800d8f2:	f73f aea8 	bgt.w	800d646 <_dtoa_r+0x91e>
 800d8f6:	e7a9      	b.n	800d84c <_dtoa_r+0xb24>
 800d8f8:	08011400 	.word	0x08011400
 800d8fc:	08011200 	.word	0x08011200
 800d900:	08011381 	.word	0x08011381

0800d904 <__sflush_r>:
 800d904:	898a      	ldrh	r2, [r1, #12]
 800d906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d90a:	4605      	mov	r5, r0
 800d90c:	0710      	lsls	r0, r2, #28
 800d90e:	460c      	mov	r4, r1
 800d910:	d458      	bmi.n	800d9c4 <__sflush_r+0xc0>
 800d912:	684b      	ldr	r3, [r1, #4]
 800d914:	2b00      	cmp	r3, #0
 800d916:	dc05      	bgt.n	800d924 <__sflush_r+0x20>
 800d918:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	dc02      	bgt.n	800d924 <__sflush_r+0x20>
 800d91e:	2000      	movs	r0, #0
 800d920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d924:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d926:	2e00      	cmp	r6, #0
 800d928:	d0f9      	beq.n	800d91e <__sflush_r+0x1a>
 800d92a:	2300      	movs	r3, #0
 800d92c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d930:	682f      	ldr	r7, [r5, #0]
 800d932:	602b      	str	r3, [r5, #0]
 800d934:	d032      	beq.n	800d99c <__sflush_r+0x98>
 800d936:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d938:	89a3      	ldrh	r3, [r4, #12]
 800d93a:	075a      	lsls	r2, r3, #29
 800d93c:	d505      	bpl.n	800d94a <__sflush_r+0x46>
 800d93e:	6863      	ldr	r3, [r4, #4]
 800d940:	1ac0      	subs	r0, r0, r3
 800d942:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d944:	b10b      	cbz	r3, 800d94a <__sflush_r+0x46>
 800d946:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d948:	1ac0      	subs	r0, r0, r3
 800d94a:	2300      	movs	r3, #0
 800d94c:	4602      	mov	r2, r0
 800d94e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d950:	6a21      	ldr	r1, [r4, #32]
 800d952:	4628      	mov	r0, r5
 800d954:	47b0      	blx	r6
 800d956:	1c43      	adds	r3, r0, #1
 800d958:	89a3      	ldrh	r3, [r4, #12]
 800d95a:	d106      	bne.n	800d96a <__sflush_r+0x66>
 800d95c:	6829      	ldr	r1, [r5, #0]
 800d95e:	291d      	cmp	r1, #29
 800d960:	d82c      	bhi.n	800d9bc <__sflush_r+0xb8>
 800d962:	4a2a      	ldr	r2, [pc, #168]	; (800da0c <__sflush_r+0x108>)
 800d964:	40ca      	lsrs	r2, r1
 800d966:	07d6      	lsls	r6, r2, #31
 800d968:	d528      	bpl.n	800d9bc <__sflush_r+0xb8>
 800d96a:	2200      	movs	r2, #0
 800d96c:	6062      	str	r2, [r4, #4]
 800d96e:	04d9      	lsls	r1, r3, #19
 800d970:	6922      	ldr	r2, [r4, #16]
 800d972:	6022      	str	r2, [r4, #0]
 800d974:	d504      	bpl.n	800d980 <__sflush_r+0x7c>
 800d976:	1c42      	adds	r2, r0, #1
 800d978:	d101      	bne.n	800d97e <__sflush_r+0x7a>
 800d97a:	682b      	ldr	r3, [r5, #0]
 800d97c:	b903      	cbnz	r3, 800d980 <__sflush_r+0x7c>
 800d97e:	6560      	str	r0, [r4, #84]	; 0x54
 800d980:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d982:	602f      	str	r7, [r5, #0]
 800d984:	2900      	cmp	r1, #0
 800d986:	d0ca      	beq.n	800d91e <__sflush_r+0x1a>
 800d988:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d98c:	4299      	cmp	r1, r3
 800d98e:	d002      	beq.n	800d996 <__sflush_r+0x92>
 800d990:	4628      	mov	r0, r5
 800d992:	f001 f8fd 	bl	800eb90 <_free_r>
 800d996:	2000      	movs	r0, #0
 800d998:	6360      	str	r0, [r4, #52]	; 0x34
 800d99a:	e7c1      	b.n	800d920 <__sflush_r+0x1c>
 800d99c:	6a21      	ldr	r1, [r4, #32]
 800d99e:	2301      	movs	r3, #1
 800d9a0:	4628      	mov	r0, r5
 800d9a2:	47b0      	blx	r6
 800d9a4:	1c41      	adds	r1, r0, #1
 800d9a6:	d1c7      	bne.n	800d938 <__sflush_r+0x34>
 800d9a8:	682b      	ldr	r3, [r5, #0]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d0c4      	beq.n	800d938 <__sflush_r+0x34>
 800d9ae:	2b1d      	cmp	r3, #29
 800d9b0:	d001      	beq.n	800d9b6 <__sflush_r+0xb2>
 800d9b2:	2b16      	cmp	r3, #22
 800d9b4:	d101      	bne.n	800d9ba <__sflush_r+0xb6>
 800d9b6:	602f      	str	r7, [r5, #0]
 800d9b8:	e7b1      	b.n	800d91e <__sflush_r+0x1a>
 800d9ba:	89a3      	ldrh	r3, [r4, #12]
 800d9bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9c0:	81a3      	strh	r3, [r4, #12]
 800d9c2:	e7ad      	b.n	800d920 <__sflush_r+0x1c>
 800d9c4:	690f      	ldr	r7, [r1, #16]
 800d9c6:	2f00      	cmp	r7, #0
 800d9c8:	d0a9      	beq.n	800d91e <__sflush_r+0x1a>
 800d9ca:	0793      	lsls	r3, r2, #30
 800d9cc:	680e      	ldr	r6, [r1, #0]
 800d9ce:	bf08      	it	eq
 800d9d0:	694b      	ldreq	r3, [r1, #20]
 800d9d2:	600f      	str	r7, [r1, #0]
 800d9d4:	bf18      	it	ne
 800d9d6:	2300      	movne	r3, #0
 800d9d8:	eba6 0807 	sub.w	r8, r6, r7
 800d9dc:	608b      	str	r3, [r1, #8]
 800d9de:	f1b8 0f00 	cmp.w	r8, #0
 800d9e2:	dd9c      	ble.n	800d91e <__sflush_r+0x1a>
 800d9e4:	6a21      	ldr	r1, [r4, #32]
 800d9e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d9e8:	4643      	mov	r3, r8
 800d9ea:	463a      	mov	r2, r7
 800d9ec:	4628      	mov	r0, r5
 800d9ee:	47b0      	blx	r6
 800d9f0:	2800      	cmp	r0, #0
 800d9f2:	dc06      	bgt.n	800da02 <__sflush_r+0xfe>
 800d9f4:	89a3      	ldrh	r3, [r4, #12]
 800d9f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9fa:	81a3      	strh	r3, [r4, #12]
 800d9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800da00:	e78e      	b.n	800d920 <__sflush_r+0x1c>
 800da02:	4407      	add	r7, r0
 800da04:	eba8 0800 	sub.w	r8, r8, r0
 800da08:	e7e9      	b.n	800d9de <__sflush_r+0xda>
 800da0a:	bf00      	nop
 800da0c:	20400001 	.word	0x20400001

0800da10 <_fflush_r>:
 800da10:	b538      	push	{r3, r4, r5, lr}
 800da12:	690b      	ldr	r3, [r1, #16]
 800da14:	4605      	mov	r5, r0
 800da16:	460c      	mov	r4, r1
 800da18:	b913      	cbnz	r3, 800da20 <_fflush_r+0x10>
 800da1a:	2500      	movs	r5, #0
 800da1c:	4628      	mov	r0, r5
 800da1e:	bd38      	pop	{r3, r4, r5, pc}
 800da20:	b118      	cbz	r0, 800da2a <_fflush_r+0x1a>
 800da22:	6983      	ldr	r3, [r0, #24]
 800da24:	b90b      	cbnz	r3, 800da2a <_fflush_r+0x1a>
 800da26:	f7fd f953 	bl	800acd0 <__sinit>
 800da2a:	4b14      	ldr	r3, [pc, #80]	; (800da7c <_fflush_r+0x6c>)
 800da2c:	429c      	cmp	r4, r3
 800da2e:	d11b      	bne.n	800da68 <_fflush_r+0x58>
 800da30:	686c      	ldr	r4, [r5, #4]
 800da32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d0ef      	beq.n	800da1a <_fflush_r+0xa>
 800da3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800da3c:	07d0      	lsls	r0, r2, #31
 800da3e:	d404      	bmi.n	800da4a <_fflush_r+0x3a>
 800da40:	0599      	lsls	r1, r3, #22
 800da42:	d402      	bmi.n	800da4a <_fflush_r+0x3a>
 800da44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da46:	f7fd fa06 	bl	800ae56 <__retarget_lock_acquire_recursive>
 800da4a:	4628      	mov	r0, r5
 800da4c:	4621      	mov	r1, r4
 800da4e:	f7ff ff59 	bl	800d904 <__sflush_r>
 800da52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da54:	07da      	lsls	r2, r3, #31
 800da56:	4605      	mov	r5, r0
 800da58:	d4e0      	bmi.n	800da1c <_fflush_r+0xc>
 800da5a:	89a3      	ldrh	r3, [r4, #12]
 800da5c:	059b      	lsls	r3, r3, #22
 800da5e:	d4dd      	bmi.n	800da1c <_fflush_r+0xc>
 800da60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da62:	f7fd f9f9 	bl	800ae58 <__retarget_lock_release_recursive>
 800da66:	e7d9      	b.n	800da1c <_fflush_r+0xc>
 800da68:	4b05      	ldr	r3, [pc, #20]	; (800da80 <_fflush_r+0x70>)
 800da6a:	429c      	cmp	r4, r3
 800da6c:	d101      	bne.n	800da72 <_fflush_r+0x62>
 800da6e:	68ac      	ldr	r4, [r5, #8]
 800da70:	e7df      	b.n	800da32 <_fflush_r+0x22>
 800da72:	4b04      	ldr	r3, [pc, #16]	; (800da84 <_fflush_r+0x74>)
 800da74:	429c      	cmp	r4, r3
 800da76:	bf08      	it	eq
 800da78:	68ec      	ldreq	r4, [r5, #12]
 800da7a:	e7da      	b.n	800da32 <_fflush_r+0x22>
 800da7c:	080111ac 	.word	0x080111ac
 800da80:	080111cc 	.word	0x080111cc
 800da84:	0801118c 	.word	0x0801118c

0800da88 <rshift>:
 800da88:	6903      	ldr	r3, [r0, #16]
 800da8a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800da8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da92:	ea4f 1261 	mov.w	r2, r1, asr #5
 800da96:	f100 0414 	add.w	r4, r0, #20
 800da9a:	dd45      	ble.n	800db28 <rshift+0xa0>
 800da9c:	f011 011f 	ands.w	r1, r1, #31
 800daa0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800daa4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800daa8:	d10c      	bne.n	800dac4 <rshift+0x3c>
 800daaa:	f100 0710 	add.w	r7, r0, #16
 800daae:	4629      	mov	r1, r5
 800dab0:	42b1      	cmp	r1, r6
 800dab2:	d334      	bcc.n	800db1e <rshift+0x96>
 800dab4:	1a9b      	subs	r3, r3, r2
 800dab6:	009b      	lsls	r3, r3, #2
 800dab8:	1eea      	subs	r2, r5, #3
 800daba:	4296      	cmp	r6, r2
 800dabc:	bf38      	it	cc
 800dabe:	2300      	movcc	r3, #0
 800dac0:	4423      	add	r3, r4
 800dac2:	e015      	b.n	800daf0 <rshift+0x68>
 800dac4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dac8:	f1c1 0820 	rsb	r8, r1, #32
 800dacc:	40cf      	lsrs	r7, r1
 800dace:	f105 0e04 	add.w	lr, r5, #4
 800dad2:	46a1      	mov	r9, r4
 800dad4:	4576      	cmp	r6, lr
 800dad6:	46f4      	mov	ip, lr
 800dad8:	d815      	bhi.n	800db06 <rshift+0x7e>
 800dada:	1a9a      	subs	r2, r3, r2
 800dadc:	0092      	lsls	r2, r2, #2
 800dade:	3a04      	subs	r2, #4
 800dae0:	3501      	adds	r5, #1
 800dae2:	42ae      	cmp	r6, r5
 800dae4:	bf38      	it	cc
 800dae6:	2200      	movcc	r2, #0
 800dae8:	18a3      	adds	r3, r4, r2
 800daea:	50a7      	str	r7, [r4, r2]
 800daec:	b107      	cbz	r7, 800daf0 <rshift+0x68>
 800daee:	3304      	adds	r3, #4
 800daf0:	1b1a      	subs	r2, r3, r4
 800daf2:	42a3      	cmp	r3, r4
 800daf4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800daf8:	bf08      	it	eq
 800dafa:	2300      	moveq	r3, #0
 800dafc:	6102      	str	r2, [r0, #16]
 800dafe:	bf08      	it	eq
 800db00:	6143      	streq	r3, [r0, #20]
 800db02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db06:	f8dc c000 	ldr.w	ip, [ip]
 800db0a:	fa0c fc08 	lsl.w	ip, ip, r8
 800db0e:	ea4c 0707 	orr.w	r7, ip, r7
 800db12:	f849 7b04 	str.w	r7, [r9], #4
 800db16:	f85e 7b04 	ldr.w	r7, [lr], #4
 800db1a:	40cf      	lsrs	r7, r1
 800db1c:	e7da      	b.n	800dad4 <rshift+0x4c>
 800db1e:	f851 cb04 	ldr.w	ip, [r1], #4
 800db22:	f847 cf04 	str.w	ip, [r7, #4]!
 800db26:	e7c3      	b.n	800dab0 <rshift+0x28>
 800db28:	4623      	mov	r3, r4
 800db2a:	e7e1      	b.n	800daf0 <rshift+0x68>

0800db2c <__hexdig_fun>:
 800db2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800db30:	2b09      	cmp	r3, #9
 800db32:	d802      	bhi.n	800db3a <__hexdig_fun+0xe>
 800db34:	3820      	subs	r0, #32
 800db36:	b2c0      	uxtb	r0, r0
 800db38:	4770      	bx	lr
 800db3a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800db3e:	2b05      	cmp	r3, #5
 800db40:	d801      	bhi.n	800db46 <__hexdig_fun+0x1a>
 800db42:	3847      	subs	r0, #71	; 0x47
 800db44:	e7f7      	b.n	800db36 <__hexdig_fun+0xa>
 800db46:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800db4a:	2b05      	cmp	r3, #5
 800db4c:	d801      	bhi.n	800db52 <__hexdig_fun+0x26>
 800db4e:	3827      	subs	r0, #39	; 0x27
 800db50:	e7f1      	b.n	800db36 <__hexdig_fun+0xa>
 800db52:	2000      	movs	r0, #0
 800db54:	4770      	bx	lr
	...

0800db58 <__gethex>:
 800db58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db5c:	ed2d 8b02 	vpush	{d8}
 800db60:	b089      	sub	sp, #36	; 0x24
 800db62:	ee08 0a10 	vmov	s16, r0
 800db66:	9304      	str	r3, [sp, #16]
 800db68:	4bb4      	ldr	r3, [pc, #720]	; (800de3c <__gethex+0x2e4>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	9301      	str	r3, [sp, #4]
 800db6e:	4618      	mov	r0, r3
 800db70:	468b      	mov	fp, r1
 800db72:	4690      	mov	r8, r2
 800db74:	f7f2 fb3c 	bl	80001f0 <strlen>
 800db78:	9b01      	ldr	r3, [sp, #4]
 800db7a:	f8db 2000 	ldr.w	r2, [fp]
 800db7e:	4403      	add	r3, r0
 800db80:	4682      	mov	sl, r0
 800db82:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800db86:	9305      	str	r3, [sp, #20]
 800db88:	1c93      	adds	r3, r2, #2
 800db8a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800db8e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800db92:	32fe      	adds	r2, #254	; 0xfe
 800db94:	18d1      	adds	r1, r2, r3
 800db96:	461f      	mov	r7, r3
 800db98:	f813 0b01 	ldrb.w	r0, [r3], #1
 800db9c:	9100      	str	r1, [sp, #0]
 800db9e:	2830      	cmp	r0, #48	; 0x30
 800dba0:	d0f8      	beq.n	800db94 <__gethex+0x3c>
 800dba2:	f7ff ffc3 	bl	800db2c <__hexdig_fun>
 800dba6:	4604      	mov	r4, r0
 800dba8:	2800      	cmp	r0, #0
 800dbaa:	d13a      	bne.n	800dc22 <__gethex+0xca>
 800dbac:	9901      	ldr	r1, [sp, #4]
 800dbae:	4652      	mov	r2, sl
 800dbb0:	4638      	mov	r0, r7
 800dbb2:	f001 f9b1 	bl	800ef18 <strncmp>
 800dbb6:	4605      	mov	r5, r0
 800dbb8:	2800      	cmp	r0, #0
 800dbba:	d168      	bne.n	800dc8e <__gethex+0x136>
 800dbbc:	f817 000a 	ldrb.w	r0, [r7, sl]
 800dbc0:	eb07 060a 	add.w	r6, r7, sl
 800dbc4:	f7ff ffb2 	bl	800db2c <__hexdig_fun>
 800dbc8:	2800      	cmp	r0, #0
 800dbca:	d062      	beq.n	800dc92 <__gethex+0x13a>
 800dbcc:	4633      	mov	r3, r6
 800dbce:	7818      	ldrb	r0, [r3, #0]
 800dbd0:	2830      	cmp	r0, #48	; 0x30
 800dbd2:	461f      	mov	r7, r3
 800dbd4:	f103 0301 	add.w	r3, r3, #1
 800dbd8:	d0f9      	beq.n	800dbce <__gethex+0x76>
 800dbda:	f7ff ffa7 	bl	800db2c <__hexdig_fun>
 800dbde:	2301      	movs	r3, #1
 800dbe0:	fab0 f480 	clz	r4, r0
 800dbe4:	0964      	lsrs	r4, r4, #5
 800dbe6:	4635      	mov	r5, r6
 800dbe8:	9300      	str	r3, [sp, #0]
 800dbea:	463a      	mov	r2, r7
 800dbec:	4616      	mov	r6, r2
 800dbee:	3201      	adds	r2, #1
 800dbf0:	7830      	ldrb	r0, [r6, #0]
 800dbf2:	f7ff ff9b 	bl	800db2c <__hexdig_fun>
 800dbf6:	2800      	cmp	r0, #0
 800dbf8:	d1f8      	bne.n	800dbec <__gethex+0x94>
 800dbfa:	9901      	ldr	r1, [sp, #4]
 800dbfc:	4652      	mov	r2, sl
 800dbfe:	4630      	mov	r0, r6
 800dc00:	f001 f98a 	bl	800ef18 <strncmp>
 800dc04:	b980      	cbnz	r0, 800dc28 <__gethex+0xd0>
 800dc06:	b94d      	cbnz	r5, 800dc1c <__gethex+0xc4>
 800dc08:	eb06 050a 	add.w	r5, r6, sl
 800dc0c:	462a      	mov	r2, r5
 800dc0e:	4616      	mov	r6, r2
 800dc10:	3201      	adds	r2, #1
 800dc12:	7830      	ldrb	r0, [r6, #0]
 800dc14:	f7ff ff8a 	bl	800db2c <__hexdig_fun>
 800dc18:	2800      	cmp	r0, #0
 800dc1a:	d1f8      	bne.n	800dc0e <__gethex+0xb6>
 800dc1c:	1bad      	subs	r5, r5, r6
 800dc1e:	00ad      	lsls	r5, r5, #2
 800dc20:	e004      	b.n	800dc2c <__gethex+0xd4>
 800dc22:	2400      	movs	r4, #0
 800dc24:	4625      	mov	r5, r4
 800dc26:	e7e0      	b.n	800dbea <__gethex+0x92>
 800dc28:	2d00      	cmp	r5, #0
 800dc2a:	d1f7      	bne.n	800dc1c <__gethex+0xc4>
 800dc2c:	7833      	ldrb	r3, [r6, #0]
 800dc2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dc32:	2b50      	cmp	r3, #80	; 0x50
 800dc34:	d13b      	bne.n	800dcae <__gethex+0x156>
 800dc36:	7873      	ldrb	r3, [r6, #1]
 800dc38:	2b2b      	cmp	r3, #43	; 0x2b
 800dc3a:	d02c      	beq.n	800dc96 <__gethex+0x13e>
 800dc3c:	2b2d      	cmp	r3, #45	; 0x2d
 800dc3e:	d02e      	beq.n	800dc9e <__gethex+0x146>
 800dc40:	1c71      	adds	r1, r6, #1
 800dc42:	f04f 0900 	mov.w	r9, #0
 800dc46:	7808      	ldrb	r0, [r1, #0]
 800dc48:	f7ff ff70 	bl	800db2c <__hexdig_fun>
 800dc4c:	1e43      	subs	r3, r0, #1
 800dc4e:	b2db      	uxtb	r3, r3
 800dc50:	2b18      	cmp	r3, #24
 800dc52:	d82c      	bhi.n	800dcae <__gethex+0x156>
 800dc54:	f1a0 0210 	sub.w	r2, r0, #16
 800dc58:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dc5c:	f7ff ff66 	bl	800db2c <__hexdig_fun>
 800dc60:	1e43      	subs	r3, r0, #1
 800dc62:	b2db      	uxtb	r3, r3
 800dc64:	2b18      	cmp	r3, #24
 800dc66:	d91d      	bls.n	800dca4 <__gethex+0x14c>
 800dc68:	f1b9 0f00 	cmp.w	r9, #0
 800dc6c:	d000      	beq.n	800dc70 <__gethex+0x118>
 800dc6e:	4252      	negs	r2, r2
 800dc70:	4415      	add	r5, r2
 800dc72:	f8cb 1000 	str.w	r1, [fp]
 800dc76:	b1e4      	cbz	r4, 800dcb2 <__gethex+0x15a>
 800dc78:	9b00      	ldr	r3, [sp, #0]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	bf14      	ite	ne
 800dc7e:	2700      	movne	r7, #0
 800dc80:	2706      	moveq	r7, #6
 800dc82:	4638      	mov	r0, r7
 800dc84:	b009      	add	sp, #36	; 0x24
 800dc86:	ecbd 8b02 	vpop	{d8}
 800dc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc8e:	463e      	mov	r6, r7
 800dc90:	4625      	mov	r5, r4
 800dc92:	2401      	movs	r4, #1
 800dc94:	e7ca      	b.n	800dc2c <__gethex+0xd4>
 800dc96:	f04f 0900 	mov.w	r9, #0
 800dc9a:	1cb1      	adds	r1, r6, #2
 800dc9c:	e7d3      	b.n	800dc46 <__gethex+0xee>
 800dc9e:	f04f 0901 	mov.w	r9, #1
 800dca2:	e7fa      	b.n	800dc9a <__gethex+0x142>
 800dca4:	230a      	movs	r3, #10
 800dca6:	fb03 0202 	mla	r2, r3, r2, r0
 800dcaa:	3a10      	subs	r2, #16
 800dcac:	e7d4      	b.n	800dc58 <__gethex+0x100>
 800dcae:	4631      	mov	r1, r6
 800dcb0:	e7df      	b.n	800dc72 <__gethex+0x11a>
 800dcb2:	1bf3      	subs	r3, r6, r7
 800dcb4:	3b01      	subs	r3, #1
 800dcb6:	4621      	mov	r1, r4
 800dcb8:	2b07      	cmp	r3, #7
 800dcba:	dc0b      	bgt.n	800dcd4 <__gethex+0x17c>
 800dcbc:	ee18 0a10 	vmov	r0, s16
 800dcc0:	f000 fa8e 	bl	800e1e0 <_Balloc>
 800dcc4:	4604      	mov	r4, r0
 800dcc6:	b940      	cbnz	r0, 800dcda <__gethex+0x182>
 800dcc8:	4b5d      	ldr	r3, [pc, #372]	; (800de40 <__gethex+0x2e8>)
 800dcca:	4602      	mov	r2, r0
 800dccc:	21de      	movs	r1, #222	; 0xde
 800dcce:	485d      	ldr	r0, [pc, #372]	; (800de44 <__gethex+0x2ec>)
 800dcd0:	f001 f944 	bl	800ef5c <__assert_func>
 800dcd4:	3101      	adds	r1, #1
 800dcd6:	105b      	asrs	r3, r3, #1
 800dcd8:	e7ee      	b.n	800dcb8 <__gethex+0x160>
 800dcda:	f100 0914 	add.w	r9, r0, #20
 800dcde:	f04f 0b00 	mov.w	fp, #0
 800dce2:	f1ca 0301 	rsb	r3, sl, #1
 800dce6:	f8cd 9008 	str.w	r9, [sp, #8]
 800dcea:	f8cd b000 	str.w	fp, [sp]
 800dcee:	9306      	str	r3, [sp, #24]
 800dcf0:	42b7      	cmp	r7, r6
 800dcf2:	d340      	bcc.n	800dd76 <__gethex+0x21e>
 800dcf4:	9802      	ldr	r0, [sp, #8]
 800dcf6:	9b00      	ldr	r3, [sp, #0]
 800dcf8:	f840 3b04 	str.w	r3, [r0], #4
 800dcfc:	eba0 0009 	sub.w	r0, r0, r9
 800dd00:	1080      	asrs	r0, r0, #2
 800dd02:	0146      	lsls	r6, r0, #5
 800dd04:	6120      	str	r0, [r4, #16]
 800dd06:	4618      	mov	r0, r3
 800dd08:	f000 fb5c 	bl	800e3c4 <__hi0bits>
 800dd0c:	1a30      	subs	r0, r6, r0
 800dd0e:	f8d8 6000 	ldr.w	r6, [r8]
 800dd12:	42b0      	cmp	r0, r6
 800dd14:	dd63      	ble.n	800ddde <__gethex+0x286>
 800dd16:	1b87      	subs	r7, r0, r6
 800dd18:	4639      	mov	r1, r7
 800dd1a:	4620      	mov	r0, r4
 800dd1c:	f000 ff00 	bl	800eb20 <__any_on>
 800dd20:	4682      	mov	sl, r0
 800dd22:	b1a8      	cbz	r0, 800dd50 <__gethex+0x1f8>
 800dd24:	1e7b      	subs	r3, r7, #1
 800dd26:	1159      	asrs	r1, r3, #5
 800dd28:	f003 021f 	and.w	r2, r3, #31
 800dd2c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800dd30:	f04f 0a01 	mov.w	sl, #1
 800dd34:	fa0a f202 	lsl.w	r2, sl, r2
 800dd38:	420a      	tst	r2, r1
 800dd3a:	d009      	beq.n	800dd50 <__gethex+0x1f8>
 800dd3c:	4553      	cmp	r3, sl
 800dd3e:	dd05      	ble.n	800dd4c <__gethex+0x1f4>
 800dd40:	1eb9      	subs	r1, r7, #2
 800dd42:	4620      	mov	r0, r4
 800dd44:	f000 feec 	bl	800eb20 <__any_on>
 800dd48:	2800      	cmp	r0, #0
 800dd4a:	d145      	bne.n	800ddd8 <__gethex+0x280>
 800dd4c:	f04f 0a02 	mov.w	sl, #2
 800dd50:	4639      	mov	r1, r7
 800dd52:	4620      	mov	r0, r4
 800dd54:	f7ff fe98 	bl	800da88 <rshift>
 800dd58:	443d      	add	r5, r7
 800dd5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dd5e:	42ab      	cmp	r3, r5
 800dd60:	da4c      	bge.n	800ddfc <__gethex+0x2a4>
 800dd62:	ee18 0a10 	vmov	r0, s16
 800dd66:	4621      	mov	r1, r4
 800dd68:	f000 fa7a 	bl	800e260 <_Bfree>
 800dd6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dd6e:	2300      	movs	r3, #0
 800dd70:	6013      	str	r3, [r2, #0]
 800dd72:	27a3      	movs	r7, #163	; 0xa3
 800dd74:	e785      	b.n	800dc82 <__gethex+0x12a>
 800dd76:	1e73      	subs	r3, r6, #1
 800dd78:	9a05      	ldr	r2, [sp, #20]
 800dd7a:	9303      	str	r3, [sp, #12]
 800dd7c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dd80:	4293      	cmp	r3, r2
 800dd82:	d019      	beq.n	800ddb8 <__gethex+0x260>
 800dd84:	f1bb 0f20 	cmp.w	fp, #32
 800dd88:	d107      	bne.n	800dd9a <__gethex+0x242>
 800dd8a:	9b02      	ldr	r3, [sp, #8]
 800dd8c:	9a00      	ldr	r2, [sp, #0]
 800dd8e:	f843 2b04 	str.w	r2, [r3], #4
 800dd92:	9302      	str	r3, [sp, #8]
 800dd94:	2300      	movs	r3, #0
 800dd96:	9300      	str	r3, [sp, #0]
 800dd98:	469b      	mov	fp, r3
 800dd9a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800dd9e:	f7ff fec5 	bl	800db2c <__hexdig_fun>
 800dda2:	9b00      	ldr	r3, [sp, #0]
 800dda4:	f000 000f 	and.w	r0, r0, #15
 800dda8:	fa00 f00b 	lsl.w	r0, r0, fp
 800ddac:	4303      	orrs	r3, r0
 800ddae:	9300      	str	r3, [sp, #0]
 800ddb0:	f10b 0b04 	add.w	fp, fp, #4
 800ddb4:	9b03      	ldr	r3, [sp, #12]
 800ddb6:	e00d      	b.n	800ddd4 <__gethex+0x27c>
 800ddb8:	9b03      	ldr	r3, [sp, #12]
 800ddba:	9a06      	ldr	r2, [sp, #24]
 800ddbc:	4413      	add	r3, r2
 800ddbe:	42bb      	cmp	r3, r7
 800ddc0:	d3e0      	bcc.n	800dd84 <__gethex+0x22c>
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	9901      	ldr	r1, [sp, #4]
 800ddc6:	9307      	str	r3, [sp, #28]
 800ddc8:	4652      	mov	r2, sl
 800ddca:	f001 f8a5 	bl	800ef18 <strncmp>
 800ddce:	9b07      	ldr	r3, [sp, #28]
 800ddd0:	2800      	cmp	r0, #0
 800ddd2:	d1d7      	bne.n	800dd84 <__gethex+0x22c>
 800ddd4:	461e      	mov	r6, r3
 800ddd6:	e78b      	b.n	800dcf0 <__gethex+0x198>
 800ddd8:	f04f 0a03 	mov.w	sl, #3
 800dddc:	e7b8      	b.n	800dd50 <__gethex+0x1f8>
 800ddde:	da0a      	bge.n	800ddf6 <__gethex+0x29e>
 800dde0:	1a37      	subs	r7, r6, r0
 800dde2:	4621      	mov	r1, r4
 800dde4:	ee18 0a10 	vmov	r0, s16
 800dde8:	463a      	mov	r2, r7
 800ddea:	f000 fc55 	bl	800e698 <__lshift>
 800ddee:	1bed      	subs	r5, r5, r7
 800ddf0:	4604      	mov	r4, r0
 800ddf2:	f100 0914 	add.w	r9, r0, #20
 800ddf6:	f04f 0a00 	mov.w	sl, #0
 800ddfa:	e7ae      	b.n	800dd5a <__gethex+0x202>
 800ddfc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800de00:	42a8      	cmp	r0, r5
 800de02:	dd72      	ble.n	800deea <__gethex+0x392>
 800de04:	1b45      	subs	r5, r0, r5
 800de06:	42ae      	cmp	r6, r5
 800de08:	dc36      	bgt.n	800de78 <__gethex+0x320>
 800de0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800de0e:	2b02      	cmp	r3, #2
 800de10:	d02a      	beq.n	800de68 <__gethex+0x310>
 800de12:	2b03      	cmp	r3, #3
 800de14:	d02c      	beq.n	800de70 <__gethex+0x318>
 800de16:	2b01      	cmp	r3, #1
 800de18:	d11c      	bne.n	800de54 <__gethex+0x2fc>
 800de1a:	42ae      	cmp	r6, r5
 800de1c:	d11a      	bne.n	800de54 <__gethex+0x2fc>
 800de1e:	2e01      	cmp	r6, #1
 800de20:	d112      	bne.n	800de48 <__gethex+0x2f0>
 800de22:	9a04      	ldr	r2, [sp, #16]
 800de24:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800de28:	6013      	str	r3, [r2, #0]
 800de2a:	2301      	movs	r3, #1
 800de2c:	6123      	str	r3, [r4, #16]
 800de2e:	f8c9 3000 	str.w	r3, [r9]
 800de32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800de34:	2762      	movs	r7, #98	; 0x62
 800de36:	601c      	str	r4, [r3, #0]
 800de38:	e723      	b.n	800dc82 <__gethex+0x12a>
 800de3a:	bf00      	nop
 800de3c:	08011478 	.word	0x08011478
 800de40:	08011400 	.word	0x08011400
 800de44:	08011411 	.word	0x08011411
 800de48:	1e71      	subs	r1, r6, #1
 800de4a:	4620      	mov	r0, r4
 800de4c:	f000 fe68 	bl	800eb20 <__any_on>
 800de50:	2800      	cmp	r0, #0
 800de52:	d1e6      	bne.n	800de22 <__gethex+0x2ca>
 800de54:	ee18 0a10 	vmov	r0, s16
 800de58:	4621      	mov	r1, r4
 800de5a:	f000 fa01 	bl	800e260 <_Bfree>
 800de5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800de60:	2300      	movs	r3, #0
 800de62:	6013      	str	r3, [r2, #0]
 800de64:	2750      	movs	r7, #80	; 0x50
 800de66:	e70c      	b.n	800dc82 <__gethex+0x12a>
 800de68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d1f2      	bne.n	800de54 <__gethex+0x2fc>
 800de6e:	e7d8      	b.n	800de22 <__gethex+0x2ca>
 800de70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de72:	2b00      	cmp	r3, #0
 800de74:	d1d5      	bne.n	800de22 <__gethex+0x2ca>
 800de76:	e7ed      	b.n	800de54 <__gethex+0x2fc>
 800de78:	1e6f      	subs	r7, r5, #1
 800de7a:	f1ba 0f00 	cmp.w	sl, #0
 800de7e:	d131      	bne.n	800dee4 <__gethex+0x38c>
 800de80:	b127      	cbz	r7, 800de8c <__gethex+0x334>
 800de82:	4639      	mov	r1, r7
 800de84:	4620      	mov	r0, r4
 800de86:	f000 fe4b 	bl	800eb20 <__any_on>
 800de8a:	4682      	mov	sl, r0
 800de8c:	117b      	asrs	r3, r7, #5
 800de8e:	2101      	movs	r1, #1
 800de90:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800de94:	f007 071f 	and.w	r7, r7, #31
 800de98:	fa01 f707 	lsl.w	r7, r1, r7
 800de9c:	421f      	tst	r7, r3
 800de9e:	4629      	mov	r1, r5
 800dea0:	4620      	mov	r0, r4
 800dea2:	bf18      	it	ne
 800dea4:	f04a 0a02 	orrne.w	sl, sl, #2
 800dea8:	1b76      	subs	r6, r6, r5
 800deaa:	f7ff fded 	bl	800da88 <rshift>
 800deae:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800deb2:	2702      	movs	r7, #2
 800deb4:	f1ba 0f00 	cmp.w	sl, #0
 800deb8:	d048      	beq.n	800df4c <__gethex+0x3f4>
 800deba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800debe:	2b02      	cmp	r3, #2
 800dec0:	d015      	beq.n	800deee <__gethex+0x396>
 800dec2:	2b03      	cmp	r3, #3
 800dec4:	d017      	beq.n	800def6 <__gethex+0x39e>
 800dec6:	2b01      	cmp	r3, #1
 800dec8:	d109      	bne.n	800dede <__gethex+0x386>
 800deca:	f01a 0f02 	tst.w	sl, #2
 800dece:	d006      	beq.n	800dede <__gethex+0x386>
 800ded0:	f8d9 0000 	ldr.w	r0, [r9]
 800ded4:	ea4a 0a00 	orr.w	sl, sl, r0
 800ded8:	f01a 0f01 	tst.w	sl, #1
 800dedc:	d10e      	bne.n	800defc <__gethex+0x3a4>
 800dede:	f047 0710 	orr.w	r7, r7, #16
 800dee2:	e033      	b.n	800df4c <__gethex+0x3f4>
 800dee4:	f04f 0a01 	mov.w	sl, #1
 800dee8:	e7d0      	b.n	800de8c <__gethex+0x334>
 800deea:	2701      	movs	r7, #1
 800deec:	e7e2      	b.n	800deb4 <__gethex+0x35c>
 800deee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800def0:	f1c3 0301 	rsb	r3, r3, #1
 800def4:	9315      	str	r3, [sp, #84]	; 0x54
 800def6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800def8:	2b00      	cmp	r3, #0
 800defa:	d0f0      	beq.n	800dede <__gethex+0x386>
 800defc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800df00:	f104 0314 	add.w	r3, r4, #20
 800df04:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800df08:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800df0c:	f04f 0c00 	mov.w	ip, #0
 800df10:	4618      	mov	r0, r3
 800df12:	f853 2b04 	ldr.w	r2, [r3], #4
 800df16:	f1b2 3fff 	cmp.w	r2, #4294967295
 800df1a:	d01c      	beq.n	800df56 <__gethex+0x3fe>
 800df1c:	3201      	adds	r2, #1
 800df1e:	6002      	str	r2, [r0, #0]
 800df20:	2f02      	cmp	r7, #2
 800df22:	f104 0314 	add.w	r3, r4, #20
 800df26:	d13f      	bne.n	800dfa8 <__gethex+0x450>
 800df28:	f8d8 2000 	ldr.w	r2, [r8]
 800df2c:	3a01      	subs	r2, #1
 800df2e:	42b2      	cmp	r2, r6
 800df30:	d10a      	bne.n	800df48 <__gethex+0x3f0>
 800df32:	1171      	asrs	r1, r6, #5
 800df34:	2201      	movs	r2, #1
 800df36:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800df3a:	f006 061f 	and.w	r6, r6, #31
 800df3e:	fa02 f606 	lsl.w	r6, r2, r6
 800df42:	421e      	tst	r6, r3
 800df44:	bf18      	it	ne
 800df46:	4617      	movne	r7, r2
 800df48:	f047 0720 	orr.w	r7, r7, #32
 800df4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800df4e:	601c      	str	r4, [r3, #0]
 800df50:	9b04      	ldr	r3, [sp, #16]
 800df52:	601d      	str	r5, [r3, #0]
 800df54:	e695      	b.n	800dc82 <__gethex+0x12a>
 800df56:	4299      	cmp	r1, r3
 800df58:	f843 cc04 	str.w	ip, [r3, #-4]
 800df5c:	d8d8      	bhi.n	800df10 <__gethex+0x3b8>
 800df5e:	68a3      	ldr	r3, [r4, #8]
 800df60:	459b      	cmp	fp, r3
 800df62:	db19      	blt.n	800df98 <__gethex+0x440>
 800df64:	6861      	ldr	r1, [r4, #4]
 800df66:	ee18 0a10 	vmov	r0, s16
 800df6a:	3101      	adds	r1, #1
 800df6c:	f000 f938 	bl	800e1e0 <_Balloc>
 800df70:	4681      	mov	r9, r0
 800df72:	b918      	cbnz	r0, 800df7c <__gethex+0x424>
 800df74:	4b1a      	ldr	r3, [pc, #104]	; (800dfe0 <__gethex+0x488>)
 800df76:	4602      	mov	r2, r0
 800df78:	2184      	movs	r1, #132	; 0x84
 800df7a:	e6a8      	b.n	800dcce <__gethex+0x176>
 800df7c:	6922      	ldr	r2, [r4, #16]
 800df7e:	3202      	adds	r2, #2
 800df80:	f104 010c 	add.w	r1, r4, #12
 800df84:	0092      	lsls	r2, r2, #2
 800df86:	300c      	adds	r0, #12
 800df88:	f7fc ff67 	bl	800ae5a <memcpy>
 800df8c:	4621      	mov	r1, r4
 800df8e:	ee18 0a10 	vmov	r0, s16
 800df92:	f000 f965 	bl	800e260 <_Bfree>
 800df96:	464c      	mov	r4, r9
 800df98:	6923      	ldr	r3, [r4, #16]
 800df9a:	1c5a      	adds	r2, r3, #1
 800df9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dfa0:	6122      	str	r2, [r4, #16]
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	615a      	str	r2, [r3, #20]
 800dfa6:	e7bb      	b.n	800df20 <__gethex+0x3c8>
 800dfa8:	6922      	ldr	r2, [r4, #16]
 800dfaa:	455a      	cmp	r2, fp
 800dfac:	dd0b      	ble.n	800dfc6 <__gethex+0x46e>
 800dfae:	2101      	movs	r1, #1
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	f7ff fd69 	bl	800da88 <rshift>
 800dfb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dfba:	3501      	adds	r5, #1
 800dfbc:	42ab      	cmp	r3, r5
 800dfbe:	f6ff aed0 	blt.w	800dd62 <__gethex+0x20a>
 800dfc2:	2701      	movs	r7, #1
 800dfc4:	e7c0      	b.n	800df48 <__gethex+0x3f0>
 800dfc6:	f016 061f 	ands.w	r6, r6, #31
 800dfca:	d0fa      	beq.n	800dfc2 <__gethex+0x46a>
 800dfcc:	4453      	add	r3, sl
 800dfce:	f1c6 0620 	rsb	r6, r6, #32
 800dfd2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dfd6:	f000 f9f5 	bl	800e3c4 <__hi0bits>
 800dfda:	42b0      	cmp	r0, r6
 800dfdc:	dbe7      	blt.n	800dfae <__gethex+0x456>
 800dfde:	e7f0      	b.n	800dfc2 <__gethex+0x46a>
 800dfe0:	08011400 	.word	0x08011400

0800dfe4 <L_shift>:
 800dfe4:	f1c2 0208 	rsb	r2, r2, #8
 800dfe8:	0092      	lsls	r2, r2, #2
 800dfea:	b570      	push	{r4, r5, r6, lr}
 800dfec:	f1c2 0620 	rsb	r6, r2, #32
 800dff0:	6843      	ldr	r3, [r0, #4]
 800dff2:	6804      	ldr	r4, [r0, #0]
 800dff4:	fa03 f506 	lsl.w	r5, r3, r6
 800dff8:	432c      	orrs	r4, r5
 800dffa:	40d3      	lsrs	r3, r2
 800dffc:	6004      	str	r4, [r0, #0]
 800dffe:	f840 3f04 	str.w	r3, [r0, #4]!
 800e002:	4288      	cmp	r0, r1
 800e004:	d3f4      	bcc.n	800dff0 <L_shift+0xc>
 800e006:	bd70      	pop	{r4, r5, r6, pc}

0800e008 <__match>:
 800e008:	b530      	push	{r4, r5, lr}
 800e00a:	6803      	ldr	r3, [r0, #0]
 800e00c:	3301      	adds	r3, #1
 800e00e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e012:	b914      	cbnz	r4, 800e01a <__match+0x12>
 800e014:	6003      	str	r3, [r0, #0]
 800e016:	2001      	movs	r0, #1
 800e018:	bd30      	pop	{r4, r5, pc}
 800e01a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e01e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e022:	2d19      	cmp	r5, #25
 800e024:	bf98      	it	ls
 800e026:	3220      	addls	r2, #32
 800e028:	42a2      	cmp	r2, r4
 800e02a:	d0f0      	beq.n	800e00e <__match+0x6>
 800e02c:	2000      	movs	r0, #0
 800e02e:	e7f3      	b.n	800e018 <__match+0x10>

0800e030 <__hexnan>:
 800e030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e034:	680b      	ldr	r3, [r1, #0]
 800e036:	115e      	asrs	r6, r3, #5
 800e038:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e03c:	f013 031f 	ands.w	r3, r3, #31
 800e040:	b087      	sub	sp, #28
 800e042:	bf18      	it	ne
 800e044:	3604      	addne	r6, #4
 800e046:	2500      	movs	r5, #0
 800e048:	1f37      	subs	r7, r6, #4
 800e04a:	4690      	mov	r8, r2
 800e04c:	6802      	ldr	r2, [r0, #0]
 800e04e:	9301      	str	r3, [sp, #4]
 800e050:	4682      	mov	sl, r0
 800e052:	f846 5c04 	str.w	r5, [r6, #-4]
 800e056:	46b9      	mov	r9, r7
 800e058:	463c      	mov	r4, r7
 800e05a:	9502      	str	r5, [sp, #8]
 800e05c:	46ab      	mov	fp, r5
 800e05e:	7851      	ldrb	r1, [r2, #1]
 800e060:	1c53      	adds	r3, r2, #1
 800e062:	9303      	str	r3, [sp, #12]
 800e064:	b341      	cbz	r1, 800e0b8 <__hexnan+0x88>
 800e066:	4608      	mov	r0, r1
 800e068:	9205      	str	r2, [sp, #20]
 800e06a:	9104      	str	r1, [sp, #16]
 800e06c:	f7ff fd5e 	bl	800db2c <__hexdig_fun>
 800e070:	2800      	cmp	r0, #0
 800e072:	d14f      	bne.n	800e114 <__hexnan+0xe4>
 800e074:	9904      	ldr	r1, [sp, #16]
 800e076:	9a05      	ldr	r2, [sp, #20]
 800e078:	2920      	cmp	r1, #32
 800e07a:	d818      	bhi.n	800e0ae <__hexnan+0x7e>
 800e07c:	9b02      	ldr	r3, [sp, #8]
 800e07e:	459b      	cmp	fp, r3
 800e080:	dd13      	ble.n	800e0aa <__hexnan+0x7a>
 800e082:	454c      	cmp	r4, r9
 800e084:	d206      	bcs.n	800e094 <__hexnan+0x64>
 800e086:	2d07      	cmp	r5, #7
 800e088:	dc04      	bgt.n	800e094 <__hexnan+0x64>
 800e08a:	462a      	mov	r2, r5
 800e08c:	4649      	mov	r1, r9
 800e08e:	4620      	mov	r0, r4
 800e090:	f7ff ffa8 	bl	800dfe4 <L_shift>
 800e094:	4544      	cmp	r4, r8
 800e096:	d950      	bls.n	800e13a <__hexnan+0x10a>
 800e098:	2300      	movs	r3, #0
 800e09a:	f1a4 0904 	sub.w	r9, r4, #4
 800e09e:	f844 3c04 	str.w	r3, [r4, #-4]
 800e0a2:	f8cd b008 	str.w	fp, [sp, #8]
 800e0a6:	464c      	mov	r4, r9
 800e0a8:	461d      	mov	r5, r3
 800e0aa:	9a03      	ldr	r2, [sp, #12]
 800e0ac:	e7d7      	b.n	800e05e <__hexnan+0x2e>
 800e0ae:	2929      	cmp	r1, #41	; 0x29
 800e0b0:	d156      	bne.n	800e160 <__hexnan+0x130>
 800e0b2:	3202      	adds	r2, #2
 800e0b4:	f8ca 2000 	str.w	r2, [sl]
 800e0b8:	f1bb 0f00 	cmp.w	fp, #0
 800e0bc:	d050      	beq.n	800e160 <__hexnan+0x130>
 800e0be:	454c      	cmp	r4, r9
 800e0c0:	d206      	bcs.n	800e0d0 <__hexnan+0xa0>
 800e0c2:	2d07      	cmp	r5, #7
 800e0c4:	dc04      	bgt.n	800e0d0 <__hexnan+0xa0>
 800e0c6:	462a      	mov	r2, r5
 800e0c8:	4649      	mov	r1, r9
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	f7ff ff8a 	bl	800dfe4 <L_shift>
 800e0d0:	4544      	cmp	r4, r8
 800e0d2:	d934      	bls.n	800e13e <__hexnan+0x10e>
 800e0d4:	f1a8 0204 	sub.w	r2, r8, #4
 800e0d8:	4623      	mov	r3, r4
 800e0da:	f853 1b04 	ldr.w	r1, [r3], #4
 800e0de:	f842 1f04 	str.w	r1, [r2, #4]!
 800e0e2:	429f      	cmp	r7, r3
 800e0e4:	d2f9      	bcs.n	800e0da <__hexnan+0xaa>
 800e0e6:	1b3b      	subs	r3, r7, r4
 800e0e8:	f023 0303 	bic.w	r3, r3, #3
 800e0ec:	3304      	adds	r3, #4
 800e0ee:	3401      	adds	r4, #1
 800e0f0:	3e03      	subs	r6, #3
 800e0f2:	42b4      	cmp	r4, r6
 800e0f4:	bf88      	it	hi
 800e0f6:	2304      	movhi	r3, #4
 800e0f8:	4443      	add	r3, r8
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	f843 2b04 	str.w	r2, [r3], #4
 800e100:	429f      	cmp	r7, r3
 800e102:	d2fb      	bcs.n	800e0fc <__hexnan+0xcc>
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	b91b      	cbnz	r3, 800e110 <__hexnan+0xe0>
 800e108:	4547      	cmp	r7, r8
 800e10a:	d127      	bne.n	800e15c <__hexnan+0x12c>
 800e10c:	2301      	movs	r3, #1
 800e10e:	603b      	str	r3, [r7, #0]
 800e110:	2005      	movs	r0, #5
 800e112:	e026      	b.n	800e162 <__hexnan+0x132>
 800e114:	3501      	adds	r5, #1
 800e116:	2d08      	cmp	r5, #8
 800e118:	f10b 0b01 	add.w	fp, fp, #1
 800e11c:	dd06      	ble.n	800e12c <__hexnan+0xfc>
 800e11e:	4544      	cmp	r4, r8
 800e120:	d9c3      	bls.n	800e0aa <__hexnan+0x7a>
 800e122:	2300      	movs	r3, #0
 800e124:	f844 3c04 	str.w	r3, [r4, #-4]
 800e128:	2501      	movs	r5, #1
 800e12a:	3c04      	subs	r4, #4
 800e12c:	6822      	ldr	r2, [r4, #0]
 800e12e:	f000 000f 	and.w	r0, r0, #15
 800e132:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e136:	6022      	str	r2, [r4, #0]
 800e138:	e7b7      	b.n	800e0aa <__hexnan+0x7a>
 800e13a:	2508      	movs	r5, #8
 800e13c:	e7b5      	b.n	800e0aa <__hexnan+0x7a>
 800e13e:	9b01      	ldr	r3, [sp, #4]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d0df      	beq.n	800e104 <__hexnan+0xd4>
 800e144:	f04f 32ff 	mov.w	r2, #4294967295
 800e148:	f1c3 0320 	rsb	r3, r3, #32
 800e14c:	fa22 f303 	lsr.w	r3, r2, r3
 800e150:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e154:	401a      	ands	r2, r3
 800e156:	f846 2c04 	str.w	r2, [r6, #-4]
 800e15a:	e7d3      	b.n	800e104 <__hexnan+0xd4>
 800e15c:	3f04      	subs	r7, #4
 800e15e:	e7d1      	b.n	800e104 <__hexnan+0xd4>
 800e160:	2004      	movs	r0, #4
 800e162:	b007      	add	sp, #28
 800e164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e168 <_localeconv_r>:
 800e168:	4800      	ldr	r0, [pc, #0]	; (800e16c <_localeconv_r+0x4>)
 800e16a:	4770      	bx	lr
 800e16c:	200001f0 	.word	0x200001f0

0800e170 <_lseek_r>:
 800e170:	b538      	push	{r3, r4, r5, lr}
 800e172:	4d07      	ldr	r5, [pc, #28]	; (800e190 <_lseek_r+0x20>)
 800e174:	4604      	mov	r4, r0
 800e176:	4608      	mov	r0, r1
 800e178:	4611      	mov	r1, r2
 800e17a:	2200      	movs	r2, #0
 800e17c:	602a      	str	r2, [r5, #0]
 800e17e:	461a      	mov	r2, r3
 800e180:	f7f4 fa88 	bl	8002694 <_lseek>
 800e184:	1c43      	adds	r3, r0, #1
 800e186:	d102      	bne.n	800e18e <_lseek_r+0x1e>
 800e188:	682b      	ldr	r3, [r5, #0]
 800e18a:	b103      	cbz	r3, 800e18e <_lseek_r+0x1e>
 800e18c:	6023      	str	r3, [r4, #0]
 800e18e:	bd38      	pop	{r3, r4, r5, pc}
 800e190:	20008c48 	.word	0x20008c48

0800e194 <malloc>:
 800e194:	4b02      	ldr	r3, [pc, #8]	; (800e1a0 <malloc+0xc>)
 800e196:	4601      	mov	r1, r0
 800e198:	6818      	ldr	r0, [r3, #0]
 800e19a:	f7fc be95 	b.w	800aec8 <_malloc_r>
 800e19e:	bf00      	nop
 800e1a0:	20000098 	.word	0x20000098

0800e1a4 <__ascii_mbtowc>:
 800e1a4:	b082      	sub	sp, #8
 800e1a6:	b901      	cbnz	r1, 800e1aa <__ascii_mbtowc+0x6>
 800e1a8:	a901      	add	r1, sp, #4
 800e1aa:	b142      	cbz	r2, 800e1be <__ascii_mbtowc+0x1a>
 800e1ac:	b14b      	cbz	r3, 800e1c2 <__ascii_mbtowc+0x1e>
 800e1ae:	7813      	ldrb	r3, [r2, #0]
 800e1b0:	600b      	str	r3, [r1, #0]
 800e1b2:	7812      	ldrb	r2, [r2, #0]
 800e1b4:	1e10      	subs	r0, r2, #0
 800e1b6:	bf18      	it	ne
 800e1b8:	2001      	movne	r0, #1
 800e1ba:	b002      	add	sp, #8
 800e1bc:	4770      	bx	lr
 800e1be:	4610      	mov	r0, r2
 800e1c0:	e7fb      	b.n	800e1ba <__ascii_mbtowc+0x16>
 800e1c2:	f06f 0001 	mvn.w	r0, #1
 800e1c6:	e7f8      	b.n	800e1ba <__ascii_mbtowc+0x16>

0800e1c8 <__malloc_lock>:
 800e1c8:	4801      	ldr	r0, [pc, #4]	; (800e1d0 <__malloc_lock+0x8>)
 800e1ca:	f7fc be44 	b.w	800ae56 <__retarget_lock_acquire_recursive>
 800e1ce:	bf00      	nop
 800e1d0:	20008c3c 	.word	0x20008c3c

0800e1d4 <__malloc_unlock>:
 800e1d4:	4801      	ldr	r0, [pc, #4]	; (800e1dc <__malloc_unlock+0x8>)
 800e1d6:	f7fc be3f 	b.w	800ae58 <__retarget_lock_release_recursive>
 800e1da:	bf00      	nop
 800e1dc:	20008c3c 	.word	0x20008c3c

0800e1e0 <_Balloc>:
 800e1e0:	b570      	push	{r4, r5, r6, lr}
 800e1e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e1e4:	4604      	mov	r4, r0
 800e1e6:	460d      	mov	r5, r1
 800e1e8:	b976      	cbnz	r6, 800e208 <_Balloc+0x28>
 800e1ea:	2010      	movs	r0, #16
 800e1ec:	f7ff ffd2 	bl	800e194 <malloc>
 800e1f0:	4602      	mov	r2, r0
 800e1f2:	6260      	str	r0, [r4, #36]	; 0x24
 800e1f4:	b920      	cbnz	r0, 800e200 <_Balloc+0x20>
 800e1f6:	4b18      	ldr	r3, [pc, #96]	; (800e258 <_Balloc+0x78>)
 800e1f8:	4818      	ldr	r0, [pc, #96]	; (800e25c <_Balloc+0x7c>)
 800e1fa:	2166      	movs	r1, #102	; 0x66
 800e1fc:	f000 feae 	bl	800ef5c <__assert_func>
 800e200:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e204:	6006      	str	r6, [r0, #0]
 800e206:	60c6      	str	r6, [r0, #12]
 800e208:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e20a:	68f3      	ldr	r3, [r6, #12]
 800e20c:	b183      	cbz	r3, 800e230 <_Balloc+0x50>
 800e20e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e210:	68db      	ldr	r3, [r3, #12]
 800e212:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e216:	b9b8      	cbnz	r0, 800e248 <_Balloc+0x68>
 800e218:	2101      	movs	r1, #1
 800e21a:	fa01 f605 	lsl.w	r6, r1, r5
 800e21e:	1d72      	adds	r2, r6, #5
 800e220:	0092      	lsls	r2, r2, #2
 800e222:	4620      	mov	r0, r4
 800e224:	f000 fc9d 	bl	800eb62 <_calloc_r>
 800e228:	b160      	cbz	r0, 800e244 <_Balloc+0x64>
 800e22a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e22e:	e00e      	b.n	800e24e <_Balloc+0x6e>
 800e230:	2221      	movs	r2, #33	; 0x21
 800e232:	2104      	movs	r1, #4
 800e234:	4620      	mov	r0, r4
 800e236:	f000 fc94 	bl	800eb62 <_calloc_r>
 800e23a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e23c:	60f0      	str	r0, [r6, #12]
 800e23e:	68db      	ldr	r3, [r3, #12]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d1e4      	bne.n	800e20e <_Balloc+0x2e>
 800e244:	2000      	movs	r0, #0
 800e246:	bd70      	pop	{r4, r5, r6, pc}
 800e248:	6802      	ldr	r2, [r0, #0]
 800e24a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e24e:	2300      	movs	r3, #0
 800e250:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e254:	e7f7      	b.n	800e246 <_Balloc+0x66>
 800e256:	bf00      	nop
 800e258:	0801138e 	.word	0x0801138e
 800e25c:	0801148c 	.word	0x0801148c

0800e260 <_Bfree>:
 800e260:	b570      	push	{r4, r5, r6, lr}
 800e262:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e264:	4605      	mov	r5, r0
 800e266:	460c      	mov	r4, r1
 800e268:	b976      	cbnz	r6, 800e288 <_Bfree+0x28>
 800e26a:	2010      	movs	r0, #16
 800e26c:	f7ff ff92 	bl	800e194 <malloc>
 800e270:	4602      	mov	r2, r0
 800e272:	6268      	str	r0, [r5, #36]	; 0x24
 800e274:	b920      	cbnz	r0, 800e280 <_Bfree+0x20>
 800e276:	4b09      	ldr	r3, [pc, #36]	; (800e29c <_Bfree+0x3c>)
 800e278:	4809      	ldr	r0, [pc, #36]	; (800e2a0 <_Bfree+0x40>)
 800e27a:	218a      	movs	r1, #138	; 0x8a
 800e27c:	f000 fe6e 	bl	800ef5c <__assert_func>
 800e280:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e284:	6006      	str	r6, [r0, #0]
 800e286:	60c6      	str	r6, [r0, #12]
 800e288:	b13c      	cbz	r4, 800e29a <_Bfree+0x3a>
 800e28a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e28c:	6862      	ldr	r2, [r4, #4]
 800e28e:	68db      	ldr	r3, [r3, #12]
 800e290:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e294:	6021      	str	r1, [r4, #0]
 800e296:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e29a:	bd70      	pop	{r4, r5, r6, pc}
 800e29c:	0801138e 	.word	0x0801138e
 800e2a0:	0801148c 	.word	0x0801148c

0800e2a4 <__multadd>:
 800e2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2a8:	690d      	ldr	r5, [r1, #16]
 800e2aa:	4607      	mov	r7, r0
 800e2ac:	460c      	mov	r4, r1
 800e2ae:	461e      	mov	r6, r3
 800e2b0:	f101 0c14 	add.w	ip, r1, #20
 800e2b4:	2000      	movs	r0, #0
 800e2b6:	f8dc 3000 	ldr.w	r3, [ip]
 800e2ba:	b299      	uxth	r1, r3
 800e2bc:	fb02 6101 	mla	r1, r2, r1, r6
 800e2c0:	0c1e      	lsrs	r6, r3, #16
 800e2c2:	0c0b      	lsrs	r3, r1, #16
 800e2c4:	fb02 3306 	mla	r3, r2, r6, r3
 800e2c8:	b289      	uxth	r1, r1
 800e2ca:	3001      	adds	r0, #1
 800e2cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e2d0:	4285      	cmp	r5, r0
 800e2d2:	f84c 1b04 	str.w	r1, [ip], #4
 800e2d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e2da:	dcec      	bgt.n	800e2b6 <__multadd+0x12>
 800e2dc:	b30e      	cbz	r6, 800e322 <__multadd+0x7e>
 800e2de:	68a3      	ldr	r3, [r4, #8]
 800e2e0:	42ab      	cmp	r3, r5
 800e2e2:	dc19      	bgt.n	800e318 <__multadd+0x74>
 800e2e4:	6861      	ldr	r1, [r4, #4]
 800e2e6:	4638      	mov	r0, r7
 800e2e8:	3101      	adds	r1, #1
 800e2ea:	f7ff ff79 	bl	800e1e0 <_Balloc>
 800e2ee:	4680      	mov	r8, r0
 800e2f0:	b928      	cbnz	r0, 800e2fe <__multadd+0x5a>
 800e2f2:	4602      	mov	r2, r0
 800e2f4:	4b0c      	ldr	r3, [pc, #48]	; (800e328 <__multadd+0x84>)
 800e2f6:	480d      	ldr	r0, [pc, #52]	; (800e32c <__multadd+0x88>)
 800e2f8:	21b5      	movs	r1, #181	; 0xb5
 800e2fa:	f000 fe2f 	bl	800ef5c <__assert_func>
 800e2fe:	6922      	ldr	r2, [r4, #16]
 800e300:	3202      	adds	r2, #2
 800e302:	f104 010c 	add.w	r1, r4, #12
 800e306:	0092      	lsls	r2, r2, #2
 800e308:	300c      	adds	r0, #12
 800e30a:	f7fc fda6 	bl	800ae5a <memcpy>
 800e30e:	4621      	mov	r1, r4
 800e310:	4638      	mov	r0, r7
 800e312:	f7ff ffa5 	bl	800e260 <_Bfree>
 800e316:	4644      	mov	r4, r8
 800e318:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e31c:	3501      	adds	r5, #1
 800e31e:	615e      	str	r6, [r3, #20]
 800e320:	6125      	str	r5, [r4, #16]
 800e322:	4620      	mov	r0, r4
 800e324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e328:	08011400 	.word	0x08011400
 800e32c:	0801148c 	.word	0x0801148c

0800e330 <__s2b>:
 800e330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e334:	460c      	mov	r4, r1
 800e336:	4615      	mov	r5, r2
 800e338:	461f      	mov	r7, r3
 800e33a:	2209      	movs	r2, #9
 800e33c:	3308      	adds	r3, #8
 800e33e:	4606      	mov	r6, r0
 800e340:	fb93 f3f2 	sdiv	r3, r3, r2
 800e344:	2100      	movs	r1, #0
 800e346:	2201      	movs	r2, #1
 800e348:	429a      	cmp	r2, r3
 800e34a:	db09      	blt.n	800e360 <__s2b+0x30>
 800e34c:	4630      	mov	r0, r6
 800e34e:	f7ff ff47 	bl	800e1e0 <_Balloc>
 800e352:	b940      	cbnz	r0, 800e366 <__s2b+0x36>
 800e354:	4602      	mov	r2, r0
 800e356:	4b19      	ldr	r3, [pc, #100]	; (800e3bc <__s2b+0x8c>)
 800e358:	4819      	ldr	r0, [pc, #100]	; (800e3c0 <__s2b+0x90>)
 800e35a:	21ce      	movs	r1, #206	; 0xce
 800e35c:	f000 fdfe 	bl	800ef5c <__assert_func>
 800e360:	0052      	lsls	r2, r2, #1
 800e362:	3101      	adds	r1, #1
 800e364:	e7f0      	b.n	800e348 <__s2b+0x18>
 800e366:	9b08      	ldr	r3, [sp, #32]
 800e368:	6143      	str	r3, [r0, #20]
 800e36a:	2d09      	cmp	r5, #9
 800e36c:	f04f 0301 	mov.w	r3, #1
 800e370:	6103      	str	r3, [r0, #16]
 800e372:	dd16      	ble.n	800e3a2 <__s2b+0x72>
 800e374:	f104 0909 	add.w	r9, r4, #9
 800e378:	46c8      	mov	r8, r9
 800e37a:	442c      	add	r4, r5
 800e37c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e380:	4601      	mov	r1, r0
 800e382:	3b30      	subs	r3, #48	; 0x30
 800e384:	220a      	movs	r2, #10
 800e386:	4630      	mov	r0, r6
 800e388:	f7ff ff8c 	bl	800e2a4 <__multadd>
 800e38c:	45a0      	cmp	r8, r4
 800e38e:	d1f5      	bne.n	800e37c <__s2b+0x4c>
 800e390:	f1a5 0408 	sub.w	r4, r5, #8
 800e394:	444c      	add	r4, r9
 800e396:	1b2d      	subs	r5, r5, r4
 800e398:	1963      	adds	r3, r4, r5
 800e39a:	42bb      	cmp	r3, r7
 800e39c:	db04      	blt.n	800e3a8 <__s2b+0x78>
 800e39e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3a2:	340a      	adds	r4, #10
 800e3a4:	2509      	movs	r5, #9
 800e3a6:	e7f6      	b.n	800e396 <__s2b+0x66>
 800e3a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e3ac:	4601      	mov	r1, r0
 800e3ae:	3b30      	subs	r3, #48	; 0x30
 800e3b0:	220a      	movs	r2, #10
 800e3b2:	4630      	mov	r0, r6
 800e3b4:	f7ff ff76 	bl	800e2a4 <__multadd>
 800e3b8:	e7ee      	b.n	800e398 <__s2b+0x68>
 800e3ba:	bf00      	nop
 800e3bc:	08011400 	.word	0x08011400
 800e3c0:	0801148c 	.word	0x0801148c

0800e3c4 <__hi0bits>:
 800e3c4:	0c03      	lsrs	r3, r0, #16
 800e3c6:	041b      	lsls	r3, r3, #16
 800e3c8:	b9d3      	cbnz	r3, 800e400 <__hi0bits+0x3c>
 800e3ca:	0400      	lsls	r0, r0, #16
 800e3cc:	2310      	movs	r3, #16
 800e3ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e3d2:	bf04      	itt	eq
 800e3d4:	0200      	lsleq	r0, r0, #8
 800e3d6:	3308      	addeq	r3, #8
 800e3d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e3dc:	bf04      	itt	eq
 800e3de:	0100      	lsleq	r0, r0, #4
 800e3e0:	3304      	addeq	r3, #4
 800e3e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e3e6:	bf04      	itt	eq
 800e3e8:	0080      	lsleq	r0, r0, #2
 800e3ea:	3302      	addeq	r3, #2
 800e3ec:	2800      	cmp	r0, #0
 800e3ee:	db05      	blt.n	800e3fc <__hi0bits+0x38>
 800e3f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e3f4:	f103 0301 	add.w	r3, r3, #1
 800e3f8:	bf08      	it	eq
 800e3fa:	2320      	moveq	r3, #32
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	4770      	bx	lr
 800e400:	2300      	movs	r3, #0
 800e402:	e7e4      	b.n	800e3ce <__hi0bits+0xa>

0800e404 <__lo0bits>:
 800e404:	6803      	ldr	r3, [r0, #0]
 800e406:	f013 0207 	ands.w	r2, r3, #7
 800e40a:	4601      	mov	r1, r0
 800e40c:	d00b      	beq.n	800e426 <__lo0bits+0x22>
 800e40e:	07da      	lsls	r2, r3, #31
 800e410:	d423      	bmi.n	800e45a <__lo0bits+0x56>
 800e412:	0798      	lsls	r0, r3, #30
 800e414:	bf49      	itett	mi
 800e416:	085b      	lsrmi	r3, r3, #1
 800e418:	089b      	lsrpl	r3, r3, #2
 800e41a:	2001      	movmi	r0, #1
 800e41c:	600b      	strmi	r3, [r1, #0]
 800e41e:	bf5c      	itt	pl
 800e420:	600b      	strpl	r3, [r1, #0]
 800e422:	2002      	movpl	r0, #2
 800e424:	4770      	bx	lr
 800e426:	b298      	uxth	r0, r3
 800e428:	b9a8      	cbnz	r0, 800e456 <__lo0bits+0x52>
 800e42a:	0c1b      	lsrs	r3, r3, #16
 800e42c:	2010      	movs	r0, #16
 800e42e:	b2da      	uxtb	r2, r3
 800e430:	b90a      	cbnz	r2, 800e436 <__lo0bits+0x32>
 800e432:	3008      	adds	r0, #8
 800e434:	0a1b      	lsrs	r3, r3, #8
 800e436:	071a      	lsls	r2, r3, #28
 800e438:	bf04      	itt	eq
 800e43a:	091b      	lsreq	r3, r3, #4
 800e43c:	3004      	addeq	r0, #4
 800e43e:	079a      	lsls	r2, r3, #30
 800e440:	bf04      	itt	eq
 800e442:	089b      	lsreq	r3, r3, #2
 800e444:	3002      	addeq	r0, #2
 800e446:	07da      	lsls	r2, r3, #31
 800e448:	d403      	bmi.n	800e452 <__lo0bits+0x4e>
 800e44a:	085b      	lsrs	r3, r3, #1
 800e44c:	f100 0001 	add.w	r0, r0, #1
 800e450:	d005      	beq.n	800e45e <__lo0bits+0x5a>
 800e452:	600b      	str	r3, [r1, #0]
 800e454:	4770      	bx	lr
 800e456:	4610      	mov	r0, r2
 800e458:	e7e9      	b.n	800e42e <__lo0bits+0x2a>
 800e45a:	2000      	movs	r0, #0
 800e45c:	4770      	bx	lr
 800e45e:	2020      	movs	r0, #32
 800e460:	4770      	bx	lr
	...

0800e464 <__i2b>:
 800e464:	b510      	push	{r4, lr}
 800e466:	460c      	mov	r4, r1
 800e468:	2101      	movs	r1, #1
 800e46a:	f7ff feb9 	bl	800e1e0 <_Balloc>
 800e46e:	4602      	mov	r2, r0
 800e470:	b928      	cbnz	r0, 800e47e <__i2b+0x1a>
 800e472:	4b05      	ldr	r3, [pc, #20]	; (800e488 <__i2b+0x24>)
 800e474:	4805      	ldr	r0, [pc, #20]	; (800e48c <__i2b+0x28>)
 800e476:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e47a:	f000 fd6f 	bl	800ef5c <__assert_func>
 800e47e:	2301      	movs	r3, #1
 800e480:	6144      	str	r4, [r0, #20]
 800e482:	6103      	str	r3, [r0, #16]
 800e484:	bd10      	pop	{r4, pc}
 800e486:	bf00      	nop
 800e488:	08011400 	.word	0x08011400
 800e48c:	0801148c 	.word	0x0801148c

0800e490 <__multiply>:
 800e490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e494:	4691      	mov	r9, r2
 800e496:	690a      	ldr	r2, [r1, #16]
 800e498:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e49c:	429a      	cmp	r2, r3
 800e49e:	bfb8      	it	lt
 800e4a0:	460b      	movlt	r3, r1
 800e4a2:	460c      	mov	r4, r1
 800e4a4:	bfbc      	itt	lt
 800e4a6:	464c      	movlt	r4, r9
 800e4a8:	4699      	movlt	r9, r3
 800e4aa:	6927      	ldr	r7, [r4, #16]
 800e4ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e4b0:	68a3      	ldr	r3, [r4, #8]
 800e4b2:	6861      	ldr	r1, [r4, #4]
 800e4b4:	eb07 060a 	add.w	r6, r7, sl
 800e4b8:	42b3      	cmp	r3, r6
 800e4ba:	b085      	sub	sp, #20
 800e4bc:	bfb8      	it	lt
 800e4be:	3101      	addlt	r1, #1
 800e4c0:	f7ff fe8e 	bl	800e1e0 <_Balloc>
 800e4c4:	b930      	cbnz	r0, 800e4d4 <__multiply+0x44>
 800e4c6:	4602      	mov	r2, r0
 800e4c8:	4b44      	ldr	r3, [pc, #272]	; (800e5dc <__multiply+0x14c>)
 800e4ca:	4845      	ldr	r0, [pc, #276]	; (800e5e0 <__multiply+0x150>)
 800e4cc:	f240 115d 	movw	r1, #349	; 0x15d
 800e4d0:	f000 fd44 	bl	800ef5c <__assert_func>
 800e4d4:	f100 0514 	add.w	r5, r0, #20
 800e4d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e4dc:	462b      	mov	r3, r5
 800e4de:	2200      	movs	r2, #0
 800e4e0:	4543      	cmp	r3, r8
 800e4e2:	d321      	bcc.n	800e528 <__multiply+0x98>
 800e4e4:	f104 0314 	add.w	r3, r4, #20
 800e4e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e4ec:	f109 0314 	add.w	r3, r9, #20
 800e4f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e4f4:	9202      	str	r2, [sp, #8]
 800e4f6:	1b3a      	subs	r2, r7, r4
 800e4f8:	3a15      	subs	r2, #21
 800e4fa:	f022 0203 	bic.w	r2, r2, #3
 800e4fe:	3204      	adds	r2, #4
 800e500:	f104 0115 	add.w	r1, r4, #21
 800e504:	428f      	cmp	r7, r1
 800e506:	bf38      	it	cc
 800e508:	2204      	movcc	r2, #4
 800e50a:	9201      	str	r2, [sp, #4]
 800e50c:	9a02      	ldr	r2, [sp, #8]
 800e50e:	9303      	str	r3, [sp, #12]
 800e510:	429a      	cmp	r2, r3
 800e512:	d80c      	bhi.n	800e52e <__multiply+0x9e>
 800e514:	2e00      	cmp	r6, #0
 800e516:	dd03      	ble.n	800e520 <__multiply+0x90>
 800e518:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d05a      	beq.n	800e5d6 <__multiply+0x146>
 800e520:	6106      	str	r6, [r0, #16]
 800e522:	b005      	add	sp, #20
 800e524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e528:	f843 2b04 	str.w	r2, [r3], #4
 800e52c:	e7d8      	b.n	800e4e0 <__multiply+0x50>
 800e52e:	f8b3 a000 	ldrh.w	sl, [r3]
 800e532:	f1ba 0f00 	cmp.w	sl, #0
 800e536:	d024      	beq.n	800e582 <__multiply+0xf2>
 800e538:	f104 0e14 	add.w	lr, r4, #20
 800e53c:	46a9      	mov	r9, r5
 800e53e:	f04f 0c00 	mov.w	ip, #0
 800e542:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e546:	f8d9 1000 	ldr.w	r1, [r9]
 800e54a:	fa1f fb82 	uxth.w	fp, r2
 800e54e:	b289      	uxth	r1, r1
 800e550:	fb0a 110b 	mla	r1, sl, fp, r1
 800e554:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e558:	f8d9 2000 	ldr.w	r2, [r9]
 800e55c:	4461      	add	r1, ip
 800e55e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e562:	fb0a c20b 	mla	r2, sl, fp, ip
 800e566:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e56a:	b289      	uxth	r1, r1
 800e56c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e570:	4577      	cmp	r7, lr
 800e572:	f849 1b04 	str.w	r1, [r9], #4
 800e576:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e57a:	d8e2      	bhi.n	800e542 <__multiply+0xb2>
 800e57c:	9a01      	ldr	r2, [sp, #4]
 800e57e:	f845 c002 	str.w	ip, [r5, r2]
 800e582:	9a03      	ldr	r2, [sp, #12]
 800e584:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e588:	3304      	adds	r3, #4
 800e58a:	f1b9 0f00 	cmp.w	r9, #0
 800e58e:	d020      	beq.n	800e5d2 <__multiply+0x142>
 800e590:	6829      	ldr	r1, [r5, #0]
 800e592:	f104 0c14 	add.w	ip, r4, #20
 800e596:	46ae      	mov	lr, r5
 800e598:	f04f 0a00 	mov.w	sl, #0
 800e59c:	f8bc b000 	ldrh.w	fp, [ip]
 800e5a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e5a4:	fb09 220b 	mla	r2, r9, fp, r2
 800e5a8:	4492      	add	sl, r2
 800e5aa:	b289      	uxth	r1, r1
 800e5ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e5b0:	f84e 1b04 	str.w	r1, [lr], #4
 800e5b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e5b8:	f8be 1000 	ldrh.w	r1, [lr]
 800e5bc:	0c12      	lsrs	r2, r2, #16
 800e5be:	fb09 1102 	mla	r1, r9, r2, r1
 800e5c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e5c6:	4567      	cmp	r7, ip
 800e5c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e5cc:	d8e6      	bhi.n	800e59c <__multiply+0x10c>
 800e5ce:	9a01      	ldr	r2, [sp, #4]
 800e5d0:	50a9      	str	r1, [r5, r2]
 800e5d2:	3504      	adds	r5, #4
 800e5d4:	e79a      	b.n	800e50c <__multiply+0x7c>
 800e5d6:	3e01      	subs	r6, #1
 800e5d8:	e79c      	b.n	800e514 <__multiply+0x84>
 800e5da:	bf00      	nop
 800e5dc:	08011400 	.word	0x08011400
 800e5e0:	0801148c 	.word	0x0801148c

0800e5e4 <__pow5mult>:
 800e5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5e8:	4615      	mov	r5, r2
 800e5ea:	f012 0203 	ands.w	r2, r2, #3
 800e5ee:	4606      	mov	r6, r0
 800e5f0:	460f      	mov	r7, r1
 800e5f2:	d007      	beq.n	800e604 <__pow5mult+0x20>
 800e5f4:	4c25      	ldr	r4, [pc, #148]	; (800e68c <__pow5mult+0xa8>)
 800e5f6:	3a01      	subs	r2, #1
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e5fe:	f7ff fe51 	bl	800e2a4 <__multadd>
 800e602:	4607      	mov	r7, r0
 800e604:	10ad      	asrs	r5, r5, #2
 800e606:	d03d      	beq.n	800e684 <__pow5mult+0xa0>
 800e608:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e60a:	b97c      	cbnz	r4, 800e62c <__pow5mult+0x48>
 800e60c:	2010      	movs	r0, #16
 800e60e:	f7ff fdc1 	bl	800e194 <malloc>
 800e612:	4602      	mov	r2, r0
 800e614:	6270      	str	r0, [r6, #36]	; 0x24
 800e616:	b928      	cbnz	r0, 800e624 <__pow5mult+0x40>
 800e618:	4b1d      	ldr	r3, [pc, #116]	; (800e690 <__pow5mult+0xac>)
 800e61a:	481e      	ldr	r0, [pc, #120]	; (800e694 <__pow5mult+0xb0>)
 800e61c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e620:	f000 fc9c 	bl	800ef5c <__assert_func>
 800e624:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e628:	6004      	str	r4, [r0, #0]
 800e62a:	60c4      	str	r4, [r0, #12]
 800e62c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e630:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e634:	b94c      	cbnz	r4, 800e64a <__pow5mult+0x66>
 800e636:	f240 2171 	movw	r1, #625	; 0x271
 800e63a:	4630      	mov	r0, r6
 800e63c:	f7ff ff12 	bl	800e464 <__i2b>
 800e640:	2300      	movs	r3, #0
 800e642:	f8c8 0008 	str.w	r0, [r8, #8]
 800e646:	4604      	mov	r4, r0
 800e648:	6003      	str	r3, [r0, #0]
 800e64a:	f04f 0900 	mov.w	r9, #0
 800e64e:	07eb      	lsls	r3, r5, #31
 800e650:	d50a      	bpl.n	800e668 <__pow5mult+0x84>
 800e652:	4639      	mov	r1, r7
 800e654:	4622      	mov	r2, r4
 800e656:	4630      	mov	r0, r6
 800e658:	f7ff ff1a 	bl	800e490 <__multiply>
 800e65c:	4639      	mov	r1, r7
 800e65e:	4680      	mov	r8, r0
 800e660:	4630      	mov	r0, r6
 800e662:	f7ff fdfd 	bl	800e260 <_Bfree>
 800e666:	4647      	mov	r7, r8
 800e668:	106d      	asrs	r5, r5, #1
 800e66a:	d00b      	beq.n	800e684 <__pow5mult+0xa0>
 800e66c:	6820      	ldr	r0, [r4, #0]
 800e66e:	b938      	cbnz	r0, 800e680 <__pow5mult+0x9c>
 800e670:	4622      	mov	r2, r4
 800e672:	4621      	mov	r1, r4
 800e674:	4630      	mov	r0, r6
 800e676:	f7ff ff0b 	bl	800e490 <__multiply>
 800e67a:	6020      	str	r0, [r4, #0]
 800e67c:	f8c0 9000 	str.w	r9, [r0]
 800e680:	4604      	mov	r4, r0
 800e682:	e7e4      	b.n	800e64e <__pow5mult+0x6a>
 800e684:	4638      	mov	r0, r7
 800e686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e68a:	bf00      	nop
 800e68c:	080115d8 	.word	0x080115d8
 800e690:	0801138e 	.word	0x0801138e
 800e694:	0801148c 	.word	0x0801148c

0800e698 <__lshift>:
 800e698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e69c:	460c      	mov	r4, r1
 800e69e:	6849      	ldr	r1, [r1, #4]
 800e6a0:	6923      	ldr	r3, [r4, #16]
 800e6a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e6a6:	68a3      	ldr	r3, [r4, #8]
 800e6a8:	4607      	mov	r7, r0
 800e6aa:	4691      	mov	r9, r2
 800e6ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e6b0:	f108 0601 	add.w	r6, r8, #1
 800e6b4:	42b3      	cmp	r3, r6
 800e6b6:	db0b      	blt.n	800e6d0 <__lshift+0x38>
 800e6b8:	4638      	mov	r0, r7
 800e6ba:	f7ff fd91 	bl	800e1e0 <_Balloc>
 800e6be:	4605      	mov	r5, r0
 800e6c0:	b948      	cbnz	r0, 800e6d6 <__lshift+0x3e>
 800e6c2:	4602      	mov	r2, r0
 800e6c4:	4b2a      	ldr	r3, [pc, #168]	; (800e770 <__lshift+0xd8>)
 800e6c6:	482b      	ldr	r0, [pc, #172]	; (800e774 <__lshift+0xdc>)
 800e6c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e6cc:	f000 fc46 	bl	800ef5c <__assert_func>
 800e6d0:	3101      	adds	r1, #1
 800e6d2:	005b      	lsls	r3, r3, #1
 800e6d4:	e7ee      	b.n	800e6b4 <__lshift+0x1c>
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	f100 0114 	add.w	r1, r0, #20
 800e6dc:	f100 0210 	add.w	r2, r0, #16
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	4553      	cmp	r3, sl
 800e6e4:	db37      	blt.n	800e756 <__lshift+0xbe>
 800e6e6:	6920      	ldr	r0, [r4, #16]
 800e6e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e6ec:	f104 0314 	add.w	r3, r4, #20
 800e6f0:	f019 091f 	ands.w	r9, r9, #31
 800e6f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e6f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e6fc:	d02f      	beq.n	800e75e <__lshift+0xc6>
 800e6fe:	f1c9 0e20 	rsb	lr, r9, #32
 800e702:	468a      	mov	sl, r1
 800e704:	f04f 0c00 	mov.w	ip, #0
 800e708:	681a      	ldr	r2, [r3, #0]
 800e70a:	fa02 f209 	lsl.w	r2, r2, r9
 800e70e:	ea42 020c 	orr.w	r2, r2, ip
 800e712:	f84a 2b04 	str.w	r2, [sl], #4
 800e716:	f853 2b04 	ldr.w	r2, [r3], #4
 800e71a:	4298      	cmp	r0, r3
 800e71c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e720:	d8f2      	bhi.n	800e708 <__lshift+0x70>
 800e722:	1b03      	subs	r3, r0, r4
 800e724:	3b15      	subs	r3, #21
 800e726:	f023 0303 	bic.w	r3, r3, #3
 800e72a:	3304      	adds	r3, #4
 800e72c:	f104 0215 	add.w	r2, r4, #21
 800e730:	4290      	cmp	r0, r2
 800e732:	bf38      	it	cc
 800e734:	2304      	movcc	r3, #4
 800e736:	f841 c003 	str.w	ip, [r1, r3]
 800e73a:	f1bc 0f00 	cmp.w	ip, #0
 800e73e:	d001      	beq.n	800e744 <__lshift+0xac>
 800e740:	f108 0602 	add.w	r6, r8, #2
 800e744:	3e01      	subs	r6, #1
 800e746:	4638      	mov	r0, r7
 800e748:	612e      	str	r6, [r5, #16]
 800e74a:	4621      	mov	r1, r4
 800e74c:	f7ff fd88 	bl	800e260 <_Bfree>
 800e750:	4628      	mov	r0, r5
 800e752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e756:	f842 0f04 	str.w	r0, [r2, #4]!
 800e75a:	3301      	adds	r3, #1
 800e75c:	e7c1      	b.n	800e6e2 <__lshift+0x4a>
 800e75e:	3904      	subs	r1, #4
 800e760:	f853 2b04 	ldr.w	r2, [r3], #4
 800e764:	f841 2f04 	str.w	r2, [r1, #4]!
 800e768:	4298      	cmp	r0, r3
 800e76a:	d8f9      	bhi.n	800e760 <__lshift+0xc8>
 800e76c:	e7ea      	b.n	800e744 <__lshift+0xac>
 800e76e:	bf00      	nop
 800e770:	08011400 	.word	0x08011400
 800e774:	0801148c 	.word	0x0801148c

0800e778 <__mcmp>:
 800e778:	b530      	push	{r4, r5, lr}
 800e77a:	6902      	ldr	r2, [r0, #16]
 800e77c:	690c      	ldr	r4, [r1, #16]
 800e77e:	1b12      	subs	r2, r2, r4
 800e780:	d10e      	bne.n	800e7a0 <__mcmp+0x28>
 800e782:	f100 0314 	add.w	r3, r0, #20
 800e786:	3114      	adds	r1, #20
 800e788:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e78c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e790:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e794:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e798:	42a5      	cmp	r5, r4
 800e79a:	d003      	beq.n	800e7a4 <__mcmp+0x2c>
 800e79c:	d305      	bcc.n	800e7aa <__mcmp+0x32>
 800e79e:	2201      	movs	r2, #1
 800e7a0:	4610      	mov	r0, r2
 800e7a2:	bd30      	pop	{r4, r5, pc}
 800e7a4:	4283      	cmp	r3, r0
 800e7a6:	d3f3      	bcc.n	800e790 <__mcmp+0x18>
 800e7a8:	e7fa      	b.n	800e7a0 <__mcmp+0x28>
 800e7aa:	f04f 32ff 	mov.w	r2, #4294967295
 800e7ae:	e7f7      	b.n	800e7a0 <__mcmp+0x28>

0800e7b0 <__mdiff>:
 800e7b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7b4:	460c      	mov	r4, r1
 800e7b6:	4606      	mov	r6, r0
 800e7b8:	4611      	mov	r1, r2
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	4690      	mov	r8, r2
 800e7be:	f7ff ffdb 	bl	800e778 <__mcmp>
 800e7c2:	1e05      	subs	r5, r0, #0
 800e7c4:	d110      	bne.n	800e7e8 <__mdiff+0x38>
 800e7c6:	4629      	mov	r1, r5
 800e7c8:	4630      	mov	r0, r6
 800e7ca:	f7ff fd09 	bl	800e1e0 <_Balloc>
 800e7ce:	b930      	cbnz	r0, 800e7de <__mdiff+0x2e>
 800e7d0:	4b3a      	ldr	r3, [pc, #232]	; (800e8bc <__mdiff+0x10c>)
 800e7d2:	4602      	mov	r2, r0
 800e7d4:	f240 2132 	movw	r1, #562	; 0x232
 800e7d8:	4839      	ldr	r0, [pc, #228]	; (800e8c0 <__mdiff+0x110>)
 800e7da:	f000 fbbf 	bl	800ef5c <__assert_func>
 800e7de:	2301      	movs	r3, #1
 800e7e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e7e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7e8:	bfa4      	itt	ge
 800e7ea:	4643      	movge	r3, r8
 800e7ec:	46a0      	movge	r8, r4
 800e7ee:	4630      	mov	r0, r6
 800e7f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e7f4:	bfa6      	itte	ge
 800e7f6:	461c      	movge	r4, r3
 800e7f8:	2500      	movge	r5, #0
 800e7fa:	2501      	movlt	r5, #1
 800e7fc:	f7ff fcf0 	bl	800e1e0 <_Balloc>
 800e800:	b920      	cbnz	r0, 800e80c <__mdiff+0x5c>
 800e802:	4b2e      	ldr	r3, [pc, #184]	; (800e8bc <__mdiff+0x10c>)
 800e804:	4602      	mov	r2, r0
 800e806:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e80a:	e7e5      	b.n	800e7d8 <__mdiff+0x28>
 800e80c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e810:	6926      	ldr	r6, [r4, #16]
 800e812:	60c5      	str	r5, [r0, #12]
 800e814:	f104 0914 	add.w	r9, r4, #20
 800e818:	f108 0514 	add.w	r5, r8, #20
 800e81c:	f100 0e14 	add.w	lr, r0, #20
 800e820:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e824:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e828:	f108 0210 	add.w	r2, r8, #16
 800e82c:	46f2      	mov	sl, lr
 800e82e:	2100      	movs	r1, #0
 800e830:	f859 3b04 	ldr.w	r3, [r9], #4
 800e834:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e838:	fa1f f883 	uxth.w	r8, r3
 800e83c:	fa11 f18b 	uxtah	r1, r1, fp
 800e840:	0c1b      	lsrs	r3, r3, #16
 800e842:	eba1 0808 	sub.w	r8, r1, r8
 800e846:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e84a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e84e:	fa1f f888 	uxth.w	r8, r8
 800e852:	1419      	asrs	r1, r3, #16
 800e854:	454e      	cmp	r6, r9
 800e856:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e85a:	f84a 3b04 	str.w	r3, [sl], #4
 800e85e:	d8e7      	bhi.n	800e830 <__mdiff+0x80>
 800e860:	1b33      	subs	r3, r6, r4
 800e862:	3b15      	subs	r3, #21
 800e864:	f023 0303 	bic.w	r3, r3, #3
 800e868:	3304      	adds	r3, #4
 800e86a:	3415      	adds	r4, #21
 800e86c:	42a6      	cmp	r6, r4
 800e86e:	bf38      	it	cc
 800e870:	2304      	movcc	r3, #4
 800e872:	441d      	add	r5, r3
 800e874:	4473      	add	r3, lr
 800e876:	469e      	mov	lr, r3
 800e878:	462e      	mov	r6, r5
 800e87a:	4566      	cmp	r6, ip
 800e87c:	d30e      	bcc.n	800e89c <__mdiff+0xec>
 800e87e:	f10c 0203 	add.w	r2, ip, #3
 800e882:	1b52      	subs	r2, r2, r5
 800e884:	f022 0203 	bic.w	r2, r2, #3
 800e888:	3d03      	subs	r5, #3
 800e88a:	45ac      	cmp	ip, r5
 800e88c:	bf38      	it	cc
 800e88e:	2200      	movcc	r2, #0
 800e890:	441a      	add	r2, r3
 800e892:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e896:	b17b      	cbz	r3, 800e8b8 <__mdiff+0x108>
 800e898:	6107      	str	r7, [r0, #16]
 800e89a:	e7a3      	b.n	800e7e4 <__mdiff+0x34>
 800e89c:	f856 8b04 	ldr.w	r8, [r6], #4
 800e8a0:	fa11 f288 	uxtah	r2, r1, r8
 800e8a4:	1414      	asrs	r4, r2, #16
 800e8a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e8aa:	b292      	uxth	r2, r2
 800e8ac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e8b0:	f84e 2b04 	str.w	r2, [lr], #4
 800e8b4:	1421      	asrs	r1, r4, #16
 800e8b6:	e7e0      	b.n	800e87a <__mdiff+0xca>
 800e8b8:	3f01      	subs	r7, #1
 800e8ba:	e7ea      	b.n	800e892 <__mdiff+0xe2>
 800e8bc:	08011400 	.word	0x08011400
 800e8c0:	0801148c 	.word	0x0801148c

0800e8c4 <__ulp>:
 800e8c4:	b082      	sub	sp, #8
 800e8c6:	ed8d 0b00 	vstr	d0, [sp]
 800e8ca:	9b01      	ldr	r3, [sp, #4]
 800e8cc:	4912      	ldr	r1, [pc, #72]	; (800e918 <__ulp+0x54>)
 800e8ce:	4019      	ands	r1, r3
 800e8d0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e8d4:	2900      	cmp	r1, #0
 800e8d6:	dd05      	ble.n	800e8e4 <__ulp+0x20>
 800e8d8:	2200      	movs	r2, #0
 800e8da:	460b      	mov	r3, r1
 800e8dc:	ec43 2b10 	vmov	d0, r2, r3
 800e8e0:	b002      	add	sp, #8
 800e8e2:	4770      	bx	lr
 800e8e4:	4249      	negs	r1, r1
 800e8e6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e8ea:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e8ee:	f04f 0200 	mov.w	r2, #0
 800e8f2:	f04f 0300 	mov.w	r3, #0
 800e8f6:	da04      	bge.n	800e902 <__ulp+0x3e>
 800e8f8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e8fc:	fa41 f300 	asr.w	r3, r1, r0
 800e900:	e7ec      	b.n	800e8dc <__ulp+0x18>
 800e902:	f1a0 0114 	sub.w	r1, r0, #20
 800e906:	291e      	cmp	r1, #30
 800e908:	bfda      	itte	le
 800e90a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e90e:	fa20 f101 	lsrle.w	r1, r0, r1
 800e912:	2101      	movgt	r1, #1
 800e914:	460a      	mov	r2, r1
 800e916:	e7e1      	b.n	800e8dc <__ulp+0x18>
 800e918:	7ff00000 	.word	0x7ff00000

0800e91c <__b2d>:
 800e91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e91e:	6905      	ldr	r5, [r0, #16]
 800e920:	f100 0714 	add.w	r7, r0, #20
 800e924:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e928:	1f2e      	subs	r6, r5, #4
 800e92a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e92e:	4620      	mov	r0, r4
 800e930:	f7ff fd48 	bl	800e3c4 <__hi0bits>
 800e934:	f1c0 0320 	rsb	r3, r0, #32
 800e938:	280a      	cmp	r0, #10
 800e93a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e9b8 <__b2d+0x9c>
 800e93e:	600b      	str	r3, [r1, #0]
 800e940:	dc14      	bgt.n	800e96c <__b2d+0x50>
 800e942:	f1c0 0e0b 	rsb	lr, r0, #11
 800e946:	fa24 f10e 	lsr.w	r1, r4, lr
 800e94a:	42b7      	cmp	r7, r6
 800e94c:	ea41 030c 	orr.w	r3, r1, ip
 800e950:	bf34      	ite	cc
 800e952:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e956:	2100      	movcs	r1, #0
 800e958:	3015      	adds	r0, #21
 800e95a:	fa04 f000 	lsl.w	r0, r4, r0
 800e95e:	fa21 f10e 	lsr.w	r1, r1, lr
 800e962:	ea40 0201 	orr.w	r2, r0, r1
 800e966:	ec43 2b10 	vmov	d0, r2, r3
 800e96a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e96c:	42b7      	cmp	r7, r6
 800e96e:	bf3a      	itte	cc
 800e970:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e974:	f1a5 0608 	subcc.w	r6, r5, #8
 800e978:	2100      	movcs	r1, #0
 800e97a:	380b      	subs	r0, #11
 800e97c:	d017      	beq.n	800e9ae <__b2d+0x92>
 800e97e:	f1c0 0c20 	rsb	ip, r0, #32
 800e982:	fa04 f500 	lsl.w	r5, r4, r0
 800e986:	42be      	cmp	r6, r7
 800e988:	fa21 f40c 	lsr.w	r4, r1, ip
 800e98c:	ea45 0504 	orr.w	r5, r5, r4
 800e990:	bf8c      	ite	hi
 800e992:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e996:	2400      	movls	r4, #0
 800e998:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e99c:	fa01 f000 	lsl.w	r0, r1, r0
 800e9a0:	fa24 f40c 	lsr.w	r4, r4, ip
 800e9a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e9a8:	ea40 0204 	orr.w	r2, r0, r4
 800e9ac:	e7db      	b.n	800e966 <__b2d+0x4a>
 800e9ae:	ea44 030c 	orr.w	r3, r4, ip
 800e9b2:	460a      	mov	r2, r1
 800e9b4:	e7d7      	b.n	800e966 <__b2d+0x4a>
 800e9b6:	bf00      	nop
 800e9b8:	3ff00000 	.word	0x3ff00000

0800e9bc <__d2b>:
 800e9bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e9c0:	4689      	mov	r9, r1
 800e9c2:	2101      	movs	r1, #1
 800e9c4:	ec57 6b10 	vmov	r6, r7, d0
 800e9c8:	4690      	mov	r8, r2
 800e9ca:	f7ff fc09 	bl	800e1e0 <_Balloc>
 800e9ce:	4604      	mov	r4, r0
 800e9d0:	b930      	cbnz	r0, 800e9e0 <__d2b+0x24>
 800e9d2:	4602      	mov	r2, r0
 800e9d4:	4b25      	ldr	r3, [pc, #148]	; (800ea6c <__d2b+0xb0>)
 800e9d6:	4826      	ldr	r0, [pc, #152]	; (800ea70 <__d2b+0xb4>)
 800e9d8:	f240 310a 	movw	r1, #778	; 0x30a
 800e9dc:	f000 fabe 	bl	800ef5c <__assert_func>
 800e9e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e9e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e9e8:	bb35      	cbnz	r5, 800ea38 <__d2b+0x7c>
 800e9ea:	2e00      	cmp	r6, #0
 800e9ec:	9301      	str	r3, [sp, #4]
 800e9ee:	d028      	beq.n	800ea42 <__d2b+0x86>
 800e9f0:	4668      	mov	r0, sp
 800e9f2:	9600      	str	r6, [sp, #0]
 800e9f4:	f7ff fd06 	bl	800e404 <__lo0bits>
 800e9f8:	9900      	ldr	r1, [sp, #0]
 800e9fa:	b300      	cbz	r0, 800ea3e <__d2b+0x82>
 800e9fc:	9a01      	ldr	r2, [sp, #4]
 800e9fe:	f1c0 0320 	rsb	r3, r0, #32
 800ea02:	fa02 f303 	lsl.w	r3, r2, r3
 800ea06:	430b      	orrs	r3, r1
 800ea08:	40c2      	lsrs	r2, r0
 800ea0a:	6163      	str	r3, [r4, #20]
 800ea0c:	9201      	str	r2, [sp, #4]
 800ea0e:	9b01      	ldr	r3, [sp, #4]
 800ea10:	61a3      	str	r3, [r4, #24]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	bf14      	ite	ne
 800ea16:	2202      	movne	r2, #2
 800ea18:	2201      	moveq	r2, #1
 800ea1a:	6122      	str	r2, [r4, #16]
 800ea1c:	b1d5      	cbz	r5, 800ea54 <__d2b+0x98>
 800ea1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ea22:	4405      	add	r5, r0
 800ea24:	f8c9 5000 	str.w	r5, [r9]
 800ea28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ea2c:	f8c8 0000 	str.w	r0, [r8]
 800ea30:	4620      	mov	r0, r4
 800ea32:	b003      	add	sp, #12
 800ea34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ea3c:	e7d5      	b.n	800e9ea <__d2b+0x2e>
 800ea3e:	6161      	str	r1, [r4, #20]
 800ea40:	e7e5      	b.n	800ea0e <__d2b+0x52>
 800ea42:	a801      	add	r0, sp, #4
 800ea44:	f7ff fcde 	bl	800e404 <__lo0bits>
 800ea48:	9b01      	ldr	r3, [sp, #4]
 800ea4a:	6163      	str	r3, [r4, #20]
 800ea4c:	2201      	movs	r2, #1
 800ea4e:	6122      	str	r2, [r4, #16]
 800ea50:	3020      	adds	r0, #32
 800ea52:	e7e3      	b.n	800ea1c <__d2b+0x60>
 800ea54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ea58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ea5c:	f8c9 0000 	str.w	r0, [r9]
 800ea60:	6918      	ldr	r0, [r3, #16]
 800ea62:	f7ff fcaf 	bl	800e3c4 <__hi0bits>
 800ea66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ea6a:	e7df      	b.n	800ea2c <__d2b+0x70>
 800ea6c:	08011400 	.word	0x08011400
 800ea70:	0801148c 	.word	0x0801148c

0800ea74 <__ratio>:
 800ea74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea78:	4688      	mov	r8, r1
 800ea7a:	4669      	mov	r1, sp
 800ea7c:	4681      	mov	r9, r0
 800ea7e:	f7ff ff4d 	bl	800e91c <__b2d>
 800ea82:	a901      	add	r1, sp, #4
 800ea84:	4640      	mov	r0, r8
 800ea86:	ec55 4b10 	vmov	r4, r5, d0
 800ea8a:	f7ff ff47 	bl	800e91c <__b2d>
 800ea8e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea92:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ea96:	eba3 0c02 	sub.w	ip, r3, r2
 800ea9a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ea9e:	1a9b      	subs	r3, r3, r2
 800eaa0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800eaa4:	ec51 0b10 	vmov	r0, r1, d0
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	bfd6      	itet	le
 800eaac:	460a      	movle	r2, r1
 800eaae:	462a      	movgt	r2, r5
 800eab0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800eab4:	468b      	mov	fp, r1
 800eab6:	462f      	mov	r7, r5
 800eab8:	bfd4      	ite	le
 800eaba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800eabe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800eac2:	4620      	mov	r0, r4
 800eac4:	ee10 2a10 	vmov	r2, s0
 800eac8:	465b      	mov	r3, fp
 800eaca:	4639      	mov	r1, r7
 800eacc:	f7f1 fece 	bl	800086c <__aeabi_ddiv>
 800ead0:	ec41 0b10 	vmov	d0, r0, r1
 800ead4:	b003      	add	sp, #12
 800ead6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eada <__copybits>:
 800eada:	3901      	subs	r1, #1
 800eadc:	b570      	push	{r4, r5, r6, lr}
 800eade:	1149      	asrs	r1, r1, #5
 800eae0:	6914      	ldr	r4, [r2, #16]
 800eae2:	3101      	adds	r1, #1
 800eae4:	f102 0314 	add.w	r3, r2, #20
 800eae8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800eaec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800eaf0:	1f05      	subs	r5, r0, #4
 800eaf2:	42a3      	cmp	r3, r4
 800eaf4:	d30c      	bcc.n	800eb10 <__copybits+0x36>
 800eaf6:	1aa3      	subs	r3, r4, r2
 800eaf8:	3b11      	subs	r3, #17
 800eafa:	f023 0303 	bic.w	r3, r3, #3
 800eafe:	3211      	adds	r2, #17
 800eb00:	42a2      	cmp	r2, r4
 800eb02:	bf88      	it	hi
 800eb04:	2300      	movhi	r3, #0
 800eb06:	4418      	add	r0, r3
 800eb08:	2300      	movs	r3, #0
 800eb0a:	4288      	cmp	r0, r1
 800eb0c:	d305      	bcc.n	800eb1a <__copybits+0x40>
 800eb0e:	bd70      	pop	{r4, r5, r6, pc}
 800eb10:	f853 6b04 	ldr.w	r6, [r3], #4
 800eb14:	f845 6f04 	str.w	r6, [r5, #4]!
 800eb18:	e7eb      	b.n	800eaf2 <__copybits+0x18>
 800eb1a:	f840 3b04 	str.w	r3, [r0], #4
 800eb1e:	e7f4      	b.n	800eb0a <__copybits+0x30>

0800eb20 <__any_on>:
 800eb20:	f100 0214 	add.w	r2, r0, #20
 800eb24:	6900      	ldr	r0, [r0, #16]
 800eb26:	114b      	asrs	r3, r1, #5
 800eb28:	4298      	cmp	r0, r3
 800eb2a:	b510      	push	{r4, lr}
 800eb2c:	db11      	blt.n	800eb52 <__any_on+0x32>
 800eb2e:	dd0a      	ble.n	800eb46 <__any_on+0x26>
 800eb30:	f011 011f 	ands.w	r1, r1, #31
 800eb34:	d007      	beq.n	800eb46 <__any_on+0x26>
 800eb36:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800eb3a:	fa24 f001 	lsr.w	r0, r4, r1
 800eb3e:	fa00 f101 	lsl.w	r1, r0, r1
 800eb42:	428c      	cmp	r4, r1
 800eb44:	d10b      	bne.n	800eb5e <__any_on+0x3e>
 800eb46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eb4a:	4293      	cmp	r3, r2
 800eb4c:	d803      	bhi.n	800eb56 <__any_on+0x36>
 800eb4e:	2000      	movs	r0, #0
 800eb50:	bd10      	pop	{r4, pc}
 800eb52:	4603      	mov	r3, r0
 800eb54:	e7f7      	b.n	800eb46 <__any_on+0x26>
 800eb56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eb5a:	2900      	cmp	r1, #0
 800eb5c:	d0f5      	beq.n	800eb4a <__any_on+0x2a>
 800eb5e:	2001      	movs	r0, #1
 800eb60:	e7f6      	b.n	800eb50 <__any_on+0x30>

0800eb62 <_calloc_r>:
 800eb62:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb64:	fba1 2402 	umull	r2, r4, r1, r2
 800eb68:	b94c      	cbnz	r4, 800eb7e <_calloc_r+0x1c>
 800eb6a:	4611      	mov	r1, r2
 800eb6c:	9201      	str	r2, [sp, #4]
 800eb6e:	f7fc f9ab 	bl	800aec8 <_malloc_r>
 800eb72:	9a01      	ldr	r2, [sp, #4]
 800eb74:	4605      	mov	r5, r0
 800eb76:	b930      	cbnz	r0, 800eb86 <_calloc_r+0x24>
 800eb78:	4628      	mov	r0, r5
 800eb7a:	b003      	add	sp, #12
 800eb7c:	bd30      	pop	{r4, r5, pc}
 800eb7e:	220c      	movs	r2, #12
 800eb80:	6002      	str	r2, [r0, #0]
 800eb82:	2500      	movs	r5, #0
 800eb84:	e7f8      	b.n	800eb78 <_calloc_r+0x16>
 800eb86:	4621      	mov	r1, r4
 800eb88:	f7fc f975 	bl	800ae76 <memset>
 800eb8c:	e7f4      	b.n	800eb78 <_calloc_r+0x16>
	...

0800eb90 <_free_r>:
 800eb90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb92:	2900      	cmp	r1, #0
 800eb94:	d044      	beq.n	800ec20 <_free_r+0x90>
 800eb96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb9a:	9001      	str	r0, [sp, #4]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	f1a1 0404 	sub.w	r4, r1, #4
 800eba2:	bfb8      	it	lt
 800eba4:	18e4      	addlt	r4, r4, r3
 800eba6:	f7ff fb0f 	bl	800e1c8 <__malloc_lock>
 800ebaa:	4a1e      	ldr	r2, [pc, #120]	; (800ec24 <_free_r+0x94>)
 800ebac:	9801      	ldr	r0, [sp, #4]
 800ebae:	6813      	ldr	r3, [r2, #0]
 800ebb0:	b933      	cbnz	r3, 800ebc0 <_free_r+0x30>
 800ebb2:	6063      	str	r3, [r4, #4]
 800ebb4:	6014      	str	r4, [r2, #0]
 800ebb6:	b003      	add	sp, #12
 800ebb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ebbc:	f7ff bb0a 	b.w	800e1d4 <__malloc_unlock>
 800ebc0:	42a3      	cmp	r3, r4
 800ebc2:	d908      	bls.n	800ebd6 <_free_r+0x46>
 800ebc4:	6825      	ldr	r5, [r4, #0]
 800ebc6:	1961      	adds	r1, r4, r5
 800ebc8:	428b      	cmp	r3, r1
 800ebca:	bf01      	itttt	eq
 800ebcc:	6819      	ldreq	r1, [r3, #0]
 800ebce:	685b      	ldreq	r3, [r3, #4]
 800ebd0:	1949      	addeq	r1, r1, r5
 800ebd2:	6021      	streq	r1, [r4, #0]
 800ebd4:	e7ed      	b.n	800ebb2 <_free_r+0x22>
 800ebd6:	461a      	mov	r2, r3
 800ebd8:	685b      	ldr	r3, [r3, #4]
 800ebda:	b10b      	cbz	r3, 800ebe0 <_free_r+0x50>
 800ebdc:	42a3      	cmp	r3, r4
 800ebde:	d9fa      	bls.n	800ebd6 <_free_r+0x46>
 800ebe0:	6811      	ldr	r1, [r2, #0]
 800ebe2:	1855      	adds	r5, r2, r1
 800ebe4:	42a5      	cmp	r5, r4
 800ebe6:	d10b      	bne.n	800ec00 <_free_r+0x70>
 800ebe8:	6824      	ldr	r4, [r4, #0]
 800ebea:	4421      	add	r1, r4
 800ebec:	1854      	adds	r4, r2, r1
 800ebee:	42a3      	cmp	r3, r4
 800ebf0:	6011      	str	r1, [r2, #0]
 800ebf2:	d1e0      	bne.n	800ebb6 <_free_r+0x26>
 800ebf4:	681c      	ldr	r4, [r3, #0]
 800ebf6:	685b      	ldr	r3, [r3, #4]
 800ebf8:	6053      	str	r3, [r2, #4]
 800ebfa:	4421      	add	r1, r4
 800ebfc:	6011      	str	r1, [r2, #0]
 800ebfe:	e7da      	b.n	800ebb6 <_free_r+0x26>
 800ec00:	d902      	bls.n	800ec08 <_free_r+0x78>
 800ec02:	230c      	movs	r3, #12
 800ec04:	6003      	str	r3, [r0, #0]
 800ec06:	e7d6      	b.n	800ebb6 <_free_r+0x26>
 800ec08:	6825      	ldr	r5, [r4, #0]
 800ec0a:	1961      	adds	r1, r4, r5
 800ec0c:	428b      	cmp	r3, r1
 800ec0e:	bf04      	itt	eq
 800ec10:	6819      	ldreq	r1, [r3, #0]
 800ec12:	685b      	ldreq	r3, [r3, #4]
 800ec14:	6063      	str	r3, [r4, #4]
 800ec16:	bf04      	itt	eq
 800ec18:	1949      	addeq	r1, r1, r5
 800ec1a:	6021      	streq	r1, [r4, #0]
 800ec1c:	6054      	str	r4, [r2, #4]
 800ec1e:	e7ca      	b.n	800ebb6 <_free_r+0x26>
 800ec20:	b003      	add	sp, #12
 800ec22:	bd30      	pop	{r4, r5, pc}
 800ec24:	20008c40 	.word	0x20008c40

0800ec28 <__ssputs_r>:
 800ec28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec2c:	688e      	ldr	r6, [r1, #8]
 800ec2e:	429e      	cmp	r6, r3
 800ec30:	4682      	mov	sl, r0
 800ec32:	460c      	mov	r4, r1
 800ec34:	4690      	mov	r8, r2
 800ec36:	461f      	mov	r7, r3
 800ec38:	d838      	bhi.n	800ecac <__ssputs_r+0x84>
 800ec3a:	898a      	ldrh	r2, [r1, #12]
 800ec3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ec40:	d032      	beq.n	800eca8 <__ssputs_r+0x80>
 800ec42:	6825      	ldr	r5, [r4, #0]
 800ec44:	6909      	ldr	r1, [r1, #16]
 800ec46:	eba5 0901 	sub.w	r9, r5, r1
 800ec4a:	6965      	ldr	r5, [r4, #20]
 800ec4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec54:	3301      	adds	r3, #1
 800ec56:	444b      	add	r3, r9
 800ec58:	106d      	asrs	r5, r5, #1
 800ec5a:	429d      	cmp	r5, r3
 800ec5c:	bf38      	it	cc
 800ec5e:	461d      	movcc	r5, r3
 800ec60:	0553      	lsls	r3, r2, #21
 800ec62:	d531      	bpl.n	800ecc8 <__ssputs_r+0xa0>
 800ec64:	4629      	mov	r1, r5
 800ec66:	f7fc f92f 	bl	800aec8 <_malloc_r>
 800ec6a:	4606      	mov	r6, r0
 800ec6c:	b950      	cbnz	r0, 800ec84 <__ssputs_r+0x5c>
 800ec6e:	230c      	movs	r3, #12
 800ec70:	f8ca 3000 	str.w	r3, [sl]
 800ec74:	89a3      	ldrh	r3, [r4, #12]
 800ec76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec7a:	81a3      	strh	r3, [r4, #12]
 800ec7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec84:	6921      	ldr	r1, [r4, #16]
 800ec86:	464a      	mov	r2, r9
 800ec88:	f7fc f8e7 	bl	800ae5a <memcpy>
 800ec8c:	89a3      	ldrh	r3, [r4, #12]
 800ec8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ec92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec96:	81a3      	strh	r3, [r4, #12]
 800ec98:	6126      	str	r6, [r4, #16]
 800ec9a:	6165      	str	r5, [r4, #20]
 800ec9c:	444e      	add	r6, r9
 800ec9e:	eba5 0509 	sub.w	r5, r5, r9
 800eca2:	6026      	str	r6, [r4, #0]
 800eca4:	60a5      	str	r5, [r4, #8]
 800eca6:	463e      	mov	r6, r7
 800eca8:	42be      	cmp	r6, r7
 800ecaa:	d900      	bls.n	800ecae <__ssputs_r+0x86>
 800ecac:	463e      	mov	r6, r7
 800ecae:	6820      	ldr	r0, [r4, #0]
 800ecb0:	4632      	mov	r2, r6
 800ecb2:	4641      	mov	r1, r8
 800ecb4:	f000 f982 	bl	800efbc <memmove>
 800ecb8:	68a3      	ldr	r3, [r4, #8]
 800ecba:	1b9b      	subs	r3, r3, r6
 800ecbc:	60a3      	str	r3, [r4, #8]
 800ecbe:	6823      	ldr	r3, [r4, #0]
 800ecc0:	4433      	add	r3, r6
 800ecc2:	6023      	str	r3, [r4, #0]
 800ecc4:	2000      	movs	r0, #0
 800ecc6:	e7db      	b.n	800ec80 <__ssputs_r+0x58>
 800ecc8:	462a      	mov	r2, r5
 800ecca:	f000 f991 	bl	800eff0 <_realloc_r>
 800ecce:	4606      	mov	r6, r0
 800ecd0:	2800      	cmp	r0, #0
 800ecd2:	d1e1      	bne.n	800ec98 <__ssputs_r+0x70>
 800ecd4:	6921      	ldr	r1, [r4, #16]
 800ecd6:	4650      	mov	r0, sl
 800ecd8:	f7ff ff5a 	bl	800eb90 <_free_r>
 800ecdc:	e7c7      	b.n	800ec6e <__ssputs_r+0x46>
	...

0800ece0 <_svfiprintf_r>:
 800ece0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ece4:	4698      	mov	r8, r3
 800ece6:	898b      	ldrh	r3, [r1, #12]
 800ece8:	061b      	lsls	r3, r3, #24
 800ecea:	b09d      	sub	sp, #116	; 0x74
 800ecec:	4607      	mov	r7, r0
 800ecee:	460d      	mov	r5, r1
 800ecf0:	4614      	mov	r4, r2
 800ecf2:	d50e      	bpl.n	800ed12 <_svfiprintf_r+0x32>
 800ecf4:	690b      	ldr	r3, [r1, #16]
 800ecf6:	b963      	cbnz	r3, 800ed12 <_svfiprintf_r+0x32>
 800ecf8:	2140      	movs	r1, #64	; 0x40
 800ecfa:	f7fc f8e5 	bl	800aec8 <_malloc_r>
 800ecfe:	6028      	str	r0, [r5, #0]
 800ed00:	6128      	str	r0, [r5, #16]
 800ed02:	b920      	cbnz	r0, 800ed0e <_svfiprintf_r+0x2e>
 800ed04:	230c      	movs	r3, #12
 800ed06:	603b      	str	r3, [r7, #0]
 800ed08:	f04f 30ff 	mov.w	r0, #4294967295
 800ed0c:	e0d1      	b.n	800eeb2 <_svfiprintf_r+0x1d2>
 800ed0e:	2340      	movs	r3, #64	; 0x40
 800ed10:	616b      	str	r3, [r5, #20]
 800ed12:	2300      	movs	r3, #0
 800ed14:	9309      	str	r3, [sp, #36]	; 0x24
 800ed16:	2320      	movs	r3, #32
 800ed18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed20:	2330      	movs	r3, #48	; 0x30
 800ed22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800eecc <_svfiprintf_r+0x1ec>
 800ed26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed2a:	f04f 0901 	mov.w	r9, #1
 800ed2e:	4623      	mov	r3, r4
 800ed30:	469a      	mov	sl, r3
 800ed32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed36:	b10a      	cbz	r2, 800ed3c <_svfiprintf_r+0x5c>
 800ed38:	2a25      	cmp	r2, #37	; 0x25
 800ed3a:	d1f9      	bne.n	800ed30 <_svfiprintf_r+0x50>
 800ed3c:	ebba 0b04 	subs.w	fp, sl, r4
 800ed40:	d00b      	beq.n	800ed5a <_svfiprintf_r+0x7a>
 800ed42:	465b      	mov	r3, fp
 800ed44:	4622      	mov	r2, r4
 800ed46:	4629      	mov	r1, r5
 800ed48:	4638      	mov	r0, r7
 800ed4a:	f7ff ff6d 	bl	800ec28 <__ssputs_r>
 800ed4e:	3001      	adds	r0, #1
 800ed50:	f000 80aa 	beq.w	800eea8 <_svfiprintf_r+0x1c8>
 800ed54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed56:	445a      	add	r2, fp
 800ed58:	9209      	str	r2, [sp, #36]	; 0x24
 800ed5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	f000 80a2 	beq.w	800eea8 <_svfiprintf_r+0x1c8>
 800ed64:	2300      	movs	r3, #0
 800ed66:	f04f 32ff 	mov.w	r2, #4294967295
 800ed6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed6e:	f10a 0a01 	add.w	sl, sl, #1
 800ed72:	9304      	str	r3, [sp, #16]
 800ed74:	9307      	str	r3, [sp, #28]
 800ed76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed7a:	931a      	str	r3, [sp, #104]	; 0x68
 800ed7c:	4654      	mov	r4, sl
 800ed7e:	2205      	movs	r2, #5
 800ed80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed84:	4851      	ldr	r0, [pc, #324]	; (800eecc <_svfiprintf_r+0x1ec>)
 800ed86:	f7f1 fa3b 	bl	8000200 <memchr>
 800ed8a:	9a04      	ldr	r2, [sp, #16]
 800ed8c:	b9d8      	cbnz	r0, 800edc6 <_svfiprintf_r+0xe6>
 800ed8e:	06d0      	lsls	r0, r2, #27
 800ed90:	bf44      	itt	mi
 800ed92:	2320      	movmi	r3, #32
 800ed94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed98:	0711      	lsls	r1, r2, #28
 800ed9a:	bf44      	itt	mi
 800ed9c:	232b      	movmi	r3, #43	; 0x2b
 800ed9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eda2:	f89a 3000 	ldrb.w	r3, [sl]
 800eda6:	2b2a      	cmp	r3, #42	; 0x2a
 800eda8:	d015      	beq.n	800edd6 <_svfiprintf_r+0xf6>
 800edaa:	9a07      	ldr	r2, [sp, #28]
 800edac:	4654      	mov	r4, sl
 800edae:	2000      	movs	r0, #0
 800edb0:	f04f 0c0a 	mov.w	ip, #10
 800edb4:	4621      	mov	r1, r4
 800edb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edba:	3b30      	subs	r3, #48	; 0x30
 800edbc:	2b09      	cmp	r3, #9
 800edbe:	d94e      	bls.n	800ee5e <_svfiprintf_r+0x17e>
 800edc0:	b1b0      	cbz	r0, 800edf0 <_svfiprintf_r+0x110>
 800edc2:	9207      	str	r2, [sp, #28]
 800edc4:	e014      	b.n	800edf0 <_svfiprintf_r+0x110>
 800edc6:	eba0 0308 	sub.w	r3, r0, r8
 800edca:	fa09 f303 	lsl.w	r3, r9, r3
 800edce:	4313      	orrs	r3, r2
 800edd0:	9304      	str	r3, [sp, #16]
 800edd2:	46a2      	mov	sl, r4
 800edd4:	e7d2      	b.n	800ed7c <_svfiprintf_r+0x9c>
 800edd6:	9b03      	ldr	r3, [sp, #12]
 800edd8:	1d19      	adds	r1, r3, #4
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	9103      	str	r1, [sp, #12]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	bfbb      	ittet	lt
 800ede2:	425b      	neglt	r3, r3
 800ede4:	f042 0202 	orrlt.w	r2, r2, #2
 800ede8:	9307      	strge	r3, [sp, #28]
 800edea:	9307      	strlt	r3, [sp, #28]
 800edec:	bfb8      	it	lt
 800edee:	9204      	strlt	r2, [sp, #16]
 800edf0:	7823      	ldrb	r3, [r4, #0]
 800edf2:	2b2e      	cmp	r3, #46	; 0x2e
 800edf4:	d10c      	bne.n	800ee10 <_svfiprintf_r+0x130>
 800edf6:	7863      	ldrb	r3, [r4, #1]
 800edf8:	2b2a      	cmp	r3, #42	; 0x2a
 800edfa:	d135      	bne.n	800ee68 <_svfiprintf_r+0x188>
 800edfc:	9b03      	ldr	r3, [sp, #12]
 800edfe:	1d1a      	adds	r2, r3, #4
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	9203      	str	r2, [sp, #12]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	bfb8      	it	lt
 800ee08:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee0c:	3402      	adds	r4, #2
 800ee0e:	9305      	str	r3, [sp, #20]
 800ee10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800eedc <_svfiprintf_r+0x1fc>
 800ee14:	7821      	ldrb	r1, [r4, #0]
 800ee16:	2203      	movs	r2, #3
 800ee18:	4650      	mov	r0, sl
 800ee1a:	f7f1 f9f1 	bl	8000200 <memchr>
 800ee1e:	b140      	cbz	r0, 800ee32 <_svfiprintf_r+0x152>
 800ee20:	2340      	movs	r3, #64	; 0x40
 800ee22:	eba0 000a 	sub.w	r0, r0, sl
 800ee26:	fa03 f000 	lsl.w	r0, r3, r0
 800ee2a:	9b04      	ldr	r3, [sp, #16]
 800ee2c:	4303      	orrs	r3, r0
 800ee2e:	3401      	adds	r4, #1
 800ee30:	9304      	str	r3, [sp, #16]
 800ee32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee36:	4826      	ldr	r0, [pc, #152]	; (800eed0 <_svfiprintf_r+0x1f0>)
 800ee38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee3c:	2206      	movs	r2, #6
 800ee3e:	f7f1 f9df 	bl	8000200 <memchr>
 800ee42:	2800      	cmp	r0, #0
 800ee44:	d038      	beq.n	800eeb8 <_svfiprintf_r+0x1d8>
 800ee46:	4b23      	ldr	r3, [pc, #140]	; (800eed4 <_svfiprintf_r+0x1f4>)
 800ee48:	bb1b      	cbnz	r3, 800ee92 <_svfiprintf_r+0x1b2>
 800ee4a:	9b03      	ldr	r3, [sp, #12]
 800ee4c:	3307      	adds	r3, #7
 800ee4e:	f023 0307 	bic.w	r3, r3, #7
 800ee52:	3308      	adds	r3, #8
 800ee54:	9303      	str	r3, [sp, #12]
 800ee56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee58:	4433      	add	r3, r6
 800ee5a:	9309      	str	r3, [sp, #36]	; 0x24
 800ee5c:	e767      	b.n	800ed2e <_svfiprintf_r+0x4e>
 800ee5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee62:	460c      	mov	r4, r1
 800ee64:	2001      	movs	r0, #1
 800ee66:	e7a5      	b.n	800edb4 <_svfiprintf_r+0xd4>
 800ee68:	2300      	movs	r3, #0
 800ee6a:	3401      	adds	r4, #1
 800ee6c:	9305      	str	r3, [sp, #20]
 800ee6e:	4619      	mov	r1, r3
 800ee70:	f04f 0c0a 	mov.w	ip, #10
 800ee74:	4620      	mov	r0, r4
 800ee76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee7a:	3a30      	subs	r2, #48	; 0x30
 800ee7c:	2a09      	cmp	r2, #9
 800ee7e:	d903      	bls.n	800ee88 <_svfiprintf_r+0x1a8>
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d0c5      	beq.n	800ee10 <_svfiprintf_r+0x130>
 800ee84:	9105      	str	r1, [sp, #20]
 800ee86:	e7c3      	b.n	800ee10 <_svfiprintf_r+0x130>
 800ee88:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee8c:	4604      	mov	r4, r0
 800ee8e:	2301      	movs	r3, #1
 800ee90:	e7f0      	b.n	800ee74 <_svfiprintf_r+0x194>
 800ee92:	ab03      	add	r3, sp, #12
 800ee94:	9300      	str	r3, [sp, #0]
 800ee96:	462a      	mov	r2, r5
 800ee98:	4b0f      	ldr	r3, [pc, #60]	; (800eed8 <_svfiprintf_r+0x1f8>)
 800ee9a:	a904      	add	r1, sp, #16
 800ee9c:	4638      	mov	r0, r7
 800ee9e:	f7fc f927 	bl	800b0f0 <_printf_float>
 800eea2:	1c42      	adds	r2, r0, #1
 800eea4:	4606      	mov	r6, r0
 800eea6:	d1d6      	bne.n	800ee56 <_svfiprintf_r+0x176>
 800eea8:	89ab      	ldrh	r3, [r5, #12]
 800eeaa:	065b      	lsls	r3, r3, #25
 800eeac:	f53f af2c 	bmi.w	800ed08 <_svfiprintf_r+0x28>
 800eeb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eeb2:	b01d      	add	sp, #116	; 0x74
 800eeb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeb8:	ab03      	add	r3, sp, #12
 800eeba:	9300      	str	r3, [sp, #0]
 800eebc:	462a      	mov	r2, r5
 800eebe:	4b06      	ldr	r3, [pc, #24]	; (800eed8 <_svfiprintf_r+0x1f8>)
 800eec0:	a904      	add	r1, sp, #16
 800eec2:	4638      	mov	r0, r7
 800eec4:	f7fc fbb8 	bl	800b638 <_printf_i>
 800eec8:	e7eb      	b.n	800eea2 <_svfiprintf_r+0x1c2>
 800eeca:	bf00      	nop
 800eecc:	080115e4 	.word	0x080115e4
 800eed0:	080115ee 	.word	0x080115ee
 800eed4:	0800b0f1 	.word	0x0800b0f1
 800eed8:	0800ec29 	.word	0x0800ec29
 800eedc:	080115ea 	.word	0x080115ea

0800eee0 <_read_r>:
 800eee0:	b538      	push	{r3, r4, r5, lr}
 800eee2:	4d07      	ldr	r5, [pc, #28]	; (800ef00 <_read_r+0x20>)
 800eee4:	4604      	mov	r4, r0
 800eee6:	4608      	mov	r0, r1
 800eee8:	4611      	mov	r1, r2
 800eeea:	2200      	movs	r2, #0
 800eeec:	602a      	str	r2, [r5, #0]
 800eeee:	461a      	mov	r2, r3
 800eef0:	f7f3 fb8c 	bl	800260c <_read>
 800eef4:	1c43      	adds	r3, r0, #1
 800eef6:	d102      	bne.n	800eefe <_read_r+0x1e>
 800eef8:	682b      	ldr	r3, [r5, #0]
 800eefa:	b103      	cbz	r3, 800eefe <_read_r+0x1e>
 800eefc:	6023      	str	r3, [r4, #0]
 800eefe:	bd38      	pop	{r3, r4, r5, pc}
 800ef00:	20008c48 	.word	0x20008c48
 800ef04:	00000000 	.word	0x00000000

0800ef08 <nan>:
 800ef08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ef10 <nan+0x8>
 800ef0c:	4770      	bx	lr
 800ef0e:	bf00      	nop
 800ef10:	00000000 	.word	0x00000000
 800ef14:	7ff80000 	.word	0x7ff80000

0800ef18 <strncmp>:
 800ef18:	b510      	push	{r4, lr}
 800ef1a:	b17a      	cbz	r2, 800ef3c <strncmp+0x24>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	3901      	subs	r1, #1
 800ef20:	1884      	adds	r4, r0, r2
 800ef22:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ef26:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ef2a:	4290      	cmp	r0, r2
 800ef2c:	d101      	bne.n	800ef32 <strncmp+0x1a>
 800ef2e:	42a3      	cmp	r3, r4
 800ef30:	d101      	bne.n	800ef36 <strncmp+0x1e>
 800ef32:	1a80      	subs	r0, r0, r2
 800ef34:	bd10      	pop	{r4, pc}
 800ef36:	2800      	cmp	r0, #0
 800ef38:	d1f3      	bne.n	800ef22 <strncmp+0xa>
 800ef3a:	e7fa      	b.n	800ef32 <strncmp+0x1a>
 800ef3c:	4610      	mov	r0, r2
 800ef3e:	e7f9      	b.n	800ef34 <strncmp+0x1c>

0800ef40 <__ascii_wctomb>:
 800ef40:	b149      	cbz	r1, 800ef56 <__ascii_wctomb+0x16>
 800ef42:	2aff      	cmp	r2, #255	; 0xff
 800ef44:	bf85      	ittet	hi
 800ef46:	238a      	movhi	r3, #138	; 0x8a
 800ef48:	6003      	strhi	r3, [r0, #0]
 800ef4a:	700a      	strbls	r2, [r1, #0]
 800ef4c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ef50:	bf98      	it	ls
 800ef52:	2001      	movls	r0, #1
 800ef54:	4770      	bx	lr
 800ef56:	4608      	mov	r0, r1
 800ef58:	4770      	bx	lr
	...

0800ef5c <__assert_func>:
 800ef5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ef5e:	4614      	mov	r4, r2
 800ef60:	461a      	mov	r2, r3
 800ef62:	4b09      	ldr	r3, [pc, #36]	; (800ef88 <__assert_func+0x2c>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	4605      	mov	r5, r0
 800ef68:	68d8      	ldr	r0, [r3, #12]
 800ef6a:	b14c      	cbz	r4, 800ef80 <__assert_func+0x24>
 800ef6c:	4b07      	ldr	r3, [pc, #28]	; (800ef8c <__assert_func+0x30>)
 800ef6e:	9100      	str	r1, [sp, #0]
 800ef70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ef74:	4906      	ldr	r1, [pc, #24]	; (800ef90 <__assert_func+0x34>)
 800ef76:	462b      	mov	r3, r5
 800ef78:	f000 f80e 	bl	800ef98 <fiprintf>
 800ef7c:	f000 fa80 	bl	800f480 <abort>
 800ef80:	4b04      	ldr	r3, [pc, #16]	; (800ef94 <__assert_func+0x38>)
 800ef82:	461c      	mov	r4, r3
 800ef84:	e7f3      	b.n	800ef6e <__assert_func+0x12>
 800ef86:	bf00      	nop
 800ef88:	20000098 	.word	0x20000098
 800ef8c:	080115f5 	.word	0x080115f5
 800ef90:	08011602 	.word	0x08011602
 800ef94:	08011630 	.word	0x08011630

0800ef98 <fiprintf>:
 800ef98:	b40e      	push	{r1, r2, r3}
 800ef9a:	b503      	push	{r0, r1, lr}
 800ef9c:	4601      	mov	r1, r0
 800ef9e:	ab03      	add	r3, sp, #12
 800efa0:	4805      	ldr	r0, [pc, #20]	; (800efb8 <fiprintf+0x20>)
 800efa2:	f853 2b04 	ldr.w	r2, [r3], #4
 800efa6:	6800      	ldr	r0, [r0, #0]
 800efa8:	9301      	str	r3, [sp, #4]
 800efaa:	f000 f879 	bl	800f0a0 <_vfiprintf_r>
 800efae:	b002      	add	sp, #8
 800efb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800efb4:	b003      	add	sp, #12
 800efb6:	4770      	bx	lr
 800efb8:	20000098 	.word	0x20000098

0800efbc <memmove>:
 800efbc:	4288      	cmp	r0, r1
 800efbe:	b510      	push	{r4, lr}
 800efc0:	eb01 0402 	add.w	r4, r1, r2
 800efc4:	d902      	bls.n	800efcc <memmove+0x10>
 800efc6:	4284      	cmp	r4, r0
 800efc8:	4623      	mov	r3, r4
 800efca:	d807      	bhi.n	800efdc <memmove+0x20>
 800efcc:	1e43      	subs	r3, r0, #1
 800efce:	42a1      	cmp	r1, r4
 800efd0:	d008      	beq.n	800efe4 <memmove+0x28>
 800efd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800efda:	e7f8      	b.n	800efce <memmove+0x12>
 800efdc:	4402      	add	r2, r0
 800efde:	4601      	mov	r1, r0
 800efe0:	428a      	cmp	r2, r1
 800efe2:	d100      	bne.n	800efe6 <memmove+0x2a>
 800efe4:	bd10      	pop	{r4, pc}
 800efe6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800efea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800efee:	e7f7      	b.n	800efe0 <memmove+0x24>

0800eff0 <_realloc_r>:
 800eff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eff4:	4680      	mov	r8, r0
 800eff6:	4614      	mov	r4, r2
 800eff8:	460e      	mov	r6, r1
 800effa:	b921      	cbnz	r1, 800f006 <_realloc_r+0x16>
 800effc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f000:	4611      	mov	r1, r2
 800f002:	f7fb bf61 	b.w	800aec8 <_malloc_r>
 800f006:	b92a      	cbnz	r2, 800f014 <_realloc_r+0x24>
 800f008:	f7ff fdc2 	bl	800eb90 <_free_r>
 800f00c:	4625      	mov	r5, r4
 800f00e:	4628      	mov	r0, r5
 800f010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f014:	f000 faa0 	bl	800f558 <_malloc_usable_size_r>
 800f018:	4284      	cmp	r4, r0
 800f01a:	4607      	mov	r7, r0
 800f01c:	d802      	bhi.n	800f024 <_realloc_r+0x34>
 800f01e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f022:	d812      	bhi.n	800f04a <_realloc_r+0x5a>
 800f024:	4621      	mov	r1, r4
 800f026:	4640      	mov	r0, r8
 800f028:	f7fb ff4e 	bl	800aec8 <_malloc_r>
 800f02c:	4605      	mov	r5, r0
 800f02e:	2800      	cmp	r0, #0
 800f030:	d0ed      	beq.n	800f00e <_realloc_r+0x1e>
 800f032:	42bc      	cmp	r4, r7
 800f034:	4622      	mov	r2, r4
 800f036:	4631      	mov	r1, r6
 800f038:	bf28      	it	cs
 800f03a:	463a      	movcs	r2, r7
 800f03c:	f7fb ff0d 	bl	800ae5a <memcpy>
 800f040:	4631      	mov	r1, r6
 800f042:	4640      	mov	r0, r8
 800f044:	f7ff fda4 	bl	800eb90 <_free_r>
 800f048:	e7e1      	b.n	800f00e <_realloc_r+0x1e>
 800f04a:	4635      	mov	r5, r6
 800f04c:	e7df      	b.n	800f00e <_realloc_r+0x1e>

0800f04e <__sfputc_r>:
 800f04e:	6893      	ldr	r3, [r2, #8]
 800f050:	3b01      	subs	r3, #1
 800f052:	2b00      	cmp	r3, #0
 800f054:	b410      	push	{r4}
 800f056:	6093      	str	r3, [r2, #8]
 800f058:	da08      	bge.n	800f06c <__sfputc_r+0x1e>
 800f05a:	6994      	ldr	r4, [r2, #24]
 800f05c:	42a3      	cmp	r3, r4
 800f05e:	db01      	blt.n	800f064 <__sfputc_r+0x16>
 800f060:	290a      	cmp	r1, #10
 800f062:	d103      	bne.n	800f06c <__sfputc_r+0x1e>
 800f064:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f068:	f000 b94a 	b.w	800f300 <__swbuf_r>
 800f06c:	6813      	ldr	r3, [r2, #0]
 800f06e:	1c58      	adds	r0, r3, #1
 800f070:	6010      	str	r0, [r2, #0]
 800f072:	7019      	strb	r1, [r3, #0]
 800f074:	4608      	mov	r0, r1
 800f076:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f07a:	4770      	bx	lr

0800f07c <__sfputs_r>:
 800f07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f07e:	4606      	mov	r6, r0
 800f080:	460f      	mov	r7, r1
 800f082:	4614      	mov	r4, r2
 800f084:	18d5      	adds	r5, r2, r3
 800f086:	42ac      	cmp	r4, r5
 800f088:	d101      	bne.n	800f08e <__sfputs_r+0x12>
 800f08a:	2000      	movs	r0, #0
 800f08c:	e007      	b.n	800f09e <__sfputs_r+0x22>
 800f08e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f092:	463a      	mov	r2, r7
 800f094:	4630      	mov	r0, r6
 800f096:	f7ff ffda 	bl	800f04e <__sfputc_r>
 800f09a:	1c43      	adds	r3, r0, #1
 800f09c:	d1f3      	bne.n	800f086 <__sfputs_r+0xa>
 800f09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f0a0 <_vfiprintf_r>:
 800f0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0a4:	460d      	mov	r5, r1
 800f0a6:	b09d      	sub	sp, #116	; 0x74
 800f0a8:	4614      	mov	r4, r2
 800f0aa:	4698      	mov	r8, r3
 800f0ac:	4606      	mov	r6, r0
 800f0ae:	b118      	cbz	r0, 800f0b8 <_vfiprintf_r+0x18>
 800f0b0:	6983      	ldr	r3, [r0, #24]
 800f0b2:	b90b      	cbnz	r3, 800f0b8 <_vfiprintf_r+0x18>
 800f0b4:	f7fb fe0c 	bl	800acd0 <__sinit>
 800f0b8:	4b89      	ldr	r3, [pc, #548]	; (800f2e0 <_vfiprintf_r+0x240>)
 800f0ba:	429d      	cmp	r5, r3
 800f0bc:	d11b      	bne.n	800f0f6 <_vfiprintf_r+0x56>
 800f0be:	6875      	ldr	r5, [r6, #4]
 800f0c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0c2:	07d9      	lsls	r1, r3, #31
 800f0c4:	d405      	bmi.n	800f0d2 <_vfiprintf_r+0x32>
 800f0c6:	89ab      	ldrh	r3, [r5, #12]
 800f0c8:	059a      	lsls	r2, r3, #22
 800f0ca:	d402      	bmi.n	800f0d2 <_vfiprintf_r+0x32>
 800f0cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0ce:	f7fb fec2 	bl	800ae56 <__retarget_lock_acquire_recursive>
 800f0d2:	89ab      	ldrh	r3, [r5, #12]
 800f0d4:	071b      	lsls	r3, r3, #28
 800f0d6:	d501      	bpl.n	800f0dc <_vfiprintf_r+0x3c>
 800f0d8:	692b      	ldr	r3, [r5, #16]
 800f0da:	b9eb      	cbnz	r3, 800f118 <_vfiprintf_r+0x78>
 800f0dc:	4629      	mov	r1, r5
 800f0de:	4630      	mov	r0, r6
 800f0e0:	f000 f960 	bl	800f3a4 <__swsetup_r>
 800f0e4:	b1c0      	cbz	r0, 800f118 <_vfiprintf_r+0x78>
 800f0e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0e8:	07dc      	lsls	r4, r3, #31
 800f0ea:	d50e      	bpl.n	800f10a <_vfiprintf_r+0x6a>
 800f0ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f0f0:	b01d      	add	sp, #116	; 0x74
 800f0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0f6:	4b7b      	ldr	r3, [pc, #492]	; (800f2e4 <_vfiprintf_r+0x244>)
 800f0f8:	429d      	cmp	r5, r3
 800f0fa:	d101      	bne.n	800f100 <_vfiprintf_r+0x60>
 800f0fc:	68b5      	ldr	r5, [r6, #8]
 800f0fe:	e7df      	b.n	800f0c0 <_vfiprintf_r+0x20>
 800f100:	4b79      	ldr	r3, [pc, #484]	; (800f2e8 <_vfiprintf_r+0x248>)
 800f102:	429d      	cmp	r5, r3
 800f104:	bf08      	it	eq
 800f106:	68f5      	ldreq	r5, [r6, #12]
 800f108:	e7da      	b.n	800f0c0 <_vfiprintf_r+0x20>
 800f10a:	89ab      	ldrh	r3, [r5, #12]
 800f10c:	0598      	lsls	r0, r3, #22
 800f10e:	d4ed      	bmi.n	800f0ec <_vfiprintf_r+0x4c>
 800f110:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f112:	f7fb fea1 	bl	800ae58 <__retarget_lock_release_recursive>
 800f116:	e7e9      	b.n	800f0ec <_vfiprintf_r+0x4c>
 800f118:	2300      	movs	r3, #0
 800f11a:	9309      	str	r3, [sp, #36]	; 0x24
 800f11c:	2320      	movs	r3, #32
 800f11e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f122:	f8cd 800c 	str.w	r8, [sp, #12]
 800f126:	2330      	movs	r3, #48	; 0x30
 800f128:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f2ec <_vfiprintf_r+0x24c>
 800f12c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f130:	f04f 0901 	mov.w	r9, #1
 800f134:	4623      	mov	r3, r4
 800f136:	469a      	mov	sl, r3
 800f138:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f13c:	b10a      	cbz	r2, 800f142 <_vfiprintf_r+0xa2>
 800f13e:	2a25      	cmp	r2, #37	; 0x25
 800f140:	d1f9      	bne.n	800f136 <_vfiprintf_r+0x96>
 800f142:	ebba 0b04 	subs.w	fp, sl, r4
 800f146:	d00b      	beq.n	800f160 <_vfiprintf_r+0xc0>
 800f148:	465b      	mov	r3, fp
 800f14a:	4622      	mov	r2, r4
 800f14c:	4629      	mov	r1, r5
 800f14e:	4630      	mov	r0, r6
 800f150:	f7ff ff94 	bl	800f07c <__sfputs_r>
 800f154:	3001      	adds	r0, #1
 800f156:	f000 80aa 	beq.w	800f2ae <_vfiprintf_r+0x20e>
 800f15a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f15c:	445a      	add	r2, fp
 800f15e:	9209      	str	r2, [sp, #36]	; 0x24
 800f160:	f89a 3000 	ldrb.w	r3, [sl]
 800f164:	2b00      	cmp	r3, #0
 800f166:	f000 80a2 	beq.w	800f2ae <_vfiprintf_r+0x20e>
 800f16a:	2300      	movs	r3, #0
 800f16c:	f04f 32ff 	mov.w	r2, #4294967295
 800f170:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f174:	f10a 0a01 	add.w	sl, sl, #1
 800f178:	9304      	str	r3, [sp, #16]
 800f17a:	9307      	str	r3, [sp, #28]
 800f17c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f180:	931a      	str	r3, [sp, #104]	; 0x68
 800f182:	4654      	mov	r4, sl
 800f184:	2205      	movs	r2, #5
 800f186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f18a:	4858      	ldr	r0, [pc, #352]	; (800f2ec <_vfiprintf_r+0x24c>)
 800f18c:	f7f1 f838 	bl	8000200 <memchr>
 800f190:	9a04      	ldr	r2, [sp, #16]
 800f192:	b9d8      	cbnz	r0, 800f1cc <_vfiprintf_r+0x12c>
 800f194:	06d1      	lsls	r1, r2, #27
 800f196:	bf44      	itt	mi
 800f198:	2320      	movmi	r3, #32
 800f19a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f19e:	0713      	lsls	r3, r2, #28
 800f1a0:	bf44      	itt	mi
 800f1a2:	232b      	movmi	r3, #43	; 0x2b
 800f1a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1a8:	f89a 3000 	ldrb.w	r3, [sl]
 800f1ac:	2b2a      	cmp	r3, #42	; 0x2a
 800f1ae:	d015      	beq.n	800f1dc <_vfiprintf_r+0x13c>
 800f1b0:	9a07      	ldr	r2, [sp, #28]
 800f1b2:	4654      	mov	r4, sl
 800f1b4:	2000      	movs	r0, #0
 800f1b6:	f04f 0c0a 	mov.w	ip, #10
 800f1ba:	4621      	mov	r1, r4
 800f1bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1c0:	3b30      	subs	r3, #48	; 0x30
 800f1c2:	2b09      	cmp	r3, #9
 800f1c4:	d94e      	bls.n	800f264 <_vfiprintf_r+0x1c4>
 800f1c6:	b1b0      	cbz	r0, 800f1f6 <_vfiprintf_r+0x156>
 800f1c8:	9207      	str	r2, [sp, #28]
 800f1ca:	e014      	b.n	800f1f6 <_vfiprintf_r+0x156>
 800f1cc:	eba0 0308 	sub.w	r3, r0, r8
 800f1d0:	fa09 f303 	lsl.w	r3, r9, r3
 800f1d4:	4313      	orrs	r3, r2
 800f1d6:	9304      	str	r3, [sp, #16]
 800f1d8:	46a2      	mov	sl, r4
 800f1da:	e7d2      	b.n	800f182 <_vfiprintf_r+0xe2>
 800f1dc:	9b03      	ldr	r3, [sp, #12]
 800f1de:	1d19      	adds	r1, r3, #4
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	9103      	str	r1, [sp, #12]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	bfbb      	ittet	lt
 800f1e8:	425b      	neglt	r3, r3
 800f1ea:	f042 0202 	orrlt.w	r2, r2, #2
 800f1ee:	9307      	strge	r3, [sp, #28]
 800f1f0:	9307      	strlt	r3, [sp, #28]
 800f1f2:	bfb8      	it	lt
 800f1f4:	9204      	strlt	r2, [sp, #16]
 800f1f6:	7823      	ldrb	r3, [r4, #0]
 800f1f8:	2b2e      	cmp	r3, #46	; 0x2e
 800f1fa:	d10c      	bne.n	800f216 <_vfiprintf_r+0x176>
 800f1fc:	7863      	ldrb	r3, [r4, #1]
 800f1fe:	2b2a      	cmp	r3, #42	; 0x2a
 800f200:	d135      	bne.n	800f26e <_vfiprintf_r+0x1ce>
 800f202:	9b03      	ldr	r3, [sp, #12]
 800f204:	1d1a      	adds	r2, r3, #4
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	9203      	str	r2, [sp, #12]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	bfb8      	it	lt
 800f20e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f212:	3402      	adds	r4, #2
 800f214:	9305      	str	r3, [sp, #20]
 800f216:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f2fc <_vfiprintf_r+0x25c>
 800f21a:	7821      	ldrb	r1, [r4, #0]
 800f21c:	2203      	movs	r2, #3
 800f21e:	4650      	mov	r0, sl
 800f220:	f7f0 ffee 	bl	8000200 <memchr>
 800f224:	b140      	cbz	r0, 800f238 <_vfiprintf_r+0x198>
 800f226:	2340      	movs	r3, #64	; 0x40
 800f228:	eba0 000a 	sub.w	r0, r0, sl
 800f22c:	fa03 f000 	lsl.w	r0, r3, r0
 800f230:	9b04      	ldr	r3, [sp, #16]
 800f232:	4303      	orrs	r3, r0
 800f234:	3401      	adds	r4, #1
 800f236:	9304      	str	r3, [sp, #16]
 800f238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f23c:	482c      	ldr	r0, [pc, #176]	; (800f2f0 <_vfiprintf_r+0x250>)
 800f23e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f242:	2206      	movs	r2, #6
 800f244:	f7f0 ffdc 	bl	8000200 <memchr>
 800f248:	2800      	cmp	r0, #0
 800f24a:	d03f      	beq.n	800f2cc <_vfiprintf_r+0x22c>
 800f24c:	4b29      	ldr	r3, [pc, #164]	; (800f2f4 <_vfiprintf_r+0x254>)
 800f24e:	bb1b      	cbnz	r3, 800f298 <_vfiprintf_r+0x1f8>
 800f250:	9b03      	ldr	r3, [sp, #12]
 800f252:	3307      	adds	r3, #7
 800f254:	f023 0307 	bic.w	r3, r3, #7
 800f258:	3308      	adds	r3, #8
 800f25a:	9303      	str	r3, [sp, #12]
 800f25c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f25e:	443b      	add	r3, r7
 800f260:	9309      	str	r3, [sp, #36]	; 0x24
 800f262:	e767      	b.n	800f134 <_vfiprintf_r+0x94>
 800f264:	fb0c 3202 	mla	r2, ip, r2, r3
 800f268:	460c      	mov	r4, r1
 800f26a:	2001      	movs	r0, #1
 800f26c:	e7a5      	b.n	800f1ba <_vfiprintf_r+0x11a>
 800f26e:	2300      	movs	r3, #0
 800f270:	3401      	adds	r4, #1
 800f272:	9305      	str	r3, [sp, #20]
 800f274:	4619      	mov	r1, r3
 800f276:	f04f 0c0a 	mov.w	ip, #10
 800f27a:	4620      	mov	r0, r4
 800f27c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f280:	3a30      	subs	r2, #48	; 0x30
 800f282:	2a09      	cmp	r2, #9
 800f284:	d903      	bls.n	800f28e <_vfiprintf_r+0x1ee>
 800f286:	2b00      	cmp	r3, #0
 800f288:	d0c5      	beq.n	800f216 <_vfiprintf_r+0x176>
 800f28a:	9105      	str	r1, [sp, #20]
 800f28c:	e7c3      	b.n	800f216 <_vfiprintf_r+0x176>
 800f28e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f292:	4604      	mov	r4, r0
 800f294:	2301      	movs	r3, #1
 800f296:	e7f0      	b.n	800f27a <_vfiprintf_r+0x1da>
 800f298:	ab03      	add	r3, sp, #12
 800f29a:	9300      	str	r3, [sp, #0]
 800f29c:	462a      	mov	r2, r5
 800f29e:	4b16      	ldr	r3, [pc, #88]	; (800f2f8 <_vfiprintf_r+0x258>)
 800f2a0:	a904      	add	r1, sp, #16
 800f2a2:	4630      	mov	r0, r6
 800f2a4:	f7fb ff24 	bl	800b0f0 <_printf_float>
 800f2a8:	4607      	mov	r7, r0
 800f2aa:	1c78      	adds	r0, r7, #1
 800f2ac:	d1d6      	bne.n	800f25c <_vfiprintf_r+0x1bc>
 800f2ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2b0:	07d9      	lsls	r1, r3, #31
 800f2b2:	d405      	bmi.n	800f2c0 <_vfiprintf_r+0x220>
 800f2b4:	89ab      	ldrh	r3, [r5, #12]
 800f2b6:	059a      	lsls	r2, r3, #22
 800f2b8:	d402      	bmi.n	800f2c0 <_vfiprintf_r+0x220>
 800f2ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f2bc:	f7fb fdcc 	bl	800ae58 <__retarget_lock_release_recursive>
 800f2c0:	89ab      	ldrh	r3, [r5, #12]
 800f2c2:	065b      	lsls	r3, r3, #25
 800f2c4:	f53f af12 	bmi.w	800f0ec <_vfiprintf_r+0x4c>
 800f2c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f2ca:	e711      	b.n	800f0f0 <_vfiprintf_r+0x50>
 800f2cc:	ab03      	add	r3, sp, #12
 800f2ce:	9300      	str	r3, [sp, #0]
 800f2d0:	462a      	mov	r2, r5
 800f2d2:	4b09      	ldr	r3, [pc, #36]	; (800f2f8 <_vfiprintf_r+0x258>)
 800f2d4:	a904      	add	r1, sp, #16
 800f2d6:	4630      	mov	r0, r6
 800f2d8:	f7fc f9ae 	bl	800b638 <_printf_i>
 800f2dc:	e7e4      	b.n	800f2a8 <_vfiprintf_r+0x208>
 800f2de:	bf00      	nop
 800f2e0:	080111ac 	.word	0x080111ac
 800f2e4:	080111cc 	.word	0x080111cc
 800f2e8:	0801118c 	.word	0x0801118c
 800f2ec:	080115e4 	.word	0x080115e4
 800f2f0:	080115ee 	.word	0x080115ee
 800f2f4:	0800b0f1 	.word	0x0800b0f1
 800f2f8:	0800f07d 	.word	0x0800f07d
 800f2fc:	080115ea 	.word	0x080115ea

0800f300 <__swbuf_r>:
 800f300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f302:	460e      	mov	r6, r1
 800f304:	4614      	mov	r4, r2
 800f306:	4605      	mov	r5, r0
 800f308:	b118      	cbz	r0, 800f312 <__swbuf_r+0x12>
 800f30a:	6983      	ldr	r3, [r0, #24]
 800f30c:	b90b      	cbnz	r3, 800f312 <__swbuf_r+0x12>
 800f30e:	f7fb fcdf 	bl	800acd0 <__sinit>
 800f312:	4b21      	ldr	r3, [pc, #132]	; (800f398 <__swbuf_r+0x98>)
 800f314:	429c      	cmp	r4, r3
 800f316:	d12b      	bne.n	800f370 <__swbuf_r+0x70>
 800f318:	686c      	ldr	r4, [r5, #4]
 800f31a:	69a3      	ldr	r3, [r4, #24]
 800f31c:	60a3      	str	r3, [r4, #8]
 800f31e:	89a3      	ldrh	r3, [r4, #12]
 800f320:	071a      	lsls	r2, r3, #28
 800f322:	d52f      	bpl.n	800f384 <__swbuf_r+0x84>
 800f324:	6923      	ldr	r3, [r4, #16]
 800f326:	b36b      	cbz	r3, 800f384 <__swbuf_r+0x84>
 800f328:	6923      	ldr	r3, [r4, #16]
 800f32a:	6820      	ldr	r0, [r4, #0]
 800f32c:	1ac0      	subs	r0, r0, r3
 800f32e:	6963      	ldr	r3, [r4, #20]
 800f330:	b2f6      	uxtb	r6, r6
 800f332:	4283      	cmp	r3, r0
 800f334:	4637      	mov	r7, r6
 800f336:	dc04      	bgt.n	800f342 <__swbuf_r+0x42>
 800f338:	4621      	mov	r1, r4
 800f33a:	4628      	mov	r0, r5
 800f33c:	f7fe fb68 	bl	800da10 <_fflush_r>
 800f340:	bb30      	cbnz	r0, 800f390 <__swbuf_r+0x90>
 800f342:	68a3      	ldr	r3, [r4, #8]
 800f344:	3b01      	subs	r3, #1
 800f346:	60a3      	str	r3, [r4, #8]
 800f348:	6823      	ldr	r3, [r4, #0]
 800f34a:	1c5a      	adds	r2, r3, #1
 800f34c:	6022      	str	r2, [r4, #0]
 800f34e:	701e      	strb	r6, [r3, #0]
 800f350:	6963      	ldr	r3, [r4, #20]
 800f352:	3001      	adds	r0, #1
 800f354:	4283      	cmp	r3, r0
 800f356:	d004      	beq.n	800f362 <__swbuf_r+0x62>
 800f358:	89a3      	ldrh	r3, [r4, #12]
 800f35a:	07db      	lsls	r3, r3, #31
 800f35c:	d506      	bpl.n	800f36c <__swbuf_r+0x6c>
 800f35e:	2e0a      	cmp	r6, #10
 800f360:	d104      	bne.n	800f36c <__swbuf_r+0x6c>
 800f362:	4621      	mov	r1, r4
 800f364:	4628      	mov	r0, r5
 800f366:	f7fe fb53 	bl	800da10 <_fflush_r>
 800f36a:	b988      	cbnz	r0, 800f390 <__swbuf_r+0x90>
 800f36c:	4638      	mov	r0, r7
 800f36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f370:	4b0a      	ldr	r3, [pc, #40]	; (800f39c <__swbuf_r+0x9c>)
 800f372:	429c      	cmp	r4, r3
 800f374:	d101      	bne.n	800f37a <__swbuf_r+0x7a>
 800f376:	68ac      	ldr	r4, [r5, #8]
 800f378:	e7cf      	b.n	800f31a <__swbuf_r+0x1a>
 800f37a:	4b09      	ldr	r3, [pc, #36]	; (800f3a0 <__swbuf_r+0xa0>)
 800f37c:	429c      	cmp	r4, r3
 800f37e:	bf08      	it	eq
 800f380:	68ec      	ldreq	r4, [r5, #12]
 800f382:	e7ca      	b.n	800f31a <__swbuf_r+0x1a>
 800f384:	4621      	mov	r1, r4
 800f386:	4628      	mov	r0, r5
 800f388:	f000 f80c 	bl	800f3a4 <__swsetup_r>
 800f38c:	2800      	cmp	r0, #0
 800f38e:	d0cb      	beq.n	800f328 <__swbuf_r+0x28>
 800f390:	f04f 37ff 	mov.w	r7, #4294967295
 800f394:	e7ea      	b.n	800f36c <__swbuf_r+0x6c>
 800f396:	bf00      	nop
 800f398:	080111ac 	.word	0x080111ac
 800f39c:	080111cc 	.word	0x080111cc
 800f3a0:	0801118c 	.word	0x0801118c

0800f3a4 <__swsetup_r>:
 800f3a4:	4b32      	ldr	r3, [pc, #200]	; (800f470 <__swsetup_r+0xcc>)
 800f3a6:	b570      	push	{r4, r5, r6, lr}
 800f3a8:	681d      	ldr	r5, [r3, #0]
 800f3aa:	4606      	mov	r6, r0
 800f3ac:	460c      	mov	r4, r1
 800f3ae:	b125      	cbz	r5, 800f3ba <__swsetup_r+0x16>
 800f3b0:	69ab      	ldr	r3, [r5, #24]
 800f3b2:	b913      	cbnz	r3, 800f3ba <__swsetup_r+0x16>
 800f3b4:	4628      	mov	r0, r5
 800f3b6:	f7fb fc8b 	bl	800acd0 <__sinit>
 800f3ba:	4b2e      	ldr	r3, [pc, #184]	; (800f474 <__swsetup_r+0xd0>)
 800f3bc:	429c      	cmp	r4, r3
 800f3be:	d10f      	bne.n	800f3e0 <__swsetup_r+0x3c>
 800f3c0:	686c      	ldr	r4, [r5, #4]
 800f3c2:	89a3      	ldrh	r3, [r4, #12]
 800f3c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f3c8:	0719      	lsls	r1, r3, #28
 800f3ca:	d42c      	bmi.n	800f426 <__swsetup_r+0x82>
 800f3cc:	06dd      	lsls	r5, r3, #27
 800f3ce:	d411      	bmi.n	800f3f4 <__swsetup_r+0x50>
 800f3d0:	2309      	movs	r3, #9
 800f3d2:	6033      	str	r3, [r6, #0]
 800f3d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f3d8:	81a3      	strh	r3, [r4, #12]
 800f3da:	f04f 30ff 	mov.w	r0, #4294967295
 800f3de:	e03e      	b.n	800f45e <__swsetup_r+0xba>
 800f3e0:	4b25      	ldr	r3, [pc, #148]	; (800f478 <__swsetup_r+0xd4>)
 800f3e2:	429c      	cmp	r4, r3
 800f3e4:	d101      	bne.n	800f3ea <__swsetup_r+0x46>
 800f3e6:	68ac      	ldr	r4, [r5, #8]
 800f3e8:	e7eb      	b.n	800f3c2 <__swsetup_r+0x1e>
 800f3ea:	4b24      	ldr	r3, [pc, #144]	; (800f47c <__swsetup_r+0xd8>)
 800f3ec:	429c      	cmp	r4, r3
 800f3ee:	bf08      	it	eq
 800f3f0:	68ec      	ldreq	r4, [r5, #12]
 800f3f2:	e7e6      	b.n	800f3c2 <__swsetup_r+0x1e>
 800f3f4:	0758      	lsls	r0, r3, #29
 800f3f6:	d512      	bpl.n	800f41e <__swsetup_r+0x7a>
 800f3f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3fa:	b141      	cbz	r1, 800f40e <__swsetup_r+0x6a>
 800f3fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f400:	4299      	cmp	r1, r3
 800f402:	d002      	beq.n	800f40a <__swsetup_r+0x66>
 800f404:	4630      	mov	r0, r6
 800f406:	f7ff fbc3 	bl	800eb90 <_free_r>
 800f40a:	2300      	movs	r3, #0
 800f40c:	6363      	str	r3, [r4, #52]	; 0x34
 800f40e:	89a3      	ldrh	r3, [r4, #12]
 800f410:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f414:	81a3      	strh	r3, [r4, #12]
 800f416:	2300      	movs	r3, #0
 800f418:	6063      	str	r3, [r4, #4]
 800f41a:	6923      	ldr	r3, [r4, #16]
 800f41c:	6023      	str	r3, [r4, #0]
 800f41e:	89a3      	ldrh	r3, [r4, #12]
 800f420:	f043 0308 	orr.w	r3, r3, #8
 800f424:	81a3      	strh	r3, [r4, #12]
 800f426:	6923      	ldr	r3, [r4, #16]
 800f428:	b94b      	cbnz	r3, 800f43e <__swsetup_r+0x9a>
 800f42a:	89a3      	ldrh	r3, [r4, #12]
 800f42c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f434:	d003      	beq.n	800f43e <__swsetup_r+0x9a>
 800f436:	4621      	mov	r1, r4
 800f438:	4630      	mov	r0, r6
 800f43a:	f000 f84d 	bl	800f4d8 <__smakebuf_r>
 800f43e:	89a0      	ldrh	r0, [r4, #12]
 800f440:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f444:	f010 0301 	ands.w	r3, r0, #1
 800f448:	d00a      	beq.n	800f460 <__swsetup_r+0xbc>
 800f44a:	2300      	movs	r3, #0
 800f44c:	60a3      	str	r3, [r4, #8]
 800f44e:	6963      	ldr	r3, [r4, #20]
 800f450:	425b      	negs	r3, r3
 800f452:	61a3      	str	r3, [r4, #24]
 800f454:	6923      	ldr	r3, [r4, #16]
 800f456:	b943      	cbnz	r3, 800f46a <__swsetup_r+0xc6>
 800f458:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f45c:	d1ba      	bne.n	800f3d4 <__swsetup_r+0x30>
 800f45e:	bd70      	pop	{r4, r5, r6, pc}
 800f460:	0781      	lsls	r1, r0, #30
 800f462:	bf58      	it	pl
 800f464:	6963      	ldrpl	r3, [r4, #20]
 800f466:	60a3      	str	r3, [r4, #8]
 800f468:	e7f4      	b.n	800f454 <__swsetup_r+0xb0>
 800f46a:	2000      	movs	r0, #0
 800f46c:	e7f7      	b.n	800f45e <__swsetup_r+0xba>
 800f46e:	bf00      	nop
 800f470:	20000098 	.word	0x20000098
 800f474:	080111ac 	.word	0x080111ac
 800f478:	080111cc 	.word	0x080111cc
 800f47c:	0801118c 	.word	0x0801118c

0800f480 <abort>:
 800f480:	b508      	push	{r3, lr}
 800f482:	2006      	movs	r0, #6
 800f484:	f000 f898 	bl	800f5b8 <raise>
 800f488:	2001      	movs	r0, #1
 800f48a:	f7f3 f8b5 	bl	80025f8 <_exit>

0800f48e <__swhatbuf_r>:
 800f48e:	b570      	push	{r4, r5, r6, lr}
 800f490:	460e      	mov	r6, r1
 800f492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f496:	2900      	cmp	r1, #0
 800f498:	b096      	sub	sp, #88	; 0x58
 800f49a:	4614      	mov	r4, r2
 800f49c:	461d      	mov	r5, r3
 800f49e:	da08      	bge.n	800f4b2 <__swhatbuf_r+0x24>
 800f4a0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	602a      	str	r2, [r5, #0]
 800f4a8:	061a      	lsls	r2, r3, #24
 800f4aa:	d410      	bmi.n	800f4ce <__swhatbuf_r+0x40>
 800f4ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4b0:	e00e      	b.n	800f4d0 <__swhatbuf_r+0x42>
 800f4b2:	466a      	mov	r2, sp
 800f4b4:	f000 f89c 	bl	800f5f0 <_fstat_r>
 800f4b8:	2800      	cmp	r0, #0
 800f4ba:	dbf1      	blt.n	800f4a0 <__swhatbuf_r+0x12>
 800f4bc:	9a01      	ldr	r2, [sp, #4]
 800f4be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f4c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f4c6:	425a      	negs	r2, r3
 800f4c8:	415a      	adcs	r2, r3
 800f4ca:	602a      	str	r2, [r5, #0]
 800f4cc:	e7ee      	b.n	800f4ac <__swhatbuf_r+0x1e>
 800f4ce:	2340      	movs	r3, #64	; 0x40
 800f4d0:	2000      	movs	r0, #0
 800f4d2:	6023      	str	r3, [r4, #0]
 800f4d4:	b016      	add	sp, #88	; 0x58
 800f4d6:	bd70      	pop	{r4, r5, r6, pc}

0800f4d8 <__smakebuf_r>:
 800f4d8:	898b      	ldrh	r3, [r1, #12]
 800f4da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f4dc:	079d      	lsls	r5, r3, #30
 800f4de:	4606      	mov	r6, r0
 800f4e0:	460c      	mov	r4, r1
 800f4e2:	d507      	bpl.n	800f4f4 <__smakebuf_r+0x1c>
 800f4e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f4e8:	6023      	str	r3, [r4, #0]
 800f4ea:	6123      	str	r3, [r4, #16]
 800f4ec:	2301      	movs	r3, #1
 800f4ee:	6163      	str	r3, [r4, #20]
 800f4f0:	b002      	add	sp, #8
 800f4f2:	bd70      	pop	{r4, r5, r6, pc}
 800f4f4:	ab01      	add	r3, sp, #4
 800f4f6:	466a      	mov	r2, sp
 800f4f8:	f7ff ffc9 	bl	800f48e <__swhatbuf_r>
 800f4fc:	9900      	ldr	r1, [sp, #0]
 800f4fe:	4605      	mov	r5, r0
 800f500:	4630      	mov	r0, r6
 800f502:	f7fb fce1 	bl	800aec8 <_malloc_r>
 800f506:	b948      	cbnz	r0, 800f51c <__smakebuf_r+0x44>
 800f508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f50c:	059a      	lsls	r2, r3, #22
 800f50e:	d4ef      	bmi.n	800f4f0 <__smakebuf_r+0x18>
 800f510:	f023 0303 	bic.w	r3, r3, #3
 800f514:	f043 0302 	orr.w	r3, r3, #2
 800f518:	81a3      	strh	r3, [r4, #12]
 800f51a:	e7e3      	b.n	800f4e4 <__smakebuf_r+0xc>
 800f51c:	4b0d      	ldr	r3, [pc, #52]	; (800f554 <__smakebuf_r+0x7c>)
 800f51e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f520:	89a3      	ldrh	r3, [r4, #12]
 800f522:	6020      	str	r0, [r4, #0]
 800f524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f528:	81a3      	strh	r3, [r4, #12]
 800f52a:	9b00      	ldr	r3, [sp, #0]
 800f52c:	6163      	str	r3, [r4, #20]
 800f52e:	9b01      	ldr	r3, [sp, #4]
 800f530:	6120      	str	r0, [r4, #16]
 800f532:	b15b      	cbz	r3, 800f54c <__smakebuf_r+0x74>
 800f534:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f538:	4630      	mov	r0, r6
 800f53a:	f000 f86b 	bl	800f614 <_isatty_r>
 800f53e:	b128      	cbz	r0, 800f54c <__smakebuf_r+0x74>
 800f540:	89a3      	ldrh	r3, [r4, #12]
 800f542:	f023 0303 	bic.w	r3, r3, #3
 800f546:	f043 0301 	orr.w	r3, r3, #1
 800f54a:	81a3      	strh	r3, [r4, #12]
 800f54c:	89a0      	ldrh	r0, [r4, #12]
 800f54e:	4305      	orrs	r5, r0
 800f550:	81a5      	strh	r5, [r4, #12]
 800f552:	e7cd      	b.n	800f4f0 <__smakebuf_r+0x18>
 800f554:	0800ac69 	.word	0x0800ac69

0800f558 <_malloc_usable_size_r>:
 800f558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f55c:	1f18      	subs	r0, r3, #4
 800f55e:	2b00      	cmp	r3, #0
 800f560:	bfbc      	itt	lt
 800f562:	580b      	ldrlt	r3, [r1, r0]
 800f564:	18c0      	addlt	r0, r0, r3
 800f566:	4770      	bx	lr

0800f568 <_raise_r>:
 800f568:	291f      	cmp	r1, #31
 800f56a:	b538      	push	{r3, r4, r5, lr}
 800f56c:	4604      	mov	r4, r0
 800f56e:	460d      	mov	r5, r1
 800f570:	d904      	bls.n	800f57c <_raise_r+0x14>
 800f572:	2316      	movs	r3, #22
 800f574:	6003      	str	r3, [r0, #0]
 800f576:	f04f 30ff 	mov.w	r0, #4294967295
 800f57a:	bd38      	pop	{r3, r4, r5, pc}
 800f57c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f57e:	b112      	cbz	r2, 800f586 <_raise_r+0x1e>
 800f580:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f584:	b94b      	cbnz	r3, 800f59a <_raise_r+0x32>
 800f586:	4620      	mov	r0, r4
 800f588:	f000 f830 	bl	800f5ec <_getpid_r>
 800f58c:	462a      	mov	r2, r5
 800f58e:	4601      	mov	r1, r0
 800f590:	4620      	mov	r0, r4
 800f592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f596:	f000 b817 	b.w	800f5c8 <_kill_r>
 800f59a:	2b01      	cmp	r3, #1
 800f59c:	d00a      	beq.n	800f5b4 <_raise_r+0x4c>
 800f59e:	1c59      	adds	r1, r3, #1
 800f5a0:	d103      	bne.n	800f5aa <_raise_r+0x42>
 800f5a2:	2316      	movs	r3, #22
 800f5a4:	6003      	str	r3, [r0, #0]
 800f5a6:	2001      	movs	r0, #1
 800f5a8:	e7e7      	b.n	800f57a <_raise_r+0x12>
 800f5aa:	2400      	movs	r4, #0
 800f5ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f5b0:	4628      	mov	r0, r5
 800f5b2:	4798      	blx	r3
 800f5b4:	2000      	movs	r0, #0
 800f5b6:	e7e0      	b.n	800f57a <_raise_r+0x12>

0800f5b8 <raise>:
 800f5b8:	4b02      	ldr	r3, [pc, #8]	; (800f5c4 <raise+0xc>)
 800f5ba:	4601      	mov	r1, r0
 800f5bc:	6818      	ldr	r0, [r3, #0]
 800f5be:	f7ff bfd3 	b.w	800f568 <_raise_r>
 800f5c2:	bf00      	nop
 800f5c4:	20000098 	.word	0x20000098

0800f5c8 <_kill_r>:
 800f5c8:	b538      	push	{r3, r4, r5, lr}
 800f5ca:	4d07      	ldr	r5, [pc, #28]	; (800f5e8 <_kill_r+0x20>)
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	4604      	mov	r4, r0
 800f5d0:	4608      	mov	r0, r1
 800f5d2:	4611      	mov	r1, r2
 800f5d4:	602b      	str	r3, [r5, #0]
 800f5d6:	f7f2 ffff 	bl	80025d8 <_kill>
 800f5da:	1c43      	adds	r3, r0, #1
 800f5dc:	d102      	bne.n	800f5e4 <_kill_r+0x1c>
 800f5de:	682b      	ldr	r3, [r5, #0]
 800f5e0:	b103      	cbz	r3, 800f5e4 <_kill_r+0x1c>
 800f5e2:	6023      	str	r3, [r4, #0]
 800f5e4:	bd38      	pop	{r3, r4, r5, pc}
 800f5e6:	bf00      	nop
 800f5e8:	20008c48 	.word	0x20008c48

0800f5ec <_getpid_r>:
 800f5ec:	f7f2 bfec 	b.w	80025c8 <_getpid>

0800f5f0 <_fstat_r>:
 800f5f0:	b538      	push	{r3, r4, r5, lr}
 800f5f2:	4d07      	ldr	r5, [pc, #28]	; (800f610 <_fstat_r+0x20>)
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	4604      	mov	r4, r0
 800f5f8:	4608      	mov	r0, r1
 800f5fa:	4611      	mov	r1, r2
 800f5fc:	602b      	str	r3, [r5, #0]
 800f5fe:	f7f3 f82e 	bl	800265e <_fstat>
 800f602:	1c43      	adds	r3, r0, #1
 800f604:	d102      	bne.n	800f60c <_fstat_r+0x1c>
 800f606:	682b      	ldr	r3, [r5, #0]
 800f608:	b103      	cbz	r3, 800f60c <_fstat_r+0x1c>
 800f60a:	6023      	str	r3, [r4, #0]
 800f60c:	bd38      	pop	{r3, r4, r5, pc}
 800f60e:	bf00      	nop
 800f610:	20008c48 	.word	0x20008c48

0800f614 <_isatty_r>:
 800f614:	b538      	push	{r3, r4, r5, lr}
 800f616:	4d06      	ldr	r5, [pc, #24]	; (800f630 <_isatty_r+0x1c>)
 800f618:	2300      	movs	r3, #0
 800f61a:	4604      	mov	r4, r0
 800f61c:	4608      	mov	r0, r1
 800f61e:	602b      	str	r3, [r5, #0]
 800f620:	f7f3 f82d 	bl	800267e <_isatty>
 800f624:	1c43      	adds	r3, r0, #1
 800f626:	d102      	bne.n	800f62e <_isatty_r+0x1a>
 800f628:	682b      	ldr	r3, [r5, #0]
 800f62a:	b103      	cbz	r3, 800f62e <_isatty_r+0x1a>
 800f62c:	6023      	str	r3, [r4, #0]
 800f62e:	bd38      	pop	{r3, r4, r5, pc}
 800f630:	20008c48 	.word	0x20008c48

0800f634 <_init>:
 800f634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f636:	bf00      	nop
 800f638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f63a:	bc08      	pop	{r3}
 800f63c:	469e      	mov	lr, r3
 800f63e:	4770      	bx	lr

0800f640 <_fini>:
 800f640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f642:	bf00      	nop
 800f644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f646:	bc08      	pop	{r3}
 800f648:	469e      	mov	lr, r3
 800f64a:	4770      	bx	lr
