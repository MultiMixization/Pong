
ZyrPONG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000773c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  080078ec  080078ec  000178ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a48  08007a48  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007a48  08007a48  00017a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a50  08007a50  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a50  08007a50  00017a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a54  08007a54  00017a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007a58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00008988  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008a00  20008a00  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023234  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045f3  00000000  00000000  000432dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d90  00000000  00000000  000478d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001be0  00000000  00000000  00049660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028bb4  00000000  00000000  0004b240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000217be  00000000  00000000  00073df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2078  00000000  00000000  000955b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018762a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008024  00000000  00000000  0018767c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080078d4 	.word	0x080078d4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	080078d4 	.word	0x080078d4

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000502:	b480      	push	{r7}
 8000504:	b083      	sub	sp, #12
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
 800050a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
	...

08000528 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	4a07      	ldr	r2, [pc, #28]	; (8000554 <vApplicationGetIdleTaskMemory+0x2c>)
 8000538:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <vApplicationGetIdleTaskMemory+0x30>)
 800053e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20000094 	.word	0x20000094
 8000558:	2000014c 	.word	0x2000014c

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b5b0      	push	{r4, r5, r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f001 fcb9 	bl	8001ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f82d 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 faa1 	bl	8000ab0 <MX_GPIO_Init>
  MX_CRC_Init();
 800056e:	f000 f899 	bl	80006a4 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000572:	f000 f8ab 	bl	80006cc <MX_DMA2D_Init>
  MX_FMC_Init();
 8000576:	f000 fa4b 	bl	8000a10 <MX_FMC_Init>
  MX_LTDC_Init();
 800057a:	f000 f919 	bl	80007b0 <MX_LTDC_Init>
  MX_SPI5_Init();
 800057e:	f000 f997 	bl	80008b0 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000582:	f000 f9cb 	bl	800091c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000586:	f000 fa19 	bl	80009bc <MX_USART1_UART_Init>
  MX_I2C3_Init();
 800058a:	f000 f8d1 	bl	8000730 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  LCD_Config();
 800058e:	f000 fbef 	bl	8000d70 <LCD_Config>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <main+0x60>)
 8000594:	1d3c      	adds	r4, r7, #4
 8000596:	461d      	mov	r5, r3
 8000598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f005 fefc 	bl	80063a6 <osThreadCreate>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a03      	ldr	r2, [pc, #12]	; (80005c0 <main+0x64>)
 80005b2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005b4:	f005 fef0 	bl	8006398 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <main+0x5c>
 80005ba:	bf00      	nop
 80005bc:	080078f8 	.word	0x080078f8
 80005c0:	20000610 	.word	0x20000610

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	; 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	; 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f007 f8b4 	bl	8007740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b2b      	ldr	r3, [pc, #172]	; (800069c <SystemClock_Config+0xd8>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	4a2a      	ldr	r2, [pc, #168]	; (800069c <SystemClock_Config+0xd8>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	; 0x40
 80005f8:	4b28      	ldr	r3, [pc, #160]	; (800069c <SystemClock_Config+0xd8>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <SystemClock_Config+0xdc>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a24      	ldr	r2, [pc, #144]	; (80006a0 <SystemClock_Config+0xdc>)
 800060e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <SystemClock_Config+0xdc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000620:	2302      	movs	r3, #2
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000624:	2301      	movs	r3, #1
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000628:	2310      	movs	r3, #16
 800062a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062c:	2302      	movs	r3, #2
 800062e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000630:	2300      	movs	r3, #0
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000634:	2308      	movs	r3, #8
 8000636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000638:	23b4      	movs	r3, #180	; 0xb4
 800063a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000640:	2303      	movs	r3, #3
 8000642:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f003 f8ad 	bl	80037a8 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000654:	f000 fd18 	bl	8001088 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000658:	f003 f856 	bl	8003708 <HAL_PWREx_EnableOverDrive>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000662:	f000 fd11 	bl	8001088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000666:	230f      	movs	r3, #15
 8000668:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066a:	2302      	movs	r3, #2
 800066c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000672:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000676:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	2105      	movs	r1, #5
 8000684:	4618      	mov	r0, r3
 8000686:	f003 fb07 	bl	8003c98 <HAL_RCC_ClockConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000690:	f000 fcfa 	bl	8001088 <Error_Handler>
  }
}
 8000694:	bf00      	nop
 8000696:	3750      	adds	r7, #80	; 0x50
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_CRC_Init+0x20>)
 80006aa:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <MX_CRC_Init+0x24>)
 80006ac:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_CRC_Init+0x20>)
 80006b0:	f001 fd5a 	bl	8002168 <HAL_CRC_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006ba:	f000 fce5 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	2000034c 	.word	0x2000034c
 80006c8:	40023000 	.word	0x40023000

080006cc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <MX_DMA2D_Init+0x5c>)
 80006d2:	4a16      	ldr	r2, [pc, #88]	; (800072c <MX_DMA2D_Init+0x60>)
 80006d4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_DMA2D_Init+0x5c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_DMA2D_Init+0x5c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_DMA2D_Init+0x5c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_DMA2D_Init+0x5c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_DMA2D_Init+0x5c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_DMA2D_Init+0x5c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_DMA2D_Init+0x5c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000700:	4809      	ldr	r0, [pc, #36]	; (8000728 <MX_DMA2D_Init+0x5c>)
 8000702:	f001 fddf 	bl	80022c4 <HAL_DMA2D_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800070c:	f000 fcbc 	bl	8001088 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000710:	2101      	movs	r1, #1
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_DMA2D_Init+0x5c>)
 8000714:	f001 ff30 	bl	8002578 <HAL_DMA2D_ConfigLayer>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800071e:	f000 fcb3 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000354 	.word	0x20000354
 800072c:	4002b000 	.word	0x4002b000

08000730 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <MX_I2C3_Init+0x74>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <MX_I2C3_Init+0x78>)
 8000738:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800073a:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <MX_I2C3_Init+0x74>)
 800073c:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <MX_I2C3_Init+0x7c>)
 800073e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000740:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_I2C3_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000746:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_I2C3_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800074c:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MX_I2C3_Init+0x74>)
 800074e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000752:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000754:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_I2C3_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_I2C3_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000760:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MX_I2C3_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_I2C3_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800076c:	480d      	ldr	r0, [pc, #52]	; (80007a4 <MX_I2C3_Init+0x74>)
 800076e:	f002 fa67 	bl	8002c40 <HAL_I2C_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000778:	f000 fc86 	bl	8001088 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800077c:	2100      	movs	r1, #0
 800077e:	4809      	ldr	r0, [pc, #36]	; (80007a4 <MX_I2C3_Init+0x74>)
 8000780:	f002 fba2 	bl	8002ec8 <HAL_I2CEx_ConfigAnalogFilter>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800078a:	f000 fc7d 	bl	8001088 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800078e:	2100      	movs	r1, #0
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_I2C3_Init+0x74>)
 8000792:	f002 fbd5 	bl	8002f40 <HAL_I2CEx_ConfigDigitalFilter>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800079c:	f000 fc74 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000394 	.word	0x20000394
 80007a8:	40005c00 	.word	0x40005c00
 80007ac:	000186a0 	.word	0x000186a0

080007b0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08e      	sub	sp, #56	; 0x38
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2234      	movs	r2, #52	; 0x34
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f006 ffbf 	bl	8007740 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80007c2:	4b39      	ldr	r3, [pc, #228]	; (80008a8 <MX_LTDC_Init+0xf8>)
 80007c4:	4a39      	ldr	r2, [pc, #228]	; (80008ac <MX_LTDC_Init+0xfc>)
 80007c6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007c8:	4b37      	ldr	r3, [pc, #220]	; (80008a8 <MX_LTDC_Init+0xf8>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007ce:	4b36      	ldr	r3, [pc, #216]	; (80008a8 <MX_LTDC_Init+0xf8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007d4:	4b34      	ldr	r3, [pc, #208]	; (80008a8 <MX_LTDC_Init+0xf8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007da:	4b33      	ldr	r3, [pc, #204]	; (80008a8 <MX_LTDC_Init+0xf8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80007e0:	4b31      	ldr	r3, [pc, #196]	; (80008a8 <MX_LTDC_Init+0xf8>)
 80007e2:	2209      	movs	r2, #9
 80007e4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80007e6:	4b30      	ldr	r3, [pc, #192]	; (80008a8 <MX_LTDC_Init+0xf8>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80007ec:	4b2e      	ldr	r3, [pc, #184]	; (80008a8 <MX_LTDC_Init+0xf8>)
 80007ee:	221d      	movs	r2, #29
 80007f0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80007f2:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <MX_LTDC_Init+0xf8>)
 80007f4:	2203      	movs	r2, #3
 80007f6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80007f8:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <MX_LTDC_Init+0xf8>)
 80007fa:	f240 120d 	movw	r2, #269	; 0x10d
 80007fe:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000800:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <MX_LTDC_Init+0xf8>)
 8000802:	f240 1243 	movw	r2, #323	; 0x143
 8000806:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000808:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <MX_LTDC_Init+0xf8>)
 800080a:	f240 1217 	movw	r2, #279	; 0x117
 800080e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000810:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <MX_LTDC_Init+0xf8>)
 8000812:	f240 1247 	movw	r2, #327	; 0x147
 8000816:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000818:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <MX_LTDC_Init+0xf8>)
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000820:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <MX_LTDC_Init+0xf8>)
 8000822:	2200      	movs	r2, #0
 8000824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000828:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <MX_LTDC_Init+0xf8>)
 800082a:	2200      	movs	r2, #0
 800082c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000830:	481d      	ldr	r0, [pc, #116]	; (80008a8 <MX_LTDC_Init+0xf8>)
 8000832:	f002 fbc5 	bl	8002fc0 <HAL_LTDC_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800083c:	f000 fc24 	bl	8001088 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000844:	23f0      	movs	r3, #240	; 0xf0
 8000846:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 800084c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000850:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000852:	2302      	movs	r3, #2
 8000854:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000856:	23ff      	movs	r3, #255	; 0xff
 8000858:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800085e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000862:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000864:	2307      	movs	r3, #7
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000868:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800086e:	23f0      	movs	r3, #240	; 0xf0
 8000870:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000872:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000876:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2200      	movs	r2, #0
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_LTDC_Init+0xf8>)
 8000892:	f002 fd1d 	bl	80032d0 <HAL_LTDC_ConfigLayer>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 800089c:	f000 fbf4 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	3738      	adds	r7, #56	; 0x38
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200003e8 	.word	0x200003e8
 80008ac:	40016800 	.word	0x40016800

080008b0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80008b4:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_SPI5_Init+0x64>)
 80008b6:	4a18      	ldr	r2, [pc, #96]	; (8000918 <MX_SPI5_Init+0x68>)
 80008b8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <MX_SPI5_Init+0x64>)
 80008bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008c0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_SPI5_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_SPI5_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_SPI5_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_SPI5_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_SPI5_Init+0x64>)
 80008dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_SPI5_Init+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <MX_SPI5_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_SPI5_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008f4:	4b07      	ldr	r3, [pc, #28]	; (8000914 <MX_SPI5_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_SPI5_Init+0x64>)
 80008fc:	220a      	movs	r2, #10
 80008fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_SPI5_Init+0x64>)
 8000902:	f003 fe0f 	bl	8004524 <HAL_SPI_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800090c:	f000 fbbc 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200004f8 	.word	0x200004f8
 8000918:	40015000 	.word	0x40015000

0800091c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000930:	463b      	mov	r3, r7
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000938:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <MX_TIM1_Init+0x98>)
 800093a:	4a1f      	ldr	r2, [pc, #124]	; (80009b8 <MX_TIM1_Init+0x9c>)
 800093c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800093e:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MX_TIM1_Init+0x98>)
 8000940:	2200      	movs	r2, #0
 8000942:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <MX_TIM1_Init+0x98>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_TIM1_Init+0x98>)
 800094c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000950:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <MX_TIM1_Init+0x98>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_TIM1_Init+0x98>)
 800095a:	2200      	movs	r2, #0
 800095c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_TIM1_Init+0x98>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000964:	4813      	ldr	r0, [pc, #76]	; (80009b4 <MX_TIM1_Init+0x98>)
 8000966:	f004 f8a3 	bl	8004ab0 <HAL_TIM_Base_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000970:	f000 fb8a 	bl	8001088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000978:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	4619      	mov	r1, r3
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <MX_TIM1_Init+0x98>)
 8000982:	f004 fa5d 	bl	8004e40 <HAL_TIM_ConfigClockSource>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800098c:	f000 fb7c 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000990:	2300      	movs	r3, #0
 8000992:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000998:	463b      	mov	r3, r7
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_TIM1_Init+0x98>)
 800099e:	f004 fc79 	bl	8005294 <HAL_TIMEx_MasterConfigSynchronization>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009a8:	f000 fb6e 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000550 	.word	0x20000550
 80009b8:	40010000 	.word	0x40010000

080009bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <MX_USART1_UART_Init+0x50>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009f4:	f004 fcde 	bl	80053b4 <HAL_UART_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009fe:	f000 fb43 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000598 	.word	0x20000598
 8000a0c:	40011000 	.word	0x40011000

08000a10 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
 8000a24:	615a      	str	r2, [r3, #20]
 8000a26:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a28:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <MX_FMC_Init+0x98>)
 8000a2a:	4a20      	ldr	r2, [pc, #128]	; (8000aac <MX_FMC_Init+0x9c>)
 8000a2c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a2e:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <MX_FMC_Init+0x98>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a34:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <MX_FMC_Init+0x98>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a3a:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <MX_FMC_Init+0x98>)
 8000a3c:	2204      	movs	r2, #4
 8000a3e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a40:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <MX_FMC_Init+0x98>)
 8000a42:	2210      	movs	r2, #16
 8000a44:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <MX_FMC_Init+0x98>)
 8000a48:	2240      	movs	r2, #64	; 0x40
 8000a4a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_FMC_Init+0x98>)
 8000a4e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a52:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_FMC_Init+0x98>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_FMC_Init+0x98>)
 8000a5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a60:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_FMC_Init+0x98>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_FMC_Init+0x98>)
 8000a6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a6e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a74:	2307      	movs	r3, #7
 8000a76:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000a7c:	2307      	movs	r3, #7
 8000a7e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000a80:	2303      	movs	r3, #3
 8000a82:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_FMC_Init+0x98>)
 8000a92:	f003 fd13 	bl	80044bc <HAL_SDRAM_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000a9c:	f000 faf4 	bl	8001088 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000aa0:	bf00      	nop
 8000aa2:	3720      	adds	r7, #32
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	200005dc 	.word	0x200005dc
 8000aac:	a0000140 	.word	0xa0000140

08000ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08e      	sub	sp, #56	; 0x38
 8000ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
 8000ac4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	623b      	str	r3, [r7, #32]
 8000aca:	4b8a      	ldr	r3, [pc, #552]	; (8000cf4 <MX_GPIO_Init+0x244>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a89      	ldr	r2, [pc, #548]	; (8000cf4 <MX_GPIO_Init+0x244>)
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b87      	ldr	r3, [pc, #540]	; (8000cf4 <MX_GPIO_Init+0x244>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0304 	and.w	r3, r3, #4
 8000ade:	623b      	str	r3, [r7, #32]
 8000ae0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
 8000ae6:	4b83      	ldr	r3, [pc, #524]	; (8000cf4 <MX_GPIO_Init+0x244>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a82      	ldr	r2, [pc, #520]	; (8000cf4 <MX_GPIO_Init+0x244>)
 8000aec:	f043 0320 	orr.w	r3, r3, #32
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b80      	ldr	r3, [pc, #512]	; (8000cf4 <MX_GPIO_Init+0x244>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0320 	and.w	r3, r3, #32
 8000afa:	61fb      	str	r3, [r7, #28]
 8000afc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	61bb      	str	r3, [r7, #24]
 8000b02:	4b7c      	ldr	r3, [pc, #496]	; (8000cf4 <MX_GPIO_Init+0x244>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a7b      	ldr	r2, [pc, #492]	; (8000cf4 <MX_GPIO_Init+0x244>)
 8000b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b79      	ldr	r3, [pc, #484]	; (8000cf4 <MX_GPIO_Init+0x244>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b16:	61bb      	str	r3, [r7, #24]
 8000b18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	4b75      	ldr	r3, [pc, #468]	; (8000cf4 <MX_GPIO_Init+0x244>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a74      	ldr	r2, [pc, #464]	; (8000cf4 <MX_GPIO_Init+0x244>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b72      	ldr	r3, [pc, #456]	; (8000cf4 <MX_GPIO_Init+0x244>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b6e      	ldr	r3, [pc, #440]	; (8000cf4 <MX_GPIO_Init+0x244>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a6d      	ldr	r2, [pc, #436]	; (8000cf4 <MX_GPIO_Init+0x244>)
 8000b40:	f043 0302 	orr.w	r3, r3, #2
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b6b      	ldr	r3, [pc, #428]	; (8000cf4 <MX_GPIO_Init+0x244>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b67      	ldr	r3, [pc, #412]	; (8000cf4 <MX_GPIO_Init+0x244>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a66      	ldr	r2, [pc, #408]	; (8000cf4 <MX_GPIO_Init+0x244>)
 8000b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b64      	ldr	r3, [pc, #400]	; (8000cf4 <MX_GPIO_Init+0x244>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	4b60      	ldr	r3, [pc, #384]	; (8000cf4 <MX_GPIO_Init+0x244>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a5f      	ldr	r2, [pc, #380]	; (8000cf4 <MX_GPIO_Init+0x244>)
 8000b78:	f043 0310 	orr.w	r3, r3, #16
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b5d      	ldr	r3, [pc, #372]	; (8000cf4 <MX_GPIO_Init+0x244>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0310 	and.w	r3, r3, #16
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b59      	ldr	r3, [pc, #356]	; (8000cf4 <MX_GPIO_Init+0x244>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a58      	ldr	r2, [pc, #352]	; (8000cf4 <MX_GPIO_Init+0x244>)
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b56      	ldr	r3, [pc, #344]	; (8000cf4 <MX_GPIO_Init+0x244>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0308 	and.w	r3, r3, #8
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2116      	movs	r1, #22
 8000baa:	4853      	ldr	r0, [pc, #332]	; (8000cf8 <MX_GPIO_Init+0x248>)
 8000bac:	f002 f82e 	bl	8002c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2180      	movs	r1, #128	; 0x80
 8000bb4:	4851      	ldr	r0, [pc, #324]	; (8000cfc <MX_GPIO_Init+0x24c>)
 8000bb6:	f002 f829 	bl	8002c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000bc0:	484f      	ldr	r0, [pc, #316]	; (8000d00 <MX_GPIO_Init+0x250>)
 8000bc2:	f002 f823 	bl	8002c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000bcc:	484d      	ldr	r0, [pc, #308]	; (8000d04 <MX_GPIO_Init+0x254>)
 8000bce:	f002 f81d 	bl	8002c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000bd2:	2316      	movs	r3, #22
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be6:	4619      	mov	r1, r3
 8000be8:	4843      	ldr	r0, [pc, #268]	; (8000cf8 <MX_GPIO_Init+0x248>)
 8000bea:	f001 fd57 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000bee:	f248 0307 	movw	r3, #32775	; 0x8007
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bf4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c02:	4619      	mov	r1, r3
 8000c04:	483d      	ldr	r0, [pc, #244]	; (8000cfc <MX_GPIO_Init+0x24c>)
 8000c06:	f001 fd49 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000c0a:	2380      	movs	r3, #128	; 0x80
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4836      	ldr	r0, [pc, #216]	; (8000cfc <MX_GPIO_Init+0x24c>)
 8000c22:	f001 fd3b 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000c26:	2320      	movs	r3, #32
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c2a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c38:	4619      	mov	r1, r3
 8000c3a:	482f      	ldr	r0, [pc, #188]	; (8000cf8 <MX_GPIO_Init+0x248>)
 8000c3c:	f001 fd2e 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c40:	2304      	movs	r3, #4
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c50:	4619      	mov	r1, r3
 8000c52:	482d      	ldr	r0, [pc, #180]	; (8000d08 <MX_GPIO_Init+0x258>)
 8000c54:	f001 fd22 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000c58:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000c6a:	230c      	movs	r3, #12
 8000c6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c72:	4619      	mov	r1, r3
 8000c74:	4824      	ldr	r0, [pc, #144]	; (8000d08 <MX_GPIO_Init+0x258>)
 8000c76:	f001 fd11 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000c7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	481e      	ldr	r0, [pc, #120]	; (8000d08 <MX_GPIO_Init+0x258>)
 8000c90:	f001 fd04 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000c94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4815      	ldr	r0, [pc, #84]	; (8000d00 <MX_GPIO_Init+0x250>)
 8000caa:	f001 fcf7 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000cae:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	480e      	ldr	r0, [pc, #56]	; (8000d00 <MX_GPIO_Init+0x250>)
 8000cc8:	f001 fce8 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000ccc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4807      	ldr	r0, [pc, #28]	; (8000d04 <MX_GPIO_Init+0x254>)
 8000ce6:	f001 fcd9 	bl	800269c <HAL_GPIO_Init>

}
 8000cea:	bf00      	nop
 8000cec:	3738      	adds	r7, #56	; 0x38
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40020800 	.word	0x40020800
 8000cfc:	40020000 	.word	0x40020000
 8000d00:	40020c00 	.word	0x40020c00
 8000d04:	40021800 	.word	0x40021800
 8000d08:	40020400 	.word	0x40020400

08000d0c <LayerPositionRelative>:
{
	  return HAL_LTDC_SetWindowPosition(&LtdcHandle, newX, newY, LayerIdx);
}

HAL_StatusTypeDef LayerPositionRelative(LTDC_HandleTypeDef *hltdc, uint32_t X, uint32_t Y, uint32_t LayerIdx)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
 8000d18:	603b      	str	r3, [r7, #0]
	  LTDC_LayerCfgTypeDef *pLayerCfg;

	  /* Get layer configuration from handle structure */
	  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	2234      	movs	r2, #52	; 0x34
 8000d1e:	fb02 f303 	mul.w	r3, r2, r3
 8000d22:	3338      	adds	r3, #56	; 0x38
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	4413      	add	r3, r2
 8000d28:	617b      	str	r3, [r7, #20]

	  return HAL_LTDC_SetWindowPosition(&LtdcHandle, pLayerCfg->WindowX0 + X, pLayerCfg->WindowY0 + Y, LayerIdx);
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	18d1      	adds	r1, r2, r3
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	689a      	ldr	r2, [r3, #8]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	441a      	add	r2, r3
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	4803      	ldr	r0, [pc, #12]	; (8000d4c <LayerPositionRelative+0x40>)
 8000d3e:	f002 fb05 	bl	800334c <HAL_LTDC_SetWindowPosition>
 8000d42:	4603      	mov	r3, r0
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000614 	.word	0x20000614

08000d50 <HAL_LTDC_ReloadEventCallback>:

void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  ReloadFlag = 1;
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <HAL_LTDC_ReloadEventCallback+0x1c>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	601a      	str	r2, [r3, #0]
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	200007f4 	.word	0x200007f4

08000d70 <LCD_Config>:

static void LCD_Config(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* Initialization of ILI9341 component*/
  ili9341_Init();
 8000d74:	f000 fde5 	bl	8001942 <ili9341_Init>

/* LTDC Initialization -------------------------------------------------------*/

  /* Polarity configuration */
  /* Initialize the horizontal synchronization polarity as active low */
  LtdcHandle.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000d78:	4b98      	ldr	r3, [pc, #608]	; (8000fdc <LCD_Config+0x26c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	605a      	str	r2, [r3, #4]
  /* Initialize the vertical synchronization polarity as active low */
  LtdcHandle.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000d7e:	4b97      	ldr	r3, [pc, #604]	; (8000fdc <LCD_Config+0x26c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  /* Initialize the data enable polarity as active low */
  LtdcHandle.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000d84:	4b95      	ldr	r3, [pc, #596]	; (8000fdc <LCD_Config+0x26c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  /* Initialize the pixel clock polarity as input pixel clock */
  LtdcHandle.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000d8a:	4b94      	ldr	r3, [pc, #592]	; (8000fdc <LCD_Config+0x26c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
      VFP=4 (327-320-2-2+1)
  */

  /* Timing configuration */
  /* Horizontal synchronization width = Hsync - 1 */
  LtdcHandle.Init.HorizontalSync = 9;
 8000d90:	4b92      	ldr	r3, [pc, #584]	; (8000fdc <LCD_Config+0x26c>)
 8000d92:	2209      	movs	r2, #9
 8000d94:	615a      	str	r2, [r3, #20]
  /* Vertical synchronization height = Vsync - 1 */
  LtdcHandle.Init.VerticalSync = 1;
 8000d96:	4b91      	ldr	r3, [pc, #580]	; (8000fdc <LCD_Config+0x26c>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	619a      	str	r2, [r3, #24]
  /* Accumulated horizontal back porch = Hsync + HBP - 1 */
  LtdcHandle.Init.AccumulatedHBP = 29;
 8000d9c:	4b8f      	ldr	r3, [pc, #572]	; (8000fdc <LCD_Config+0x26c>)
 8000d9e:	221d      	movs	r2, #29
 8000da0:	61da      	str	r2, [r3, #28]
  /* Accumulated vertical back porch = Vsync + VBP - 1 */
  LtdcHandle.Init.AccumulatedVBP = 3;
 8000da2:	4b8e      	ldr	r3, [pc, #568]	; (8000fdc <LCD_Config+0x26c>)
 8000da4:	2203      	movs	r2, #3
 8000da6:	621a      	str	r2, [r3, #32]
  /* Accumulated active width = Hsync + HBP + Active Width - 1 */
  LtdcHandle.Init.AccumulatedActiveH = 323;
 8000da8:	4b8c      	ldr	r3, [pc, #560]	; (8000fdc <LCD_Config+0x26c>)
 8000daa:	f240 1243 	movw	r2, #323	; 0x143
 8000dae:	629a      	str	r2, [r3, #40]	; 0x28
  /* Accumulated active height = Vsync + VBP + Active Height - 1 */
  LtdcHandle.Init.AccumulatedActiveW = 269;
 8000db0:	4b8a      	ldr	r3, [pc, #552]	; (8000fdc <LCD_Config+0x26c>)
 8000db2:	f240 120d 	movw	r2, #269	; 0x10d
 8000db6:	625a      	str	r2, [r3, #36]	; 0x24
  /* Total height = Vsync + VBP + Active Height + VFP - 1 */
  LtdcHandle.Init.TotalHeigh = 327;
 8000db8:	4b88      	ldr	r3, [pc, #544]	; (8000fdc <LCD_Config+0x26c>)
 8000dba:	f240 1247 	movw	r2, #327	; 0x147
 8000dbe:	631a      	str	r2, [r3, #48]	; 0x30
  /* Total width = Hsync + HBP + Active Width + HFP - 1 */
  LtdcHandle.Init.TotalWidth = 279;
 8000dc0:	4b86      	ldr	r3, [pc, #536]	; (8000fdc <LCD_Config+0x26c>)
 8000dc2:	f240 1217 	movw	r2, #279	; 0x117
 8000dc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configure R,G,B component values for LCD background color */
  LtdcHandle.Init.Backcolor.Blue = 0;
 8000dc8:	4b84      	ldr	r3, [pc, #528]	; (8000fdc <LCD_Config+0x26c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  LtdcHandle.Init.Backcolor.Green = 0;
 8000dd0:	4b82      	ldr	r3, [pc, #520]	; (8000fdc <LCD_Config+0x26c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  LtdcHandle.Init.Backcolor.Red = 0;
 8000dd8:	4b80      	ldr	r3, [pc, #512]	; (8000fdc <LCD_Config+0x26c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  LtdcHandle.Instance = LTDC;
 8000de0:	4b7e      	ldr	r3, [pc, #504]	; (8000fdc <LCD_Config+0x26c>)
 8000de2:	4a7f      	ldr	r2, [pc, #508]	; (8000fe0 <LCD_Config+0x270>)
 8000de4:	601a      	str	r2, [r3, #0]

/* Player 1 Configuration ------------------------------------------------------*/

  /* Windowing configuration */
  pLayerCfg_Player1.WindowX0 = 10;
 8000de6:	4b7f      	ldr	r3, [pc, #508]	; (8000fe4 <LCD_Config+0x274>)
 8000de8:	220a      	movs	r2, #10
 8000dea:	601a      	str	r2, [r3, #0]
  pLayerCfg_Player1.WindowX1 = 19;
 8000dec:	4b7d      	ldr	r3, [pc, #500]	; (8000fe4 <LCD_Config+0x274>)
 8000dee:	2213      	movs	r2, #19
 8000df0:	605a      	str	r2, [r3, #4]
  pLayerCfg_Player1.WindowY0 = 10;
 8000df2:	4b7c      	ldr	r3, [pc, #496]	; (8000fe4 <LCD_Config+0x274>)
 8000df4:	220a      	movs	r2, #10
 8000df6:	609a      	str	r2, [r3, #8]
  pLayerCfg_Player1.WindowY1 = 19;
 8000df8:	4b7a      	ldr	r3, [pc, #488]	; (8000fe4 <LCD_Config+0x274>)
 8000dfa:	2213      	movs	r2, #19
 8000dfc:	60da      	str	r2, [r3, #12]

  /* Pixel Format configuration*/
  pLayerCfg_Player1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000dfe:	4b79      	ldr	r3, [pc, #484]	; (8000fe4 <LCD_Config+0x274>)
 8000e00:	2202      	movs	r2, #2
 8000e02:	611a      	str	r2, [r3, #16]

  /* Start Address configuration : frame buffer is located at FLASH memory */
  pLayerCfg_Player1.FBStartAdress = (uint32_t)&Ball;
 8000e04:	4a78      	ldr	r2, [pc, #480]	; (8000fe8 <LCD_Config+0x278>)
 8000e06:	4b77      	ldr	r3, [pc, #476]	; (8000fe4 <LCD_Config+0x274>)
 8000e08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Alpha constant (255 totally opaque) */
  pLayerCfg_Player1.Alpha = 255;
 8000e0a:	4b76      	ldr	r3, [pc, #472]	; (8000fe4 <LCD_Config+0x274>)
 8000e0c:	22ff      	movs	r2, #255	; 0xff
 8000e0e:	615a      	str	r2, [r3, #20]

  /* Default Color configuration (configure A,R,G,B component values) */
  pLayerCfg_Player1.Alpha0 = 0;
 8000e10:	4b74      	ldr	r3, [pc, #464]	; (8000fe4 <LCD_Config+0x274>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	619a      	str	r2, [r3, #24]
  pLayerCfg_Player1.Backcolor.Blue = 0;
 8000e16:	4b73      	ldr	r3, [pc, #460]	; (8000fe4 <LCD_Config+0x274>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pLayerCfg_Player1.Backcolor.Green = 0;
 8000e1e:	4b71      	ldr	r3, [pc, #452]	; (8000fe4 <LCD_Config+0x274>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  pLayerCfg_Player1.Backcolor.Red = 0;
 8000e26:	4b6f      	ldr	r3, [pc, #444]	; (8000fe4 <LCD_Config+0x274>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  /* Configure blending factors */
  pLayerCfg_Player1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000e2e:	4b6d      	ldr	r3, [pc, #436]	; (8000fe4 <LCD_Config+0x274>)
 8000e30:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000e34:	61da      	str	r2, [r3, #28]
  pLayerCfg_Player1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000e36:	4b6b      	ldr	r3, [pc, #428]	; (8000fe4 <LCD_Config+0x274>)
 8000e38:	2207      	movs	r2, #7
 8000e3a:	621a      	str	r2, [r3, #32]

  /* Configure the number of lines and number of pixels per line */
  pLayerCfg_Player1.ImageWidth = 9;
 8000e3c:	4b69      	ldr	r3, [pc, #420]	; (8000fe4 <LCD_Config+0x274>)
 8000e3e:	2209      	movs	r2, #9
 8000e40:	629a      	str	r2, [r3, #40]	; 0x28
  pLayerCfg_Player1.ImageHeight = 9;
 8000e42:	4b68      	ldr	r3, [pc, #416]	; (8000fe4 <LCD_Config+0x274>)
 8000e44:	2209      	movs	r2, #9
 8000e46:	62da      	str	r2, [r3, #44]	; 0x2c

/* Player 2 Configuration ------------------------------------------------------*/

  /* Windowing configuration */
  pLayerCfg_Player2.WindowX0 = 236;
 8000e48:	4b68      	ldr	r3, [pc, #416]	; (8000fec <LCD_Config+0x27c>)
 8000e4a:	22ec      	movs	r2, #236	; 0xec
 8000e4c:	601a      	str	r2, [r3, #0]
  pLayerCfg_Player2.WindowX1 = 238;
 8000e4e:	4b67      	ldr	r3, [pc, #412]	; (8000fec <LCD_Config+0x27c>)
 8000e50:	22ee      	movs	r2, #238	; 0xee
 8000e52:	605a      	str	r2, [r3, #4]
  pLayerCfg_Player2.WindowY0 = 326;
 8000e54:	4b65      	ldr	r3, [pc, #404]	; (8000fec <LCD_Config+0x27c>)
 8000e56:	f44f 72a3 	mov.w	r2, #326	; 0x146
 8000e5a:	609a      	str	r2, [r3, #8]
  pLayerCfg_Player2.WindowY1 = 328;
 8000e5c:	4b63      	ldr	r3, [pc, #396]	; (8000fec <LCD_Config+0x27c>)
 8000e5e:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000e62:	60da      	str	r2, [r3, #12]

  /* Pixel Format configuration*/
  pLayerCfg_Player2.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000e64:	4b61      	ldr	r3, [pc, #388]	; (8000fec <LCD_Config+0x27c>)
 8000e66:	2202      	movs	r2, #2
 8000e68:	611a      	str	r2, [r3, #16]

  /* Start Address configuration : frame buffer is located at FLASH memory */
  pLayerCfg_Player2.FBStartAdress = (uint32_t)&Icon_Player_2;
 8000e6a:	4a61      	ldr	r2, [pc, #388]	; (8000ff0 <LCD_Config+0x280>)
 8000e6c:	4b5f      	ldr	r3, [pc, #380]	; (8000fec <LCD_Config+0x27c>)
 8000e6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Alpha constant (255 totally opaque) */
  pLayerCfg_Player2.Alpha = 255;
 8000e70:	4b5e      	ldr	r3, [pc, #376]	; (8000fec <LCD_Config+0x27c>)
 8000e72:	22ff      	movs	r2, #255	; 0xff
 8000e74:	615a      	str	r2, [r3, #20]

  /* Default Color configuration (configure A,R,G,B component values) */
  pLayerCfg_Player2.Alpha0 = 0;
 8000e76:	4b5d      	ldr	r3, [pc, #372]	; (8000fec <LCD_Config+0x27c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  pLayerCfg_Player2.Backcolor.Blue = 0;
 8000e7c:	4b5b      	ldr	r3, [pc, #364]	; (8000fec <LCD_Config+0x27c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pLayerCfg_Player2.Backcolor.Green = 0;
 8000e84:	4b59      	ldr	r3, [pc, #356]	; (8000fec <LCD_Config+0x27c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  pLayerCfg_Player2.Backcolor.Red = 0;
 8000e8c:	4b57      	ldr	r3, [pc, #348]	; (8000fec <LCD_Config+0x27c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  /* Configure blending factors */
  pLayerCfg_Player2.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000e94:	4b55      	ldr	r3, [pc, #340]	; (8000fec <LCD_Config+0x27c>)
 8000e96:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000e9a:	61da      	str	r2, [r3, #28]
  pLayerCfg_Player2.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000e9c:	4b53      	ldr	r3, [pc, #332]	; (8000fec <LCD_Config+0x27c>)
 8000e9e:	2207      	movs	r2, #7
 8000ea0:	621a      	str	r2, [r3, #32]

  /* Configure the number of lines and number of pixels per line */
  pLayerCfg_Player2.ImageWidth = 2;
 8000ea2:	4b52      	ldr	r3, [pc, #328]	; (8000fec <LCD_Config+0x27c>)
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	629a      	str	r2, [r3, #40]	; 0x28
  pLayerCfg_Player2.ImageHeight = 2;
 8000ea8:	4b50      	ldr	r3, [pc, #320]	; (8000fec <LCD_Config+0x27c>)
 8000eaa:	2202      	movs	r2, #2
 8000eac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Ball Configuration ------------------------------------------------------*/

    /* Windowing configuration */
    pLayerCfg_Ball.WindowX0 = 180;
 8000eae:	4b51      	ldr	r3, [pc, #324]	; (8000ff4 <LCD_Config+0x284>)
 8000eb0:	22b4      	movs	r2, #180	; 0xb4
 8000eb2:	601a      	str	r2, [r3, #0]
    pLayerCfg_Ball.WindowX1 = 189;
 8000eb4:	4b4f      	ldr	r3, [pc, #316]	; (8000ff4 <LCD_Config+0x284>)
 8000eb6:	22bd      	movs	r2, #189	; 0xbd
 8000eb8:	605a      	str	r2, [r3, #4]
    pLayerCfg_Ball.WindowY0 = 180;
 8000eba:	4b4e      	ldr	r3, [pc, #312]	; (8000ff4 <LCD_Config+0x284>)
 8000ebc:	22b4      	movs	r2, #180	; 0xb4
 8000ebe:	609a      	str	r2, [r3, #8]
    pLayerCfg_Ball.WindowY1 = 189;
 8000ec0:	4b4c      	ldr	r3, [pc, #304]	; (8000ff4 <LCD_Config+0x284>)
 8000ec2:	22bd      	movs	r2, #189	; 0xbd
 8000ec4:	60da      	str	r2, [r3, #12]

    /* Pixel Format configuration*/
    pLayerCfg_Ball.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000ec6:	4b4b      	ldr	r3, [pc, #300]	; (8000ff4 <LCD_Config+0x284>)
 8000ec8:	2202      	movs	r2, #2
 8000eca:	611a      	str	r2, [r3, #16]

    /* Start Address configuration : frame buffer is located at FLASH memory */
    pLayerCfg_Ball.FBStartAdress = (uint32_t)&Ball;
 8000ecc:	4a46      	ldr	r2, [pc, #280]	; (8000fe8 <LCD_Config+0x278>)
 8000ece:	4b49      	ldr	r3, [pc, #292]	; (8000ff4 <LCD_Config+0x284>)
 8000ed0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Alpha constant (255 totally opaque) */
    pLayerCfg_Ball.Alpha = 255;
 8000ed2:	4b48      	ldr	r3, [pc, #288]	; (8000ff4 <LCD_Config+0x284>)
 8000ed4:	22ff      	movs	r2, #255	; 0xff
 8000ed6:	615a      	str	r2, [r3, #20]

    /* Default Color configuration (configure A,R,G,B component values) */
    pLayerCfg_Ball.Alpha0 = 0;
 8000ed8:	4b46      	ldr	r3, [pc, #280]	; (8000ff4 <LCD_Config+0x284>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	619a      	str	r2, [r3, #24]
    pLayerCfg_Ball.Backcolor.Blue = 0;
 8000ede:	4b45      	ldr	r3, [pc, #276]	; (8000ff4 <LCD_Config+0x284>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    pLayerCfg_Ball.Backcolor.Green = 0;
 8000ee6:	4b43      	ldr	r3, [pc, #268]	; (8000ff4 <LCD_Config+0x284>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    pLayerCfg_Ball.Backcolor.Red = 0;
 8000eee:	4b41      	ldr	r3, [pc, #260]	; (8000ff4 <LCD_Config+0x284>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

    /* Configure blending factors */
    pLayerCfg_Ball.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000ef6:	4b3f      	ldr	r3, [pc, #252]	; (8000ff4 <LCD_Config+0x284>)
 8000ef8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000efc:	61da      	str	r2, [r3, #28]
    pLayerCfg_Ball.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000efe:	4b3d      	ldr	r3, [pc, #244]	; (8000ff4 <LCD_Config+0x284>)
 8000f00:	2207      	movs	r2, #7
 8000f02:	621a      	str	r2, [r3, #32]

    /* Configure the number of lines and number of pixels per line */
    pLayerCfg_Ball.ImageWidth = 9;
 8000f04:	4b3b      	ldr	r3, [pc, #236]	; (8000ff4 <LCD_Config+0x284>)
 8000f06:	2209      	movs	r2, #9
 8000f08:	629a      	str	r2, [r3, #40]	; 0x28
    pLayerCfg_Ball.ImageHeight = 9;
 8000f0a:	4b3a      	ldr	r3, [pc, #232]	; (8000ff4 <LCD_Config+0x284>)
 8000f0c:	2209      	movs	r2, #9
 8000f0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Interface Configuration ------------------------------------------------------*/

      /* Windowing configuration */
      pLayerCfg_Interface.WindowX0 = 236;
 8000f10:	4b39      	ldr	r3, [pc, #228]	; (8000ff8 <LCD_Config+0x288>)
 8000f12:	22ec      	movs	r2, #236	; 0xec
 8000f14:	601a      	str	r2, [r3, #0]
      pLayerCfg_Interface.WindowX1 = 238;
 8000f16:	4b38      	ldr	r3, [pc, #224]	; (8000ff8 <LCD_Config+0x288>)
 8000f18:	22ee      	movs	r2, #238	; 0xee
 8000f1a:	605a      	str	r2, [r3, #4]
      pLayerCfg_Interface.WindowY0 = 326;
 8000f1c:	4b36      	ldr	r3, [pc, #216]	; (8000ff8 <LCD_Config+0x288>)
 8000f1e:	f44f 72a3 	mov.w	r2, #326	; 0x146
 8000f22:	609a      	str	r2, [r3, #8]
      pLayerCfg_Interface.WindowY1 = 328;
 8000f24:	4b34      	ldr	r3, [pc, #208]	; (8000ff8 <LCD_Config+0x288>)
 8000f26:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8000f2a:	60da      	str	r2, [r3, #12]

      /* Pixel Format configuration*/
      pLayerCfg_Interface.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000f2c:	4b32      	ldr	r3, [pc, #200]	; (8000ff8 <LCD_Config+0x288>)
 8000f2e:	2202      	movs	r2, #2
 8000f30:	611a      	str	r2, [r3, #16]

      /* Start Address configuration : frame buffer is located at FLASH memory */
      pLayerCfg_Interface.FBStartAdress = (uint32_t)&Interface;
 8000f32:	4a32      	ldr	r2, [pc, #200]	; (8000ffc <LCD_Config+0x28c>)
 8000f34:	4b30      	ldr	r3, [pc, #192]	; (8000ff8 <LCD_Config+0x288>)
 8000f36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Alpha constant (255 totally opaque) */
      pLayerCfg_Interface.Alpha = 255;
 8000f38:	4b2f      	ldr	r3, [pc, #188]	; (8000ff8 <LCD_Config+0x288>)
 8000f3a:	22ff      	movs	r2, #255	; 0xff
 8000f3c:	615a      	str	r2, [r3, #20]

      /* Default Color configuration (configure A,R,G,B component values) */
      pLayerCfg_Interface.Alpha0 = 0;
 8000f3e:	4b2e      	ldr	r3, [pc, #184]	; (8000ff8 <LCD_Config+0x288>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
      pLayerCfg_Interface.Backcolor.Blue = 0;
 8000f44:	4b2c      	ldr	r3, [pc, #176]	; (8000ff8 <LCD_Config+0x288>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      pLayerCfg_Interface.Backcolor.Green = 0;
 8000f4c:	4b2a      	ldr	r3, [pc, #168]	; (8000ff8 <LCD_Config+0x288>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      pLayerCfg_Interface.Backcolor.Red = 0;
 8000f54:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <LCD_Config+0x288>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

      /* Configure blending factors */
      pLayerCfg_Interface.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000f5c:	4b26      	ldr	r3, [pc, #152]	; (8000ff8 <LCD_Config+0x288>)
 8000f5e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000f62:	61da      	str	r2, [r3, #28]
      pLayerCfg_Interface.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000f64:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <LCD_Config+0x288>)
 8000f66:	2207      	movs	r2, #7
 8000f68:	621a      	str	r2, [r3, #32]

      /* Configure the number of lines and number of pixels per line */
      pLayerCfg_Interface.ImageWidth = 2;
 8000f6a:	4b23      	ldr	r3, [pc, #140]	; (8000ff8 <LCD_Config+0x288>)
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	629a      	str	r2, [r3, #40]	; 0x28
      pLayerCfg_Interface.ImageHeight = 2;
 8000f70:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <LCD_Config+0x288>)
 8000f72:	2202      	movs	r2, #2
 8000f74:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configure the LTDC */
  if(HAL_LTDC_Init(&LtdcHandle) != HAL_OK)
 8000f76:	4819      	ldr	r0, [pc, #100]	; (8000fdc <LCD_Config+0x26c>)
 8000f78:	f002 f822 	bl	8002fc0 <HAL_LTDC_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <LCD_Config+0x216>
  {
    /* Initialization Error */
    Error_Handler();
 8000f82:	f000 f881 	bl	8001088 <Error_Handler>
  }

  /* Configure the Player 1 Layer*/
  if(HAL_LTDC_ConfigLayer(&LtdcHandle, &pLayerCfg_Player1, 0) != HAL_OK)
 8000f86:	2200      	movs	r2, #0
 8000f88:	4916      	ldr	r1, [pc, #88]	; (8000fe4 <LCD_Config+0x274>)
 8000f8a:	4814      	ldr	r0, [pc, #80]	; (8000fdc <LCD_Config+0x26c>)
 8000f8c:	f002 f9a0 	bl	80032d0 <HAL_LTDC_ConfigLayer>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <LCD_Config+0x22a>
  {
    /* Initialization Error */
    Error_Handler();
 8000f96:	f000 f877 	bl	8001088 <Error_Handler>
  }

  /* Configure the Player 2 Layer*/
  if(HAL_LTDC_ConfigLayer(&LtdcHandle, &pLayerCfg_Player2, 1) != HAL_OK)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4913      	ldr	r1, [pc, #76]	; (8000fec <LCD_Config+0x27c>)
 8000f9e:	480f      	ldr	r0, [pc, #60]	; (8000fdc <LCD_Config+0x26c>)
 8000fa0:	f002 f996 	bl	80032d0 <HAL_LTDC_ConfigLayer>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <LCD_Config+0x23e>
  {
    /* Initialization Error */
    Error_Handler();
 8000faa:	f000 f86d 	bl	8001088 <Error_Handler>
  }

  /* Configure the Ball Layer*/
  if(HAL_LTDC_ConfigLayer(&LtdcHandle, &pLayerCfg_Ball, 2) != HAL_OK)
 8000fae:	2202      	movs	r2, #2
 8000fb0:	4910      	ldr	r1, [pc, #64]	; (8000ff4 <LCD_Config+0x284>)
 8000fb2:	480a      	ldr	r0, [pc, #40]	; (8000fdc <LCD_Config+0x26c>)
 8000fb4:	f002 f98c 	bl	80032d0 <HAL_LTDC_ConfigLayer>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <LCD_Config+0x252>
  {
    /* Initialization Error */
    Error_Handler();
 8000fbe:	f000 f863 	bl	8001088 <Error_Handler>
  }

  /* Configure the Interface Layer*/
  if(HAL_LTDC_ConfigLayer(&LtdcHandle, &pLayerCfg_Interface, 3) != HAL_OK)
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <LCD_Config+0x288>)
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <LCD_Config+0x26c>)
 8000fc8:	f002 f982 	bl	80032d0 <HAL_LTDC_ConfigLayer>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <LCD_Config+0x266>
  {
    /* Initialization Error */
    Error_Handler();
 8000fd2:	f000 f859 	bl	8001088 <Error_Handler>
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000614 	.word	0x20000614
 8000fe0:	40016800 	.word	0x40016800
 8000fe4:	20000724 	.word	0x20000724
 8000fe8:	08007924 	.word	0x08007924
 8000fec:	20000758 	.word	0x20000758
 8000ff0:	0800791c 	.word	0x0800791c
 8000ff4:	2000078c 	.word	0x2000078c
 8000ff8:	200007c0 	.word	0x200007c0
 8000ffc:	080079c8 	.word	0x080079c8

08001000 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  LayerPositionRelative(&LtdcHandle, 50 , 0, 0);
 8001008:	2300      	movs	r3, #0
 800100a:	2200      	movs	r2, #0
 800100c:	2132      	movs	r1, #50	; 0x32
 800100e:	4814      	ldr	r0, [pc, #80]	; (8001060 <StartDefaultTask+0x60>)
 8001010:	f7ff fe7c 	bl	8000d0c <LayerPositionRelative>
	  HAL_Delay(1000);
 8001014:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001018:	f000 ffa0 	bl	8001f5c <HAL_Delay>
	  LayerPositionRelative(&LtdcHandle, 0 ,50, 0);
 800101c:	2300      	movs	r3, #0
 800101e:	2232      	movs	r2, #50	; 0x32
 8001020:	2100      	movs	r1, #0
 8001022:	480f      	ldr	r0, [pc, #60]	; (8001060 <StartDefaultTask+0x60>)
 8001024:	f7ff fe72 	bl	8000d0c <LayerPositionRelative>
	  HAL_Delay(1000);
 8001028:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800102c:	f000 ff96 	bl	8001f5c <HAL_Delay>
	  LayerPositionRelative(&LtdcHandle, -50 ,0, 0);
 8001030:	2300      	movs	r3, #0
 8001032:	2200      	movs	r2, #0
 8001034:	f06f 0131 	mvn.w	r1, #49	; 0x31
 8001038:	4809      	ldr	r0, [pc, #36]	; (8001060 <StartDefaultTask+0x60>)
 800103a:	f7ff fe67 	bl	8000d0c <LayerPositionRelative>
	  HAL_Delay(1000);
 800103e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001042:	f000 ff8b 	bl	8001f5c <HAL_Delay>
	  LayerPositionRelative(&LtdcHandle, 0 ,-50, 0);
 8001046:	2300      	movs	r3, #0
 8001048:	f06f 0231 	mvn.w	r2, #49	; 0x31
 800104c:	2100      	movs	r1, #0
 800104e:	4804      	ldr	r0, [pc, #16]	; (8001060 <StartDefaultTask+0x60>)
 8001050:	f7ff fe5c 	bl	8000d0c <LayerPositionRelative>
	  HAL_Delay(1000);
 8001054:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001058:	f000 ff80 	bl	8001f5c <HAL_Delay>
	  LayerPositionRelative(&LtdcHandle, 50 , 0, 0);
 800105c:	e7d4      	b.n	8001008 <StartDefaultTask+0x8>
 800105e:	bf00      	nop
 8001060:	20000614 	.word	0x20000614

08001064 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a04      	ldr	r2, [pc, #16]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d101      	bne.n	800107a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001076:	f000 ff51 	bl	8001f1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40001000 	.word	0x40001000

08001088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800108c:	b672      	cpsid	i
}
 800108e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001090:	e7fe      	b.n	8001090 <Error_Handler+0x8>
	...

08001094 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_MspInit+0x54>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <HAL_MspInit+0x54>)
 80010a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a8:	6453      	str	r3, [r2, #68]	; 0x44
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <HAL_MspInit+0x54>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <HAL_MspInit+0x54>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <HAL_MspInit+0x54>)
 80010c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c4:	6413      	str	r3, [r2, #64]	; 0x40
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <HAL_MspInit+0x54>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	210f      	movs	r1, #15
 80010d6:	f06f 0001 	mvn.w	r0, #1
 80010da:	f001 f81b 	bl	8002114 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800

080010ec <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <HAL_CRC_MspInit+0x3c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d10d      	bne.n	800111a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	4b0a      	ldr	r3, [pc, #40]	; (800112c <HAL_CRC_MspInit+0x40>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a09      	ldr	r2, [pc, #36]	; (800112c <HAL_CRC_MspInit+0x40>)
 8001108:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <HAL_CRC_MspInit+0x40>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800111a:	bf00      	nop
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40023000 	.word	0x40023000
 800112c:	40023800 	.word	0x40023800

08001130 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <HAL_DMA2D_MspInit+0x48>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d115      	bne.n	800116e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b0d      	ldr	r3, [pc, #52]	; (800117c <HAL_DMA2D_MspInit+0x4c>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a0c      	ldr	r2, [pc, #48]	; (800117c <HAL_DMA2D_MspInit+0x4c>)
 800114c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <HAL_DMA2D_MspInit+0x4c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2105      	movs	r1, #5
 8001162:	205a      	movs	r0, #90	; 0x5a
 8001164:	f000 ffd6 	bl	8002114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001168:	205a      	movs	r0, #90	; 0x5a
 800116a:	f000 ffef 	bl	800214c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	4002b000 	.word	0x4002b000
 800117c:	40023800 	.word	0x40023800

08001180 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a29      	ldr	r2, [pc, #164]	; (8001244 <HAL_I2C_MspInit+0xc4>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d14b      	bne.n	800123a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	4b28      	ldr	r3, [pc, #160]	; (8001248 <HAL_I2C_MspInit+0xc8>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a27      	ldr	r2, [pc, #156]	; (8001248 <HAL_I2C_MspInit+0xc8>)
 80011ac:	f043 0304 	orr.w	r3, r3, #4
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b25      	ldr	r3, [pc, #148]	; (8001248 <HAL_I2C_MspInit+0xc8>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0304 	and.w	r3, r3, #4
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	4b21      	ldr	r3, [pc, #132]	; (8001248 <HAL_I2C_MspInit+0xc8>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a20      	ldr	r2, [pc, #128]	; (8001248 <HAL_I2C_MspInit+0xc8>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <HAL_I2C_MspInit+0xc8>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80011da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e0:	2312      	movs	r3, #18
 80011e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011ec:	2304      	movs	r3, #4
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	4815      	ldr	r0, [pc, #84]	; (800124c <HAL_I2C_MspInit+0xcc>)
 80011f8:	f001 fa50 	bl	800269c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80011fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001202:	2312      	movs	r3, #18
 8001204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001206:	2301      	movs	r3, #1
 8001208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800120e:	2304      	movs	r3, #4
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	480d      	ldr	r0, [pc, #52]	; (8001250 <HAL_I2C_MspInit+0xd0>)
 800121a:	f001 fa3f 	bl	800269c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <HAL_I2C_MspInit+0xc8>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	4a08      	ldr	r2, [pc, #32]	; (8001248 <HAL_I2C_MspInit+0xc8>)
 8001228:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800122c:	6413      	str	r3, [r2, #64]	; 0x40
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_I2C_MspInit+0xc8>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800123a:	bf00      	nop
 800123c:	3728      	adds	r7, #40	; 0x28
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40005c00 	.word	0x40005c00
 8001248:	40023800 	.word	0x40023800
 800124c:	40020800 	.word	0x40020800
 8001250:	40020000 	.word	0x40020000

08001254 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b09a      	sub	sp, #104	; 0x68
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800126c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001270:	2230      	movs	r2, #48	; 0x30
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f006 fa63 	bl	8007740 <memset>
  if(hltdc->Instance==LTDC)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a85      	ldr	r2, [pc, #532]	; (8001494 <HAL_LTDC_MspInit+0x240>)
 8001280:	4293      	cmp	r3, r2
 8001282:	f040 8103 	bne.w	800148c <HAL_LTDC_MspInit+0x238>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001286:	2308      	movs	r3, #8
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800128a:	23c0      	movs	r3, #192	; 0xc0
 800128c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800128e:	2304      	movs	r3, #4
 8001290:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8001292:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001296:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129c:	4618      	mov	r0, r3
 800129e:	f002 ff4d 	bl	800413c <HAL_RCCEx_PeriphCLKConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 80012a8:	f7ff feee 	bl	8001088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
 80012b0:	4b79      	ldr	r3, [pc, #484]	; (8001498 <HAL_LTDC_MspInit+0x244>)
 80012b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b4:	4a78      	ldr	r2, [pc, #480]	; (8001498 <HAL_LTDC_MspInit+0x244>)
 80012b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012ba:	6453      	str	r3, [r2, #68]	; 0x44
 80012bc:	4b76      	ldr	r3, [pc, #472]	; (8001498 <HAL_LTDC_MspInit+0x244>)
 80012be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012c4:	623b      	str	r3, [r7, #32]
 80012c6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
 80012cc:	4b72      	ldr	r3, [pc, #456]	; (8001498 <HAL_LTDC_MspInit+0x244>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d0:	4a71      	ldr	r2, [pc, #452]	; (8001498 <HAL_LTDC_MspInit+0x244>)
 80012d2:	f043 0320 	orr.w	r3, r3, #32
 80012d6:	6313      	str	r3, [r2, #48]	; 0x30
 80012d8:	4b6f      	ldr	r3, [pc, #444]	; (8001498 <HAL_LTDC_MspInit+0x244>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	f003 0320 	and.w	r3, r3, #32
 80012e0:	61fb      	str	r3, [r7, #28]
 80012e2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e4:	2300      	movs	r3, #0
 80012e6:	61bb      	str	r3, [r7, #24]
 80012e8:	4b6b      	ldr	r3, [pc, #428]	; (8001498 <HAL_LTDC_MspInit+0x244>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	4a6a      	ldr	r2, [pc, #424]	; (8001498 <HAL_LTDC_MspInit+0x244>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	6313      	str	r3, [r2, #48]	; 0x30
 80012f4:	4b68      	ldr	r3, [pc, #416]	; (8001498 <HAL_LTDC_MspInit+0x244>)
 80012f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	61bb      	str	r3, [r7, #24]
 80012fe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	4b64      	ldr	r3, [pc, #400]	; (8001498 <HAL_LTDC_MspInit+0x244>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001308:	4a63      	ldr	r2, [pc, #396]	; (8001498 <HAL_LTDC_MspInit+0x244>)
 800130a:	f043 0302 	orr.w	r3, r3, #2
 800130e:	6313      	str	r3, [r2, #48]	; 0x30
 8001310:	4b61      	ldr	r3, [pc, #388]	; (8001498 <HAL_LTDC_MspInit+0x244>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	4b5d      	ldr	r3, [pc, #372]	; (8001498 <HAL_LTDC_MspInit+0x244>)
 8001322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001324:	4a5c      	ldr	r2, [pc, #368]	; (8001498 <HAL_LTDC_MspInit+0x244>)
 8001326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800132a:	6313      	str	r3, [r2, #48]	; 0x30
 800132c:	4b5a      	ldr	r3, [pc, #360]	; (8001498 <HAL_LTDC_MspInit+0x244>)
 800132e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	4b56      	ldr	r3, [pc, #344]	; (8001498 <HAL_LTDC_MspInit+0x244>)
 800133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001340:	4a55      	ldr	r2, [pc, #340]	; (8001498 <HAL_LTDC_MspInit+0x244>)
 8001342:	f043 0304 	orr.w	r3, r3, #4
 8001346:	6313      	str	r3, [r2, #48]	; 0x30
 8001348:	4b53      	ldr	r3, [pc, #332]	; (8001498 <HAL_LTDC_MspInit+0x244>)
 800134a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001354:	2300      	movs	r3, #0
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	4b4f      	ldr	r3, [pc, #316]	; (8001498 <HAL_LTDC_MspInit+0x244>)
 800135a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135c:	4a4e      	ldr	r2, [pc, #312]	; (8001498 <HAL_LTDC_MspInit+0x244>)
 800135e:	f043 0308 	orr.w	r3, r3, #8
 8001362:	6313      	str	r3, [r2, #48]	; 0x30
 8001364:	4b4c      	ldr	r3, [pc, #304]	; (8001498 <HAL_LTDC_MspInit+0x244>)
 8001366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001368:	f003 0308 	and.w	r3, r3, #8
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001374:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001382:	230e      	movs	r3, #14
 8001384:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800138a:	4619      	mov	r1, r3
 800138c:	4843      	ldr	r0, [pc, #268]	; (800149c <HAL_LTDC_MspInit+0x248>)
 800138e:	f001 f985 	bl	800269c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001392:	f641 0358 	movw	r3, #6232	; 0x1858
 8001396:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013a4:	230e      	movs	r3, #14
 80013a6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013ac:	4619      	mov	r1, r3
 80013ae:	483c      	ldr	r0, [pc, #240]	; (80014a0 <HAL_LTDC_MspInit+0x24c>)
 80013b0:	f001 f974 	bl	800269c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80013b4:	2303      	movs	r3, #3
 80013b6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80013c4:	2309      	movs	r3, #9
 80013c6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013cc:	4619      	mov	r1, r3
 80013ce:	4835      	ldr	r0, [pc, #212]	; (80014a4 <HAL_LTDC_MspInit+0x250>)
 80013d0:	f001 f964 	bl	800269c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80013d4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80013d8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013e6:	230e      	movs	r3, #14
 80013e8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013ee:	4619      	mov	r1, r3
 80013f0:	482c      	ldr	r0, [pc, #176]	; (80014a4 <HAL_LTDC_MspInit+0x250>)
 80013f2:	f001 f953 	bl	800269c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80013f6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80013fa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001408:	230e      	movs	r3, #14
 800140a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800140c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001410:	4619      	mov	r1, r3
 8001412:	4825      	ldr	r0, [pc, #148]	; (80014a8 <HAL_LTDC_MspInit+0x254>)
 8001414:	f001 f942 	bl	800269c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001418:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800141c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800142a:	230e      	movs	r3, #14
 800142c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001432:	4619      	mov	r1, r3
 8001434:	481d      	ldr	r0, [pc, #116]	; (80014ac <HAL_LTDC_MspInit+0x258>)
 8001436:	f001 f931 	bl	800269c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800143a:	2348      	movs	r3, #72	; 0x48
 800143c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800144a:	230e      	movs	r3, #14
 800144c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800144e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001452:	4619      	mov	r1, r3
 8001454:	4816      	ldr	r0, [pc, #88]	; (80014b0 <HAL_LTDC_MspInit+0x25c>)
 8001456:	f001 f921 	bl	800269c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800145a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800145e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2300      	movs	r3, #0
 800146a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800146c:	2309      	movs	r3, #9
 800146e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001470:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001474:	4619      	mov	r1, r3
 8001476:	480c      	ldr	r0, [pc, #48]	; (80014a8 <HAL_LTDC_MspInit+0x254>)
 8001478:	f001 f910 	bl	800269c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800147c:	2200      	movs	r2, #0
 800147e:	2105      	movs	r1, #5
 8001480:	2058      	movs	r0, #88	; 0x58
 8001482:	f000 fe47 	bl	8002114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001486:	2058      	movs	r0, #88	; 0x58
 8001488:	f000 fe60 	bl	800214c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800148c:	bf00      	nop
 800148e:	3768      	adds	r7, #104	; 0x68
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40016800 	.word	0x40016800
 8001498:	40023800 	.word	0x40023800
 800149c:	40021400 	.word	0x40021400
 80014a0:	40020000 	.word	0x40020000
 80014a4:	40020400 	.word	0x40020400
 80014a8:	40021800 	.word	0x40021800
 80014ac:	40020800 	.word	0x40020800
 80014b0:	40020c00 	.word	0x40020c00

080014b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a19      	ldr	r2, [pc, #100]	; (8001538 <HAL_SPI_MspInit+0x84>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d12c      	bne.n	8001530 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	4b18      	ldr	r3, [pc, #96]	; (800153c <HAL_SPI_MspInit+0x88>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	4a17      	ldr	r2, [pc, #92]	; (800153c <HAL_SPI_MspInit+0x88>)
 80014e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014e4:	6453      	str	r3, [r2, #68]	; 0x44
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <HAL_SPI_MspInit+0x88>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <HAL_SPI_MspInit+0x88>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a10      	ldr	r2, [pc, #64]	; (800153c <HAL_SPI_MspInit+0x88>)
 80014fc:	f043 0320 	orr.w	r3, r3, #32
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <HAL_SPI_MspInit+0x88>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0320 	and.w	r3, r3, #32
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800150e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151c:	2300      	movs	r3, #0
 800151e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001520:	2305      	movs	r3, #5
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	4619      	mov	r1, r3
 800152a:	4805      	ldr	r0, [pc, #20]	; (8001540 <HAL_SPI_MspInit+0x8c>)
 800152c:	f001 f8b6 	bl	800269c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001530:	bf00      	nop
 8001532:	3728      	adds	r7, #40	; 0x28
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40015000 	.word	0x40015000
 800153c:	40023800 	.word	0x40023800
 8001540:	40021400 	.word	0x40021400

08001544 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a08      	ldr	r2, [pc, #32]	; (8001574 <HAL_SPI_MspDeInit+0x30>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d10a      	bne.n	800156c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <HAL_SPI_MspDeInit+0x34>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	4a07      	ldr	r2, [pc, #28]	; (8001578 <HAL_SPI_MspDeInit+0x34>)
 800155c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001560:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001562:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001566:	4805      	ldr	r0, [pc, #20]	; (800157c <HAL_SPI_MspDeInit+0x38>)
 8001568:	f001 fa44 	bl	80029f4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40015000 	.word	0x40015000
 8001578:	40023800 	.word	0x40023800
 800157c:	40021400 	.word	0x40021400

08001580 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0b      	ldr	r2, [pc, #44]	; (80015bc <HAL_TIM_Base_MspInit+0x3c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d10d      	bne.n	80015ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_TIM_Base_MspInit+0x40>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <HAL_TIM_Base_MspInit+0x40>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6453      	str	r3, [r2, #68]	; 0x44
 80015a2:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <HAL_TIM_Base_MspInit+0x40>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80015ae:	bf00      	nop
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40010000 	.word	0x40010000
 80015c0:	40023800 	.word	0x40023800

080015c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a1d      	ldr	r2, [pc, #116]	; (8001658 <HAL_UART_MspInit+0x94>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d134      	bne.n	8001650 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <HAL_UART_MspInit+0x98>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	4a1b      	ldr	r2, [pc, #108]	; (800165c <HAL_UART_MspInit+0x98>)
 80015f0:	f043 0310 	orr.w	r3, r3, #16
 80015f4:	6453      	str	r3, [r2, #68]	; 0x44
 80015f6:	4b19      	ldr	r3, [pc, #100]	; (800165c <HAL_UART_MspInit+0x98>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	f003 0310 	and.w	r3, r3, #16
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_UART_MspInit+0x98>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a14      	ldr	r2, [pc, #80]	; (800165c <HAL_UART_MspInit+0x98>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_UART_MspInit+0x98>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800161e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162c:	2303      	movs	r3, #3
 800162e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001630:	2307      	movs	r3, #7
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	4619      	mov	r1, r3
 800163a:	4809      	ldr	r0, [pc, #36]	; (8001660 <HAL_UART_MspInit+0x9c>)
 800163c:	f001 f82e 	bl	800269c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001640:	2200      	movs	r2, #0
 8001642:	2105      	movs	r1, #5
 8001644:	2025      	movs	r0, #37	; 0x25
 8001646:	f000 fd65 	bl	8002114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800164a:	2025      	movs	r0, #37	; 0x25
 800164c:	f000 fd7e 	bl	800214c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001650:	bf00      	nop
 8001652:	3728      	adds	r7, #40	; 0x28
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40011000 	.word	0x40011000
 800165c:	40023800 	.word	0x40023800
 8001660:	40020000 	.word	0x40020000

08001664 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001678:	4b3b      	ldr	r3, [pc, #236]	; (8001768 <HAL_FMC_MspInit+0x104>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d16f      	bne.n	8001760 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001680:	4b39      	ldr	r3, [pc, #228]	; (8001768 <HAL_FMC_MspInit+0x104>)
 8001682:	2201      	movs	r2, #1
 8001684:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	603b      	str	r3, [r7, #0]
 800168a:	4b38      	ldr	r3, [pc, #224]	; (800176c <HAL_FMC_MspInit+0x108>)
 800168c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168e:	4a37      	ldr	r2, [pc, #220]	; (800176c <HAL_FMC_MspInit+0x108>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6393      	str	r3, [r2, #56]	; 0x38
 8001696:	4b35      	ldr	r3, [pc, #212]	; (800176c <HAL_FMC_MspInit+0x108>)
 8001698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	603b      	str	r3, [r7, #0]
 80016a0:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80016a2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80016a6:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016b4:	230c      	movs	r3, #12
 80016b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	4619      	mov	r1, r3
 80016bc:	482c      	ldr	r0, [pc, #176]	; (8001770 <HAL_FMC_MspInit+0x10c>)
 80016be:	f000 ffed 	bl	800269c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80016c2:	2301      	movs	r3, #1
 80016c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ce:	2303      	movs	r3, #3
 80016d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016d2:	230c      	movs	r3, #12
 80016d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	4619      	mov	r1, r3
 80016da:	4826      	ldr	r0, [pc, #152]	; (8001774 <HAL_FMC_MspInit+0x110>)
 80016dc:	f000 ffde 	bl	800269c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80016e0:	f248 1333 	movw	r3, #33075	; 0x8133
 80016e4:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ee:	2303      	movs	r3, #3
 80016f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016f2:	230c      	movs	r3, #12
 80016f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	4619      	mov	r1, r3
 80016fa:	481f      	ldr	r0, [pc, #124]	; (8001778 <HAL_FMC_MspInit+0x114>)
 80016fc:	f000 ffce 	bl	800269c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001700:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001704:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001712:	230c      	movs	r3, #12
 8001714:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	4619      	mov	r1, r3
 800171a:	4818      	ldr	r0, [pc, #96]	; (800177c <HAL_FMC_MspInit+0x118>)
 800171c:	f000 ffbe 	bl	800269c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001720:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001724:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001732:	230c      	movs	r3, #12
 8001734:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	4619      	mov	r1, r3
 800173a:	4811      	ldr	r0, [pc, #68]	; (8001780 <HAL_FMC_MspInit+0x11c>)
 800173c:	f000 ffae 	bl	800269c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001740:	2360      	movs	r3, #96	; 0x60
 8001742:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174c:	2303      	movs	r3, #3
 800174e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001750:	230c      	movs	r3, #12
 8001752:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	4619      	mov	r1, r3
 8001758:	480a      	ldr	r0, [pc, #40]	; (8001784 <HAL_FMC_MspInit+0x120>)
 800175a:	f000 ff9f 	bl	800269c <HAL_GPIO_Init>
 800175e:	e000      	b.n	8001762 <HAL_FMC_MspInit+0xfe>
    return;
 8001760:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	200007f8 	.word	0x200007f8
 800176c:	40023800 	.word	0x40023800
 8001770:	40021400 	.word	0x40021400
 8001774:	40020800 	.word	0x40020800
 8001778:	40021800 	.word	0x40021800
 800177c:	40021000 	.word	0x40021000
 8001780:	40020c00 	.word	0x40020c00
 8001784:	40020400 	.word	0x40020400

08001788 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001790:	f7ff ff68 	bl	8001664 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08c      	sub	sp, #48	; 0x30
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	2036      	movs	r0, #54	; 0x36
 80017b2:	f000 fcaf 	bl	8002114 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017b6:	2036      	movs	r0, #54	; 0x36
 80017b8:	f000 fcc8 	bl	800214c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	4b1f      	ldr	r3, [pc, #124]	; (8001840 <HAL_InitTick+0xa4>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	4a1e      	ldr	r2, [pc, #120]	; (8001840 <HAL_InitTick+0xa4>)
 80017c6:	f043 0310 	orr.w	r3, r3, #16
 80017ca:	6413      	str	r3, [r2, #64]	; 0x40
 80017cc:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <HAL_InitTick+0xa4>)
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	f003 0310 	and.w	r3, r3, #16
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017d8:	f107 0210 	add.w	r2, r7, #16
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f002 fc78 	bl	80040d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80017e8:	f002 fc4e 	bl	8004088 <HAL_RCC_GetPCLK1Freq>
 80017ec:	4603      	mov	r3, r0
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f4:	4a13      	ldr	r2, [pc, #76]	; (8001844 <HAL_InitTick+0xa8>)
 80017f6:	fba2 2303 	umull	r2, r3, r2, r3
 80017fa:	0c9b      	lsrs	r3, r3, #18
 80017fc:	3b01      	subs	r3, #1
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <HAL_InitTick+0xac>)
 8001802:	4a12      	ldr	r2, [pc, #72]	; (800184c <HAL_InitTick+0xb0>)
 8001804:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <HAL_InitTick+0xac>)
 8001808:	f240 32e7 	movw	r2, #999	; 0x3e7
 800180c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800180e:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <HAL_InitTick+0xac>)
 8001810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001812:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <HAL_InitTick+0xac>)
 8001816:	2200      	movs	r2, #0
 8001818:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181a:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <HAL_InitTick+0xac>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001820:	4809      	ldr	r0, [pc, #36]	; (8001848 <HAL_InitTick+0xac>)
 8001822:	f003 f945 	bl	8004ab0 <HAL_TIM_Base_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d104      	bne.n	8001836 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800182c:	4806      	ldr	r0, [pc, #24]	; (8001848 <HAL_InitTick+0xac>)
 800182e:	f003 f98f 	bl	8004b50 <HAL_TIM_Base_Start_IT>
 8001832:	4603      	mov	r3, r0
 8001834:	e000      	b.n	8001838 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	3730      	adds	r7, #48	; 0x30
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40023800 	.word	0x40023800
 8001844:	431bde83 	.word	0x431bde83
 8001848:	200007fc 	.word	0x200007fc
 800184c:	40001000 	.word	0x40001000

08001850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <NMI_Handler+0x4>

08001856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185a:	e7fe      	b.n	800185a <HardFault_Handler+0x4>

0800185c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <MemManage_Handler+0x4>

08001862 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001866:	e7fe      	b.n	8001866 <BusFault_Handler+0x4>

08001868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800186c:	e7fe      	b.n	800186c <UsageFault_Handler+0x4>

0800186e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <USART1_IRQHandler+0x10>)
 8001882:	f003 fde5 	bl	8005450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000598 	.word	0x20000598

08001890 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <TIM6_DAC_IRQHandler+0x10>)
 8001896:	f003 f9cb 	bl	8004c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200007fc 	.word	0x200007fc

080018a4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <LTDC_IRQHandler+0x10>)
 80018aa:	f001 fc59 	bl	8003160 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200003e8 	.word	0x200003e8

080018b8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80018bc:	4802      	ldr	r0, [pc, #8]	; (80018c8 <DMA2D_IRQHandler+0x10>)
 80018be:	f000 fd4a 	bl	8002356 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000354 	.word	0x20000354

080018cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <SystemInit+0x20>)
 80018d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018d6:	4a05      	ldr	r2, [pc, #20]	; (80018ec <SystemInit+0x20>)
 80018d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <Reset_Handler>:
 80018f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001928 <LoopFillZerobss+0x12>
 80018f4:	480d      	ldr	r0, [pc, #52]	; (800192c <LoopFillZerobss+0x16>)
 80018f6:	490e      	ldr	r1, [pc, #56]	; (8001930 <LoopFillZerobss+0x1a>)
 80018f8:	4a0e      	ldr	r2, [pc, #56]	; (8001934 <LoopFillZerobss+0x1e>)
 80018fa:	2300      	movs	r3, #0
 80018fc:	e002      	b.n	8001904 <LoopCopyDataInit>

080018fe <CopyDataInit>:
 80018fe:	58d4      	ldr	r4, [r2, r3]
 8001900:	50c4      	str	r4, [r0, r3]
 8001902:	3304      	adds	r3, #4

08001904 <LoopCopyDataInit>:
 8001904:	18c4      	adds	r4, r0, r3
 8001906:	428c      	cmp	r4, r1
 8001908:	d3f9      	bcc.n	80018fe <CopyDataInit>
 800190a:	4a0b      	ldr	r2, [pc, #44]	; (8001938 <LoopFillZerobss+0x22>)
 800190c:	4c0b      	ldr	r4, [pc, #44]	; (800193c <LoopFillZerobss+0x26>)
 800190e:	2300      	movs	r3, #0
 8001910:	e001      	b.n	8001916 <LoopFillZerobss>

08001912 <FillZerobss>:
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	3204      	adds	r2, #4

08001916 <LoopFillZerobss>:
 8001916:	42a2      	cmp	r2, r4
 8001918:	d3fb      	bcc.n	8001912 <FillZerobss>
 800191a:	f7ff ffd7 	bl	80018cc <SystemInit>
 800191e:	f005 fee9 	bl	80076f4 <__libc_init_array>
 8001922:	f7fe fe1b 	bl	800055c <main>
 8001926:	4770      	bx	lr
 8001928:	20030000 	.word	0x20030000
 800192c:	20000000 	.word	0x20000000
 8001930:	20000078 	.word	0x20000078
 8001934:	08007a58 	.word	0x08007a58
 8001938:	20000078 	.word	0x20000078
 800193c:	20008a00 	.word	0x20008a00

08001940 <ADC_IRQHandler>:
 8001940:	e7fe      	b.n	8001940 <ADC_IRQHandler>

08001942 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001946:	f000 f9ff 	bl	8001d48 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800194a:	20ca      	movs	r0, #202	; 0xca
 800194c:	f000 f943 	bl	8001bd6 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001950:	20c3      	movs	r0, #195	; 0xc3
 8001952:	f000 f94d 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001956:	2008      	movs	r0, #8
 8001958:	f000 f94a 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 800195c:	2050      	movs	r0, #80	; 0x50
 800195e:	f000 f947 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001962:	20cf      	movs	r0, #207	; 0xcf
 8001964:	f000 f937 	bl	8001bd6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001968:	2000      	movs	r0, #0
 800196a:	f000 f941 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800196e:	20c1      	movs	r0, #193	; 0xc1
 8001970:	f000 f93e 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001974:	2030      	movs	r0, #48	; 0x30
 8001976:	f000 f93b 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800197a:	20ed      	movs	r0, #237	; 0xed
 800197c:	f000 f92b 	bl	8001bd6 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001980:	2064      	movs	r0, #100	; 0x64
 8001982:	f000 f935 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001986:	2003      	movs	r0, #3
 8001988:	f000 f932 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 800198c:	2012      	movs	r0, #18
 800198e:	f000 f92f 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001992:	2081      	movs	r0, #129	; 0x81
 8001994:	f000 f92c 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001998:	20e8      	movs	r0, #232	; 0xe8
 800199a:	f000 f91c 	bl	8001bd6 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 800199e:	2085      	movs	r0, #133	; 0x85
 80019a0:	f000 f926 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80019a4:	2000      	movs	r0, #0
 80019a6:	f000 f923 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80019aa:	2078      	movs	r0, #120	; 0x78
 80019ac:	f000 f920 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80019b0:	20cb      	movs	r0, #203	; 0xcb
 80019b2:	f000 f910 	bl	8001bd6 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80019b6:	2039      	movs	r0, #57	; 0x39
 80019b8:	f000 f91a 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80019bc:	202c      	movs	r0, #44	; 0x2c
 80019be:	f000 f917 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80019c2:	2000      	movs	r0, #0
 80019c4:	f000 f914 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80019c8:	2034      	movs	r0, #52	; 0x34
 80019ca:	f000 f911 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80019ce:	2002      	movs	r0, #2
 80019d0:	f000 f90e 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80019d4:	20f7      	movs	r0, #247	; 0xf7
 80019d6:	f000 f8fe 	bl	8001bd6 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80019da:	2020      	movs	r0, #32
 80019dc:	f000 f908 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80019e0:	20ea      	movs	r0, #234	; 0xea
 80019e2:	f000 f8f8 	bl	8001bd6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80019e6:	2000      	movs	r0, #0
 80019e8:	f000 f902 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80019ec:	2000      	movs	r0, #0
 80019ee:	f000 f8ff 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80019f2:	20b1      	movs	r0, #177	; 0xb1
 80019f4:	f000 f8ef 	bl	8001bd6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80019f8:	2000      	movs	r0, #0
 80019fa:	f000 f8f9 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80019fe:	201b      	movs	r0, #27
 8001a00:	f000 f8f6 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001a04:	20b6      	movs	r0, #182	; 0xb6
 8001a06:	f000 f8e6 	bl	8001bd6 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001a0a:	200a      	movs	r0, #10
 8001a0c:	f000 f8f0 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001a10:	20a2      	movs	r0, #162	; 0xa2
 8001a12:	f000 f8ed 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001a16:	20c0      	movs	r0, #192	; 0xc0
 8001a18:	f000 f8dd 	bl	8001bd6 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001a1c:	2010      	movs	r0, #16
 8001a1e:	f000 f8e7 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001a22:	20c1      	movs	r0, #193	; 0xc1
 8001a24:	f000 f8d7 	bl	8001bd6 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001a28:	2010      	movs	r0, #16
 8001a2a:	f000 f8e1 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001a2e:	20c5      	movs	r0, #197	; 0xc5
 8001a30:	f000 f8d1 	bl	8001bd6 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001a34:	2045      	movs	r0, #69	; 0x45
 8001a36:	f000 f8db 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001a3a:	2015      	movs	r0, #21
 8001a3c:	f000 f8d8 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001a40:	20c7      	movs	r0, #199	; 0xc7
 8001a42:	f000 f8c8 	bl	8001bd6 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001a46:	2090      	movs	r0, #144	; 0x90
 8001a48:	f000 f8d2 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001a4c:	2036      	movs	r0, #54	; 0x36
 8001a4e:	f000 f8c2 	bl	8001bd6 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001a52:	20c8      	movs	r0, #200	; 0xc8
 8001a54:	f000 f8cc 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001a58:	20f2      	movs	r0, #242	; 0xf2
 8001a5a:	f000 f8bc 	bl	8001bd6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f000 f8c6 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001a64:	20b0      	movs	r0, #176	; 0xb0
 8001a66:	f000 f8b6 	bl	8001bd6 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001a6a:	20c2      	movs	r0, #194	; 0xc2
 8001a6c:	f000 f8c0 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001a70:	20b6      	movs	r0, #182	; 0xb6
 8001a72:	f000 f8b0 	bl	8001bd6 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001a76:	200a      	movs	r0, #10
 8001a78:	f000 f8ba 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001a7c:	20a7      	movs	r0, #167	; 0xa7
 8001a7e:	f000 f8b7 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001a82:	2027      	movs	r0, #39	; 0x27
 8001a84:	f000 f8b4 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001a88:	2004      	movs	r0, #4
 8001a8a:	f000 f8b1 	bl	8001bf0 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001a8e:	202a      	movs	r0, #42	; 0x2a
 8001a90:	f000 f8a1 	bl	8001bd6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a94:	2000      	movs	r0, #0
 8001a96:	f000 f8ab 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f000 f8a8 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f000 f8a5 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001aa6:	20ef      	movs	r0, #239	; 0xef
 8001aa8:	f000 f8a2 	bl	8001bf0 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001aac:	202b      	movs	r0, #43	; 0x2b
 8001aae:	f000 f892 	bl	8001bd6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f000 f89c 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f000 f899 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f000 f896 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001ac4:	203f      	movs	r0, #63	; 0x3f
 8001ac6:	f000 f893 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001aca:	20f6      	movs	r0, #246	; 0xf6
 8001acc:	f000 f883 	bl	8001bd6 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f000 f88d 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f000 f88a 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001adc:	2006      	movs	r0, #6
 8001ade:	f000 f887 	bl	8001bf0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001ae2:	202c      	movs	r0, #44	; 0x2c
 8001ae4:	f000 f877 	bl	8001bd6 <ili9341_WriteReg>
  LCD_Delay(200);
 8001ae8:	20c8      	movs	r0, #200	; 0xc8
 8001aea:	f000 f9e9 	bl	8001ec0 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001aee:	2026      	movs	r0, #38	; 0x26
 8001af0:	f000 f871 	bl	8001bd6 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001af4:	2001      	movs	r0, #1
 8001af6:	f000 f87b 	bl	8001bf0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001afa:	20e0      	movs	r0, #224	; 0xe0
 8001afc:	f000 f86b 	bl	8001bd6 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001b00:	200f      	movs	r0, #15
 8001b02:	f000 f875 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001b06:	2029      	movs	r0, #41	; 0x29
 8001b08:	f000 f872 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001b0c:	2024      	movs	r0, #36	; 0x24
 8001b0e:	f000 f86f 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001b12:	200c      	movs	r0, #12
 8001b14:	f000 f86c 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001b18:	200e      	movs	r0, #14
 8001b1a:	f000 f869 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001b1e:	2009      	movs	r0, #9
 8001b20:	f000 f866 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001b24:	204e      	movs	r0, #78	; 0x4e
 8001b26:	f000 f863 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001b2a:	2078      	movs	r0, #120	; 0x78
 8001b2c:	f000 f860 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001b30:	203c      	movs	r0, #60	; 0x3c
 8001b32:	f000 f85d 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001b36:	2009      	movs	r0, #9
 8001b38:	f000 f85a 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001b3c:	2013      	movs	r0, #19
 8001b3e:	f000 f857 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001b42:	2005      	movs	r0, #5
 8001b44:	f000 f854 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001b48:	2017      	movs	r0, #23
 8001b4a:	f000 f851 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001b4e:	2011      	movs	r0, #17
 8001b50:	f000 f84e 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b54:	2000      	movs	r0, #0
 8001b56:	f000 f84b 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001b5a:	20e1      	movs	r0, #225	; 0xe1
 8001b5c:	f000 f83b 	bl	8001bd6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001b60:	2000      	movs	r0, #0
 8001b62:	f000 f845 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001b66:	2016      	movs	r0, #22
 8001b68:	f000 f842 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001b6c:	201b      	movs	r0, #27
 8001b6e:	f000 f83f 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001b72:	2004      	movs	r0, #4
 8001b74:	f000 f83c 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001b78:	2011      	movs	r0, #17
 8001b7a:	f000 f839 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001b7e:	2007      	movs	r0, #7
 8001b80:	f000 f836 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001b84:	2031      	movs	r0, #49	; 0x31
 8001b86:	f000 f833 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001b8a:	2033      	movs	r0, #51	; 0x33
 8001b8c:	f000 f830 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001b90:	2042      	movs	r0, #66	; 0x42
 8001b92:	f000 f82d 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001b96:	2005      	movs	r0, #5
 8001b98:	f000 f82a 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001b9c:	200c      	movs	r0, #12
 8001b9e:	f000 f827 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001ba2:	200a      	movs	r0, #10
 8001ba4:	f000 f824 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001ba8:	2028      	movs	r0, #40	; 0x28
 8001baa:	f000 f821 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001bae:	202f      	movs	r0, #47	; 0x2f
 8001bb0:	f000 f81e 	bl	8001bf0 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001bb4:	200f      	movs	r0, #15
 8001bb6:	f000 f81b 	bl	8001bf0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001bba:	2011      	movs	r0, #17
 8001bbc:	f000 f80b 	bl	8001bd6 <ili9341_WriteReg>
  LCD_Delay(200);
 8001bc0:	20c8      	movs	r0, #200	; 0xc8
 8001bc2:	f000 f97d 	bl	8001ec0 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001bc6:	2029      	movs	r0, #41	; 0x29
 8001bc8:	f000 f805 	bl	8001bd6 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001bcc:	202c      	movs	r0, #44	; 0x2c
 8001bce:	f000 f802 	bl	8001bd6 <ili9341_WriteReg>
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	4603      	mov	r3, r0
 8001bde:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 f94a 	bl	8001e7c <LCD_IO_WriteReg>
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f000 f91b 	bl	8001e38 <LCD_IO_WriteData>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001c10:	4819      	ldr	r0, [pc, #100]	; (8001c78 <SPIx_Init+0x6c>)
 8001c12:	f002 fe74 	bl	80048fe <HAL_SPI_GetState>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d12b      	bne.n	8001c74 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001c1c:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <SPIx_Init+0x6c>)
 8001c1e:	4a17      	ldr	r2, [pc, #92]	; (8001c7c <SPIx_Init+0x70>)
 8001c20:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <SPIx_Init+0x6c>)
 8001c24:	2218      	movs	r2, #24
 8001c26:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <SPIx_Init+0x6c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001c2e:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <SPIx_Init+0x6c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001c34:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <SPIx_Init+0x6c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001c3a:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <SPIx_Init+0x6c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001c40:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <SPIx_Init+0x6c>)
 8001c42:	2207      	movs	r2, #7
 8001c44:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001c46:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <SPIx_Init+0x6c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <SPIx_Init+0x6c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <SPIx_Init+0x6c>)
 8001c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c58:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001c5a:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <SPIx_Init+0x6c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <SPIx_Init+0x6c>)
 8001c62:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c66:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001c68:	4803      	ldr	r0, [pc, #12]	; (8001c78 <SPIx_Init+0x6c>)
 8001c6a:	f000 f833 	bl	8001cd4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001c6e:	4802      	ldr	r0, [pc, #8]	; (8001c78 <SPIx_Init+0x6c>)
 8001c70:	f002 fc58 	bl	8004524 <HAL_SPI_Init>
  } 
}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000844 	.word	0x20000844
 8001c7c:	40015000 	.word	0x40015000

08001c80 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <SPIx_Write+0x34>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	1db9      	adds	r1, r7, #6
 8001c94:	2201      	movs	r2, #1
 8001c96:	4808      	ldr	r0, [pc, #32]	; (8001cb8 <SPIx_Write+0x38>)
 8001c98:	f002 fcf5 	bl	8004686 <HAL_SPI_Transmit>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001ca6:	f000 f809 	bl	8001cbc <SPIx_Error>
  }
}
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000004 	.word	0x20000004
 8001cb8:	20000844 	.word	0x20000844

08001cbc <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001cc0:	4803      	ldr	r0, [pc, #12]	; (8001cd0 <SPIx_Error+0x14>)
 8001cc2:	f002 fcb8 	bl	8004636 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001cc6:	f7ff ffa1 	bl	8001c0c <SPIx_Init>
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000844 	.word	0x20000844

08001cd4 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08a      	sub	sp, #40	; 0x28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001cdc:	2300      	movs	r3, #0
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <SPIx_MspInit+0x6c>)
 8001ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce4:	4a16      	ldr	r2, [pc, #88]	; (8001d40 <SPIx_MspInit+0x6c>)
 8001ce6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cea:	6453      	str	r3, [r2, #68]	; 0x44
 8001cec:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <SPIx_MspInit+0x6c>)
 8001cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <SPIx_MspInit+0x6c>)
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d00:	4a0f      	ldr	r2, [pc, #60]	; (8001d40 <SPIx_MspInit+0x6c>)
 8001d02:	f043 0320 	orr.w	r3, r3, #32
 8001d06:	6313      	str	r3, [r2, #48]	; 0x30
 8001d08:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <SPIx_MspInit+0x6c>)
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0c:	f003 0320 	and.w	r3, r3, #32
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001d14:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001d22:	2301      	movs	r3, #1
 8001d24:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001d26:	2305      	movs	r3, #5
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4804      	ldr	r0, [pc, #16]	; (8001d44 <SPIx_MspInit+0x70>)
 8001d32:	f000 fcb3 	bl	800269c <HAL_GPIO_Init>
}
 8001d36:	bf00      	nop
 8001d38:	3728      	adds	r7, #40	; 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40021400 	.word	0x40021400

08001d48 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001d4e:	4b36      	ldr	r3, [pc, #216]	; (8001e28 <LCD_IO_Init+0xe0>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d164      	bne.n	8001e20 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8001d56:	4b34      	ldr	r3, [pc, #208]	; (8001e28 <LCD_IO_Init+0xe0>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	4b32      	ldr	r3, [pc, #200]	; (8001e2c <LCD_IO_Init+0xe4>)
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d64:	4a31      	ldr	r2, [pc, #196]	; (8001e2c <LCD_IO_Init+0xe4>)
 8001d66:	f043 0308 	orr.w	r3, r3, #8
 8001d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6c:	4b2f      	ldr	r3, [pc, #188]	; (8001e2c <LCD_IO_Init+0xe4>)
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001d78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001d86:	2302      	movs	r3, #2
 8001d88:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001d8a:	f107 030c 	add.w	r3, r7, #12
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4827      	ldr	r0, [pc, #156]	; (8001e30 <LCD_IO_Init+0xe8>)
 8001d92:	f000 fc83 	bl	800269c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	607b      	str	r3, [r7, #4]
 8001d9a:	4b24      	ldr	r3, [pc, #144]	; (8001e2c <LCD_IO_Init+0xe4>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a23      	ldr	r2, [pc, #140]	; (8001e2c <LCD_IO_Init+0xe4>)
 8001da0:	f043 0308 	orr.w	r3, r3, #8
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b21      	ldr	r3, [pc, #132]	; (8001e2c <LCD_IO_Init+0xe4>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001db6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001db8:	2301      	movs	r3, #1
 8001dba:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4819      	ldr	r0, [pc, #100]	; (8001e30 <LCD_IO_Init+0xe8>)
 8001dcc:	f000 fc66 	bl	800269c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	603b      	str	r3, [r7, #0]
 8001dd4:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <LCD_IO_Init+0xe4>)
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd8:	4a14      	ldr	r2, [pc, #80]	; (8001e2c <LCD_IO_Init+0xe4>)
 8001dda:	f043 0304 	orr.w	r3, r3, #4
 8001dde:	6313      	str	r3, [r2, #48]	; 0x30
 8001de0:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <LCD_IO_Init+0xe4>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	603b      	str	r3, [r7, #0]
 8001dea:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001dec:	2304      	movs	r3, #4
 8001dee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001df0:	2301      	movs	r3, #1
 8001df2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001dfc:	f107 030c 	add.w	r3, r7, #12
 8001e00:	4619      	mov	r1, r3
 8001e02:	480c      	ldr	r0, [pc, #48]	; (8001e34 <LCD_IO_Init+0xec>)
 8001e04:	f000 fc4a 	bl	800269c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2104      	movs	r1, #4
 8001e0c:	4809      	ldr	r0, [pc, #36]	; (8001e34 <LCD_IO_Init+0xec>)
 8001e0e:	f000 fefd 	bl	8002c0c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001e12:	2201      	movs	r2, #1
 8001e14:	2104      	movs	r1, #4
 8001e16:	4807      	ldr	r0, [pc, #28]	; (8001e34 <LCD_IO_Init+0xec>)
 8001e18:	f000 fef8 	bl	8002c0c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001e1c:	f7ff fef6 	bl	8001c0c <SPIx_Init>
  }
}
 8001e20:	bf00      	nop
 8001e22:	3720      	adds	r7, #32
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	2000089c 	.word	0x2000089c
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40020c00 	.word	0x40020c00
 8001e34:	40020800 	.word	0x40020800

08001e38 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001e42:	2201      	movs	r2, #1
 8001e44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e48:	480a      	ldr	r0, [pc, #40]	; (8001e74 <LCD_IO_WriteData+0x3c>)
 8001e4a:	f000 fedf 	bl	8002c0c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2104      	movs	r1, #4
 8001e52:	4809      	ldr	r0, [pc, #36]	; (8001e78 <LCD_IO_WriteData+0x40>)
 8001e54:	f000 feda 	bl	8002c0c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001e58:	88fb      	ldrh	r3, [r7, #6]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff ff10 	bl	8001c80 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001e60:	2201      	movs	r2, #1
 8001e62:	2104      	movs	r1, #4
 8001e64:	4804      	ldr	r0, [pc, #16]	; (8001e78 <LCD_IO_WriteData+0x40>)
 8001e66:	f000 fed1 	bl	8002c0c <HAL_GPIO_WritePin>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40020c00 	.word	0x40020c00
 8001e78:	40020800 	.word	0x40020800

08001e7c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001e86:	2200      	movs	r2, #0
 8001e88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e8c:	480a      	ldr	r0, [pc, #40]	; (8001eb8 <LCD_IO_WriteReg+0x3c>)
 8001e8e:	f000 febd 	bl	8002c0c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001e92:	2200      	movs	r2, #0
 8001e94:	2104      	movs	r1, #4
 8001e96:	4809      	ldr	r0, [pc, #36]	; (8001ebc <LCD_IO_WriteReg+0x40>)
 8001e98:	f000 feb8 	bl	8002c0c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff feed 	bl	8001c80 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	2104      	movs	r1, #4
 8001eaa:	4804      	ldr	r0, [pc, #16]	; (8001ebc <LCD_IO_WriteReg+0x40>)
 8001eac:	f000 feae 	bl	8002c0c <HAL_GPIO_WritePin>
}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40020c00 	.word	0x40020c00
 8001ebc:	40020800 	.word	0x40020800

08001ec0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f847 	bl	8001f5c <HAL_Delay>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001edc:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <HAL_Init+0x40>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0d      	ldr	r2, [pc, #52]	; (8001f18 <HAL_Init+0x40>)
 8001ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ee6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <HAL_Init+0x40>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <HAL_Init+0x40>)
 8001eee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ef2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ef4:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <HAL_Init+0x40>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a07      	ldr	r2, [pc, #28]	; (8001f18 <HAL_Init+0x40>)
 8001efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f00:	2003      	movs	r0, #3
 8001f02:	f000 f8fc 	bl	80020fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f06:	200f      	movs	r0, #15
 8001f08:	f7ff fc48 	bl	800179c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f0c:	f7ff f8c2 	bl	8001094 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40023c00 	.word	0x40023c00

08001f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_IncTick+0x20>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_IncTick+0x24>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <HAL_IncTick+0x24>)
 8001f2e:	6013      	str	r3, [r2, #0]
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	2000000c 	.word	0x2000000c
 8001f40:	200008a0 	.word	0x200008a0

08001f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return uwTick;
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <HAL_GetTick+0x14>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	200008a0 	.word	0x200008a0

08001f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f64:	f7ff ffee 	bl	8001f44 <HAL_GetTick>
 8001f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f74:	d005      	beq.n	8001f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f76:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <HAL_Delay+0x44>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4413      	add	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f82:	bf00      	nop
 8001f84:	f7ff ffde 	bl	8001f44 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d8f7      	bhi.n	8001f84 <HAL_Delay+0x28>
  {
  }
}
 8001f94:	bf00      	nop
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	2000000c 	.word	0x2000000c

08001fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd6:	4a04      	ldr	r2, [pc, #16]	; (8001fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	60d3      	str	r3, [r2, #12]
}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <__NVIC_GetPriorityGrouping+0x18>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	f003 0307 	and.w	r3, r3, #7
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	2b00      	cmp	r3, #0
 8002018:	db0b      	blt.n	8002032 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	f003 021f 	and.w	r2, r3, #31
 8002020:	4907      	ldr	r1, [pc, #28]	; (8002040 <__NVIC_EnableIRQ+0x38>)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	2001      	movs	r0, #1
 800202a:	fa00 f202 	lsl.w	r2, r0, r2
 800202e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000e100 	.word	0xe000e100

08002044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	6039      	str	r1, [r7, #0]
 800204e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002054:	2b00      	cmp	r3, #0
 8002056:	db0a      	blt.n	800206e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	490c      	ldr	r1, [pc, #48]	; (8002090 <__NVIC_SetPriority+0x4c>)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	0112      	lsls	r2, r2, #4
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	440b      	add	r3, r1
 8002068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800206c:	e00a      	b.n	8002084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	b2da      	uxtb	r2, r3
 8002072:	4908      	ldr	r1, [pc, #32]	; (8002094 <__NVIC_SetPriority+0x50>)
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	3b04      	subs	r3, #4
 800207c:	0112      	lsls	r2, r2, #4
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	440b      	add	r3, r1
 8002082:	761a      	strb	r2, [r3, #24]
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000e100 	.word	0xe000e100
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002098:	b480      	push	{r7}
 800209a:	b089      	sub	sp, #36	; 0x24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f1c3 0307 	rsb	r3, r3, #7
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	bf28      	it	cs
 80020b6:	2304      	movcs	r3, #4
 80020b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3304      	adds	r3, #4
 80020be:	2b06      	cmp	r3, #6
 80020c0:	d902      	bls.n	80020c8 <NVIC_EncodePriority+0x30>
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3b03      	subs	r3, #3
 80020c6:	e000      	b.n	80020ca <NVIC_EncodePriority+0x32>
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020cc:	f04f 32ff 	mov.w	r2, #4294967295
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43da      	mvns	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	401a      	ands	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e0:	f04f 31ff 	mov.w	r1, #4294967295
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	43d9      	mvns	r1, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f0:	4313      	orrs	r3, r2
         );
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3724      	adds	r7, #36	; 0x24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff ff4c 	bl	8001fa4 <__NVIC_SetPriorityGrouping>
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
 8002120:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002126:	f7ff ff61 	bl	8001fec <__NVIC_GetPriorityGrouping>
 800212a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	68b9      	ldr	r1, [r7, #8]
 8002130:	6978      	ldr	r0, [r7, #20]
 8002132:	f7ff ffb1 	bl	8002098 <NVIC_EncodePriority>
 8002136:	4602      	mov	r2, r0
 8002138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213c:	4611      	mov	r1, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff ff80 	bl	8002044 <__NVIC_SetPriority>
}
 8002144:	bf00      	nop
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff ff54 	bl	8002008 <__NVIC_EnableIRQ>
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e00e      	b.n	8002198 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	795b      	ldrb	r3, [r3, #5]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d105      	bne.n	8002190 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7fe ffae 	bl	80010ec <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021ae:	f7ff fec9 	bl	8001f44 <HAL_GetTick>
 80021b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d008      	beq.n	80021d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2280      	movs	r2, #128	; 0x80
 80021c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e052      	b.n	8002278 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0216 	bic.w	r2, r2, #22
 80021e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	695a      	ldr	r2, [r3, #20]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d103      	bne.n	8002202 <HAL_DMA_Abort+0x62>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d007      	beq.n	8002212 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0208 	bic.w	r2, r2, #8
 8002210:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0201 	bic.w	r2, r2, #1
 8002220:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002222:	e013      	b.n	800224c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002224:	f7ff fe8e 	bl	8001f44 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b05      	cmp	r3, #5
 8002230:	d90c      	bls.n	800224c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2220      	movs	r2, #32
 8002236:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2203      	movs	r2, #3
 800223c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e015      	b.n	8002278 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1e4      	bne.n	8002224 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225e:	223f      	movs	r2, #63	; 0x3f
 8002260:	409a      	lsls	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d004      	beq.n	800229e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2280      	movs	r2, #128	; 0x80
 8002298:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e00c      	b.n	80022b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2205      	movs	r2, #5
 80022a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0201 	bic.w	r2, r2, #1
 80022b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e03b      	b.n	800234e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d106      	bne.n	80022f0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe ff20 	bl	8001130 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002314:	f023 0107 	bic.w	r1, r3, #7
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800232e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	68d1      	ldr	r1, [r2, #12]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6812      	ldr	r2, [r2, #0]
 800233a:	430b      	orrs	r3, r1
 800233c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b00      	cmp	r3, #0
 8002376:	d026      	beq.n	80023c6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237e:	2b00      	cmp	r3, #0
 8002380:	d021      	beq.n	80023c6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002390:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002396:	f043 0201 	orr.w	r2, r3, #1
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2201      	movs	r2, #1
 80023a4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2204      	movs	r2, #4
 80023aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f003 0320 	and.w	r3, r3, #32
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d026      	beq.n	800241e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d021      	beq.n	800241e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023e8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2220      	movs	r2, #32
 80023f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f6:	f043 0202 	orr.w	r2, r3, #2
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2204      	movs	r2, #4
 8002402:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	2b00      	cmp	r3, #0
 8002426:	d026      	beq.n	8002476 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800242e:	2b00      	cmp	r3, #0
 8002430:	d021      	beq.n	8002476 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002440:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2208      	movs	r2, #8
 8002448:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244e:	f043 0204 	orr.w	r2, r3, #4
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2204      	movs	r2, #4
 800245a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d013      	beq.n	80024a8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00e      	beq.n	80024a8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002498:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2204      	movs	r2, #4
 80024a0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f853 	bl	800254e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d024      	beq.n	80024fc <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d01f      	beq.n	80024fc <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024ca:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2202      	movs	r2, #2
 80024d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	2b00      	cmp	r3, #0
 8002504:	d01f      	beq.n	8002546 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d01a      	beq.n	8002546 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800251e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2210      	movs	r2, #16
 8002526:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f80e 	bl	8002562 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
	...

08002578 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_DMA2D_ConfigLayer+0x20>
 8002594:	2302      	movs	r3, #2
 8002596:	e079      	b.n	800268c <HAL_DMA2D_ConfigLayer+0x114>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	3318      	adds	r3, #24
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	4413      	add	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	041b      	lsls	r3, r3, #16
 80025be:	4313      	orrs	r3, r2
 80025c0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80025c2:	4b35      	ldr	r3, [pc, #212]	; (8002698 <HAL_DMA2D_ConfigLayer+0x120>)
 80025c4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b0a      	cmp	r3, #10
 80025cc:	d003      	beq.n	80025d6 <HAL_DMA2D_ConfigLayer+0x5e>
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b09      	cmp	r3, #9
 80025d4:	d107      	bne.n	80025e6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	e005      	b.n	80025f2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	061b      	lsls	r3, r3, #24
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d120      	bne.n	800263a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	43db      	mvns	r3, r3
 8002602:	ea02 0103 	and.w	r1, r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	430a      	orrs	r2, r1
 800260e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b0a      	cmp	r3, #10
 8002620:	d003      	beq.n	800262a <HAL_DMA2D_ConfigLayer+0xb2>
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b09      	cmp	r3, #9
 8002628:	d127      	bne.n	800267a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002636:	629a      	str	r2, [r3, #40]	; 0x28
 8002638:	e01f      	b.n	800267a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	69da      	ldr	r2, [r3, #28]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	43db      	mvns	r3, r3
 8002644:	ea02 0103 	and.w	r1, r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	430a      	orrs	r2, r1
 8002650:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b0a      	cmp	r3, #10
 8002662:	d003      	beq.n	800266c <HAL_DMA2D_ConfigLayer+0xf4>
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b09      	cmp	r3, #9
 800266a:	d106      	bne.n	800267a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002678:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	371c      	adds	r7, #28
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	ff03000f 	.word	0xff03000f

0800269c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800269c:	b480      	push	{r7}
 800269e:	b089      	sub	sp, #36	; 0x24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
 80026b6:	e177      	b.n	80029a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026b8:	2201      	movs	r2, #1
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	f040 8166 	bne.w	80029a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d005      	beq.n	80026ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d130      	bne.n	8002750 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	2203      	movs	r2, #3
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002724:	2201      	movs	r2, #1
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 0201 	and.w	r2, r3, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	2b03      	cmp	r3, #3
 800275a:	d017      	beq.n	800278c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	2203      	movs	r2, #3
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d123      	bne.n	80027e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	08da      	lsrs	r2, r3, #3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3208      	adds	r2, #8
 80027a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	220f      	movs	r2, #15
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	08da      	lsrs	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3208      	adds	r2, #8
 80027da:	69b9      	ldr	r1, [r7, #24]
 80027dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	2203      	movs	r2, #3
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 0203 	and.w	r2, r3, #3
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80c0 	beq.w	80029a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	4b66      	ldr	r3, [pc, #408]	; (80029c0 <HAL_GPIO_Init+0x324>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	4a65      	ldr	r2, [pc, #404]	; (80029c0 <HAL_GPIO_Init+0x324>)
 800282c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002830:	6453      	str	r3, [r2, #68]	; 0x44
 8002832:	4b63      	ldr	r3, [pc, #396]	; (80029c0 <HAL_GPIO_Init+0x324>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800283e:	4a61      	ldr	r2, [pc, #388]	; (80029c4 <HAL_GPIO_Init+0x328>)
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	089b      	lsrs	r3, r3, #2
 8002844:	3302      	adds	r3, #2
 8002846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	220f      	movs	r2, #15
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43db      	mvns	r3, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4013      	ands	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a58      	ldr	r2, [pc, #352]	; (80029c8 <HAL_GPIO_Init+0x32c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d037      	beq.n	80028da <HAL_GPIO_Init+0x23e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a57      	ldr	r2, [pc, #348]	; (80029cc <HAL_GPIO_Init+0x330>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d031      	beq.n	80028d6 <HAL_GPIO_Init+0x23a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a56      	ldr	r2, [pc, #344]	; (80029d0 <HAL_GPIO_Init+0x334>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d02b      	beq.n	80028d2 <HAL_GPIO_Init+0x236>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a55      	ldr	r2, [pc, #340]	; (80029d4 <HAL_GPIO_Init+0x338>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d025      	beq.n	80028ce <HAL_GPIO_Init+0x232>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a54      	ldr	r2, [pc, #336]	; (80029d8 <HAL_GPIO_Init+0x33c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d01f      	beq.n	80028ca <HAL_GPIO_Init+0x22e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a53      	ldr	r2, [pc, #332]	; (80029dc <HAL_GPIO_Init+0x340>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d019      	beq.n	80028c6 <HAL_GPIO_Init+0x22a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a52      	ldr	r2, [pc, #328]	; (80029e0 <HAL_GPIO_Init+0x344>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d013      	beq.n	80028c2 <HAL_GPIO_Init+0x226>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a51      	ldr	r2, [pc, #324]	; (80029e4 <HAL_GPIO_Init+0x348>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00d      	beq.n	80028be <HAL_GPIO_Init+0x222>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a50      	ldr	r2, [pc, #320]	; (80029e8 <HAL_GPIO_Init+0x34c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d007      	beq.n	80028ba <HAL_GPIO_Init+0x21e>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a4f      	ldr	r2, [pc, #316]	; (80029ec <HAL_GPIO_Init+0x350>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d101      	bne.n	80028b6 <HAL_GPIO_Init+0x21a>
 80028b2:	2309      	movs	r3, #9
 80028b4:	e012      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028b6:	230a      	movs	r3, #10
 80028b8:	e010      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028ba:	2308      	movs	r3, #8
 80028bc:	e00e      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028be:	2307      	movs	r3, #7
 80028c0:	e00c      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028c2:	2306      	movs	r3, #6
 80028c4:	e00a      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028c6:	2305      	movs	r3, #5
 80028c8:	e008      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028ca:	2304      	movs	r3, #4
 80028cc:	e006      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028ce:	2303      	movs	r3, #3
 80028d0:	e004      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e002      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028da:	2300      	movs	r3, #0
 80028dc:	69fa      	ldr	r2, [r7, #28]
 80028de:	f002 0203 	and.w	r2, r2, #3
 80028e2:	0092      	lsls	r2, r2, #2
 80028e4:	4093      	lsls	r3, r2
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028ec:	4935      	ldr	r1, [pc, #212]	; (80029c4 <HAL_GPIO_Init+0x328>)
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	089b      	lsrs	r3, r3, #2
 80028f2:	3302      	adds	r3, #2
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028fa:	4b3d      	ldr	r3, [pc, #244]	; (80029f0 <HAL_GPIO_Init+0x354>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	43db      	mvns	r3, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4013      	ands	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800291e:	4a34      	ldr	r2, [pc, #208]	; (80029f0 <HAL_GPIO_Init+0x354>)
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002924:	4b32      	ldr	r3, [pc, #200]	; (80029f0 <HAL_GPIO_Init+0x354>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	43db      	mvns	r3, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002948:	4a29      	ldr	r2, [pc, #164]	; (80029f0 <HAL_GPIO_Init+0x354>)
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800294e:	4b28      	ldr	r3, [pc, #160]	; (80029f0 <HAL_GPIO_Init+0x354>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002972:	4a1f      	ldr	r2, [pc, #124]	; (80029f0 <HAL_GPIO_Init+0x354>)
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002978:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <HAL_GPIO_Init+0x354>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4313      	orrs	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800299c:	4a14      	ldr	r2, [pc, #80]	; (80029f0 <HAL_GPIO_Init+0x354>)
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	3301      	adds	r3, #1
 80029a6:	61fb      	str	r3, [r7, #28]
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	2b0f      	cmp	r3, #15
 80029ac:	f67f ae84 	bls.w	80026b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029b0:	bf00      	nop
 80029b2:	bf00      	nop
 80029b4:	3724      	adds	r7, #36	; 0x24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40013800 	.word	0x40013800
 80029c8:	40020000 	.word	0x40020000
 80029cc:	40020400 	.word	0x40020400
 80029d0:	40020800 	.word	0x40020800
 80029d4:	40020c00 	.word	0x40020c00
 80029d8:	40021000 	.word	0x40021000
 80029dc:	40021400 	.word	0x40021400
 80029e0:	40021800 	.word	0x40021800
 80029e4:	40021c00 	.word	0x40021c00
 80029e8:	40022000 	.word	0x40022000
 80029ec:	40022400 	.word	0x40022400
 80029f0:	40013c00 	.word	0x40013c00

080029f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b087      	sub	sp, #28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	e0d9      	b.n	8002bc4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a10:	2201      	movs	r2, #1
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	f040 80c9 	bne.w	8002bbe <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002a2c:	4a6b      	ldr	r2, [pc, #428]	; (8002bdc <HAL_GPIO_DeInit+0x1e8>)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	089b      	lsrs	r3, r3, #2
 8002a32:	3302      	adds	r3, #2
 8002a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a38:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	220f      	movs	r2, #15
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a63      	ldr	r2, [pc, #396]	; (8002be0 <HAL_GPIO_DeInit+0x1ec>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d037      	beq.n	8002ac6 <HAL_GPIO_DeInit+0xd2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a62      	ldr	r2, [pc, #392]	; (8002be4 <HAL_GPIO_DeInit+0x1f0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d031      	beq.n	8002ac2 <HAL_GPIO_DeInit+0xce>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a61      	ldr	r2, [pc, #388]	; (8002be8 <HAL_GPIO_DeInit+0x1f4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d02b      	beq.n	8002abe <HAL_GPIO_DeInit+0xca>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a60      	ldr	r2, [pc, #384]	; (8002bec <HAL_GPIO_DeInit+0x1f8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d025      	beq.n	8002aba <HAL_GPIO_DeInit+0xc6>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a5f      	ldr	r2, [pc, #380]	; (8002bf0 <HAL_GPIO_DeInit+0x1fc>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d01f      	beq.n	8002ab6 <HAL_GPIO_DeInit+0xc2>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a5e      	ldr	r2, [pc, #376]	; (8002bf4 <HAL_GPIO_DeInit+0x200>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d019      	beq.n	8002ab2 <HAL_GPIO_DeInit+0xbe>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a5d      	ldr	r2, [pc, #372]	; (8002bf8 <HAL_GPIO_DeInit+0x204>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d013      	beq.n	8002aae <HAL_GPIO_DeInit+0xba>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a5c      	ldr	r2, [pc, #368]	; (8002bfc <HAL_GPIO_DeInit+0x208>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00d      	beq.n	8002aaa <HAL_GPIO_DeInit+0xb6>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a5b      	ldr	r2, [pc, #364]	; (8002c00 <HAL_GPIO_DeInit+0x20c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d007      	beq.n	8002aa6 <HAL_GPIO_DeInit+0xb2>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a5a      	ldr	r2, [pc, #360]	; (8002c04 <HAL_GPIO_DeInit+0x210>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d101      	bne.n	8002aa2 <HAL_GPIO_DeInit+0xae>
 8002a9e:	2309      	movs	r3, #9
 8002aa0:	e012      	b.n	8002ac8 <HAL_GPIO_DeInit+0xd4>
 8002aa2:	230a      	movs	r3, #10
 8002aa4:	e010      	b.n	8002ac8 <HAL_GPIO_DeInit+0xd4>
 8002aa6:	2308      	movs	r3, #8
 8002aa8:	e00e      	b.n	8002ac8 <HAL_GPIO_DeInit+0xd4>
 8002aaa:	2307      	movs	r3, #7
 8002aac:	e00c      	b.n	8002ac8 <HAL_GPIO_DeInit+0xd4>
 8002aae:	2306      	movs	r3, #6
 8002ab0:	e00a      	b.n	8002ac8 <HAL_GPIO_DeInit+0xd4>
 8002ab2:	2305      	movs	r3, #5
 8002ab4:	e008      	b.n	8002ac8 <HAL_GPIO_DeInit+0xd4>
 8002ab6:	2304      	movs	r3, #4
 8002ab8:	e006      	b.n	8002ac8 <HAL_GPIO_DeInit+0xd4>
 8002aba:	2303      	movs	r3, #3
 8002abc:	e004      	b.n	8002ac8 <HAL_GPIO_DeInit+0xd4>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e002      	b.n	8002ac8 <HAL_GPIO_DeInit+0xd4>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <HAL_GPIO_DeInit+0xd4>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	f002 0203 	and.w	r2, r2, #3
 8002ace:	0092      	lsls	r2, r2, #2
 8002ad0:	4093      	lsls	r3, r2
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d132      	bne.n	8002b3e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002ad8:	4b4b      	ldr	r3, [pc, #300]	; (8002c08 <HAL_GPIO_DeInit+0x214>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	4949      	ldr	r1, [pc, #292]	; (8002c08 <HAL_GPIO_DeInit+0x214>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002ae6:	4b48      	ldr	r3, [pc, #288]	; (8002c08 <HAL_GPIO_DeInit+0x214>)
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	4946      	ldr	r1, [pc, #280]	; (8002c08 <HAL_GPIO_DeInit+0x214>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002af4:	4b44      	ldr	r3, [pc, #272]	; (8002c08 <HAL_GPIO_DeInit+0x214>)
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	43db      	mvns	r3, r3
 8002afc:	4942      	ldr	r1, [pc, #264]	; (8002c08 <HAL_GPIO_DeInit+0x214>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002b02:	4b41      	ldr	r3, [pc, #260]	; (8002c08 <HAL_GPIO_DeInit+0x214>)
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	493f      	ldr	r1, [pc, #252]	; (8002c08 <HAL_GPIO_DeInit+0x214>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	220f      	movs	r2, #15
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002b20:	4a2e      	ldr	r2, [pc, #184]	; (8002bdc <HAL_GPIO_DeInit+0x1e8>)
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	089b      	lsrs	r3, r3, #2
 8002b26:	3302      	adds	r3, #2
 8002b28:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	43da      	mvns	r2, r3
 8002b30:	482a      	ldr	r0, [pc, #168]	; (8002bdc <HAL_GPIO_DeInit+0x1e8>)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	089b      	lsrs	r3, r3, #2
 8002b36:	400a      	ands	r2, r1
 8002b38:	3302      	adds	r3, #2
 8002b3a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	2103      	movs	r1, #3
 8002b48:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	401a      	ands	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	08da      	lsrs	r2, r3, #3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3208      	adds	r2, #8
 8002b5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	220f      	movs	r2, #15
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	08d2      	lsrs	r2, r2, #3
 8002b74:	4019      	ands	r1, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3208      	adds	r2, #8
 8002b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	2103      	movs	r1, #3
 8002b88:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	401a      	ands	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	2101      	movs	r1, #1
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	401a      	ands	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	2103      	movs	r1, #3
 8002bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	401a      	ands	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	2b0f      	cmp	r3, #15
 8002bc8:	f67f af22 	bls.w	8002a10 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002bcc:	bf00      	nop
 8002bce:	bf00      	nop
 8002bd0:	371c      	adds	r7, #28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40013800 	.word	0x40013800
 8002be0:	40020000 	.word	0x40020000
 8002be4:	40020400 	.word	0x40020400
 8002be8:	40020800 	.word	0x40020800
 8002bec:	40020c00 	.word	0x40020c00
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40021400 	.word	0x40021400
 8002bf8:	40021800 	.word	0x40021800
 8002bfc:	40021c00 	.word	0x40021c00
 8002c00:	40022000 	.word	0x40022000
 8002c04:	40022400 	.word	0x40022400
 8002c08:	40013c00 	.word	0x40013c00

08002c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	807b      	strh	r3, [r7, #2]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c1c:	787b      	ldrb	r3, [r7, #1]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c22:	887a      	ldrh	r2, [r7, #2]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c28:	e003      	b.n	8002c32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c2a:	887b      	ldrh	r3, [r7, #2]
 8002c2c:	041a      	lsls	r2, r3, #16
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	619a      	str	r2, [r3, #24]
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
	...

08002c40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e12b      	b.n	8002eaa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d106      	bne.n	8002c6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7fe fa8a 	bl	8001180 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2224      	movs	r2, #36	; 0x24
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0201 	bic.w	r2, r2, #1
 8002c82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ca2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ca4:	f001 f9f0 	bl	8004088 <HAL_RCC_GetPCLK1Freq>
 8002ca8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4a81      	ldr	r2, [pc, #516]	; (8002eb4 <HAL_I2C_Init+0x274>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d807      	bhi.n	8002cc4 <HAL_I2C_Init+0x84>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4a80      	ldr	r2, [pc, #512]	; (8002eb8 <HAL_I2C_Init+0x278>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	bf94      	ite	ls
 8002cbc:	2301      	movls	r3, #1
 8002cbe:	2300      	movhi	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	e006      	b.n	8002cd2 <HAL_I2C_Init+0x92>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4a7d      	ldr	r2, [pc, #500]	; (8002ebc <HAL_I2C_Init+0x27c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	bf94      	ite	ls
 8002ccc:	2301      	movls	r3, #1
 8002cce:	2300      	movhi	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e0e7      	b.n	8002eaa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4a78      	ldr	r2, [pc, #480]	; (8002ec0 <HAL_I2C_Init+0x280>)
 8002cde:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce2:	0c9b      	lsrs	r3, r3, #18
 8002ce4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	4a6a      	ldr	r2, [pc, #424]	; (8002eb4 <HAL_I2C_Init+0x274>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d802      	bhi.n	8002d14 <HAL_I2C_Init+0xd4>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	3301      	adds	r3, #1
 8002d12:	e009      	b.n	8002d28 <HAL_I2C_Init+0xe8>
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d1a:	fb02 f303 	mul.w	r3, r2, r3
 8002d1e:	4a69      	ldr	r2, [pc, #420]	; (8002ec4 <HAL_I2C_Init+0x284>)
 8002d20:	fba2 2303 	umull	r2, r3, r2, r3
 8002d24:	099b      	lsrs	r3, r3, #6
 8002d26:	3301      	adds	r3, #1
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6812      	ldr	r2, [r2, #0]
 8002d2c:	430b      	orrs	r3, r1
 8002d2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	495c      	ldr	r1, [pc, #368]	; (8002eb4 <HAL_I2C_Init+0x274>)
 8002d44:	428b      	cmp	r3, r1
 8002d46:	d819      	bhi.n	8002d7c <HAL_I2C_Init+0x13c>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	1e59      	subs	r1, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d56:	1c59      	adds	r1, r3, #1
 8002d58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d5c:	400b      	ands	r3, r1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00a      	beq.n	8002d78 <HAL_I2C_Init+0x138>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	1e59      	subs	r1, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d70:	3301      	adds	r3, #1
 8002d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d76:	e051      	b.n	8002e1c <HAL_I2C_Init+0x1dc>
 8002d78:	2304      	movs	r3, #4
 8002d7a:	e04f      	b.n	8002e1c <HAL_I2C_Init+0x1dc>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d111      	bne.n	8002da8 <HAL_I2C_Init+0x168>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	1e58      	subs	r0, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6859      	ldr	r1, [r3, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	440b      	add	r3, r1
 8002d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d96:	3301      	adds	r3, #1
 8002d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	bf0c      	ite	eq
 8002da0:	2301      	moveq	r3, #1
 8002da2:	2300      	movne	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	e012      	b.n	8002dce <HAL_I2C_Init+0x18e>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	1e58      	subs	r0, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6859      	ldr	r1, [r3, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	0099      	lsls	r1, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	bf0c      	ite	eq
 8002dc8:	2301      	moveq	r3, #1
 8002dca:	2300      	movne	r3, #0
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_I2C_Init+0x196>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e022      	b.n	8002e1c <HAL_I2C_Init+0x1dc>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10e      	bne.n	8002dfc <HAL_I2C_Init+0x1bc>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1e58      	subs	r0, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6859      	ldr	r1, [r3, #4]
 8002de6:	460b      	mov	r3, r1
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	440b      	add	r3, r1
 8002dec:	fbb0 f3f3 	udiv	r3, r0, r3
 8002df0:	3301      	adds	r3, #1
 8002df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dfa:	e00f      	b.n	8002e1c <HAL_I2C_Init+0x1dc>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	1e58      	subs	r0, r3, #1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6859      	ldr	r1, [r3, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	0099      	lsls	r1, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e12:	3301      	adds	r3, #1
 8002e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	6809      	ldr	r1, [r1, #0]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69da      	ldr	r2, [r3, #28]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6911      	ldr	r1, [r2, #16]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	68d2      	ldr	r2, [r2, #12]
 8002e56:	4311      	orrs	r1, r2
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695a      	ldr	r2, [r3, #20]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0201 	orr.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2220      	movs	r2, #32
 8002e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	000186a0 	.word	0x000186a0
 8002eb8:	001e847f 	.word	0x001e847f
 8002ebc:	003d08ff 	.word	0x003d08ff
 8002ec0:	431bde83 	.word	0x431bde83
 8002ec4:	10624dd3 	.word	0x10624dd3

08002ec8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b20      	cmp	r3, #32
 8002edc:	d129      	bne.n	8002f32 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2224      	movs	r2, #36	; 0x24
 8002ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0201 	bic.w	r2, r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0210 	bic.w	r2, r2, #16
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f042 0201 	orr.w	r2, r2, #1
 8002f24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	e000      	b.n	8002f34 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002f32:	2302      	movs	r3, #2
  }
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	d12a      	bne.n	8002fb0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2224      	movs	r2, #36	; 0x24
 8002f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0201 	bic.w	r2, r2, #1
 8002f70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002f7a:	89fb      	ldrh	r3, [r7, #14]
 8002f7c:	f023 030f 	bic.w	r3, r3, #15
 8002f80:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	89fb      	ldrh	r3, [r7, #14]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	89fa      	ldrh	r2, [r7, #14]
 8002f92:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0201 	orr.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	e000      	b.n	8002fb2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002fb0:	2302      	movs	r3, #2
  }
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
	...

08002fc0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e0bf      	b.n	8003152 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d106      	bne.n	8002fec <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fe f934 	bl	8001254 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2202      	movs	r2, #2
 8002ff0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699a      	ldr	r2, [r3, #24]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003002:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6999      	ldr	r1, [r3, #24]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003018:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6899      	ldr	r1, [r3, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	4b4a      	ldr	r3, [pc, #296]	; (800315c <HAL_LTDC_Init+0x19c>)
 8003034:	400b      	ands	r3, r1
 8003036:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	041b      	lsls	r3, r3, #16
 800303e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6899      	ldr	r1, [r3, #8]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699a      	ldr	r2, [r3, #24]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68d9      	ldr	r1, [r3, #12]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	4b3e      	ldr	r3, [pc, #248]	; (800315c <HAL_LTDC_Init+0x19c>)
 8003062:	400b      	ands	r3, r1
 8003064:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	041b      	lsls	r3, r3, #16
 800306c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68d9      	ldr	r1, [r3, #12]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1a      	ldr	r2, [r3, #32]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6919      	ldr	r1, [r3, #16]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	4b33      	ldr	r3, [pc, #204]	; (800315c <HAL_LTDC_Init+0x19c>)
 8003090:	400b      	ands	r3, r1
 8003092:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	041b      	lsls	r3, r3, #16
 800309a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6919      	ldr	r1, [r3, #16]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	431a      	orrs	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6959      	ldr	r1, [r3, #20]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	4b27      	ldr	r3, [pc, #156]	; (800315c <HAL_LTDC_Init+0x19c>)
 80030be:	400b      	ands	r3, r1
 80030c0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c6:	041b      	lsls	r3, r3, #16
 80030c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6959      	ldr	r1, [r3, #20]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030e6:	021b      	lsls	r3, r3, #8
 80030e8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80030f0:	041b      	lsls	r3, r3, #16
 80030f2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003102:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4313      	orrs	r3, r2
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0206 	orr.w	r2, r2, #6
 800312e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	699a      	ldr	r2, [r3, #24]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	f000f800 	.word	0xf000f800

08003160 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003176:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	2b00      	cmp	r3, #0
 8003180:	d023      	beq.n	80031ca <HAL_LTDC_IRQHandler+0x6a>
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d01e      	beq.n	80031ca <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0204 	bic.w	r2, r2, #4
 800319a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2204      	movs	r2, #4
 80031a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80031aa:	f043 0201 	orr.w	r2, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2204      	movs	r2, #4
 80031b8:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f86f 	bl	80032a8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d023      	beq.n	800321c <HAL_LTDC_IRQHandler+0xbc>
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d01e      	beq.n	800321c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0202 	bic.w	r2, r2, #2
 80031ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2202      	movs	r2, #2
 80031f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80031fc:	f043 0202 	orr.w	r2, r3, #2
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2204      	movs	r2, #4
 800320a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f846 	bl	80032a8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d01b      	beq.n	800325e <HAL_LTDC_IRQHandler+0xfe>
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d016      	beq.n	800325e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0201 	bic.w	r2, r2, #1
 800323e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2201      	movs	r2, #1
 8003246:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f82f 	bl	80032bc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f003 0308 	and.w	r3, r3, #8
 8003264:	2b00      	cmp	r3, #0
 8003266:	d01b      	beq.n	80032a0 <HAL_LTDC_IRQHandler+0x140>
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d016      	beq.n	80032a0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0208 	bic.w	r2, r2, #8
 8003280:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2208      	movs	r2, #8
 8003288:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fd fd58 	bl	8000d50 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80032a0:	bf00      	nop
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1) or LTDC_LAYER_3 (2) or LTDC_LAYER_4 (3)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80032d0:	b5b0      	push	{r4, r5, r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_LTDC_ConfigLayer+0x1a>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e02c      	b.n	8003344 <HAL_LTDC_ConfigLayer+0x74>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2202      	movs	r2, #2
 80032f6:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2134      	movs	r1, #52	; 0x34
 8003300:	fb01 f303 	mul.w	r3, r1, r3
 8003304:	4413      	add	r3, r2
 8003306:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	4614      	mov	r4, r2
 800330e:	461d      	mov	r5, r3
 8003310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800331a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800331c:	682b      	ldr	r3, [r5, #0]
 800331e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	68b9      	ldr	r1, [r7, #8]
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f857 	bl	80033d8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2201      	movs	r2, #1
 8003330:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bdb0      	pop	{r4, r5, r7, pc}

0800334c <HAL_LTDC_SetWindowPosition>:
  *                         This parameter can be one of the following values:
  *                         LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
 8003358:	603b      	str	r3, [r7, #0]
  assert_param(IS_LTDC_LAYER(LayerIdx));
  assert_param(IS_LTDC_CFBLL(X0));
  assert_param(IS_LTDC_CFBLNBR(Y0));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <HAL_LTDC_SetWindowPosition+0x1c>
 8003364:	2302      	movs	r3, #2
 8003366:	e033      	b.n	80033d0 <HAL_LTDC_SetWindowPosition+0x84>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	2234      	movs	r2, #52	; 0x34
 800337c:	fb02 f303 	mul.w	r3, r2, r3
 8003380:	3338      	adds	r3, #56	; 0x38
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	4413      	add	r3, r2
 8003386:	617b      	str	r3, [r7, #20]

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	601a      	str	r2, [r3, #0]
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	441a      	add	r2, r3
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	605a      	str	r2, [r3, #4]

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	609a      	str	r2, [r3, #8]
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	441a      	add	r2, r3
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	60da      	str	r2, [r3, #12]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	6979      	ldr	r1, [r7, #20]
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 f811 	bl	80033d8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2201      	movs	r2, #1
 80033bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3718      	adds	r7, #24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80033d8:	b480      	push	{r7}
 80033da:	b089      	sub	sp, #36	; 0x24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	0c1b      	lsrs	r3, r3, #16
 80033f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f4:	4413      	add	r3, r2
 80033f6:	041b      	lsls	r3, r3, #16
 80033f8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	01db      	lsls	r3, r3, #7
 8003404:	4413      	add	r3, r2
 8003406:	3384      	adds	r3, #132	; 0x84
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	6812      	ldr	r2, [r2, #0]
 800340e:	4611      	mov	r1, r2
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	01d2      	lsls	r2, r2, #7
 8003414:	440a      	add	r2, r1
 8003416:	3284      	adds	r2, #132	; 0x84
 8003418:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800341c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	0c1b      	lsrs	r3, r3, #16
 800342a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800342e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003430:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4619      	mov	r1, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	01db      	lsls	r3, r3, #7
 800343c:	440b      	add	r3, r1
 800343e:	3384      	adds	r3, #132	; 0x84
 8003440:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003446:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003456:	4413      	add	r3, r2
 8003458:	041b      	lsls	r3, r3, #16
 800345a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	01db      	lsls	r3, r3, #7
 8003466:	4413      	add	r3, r2
 8003468:	3384      	adds	r3, #132	; 0x84
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	4611      	mov	r1, r2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	01d2      	lsls	r2, r2, #7
 8003476:	440a      	add	r2, r1
 8003478:	3284      	adds	r2, #132	; 0x84
 800347a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800347e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800348e:	4413      	add	r3, r2
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4619      	mov	r1, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	01db      	lsls	r3, r3, #7
 800349c:	440b      	add	r3, r1
 800349e:	3384      	adds	r3, #132	; 0x84
 80034a0:	4619      	mov	r1, r3
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	461a      	mov	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	01db      	lsls	r3, r3, #7
 80034b2:	4413      	add	r3, r2
 80034b4:	3384      	adds	r3, #132	; 0x84
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	6812      	ldr	r2, [r2, #0]
 80034bc:	4611      	mov	r1, r2
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	01d2      	lsls	r2, r2, #7
 80034c2:	440a      	add	r2, r1
 80034c4:	3284      	adds	r2, #132	; 0x84
 80034c6:	f023 0307 	bic.w	r3, r3, #7
 80034ca:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	461a      	mov	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	01db      	lsls	r3, r3, #7
 80034d6:	4413      	add	r3, r2
 80034d8:	3384      	adds	r3, #132	; 0x84
 80034da:	461a      	mov	r2, r3
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80034e8:	021b      	lsls	r3, r3, #8
 80034ea:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80034f2:	041b      	lsls	r3, r3, #16
 80034f4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	061b      	lsls	r3, r3, #24
 80034fc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	01db      	lsls	r3, r3, #7
 8003508:	4413      	add	r3, r2
 800350a:	3384      	adds	r3, #132	; 0x84
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	01db      	lsls	r3, r3, #7
 8003518:	4413      	add	r3, r2
 800351a:	3384      	adds	r3, #132	; 0x84
 800351c:	461a      	mov	r2, r3
 800351e:	2300      	movs	r3, #0
 8003520:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003528:	461a      	mov	r2, r3
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	431a      	orrs	r2, r3
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	431a      	orrs	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4619      	mov	r1, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	01db      	lsls	r3, r3, #7
 800353c:	440b      	add	r3, r1
 800353e:	3384      	adds	r3, #132	; 0x84
 8003540:	4619      	mov	r1, r3
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	4313      	orrs	r3, r2
 8003546:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	461a      	mov	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	01db      	lsls	r3, r3, #7
 8003552:	4413      	add	r3, r2
 8003554:	3384      	adds	r3, #132	; 0x84
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	4611      	mov	r1, r2
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	01d2      	lsls	r2, r2, #7
 8003562:	440a      	add	r2, r1
 8003564:	3284      	adds	r2, #132	; 0x84
 8003566:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800356a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	461a      	mov	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	01db      	lsls	r3, r3, #7
 8003576:	4413      	add	r3, r2
 8003578:	3384      	adds	r3, #132	; 0x84
 800357a:	461a      	mov	r2, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	01db      	lsls	r3, r3, #7
 800358c:	4413      	add	r3, r2
 800358e:	3384      	adds	r3, #132	; 0x84
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	6812      	ldr	r2, [r2, #0]
 8003596:	4611      	mov	r1, r2
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	01d2      	lsls	r2, r2, #7
 800359c:	440a      	add	r2, r1
 800359e:	3284      	adds	r2, #132	; 0x84
 80035a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80035a4:	f023 0307 	bic.w	r3, r3, #7
 80035a8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	69da      	ldr	r2, [r3, #28]
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	68f9      	ldr	r1, [r7, #12]
 80035b4:	6809      	ldr	r1, [r1, #0]
 80035b6:	4608      	mov	r0, r1
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	01c9      	lsls	r1, r1, #7
 80035bc:	4401      	add	r1, r0
 80035be:	3184      	adds	r1, #132	; 0x84
 80035c0:	4313      	orrs	r3, r2
 80035c2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	461a      	mov	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	01db      	lsls	r3, r3, #7
 80035ce:	4413      	add	r3, r2
 80035d0:	3384      	adds	r3, #132	; 0x84
 80035d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	461a      	mov	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	01db      	lsls	r3, r3, #7
 80035de:	4413      	add	r3, r2
 80035e0:	3384      	adds	r3, #132	; 0x84
 80035e2:	461a      	mov	r2, r3
 80035e4:	2300      	movs	r3, #0
 80035e6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	461a      	mov	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	01db      	lsls	r3, r3, #7
 80035f2:	4413      	add	r3, r2
 80035f4:	3384      	adds	r3, #132	; 0x84
 80035f6:	461a      	mov	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d102      	bne.n	800360c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003606:	2304      	movs	r3, #4
 8003608:	61fb      	str	r3, [r7, #28]
 800360a:	e01b      	b.n	8003644 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d102      	bne.n	800361a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003614:	2303      	movs	r3, #3
 8003616:	61fb      	str	r3, [r7, #28]
 8003618:	e014      	b.n	8003644 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b04      	cmp	r3, #4
 8003620:	d00b      	beq.n	800363a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003626:	2b02      	cmp	r3, #2
 8003628:	d007      	beq.n	800363a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800362e:	2b03      	cmp	r3, #3
 8003630:	d003      	beq.n	800363a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003636:	2b07      	cmp	r3, #7
 8003638:	d102      	bne.n	8003640 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800363a:	2302      	movs	r3, #2
 800363c:	61fb      	str	r3, [r7, #28]
 800363e:	e001      	b.n	8003644 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003640:	2301      	movs	r3, #1
 8003642:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	01db      	lsls	r3, r3, #7
 800364e:	4413      	add	r3, r2
 8003650:	3384      	adds	r3, #132	; 0x84
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	4611      	mov	r1, r2
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	01d2      	lsls	r2, r2, #7
 800365e:	440a      	add	r2, r1
 8003660:	3284      	adds	r2, #132	; 0x84
 8003662:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003666:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	fb02 f303 	mul.w	r3, r2, r3
 8003672:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	6859      	ldr	r1, [r3, #4]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	1acb      	subs	r3, r1, r3
 800367e:	69f9      	ldr	r1, [r7, #28]
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003686:	68f9      	ldr	r1, [r7, #12]
 8003688:	6809      	ldr	r1, [r1, #0]
 800368a:	4608      	mov	r0, r1
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	01c9      	lsls	r1, r1, #7
 8003690:	4401      	add	r1, r0
 8003692:	3184      	adds	r1, #132	; 0x84
 8003694:	4313      	orrs	r3, r2
 8003696:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	461a      	mov	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	01db      	lsls	r3, r3, #7
 80036a2:	4413      	add	r3, r2
 80036a4:	3384      	adds	r3, #132	; 0x84
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	6812      	ldr	r2, [r2, #0]
 80036ac:	4611      	mov	r1, r2
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	01d2      	lsls	r2, r2, #7
 80036b2:	440a      	add	r2, r1
 80036b4:	3284      	adds	r2, #132	; 0x84
 80036b6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80036ba:	f023 0307 	bic.w	r3, r3, #7
 80036be:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	01db      	lsls	r3, r3, #7
 80036ca:	4413      	add	r3, r2
 80036cc:	3384      	adds	r3, #132	; 0x84
 80036ce:	461a      	mov	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	461a      	mov	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	01db      	lsls	r3, r3, #7
 80036e0:	4413      	add	r3, r2
 80036e2:	3384      	adds	r3, #132	; 0x84
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	6812      	ldr	r2, [r2, #0]
 80036ea:	4611      	mov	r1, r2
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	01d2      	lsls	r2, r2, #7
 80036f0:	440a      	add	r2, r1
 80036f2:	3284      	adds	r2, #132	; 0x84
 80036f4:	f043 0301 	orr.w	r3, r3, #1
 80036f8:	6013      	str	r3, [r2, #0]
}
 80036fa:	bf00      	nop
 80036fc:	3724      	adds	r7, #36	; 0x24
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
	...

08003708 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800370e:	2300      	movs	r3, #0
 8003710:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003712:	2300      	movs	r3, #0
 8003714:	603b      	str	r3, [r7, #0]
 8003716:	4b20      	ldr	r3, [pc, #128]	; (8003798 <HAL_PWREx_EnableOverDrive+0x90>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	4a1f      	ldr	r2, [pc, #124]	; (8003798 <HAL_PWREx_EnableOverDrive+0x90>)
 800371c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003720:	6413      	str	r3, [r2, #64]	; 0x40
 8003722:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <HAL_PWREx_EnableOverDrive+0x90>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372a:	603b      	str	r3, [r7, #0]
 800372c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800372e:	4b1b      	ldr	r3, [pc, #108]	; (800379c <HAL_PWREx_EnableOverDrive+0x94>)
 8003730:	2201      	movs	r2, #1
 8003732:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003734:	f7fe fc06 	bl	8001f44 <HAL_GetTick>
 8003738:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800373a:	e009      	b.n	8003750 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800373c:	f7fe fc02 	bl	8001f44 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800374a:	d901      	bls.n	8003750 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e01f      	b.n	8003790 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003750:	4b13      	ldr	r3, [pc, #76]	; (80037a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800375c:	d1ee      	bne.n	800373c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800375e:	4b11      	ldr	r3, [pc, #68]	; (80037a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003760:	2201      	movs	r2, #1
 8003762:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003764:	f7fe fbee 	bl	8001f44 <HAL_GetTick>
 8003768:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800376a:	e009      	b.n	8003780 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800376c:	f7fe fbea 	bl	8001f44 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800377a:	d901      	bls.n	8003780 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e007      	b.n	8003790 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003780:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003788:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800378c:	d1ee      	bne.n	800376c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40023800 	.word	0x40023800
 800379c:	420e0040 	.word	0x420e0040
 80037a0:	40007000 	.word	0x40007000
 80037a4:	420e0044 	.word	0x420e0044

080037a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e267      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d075      	beq.n	80038b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037c6:	4b88      	ldr	r3, [pc, #544]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 030c 	and.w	r3, r3, #12
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d00c      	beq.n	80037ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037d2:	4b85      	ldr	r3, [pc, #532]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d112      	bne.n	8003804 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037de:	4b82      	ldr	r3, [pc, #520]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ea:	d10b      	bne.n	8003804 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ec:	4b7e      	ldr	r3, [pc, #504]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d05b      	beq.n	80038b0 <HAL_RCC_OscConfig+0x108>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d157      	bne.n	80038b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e242      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380c:	d106      	bne.n	800381c <HAL_RCC_OscConfig+0x74>
 800380e:	4b76      	ldr	r3, [pc, #472]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a75      	ldr	r2, [pc, #468]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	e01d      	b.n	8003858 <HAL_RCC_OscConfig+0xb0>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003824:	d10c      	bne.n	8003840 <HAL_RCC_OscConfig+0x98>
 8003826:	4b70      	ldr	r3, [pc, #448]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a6f      	ldr	r2, [pc, #444]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 800382c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	4b6d      	ldr	r3, [pc, #436]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a6c      	ldr	r2, [pc, #432]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	e00b      	b.n	8003858 <HAL_RCC_OscConfig+0xb0>
 8003840:	4b69      	ldr	r3, [pc, #420]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a68      	ldr	r2, [pc, #416]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	4b66      	ldr	r3, [pc, #408]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a65      	ldr	r2, [pc, #404]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d013      	beq.n	8003888 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003860:	f7fe fb70 	bl	8001f44 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003868:	f7fe fb6c 	bl	8001f44 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	; 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e207      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387a:	4b5b      	ldr	r3, [pc, #364]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0xc0>
 8003886:	e014      	b.n	80038b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003888:	f7fe fb5c 	bl	8001f44 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003890:	f7fe fb58 	bl	8001f44 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b64      	cmp	r3, #100	; 0x64
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e1f3      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a2:	4b51      	ldr	r3, [pc, #324]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f0      	bne.n	8003890 <HAL_RCC_OscConfig+0xe8>
 80038ae:	e000      	b.n	80038b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d063      	beq.n	8003986 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038be:	4b4a      	ldr	r3, [pc, #296]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 030c 	and.w	r3, r3, #12
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00b      	beq.n	80038e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ca:	4b47      	ldr	r3, [pc, #284]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d11c      	bne.n	8003910 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038d6:	4b44      	ldr	r3, [pc, #272]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d116      	bne.n	8003910 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e2:	4b41      	ldr	r3, [pc, #260]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d005      	beq.n	80038fa <HAL_RCC_OscConfig+0x152>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d001      	beq.n	80038fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e1c7      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fa:	4b3b      	ldr	r3, [pc, #236]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	4937      	ldr	r1, [pc, #220]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 800390a:	4313      	orrs	r3, r2
 800390c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800390e:	e03a      	b.n	8003986 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d020      	beq.n	800395a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003918:	4b34      	ldr	r3, [pc, #208]	; (80039ec <HAL_RCC_OscConfig+0x244>)
 800391a:	2201      	movs	r2, #1
 800391c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391e:	f7fe fb11 	bl	8001f44 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003926:	f7fe fb0d 	bl	8001f44 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e1a8      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003938:	4b2b      	ldr	r3, [pc, #172]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0f0      	beq.n	8003926 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003944:	4b28      	ldr	r3, [pc, #160]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4925      	ldr	r1, [pc, #148]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003954:	4313      	orrs	r3, r2
 8003956:	600b      	str	r3, [r1, #0]
 8003958:	e015      	b.n	8003986 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800395a:	4b24      	ldr	r3, [pc, #144]	; (80039ec <HAL_RCC_OscConfig+0x244>)
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fe faf0 	bl	8001f44 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003968:	f7fe faec 	bl	8001f44 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e187      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800397a:	4b1b      	ldr	r3, [pc, #108]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	2b00      	cmp	r3, #0
 8003990:	d036      	beq.n	8003a00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d016      	beq.n	80039c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800399a:	4b15      	ldr	r3, [pc, #84]	; (80039f0 <HAL_RCC_OscConfig+0x248>)
 800399c:	2201      	movs	r2, #1
 800399e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a0:	f7fe fad0 	bl	8001f44 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039a8:	f7fe facc 	bl	8001f44 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e167      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ba:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80039bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0x200>
 80039c6:	e01b      	b.n	8003a00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039c8:	4b09      	ldr	r3, [pc, #36]	; (80039f0 <HAL_RCC_OscConfig+0x248>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ce:	f7fe fab9 	bl	8001f44 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d4:	e00e      	b.n	80039f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039d6:	f7fe fab5 	bl	8001f44 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d907      	bls.n	80039f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e150      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
 80039e8:	40023800 	.word	0x40023800
 80039ec:	42470000 	.word	0x42470000
 80039f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f4:	4b88      	ldr	r3, [pc, #544]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 80039f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1ea      	bne.n	80039d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 8097 	beq.w	8003b3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a12:	4b81      	ldr	r3, [pc, #516]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10f      	bne.n	8003a3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	4b7d      	ldr	r3, [pc, #500]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	4a7c      	ldr	r2, [pc, #496]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a2e:	4b7a      	ldr	r3, [pc, #488]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a36:	60bb      	str	r3, [r7, #8]
 8003a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3e:	4b77      	ldr	r3, [pc, #476]	; (8003c1c <HAL_RCC_OscConfig+0x474>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d118      	bne.n	8003a7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a4a:	4b74      	ldr	r3, [pc, #464]	; (8003c1c <HAL_RCC_OscConfig+0x474>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a73      	ldr	r2, [pc, #460]	; (8003c1c <HAL_RCC_OscConfig+0x474>)
 8003a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a56:	f7fe fa75 	bl	8001f44 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a5e:	f7fe fa71 	bl	8001f44 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e10c      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a70:	4b6a      	ldr	r3, [pc, #424]	; (8003c1c <HAL_RCC_OscConfig+0x474>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0f0      	beq.n	8003a5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d106      	bne.n	8003a92 <HAL_RCC_OscConfig+0x2ea>
 8003a84:	4b64      	ldr	r3, [pc, #400]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a88:	4a63      	ldr	r2, [pc, #396]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a90:	e01c      	b.n	8003acc <HAL_RCC_OscConfig+0x324>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2b05      	cmp	r3, #5
 8003a98:	d10c      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x30c>
 8003a9a:	4b5f      	ldr	r3, [pc, #380]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9e:	4a5e      	ldr	r2, [pc, #376]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003aa0:	f043 0304 	orr.w	r3, r3, #4
 8003aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa6:	4b5c      	ldr	r3, [pc, #368]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aaa:	4a5b      	ldr	r2, [pc, #364]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003aac:	f043 0301 	orr.w	r3, r3, #1
 8003ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab2:	e00b      	b.n	8003acc <HAL_RCC_OscConfig+0x324>
 8003ab4:	4b58      	ldr	r3, [pc, #352]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab8:	4a57      	ldr	r2, [pc, #348]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003aba:	f023 0301 	bic.w	r3, r3, #1
 8003abe:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac0:	4b55      	ldr	r3, [pc, #340]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac4:	4a54      	ldr	r2, [pc, #336]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003ac6:	f023 0304 	bic.w	r3, r3, #4
 8003aca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d015      	beq.n	8003b00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad4:	f7fe fa36 	bl	8001f44 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ada:	e00a      	b.n	8003af2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003adc:	f7fe fa32 	bl	8001f44 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e0cb      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af2:	4b49      	ldr	r3, [pc, #292]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0ee      	beq.n	8003adc <HAL_RCC_OscConfig+0x334>
 8003afe:	e014      	b.n	8003b2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b00:	f7fe fa20 	bl	8001f44 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b06:	e00a      	b.n	8003b1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b08:	f7fe fa1c 	bl	8001f44 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e0b5      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b1e:	4b3e      	ldr	r3, [pc, #248]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1ee      	bne.n	8003b08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b2a:	7dfb      	ldrb	r3, [r7, #23]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d105      	bne.n	8003b3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b30:	4b39      	ldr	r3, [pc, #228]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	4a38      	ldr	r2, [pc, #224]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 80a1 	beq.w	8003c88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b46:	4b34      	ldr	r3, [pc, #208]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d05c      	beq.n	8003c0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d141      	bne.n	8003bde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b5a:	4b31      	ldr	r3, [pc, #196]	; (8003c20 <HAL_RCC_OscConfig+0x478>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b60:	f7fe f9f0 	bl	8001f44 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b68:	f7fe f9ec 	bl	8001f44 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e087      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7a:	4b27      	ldr	r3, [pc, #156]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f0      	bne.n	8003b68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69da      	ldr	r2, [r3, #28]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	019b      	lsls	r3, r3, #6
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	085b      	lsrs	r3, r3, #1
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	041b      	lsls	r3, r3, #16
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	061b      	lsls	r3, r3, #24
 8003baa:	491b      	ldr	r1, [pc, #108]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bb0:	4b1b      	ldr	r3, [pc, #108]	; (8003c20 <HAL_RCC_OscConfig+0x478>)
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb6:	f7fe f9c5 	bl	8001f44 <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bbe:	f7fe f9c1 	bl	8001f44 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e05c      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd0:	4b11      	ldr	r3, [pc, #68]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0f0      	beq.n	8003bbe <HAL_RCC_OscConfig+0x416>
 8003bdc:	e054      	b.n	8003c88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bde:	4b10      	ldr	r3, [pc, #64]	; (8003c20 <HAL_RCC_OscConfig+0x478>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be4:	f7fe f9ae 	bl	8001f44 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bec:	f7fe f9aa 	bl	8001f44 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e045      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bfe:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x444>
 8003c0a:	e03d      	b.n	8003c88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d107      	bne.n	8003c24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e038      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	40007000 	.word	0x40007000
 8003c20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c24:	4b1b      	ldr	r3, [pc, #108]	; (8003c94 <HAL_RCC_OscConfig+0x4ec>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d028      	beq.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d121      	bne.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d11a      	bne.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c54:	4013      	ands	r3, r2
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d111      	bne.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6a:	085b      	lsrs	r3, r3, #1
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d107      	bne.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d001      	beq.n	8003c88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e000      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40023800 	.word	0x40023800

08003c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0cc      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cac:	4b68      	ldr	r3, [pc, #416]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 030f 	and.w	r3, r3, #15
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d90c      	bls.n	8003cd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cba:	4b65      	ldr	r3, [pc, #404]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc2:	4b63      	ldr	r3, [pc, #396]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d001      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0b8      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d020      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cec:	4b59      	ldr	r3, [pc, #356]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	4a58      	ldr	r2, [pc, #352]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d04:	4b53      	ldr	r3, [pc, #332]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	4a52      	ldr	r2, [pc, #328]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d10:	4b50      	ldr	r3, [pc, #320]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	494d      	ldr	r1, [pc, #308]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d044      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d107      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d36:	4b47      	ldr	r3, [pc, #284]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d119      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e07f      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d003      	beq.n	8003d56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d107      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d56:	4b3f      	ldr	r3, [pc, #252]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d109      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e06f      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d66:	4b3b      	ldr	r3, [pc, #236]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e067      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d76:	4b37      	ldr	r3, [pc, #220]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f023 0203 	bic.w	r2, r3, #3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	4934      	ldr	r1, [pc, #208]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d88:	f7fe f8dc 	bl	8001f44 <HAL_GetTick>
 8003d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8e:	e00a      	b.n	8003da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d90:	f7fe f8d8 	bl	8001f44 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e04f      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da6:	4b2b      	ldr	r3, [pc, #172]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 020c 	and.w	r2, r3, #12
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d1eb      	bne.n	8003d90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003db8:	4b25      	ldr	r3, [pc, #148]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 030f 	and.w	r3, r3, #15
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d20c      	bcs.n	8003de0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc6:	4b22      	ldr	r3, [pc, #136]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dce:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d001      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e032      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d008      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dec:	4b19      	ldr	r3, [pc, #100]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	4916      	ldr	r1, [pc, #88]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d009      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e0a:	4b12      	ldr	r3, [pc, #72]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	490e      	ldr	r1, [pc, #56]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e1e:	f000 f821 	bl	8003e64 <HAL_RCC_GetSysClockFreq>
 8003e22:	4602      	mov	r2, r0
 8003e24:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	091b      	lsrs	r3, r3, #4
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	490a      	ldr	r1, [pc, #40]	; (8003e58 <HAL_RCC_ClockConfig+0x1c0>)
 8003e30:	5ccb      	ldrb	r3, [r1, r3]
 8003e32:	fa22 f303 	lsr.w	r3, r2, r3
 8003e36:	4a09      	ldr	r2, [pc, #36]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e3a:	4b09      	ldr	r3, [pc, #36]	; (8003e60 <HAL_RCC_ClockConfig+0x1c8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fd fcac 	bl	800179c <HAL_InitTick>

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40023c00 	.word	0x40023c00
 8003e54:	40023800 	.word	0x40023800
 8003e58:	080079d0 	.word	0x080079d0
 8003e5c:	20000000 	.word	0x20000000
 8003e60:	20000008 	.word	0x20000008

08003e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e68:	b094      	sub	sp, #80	; 0x50
 8003e6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e70:	2300      	movs	r3, #0
 8003e72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e74:	2300      	movs	r3, #0
 8003e76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e7c:	4b79      	ldr	r3, [pc, #484]	; (8004064 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 030c 	and.w	r3, r3, #12
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d00d      	beq.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x40>
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	f200 80e1 	bhi.w	8004050 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <HAL_RCC_GetSysClockFreq+0x34>
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d003      	beq.n	8003e9e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e96:	e0db      	b.n	8004050 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e98:	4b73      	ldr	r3, [pc, #460]	; (8004068 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e9c:	e0db      	b.n	8004056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e9e:	4b73      	ldr	r3, [pc, #460]	; (800406c <HAL_RCC_GetSysClockFreq+0x208>)
 8003ea0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ea2:	e0d8      	b.n	8004056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ea4:	4b6f      	ldr	r3, [pc, #444]	; (8004064 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003eac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eae:	4b6d      	ldr	r3, [pc, #436]	; (8004064 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d063      	beq.n	8003f82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eba:	4b6a      	ldr	r3, [pc, #424]	; (8004064 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	099b      	lsrs	r3, r3, #6
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ec4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ecc:	633b      	str	r3, [r7, #48]	; 0x30
 8003ece:	2300      	movs	r3, #0
 8003ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ed2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ed6:	4622      	mov	r2, r4
 8003ed8:	462b      	mov	r3, r5
 8003eda:	f04f 0000 	mov.w	r0, #0
 8003ede:	f04f 0100 	mov.w	r1, #0
 8003ee2:	0159      	lsls	r1, r3, #5
 8003ee4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ee8:	0150      	lsls	r0, r2, #5
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4621      	mov	r1, r4
 8003ef0:	1a51      	subs	r1, r2, r1
 8003ef2:	6139      	str	r1, [r7, #16]
 8003ef4:	4629      	mov	r1, r5
 8003ef6:	eb63 0301 	sbc.w	r3, r3, r1
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	f04f 0300 	mov.w	r3, #0
 8003f04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f08:	4659      	mov	r1, fp
 8003f0a:	018b      	lsls	r3, r1, #6
 8003f0c:	4651      	mov	r1, sl
 8003f0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f12:	4651      	mov	r1, sl
 8003f14:	018a      	lsls	r2, r1, #6
 8003f16:	4651      	mov	r1, sl
 8003f18:	ebb2 0801 	subs.w	r8, r2, r1
 8003f1c:	4659      	mov	r1, fp
 8003f1e:	eb63 0901 	sbc.w	r9, r3, r1
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f36:	4690      	mov	r8, r2
 8003f38:	4699      	mov	r9, r3
 8003f3a:	4623      	mov	r3, r4
 8003f3c:	eb18 0303 	adds.w	r3, r8, r3
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	462b      	mov	r3, r5
 8003f44:	eb49 0303 	adc.w	r3, r9, r3
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f56:	4629      	mov	r1, r5
 8003f58:	024b      	lsls	r3, r1, #9
 8003f5a:	4621      	mov	r1, r4
 8003f5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f60:	4621      	mov	r1, r4
 8003f62:	024a      	lsls	r2, r1, #9
 8003f64:	4610      	mov	r0, r2
 8003f66:	4619      	mov	r1, r3
 8003f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f74:	f7fc f93c 	bl	80001f0 <__aeabi_uldivmod>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f80:	e058      	b.n	8004034 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f82:	4b38      	ldr	r3, [pc, #224]	; (8004064 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	099b      	lsrs	r3, r3, #6
 8003f88:	2200      	movs	r2, #0
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	4611      	mov	r1, r2
 8003f8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f92:	623b      	str	r3, [r7, #32]
 8003f94:	2300      	movs	r3, #0
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
 8003f98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f9c:	4642      	mov	r2, r8
 8003f9e:	464b      	mov	r3, r9
 8003fa0:	f04f 0000 	mov.w	r0, #0
 8003fa4:	f04f 0100 	mov.w	r1, #0
 8003fa8:	0159      	lsls	r1, r3, #5
 8003faa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fae:	0150      	lsls	r0, r2, #5
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4641      	mov	r1, r8
 8003fb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fba:	4649      	mov	r1, r9
 8003fbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	f04f 0300 	mov.w	r3, #0
 8003fc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fd4:	ebb2 040a 	subs.w	r4, r2, sl
 8003fd8:	eb63 050b 	sbc.w	r5, r3, fp
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	f04f 0300 	mov.w	r3, #0
 8003fe4:	00eb      	lsls	r3, r5, #3
 8003fe6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fea:	00e2      	lsls	r2, r4, #3
 8003fec:	4614      	mov	r4, r2
 8003fee:	461d      	mov	r5, r3
 8003ff0:	4643      	mov	r3, r8
 8003ff2:	18e3      	adds	r3, r4, r3
 8003ff4:	603b      	str	r3, [r7, #0]
 8003ff6:	464b      	mov	r3, r9
 8003ff8:	eb45 0303 	adc.w	r3, r5, r3
 8003ffc:	607b      	str	r3, [r7, #4]
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	f04f 0300 	mov.w	r3, #0
 8004006:	e9d7 4500 	ldrd	r4, r5, [r7]
 800400a:	4629      	mov	r1, r5
 800400c:	028b      	lsls	r3, r1, #10
 800400e:	4621      	mov	r1, r4
 8004010:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004014:	4621      	mov	r1, r4
 8004016:	028a      	lsls	r2, r1, #10
 8004018:	4610      	mov	r0, r2
 800401a:	4619      	mov	r1, r3
 800401c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800401e:	2200      	movs	r2, #0
 8004020:	61bb      	str	r3, [r7, #24]
 8004022:	61fa      	str	r2, [r7, #28]
 8004024:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004028:	f7fc f8e2 	bl	80001f0 <__aeabi_uldivmod>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4613      	mov	r3, r2
 8004032:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004034:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <HAL_RCC_GetSysClockFreq+0x200>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	0c1b      	lsrs	r3, r3, #16
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	3301      	adds	r3, #1
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004044:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004048:	fbb2 f3f3 	udiv	r3, r2, r3
 800404c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800404e:	e002      	b.n	8004056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004050:	4b05      	ldr	r3, [pc, #20]	; (8004068 <HAL_RCC_GetSysClockFreq+0x204>)
 8004052:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004054:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004058:	4618      	mov	r0, r3
 800405a:	3750      	adds	r7, #80	; 0x50
 800405c:	46bd      	mov	sp, r7
 800405e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004062:	bf00      	nop
 8004064:	40023800 	.word	0x40023800
 8004068:	00f42400 	.word	0x00f42400
 800406c:	007a1200 	.word	0x007a1200

08004070 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004074:	4b03      	ldr	r3, [pc, #12]	; (8004084 <HAL_RCC_GetHCLKFreq+0x14>)
 8004076:	681b      	ldr	r3, [r3, #0]
}
 8004078:	4618      	mov	r0, r3
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	20000000 	.word	0x20000000

08004088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800408c:	f7ff fff0 	bl	8004070 <HAL_RCC_GetHCLKFreq>
 8004090:	4602      	mov	r2, r0
 8004092:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	0a9b      	lsrs	r3, r3, #10
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	4903      	ldr	r1, [pc, #12]	; (80040ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800409e:	5ccb      	ldrb	r3, [r1, r3]
 80040a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40023800 	.word	0x40023800
 80040ac:	080079e0 	.word	0x080079e0

080040b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040b4:	f7ff ffdc 	bl	8004070 <HAL_RCC_GetHCLKFreq>
 80040b8:	4602      	mov	r2, r0
 80040ba:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	0b5b      	lsrs	r3, r3, #13
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	4903      	ldr	r1, [pc, #12]	; (80040d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040c6:	5ccb      	ldrb	r3, [r1, r3]
 80040c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40023800 	.word	0x40023800
 80040d4:	080079e0 	.word	0x080079e0

080040d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	220f      	movs	r2, #15
 80040e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80040e8:	4b12      	ldr	r3, [pc, #72]	; (8004134 <HAL_RCC_GetClockConfig+0x5c>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f003 0203 	and.w	r2, r3, #3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80040f4:	4b0f      	ldr	r3, [pc, #60]	; (8004134 <HAL_RCC_GetClockConfig+0x5c>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004100:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <HAL_RCC_GetClockConfig+0x5c>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800410c:	4b09      	ldr	r3, [pc, #36]	; (8004134 <HAL_RCC_GetClockConfig+0x5c>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	08db      	lsrs	r3, r3, #3
 8004112:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800411a:	4b07      	ldr	r3, [pc, #28]	; (8004138 <HAL_RCC_GetClockConfig+0x60>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 020f 	and.w	r2, r3, #15
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	601a      	str	r2, [r3, #0]
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	40023800 	.word	0x40023800
 8004138:	40023c00 	.word	0x40023c00

0800413c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10b      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004160:	2b00      	cmp	r3, #0
 8004162:	d105      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800416c:	2b00      	cmp	r3, #0
 800416e:	d075      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004170:	4b91      	ldr	r3, [pc, #580]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004176:	f7fd fee5 	bl	8001f44 <HAL_GetTick>
 800417a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800417c:	e008      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800417e:	f7fd fee1 	bl	8001f44 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e189      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004190:	4b8a      	ldr	r3, [pc, #552]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1f0      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d009      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	019a      	lsls	r2, r3, #6
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	071b      	lsls	r3, r3, #28
 80041b4:	4981      	ldr	r1, [pc, #516]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d01f      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041c8:	4b7c      	ldr	r3, [pc, #496]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ce:	0f1b      	lsrs	r3, r3, #28
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	019a      	lsls	r2, r3, #6
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	061b      	lsls	r3, r3, #24
 80041e2:	431a      	orrs	r2, r3
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	071b      	lsls	r3, r3, #28
 80041e8:	4974      	ldr	r1, [pc, #464]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80041f0:	4b72      	ldr	r3, [pc, #456]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041f6:	f023 021f 	bic.w	r2, r3, #31
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	3b01      	subs	r3, #1
 8004200:	496e      	ldr	r1, [pc, #440]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004202:	4313      	orrs	r3, r2
 8004204:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00d      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	019a      	lsls	r2, r3, #6
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	061b      	lsls	r3, r3, #24
 8004220:	431a      	orrs	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	071b      	lsls	r3, r3, #28
 8004228:	4964      	ldr	r1, [pc, #400]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004230:	4b61      	ldr	r3, [pc, #388]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004232:	2201      	movs	r2, #1
 8004234:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004236:	f7fd fe85 	bl	8001f44 <HAL_GetTick>
 800423a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800423c:	e008      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800423e:	f7fd fe81 	bl	8001f44 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e129      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004250:	4b5a      	ldr	r3, [pc, #360]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0f0      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	d105      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004270:	2b00      	cmp	r3, #0
 8004272:	d079      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004274:	4b52      	ldr	r3, [pc, #328]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004276:	2200      	movs	r2, #0
 8004278:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800427a:	f7fd fe63 	bl	8001f44 <HAL_GetTick>
 800427e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004280:	e008      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004282:	f7fd fe5f 	bl	8001f44 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d901      	bls.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e107      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004294:	4b49      	ldr	r3, [pc, #292]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800429c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042a0:	d0ef      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0304 	and.w	r3, r3, #4
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d020      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042ae:	4b43      	ldr	r3, [pc, #268]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b4:	0f1b      	lsrs	r3, r3, #28
 80042b6:	f003 0307 	and.w	r3, r3, #7
 80042ba:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	019a      	lsls	r2, r3, #6
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	061b      	lsls	r3, r3, #24
 80042c8:	431a      	orrs	r2, r3
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	071b      	lsls	r3, r3, #28
 80042ce:	493b      	ldr	r1, [pc, #236]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80042d6:	4b39      	ldr	r3, [pc, #228]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	021b      	lsls	r3, r3, #8
 80042e8:	4934      	ldr	r1, [pc, #208]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d01e      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042fc:	4b2f      	ldr	r3, [pc, #188]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004302:	0e1b      	lsrs	r3, r3, #24
 8004304:	f003 030f 	and.w	r3, r3, #15
 8004308:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	019a      	lsls	r2, r3, #6
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	061b      	lsls	r3, r3, #24
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	071b      	lsls	r3, r3, #28
 800431c:	4927      	ldr	r1, [pc, #156]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800431e:	4313      	orrs	r3, r2
 8004320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004324:	4b25      	ldr	r3, [pc, #148]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800432a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	4922      	ldr	r1, [pc, #136]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004334:	4313      	orrs	r3, r2
 8004336:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800433a:	4b21      	ldr	r3, [pc, #132]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800433c:	2201      	movs	r2, #1
 800433e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004340:	f7fd fe00 	bl	8001f44 <HAL_GetTick>
 8004344:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004346:	e008      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004348:	f7fd fdfc 	bl	8001f44 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d901      	bls.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e0a4      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800435a:	4b18      	ldr	r3, [pc, #96]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004362:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004366:	d1ef      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0320 	and.w	r3, r3, #32
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 808b 	beq.w	800448c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004376:	2300      	movs	r3, #0
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	4b10      	ldr	r3, [pc, #64]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	4a0f      	ldr	r2, [pc, #60]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004384:	6413      	str	r3, [r2, #64]	; 0x40
 8004386:	4b0d      	ldr	r3, [pc, #52]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004392:	4b0c      	ldr	r3, [pc, #48]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a0b      	ldr	r2, [pc, #44]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800439c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800439e:	f7fd fdd1 	bl	8001f44 <HAL_GetTick>
 80043a2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043a4:	e010      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043a6:	f7fd fdcd 	bl	8001f44 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d909      	bls.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e075      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80043b8:	42470068 	.word	0x42470068
 80043bc:	40023800 	.word	0x40023800
 80043c0:	42470070 	.word	0x42470070
 80043c4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043c8:	4b38      	ldr	r3, [pc, #224]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0e8      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043d4:	4b36      	ldr	r3, [pc, #216]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043dc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d02f      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d028      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043f2:	4b2f      	ldr	r3, [pc, #188]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80043f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043fa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043fc:	4b2d      	ldr	r3, [pc, #180]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80043fe:	2201      	movs	r2, #1
 8004400:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004402:	4b2c      	ldr	r3, [pc, #176]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004408:	4a29      	ldr	r2, [pc, #164]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800440e:	4b28      	ldr	r3, [pc, #160]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b01      	cmp	r3, #1
 8004418:	d114      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800441a:	f7fd fd93 	bl	8001f44 <HAL_GetTick>
 800441e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004420:	e00a      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004422:	f7fd fd8f 	bl	8001f44 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004430:	4293      	cmp	r3, r2
 8004432:	d901      	bls.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e035      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004438:	4b1d      	ldr	r3, [pc, #116]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800443a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0ee      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004448:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800444c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004450:	d10d      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004452:	4b17      	ldr	r3, [pc, #92]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004466:	4912      	ldr	r1, [pc, #72]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004468:	4313      	orrs	r3, r2
 800446a:	608b      	str	r3, [r1, #8]
 800446c:	e005      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800446e:	4b10      	ldr	r3, [pc, #64]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	4a0f      	ldr	r2, [pc, #60]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004474:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004478:	6093      	str	r3, [r2, #8]
 800447a:	4b0d      	ldr	r3, [pc, #52]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800447c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004486:	490a      	ldr	r1, [pc, #40]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004488:	4313      	orrs	r3, r2
 800448a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0310 	and.w	r3, r3, #16
 8004494:	2b00      	cmp	r3, #0
 8004496:	d004      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800449e:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80044a0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40007000 	.word	0x40007000
 80044b0:	40023800 	.word	0x40023800
 80044b4:	42470e40 	.word	0x42470e40
 80044b8:	424711e0 	.word	0x424711e0

080044bc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e025      	b.n	800451c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d106      	bne.n	80044ea <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7fd f94f 	bl	8001788 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2202      	movs	r2, #2
 80044ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	3304      	adds	r3, #4
 80044fa:	4619      	mov	r1, r3
 80044fc:	4610      	mov	r0, r2
 80044fe:	f001 fe6d 	bl	80061dc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6818      	ldr	r0, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	461a      	mov	r2, r3
 800450c:	6839      	ldr	r1, [r7, #0]
 800450e:	f001 fec2 	bl	8006296 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e07b      	b.n	800462e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	2b00      	cmp	r3, #0
 800453c:	d108      	bne.n	8004550 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004546:	d009      	beq.n	800455c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	61da      	str	r2, [r3, #28]
 800454e:	e005      	b.n	800455c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d106      	bne.n	800457c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7fc ff9c 	bl	80014b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004592:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045a4:	431a      	orrs	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	431a      	orrs	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045cc:	431a      	orrs	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e0:	ea42 0103 	orr.w	r1, r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	0c1b      	lsrs	r3, r3, #16
 80045fa:	f003 0104 	and.w	r1, r3, #4
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	f003 0210 	and.w	r2, r3, #16
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	69da      	ldr	r2, [r3, #28]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800461c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b082      	sub	sp, #8
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e01a      	b.n	800467e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800465e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7fc ff6f 	bl	8001544 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b088      	sub	sp, #32
 800468a:	af00      	add	r7, sp, #0
 800468c:	60f8      	str	r0, [r7, #12]
 800468e:	60b9      	str	r1, [r7, #8]
 8004690:	603b      	str	r3, [r7, #0]
 8004692:	4613      	mov	r3, r2
 8004694:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d101      	bne.n	80046a8 <HAL_SPI_Transmit+0x22>
 80046a4:	2302      	movs	r3, #2
 80046a6:	e126      	b.n	80048f6 <HAL_SPI_Transmit+0x270>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046b0:	f7fd fc48 	bl	8001f44 <HAL_GetTick>
 80046b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80046b6:	88fb      	ldrh	r3, [r7, #6]
 80046b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d002      	beq.n	80046cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80046c6:	2302      	movs	r3, #2
 80046c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80046ca:	e10b      	b.n	80048e4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <HAL_SPI_Transmit+0x52>
 80046d2:	88fb      	ldrh	r3, [r7, #6]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d102      	bne.n	80046de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80046dc:	e102      	b.n	80048e4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2203      	movs	r2, #3
 80046e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	88fa      	ldrh	r2, [r7, #6]
 80046f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	88fa      	ldrh	r2, [r7, #6]
 80046fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004724:	d10f      	bne.n	8004746 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004734:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004744:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004750:	2b40      	cmp	r3, #64	; 0x40
 8004752:	d007      	beq.n	8004764 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004762:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800476c:	d14b      	bne.n	8004806 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <HAL_SPI_Transmit+0xf6>
 8004776:	8afb      	ldrh	r3, [r7, #22]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d13e      	bne.n	80047fa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004780:	881a      	ldrh	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478c:	1c9a      	adds	r2, r3, #2
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004796:	b29b      	uxth	r3, r3
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80047a0:	e02b      	b.n	80047fa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d112      	bne.n	80047d6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b4:	881a      	ldrh	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c0:	1c9a      	adds	r2, r3, #2
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80047d4:	e011      	b.n	80047fa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047d6:	f7fd fbb5 	bl	8001f44 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d803      	bhi.n	80047ee <HAL_SPI_Transmit+0x168>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ec:	d102      	bne.n	80047f4 <HAL_SPI_Transmit+0x16e>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d102      	bne.n	80047fa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80047f8:	e074      	b.n	80048e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1ce      	bne.n	80047a2 <HAL_SPI_Transmit+0x11c>
 8004804:	e04c      	b.n	80048a0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <HAL_SPI_Transmit+0x18e>
 800480e:	8afb      	ldrh	r3, [r7, #22]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d140      	bne.n	8004896 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	330c      	adds	r3, #12
 800481e:	7812      	ldrb	r2, [r2, #0]
 8004820:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004830:	b29b      	uxth	r3, r3
 8004832:	3b01      	subs	r3, #1
 8004834:	b29a      	uxth	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800483a:	e02c      	b.n	8004896 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b02      	cmp	r3, #2
 8004848:	d113      	bne.n	8004872 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	330c      	adds	r3, #12
 8004854:	7812      	ldrb	r2, [r2, #0]
 8004856:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004870:	e011      	b.n	8004896 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004872:	f7fd fb67 	bl	8001f44 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	429a      	cmp	r2, r3
 8004880:	d803      	bhi.n	800488a <HAL_SPI_Transmit+0x204>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004888:	d102      	bne.n	8004890 <HAL_SPI_Transmit+0x20a>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d102      	bne.n	8004896 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004894:	e026      	b.n	80048e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800489a:	b29b      	uxth	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1cd      	bne.n	800483c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	6839      	ldr	r1, [r7, #0]
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 f8c1 	bl	8004a2c <SPI_EndRxTxTransaction>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2220      	movs	r2, #32
 80048b4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10a      	bne.n	80048d4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048be:	2300      	movs	r3, #0
 80048c0:	613b      	str	r3, [r7, #16]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	613b      	str	r3, [r7, #16]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	77fb      	strb	r3, [r7, #31]
 80048e0:	e000      	b.n	80048e4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80048e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80048f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3720      	adds	r7, #32
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80048fe:	b480      	push	{r7}
 8004900:	b083      	sub	sp, #12
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800490c:	b2db      	uxtb	r3, r3
}
 800490e:	4618      	mov	r0, r3
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
	...

0800491c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b088      	sub	sp, #32
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	603b      	str	r3, [r7, #0]
 8004928:	4613      	mov	r3, r2
 800492a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800492c:	f7fd fb0a 	bl	8001f44 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004934:	1a9b      	subs	r3, r3, r2
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	4413      	add	r3, r2
 800493a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800493c:	f7fd fb02 	bl	8001f44 <HAL_GetTick>
 8004940:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004942:	4b39      	ldr	r3, [pc, #228]	; (8004a28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	015b      	lsls	r3, r3, #5
 8004948:	0d1b      	lsrs	r3, r3, #20
 800494a:	69fa      	ldr	r2, [r7, #28]
 800494c:	fb02 f303 	mul.w	r3, r2, r3
 8004950:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004952:	e054      	b.n	80049fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495a:	d050      	beq.n	80049fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800495c:	f7fd faf2 	bl	8001f44 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	429a      	cmp	r2, r3
 800496a:	d902      	bls.n	8004972 <SPI_WaitFlagStateUntilTimeout+0x56>
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d13d      	bne.n	80049ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004980:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800498a:	d111      	bne.n	80049b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004994:	d004      	beq.n	80049a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800499e:	d107      	bne.n	80049b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049b8:	d10f      	bne.n	80049da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e017      	b.n	8004a1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	4013      	ands	r3, r2
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	bf0c      	ite	eq
 8004a0e:	2301      	moveq	r3, #1
 8004a10:	2300      	movne	r3, #0
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	461a      	mov	r2, r3
 8004a16:	79fb      	ldrb	r3, [r7, #7]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d19b      	bne.n	8004954 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3720      	adds	r7, #32
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	20000000 	.word	0x20000000

08004a2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b088      	sub	sp, #32
 8004a30:	af02      	add	r7, sp, #8
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a38:	4b1b      	ldr	r3, [pc, #108]	; (8004aa8 <SPI_EndRxTxTransaction+0x7c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a1b      	ldr	r2, [pc, #108]	; (8004aac <SPI_EndRxTxTransaction+0x80>)
 8004a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a42:	0d5b      	lsrs	r3, r3, #21
 8004a44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a48:	fb02 f303 	mul.w	r3, r2, r3
 8004a4c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a56:	d112      	bne.n	8004a7e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	2180      	movs	r1, #128	; 0x80
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f7ff ff5a 	bl	800491c <SPI_WaitFlagStateUntilTimeout>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d016      	beq.n	8004a9c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a72:	f043 0220 	orr.w	r2, r3, #32
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e00f      	b.n	8004a9e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00a      	beq.n	8004a9a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	3b01      	subs	r3, #1
 8004a88:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a94:	2b80      	cmp	r3, #128	; 0x80
 8004a96:	d0f2      	beq.n	8004a7e <SPI_EndRxTxTransaction+0x52>
 8004a98:	e000      	b.n	8004a9c <SPI_EndRxTxTransaction+0x70>
        break;
 8004a9a:	bf00      	nop
  }

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20000000 	.word	0x20000000
 8004aac:	165e9f81 	.word	0x165e9f81

08004ab0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e041      	b.n	8004b46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d106      	bne.n	8004adc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7fc fd52 	bl	8001580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3304      	adds	r3, #4
 8004aec:	4619      	mov	r1, r3
 8004aee:	4610      	mov	r0, r2
 8004af0:	f000 fa96 	bl	8005020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
	...

08004b50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d001      	beq.n	8004b68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e04e      	b.n	8004c06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68da      	ldr	r2, [r3, #12]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f042 0201 	orr.w	r2, r2, #1
 8004b7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a23      	ldr	r2, [pc, #140]	; (8004c14 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d022      	beq.n	8004bd0 <HAL_TIM_Base_Start_IT+0x80>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b92:	d01d      	beq.n	8004bd0 <HAL_TIM_Base_Start_IT+0x80>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a1f      	ldr	r2, [pc, #124]	; (8004c18 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d018      	beq.n	8004bd0 <HAL_TIM_Base_Start_IT+0x80>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a1e      	ldr	r2, [pc, #120]	; (8004c1c <HAL_TIM_Base_Start_IT+0xcc>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d013      	beq.n	8004bd0 <HAL_TIM_Base_Start_IT+0x80>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a1c      	ldr	r2, [pc, #112]	; (8004c20 <HAL_TIM_Base_Start_IT+0xd0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d00e      	beq.n	8004bd0 <HAL_TIM_Base_Start_IT+0x80>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a1b      	ldr	r2, [pc, #108]	; (8004c24 <HAL_TIM_Base_Start_IT+0xd4>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d009      	beq.n	8004bd0 <HAL_TIM_Base_Start_IT+0x80>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a19      	ldr	r2, [pc, #100]	; (8004c28 <HAL_TIM_Base_Start_IT+0xd8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d004      	beq.n	8004bd0 <HAL_TIM_Base_Start_IT+0x80>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a18      	ldr	r2, [pc, #96]	; (8004c2c <HAL_TIM_Base_Start_IT+0xdc>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d111      	bne.n	8004bf4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2b06      	cmp	r3, #6
 8004be0:	d010      	beq.n	8004c04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f042 0201 	orr.w	r2, r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf2:	e007      	b.n	8004c04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0201 	orr.w	r2, r2, #1
 8004c02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	40010000 	.word	0x40010000
 8004c18:	40000400 	.word	0x40000400
 8004c1c:	40000800 	.word	0x40000800
 8004c20:	40000c00 	.word	0x40000c00
 8004c24:	40010400 	.word	0x40010400
 8004c28:	40014000 	.word	0x40014000
 8004c2c:	40001800 	.word	0x40001800

08004c30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d122      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d11b      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f06f 0202 	mvn.w	r2, #2
 8004c5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f9b5 	bl	8004fe2 <HAL_TIM_IC_CaptureCallback>
 8004c78:	e005      	b.n	8004c86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f9a7 	bl	8004fce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f9b8 	bl	8004ff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f003 0304 	and.w	r3, r3, #4
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	d122      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b04      	cmp	r3, #4
 8004ca6:	d11b      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f06f 0204 	mvn.w	r2, #4
 8004cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2202      	movs	r2, #2
 8004cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f98b 	bl	8004fe2 <HAL_TIM_IC_CaptureCallback>
 8004ccc:	e005      	b.n	8004cda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f97d 	bl	8004fce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f98e 	bl	8004ff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	2b08      	cmp	r3, #8
 8004cec:	d122      	bne.n	8004d34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f003 0308 	and.w	r3, r3, #8
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d11b      	bne.n	8004d34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f06f 0208 	mvn.w	r2, #8
 8004d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2204      	movs	r2, #4
 8004d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f961 	bl	8004fe2 <HAL_TIM_IC_CaptureCallback>
 8004d20:	e005      	b.n	8004d2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f953 	bl	8004fce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f964 	bl	8004ff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	f003 0310 	and.w	r3, r3, #16
 8004d3e:	2b10      	cmp	r3, #16
 8004d40:	d122      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f003 0310 	and.w	r3, r3, #16
 8004d4c:	2b10      	cmp	r3, #16
 8004d4e:	d11b      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f06f 0210 	mvn.w	r2, #16
 8004d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2208      	movs	r2, #8
 8004d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f937 	bl	8004fe2 <HAL_TIM_IC_CaptureCallback>
 8004d74:	e005      	b.n	8004d82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f929 	bl	8004fce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f93a 	bl	8004ff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d10e      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d107      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f06f 0201 	mvn.w	r2, #1
 8004dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7fc f958 	bl	8001064 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dbe:	2b80      	cmp	r3, #128	; 0x80
 8004dc0:	d10e      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dcc:	2b80      	cmp	r3, #128	; 0x80
 8004dce:	d107      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fae0 	bl	80053a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dea:	2b40      	cmp	r3, #64	; 0x40
 8004dec:	d10e      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df8:	2b40      	cmp	r3, #64	; 0x40
 8004dfa:	d107      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f8ff 	bl	800500a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	2b20      	cmp	r3, #32
 8004e18:	d10e      	bne.n	8004e38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f003 0320 	and.w	r3, r3, #32
 8004e24:	2b20      	cmp	r3, #32
 8004e26:	d107      	bne.n	8004e38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0220 	mvn.w	r2, #32
 8004e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 faaa 	bl	800538c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e38:	bf00      	nop
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d101      	bne.n	8004e5c <HAL_TIM_ConfigClockSource+0x1c>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	e0b4      	b.n	8004fc6 <HAL_TIM_ConfigClockSource+0x186>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e94:	d03e      	beq.n	8004f14 <HAL_TIM_ConfigClockSource+0xd4>
 8004e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e9a:	f200 8087 	bhi.w	8004fac <HAL_TIM_ConfigClockSource+0x16c>
 8004e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea2:	f000 8086 	beq.w	8004fb2 <HAL_TIM_ConfigClockSource+0x172>
 8004ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eaa:	d87f      	bhi.n	8004fac <HAL_TIM_ConfigClockSource+0x16c>
 8004eac:	2b70      	cmp	r3, #112	; 0x70
 8004eae:	d01a      	beq.n	8004ee6 <HAL_TIM_ConfigClockSource+0xa6>
 8004eb0:	2b70      	cmp	r3, #112	; 0x70
 8004eb2:	d87b      	bhi.n	8004fac <HAL_TIM_ConfigClockSource+0x16c>
 8004eb4:	2b60      	cmp	r3, #96	; 0x60
 8004eb6:	d050      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0x11a>
 8004eb8:	2b60      	cmp	r3, #96	; 0x60
 8004eba:	d877      	bhi.n	8004fac <HAL_TIM_ConfigClockSource+0x16c>
 8004ebc:	2b50      	cmp	r3, #80	; 0x50
 8004ebe:	d03c      	beq.n	8004f3a <HAL_TIM_ConfigClockSource+0xfa>
 8004ec0:	2b50      	cmp	r3, #80	; 0x50
 8004ec2:	d873      	bhi.n	8004fac <HAL_TIM_ConfigClockSource+0x16c>
 8004ec4:	2b40      	cmp	r3, #64	; 0x40
 8004ec6:	d058      	beq.n	8004f7a <HAL_TIM_ConfigClockSource+0x13a>
 8004ec8:	2b40      	cmp	r3, #64	; 0x40
 8004eca:	d86f      	bhi.n	8004fac <HAL_TIM_ConfigClockSource+0x16c>
 8004ecc:	2b30      	cmp	r3, #48	; 0x30
 8004ece:	d064      	beq.n	8004f9a <HAL_TIM_ConfigClockSource+0x15a>
 8004ed0:	2b30      	cmp	r3, #48	; 0x30
 8004ed2:	d86b      	bhi.n	8004fac <HAL_TIM_ConfigClockSource+0x16c>
 8004ed4:	2b20      	cmp	r3, #32
 8004ed6:	d060      	beq.n	8004f9a <HAL_TIM_ConfigClockSource+0x15a>
 8004ed8:	2b20      	cmp	r3, #32
 8004eda:	d867      	bhi.n	8004fac <HAL_TIM_ConfigClockSource+0x16c>
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d05c      	beq.n	8004f9a <HAL_TIM_ConfigClockSource+0x15a>
 8004ee0:	2b10      	cmp	r3, #16
 8004ee2:	d05a      	beq.n	8004f9a <HAL_TIM_ConfigClockSource+0x15a>
 8004ee4:	e062      	b.n	8004fac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6818      	ldr	r0, [r3, #0]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	6899      	ldr	r1, [r3, #8]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	f000 f9ad 	bl	8005254 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	609a      	str	r2, [r3, #8]
      break;
 8004f12:	e04f      	b.n	8004fb4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6818      	ldr	r0, [r3, #0]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	6899      	ldr	r1, [r3, #8]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f000 f996 	bl	8005254 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689a      	ldr	r2, [r3, #8]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f36:	609a      	str	r2, [r3, #8]
      break;
 8004f38:	e03c      	b.n	8004fb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6818      	ldr	r0, [r3, #0]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	6859      	ldr	r1, [r3, #4]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	461a      	mov	r2, r3
 8004f48:	f000 f90a 	bl	8005160 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2150      	movs	r1, #80	; 0x50
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 f963 	bl	800521e <TIM_ITRx_SetConfig>
      break;
 8004f58:	e02c      	b.n	8004fb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6818      	ldr	r0, [r3, #0]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	6859      	ldr	r1, [r3, #4]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	461a      	mov	r2, r3
 8004f68:	f000 f929 	bl	80051be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2160      	movs	r1, #96	; 0x60
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 f953 	bl	800521e <TIM_ITRx_SetConfig>
      break;
 8004f78:	e01c      	b.n	8004fb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	6859      	ldr	r1, [r3, #4]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	461a      	mov	r2, r3
 8004f88:	f000 f8ea 	bl	8005160 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2140      	movs	r1, #64	; 0x40
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 f943 	bl	800521e <TIM_ITRx_SetConfig>
      break;
 8004f98:	e00c      	b.n	8004fb4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4610      	mov	r0, r2
 8004fa6:	f000 f93a 	bl	800521e <TIM_ITRx_SetConfig>
      break;
 8004faa:	e003      	b.n	8004fb4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	73fb      	strb	r3, [r7, #15]
      break;
 8004fb0:	e000      	b.n	8004fb4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004fb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b083      	sub	sp, #12
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fea:	bf00      	nop
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005012:	bf00      	nop
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
	...

08005020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a40      	ldr	r2, [pc, #256]	; (8005134 <TIM_Base_SetConfig+0x114>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d013      	beq.n	8005060 <TIM_Base_SetConfig+0x40>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800503e:	d00f      	beq.n	8005060 <TIM_Base_SetConfig+0x40>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a3d      	ldr	r2, [pc, #244]	; (8005138 <TIM_Base_SetConfig+0x118>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d00b      	beq.n	8005060 <TIM_Base_SetConfig+0x40>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a3c      	ldr	r2, [pc, #240]	; (800513c <TIM_Base_SetConfig+0x11c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d007      	beq.n	8005060 <TIM_Base_SetConfig+0x40>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a3b      	ldr	r2, [pc, #236]	; (8005140 <TIM_Base_SetConfig+0x120>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d003      	beq.n	8005060 <TIM_Base_SetConfig+0x40>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a3a      	ldr	r2, [pc, #232]	; (8005144 <TIM_Base_SetConfig+0x124>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d108      	bne.n	8005072 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	4313      	orrs	r3, r2
 8005070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a2f      	ldr	r2, [pc, #188]	; (8005134 <TIM_Base_SetConfig+0x114>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d02b      	beq.n	80050d2 <TIM_Base_SetConfig+0xb2>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005080:	d027      	beq.n	80050d2 <TIM_Base_SetConfig+0xb2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a2c      	ldr	r2, [pc, #176]	; (8005138 <TIM_Base_SetConfig+0x118>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d023      	beq.n	80050d2 <TIM_Base_SetConfig+0xb2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a2b      	ldr	r2, [pc, #172]	; (800513c <TIM_Base_SetConfig+0x11c>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d01f      	beq.n	80050d2 <TIM_Base_SetConfig+0xb2>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a2a      	ldr	r2, [pc, #168]	; (8005140 <TIM_Base_SetConfig+0x120>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d01b      	beq.n	80050d2 <TIM_Base_SetConfig+0xb2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a29      	ldr	r2, [pc, #164]	; (8005144 <TIM_Base_SetConfig+0x124>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d017      	beq.n	80050d2 <TIM_Base_SetConfig+0xb2>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a28      	ldr	r2, [pc, #160]	; (8005148 <TIM_Base_SetConfig+0x128>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d013      	beq.n	80050d2 <TIM_Base_SetConfig+0xb2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a27      	ldr	r2, [pc, #156]	; (800514c <TIM_Base_SetConfig+0x12c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d00f      	beq.n	80050d2 <TIM_Base_SetConfig+0xb2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a26      	ldr	r2, [pc, #152]	; (8005150 <TIM_Base_SetConfig+0x130>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d00b      	beq.n	80050d2 <TIM_Base_SetConfig+0xb2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a25      	ldr	r2, [pc, #148]	; (8005154 <TIM_Base_SetConfig+0x134>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d007      	beq.n	80050d2 <TIM_Base_SetConfig+0xb2>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a24      	ldr	r2, [pc, #144]	; (8005158 <TIM_Base_SetConfig+0x138>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d003      	beq.n	80050d2 <TIM_Base_SetConfig+0xb2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a23      	ldr	r2, [pc, #140]	; (800515c <TIM_Base_SetConfig+0x13c>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d108      	bne.n	80050e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a0a      	ldr	r2, [pc, #40]	; (8005134 <TIM_Base_SetConfig+0x114>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d003      	beq.n	8005118 <TIM_Base_SetConfig+0xf8>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a0c      	ldr	r2, [pc, #48]	; (8005144 <TIM_Base_SetConfig+0x124>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d103      	bne.n	8005120 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	691a      	ldr	r2, [r3, #16]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	615a      	str	r2, [r3, #20]
}
 8005126:	bf00      	nop
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	40010000 	.word	0x40010000
 8005138:	40000400 	.word	0x40000400
 800513c:	40000800 	.word	0x40000800
 8005140:	40000c00 	.word	0x40000c00
 8005144:	40010400 	.word	0x40010400
 8005148:	40014000 	.word	0x40014000
 800514c:	40014400 	.word	0x40014400
 8005150:	40014800 	.word	0x40014800
 8005154:	40001800 	.word	0x40001800
 8005158:	40001c00 	.word	0x40001c00
 800515c:	40002000 	.word	0x40002000

08005160 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005160:	b480      	push	{r7}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	f023 0201 	bic.w	r2, r3, #1
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800518a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	011b      	lsls	r3, r3, #4
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	4313      	orrs	r3, r2
 8005194:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f023 030a 	bic.w	r3, r3, #10
 800519c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	621a      	str	r2, [r3, #32]
}
 80051b2:	bf00      	nop
 80051b4:	371c      	adds	r7, #28
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051be:	b480      	push	{r7}
 80051c0:	b087      	sub	sp, #28
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	60f8      	str	r0, [r7, #12]
 80051c6:	60b9      	str	r1, [r7, #8]
 80051c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	f023 0210 	bic.w	r2, r3, #16
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	031b      	lsls	r3, r3, #12
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	4313      	orrs	r3, r2
 8005204:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	621a      	str	r2, [r3, #32]
}
 8005212:	bf00      	nop
 8005214:	371c      	adds	r7, #28
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800521e:	b480      	push	{r7}
 8005220:	b085      	sub	sp, #20
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005234:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4313      	orrs	r3, r2
 800523c:	f043 0307 	orr.w	r3, r3, #7
 8005240:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	609a      	str	r2, [r3, #8]
}
 8005248:	bf00      	nop
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005254:	b480      	push	{r7}
 8005256:	b087      	sub	sp, #28
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
 8005260:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800526e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	021a      	lsls	r2, r3, #8
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	431a      	orrs	r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	4313      	orrs	r3, r2
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	4313      	orrs	r3, r2
 8005280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	609a      	str	r2, [r3, #8]
}
 8005288:	bf00      	nop
 800528a:	371c      	adds	r7, #28
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d101      	bne.n	80052ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052a8:	2302      	movs	r3, #2
 80052aa:	e05a      	b.n	8005362 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a21      	ldr	r2, [pc, #132]	; (8005370 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d022      	beq.n	8005336 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f8:	d01d      	beq.n	8005336 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a1d      	ldr	r2, [pc, #116]	; (8005374 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d018      	beq.n	8005336 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a1b      	ldr	r2, [pc, #108]	; (8005378 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d013      	beq.n	8005336 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a1a      	ldr	r2, [pc, #104]	; (800537c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d00e      	beq.n	8005336 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a18      	ldr	r2, [pc, #96]	; (8005380 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d009      	beq.n	8005336 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a17      	ldr	r2, [pc, #92]	; (8005384 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d004      	beq.n	8005336 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a15      	ldr	r2, [pc, #84]	; (8005388 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d10c      	bne.n	8005350 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800533c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	4313      	orrs	r3, r2
 8005346:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	40010000 	.word	0x40010000
 8005374:	40000400 	.word	0x40000400
 8005378:	40000800 	.word	0x40000800
 800537c:	40000c00 	.word	0x40000c00
 8005380:	40010400 	.word	0x40010400
 8005384:	40014000 	.word	0x40014000
 8005388:	40001800 	.word	0x40001800

0800538c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e03f      	b.n	8005446 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d106      	bne.n	80053e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7fc f8f2 	bl	80015c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2224      	movs	r2, #36	; 0x24
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68da      	ldr	r2, [r3, #12]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fc7b 	bl	8005cf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	691a      	ldr	r2, [r3, #16]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800540c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	695a      	ldr	r2, [r3, #20]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800541c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68da      	ldr	r2, [r3, #12]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800542c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2220      	movs	r2, #32
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2220      	movs	r2, #32
 8005440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
	...

08005450 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b0ba      	sub	sp, #232	; 0xe8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005476:	2300      	movs	r3, #0
 8005478:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800547c:	2300      	movs	r3, #0
 800547e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005486:	f003 030f 	and.w	r3, r3, #15
 800548a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800548e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10f      	bne.n	80054b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800549a:	f003 0320 	and.w	r3, r3, #32
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d009      	beq.n	80054b6 <HAL_UART_IRQHandler+0x66>
 80054a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a6:	f003 0320 	and.w	r3, r3, #32
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fb65 	bl	8005b7e <UART_Receive_IT>
      return;
 80054b4:	e256      	b.n	8005964 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80054b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 80de 	beq.w	800567c <HAL_UART_IRQHandler+0x22c>
 80054c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d106      	bne.n	80054da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 80d1 	beq.w	800567c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00b      	beq.n	80054fe <HAL_UART_IRQHandler+0xae>
 80054e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d005      	beq.n	80054fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	f043 0201 	orr.w	r2, r3, #1
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005502:	f003 0304 	and.w	r3, r3, #4
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00b      	beq.n	8005522 <HAL_UART_IRQHandler+0xd2>
 800550a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d005      	beq.n	8005522 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	f043 0202 	orr.w	r2, r3, #2
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00b      	beq.n	8005546 <HAL_UART_IRQHandler+0xf6>
 800552e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d005      	beq.n	8005546 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	f043 0204 	orr.w	r2, r3, #4
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800554a:	f003 0308 	and.w	r3, r3, #8
 800554e:	2b00      	cmp	r3, #0
 8005550:	d011      	beq.n	8005576 <HAL_UART_IRQHandler+0x126>
 8005552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005556:	f003 0320 	and.w	r3, r3, #32
 800555a:	2b00      	cmp	r3, #0
 800555c:	d105      	bne.n	800556a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800555e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d005      	beq.n	8005576 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	f043 0208 	orr.w	r2, r3, #8
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 81ed 	beq.w	800595a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005584:	f003 0320 	and.w	r3, r3, #32
 8005588:	2b00      	cmp	r3, #0
 800558a:	d008      	beq.n	800559e <HAL_UART_IRQHandler+0x14e>
 800558c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005590:	f003 0320 	and.w	r3, r3, #32
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 faf0 	bl	8005b7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a8:	2b40      	cmp	r3, #64	; 0x40
 80055aa:	bf0c      	ite	eq
 80055ac:	2301      	moveq	r3, #1
 80055ae:	2300      	movne	r3, #0
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ba:	f003 0308 	and.w	r3, r3, #8
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d103      	bne.n	80055ca <HAL_UART_IRQHandler+0x17a>
 80055c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d04f      	beq.n	800566a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f9f8 	bl	80059c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055da:	2b40      	cmp	r3, #64	; 0x40
 80055dc:	d141      	bne.n	8005662 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	3314      	adds	r3, #20
 80055e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055ec:	e853 3f00 	ldrex	r3, [r3]
 80055f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80055f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	3314      	adds	r3, #20
 8005606:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800560a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800560e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005612:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005616:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800561a:	e841 2300 	strex	r3, r2, [r1]
 800561e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005622:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1d9      	bne.n	80055de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562e:	2b00      	cmp	r3, #0
 8005630:	d013      	beq.n	800565a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005636:	4a7d      	ldr	r2, [pc, #500]	; (800582c <HAL_UART_IRQHandler+0x3dc>)
 8005638:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563e:	4618      	mov	r0, r3
 8005640:	f7fc fe1e 	bl	8002280 <HAL_DMA_Abort_IT>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d016      	beq.n	8005678 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005654:	4610      	mov	r0, r2
 8005656:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005658:	e00e      	b.n	8005678 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f99a 	bl	8005994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005660:	e00a      	b.n	8005678 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f996 	bl	8005994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005668:	e006      	b.n	8005678 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f992 	bl	8005994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005676:	e170      	b.n	800595a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005678:	bf00      	nop
    return;
 800567a:	e16e      	b.n	800595a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005680:	2b01      	cmp	r3, #1
 8005682:	f040 814a 	bne.w	800591a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568a:	f003 0310 	and.w	r3, r3, #16
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 8143 	beq.w	800591a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005698:	f003 0310 	and.w	r3, r3, #16
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 813c 	beq.w	800591a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056a2:	2300      	movs	r3, #0
 80056a4:	60bb      	str	r3, [r7, #8]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	60bb      	str	r3, [r7, #8]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	60bb      	str	r3, [r7, #8]
 80056b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c2:	2b40      	cmp	r3, #64	; 0x40
 80056c4:	f040 80b4 	bne.w	8005830 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 8140 	beq.w	800595e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056e6:	429a      	cmp	r2, r3
 80056e8:	f080 8139 	bcs.w	800595e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056fe:	f000 8088 	beq.w	8005812 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	330c      	adds	r3, #12
 8005708:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005710:	e853 3f00 	ldrex	r3, [r3]
 8005714:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005718:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800571c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005720:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	330c      	adds	r3, #12
 800572a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800572e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005732:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005736:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800573a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800573e:	e841 2300 	strex	r3, r2, [r1]
 8005742:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005746:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1d9      	bne.n	8005702 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	3314      	adds	r3, #20
 8005754:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005758:	e853 3f00 	ldrex	r3, [r3]
 800575c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800575e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005760:	f023 0301 	bic.w	r3, r3, #1
 8005764:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3314      	adds	r3, #20
 800576e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005772:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005776:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005778:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800577a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800577e:	e841 2300 	strex	r3, r2, [r1]
 8005782:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1e1      	bne.n	800574e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	3314      	adds	r3, #20
 8005790:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005792:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005794:	e853 3f00 	ldrex	r3, [r3]
 8005798:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800579a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800579c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	3314      	adds	r3, #20
 80057aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80057ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80057b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80057b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057b6:	e841 2300 	strex	r3, r2, [r1]
 80057ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80057bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1e3      	bne.n	800578a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2220      	movs	r2, #32
 80057c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	330c      	adds	r3, #12
 80057d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057da:	e853 3f00 	ldrex	r3, [r3]
 80057de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057e2:	f023 0310 	bic.w	r3, r3, #16
 80057e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	330c      	adds	r3, #12
 80057f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80057f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80057f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057fc:	e841 2300 	strex	r3, r2, [r1]
 8005800:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1e3      	bne.n	80057d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580c:	4618      	mov	r0, r3
 800580e:	f7fc fcc7 	bl	80021a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800581a:	b29b      	uxth	r3, r3
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	b29b      	uxth	r3, r3
 8005820:	4619      	mov	r1, r3
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f8c0 	bl	80059a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005828:	e099      	b.n	800595e <HAL_UART_IRQHandler+0x50e>
 800582a:	bf00      	nop
 800582c:	08005a87 	.word	0x08005a87
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005838:	b29b      	uxth	r3, r3
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005844:	b29b      	uxth	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 808b 	beq.w	8005962 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800584c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 8086 	beq.w	8005962 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	330c      	adds	r3, #12
 800585c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005860:	e853 3f00 	ldrex	r3, [r3]
 8005864:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005868:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800586c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	330c      	adds	r3, #12
 8005876:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800587a:	647a      	str	r2, [r7, #68]	; 0x44
 800587c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005880:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005882:	e841 2300 	strex	r3, r2, [r1]
 8005886:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1e3      	bne.n	8005856 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3314      	adds	r3, #20
 8005894:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	e853 3f00 	ldrex	r3, [r3]
 800589c:	623b      	str	r3, [r7, #32]
   return(result);
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	f023 0301 	bic.w	r3, r3, #1
 80058a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3314      	adds	r3, #20
 80058ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80058b2:	633a      	str	r2, [r7, #48]	; 0x30
 80058b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ba:	e841 2300 	strex	r3, r2, [r1]
 80058be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1e3      	bne.n	800588e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2220      	movs	r2, #32
 80058ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	330c      	adds	r3, #12
 80058da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	e853 3f00 	ldrex	r3, [r3]
 80058e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f023 0310 	bic.w	r3, r3, #16
 80058ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	330c      	adds	r3, #12
 80058f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80058f8:	61fa      	str	r2, [r7, #28]
 80058fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fc:	69b9      	ldr	r1, [r7, #24]
 80058fe:	69fa      	ldr	r2, [r7, #28]
 8005900:	e841 2300 	strex	r3, r2, [r1]
 8005904:	617b      	str	r3, [r7, #20]
   return(result);
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1e3      	bne.n	80058d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800590c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005910:	4619      	mov	r1, r3
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f848 	bl	80059a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005918:	e023      	b.n	8005962 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800591a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005922:	2b00      	cmp	r3, #0
 8005924:	d009      	beq.n	800593a <HAL_UART_IRQHandler+0x4ea>
 8005926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800592a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f8bb 	bl	8005aae <UART_Transmit_IT>
    return;
 8005938:	e014      	b.n	8005964 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800593a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800593e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00e      	beq.n	8005964 <HAL_UART_IRQHandler+0x514>
 8005946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800594a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594e:	2b00      	cmp	r3, #0
 8005950:	d008      	beq.n	8005964 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f8fb 	bl	8005b4e <UART_EndTransmit_IT>
    return;
 8005958:	e004      	b.n	8005964 <HAL_UART_IRQHandler+0x514>
    return;
 800595a:	bf00      	nop
 800595c:	e002      	b.n	8005964 <HAL_UART_IRQHandler+0x514>
      return;
 800595e:	bf00      	nop
 8005960:	e000      	b.n	8005964 <HAL_UART_IRQHandler+0x514>
      return;
 8005962:	bf00      	nop
  }
}
 8005964:	37e8      	adds	r7, #232	; 0xe8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop

0800596c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	460b      	mov	r3, r1
 80059b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b095      	sub	sp, #84	; 0x54
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	330c      	adds	r3, #12
 80059ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d2:	e853 3f00 	ldrex	r3, [r3]
 80059d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	330c      	adds	r3, #12
 80059e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059e8:	643a      	str	r2, [r7, #64]	; 0x40
 80059ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059f0:	e841 2300 	strex	r3, r2, [r1]
 80059f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e5      	bne.n	80059c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3314      	adds	r3, #20
 8005a02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	e853 3f00 	ldrex	r3, [r3]
 8005a0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	f023 0301 	bic.w	r3, r3, #1
 8005a12:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3314      	adds	r3, #20
 8005a1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a24:	e841 2300 	strex	r3, r2, [r1]
 8005a28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e5      	bne.n	80059fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d119      	bne.n	8005a6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	330c      	adds	r3, #12
 8005a3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	e853 3f00 	ldrex	r3, [r3]
 8005a46:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f023 0310 	bic.w	r3, r3, #16
 8005a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	330c      	adds	r3, #12
 8005a56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a58:	61ba      	str	r2, [r7, #24]
 8005a5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5c:	6979      	ldr	r1, [r7, #20]
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	e841 2300 	strex	r3, r2, [r1]
 8005a64:	613b      	str	r3, [r7, #16]
   return(result);
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1e5      	bne.n	8005a38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a7a:	bf00      	nop
 8005a7c:	3754      	adds	r7, #84	; 0x54
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b084      	sub	sp, #16
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f7ff ff77 	bl	8005994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005aa6:	bf00      	nop
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b085      	sub	sp, #20
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b21      	cmp	r3, #33	; 0x21
 8005ac0:	d13e      	bne.n	8005b40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aca:	d114      	bne.n	8005af6 <UART_Transmit_IT+0x48>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d110      	bne.n	8005af6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ae8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	1c9a      	adds	r2, r3, #2
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	621a      	str	r2, [r3, #32]
 8005af4:	e008      	b.n	8005b08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	1c59      	adds	r1, r3, #1
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	6211      	str	r1, [r2, #32]
 8005b00:	781a      	ldrb	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	4619      	mov	r1, r3
 8005b16:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10f      	bne.n	8005b3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68da      	ldr	r2, [r3, #12]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	e000      	b.n	8005b42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b40:	2302      	movs	r3, #2
  }
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b082      	sub	sp, #8
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68da      	ldr	r2, [r3, #12]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2220      	movs	r2, #32
 8005b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7ff fefc 	bl	800596c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b08c      	sub	sp, #48	; 0x30
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b22      	cmp	r3, #34	; 0x22
 8005b90:	f040 80ab 	bne.w	8005cea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b9c:	d117      	bne.n	8005bce <UART_Receive_IT+0x50>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d113      	bne.n	8005bce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc6:	1c9a      	adds	r2, r3, #2
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	629a      	str	r2, [r3, #40]	; 0x28
 8005bcc:	e026      	b.n	8005c1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005be0:	d007      	beq.n	8005bf2 <UART_Receive_IT+0x74>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10a      	bne.n	8005c00 <UART_Receive_IT+0x82>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d106      	bne.n	8005c00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfc:	701a      	strb	r2, [r3, #0]
 8005bfe:	e008      	b.n	8005c12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c16:	1c5a      	adds	r2, r3, #1
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	3b01      	subs	r3, #1
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	4619      	mov	r1, r3
 8005c2a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d15a      	bne.n	8005ce6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68da      	ldr	r2, [r3, #12]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 0220 	bic.w	r2, r2, #32
 8005c3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68da      	ldr	r2, [r3, #12]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	695a      	ldr	r2, [r3, #20]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0201 	bic.w	r2, r2, #1
 8005c5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2220      	movs	r2, #32
 8005c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d135      	bne.n	8005cdc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	330c      	adds	r3, #12
 8005c7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	e853 3f00 	ldrex	r3, [r3]
 8005c84:	613b      	str	r3, [r7, #16]
   return(result);
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f023 0310 	bic.w	r3, r3, #16
 8005c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	330c      	adds	r3, #12
 8005c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c96:	623a      	str	r2, [r7, #32]
 8005c98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9a:	69f9      	ldr	r1, [r7, #28]
 8005c9c:	6a3a      	ldr	r2, [r7, #32]
 8005c9e:	e841 2300 	strex	r3, r2, [r1]
 8005ca2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1e5      	bne.n	8005c76 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0310 	and.w	r3, r3, #16
 8005cb4:	2b10      	cmp	r3, #16
 8005cb6:	d10a      	bne.n	8005cce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cb8:	2300      	movs	r3, #0
 8005cba:	60fb      	str	r3, [r7, #12]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	60fb      	str	r3, [r7, #12]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	60fb      	str	r3, [r7, #12]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f7ff fe67 	bl	80059a8 <HAL_UARTEx_RxEventCallback>
 8005cda:	e002      	b.n	8005ce2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7ff fe4f 	bl	8005980 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	e002      	b.n	8005cec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	e000      	b.n	8005cec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005cea:	2302      	movs	r3, #2
  }
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3730      	adds	r7, #48	; 0x30
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cf8:	b0c0      	sub	sp, #256	; 0x100
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d10:	68d9      	ldr	r1, [r3, #12]
 8005d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	ea40 0301 	orr.w	r3, r0, r1
 8005d1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	431a      	orrs	r2, r3
 8005d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d4c:	f021 010c 	bic.w	r1, r1, #12
 8005d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d5a:	430b      	orrs	r3, r1
 8005d5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d6e:	6999      	ldr	r1, [r3, #24]
 8005d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	ea40 0301 	orr.w	r3, r0, r1
 8005d7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	4b8f      	ldr	r3, [pc, #572]	; (8005fc0 <UART_SetConfig+0x2cc>)
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d005      	beq.n	8005d94 <UART_SetConfig+0xa0>
 8005d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	4b8d      	ldr	r3, [pc, #564]	; (8005fc4 <UART_SetConfig+0x2d0>)
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d104      	bne.n	8005d9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d94:	f7fe f98c 	bl	80040b0 <HAL_RCC_GetPCLK2Freq>
 8005d98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005d9c:	e003      	b.n	8005da6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d9e:	f7fe f973 	bl	8004088 <HAL_RCC_GetPCLK1Freq>
 8005da2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005db0:	f040 810c 	bne.w	8005fcc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005db4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005db8:	2200      	movs	r2, #0
 8005dba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005dbe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005dc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005dc6:	4622      	mov	r2, r4
 8005dc8:	462b      	mov	r3, r5
 8005dca:	1891      	adds	r1, r2, r2
 8005dcc:	65b9      	str	r1, [r7, #88]	; 0x58
 8005dce:	415b      	adcs	r3, r3
 8005dd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005dd6:	4621      	mov	r1, r4
 8005dd8:	eb12 0801 	adds.w	r8, r2, r1
 8005ddc:	4629      	mov	r1, r5
 8005dde:	eb43 0901 	adc.w	r9, r3, r1
 8005de2:	f04f 0200 	mov.w	r2, #0
 8005de6:	f04f 0300 	mov.w	r3, #0
 8005dea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005df2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005df6:	4690      	mov	r8, r2
 8005df8:	4699      	mov	r9, r3
 8005dfa:	4623      	mov	r3, r4
 8005dfc:	eb18 0303 	adds.w	r3, r8, r3
 8005e00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e04:	462b      	mov	r3, r5
 8005e06:	eb49 0303 	adc.w	r3, r9, r3
 8005e0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005e1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e22:	460b      	mov	r3, r1
 8005e24:	18db      	adds	r3, r3, r3
 8005e26:	653b      	str	r3, [r7, #80]	; 0x50
 8005e28:	4613      	mov	r3, r2
 8005e2a:	eb42 0303 	adc.w	r3, r2, r3
 8005e2e:	657b      	str	r3, [r7, #84]	; 0x54
 8005e30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005e34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005e38:	f7fa f9da 	bl	80001f0 <__aeabi_uldivmod>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4b61      	ldr	r3, [pc, #388]	; (8005fc8 <UART_SetConfig+0x2d4>)
 8005e42:	fba3 2302 	umull	r2, r3, r3, r2
 8005e46:	095b      	lsrs	r3, r3, #5
 8005e48:	011c      	lsls	r4, r3, #4
 8005e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e54:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e5c:	4642      	mov	r2, r8
 8005e5e:	464b      	mov	r3, r9
 8005e60:	1891      	adds	r1, r2, r2
 8005e62:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e64:	415b      	adcs	r3, r3
 8005e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005e6c:	4641      	mov	r1, r8
 8005e6e:	eb12 0a01 	adds.w	sl, r2, r1
 8005e72:	4649      	mov	r1, r9
 8005e74:	eb43 0b01 	adc.w	fp, r3, r1
 8005e78:	f04f 0200 	mov.w	r2, #0
 8005e7c:	f04f 0300 	mov.w	r3, #0
 8005e80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e8c:	4692      	mov	sl, r2
 8005e8e:	469b      	mov	fp, r3
 8005e90:	4643      	mov	r3, r8
 8005e92:	eb1a 0303 	adds.w	r3, sl, r3
 8005e96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e9a:	464b      	mov	r3, r9
 8005e9c:	eb4b 0303 	adc.w	r3, fp, r3
 8005ea0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005eb0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005eb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005eb8:	460b      	mov	r3, r1
 8005eba:	18db      	adds	r3, r3, r3
 8005ebc:	643b      	str	r3, [r7, #64]	; 0x40
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	eb42 0303 	adc.w	r3, r2, r3
 8005ec4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ec6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005eca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005ece:	f7fa f98f 	bl	80001f0 <__aeabi_uldivmod>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	4b3b      	ldr	r3, [pc, #236]	; (8005fc8 <UART_SetConfig+0x2d4>)
 8005eda:	fba3 2301 	umull	r2, r3, r3, r1
 8005ede:	095b      	lsrs	r3, r3, #5
 8005ee0:	2264      	movs	r2, #100	; 0x64
 8005ee2:	fb02 f303 	mul.w	r3, r2, r3
 8005ee6:	1acb      	subs	r3, r1, r3
 8005ee8:	00db      	lsls	r3, r3, #3
 8005eea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005eee:	4b36      	ldr	r3, [pc, #216]	; (8005fc8 <UART_SetConfig+0x2d4>)
 8005ef0:	fba3 2302 	umull	r2, r3, r3, r2
 8005ef4:	095b      	lsrs	r3, r3, #5
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005efc:	441c      	add	r4, r3
 8005efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f08:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005f0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005f10:	4642      	mov	r2, r8
 8005f12:	464b      	mov	r3, r9
 8005f14:	1891      	adds	r1, r2, r2
 8005f16:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f18:	415b      	adcs	r3, r3
 8005f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f20:	4641      	mov	r1, r8
 8005f22:	1851      	adds	r1, r2, r1
 8005f24:	6339      	str	r1, [r7, #48]	; 0x30
 8005f26:	4649      	mov	r1, r9
 8005f28:	414b      	adcs	r3, r1
 8005f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f2c:	f04f 0200 	mov.w	r2, #0
 8005f30:	f04f 0300 	mov.w	r3, #0
 8005f34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005f38:	4659      	mov	r1, fp
 8005f3a:	00cb      	lsls	r3, r1, #3
 8005f3c:	4651      	mov	r1, sl
 8005f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f42:	4651      	mov	r1, sl
 8005f44:	00ca      	lsls	r2, r1, #3
 8005f46:	4610      	mov	r0, r2
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	4642      	mov	r2, r8
 8005f4e:	189b      	adds	r3, r3, r2
 8005f50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f54:	464b      	mov	r3, r9
 8005f56:	460a      	mov	r2, r1
 8005f58:	eb42 0303 	adc.w	r3, r2, r3
 8005f5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f6c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005f70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f74:	460b      	mov	r3, r1
 8005f76:	18db      	adds	r3, r3, r3
 8005f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	eb42 0303 	adc.w	r3, r2, r3
 8005f80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005f8a:	f7fa f931 	bl	80001f0 <__aeabi_uldivmod>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	460b      	mov	r3, r1
 8005f92:	4b0d      	ldr	r3, [pc, #52]	; (8005fc8 <UART_SetConfig+0x2d4>)
 8005f94:	fba3 1302 	umull	r1, r3, r3, r2
 8005f98:	095b      	lsrs	r3, r3, #5
 8005f9a:	2164      	movs	r1, #100	; 0x64
 8005f9c:	fb01 f303 	mul.w	r3, r1, r3
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	00db      	lsls	r3, r3, #3
 8005fa4:	3332      	adds	r3, #50	; 0x32
 8005fa6:	4a08      	ldr	r2, [pc, #32]	; (8005fc8 <UART_SetConfig+0x2d4>)
 8005fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fac:	095b      	lsrs	r3, r3, #5
 8005fae:	f003 0207 	and.w	r2, r3, #7
 8005fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4422      	add	r2, r4
 8005fba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005fbc:	e105      	b.n	80061ca <UART_SetConfig+0x4d6>
 8005fbe:	bf00      	nop
 8005fc0:	40011000 	.word	0x40011000
 8005fc4:	40011400 	.word	0x40011400
 8005fc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005fd6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005fda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005fde:	4642      	mov	r2, r8
 8005fe0:	464b      	mov	r3, r9
 8005fe2:	1891      	adds	r1, r2, r2
 8005fe4:	6239      	str	r1, [r7, #32]
 8005fe6:	415b      	adcs	r3, r3
 8005fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8005fea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005fee:	4641      	mov	r1, r8
 8005ff0:	1854      	adds	r4, r2, r1
 8005ff2:	4649      	mov	r1, r9
 8005ff4:	eb43 0501 	adc.w	r5, r3, r1
 8005ff8:	f04f 0200 	mov.w	r2, #0
 8005ffc:	f04f 0300 	mov.w	r3, #0
 8006000:	00eb      	lsls	r3, r5, #3
 8006002:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006006:	00e2      	lsls	r2, r4, #3
 8006008:	4614      	mov	r4, r2
 800600a:	461d      	mov	r5, r3
 800600c:	4643      	mov	r3, r8
 800600e:	18e3      	adds	r3, r4, r3
 8006010:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006014:	464b      	mov	r3, r9
 8006016:	eb45 0303 	adc.w	r3, r5, r3
 800601a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800601e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800602a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800602e:	f04f 0200 	mov.w	r2, #0
 8006032:	f04f 0300 	mov.w	r3, #0
 8006036:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800603a:	4629      	mov	r1, r5
 800603c:	008b      	lsls	r3, r1, #2
 800603e:	4621      	mov	r1, r4
 8006040:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006044:	4621      	mov	r1, r4
 8006046:	008a      	lsls	r2, r1, #2
 8006048:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800604c:	f7fa f8d0 	bl	80001f0 <__aeabi_uldivmod>
 8006050:	4602      	mov	r2, r0
 8006052:	460b      	mov	r3, r1
 8006054:	4b60      	ldr	r3, [pc, #384]	; (80061d8 <UART_SetConfig+0x4e4>)
 8006056:	fba3 2302 	umull	r2, r3, r3, r2
 800605a:	095b      	lsrs	r3, r3, #5
 800605c:	011c      	lsls	r4, r3, #4
 800605e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006062:	2200      	movs	r2, #0
 8006064:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006068:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800606c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006070:	4642      	mov	r2, r8
 8006072:	464b      	mov	r3, r9
 8006074:	1891      	adds	r1, r2, r2
 8006076:	61b9      	str	r1, [r7, #24]
 8006078:	415b      	adcs	r3, r3
 800607a:	61fb      	str	r3, [r7, #28]
 800607c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006080:	4641      	mov	r1, r8
 8006082:	1851      	adds	r1, r2, r1
 8006084:	6139      	str	r1, [r7, #16]
 8006086:	4649      	mov	r1, r9
 8006088:	414b      	adcs	r3, r1
 800608a:	617b      	str	r3, [r7, #20]
 800608c:	f04f 0200 	mov.w	r2, #0
 8006090:	f04f 0300 	mov.w	r3, #0
 8006094:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006098:	4659      	mov	r1, fp
 800609a:	00cb      	lsls	r3, r1, #3
 800609c:	4651      	mov	r1, sl
 800609e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060a2:	4651      	mov	r1, sl
 80060a4:	00ca      	lsls	r2, r1, #3
 80060a6:	4610      	mov	r0, r2
 80060a8:	4619      	mov	r1, r3
 80060aa:	4603      	mov	r3, r0
 80060ac:	4642      	mov	r2, r8
 80060ae:	189b      	adds	r3, r3, r2
 80060b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060b4:	464b      	mov	r3, r9
 80060b6:	460a      	mov	r2, r1
 80060b8:	eb42 0303 	adc.w	r3, r2, r3
 80060bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80060ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80060cc:	f04f 0200 	mov.w	r2, #0
 80060d0:	f04f 0300 	mov.w	r3, #0
 80060d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80060d8:	4649      	mov	r1, r9
 80060da:	008b      	lsls	r3, r1, #2
 80060dc:	4641      	mov	r1, r8
 80060de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060e2:	4641      	mov	r1, r8
 80060e4:	008a      	lsls	r2, r1, #2
 80060e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80060ea:	f7fa f881 	bl	80001f0 <__aeabi_uldivmod>
 80060ee:	4602      	mov	r2, r0
 80060f0:	460b      	mov	r3, r1
 80060f2:	4b39      	ldr	r3, [pc, #228]	; (80061d8 <UART_SetConfig+0x4e4>)
 80060f4:	fba3 1302 	umull	r1, r3, r3, r2
 80060f8:	095b      	lsrs	r3, r3, #5
 80060fa:	2164      	movs	r1, #100	; 0x64
 80060fc:	fb01 f303 	mul.w	r3, r1, r3
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	011b      	lsls	r3, r3, #4
 8006104:	3332      	adds	r3, #50	; 0x32
 8006106:	4a34      	ldr	r2, [pc, #208]	; (80061d8 <UART_SetConfig+0x4e4>)
 8006108:	fba2 2303 	umull	r2, r3, r2, r3
 800610c:	095b      	lsrs	r3, r3, #5
 800610e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006112:	441c      	add	r4, r3
 8006114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006118:	2200      	movs	r2, #0
 800611a:	673b      	str	r3, [r7, #112]	; 0x70
 800611c:	677a      	str	r2, [r7, #116]	; 0x74
 800611e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006122:	4642      	mov	r2, r8
 8006124:	464b      	mov	r3, r9
 8006126:	1891      	adds	r1, r2, r2
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	415b      	adcs	r3, r3
 800612c:	60fb      	str	r3, [r7, #12]
 800612e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006132:	4641      	mov	r1, r8
 8006134:	1851      	adds	r1, r2, r1
 8006136:	6039      	str	r1, [r7, #0]
 8006138:	4649      	mov	r1, r9
 800613a:	414b      	adcs	r3, r1
 800613c:	607b      	str	r3, [r7, #4]
 800613e:	f04f 0200 	mov.w	r2, #0
 8006142:	f04f 0300 	mov.w	r3, #0
 8006146:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800614a:	4659      	mov	r1, fp
 800614c:	00cb      	lsls	r3, r1, #3
 800614e:	4651      	mov	r1, sl
 8006150:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006154:	4651      	mov	r1, sl
 8006156:	00ca      	lsls	r2, r1, #3
 8006158:	4610      	mov	r0, r2
 800615a:	4619      	mov	r1, r3
 800615c:	4603      	mov	r3, r0
 800615e:	4642      	mov	r2, r8
 8006160:	189b      	adds	r3, r3, r2
 8006162:	66bb      	str	r3, [r7, #104]	; 0x68
 8006164:	464b      	mov	r3, r9
 8006166:	460a      	mov	r2, r1
 8006168:	eb42 0303 	adc.w	r3, r2, r3
 800616c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800616e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	663b      	str	r3, [r7, #96]	; 0x60
 8006178:	667a      	str	r2, [r7, #100]	; 0x64
 800617a:	f04f 0200 	mov.w	r2, #0
 800617e:	f04f 0300 	mov.w	r3, #0
 8006182:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006186:	4649      	mov	r1, r9
 8006188:	008b      	lsls	r3, r1, #2
 800618a:	4641      	mov	r1, r8
 800618c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006190:	4641      	mov	r1, r8
 8006192:	008a      	lsls	r2, r1, #2
 8006194:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006198:	f7fa f82a 	bl	80001f0 <__aeabi_uldivmod>
 800619c:	4602      	mov	r2, r0
 800619e:	460b      	mov	r3, r1
 80061a0:	4b0d      	ldr	r3, [pc, #52]	; (80061d8 <UART_SetConfig+0x4e4>)
 80061a2:	fba3 1302 	umull	r1, r3, r3, r2
 80061a6:	095b      	lsrs	r3, r3, #5
 80061a8:	2164      	movs	r1, #100	; 0x64
 80061aa:	fb01 f303 	mul.w	r3, r1, r3
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	011b      	lsls	r3, r3, #4
 80061b2:	3332      	adds	r3, #50	; 0x32
 80061b4:	4a08      	ldr	r2, [pc, #32]	; (80061d8 <UART_SetConfig+0x4e4>)
 80061b6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ba:	095b      	lsrs	r3, r3, #5
 80061bc:	f003 020f 	and.w	r2, r3, #15
 80061c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4422      	add	r2, r4
 80061c8:	609a      	str	r2, [r3, #8]
}
 80061ca:	bf00      	nop
 80061cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80061d0:	46bd      	mov	sp, r7
 80061d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061d6:	bf00      	nop
 80061d8:	51eb851f 	.word	0x51eb851f

080061dc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d123      	bne.n	8006236 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80061f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	6851      	ldr	r1, [r2, #4]
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	6892      	ldr	r2, [r2, #8]
 8006202:	4311      	orrs	r1, r2
 8006204:	683a      	ldr	r2, [r7, #0]
 8006206:	68d2      	ldr	r2, [r2, #12]
 8006208:	4311      	orrs	r1, r2
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	6912      	ldr	r2, [r2, #16]
 800620e:	4311      	orrs	r1, r2
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	6952      	ldr	r2, [r2, #20]
 8006214:	4311      	orrs	r1, r2
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	6992      	ldr	r2, [r2, #24]
 800621a:	4311      	orrs	r1, r2
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	69d2      	ldr	r2, [r2, #28]
 8006220:	4311      	orrs	r1, r2
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	6a12      	ldr	r2, [r2, #32]
 8006226:	4311      	orrs	r1, r2
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800622c:	430a      	orrs	r2, r1
 800622e:	431a      	orrs	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	e028      	b.n	8006288 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	69d9      	ldr	r1, [r3, #28]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	4319      	orrs	r1, r3
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624c:	430b      	orrs	r3, r1
 800624e:	431a      	orrs	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800625c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	6851      	ldr	r1, [r2, #4]
 8006264:	683a      	ldr	r2, [r7, #0]
 8006266:	6892      	ldr	r2, [r2, #8]
 8006268:	4311      	orrs	r1, r2
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	68d2      	ldr	r2, [r2, #12]
 800626e:	4311      	orrs	r1, r2
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	6912      	ldr	r2, [r2, #16]
 8006274:	4311      	orrs	r1, r2
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	6952      	ldr	r2, [r2, #20]
 800627a:	4311      	orrs	r1, r2
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	6992      	ldr	r2, [r2, #24]
 8006280:	430a      	orrs	r2, r1
 8006282:	431a      	orrs	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006296:	b480      	push	{r7}
 8006298:	b085      	sub	sp, #20
 800629a:	af00      	add	r7, sp, #0
 800629c:	60f8      	str	r0, [r7, #12]
 800629e:	60b9      	str	r1, [r7, #8]
 80062a0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d128      	bne.n	80062fa <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	1e59      	subs	r1, r3, #1
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	3b01      	subs	r3, #1
 80062bc:	011b      	lsls	r3, r3, #4
 80062be:	4319      	orrs	r1, r3
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	3b01      	subs	r3, #1
 80062c6:	021b      	lsls	r3, r3, #8
 80062c8:	4319      	orrs	r1, r3
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	3b01      	subs	r3, #1
 80062d0:	031b      	lsls	r3, r3, #12
 80062d2:	4319      	orrs	r1, r3
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	3b01      	subs	r3, #1
 80062da:	041b      	lsls	r3, r3, #16
 80062dc:	4319      	orrs	r1, r3
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	3b01      	subs	r3, #1
 80062e4:	051b      	lsls	r3, r3, #20
 80062e6:	4319      	orrs	r1, r3
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	3b01      	subs	r3, #1
 80062ee:	061b      	lsls	r3, r3, #24
 80062f0:	430b      	orrs	r3, r1
 80062f2:	431a      	orrs	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	609a      	str	r2, [r3, #8]
 80062f8:	e02f      	b.n	800635a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006302:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	68d2      	ldr	r2, [r2, #12]
 800630a:	3a01      	subs	r2, #1
 800630c:	0311      	lsls	r1, r2, #12
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	6952      	ldr	r2, [r2, #20]
 8006312:	3a01      	subs	r2, #1
 8006314:	0512      	lsls	r2, r2, #20
 8006316:	430a      	orrs	r2, r1
 8006318:	431a      	orrs	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	1e59      	subs	r1, r3, #1
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	3b01      	subs	r3, #1
 8006332:	011b      	lsls	r3, r3, #4
 8006334:	4319      	orrs	r1, r3
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	3b01      	subs	r3, #1
 800633c:	021b      	lsls	r3, r3, #8
 800633e:	4319      	orrs	r1, r3
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	3b01      	subs	r3, #1
 8006346:	041b      	lsls	r3, r3, #16
 8006348:	4319      	orrs	r1, r3
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	3b01      	subs	r3, #1
 8006350:	061b      	lsls	r3, r3, #24
 8006352:	430b      	orrs	r3, r1
 8006354:	431a      	orrs	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <makeFreeRtosPriority>:
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	4603      	mov	r3, r0
 8006370:	80fb      	strh	r3, [r7, #6]
 8006372:	2300      	movs	r3, #0
 8006374:	60fb      	str	r3, [r7, #12]
 8006376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800637a:	2b84      	cmp	r3, #132	; 0x84
 800637c:	d005      	beq.n	800638a <makeFreeRtosPriority+0x22>
 800637e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	4413      	add	r3, r2
 8006386:	3303      	adds	r3, #3
 8006388:	60fb      	str	r3, [r7, #12]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	4618      	mov	r0, r3
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <osKernelStart>:
 8006398:	b580      	push	{r7, lr}
 800639a:	af00      	add	r7, sp, #0
 800639c:	f000 fa80 	bl	80068a0 <vTaskStartScheduler>
 80063a0:	2300      	movs	r3, #0
 80063a2:	4618      	mov	r0, r3
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <osThreadCreate>:
 80063a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063a8:	b089      	sub	sp, #36	; 0x24
 80063aa:	af04      	add	r7, sp, #16
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	6039      	str	r1, [r7, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d020      	beq.n	80063fa <osThreadCreate+0x54>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d01c      	beq.n	80063fa <osThreadCreate+0x54>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685c      	ldr	r4, [r3, #4]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681d      	ldr	r5, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	691e      	ldr	r6, [r3, #16]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7ff ffc8 	bl	8006368 <makeFreeRtosPriority>
 80063d8:	4601      	mov	r1, r0
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	6992      	ldr	r2, [r2, #24]
 80063e2:	9202      	str	r2, [sp, #8]
 80063e4:	9301      	str	r3, [sp, #4]
 80063e6:	9100      	str	r1, [sp, #0]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	4632      	mov	r2, r6
 80063ec:	4629      	mov	r1, r5
 80063ee:	4620      	mov	r0, r4
 80063f0:	f000 f8a0 	bl	8006534 <xTaskCreateStatic>
 80063f4:	4603      	mov	r3, r0
 80063f6:	60fb      	str	r3, [r7, #12]
 80063f8:	e01c      	b.n	8006434 <osThreadCreate+0x8e>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685c      	ldr	r4, [r3, #4]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681d      	ldr	r5, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	b29e      	uxth	r6, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800640e:	4618      	mov	r0, r3
 8006410:	f7ff ffaa 	bl	8006368 <makeFreeRtosPriority>
 8006414:	4602      	mov	r2, r0
 8006416:	f107 030c 	add.w	r3, r7, #12
 800641a:	9301      	str	r3, [sp, #4]
 800641c:	9200      	str	r2, [sp, #0]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	4632      	mov	r2, r6
 8006422:	4629      	mov	r1, r5
 8006424:	4620      	mov	r0, r4
 8006426:	f000 f8e2 	bl	80065ee <xTaskCreate>
 800642a:	4603      	mov	r3, r0
 800642c:	2b01      	cmp	r3, #1
 800642e:	d001      	beq.n	8006434 <osThreadCreate+0x8e>
 8006430:	2300      	movs	r3, #0
 8006432:	e000      	b.n	8006436 <osThreadCreate+0x90>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4618      	mov	r0, r3
 8006438:	3714      	adds	r7, #20
 800643a:	46bd      	mov	sp, r7
 800643c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800643e <vListInitialise>:
 800643e:	b480      	push	{r7}
 8006440:	b083      	sub	sp, #12
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f103 0208 	add.w	r2, r3, #8
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	605a      	str	r2, [r3, #4]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f04f 32ff 	mov.w	r2, #4294967295
 8006456:	609a      	str	r2, [r3, #8]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f103 0208 	add.w	r2, r3, #8
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	60da      	str	r2, [r3, #12]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f103 0208 	add.w	r2, r3, #8
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	611a      	str	r2, [r3, #16]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	bf00      	nop
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <vListInitialiseItem>:
 800647e:	b480      	push	{r7}
 8006480:	b083      	sub	sp, #12
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	611a      	str	r2, [r3, #16]
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <vListInsertEnd>:
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	605a      	str	r2, [r3, #4]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	689a      	ldr	r2, [r3, #8]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	609a      	str	r2, [r3, #8]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	605a      	str	r2, [r3, #4]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	683a      	ldr	r2, [r7, #0]
 80064c2:	609a      	str	r2, [r3, #8]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	611a      	str	r2, [r3, #16]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	1c5a      	adds	r2, r3, #1
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	601a      	str	r2, [r3, #0]
 80064d4:	bf00      	nop
 80064d6:	3714      	adds	r7, #20
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <uxListRemove>:
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	6892      	ldr	r2, [r2, #8]
 80064f6:	609a      	str	r2, [r3, #8]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	6852      	ldr	r2, [r2, #4]
 8006500:	605a      	str	r2, [r3, #4]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	429a      	cmp	r2, r3
 800650a:	d103      	bne.n	8006514 <uxListRemove+0x34>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	689a      	ldr	r2, [r3, #8]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	605a      	str	r2, [r3, #4]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	611a      	str	r2, [r3, #16]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	1e5a      	subs	r2, r3, #1
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4618      	mov	r0, r3
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <xTaskCreateStatic>:
 8006534:	b580      	push	{r7, lr}
 8006536:	b08e      	sub	sp, #56	; 0x38
 8006538:	af04      	add	r7, sp, #16
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	603b      	str	r3, [r7, #0]
 8006542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10a      	bne.n	800655e <xTaskCreateStatic+0x2a>
 8006548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654c:	f383 8811 	msr	BASEPRI, r3
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	623b      	str	r3, [r7, #32]
 800655a:	bf00      	nop
 800655c:	e7fe      	b.n	800655c <xTaskCreateStatic+0x28>
 800655e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10a      	bne.n	800657a <xTaskCreateStatic+0x46>
 8006564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006568:	f383 8811 	msr	BASEPRI, r3
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	61fb      	str	r3, [r7, #28]
 8006576:	bf00      	nop
 8006578:	e7fe      	b.n	8006578 <xTaskCreateStatic+0x44>
 800657a:	23b8      	movs	r3, #184	; 0xb8
 800657c:	613b      	str	r3, [r7, #16]
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	2bb8      	cmp	r3, #184	; 0xb8
 8006582:	d00a      	beq.n	800659a <xTaskCreateStatic+0x66>
 8006584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006588:	f383 8811 	msr	BASEPRI, r3
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	f3bf 8f4f 	dsb	sy
 8006594:	61bb      	str	r3, [r7, #24]
 8006596:	bf00      	nop
 8006598:	e7fe      	b.n	8006598 <xTaskCreateStatic+0x64>
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d01e      	beq.n	80065e0 <xTaskCreateStatic+0xac>
 80065a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d01b      	beq.n	80065e0 <xTaskCreateStatic+0xac>
 80065a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065aa:	627b      	str	r3, [r7, #36]	; 0x24
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065b0:	631a      	str	r2, [r3, #48]	; 0x30
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b4:	2202      	movs	r2, #2
 80065b6:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 80065ba:	2300      	movs	r3, #0
 80065bc:	9303      	str	r3, [sp, #12]
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	9302      	str	r3, [sp, #8]
 80065c2:	f107 0314 	add.w	r3, r7, #20
 80065c6:	9301      	str	r3, [sp, #4]
 80065c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	68b9      	ldr	r1, [r7, #8]
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 f850 	bl	8006678 <prvInitialiseNewTask>
 80065d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065da:	f000 f8f7 	bl	80067cc <prvAddNewTaskToReadyList>
 80065de:	e001      	b.n	80065e4 <xTaskCreateStatic+0xb0>
 80065e0:	2300      	movs	r3, #0
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	4618      	mov	r0, r3
 80065e8:	3728      	adds	r7, #40	; 0x28
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <xTaskCreate>:
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b08c      	sub	sp, #48	; 0x30
 80065f2:	af04      	add	r7, sp, #16
 80065f4:	60f8      	str	r0, [r7, #12]
 80065f6:	60b9      	str	r1, [r7, #8]
 80065f8:	603b      	str	r3, [r7, #0]
 80065fa:	4613      	mov	r3, r2
 80065fc:	80fb      	strh	r3, [r7, #6]
 80065fe:	88fb      	ldrh	r3, [r7, #6]
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4618      	mov	r0, r3
 8006604:	f000 fe88 	bl	8007318 <pvPortMalloc>
 8006608:	6178      	str	r0, [r7, #20]
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00e      	beq.n	800662e <xTaskCreate+0x40>
 8006610:	20b8      	movs	r0, #184	; 0xb8
 8006612:	f000 fe81 	bl	8007318 <pvPortMalloc>
 8006616:	61f8      	str	r0, [r7, #28]
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <xTaskCreate+0x38>
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	631a      	str	r2, [r3, #48]	; 0x30
 8006624:	e005      	b.n	8006632 <xTaskCreate+0x44>
 8006626:	6978      	ldr	r0, [r7, #20]
 8006628:	f000 ff46 	bl	80074b8 <vPortFree>
 800662c:	e001      	b.n	8006632 <xTaskCreate+0x44>
 800662e:	2300      	movs	r3, #0
 8006630:	61fb      	str	r3, [r7, #28]
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d017      	beq.n	8006668 <xTaskCreate+0x7a>
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 8006640:	88fa      	ldrh	r2, [r7, #6]
 8006642:	2300      	movs	r3, #0
 8006644:	9303      	str	r3, [sp, #12]
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	9302      	str	r3, [sp, #8]
 800664a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664c:	9301      	str	r3, [sp, #4]
 800664e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	68b9      	ldr	r1, [r7, #8]
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f000 f80e 	bl	8006678 <prvInitialiseNewTask>
 800665c:	69f8      	ldr	r0, [r7, #28]
 800665e:	f000 f8b5 	bl	80067cc <prvAddNewTaskToReadyList>
 8006662:	2301      	movs	r3, #1
 8006664:	61bb      	str	r3, [r7, #24]
 8006666:	e002      	b.n	800666e <xTaskCreate+0x80>
 8006668:	f04f 33ff 	mov.w	r3, #4294967295
 800666c:	61bb      	str	r3, [r7, #24]
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	4618      	mov	r0, r3
 8006672:	3720      	adds	r7, #32
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <prvInitialiseNewTask>:
 8006678:	b580      	push	{r7, lr}
 800667a:	b088      	sub	sp, #32
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
 8006684:	603b      	str	r3, [r7, #0]
 8006686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006688:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	461a      	mov	r2, r3
 8006690:	21a5      	movs	r1, #165	; 0xa5
 8006692:	f001 f855 	bl	8007740 <memset>
 8006696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80066a0:	3b01      	subs	r3, #1
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4413      	add	r3, r2
 80066a6:	61bb      	str	r3, [r7, #24]
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	f023 0307 	bic.w	r3, r3, #7
 80066ae:	61bb      	str	r3, [r7, #24]
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	f003 0307 	and.w	r3, r3, #7
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00a      	beq.n	80066d0 <prvInitialiseNewTask+0x58>
 80066ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066be:	f383 8811 	msr	BASEPRI, r3
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	617b      	str	r3, [r7, #20]
 80066cc:	bf00      	nop
 80066ce:	e7fe      	b.n	80066ce <prvInitialiseNewTask+0x56>
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d01f      	beq.n	8006716 <prvInitialiseNewTask+0x9e>
 80066d6:	2300      	movs	r3, #0
 80066d8:	61fb      	str	r3, [r7, #28]
 80066da:	e012      	b.n	8006702 <prvInitialiseNewTask+0x8a>
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	4413      	add	r3, r2
 80066e2:	7819      	ldrb	r1, [r3, #0]
 80066e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	4413      	add	r3, r2
 80066ea:	3334      	adds	r3, #52	; 0x34
 80066ec:	460a      	mov	r2, r1
 80066ee:	701a      	strb	r2, [r3, #0]
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	4413      	add	r3, r2
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d006      	beq.n	800670a <prvInitialiseNewTask+0x92>
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	3301      	adds	r3, #1
 8006700:	61fb      	str	r3, [r7, #28]
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	2b0f      	cmp	r3, #15
 8006706:	d9e9      	bls.n	80066dc <prvInitialiseNewTask+0x64>
 8006708:	e000      	b.n	800670c <prvInitialiseNewTask+0x94>
 800670a:	bf00      	nop
 800670c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006714:	e003      	b.n	800671e <prvInitialiseNewTask+0xa6>
 8006716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006718:	2200      	movs	r2, #0
 800671a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800671e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006720:	2b06      	cmp	r3, #6
 8006722:	d901      	bls.n	8006728 <prvInitialiseNewTask+0xb0>
 8006724:	2306      	movs	r3, #6
 8006726:	62bb      	str	r3, [r7, #40]	; 0x28
 8006728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800672c:	62da      	str	r2, [r3, #44]	; 0x2c
 800672e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006732:	645a      	str	r2, [r3, #68]	; 0x44
 8006734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006736:	2200      	movs	r2, #0
 8006738:	649a      	str	r2, [r3, #72]	; 0x48
 800673a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673c:	3304      	adds	r3, #4
 800673e:	4618      	mov	r0, r3
 8006740:	f7ff fe9d 	bl	800647e <vListInitialiseItem>
 8006744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006746:	3318      	adds	r3, #24
 8006748:	4618      	mov	r0, r3
 800674a:	f7ff fe98 	bl	800647e <vListInitialiseItem>
 800674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006752:	611a      	str	r2, [r3, #16]
 8006754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006756:	f1c3 0207 	rsb	r2, r3, #7
 800675a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675c:	619a      	str	r2, [r3, #24]
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006762:	625a      	str	r2, [r3, #36]	; 0x24
 8006764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006766:	2200      	movs	r2, #0
 8006768:	64da      	str	r2, [r3, #76]	; 0x4c
 800676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676c:	2200      	movs	r2, #0
 800676e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8006772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006774:	2200      	movs	r2, #0
 8006776:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 800677a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677c:	3350      	adds	r3, #80	; 0x50
 800677e:	2260      	movs	r2, #96	; 0x60
 8006780:	2100      	movs	r1, #0
 8006782:	4618      	mov	r0, r3
 8006784:	f000 ffdc 	bl	8007740 <memset>
 8006788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678a:	4a0d      	ldr	r2, [pc, #52]	; (80067c0 <prvInitialiseNewTask+0x148>)
 800678c:	655a      	str	r2, [r3, #84]	; 0x54
 800678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006790:	4a0c      	ldr	r2, [pc, #48]	; (80067c4 <prvInitialiseNewTask+0x14c>)
 8006792:	659a      	str	r2, [r3, #88]	; 0x58
 8006794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006796:	4a0c      	ldr	r2, [pc, #48]	; (80067c8 <prvInitialiseNewTask+0x150>)
 8006798:	65da      	str	r2, [r3, #92]	; 0x5c
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	68f9      	ldr	r1, [r7, #12]
 800679e:	69b8      	ldr	r0, [r7, #24]
 80067a0:	f000 fbae 	bl	8006f00 <pxPortInitialiseStack>
 80067a4:	4602      	mov	r2, r0
 80067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d002      	beq.n	80067b6 <prvInitialiseNewTask+0x13e>
 80067b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	bf00      	nop
 80067b8:	3720      	adds	r7, #32
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	08007a08 	.word	0x08007a08
 80067c4:	08007a28 	.word	0x08007a28
 80067c8:	080079e8 	.word	0x080079e8

080067cc <prvAddNewTaskToReadyList>:
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	f000 fcbe 	bl	8007154 <vPortEnterCritical>
 80067d8:	4b2a      	ldr	r3, [pc, #168]	; (8006884 <prvAddNewTaskToReadyList+0xb8>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3301      	adds	r3, #1
 80067de:	4a29      	ldr	r2, [pc, #164]	; (8006884 <prvAddNewTaskToReadyList+0xb8>)
 80067e0:	6013      	str	r3, [r2, #0]
 80067e2:	4b29      	ldr	r3, [pc, #164]	; (8006888 <prvAddNewTaskToReadyList+0xbc>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d109      	bne.n	80067fe <prvAddNewTaskToReadyList+0x32>
 80067ea:	4a27      	ldr	r2, [pc, #156]	; (8006888 <prvAddNewTaskToReadyList+0xbc>)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6013      	str	r3, [r2, #0]
 80067f0:	4b24      	ldr	r3, [pc, #144]	; (8006884 <prvAddNewTaskToReadyList+0xb8>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d110      	bne.n	800681a <prvAddNewTaskToReadyList+0x4e>
 80067f8:	f000 fac0 	bl	8006d7c <prvInitialiseTaskLists>
 80067fc:	e00d      	b.n	800681a <prvAddNewTaskToReadyList+0x4e>
 80067fe:	4b23      	ldr	r3, [pc, #140]	; (800688c <prvAddNewTaskToReadyList+0xc0>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d109      	bne.n	800681a <prvAddNewTaskToReadyList+0x4e>
 8006806:	4b20      	ldr	r3, [pc, #128]	; (8006888 <prvAddNewTaskToReadyList+0xbc>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006810:	429a      	cmp	r2, r3
 8006812:	d802      	bhi.n	800681a <prvAddNewTaskToReadyList+0x4e>
 8006814:	4a1c      	ldr	r2, [pc, #112]	; (8006888 <prvAddNewTaskToReadyList+0xbc>)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6013      	str	r3, [r2, #0]
 800681a:	4b1d      	ldr	r3, [pc, #116]	; (8006890 <prvAddNewTaskToReadyList+0xc4>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	3301      	adds	r3, #1
 8006820:	4a1b      	ldr	r2, [pc, #108]	; (8006890 <prvAddNewTaskToReadyList+0xc4>)
 8006822:	6013      	str	r3, [r2, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006828:	2201      	movs	r2, #1
 800682a:	409a      	lsls	r2, r3
 800682c:	4b19      	ldr	r3, [pc, #100]	; (8006894 <prvAddNewTaskToReadyList+0xc8>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4313      	orrs	r3, r2
 8006832:	4a18      	ldr	r2, [pc, #96]	; (8006894 <prvAddNewTaskToReadyList+0xc8>)
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800683a:	4613      	mov	r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4413      	add	r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4a15      	ldr	r2, [pc, #84]	; (8006898 <prvAddNewTaskToReadyList+0xcc>)
 8006844:	441a      	add	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	3304      	adds	r3, #4
 800684a:	4619      	mov	r1, r3
 800684c:	4610      	mov	r0, r2
 800684e:	f7ff fe23 	bl	8006498 <vListInsertEnd>
 8006852:	f000 fcaf 	bl	80071b4 <vPortExitCritical>
 8006856:	4b0d      	ldr	r3, [pc, #52]	; (800688c <prvAddNewTaskToReadyList+0xc0>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00e      	beq.n	800687c <prvAddNewTaskToReadyList+0xb0>
 800685e:	4b0a      	ldr	r3, [pc, #40]	; (8006888 <prvAddNewTaskToReadyList+0xbc>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006868:	429a      	cmp	r2, r3
 800686a:	d207      	bcs.n	800687c <prvAddNewTaskToReadyList+0xb0>
 800686c:	4b0b      	ldr	r3, [pc, #44]	; (800689c <prvAddNewTaskToReadyList+0xd0>)
 800686e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	bf00      	nop
 800687e:	3708      	adds	r7, #8
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	200009a4 	.word	0x200009a4
 8006888:	200008a4 	.word	0x200008a4
 800688c:	200009b0 	.word	0x200009b0
 8006890:	200009c0 	.word	0x200009c0
 8006894:	200009ac 	.word	0x200009ac
 8006898:	200008a8 	.word	0x200008a8
 800689c:	e000ed04 	.word	0xe000ed04

080068a0 <vTaskStartScheduler>:
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b08a      	sub	sp, #40	; 0x28
 80068a4:	af04      	add	r7, sp, #16
 80068a6:	2300      	movs	r3, #0
 80068a8:	60bb      	str	r3, [r7, #8]
 80068aa:	2300      	movs	r3, #0
 80068ac:	607b      	str	r3, [r7, #4]
 80068ae:	463a      	mov	r2, r7
 80068b0:	1d39      	adds	r1, r7, #4
 80068b2:	f107 0308 	add.w	r3, r7, #8
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7f9 fe36 	bl	8000528 <vApplicationGetIdleTaskMemory>
 80068bc:	6839      	ldr	r1, [r7, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	9202      	str	r2, [sp, #8]
 80068c4:	9301      	str	r3, [sp, #4]
 80068c6:	2300      	movs	r3, #0
 80068c8:	9300      	str	r3, [sp, #0]
 80068ca:	2300      	movs	r3, #0
 80068cc:	460a      	mov	r2, r1
 80068ce:	4921      	ldr	r1, [pc, #132]	; (8006954 <vTaskStartScheduler+0xb4>)
 80068d0:	4821      	ldr	r0, [pc, #132]	; (8006958 <vTaskStartScheduler+0xb8>)
 80068d2:	f7ff fe2f 	bl	8006534 <xTaskCreateStatic>
 80068d6:	4603      	mov	r3, r0
 80068d8:	4a20      	ldr	r2, [pc, #128]	; (800695c <vTaskStartScheduler+0xbc>)
 80068da:	6013      	str	r3, [r2, #0]
 80068dc:	4b1f      	ldr	r3, [pc, #124]	; (800695c <vTaskStartScheduler+0xbc>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <vTaskStartScheduler+0x4a>
 80068e4:	2301      	movs	r3, #1
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	e001      	b.n	80068ee <vTaskStartScheduler+0x4e>
 80068ea:	2300      	movs	r3, #0
 80068ec:	617b      	str	r3, [r7, #20]
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d11b      	bne.n	800692c <vTaskStartScheduler+0x8c>
 80068f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	613b      	str	r3, [r7, #16]
 8006906:	bf00      	nop
 8006908:	4b15      	ldr	r3, [pc, #84]	; (8006960 <vTaskStartScheduler+0xc0>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	3350      	adds	r3, #80	; 0x50
 800690e:	4a15      	ldr	r2, [pc, #84]	; (8006964 <vTaskStartScheduler+0xc4>)
 8006910:	6013      	str	r3, [r2, #0]
 8006912:	4b15      	ldr	r3, [pc, #84]	; (8006968 <vTaskStartScheduler+0xc8>)
 8006914:	f04f 32ff 	mov.w	r2, #4294967295
 8006918:	601a      	str	r2, [r3, #0]
 800691a:	4b14      	ldr	r3, [pc, #80]	; (800696c <vTaskStartScheduler+0xcc>)
 800691c:	2201      	movs	r2, #1
 800691e:	601a      	str	r2, [r3, #0]
 8006920:	4b13      	ldr	r3, [pc, #76]	; (8006970 <vTaskStartScheduler+0xd0>)
 8006922:	2200      	movs	r2, #0
 8006924:	601a      	str	r2, [r3, #0]
 8006926:	f000 fb73 	bl	8007010 <xPortStartScheduler>
 800692a:	e00e      	b.n	800694a <vTaskStartScheduler+0xaa>
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006932:	d10a      	bne.n	800694a <vTaskStartScheduler+0xaa>
 8006934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	60fb      	str	r3, [r7, #12]
 8006946:	bf00      	nop
 8006948:	e7fe      	b.n	8006948 <vTaskStartScheduler+0xa8>
 800694a:	bf00      	nop
 800694c:	3718      	adds	r7, #24
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	08007914 	.word	0x08007914
 8006958:	08006d49 	.word	0x08006d49
 800695c:	200009c8 	.word	0x200009c8
 8006960:	200008a4 	.word	0x200008a4
 8006964:	20000014 	.word	0x20000014
 8006968:	200009c4 	.word	0x200009c4
 800696c:	200009b0 	.word	0x200009b0
 8006970:	200009a8 	.word	0x200009a8

08006974 <vTaskSuspendAll>:
 8006974:	b480      	push	{r7}
 8006976:	af00      	add	r7, sp, #0
 8006978:	4b04      	ldr	r3, [pc, #16]	; (800698c <vTaskSuspendAll+0x18>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	3301      	adds	r3, #1
 800697e:	4a03      	ldr	r2, [pc, #12]	; (800698c <vTaskSuspendAll+0x18>)
 8006980:	6013      	str	r3, [r2, #0]
 8006982:	bf00      	nop
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	200009cc 	.word	0x200009cc

08006990 <xTaskResumeAll>:
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	2300      	movs	r3, #0
 8006998:	60fb      	str	r3, [r7, #12]
 800699a:	2300      	movs	r3, #0
 800699c:	60bb      	str	r3, [r7, #8]
 800699e:	4b41      	ldr	r3, [pc, #260]	; (8006aa4 <xTaskResumeAll+0x114>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10a      	bne.n	80069bc <xTaskResumeAll+0x2c>
 80069a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069aa:	f383 8811 	msr	BASEPRI, r3
 80069ae:	f3bf 8f6f 	isb	sy
 80069b2:	f3bf 8f4f 	dsb	sy
 80069b6:	603b      	str	r3, [r7, #0]
 80069b8:	bf00      	nop
 80069ba:	e7fe      	b.n	80069ba <xTaskResumeAll+0x2a>
 80069bc:	f000 fbca 	bl	8007154 <vPortEnterCritical>
 80069c0:	4b38      	ldr	r3, [pc, #224]	; (8006aa4 <xTaskResumeAll+0x114>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3b01      	subs	r3, #1
 80069c6:	4a37      	ldr	r2, [pc, #220]	; (8006aa4 <xTaskResumeAll+0x114>)
 80069c8:	6013      	str	r3, [r2, #0]
 80069ca:	4b36      	ldr	r3, [pc, #216]	; (8006aa4 <xTaskResumeAll+0x114>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d161      	bne.n	8006a96 <xTaskResumeAll+0x106>
 80069d2:	4b35      	ldr	r3, [pc, #212]	; (8006aa8 <xTaskResumeAll+0x118>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d05d      	beq.n	8006a96 <xTaskResumeAll+0x106>
 80069da:	e02e      	b.n	8006a3a <xTaskResumeAll+0xaa>
 80069dc:	4b33      	ldr	r3, [pc, #204]	; (8006aac <xTaskResumeAll+0x11c>)
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	60fb      	str	r3, [r7, #12]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	3318      	adds	r3, #24
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7ff fd79 	bl	80064e0 <uxListRemove>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	3304      	adds	r3, #4
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7ff fd74 	bl	80064e0 <uxListRemove>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fc:	2201      	movs	r2, #1
 80069fe:	409a      	lsls	r2, r3
 8006a00:	4b2b      	ldr	r3, [pc, #172]	; (8006ab0 <xTaskResumeAll+0x120>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	4a2a      	ldr	r2, [pc, #168]	; (8006ab0 <xTaskResumeAll+0x120>)
 8006a08:	6013      	str	r3, [r2, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0e:	4613      	mov	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4a27      	ldr	r2, [pc, #156]	; (8006ab4 <xTaskResumeAll+0x124>)
 8006a18:	441a      	add	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	3304      	adds	r3, #4
 8006a1e:	4619      	mov	r1, r3
 8006a20:	4610      	mov	r0, r2
 8006a22:	f7ff fd39 	bl	8006498 <vListInsertEnd>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a2a:	4b23      	ldr	r3, [pc, #140]	; (8006ab8 <xTaskResumeAll+0x128>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d302      	bcc.n	8006a3a <xTaskResumeAll+0xaa>
 8006a34:	4b21      	ldr	r3, [pc, #132]	; (8006abc <xTaskResumeAll+0x12c>)
 8006a36:	2201      	movs	r2, #1
 8006a38:	601a      	str	r2, [r3, #0]
 8006a3a:	4b1c      	ldr	r3, [pc, #112]	; (8006aac <xTaskResumeAll+0x11c>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1cc      	bne.n	80069dc <xTaskResumeAll+0x4c>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d001      	beq.n	8006a4c <xTaskResumeAll+0xbc>
 8006a48:	f000 fa3a 	bl	8006ec0 <prvResetNextTaskUnblockTime>
 8006a4c:	4b1c      	ldr	r3, [pc, #112]	; (8006ac0 <xTaskResumeAll+0x130>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	607b      	str	r3, [r7, #4]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d010      	beq.n	8006a7a <xTaskResumeAll+0xea>
 8006a58:	f000 f836 	bl	8006ac8 <xTaskIncrementTick>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d002      	beq.n	8006a68 <xTaskResumeAll+0xd8>
 8006a62:	4b16      	ldr	r3, [pc, #88]	; (8006abc <xTaskResumeAll+0x12c>)
 8006a64:	2201      	movs	r2, #1
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	607b      	str	r3, [r7, #4]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1f1      	bne.n	8006a58 <xTaskResumeAll+0xc8>
 8006a74:	4b12      	ldr	r3, [pc, #72]	; (8006ac0 <xTaskResumeAll+0x130>)
 8006a76:	2200      	movs	r2, #0
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	4b10      	ldr	r3, [pc, #64]	; (8006abc <xTaskResumeAll+0x12c>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d009      	beq.n	8006a96 <xTaskResumeAll+0x106>
 8006a82:	2301      	movs	r3, #1
 8006a84:	60bb      	str	r3, [r7, #8]
 8006a86:	4b0f      	ldr	r3, [pc, #60]	; (8006ac4 <xTaskResumeAll+0x134>)
 8006a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a8c:	601a      	str	r2, [r3, #0]
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	f000 fb8d 	bl	80071b4 <vPortExitCritical>
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	200009cc 	.word	0x200009cc
 8006aa8:	200009a4 	.word	0x200009a4
 8006aac:	20000964 	.word	0x20000964
 8006ab0:	200009ac 	.word	0x200009ac
 8006ab4:	200008a8 	.word	0x200008a8
 8006ab8:	200008a4 	.word	0x200008a4
 8006abc:	200009b8 	.word	0x200009b8
 8006ac0:	200009b4 	.word	0x200009b4
 8006ac4:	e000ed04 	.word	0xe000ed04

08006ac8 <xTaskIncrementTick>:
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	2300      	movs	r3, #0
 8006ad0:	617b      	str	r3, [r7, #20]
 8006ad2:	4b4e      	ldr	r3, [pc, #312]	; (8006c0c <xTaskIncrementTick+0x144>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f040 808e 	bne.w	8006bf8 <xTaskIncrementTick+0x130>
 8006adc:	4b4c      	ldr	r3, [pc, #304]	; (8006c10 <xTaskIncrementTick+0x148>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	613b      	str	r3, [r7, #16]
 8006ae4:	4a4a      	ldr	r2, [pc, #296]	; (8006c10 <xTaskIncrementTick+0x148>)
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	6013      	str	r3, [r2, #0]
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d120      	bne.n	8006b32 <xTaskIncrementTick+0x6a>
 8006af0:	4b48      	ldr	r3, [pc, #288]	; (8006c14 <xTaskIncrementTick+0x14c>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00a      	beq.n	8006b10 <xTaskIncrementTick+0x48>
 8006afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	603b      	str	r3, [r7, #0]
 8006b0c:	bf00      	nop
 8006b0e:	e7fe      	b.n	8006b0e <xTaskIncrementTick+0x46>
 8006b10:	4b40      	ldr	r3, [pc, #256]	; (8006c14 <xTaskIncrementTick+0x14c>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	60fb      	str	r3, [r7, #12]
 8006b16:	4b40      	ldr	r3, [pc, #256]	; (8006c18 <xTaskIncrementTick+0x150>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a3e      	ldr	r2, [pc, #248]	; (8006c14 <xTaskIncrementTick+0x14c>)
 8006b1c:	6013      	str	r3, [r2, #0]
 8006b1e:	4a3e      	ldr	r2, [pc, #248]	; (8006c18 <xTaskIncrementTick+0x150>)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6013      	str	r3, [r2, #0]
 8006b24:	4b3d      	ldr	r3, [pc, #244]	; (8006c1c <xTaskIncrementTick+0x154>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	4a3c      	ldr	r2, [pc, #240]	; (8006c1c <xTaskIncrementTick+0x154>)
 8006b2c:	6013      	str	r3, [r2, #0]
 8006b2e:	f000 f9c7 	bl	8006ec0 <prvResetNextTaskUnblockTime>
 8006b32:	4b3b      	ldr	r3, [pc, #236]	; (8006c20 <xTaskIncrementTick+0x158>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d348      	bcc.n	8006bce <xTaskIncrementTick+0x106>
 8006b3c:	4b35      	ldr	r3, [pc, #212]	; (8006c14 <xTaskIncrementTick+0x14c>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d104      	bne.n	8006b50 <xTaskIncrementTick+0x88>
 8006b46:	4b36      	ldr	r3, [pc, #216]	; (8006c20 <xTaskIncrementTick+0x158>)
 8006b48:	f04f 32ff 	mov.w	r2, #4294967295
 8006b4c:	601a      	str	r2, [r3, #0]
 8006b4e:	e03e      	b.n	8006bce <xTaskIncrementTick+0x106>
 8006b50:	4b30      	ldr	r3, [pc, #192]	; (8006c14 <xTaskIncrementTick+0x14c>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	60bb      	str	r3, [r7, #8]
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	607b      	str	r3, [r7, #4]
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d203      	bcs.n	8006b70 <xTaskIncrementTick+0xa8>
 8006b68:	4a2d      	ldr	r2, [pc, #180]	; (8006c20 <xTaskIncrementTick+0x158>)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6013      	str	r3, [r2, #0]
 8006b6e:	e02e      	b.n	8006bce <xTaskIncrementTick+0x106>
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	3304      	adds	r3, #4
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7ff fcb3 	bl	80064e0 <uxListRemove>
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d004      	beq.n	8006b8c <xTaskIncrementTick+0xc4>
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	3318      	adds	r3, #24
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7ff fcaa 	bl	80064e0 <uxListRemove>
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b90:	2201      	movs	r2, #1
 8006b92:	409a      	lsls	r2, r3
 8006b94:	4b23      	ldr	r3, [pc, #140]	; (8006c24 <xTaskIncrementTick+0x15c>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	4a22      	ldr	r2, [pc, #136]	; (8006c24 <xTaskIncrementTick+0x15c>)
 8006b9c:	6013      	str	r3, [r2, #0]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4a1f      	ldr	r2, [pc, #124]	; (8006c28 <xTaskIncrementTick+0x160>)
 8006bac:	441a      	add	r2, r3
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	3304      	adds	r3, #4
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	4610      	mov	r0, r2
 8006bb6:	f7ff fc6f 	bl	8006498 <vListInsertEnd>
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bbe:	4b1b      	ldr	r3, [pc, #108]	; (8006c2c <xTaskIncrementTick+0x164>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d3b9      	bcc.n	8006b3c <xTaskIncrementTick+0x74>
 8006bc8:	2301      	movs	r3, #1
 8006bca:	617b      	str	r3, [r7, #20]
 8006bcc:	e7b6      	b.n	8006b3c <xTaskIncrementTick+0x74>
 8006bce:	4b17      	ldr	r3, [pc, #92]	; (8006c2c <xTaskIncrementTick+0x164>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd4:	4914      	ldr	r1, [pc, #80]	; (8006c28 <xTaskIncrementTick+0x160>)
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4413      	add	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	440b      	add	r3, r1
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d901      	bls.n	8006bea <xTaskIncrementTick+0x122>
 8006be6:	2301      	movs	r3, #1
 8006be8:	617b      	str	r3, [r7, #20]
 8006bea:	4b11      	ldr	r3, [pc, #68]	; (8006c30 <xTaskIncrementTick+0x168>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d007      	beq.n	8006c02 <xTaskIncrementTick+0x13a>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	617b      	str	r3, [r7, #20]
 8006bf6:	e004      	b.n	8006c02 <xTaskIncrementTick+0x13a>
 8006bf8:	4b0e      	ldr	r3, [pc, #56]	; (8006c34 <xTaskIncrementTick+0x16c>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	4a0d      	ldr	r2, [pc, #52]	; (8006c34 <xTaskIncrementTick+0x16c>)
 8006c00:	6013      	str	r3, [r2, #0]
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	4618      	mov	r0, r3
 8006c06:	3718      	adds	r7, #24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	200009cc 	.word	0x200009cc
 8006c10:	200009a8 	.word	0x200009a8
 8006c14:	2000095c 	.word	0x2000095c
 8006c18:	20000960 	.word	0x20000960
 8006c1c:	200009bc 	.word	0x200009bc
 8006c20:	200009c4 	.word	0x200009c4
 8006c24:	200009ac 	.word	0x200009ac
 8006c28:	200008a8 	.word	0x200008a8
 8006c2c:	200008a4 	.word	0x200008a4
 8006c30:	200009b8 	.word	0x200009b8
 8006c34:	200009b4 	.word	0x200009b4

08006c38 <vTaskSwitchContext>:
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b088      	sub	sp, #32
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	4b3c      	ldr	r3, [pc, #240]	; (8006d30 <vTaskSwitchContext+0xf8>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d003      	beq.n	8006c4e <vTaskSwitchContext+0x16>
 8006c46:	4b3b      	ldr	r3, [pc, #236]	; (8006d34 <vTaskSwitchContext+0xfc>)
 8006c48:	2201      	movs	r2, #1
 8006c4a:	601a      	str	r2, [r3, #0]
 8006c4c:	e06b      	b.n	8006d26 <vTaskSwitchContext+0xee>
 8006c4e:	4b39      	ldr	r3, [pc, #228]	; (8006d34 <vTaskSwitchContext+0xfc>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	4b38      	ldr	r3, [pc, #224]	; (8006d38 <vTaskSwitchContext+0x100>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5a:	61fb      	str	r3, [r7, #28]
 8006c5c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8006c60:	61bb      	str	r3, [r7, #24]
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	69ba      	ldr	r2, [r7, #24]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d111      	bne.n	8006c90 <vTaskSwitchContext+0x58>
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	3304      	adds	r3, #4
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	69ba      	ldr	r2, [r7, #24]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d10b      	bne.n	8006c90 <vTaskSwitchContext+0x58>
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	3308      	adds	r3, #8
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d105      	bne.n	8006c90 <vTaskSwitchContext+0x58>
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	330c      	adds	r3, #12
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	69ba      	ldr	r2, [r7, #24]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d008      	beq.n	8006ca2 <vTaskSwitchContext+0x6a>
 8006c90:	4b29      	ldr	r3, [pc, #164]	; (8006d38 <vTaskSwitchContext+0x100>)
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	4b28      	ldr	r3, [pc, #160]	; (8006d38 <vTaskSwitchContext+0x100>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3334      	adds	r3, #52	; 0x34
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	f7f9 fc30 	bl	8000502 <vApplicationStackOverflowHook>
 8006ca2:	4b26      	ldr	r3, [pc, #152]	; (8006d3c <vTaskSwitchContext+0x104>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	60fb      	str	r3, [r7, #12]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	fab3 f383 	clz	r3, r3
 8006cae:	72fb      	strb	r3, [r7, #11]
 8006cb0:	7afb      	ldrb	r3, [r7, #11]
 8006cb2:	f1c3 031f 	rsb	r3, r3, #31
 8006cb6:	617b      	str	r3, [r7, #20]
 8006cb8:	4921      	ldr	r1, [pc, #132]	; (8006d40 <vTaskSwitchContext+0x108>)
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	440b      	add	r3, r1
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d10a      	bne.n	8006ce2 <vTaskSwitchContext+0xaa>
 8006ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd0:	f383 8811 	msr	BASEPRI, r3
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	607b      	str	r3, [r7, #4]
 8006cde:	bf00      	nop
 8006ce0:	e7fe      	b.n	8006ce0 <vTaskSwitchContext+0xa8>
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4a14      	ldr	r2, [pc, #80]	; (8006d40 <vTaskSwitchContext+0x108>)
 8006cee:	4413      	add	r3, r2
 8006cf0:	613b      	str	r3, [r7, #16]
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	605a      	str	r2, [r3, #4]
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	3308      	adds	r3, #8
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d104      	bne.n	8006d12 <vTaskSwitchContext+0xda>
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	685a      	ldr	r2, [r3, #4]
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	605a      	str	r2, [r3, #4]
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	4a07      	ldr	r2, [pc, #28]	; (8006d38 <vTaskSwitchContext+0x100>)
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	4b06      	ldr	r3, [pc, #24]	; (8006d38 <vTaskSwitchContext+0x100>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3350      	adds	r3, #80	; 0x50
 8006d22:	4a08      	ldr	r2, [pc, #32]	; (8006d44 <vTaskSwitchContext+0x10c>)
 8006d24:	6013      	str	r3, [r2, #0]
 8006d26:	bf00      	nop
 8006d28:	3720      	adds	r7, #32
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	200009cc 	.word	0x200009cc
 8006d34:	200009b8 	.word	0x200009b8
 8006d38:	200008a4 	.word	0x200008a4
 8006d3c:	200009ac 	.word	0x200009ac
 8006d40:	200008a8 	.word	0x200008a8
 8006d44:	20000014 	.word	0x20000014

08006d48 <prvIdleTask>:
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	f000 f854 	bl	8006dfc <prvCheckTasksWaitingTermination>
 8006d54:	4b07      	ldr	r3, [pc, #28]	; (8006d74 <prvIdleTask+0x2c>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d907      	bls.n	8006d6c <prvIdleTask+0x24>
 8006d5c:	4b06      	ldr	r3, [pc, #24]	; (8006d78 <prvIdleTask+0x30>)
 8006d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f7f9 fbc2 	bl	80004f4 <vApplicationIdleHook>
 8006d70:	e7ee      	b.n	8006d50 <prvIdleTask+0x8>
 8006d72:	bf00      	nop
 8006d74:	200008a8 	.word	0x200008a8
 8006d78:	e000ed04 	.word	0xe000ed04

08006d7c <prvInitialiseTaskLists>:
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	2300      	movs	r3, #0
 8006d84:	607b      	str	r3, [r7, #4]
 8006d86:	e00c      	b.n	8006da2 <prvInitialiseTaskLists+0x26>
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4413      	add	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4a12      	ldr	r2, [pc, #72]	; (8006ddc <prvInitialiseTaskLists+0x60>)
 8006d94:	4413      	add	r3, r2
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7ff fb51 	bl	800643e <vListInitialise>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	607b      	str	r3, [r7, #4]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2b06      	cmp	r3, #6
 8006da6:	d9ef      	bls.n	8006d88 <prvInitialiseTaskLists+0xc>
 8006da8:	480d      	ldr	r0, [pc, #52]	; (8006de0 <prvInitialiseTaskLists+0x64>)
 8006daa:	f7ff fb48 	bl	800643e <vListInitialise>
 8006dae:	480d      	ldr	r0, [pc, #52]	; (8006de4 <prvInitialiseTaskLists+0x68>)
 8006db0:	f7ff fb45 	bl	800643e <vListInitialise>
 8006db4:	480c      	ldr	r0, [pc, #48]	; (8006de8 <prvInitialiseTaskLists+0x6c>)
 8006db6:	f7ff fb42 	bl	800643e <vListInitialise>
 8006dba:	480c      	ldr	r0, [pc, #48]	; (8006dec <prvInitialiseTaskLists+0x70>)
 8006dbc:	f7ff fb3f 	bl	800643e <vListInitialise>
 8006dc0:	480b      	ldr	r0, [pc, #44]	; (8006df0 <prvInitialiseTaskLists+0x74>)
 8006dc2:	f7ff fb3c 	bl	800643e <vListInitialise>
 8006dc6:	4b0b      	ldr	r3, [pc, #44]	; (8006df4 <prvInitialiseTaskLists+0x78>)
 8006dc8:	4a05      	ldr	r2, [pc, #20]	; (8006de0 <prvInitialiseTaskLists+0x64>)
 8006dca:	601a      	str	r2, [r3, #0]
 8006dcc:	4b0a      	ldr	r3, [pc, #40]	; (8006df8 <prvInitialiseTaskLists+0x7c>)
 8006dce:	4a05      	ldr	r2, [pc, #20]	; (8006de4 <prvInitialiseTaskLists+0x68>)
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	bf00      	nop
 8006dd4:	3708      	adds	r7, #8
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	200008a8 	.word	0x200008a8
 8006de0:	20000934 	.word	0x20000934
 8006de4:	20000948 	.word	0x20000948
 8006de8:	20000964 	.word	0x20000964
 8006dec:	20000978 	.word	0x20000978
 8006df0:	20000990 	.word	0x20000990
 8006df4:	2000095c 	.word	0x2000095c
 8006df8:	20000960 	.word	0x20000960

08006dfc <prvCheckTasksWaitingTermination>:
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	e019      	b.n	8006e38 <prvCheckTasksWaitingTermination+0x3c>
 8006e04:	f000 f9a6 	bl	8007154 <vPortEnterCritical>
 8006e08:	4b10      	ldr	r3, [pc, #64]	; (8006e4c <prvCheckTasksWaitingTermination+0x50>)
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	607b      	str	r3, [r7, #4]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	3304      	adds	r3, #4
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7ff fb63 	bl	80064e0 <uxListRemove>
 8006e1a:	4b0d      	ldr	r3, [pc, #52]	; (8006e50 <prvCheckTasksWaitingTermination+0x54>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	4a0b      	ldr	r2, [pc, #44]	; (8006e50 <prvCheckTasksWaitingTermination+0x54>)
 8006e22:	6013      	str	r3, [r2, #0]
 8006e24:	4b0b      	ldr	r3, [pc, #44]	; (8006e54 <prvCheckTasksWaitingTermination+0x58>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	4a0a      	ldr	r2, [pc, #40]	; (8006e54 <prvCheckTasksWaitingTermination+0x58>)
 8006e2c:	6013      	str	r3, [r2, #0]
 8006e2e:	f000 f9c1 	bl	80071b4 <vPortExitCritical>
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f810 	bl	8006e58 <prvDeleteTCB>
 8006e38:	4b06      	ldr	r3, [pc, #24]	; (8006e54 <prvCheckTasksWaitingTermination+0x58>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1e1      	bne.n	8006e04 <prvCheckTasksWaitingTermination+0x8>
 8006e40:	bf00      	nop
 8006e42:	bf00      	nop
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	20000978 	.word	0x20000978
 8006e50:	200009a4 	.word	0x200009a4
 8006e54:	2000098c 	.word	0x2000098c

08006e58 <prvDeleteTCB>:
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	3350      	adds	r3, #80	; 0x50
 8006e64:	4618      	mov	r0, r3
 8006e66:	f000 fc81 	bl	800776c <_reclaim_reent>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d108      	bne.n	8006e86 <prvDeleteTCB+0x2e>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 fb1d 	bl	80074b8 <vPortFree>
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fb1a 	bl	80074b8 <vPortFree>
 8006e84:	e018      	b.n	8006eb8 <prvDeleteTCB+0x60>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d103      	bne.n	8006e98 <prvDeleteTCB+0x40>
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fb11 	bl	80074b8 <vPortFree>
 8006e96:	e00f      	b.n	8006eb8 <prvDeleteTCB+0x60>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d00a      	beq.n	8006eb8 <prvDeleteTCB+0x60>
 8006ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea6:	f383 8811 	msr	BASEPRI, r3
 8006eaa:	f3bf 8f6f 	isb	sy
 8006eae:	f3bf 8f4f 	dsb	sy
 8006eb2:	60fb      	str	r3, [r7, #12]
 8006eb4:	bf00      	nop
 8006eb6:	e7fe      	b.n	8006eb6 <prvDeleteTCB+0x5e>
 8006eb8:	bf00      	nop
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <prvResetNextTaskUnblockTime>:
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	4b0c      	ldr	r3, [pc, #48]	; (8006ef8 <prvResetNextTaskUnblockTime+0x38>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d104      	bne.n	8006eda <prvResetNextTaskUnblockTime+0x1a>
 8006ed0:	4b0a      	ldr	r3, [pc, #40]	; (8006efc <prvResetNextTaskUnblockTime+0x3c>)
 8006ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed6:	601a      	str	r2, [r3, #0]
 8006ed8:	e008      	b.n	8006eec <prvResetNextTaskUnblockTime+0x2c>
 8006eda:	4b07      	ldr	r3, [pc, #28]	; (8006ef8 <prvResetNextTaskUnblockTime+0x38>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	607b      	str	r3, [r7, #4]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	4a04      	ldr	r2, [pc, #16]	; (8006efc <prvResetNextTaskUnblockTime+0x3c>)
 8006eea:	6013      	str	r3, [r2, #0]
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr
 8006ef8:	2000095c 	.word	0x2000095c
 8006efc:	200009c4 	.word	0x200009c4

08006f00 <pxPortInitialiseStack>:
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	3b04      	subs	r3, #4
 8006f10:	60fb      	str	r3, [r7, #12]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f18:	601a      	str	r2, [r3, #0]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	3b04      	subs	r3, #4
 8006f1e:	60fb      	str	r3, [r7, #12]
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f023 0201 	bic.w	r2, r3, #1
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	601a      	str	r2, [r3, #0]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	3b04      	subs	r3, #4
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	4a0c      	ldr	r2, [pc, #48]	; (8006f64 <pxPortInitialiseStack+0x64>)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	601a      	str	r2, [r3, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	3b14      	subs	r3, #20
 8006f3a:	60fb      	str	r3, [r7, #12]
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	601a      	str	r2, [r3, #0]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	3b04      	subs	r3, #4
 8006f46:	60fb      	str	r3, [r7, #12]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f06f 0202 	mvn.w	r2, #2
 8006f4e:	601a      	str	r2, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	3b20      	subs	r3, #32
 8006f54:	60fb      	str	r3, [r7, #12]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	08006f69 	.word	0x08006f69

08006f68 <prvTaskExitError>:
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	2300      	movs	r3, #0
 8006f70:	607b      	str	r3, [r7, #4]
 8006f72:	4b12      	ldr	r3, [pc, #72]	; (8006fbc <prvTaskExitError+0x54>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7a:	d00a      	beq.n	8006f92 <prvTaskExitError+0x2a>
 8006f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f80:	f383 8811 	msr	BASEPRI, r3
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	60fb      	str	r3, [r7, #12]
 8006f8e:	bf00      	nop
 8006f90:	e7fe      	b.n	8006f90 <prvTaskExitError+0x28>
 8006f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	60bb      	str	r3, [r7, #8]
 8006fa4:	bf00      	nop
 8006fa6:	bf00      	nop
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d0fc      	beq.n	8006fa8 <prvTaskExitError+0x40>
 8006fae:	bf00      	nop
 8006fb0:	bf00      	nop
 8006fb2:	3714      	adds	r7, #20
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	20000010 	.word	0x20000010

08006fc0 <SVC_Handler>:
 8006fc0:	4b07      	ldr	r3, [pc, #28]	; (8006fe0 <pxCurrentTCBConst2>)
 8006fc2:	6819      	ldr	r1, [r3, #0]
 8006fc4:	6808      	ldr	r0, [r1, #0]
 8006fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fca:	f380 8809 	msr	PSP, r0
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f04f 0000 	mov.w	r0, #0
 8006fd6:	f380 8811 	msr	BASEPRI, r0
 8006fda:	4770      	bx	lr
 8006fdc:	f3af 8000 	nop.w

08006fe0 <pxCurrentTCBConst2>:
 8006fe0:	200008a4 	.word	0x200008a4
 8006fe4:	bf00      	nop
 8006fe6:	bf00      	nop

08006fe8 <prvPortStartFirstTask>:
 8006fe8:	4808      	ldr	r0, [pc, #32]	; (800700c <prvPortStartFirstTask+0x24>)
 8006fea:	6800      	ldr	r0, [r0, #0]
 8006fec:	6800      	ldr	r0, [r0, #0]
 8006fee:	f380 8808 	msr	MSP, r0
 8006ff2:	f04f 0000 	mov.w	r0, #0
 8006ff6:	f380 8814 	msr	CONTROL, r0
 8006ffa:	b662      	cpsie	i
 8006ffc:	b661      	cpsie	f
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	df00      	svc	0
 8007008:	bf00      	nop
 800700a:	bf00      	nop
 800700c:	e000ed08 	.word	0xe000ed08

08007010 <xPortStartScheduler>:
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	4b46      	ldr	r3, [pc, #280]	; (8007130 <xPortStartScheduler+0x120>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a46      	ldr	r2, [pc, #280]	; (8007134 <xPortStartScheduler+0x124>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d10a      	bne.n	8007036 <xPortStartScheduler+0x26>
 8007020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007024:	f383 8811 	msr	BASEPRI, r3
 8007028:	f3bf 8f6f 	isb	sy
 800702c:	f3bf 8f4f 	dsb	sy
 8007030:	613b      	str	r3, [r7, #16]
 8007032:	bf00      	nop
 8007034:	e7fe      	b.n	8007034 <xPortStartScheduler+0x24>
 8007036:	4b3e      	ldr	r3, [pc, #248]	; (8007130 <xPortStartScheduler+0x120>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a3f      	ldr	r2, [pc, #252]	; (8007138 <xPortStartScheduler+0x128>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d10a      	bne.n	8007056 <xPortStartScheduler+0x46>
 8007040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007044:	f383 8811 	msr	BASEPRI, r3
 8007048:	f3bf 8f6f 	isb	sy
 800704c:	f3bf 8f4f 	dsb	sy
 8007050:	60fb      	str	r3, [r7, #12]
 8007052:	bf00      	nop
 8007054:	e7fe      	b.n	8007054 <xPortStartScheduler+0x44>
 8007056:	4b39      	ldr	r3, [pc, #228]	; (800713c <xPortStartScheduler+0x12c>)
 8007058:	617b      	str	r3, [r7, #20]
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	b2db      	uxtb	r3, r3
 8007060:	607b      	str	r3, [r7, #4]
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	22ff      	movs	r2, #255	; 0xff
 8007066:	701a      	strb	r2, [r3, #0]
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	b2db      	uxtb	r3, r3
 800706e:	70fb      	strb	r3, [r7, #3]
 8007070:	78fb      	ldrb	r3, [r7, #3]
 8007072:	b2db      	uxtb	r3, r3
 8007074:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007078:	b2da      	uxtb	r2, r3
 800707a:	4b31      	ldr	r3, [pc, #196]	; (8007140 <xPortStartScheduler+0x130>)
 800707c:	701a      	strb	r2, [r3, #0]
 800707e:	4b31      	ldr	r3, [pc, #196]	; (8007144 <xPortStartScheduler+0x134>)
 8007080:	2207      	movs	r2, #7
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	e009      	b.n	800709a <xPortStartScheduler+0x8a>
 8007086:	4b2f      	ldr	r3, [pc, #188]	; (8007144 <xPortStartScheduler+0x134>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3b01      	subs	r3, #1
 800708c:	4a2d      	ldr	r2, [pc, #180]	; (8007144 <xPortStartScheduler+0x134>)
 800708e:	6013      	str	r3, [r2, #0]
 8007090:	78fb      	ldrb	r3, [r7, #3]
 8007092:	b2db      	uxtb	r3, r3
 8007094:	005b      	lsls	r3, r3, #1
 8007096:	b2db      	uxtb	r3, r3
 8007098:	70fb      	strb	r3, [r7, #3]
 800709a:	78fb      	ldrb	r3, [r7, #3]
 800709c:	b2db      	uxtb	r3, r3
 800709e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070a2:	2b80      	cmp	r3, #128	; 0x80
 80070a4:	d0ef      	beq.n	8007086 <xPortStartScheduler+0x76>
 80070a6:	4b27      	ldr	r3, [pc, #156]	; (8007144 <xPortStartScheduler+0x134>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f1c3 0307 	rsb	r3, r3, #7
 80070ae:	2b04      	cmp	r3, #4
 80070b0:	d00a      	beq.n	80070c8 <xPortStartScheduler+0xb8>
 80070b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b6:	f383 8811 	msr	BASEPRI, r3
 80070ba:	f3bf 8f6f 	isb	sy
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	60bb      	str	r3, [r7, #8]
 80070c4:	bf00      	nop
 80070c6:	e7fe      	b.n	80070c6 <xPortStartScheduler+0xb6>
 80070c8:	4b1e      	ldr	r3, [pc, #120]	; (8007144 <xPortStartScheduler+0x134>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	021b      	lsls	r3, r3, #8
 80070ce:	4a1d      	ldr	r2, [pc, #116]	; (8007144 <xPortStartScheduler+0x134>)
 80070d0:	6013      	str	r3, [r2, #0]
 80070d2:	4b1c      	ldr	r3, [pc, #112]	; (8007144 <xPortStartScheduler+0x134>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070da:	4a1a      	ldr	r2, [pc, #104]	; (8007144 <xPortStartScheduler+0x134>)
 80070dc:	6013      	str	r3, [r2, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	701a      	strb	r2, [r3, #0]
 80070e6:	4b18      	ldr	r3, [pc, #96]	; (8007148 <xPortStartScheduler+0x138>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a17      	ldr	r2, [pc, #92]	; (8007148 <xPortStartScheduler+0x138>)
 80070ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070f0:	6013      	str	r3, [r2, #0]
 80070f2:	4b15      	ldr	r3, [pc, #84]	; (8007148 <xPortStartScheduler+0x138>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a14      	ldr	r2, [pc, #80]	; (8007148 <xPortStartScheduler+0x138>)
 80070f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	f000 f8dd 	bl	80072bc <vPortSetupTimerInterrupt>
 8007102:	4b12      	ldr	r3, [pc, #72]	; (800714c <xPortStartScheduler+0x13c>)
 8007104:	2200      	movs	r2, #0
 8007106:	601a      	str	r2, [r3, #0]
 8007108:	f000 f8fc 	bl	8007304 <vPortEnableVFP>
 800710c:	4b10      	ldr	r3, [pc, #64]	; (8007150 <xPortStartScheduler+0x140>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a0f      	ldr	r2, [pc, #60]	; (8007150 <xPortStartScheduler+0x140>)
 8007112:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007116:	6013      	str	r3, [r2, #0]
 8007118:	f7ff ff66 	bl	8006fe8 <prvPortStartFirstTask>
 800711c:	f7ff fd8c 	bl	8006c38 <vTaskSwitchContext>
 8007120:	f7ff ff22 	bl	8006f68 <prvTaskExitError>
 8007124:	2300      	movs	r3, #0
 8007126:	4618      	mov	r0, r3
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	e000ed00 	.word	0xe000ed00
 8007134:	410fc271 	.word	0x410fc271
 8007138:	410fc270 	.word	0x410fc270
 800713c:	e000e400 	.word	0xe000e400
 8007140:	200009d0 	.word	0x200009d0
 8007144:	200009d4 	.word	0x200009d4
 8007148:	e000ed20 	.word	0xe000ed20
 800714c:	20000010 	.word	0x20000010
 8007150:	e000ef34 	.word	0xe000ef34

08007154 <vPortEnterCritical>:
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715e:	f383 8811 	msr	BASEPRI, r3
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	607b      	str	r3, [r7, #4]
 800716c:	bf00      	nop
 800716e:	4b0f      	ldr	r3, [pc, #60]	; (80071ac <vPortEnterCritical+0x58>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	3301      	adds	r3, #1
 8007174:	4a0d      	ldr	r2, [pc, #52]	; (80071ac <vPortEnterCritical+0x58>)
 8007176:	6013      	str	r3, [r2, #0]
 8007178:	4b0c      	ldr	r3, [pc, #48]	; (80071ac <vPortEnterCritical+0x58>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d10f      	bne.n	80071a0 <vPortEnterCritical+0x4c>
 8007180:	4b0b      	ldr	r3, [pc, #44]	; (80071b0 <vPortEnterCritical+0x5c>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00a      	beq.n	80071a0 <vPortEnterCritical+0x4c>
 800718a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718e:	f383 8811 	msr	BASEPRI, r3
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	603b      	str	r3, [r7, #0]
 800719c:	bf00      	nop
 800719e:	e7fe      	b.n	800719e <vPortEnterCritical+0x4a>
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr
 80071ac:	20000010 	.word	0x20000010
 80071b0:	e000ed04 	.word	0xe000ed04

080071b4 <vPortExitCritical>:
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	4b12      	ldr	r3, [pc, #72]	; (8007204 <vPortExitCritical+0x50>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10a      	bne.n	80071d8 <vPortExitCritical+0x24>
 80071c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	607b      	str	r3, [r7, #4]
 80071d4:	bf00      	nop
 80071d6:	e7fe      	b.n	80071d6 <vPortExitCritical+0x22>
 80071d8:	4b0a      	ldr	r3, [pc, #40]	; (8007204 <vPortExitCritical+0x50>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	3b01      	subs	r3, #1
 80071de:	4a09      	ldr	r2, [pc, #36]	; (8007204 <vPortExitCritical+0x50>)
 80071e0:	6013      	str	r3, [r2, #0]
 80071e2:	4b08      	ldr	r3, [pc, #32]	; (8007204 <vPortExitCritical+0x50>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d105      	bne.n	80071f6 <vPortExitCritical+0x42>
 80071ea:	2300      	movs	r3, #0
 80071ec:	603b      	str	r3, [r7, #0]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	f383 8811 	msr	BASEPRI, r3
 80071f4:	bf00      	nop
 80071f6:	bf00      	nop
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	20000010 	.word	0x20000010
	...

08007210 <PendSV_Handler>:
 8007210:	f3ef 8009 	mrs	r0, PSP
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	4b15      	ldr	r3, [pc, #84]	; (8007270 <pxCurrentTCBConst>)
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	f01e 0f10 	tst.w	lr, #16
 8007220:	bf08      	it	eq
 8007222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800722a:	6010      	str	r0, [r2, #0]
 800722c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007230:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007234:	f380 8811 	msr	BASEPRI, r0
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f7ff fcfa 	bl	8006c38 <vTaskSwitchContext>
 8007244:	f04f 0000 	mov.w	r0, #0
 8007248:	f380 8811 	msr	BASEPRI, r0
 800724c:	bc09      	pop	{r0, r3}
 800724e:	6819      	ldr	r1, [r3, #0]
 8007250:	6808      	ldr	r0, [r1, #0]
 8007252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007256:	f01e 0f10 	tst.w	lr, #16
 800725a:	bf08      	it	eq
 800725c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007260:	f380 8809 	msr	PSP, r0
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	f3af 8000 	nop.w

08007270 <pxCurrentTCBConst>:
 8007270:	200008a4 	.word	0x200008a4
 8007274:	bf00      	nop
 8007276:	bf00      	nop

08007278 <SysTick_Handler>:
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	607b      	str	r3, [r7, #4]
 8007290:	bf00      	nop
 8007292:	f7ff fc19 	bl	8006ac8 <xTaskIncrementTick>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d003      	beq.n	80072a4 <SysTick_Handler+0x2c>
 800729c:	4b06      	ldr	r3, [pc, #24]	; (80072b8 <SysTick_Handler+0x40>)
 800729e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	2300      	movs	r3, #0
 80072a6:	603b      	str	r3, [r7, #0]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	bf00      	nop
 80072b0:	bf00      	nop
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	e000ed04 	.word	0xe000ed04

080072bc <vPortSetupTimerInterrupt>:
 80072bc:	b480      	push	{r7}
 80072be:	af00      	add	r7, sp, #0
 80072c0:	4b0b      	ldr	r3, [pc, #44]	; (80072f0 <vPortSetupTimerInterrupt+0x34>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	4b0b      	ldr	r3, [pc, #44]	; (80072f4 <vPortSetupTimerInterrupt+0x38>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	601a      	str	r2, [r3, #0]
 80072cc:	4b0a      	ldr	r3, [pc, #40]	; (80072f8 <vPortSetupTimerInterrupt+0x3c>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a0a      	ldr	r2, [pc, #40]	; (80072fc <vPortSetupTimerInterrupt+0x40>)
 80072d2:	fba2 2303 	umull	r2, r3, r2, r3
 80072d6:	099b      	lsrs	r3, r3, #6
 80072d8:	4a09      	ldr	r2, [pc, #36]	; (8007300 <vPortSetupTimerInterrupt+0x44>)
 80072da:	3b01      	subs	r3, #1
 80072dc:	6013      	str	r3, [r2, #0]
 80072de:	4b04      	ldr	r3, [pc, #16]	; (80072f0 <vPortSetupTimerInterrupt+0x34>)
 80072e0:	2207      	movs	r2, #7
 80072e2:	601a      	str	r2, [r3, #0]
 80072e4:	bf00      	nop
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	e000e010 	.word	0xe000e010
 80072f4:	e000e018 	.word	0xe000e018
 80072f8:	20000000 	.word	0x20000000
 80072fc:	10624dd3 	.word	0x10624dd3
 8007300:	e000e014 	.word	0xe000e014

08007304 <vPortEnableVFP>:
 8007304:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007314 <vPortEnableVFP+0x10>
 8007308:	6801      	ldr	r1, [r0, #0]
 800730a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800730e:	6001      	str	r1, [r0, #0]
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	e000ed88 	.word	0xe000ed88

08007318 <pvPortMalloc>:
 8007318:	b580      	push	{r7, lr}
 800731a:	b08a      	sub	sp, #40	; 0x28
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	2300      	movs	r3, #0
 8007322:	61fb      	str	r3, [r7, #28]
 8007324:	f7ff fb26 	bl	8006974 <vTaskSuspendAll>
 8007328:	4b5d      	ldr	r3, [pc, #372]	; (80074a0 <pvPortMalloc+0x188>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d101      	bne.n	8007334 <pvPortMalloc+0x1c>
 8007330:	f000 f924 	bl	800757c <prvHeapInit>
 8007334:	4b5b      	ldr	r3, [pc, #364]	; (80074a4 <pvPortMalloc+0x18c>)
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4013      	ands	r3, r2
 800733c:	2b00      	cmp	r3, #0
 800733e:	f040 8093 	bne.w	8007468 <pvPortMalloc+0x150>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d01d      	beq.n	8007384 <pvPortMalloc+0x6c>
 8007348:	2208      	movs	r2, #8
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4413      	add	r3, r2
 800734e:	607b      	str	r3, [r7, #4]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f003 0307 	and.w	r3, r3, #7
 8007356:	2b00      	cmp	r3, #0
 8007358:	d014      	beq.n	8007384 <pvPortMalloc+0x6c>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f023 0307 	bic.w	r3, r3, #7
 8007360:	3308      	adds	r3, #8
 8007362:	607b      	str	r3, [r7, #4]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f003 0307 	and.w	r3, r3, #7
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00a      	beq.n	8007384 <pvPortMalloc+0x6c>
 800736e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	617b      	str	r3, [r7, #20]
 8007380:	bf00      	nop
 8007382:	e7fe      	b.n	8007382 <pvPortMalloc+0x6a>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d06e      	beq.n	8007468 <pvPortMalloc+0x150>
 800738a:	4b47      	ldr	r3, [pc, #284]	; (80074a8 <pvPortMalloc+0x190>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	429a      	cmp	r2, r3
 8007392:	d869      	bhi.n	8007468 <pvPortMalloc+0x150>
 8007394:	4b45      	ldr	r3, [pc, #276]	; (80074ac <pvPortMalloc+0x194>)
 8007396:	623b      	str	r3, [r7, #32]
 8007398:	4b44      	ldr	r3, [pc, #272]	; (80074ac <pvPortMalloc+0x194>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	627b      	str	r3, [r7, #36]	; 0x24
 800739e:	e004      	b.n	80073aa <pvPortMalloc+0x92>
 80073a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a2:	623b      	str	r3, [r7, #32]
 80073a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	627b      	str	r3, [r7, #36]	; 0x24
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d903      	bls.n	80073bc <pvPortMalloc+0xa4>
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1f1      	bne.n	80073a0 <pvPortMalloc+0x88>
 80073bc:	4b38      	ldr	r3, [pc, #224]	; (80074a0 <pvPortMalloc+0x188>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d050      	beq.n	8007468 <pvPortMalloc+0x150>
 80073c6:	6a3b      	ldr	r3, [r7, #32]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2208      	movs	r2, #8
 80073cc:	4413      	add	r3, r2
 80073ce:	61fb      	str	r3, [r7, #28]
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	1ad2      	subs	r2, r2, r3
 80073e0:	2308      	movs	r3, #8
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d91f      	bls.n	8007428 <pvPortMalloc+0x110>
 80073e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4413      	add	r3, r2
 80073ee:	61bb      	str	r3, [r7, #24]
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	f003 0307 	and.w	r3, r3, #7
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00a      	beq.n	8007410 <pvPortMalloc+0xf8>
 80073fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	613b      	str	r3, [r7, #16]
 800740c:	bf00      	nop
 800740e:	e7fe      	b.n	800740e <pvPortMalloc+0xf6>
 8007410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	1ad2      	subs	r2, r2, r3
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	605a      	str	r2, [r3, #4]
 800741c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	605a      	str	r2, [r3, #4]
 8007422:	69b8      	ldr	r0, [r7, #24]
 8007424:	f000 f90c 	bl	8007640 <prvInsertBlockIntoFreeList>
 8007428:	4b1f      	ldr	r3, [pc, #124]	; (80074a8 <pvPortMalloc+0x190>)
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	4a1d      	ldr	r2, [pc, #116]	; (80074a8 <pvPortMalloc+0x190>)
 8007434:	6013      	str	r3, [r2, #0]
 8007436:	4b1c      	ldr	r3, [pc, #112]	; (80074a8 <pvPortMalloc+0x190>)
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	4b1d      	ldr	r3, [pc, #116]	; (80074b0 <pvPortMalloc+0x198>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	429a      	cmp	r2, r3
 8007440:	d203      	bcs.n	800744a <pvPortMalloc+0x132>
 8007442:	4b19      	ldr	r3, [pc, #100]	; (80074a8 <pvPortMalloc+0x190>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a1a      	ldr	r2, [pc, #104]	; (80074b0 <pvPortMalloc+0x198>)
 8007448:	6013      	str	r3, [r2, #0]
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	685a      	ldr	r2, [r3, #4]
 800744e:	4b15      	ldr	r3, [pc, #84]	; (80074a4 <pvPortMalloc+0x18c>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	431a      	orrs	r2, r3
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	605a      	str	r2, [r3, #4]
 8007458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745a:	2200      	movs	r2, #0
 800745c:	601a      	str	r2, [r3, #0]
 800745e:	4b15      	ldr	r3, [pc, #84]	; (80074b4 <pvPortMalloc+0x19c>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	3301      	adds	r3, #1
 8007464:	4a13      	ldr	r2, [pc, #76]	; (80074b4 <pvPortMalloc+0x19c>)
 8007466:	6013      	str	r3, [r2, #0]
 8007468:	f7ff fa92 	bl	8006990 <xTaskResumeAll>
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d101      	bne.n	8007476 <pvPortMalloc+0x15e>
 8007472:	f7f9 f851 	bl	8000518 <vApplicationMallocFailedHook>
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	f003 0307 	and.w	r3, r3, #7
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00a      	beq.n	8007496 <pvPortMalloc+0x17e>
 8007480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007484:	f383 8811 	msr	BASEPRI, r3
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	60fb      	str	r3, [r7, #12]
 8007492:	bf00      	nop
 8007494:	e7fe      	b.n	8007494 <pvPortMalloc+0x17c>
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	4618      	mov	r0, r3
 800749a:	3728      	adds	r7, #40	; 0x28
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	200089e0 	.word	0x200089e0
 80074a4:	200089f4 	.word	0x200089f4
 80074a8:	200089e4 	.word	0x200089e4
 80074ac:	200089d8 	.word	0x200089d8
 80074b0:	200089e8 	.word	0x200089e8
 80074b4:	200089ec 	.word	0x200089ec

080074b8 <vPortFree>:
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	617b      	str	r3, [r7, #20]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d04d      	beq.n	8007566 <vPortFree+0xae>
 80074ca:	2308      	movs	r3, #8
 80074cc:	425b      	negs	r3, r3
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	4413      	add	r3, r2
 80074d2:	617b      	str	r3, [r7, #20]
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	613b      	str	r3, [r7, #16]
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	4b24      	ldr	r3, [pc, #144]	; (8007570 <vPortFree+0xb8>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4013      	ands	r3, r2
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10a      	bne.n	80074fc <vPortFree+0x44>
 80074e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ea:	f383 8811 	msr	BASEPRI, r3
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	60fb      	str	r3, [r7, #12]
 80074f8:	bf00      	nop
 80074fa:	e7fe      	b.n	80074fa <vPortFree+0x42>
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00a      	beq.n	800751a <vPortFree+0x62>
 8007504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	60bb      	str	r3, [r7, #8]
 8007516:	bf00      	nop
 8007518:	e7fe      	b.n	8007518 <vPortFree+0x60>
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	685a      	ldr	r2, [r3, #4]
 800751e:	4b14      	ldr	r3, [pc, #80]	; (8007570 <vPortFree+0xb8>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4013      	ands	r3, r2
 8007524:	2b00      	cmp	r3, #0
 8007526:	d01e      	beq.n	8007566 <vPortFree+0xae>
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d11a      	bne.n	8007566 <vPortFree+0xae>
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	685a      	ldr	r2, [r3, #4]
 8007534:	4b0e      	ldr	r3, [pc, #56]	; (8007570 <vPortFree+0xb8>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	43db      	mvns	r3, r3
 800753a:	401a      	ands	r2, r3
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	605a      	str	r2, [r3, #4]
 8007540:	f7ff fa18 	bl	8006974 <vTaskSuspendAll>
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	685a      	ldr	r2, [r3, #4]
 8007548:	4b0a      	ldr	r3, [pc, #40]	; (8007574 <vPortFree+0xbc>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4413      	add	r3, r2
 800754e:	4a09      	ldr	r2, [pc, #36]	; (8007574 <vPortFree+0xbc>)
 8007550:	6013      	str	r3, [r2, #0]
 8007552:	6938      	ldr	r0, [r7, #16]
 8007554:	f000 f874 	bl	8007640 <prvInsertBlockIntoFreeList>
 8007558:	4b07      	ldr	r3, [pc, #28]	; (8007578 <vPortFree+0xc0>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3301      	adds	r3, #1
 800755e:	4a06      	ldr	r2, [pc, #24]	; (8007578 <vPortFree+0xc0>)
 8007560:	6013      	str	r3, [r2, #0]
 8007562:	f7ff fa15 	bl	8006990 <xTaskResumeAll>
 8007566:	bf00      	nop
 8007568:	3718      	adds	r7, #24
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	200089f4 	.word	0x200089f4
 8007574:	200089e4 	.word	0x200089e4
 8007578:	200089f0 	.word	0x200089f0

0800757c <prvHeapInit>:
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007586:	60bb      	str	r3, [r7, #8]
 8007588:	4b27      	ldr	r3, [pc, #156]	; (8007628 <prvHeapInit+0xac>)
 800758a:	60fb      	str	r3, [r7, #12]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f003 0307 	and.w	r3, r3, #7
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00c      	beq.n	80075b0 <prvHeapInit+0x34>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	3307      	adds	r3, #7
 800759a:	60fb      	str	r3, [r7, #12]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f023 0307 	bic.w	r3, r3, #7
 80075a2:	60fb      	str	r3, [r7, #12]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	4a1f      	ldr	r2, [pc, #124]	; (8007628 <prvHeapInit+0xac>)
 80075ac:	4413      	add	r3, r2
 80075ae:	60bb      	str	r3, [r7, #8]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	607b      	str	r3, [r7, #4]
 80075b4:	4a1d      	ldr	r2, [pc, #116]	; (800762c <prvHeapInit+0xb0>)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6013      	str	r3, [r2, #0]
 80075ba:	4b1c      	ldr	r3, [pc, #112]	; (800762c <prvHeapInit+0xb0>)
 80075bc:	2200      	movs	r2, #0
 80075be:	605a      	str	r2, [r3, #4]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	4413      	add	r3, r2
 80075c6:	60fb      	str	r3, [r7, #12]
 80075c8:	2208      	movs	r2, #8
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	1a9b      	subs	r3, r3, r2
 80075ce:	60fb      	str	r3, [r7, #12]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f023 0307 	bic.w	r3, r3, #7
 80075d6:	60fb      	str	r3, [r7, #12]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	4a15      	ldr	r2, [pc, #84]	; (8007630 <prvHeapInit+0xb4>)
 80075dc:	6013      	str	r3, [r2, #0]
 80075de:	4b14      	ldr	r3, [pc, #80]	; (8007630 <prvHeapInit+0xb4>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2200      	movs	r2, #0
 80075e4:	605a      	str	r2, [r3, #4]
 80075e6:	4b12      	ldr	r3, [pc, #72]	; (8007630 <prvHeapInit+0xb4>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2200      	movs	r2, #0
 80075ec:	601a      	str	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	603b      	str	r3, [r7, #0]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	1ad2      	subs	r2, r2, r3
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	605a      	str	r2, [r3, #4]
 80075fc:	4b0c      	ldr	r3, [pc, #48]	; (8007630 <prvHeapInit+0xb4>)
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	4a0a      	ldr	r2, [pc, #40]	; (8007634 <prvHeapInit+0xb8>)
 800760a:	6013      	str	r3, [r2, #0]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	4a09      	ldr	r2, [pc, #36]	; (8007638 <prvHeapInit+0xbc>)
 8007612:	6013      	str	r3, [r2, #0]
 8007614:	4b09      	ldr	r3, [pc, #36]	; (800763c <prvHeapInit+0xc0>)
 8007616:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800761a:	601a      	str	r2, [r3, #0]
 800761c:	bf00      	nop
 800761e:	3714      	adds	r7, #20
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	200009d8 	.word	0x200009d8
 800762c:	200089d8 	.word	0x200089d8
 8007630:	200089e0 	.word	0x200089e0
 8007634:	200089e8 	.word	0x200089e8
 8007638:	200089e4 	.word	0x200089e4
 800763c:	200089f4 	.word	0x200089f4

08007640 <prvInsertBlockIntoFreeList>:
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	4b28      	ldr	r3, [pc, #160]	; (80076ec <prvInsertBlockIntoFreeList+0xac>)
 800764a:	60fb      	str	r3, [r7, #12]
 800764c:	e002      	b.n	8007654 <prvInsertBlockIntoFreeList+0x14>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	60fb      	str	r3, [r7, #12]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	429a      	cmp	r2, r3
 800765c:	d8f7      	bhi.n	800764e <prvInsertBlockIntoFreeList+0xe>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	60bb      	str	r3, [r7, #8]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	4413      	add	r3, r2
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	429a      	cmp	r2, r3
 800766e:	d108      	bne.n	8007682 <prvInsertBlockIntoFreeList+0x42>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	685a      	ldr	r2, [r3, #4]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	441a      	add	r2, r3
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	605a      	str	r2, [r3, #4]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	607b      	str	r3, [r7, #4]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	60bb      	str	r3, [r7, #8]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	441a      	add	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	429a      	cmp	r2, r3
 8007694:	d118      	bne.n	80076c8 <prvInsertBlockIntoFreeList+0x88>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	4b15      	ldr	r3, [pc, #84]	; (80076f0 <prvInsertBlockIntoFreeList+0xb0>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d00d      	beq.n	80076be <prvInsertBlockIntoFreeList+0x7e>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685a      	ldr	r2, [r3, #4]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	441a      	add	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	605a      	str	r2, [r3, #4]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	601a      	str	r2, [r3, #0]
 80076bc:	e008      	b.n	80076d0 <prvInsertBlockIntoFreeList+0x90>
 80076be:	4b0c      	ldr	r3, [pc, #48]	; (80076f0 <prvInsertBlockIntoFreeList+0xb0>)
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	601a      	str	r2, [r3, #0]
 80076c6:	e003      	b.n	80076d0 <prvInsertBlockIntoFreeList+0x90>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	601a      	str	r2, [r3, #0]
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d002      	beq.n	80076de <prvInsertBlockIntoFreeList+0x9e>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	601a      	str	r2, [r3, #0]
 80076de:	bf00      	nop
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	200089d8 	.word	0x200089d8
 80076f0:	200089e0 	.word	0x200089e0

080076f4 <__libc_init_array>:
 80076f4:	b570      	push	{r4, r5, r6, lr}
 80076f6:	4d0d      	ldr	r5, [pc, #52]	; (800772c <__libc_init_array+0x38>)
 80076f8:	4c0d      	ldr	r4, [pc, #52]	; (8007730 <__libc_init_array+0x3c>)
 80076fa:	1b64      	subs	r4, r4, r5
 80076fc:	10a4      	asrs	r4, r4, #2
 80076fe:	2600      	movs	r6, #0
 8007700:	42a6      	cmp	r6, r4
 8007702:	d109      	bne.n	8007718 <__libc_init_array+0x24>
 8007704:	4d0b      	ldr	r5, [pc, #44]	; (8007734 <__libc_init_array+0x40>)
 8007706:	4c0c      	ldr	r4, [pc, #48]	; (8007738 <__libc_init_array+0x44>)
 8007708:	f000 f8e4 	bl	80078d4 <_init>
 800770c:	1b64      	subs	r4, r4, r5
 800770e:	10a4      	asrs	r4, r4, #2
 8007710:	2600      	movs	r6, #0
 8007712:	42a6      	cmp	r6, r4
 8007714:	d105      	bne.n	8007722 <__libc_init_array+0x2e>
 8007716:	bd70      	pop	{r4, r5, r6, pc}
 8007718:	f855 3b04 	ldr.w	r3, [r5], #4
 800771c:	4798      	blx	r3
 800771e:	3601      	adds	r6, #1
 8007720:	e7ee      	b.n	8007700 <__libc_init_array+0xc>
 8007722:	f855 3b04 	ldr.w	r3, [r5], #4
 8007726:	4798      	blx	r3
 8007728:	3601      	adds	r6, #1
 800772a:	e7f2      	b.n	8007712 <__libc_init_array+0x1e>
 800772c:	08007a50 	.word	0x08007a50
 8007730:	08007a50 	.word	0x08007a50
 8007734:	08007a50 	.word	0x08007a50
 8007738:	08007a54 	.word	0x08007a54

0800773c <__retarget_lock_acquire_recursive>:
 800773c:	4770      	bx	lr

0800773e <__retarget_lock_release_recursive>:
 800773e:	4770      	bx	lr

08007740 <memset>:
 8007740:	4402      	add	r2, r0
 8007742:	4603      	mov	r3, r0
 8007744:	4293      	cmp	r3, r2
 8007746:	d100      	bne.n	800774a <memset+0xa>
 8007748:	4770      	bx	lr
 800774a:	f803 1b01 	strb.w	r1, [r3], #1
 800774e:	e7f9      	b.n	8007744 <memset+0x4>

08007750 <cleanup_glue>:
 8007750:	b538      	push	{r3, r4, r5, lr}
 8007752:	460c      	mov	r4, r1
 8007754:	6809      	ldr	r1, [r1, #0]
 8007756:	4605      	mov	r5, r0
 8007758:	b109      	cbz	r1, 800775e <cleanup_glue+0xe>
 800775a:	f7ff fff9 	bl	8007750 <cleanup_glue>
 800775e:	4621      	mov	r1, r4
 8007760:	4628      	mov	r0, r5
 8007762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007766:	f000 b869 	b.w	800783c <_free_r>
	...

0800776c <_reclaim_reent>:
 800776c:	4b2c      	ldr	r3, [pc, #176]	; (8007820 <_reclaim_reent+0xb4>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4283      	cmp	r3, r0
 8007772:	b570      	push	{r4, r5, r6, lr}
 8007774:	4604      	mov	r4, r0
 8007776:	d051      	beq.n	800781c <_reclaim_reent+0xb0>
 8007778:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800777a:	b143      	cbz	r3, 800778e <_reclaim_reent+0x22>
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d14a      	bne.n	8007818 <_reclaim_reent+0xac>
 8007782:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007784:	6819      	ldr	r1, [r3, #0]
 8007786:	b111      	cbz	r1, 800778e <_reclaim_reent+0x22>
 8007788:	4620      	mov	r0, r4
 800778a:	f000 f857 	bl	800783c <_free_r>
 800778e:	6961      	ldr	r1, [r4, #20]
 8007790:	b111      	cbz	r1, 8007798 <_reclaim_reent+0x2c>
 8007792:	4620      	mov	r0, r4
 8007794:	f000 f852 	bl	800783c <_free_r>
 8007798:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800779a:	b111      	cbz	r1, 80077a2 <_reclaim_reent+0x36>
 800779c:	4620      	mov	r0, r4
 800779e:	f000 f84d 	bl	800783c <_free_r>
 80077a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80077a4:	b111      	cbz	r1, 80077ac <_reclaim_reent+0x40>
 80077a6:	4620      	mov	r0, r4
 80077a8:	f000 f848 	bl	800783c <_free_r>
 80077ac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80077ae:	b111      	cbz	r1, 80077b6 <_reclaim_reent+0x4a>
 80077b0:	4620      	mov	r0, r4
 80077b2:	f000 f843 	bl	800783c <_free_r>
 80077b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80077b8:	b111      	cbz	r1, 80077c0 <_reclaim_reent+0x54>
 80077ba:	4620      	mov	r0, r4
 80077bc:	f000 f83e 	bl	800783c <_free_r>
 80077c0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80077c2:	b111      	cbz	r1, 80077ca <_reclaim_reent+0x5e>
 80077c4:	4620      	mov	r0, r4
 80077c6:	f000 f839 	bl	800783c <_free_r>
 80077ca:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80077cc:	b111      	cbz	r1, 80077d4 <_reclaim_reent+0x68>
 80077ce:	4620      	mov	r0, r4
 80077d0:	f000 f834 	bl	800783c <_free_r>
 80077d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077d6:	b111      	cbz	r1, 80077de <_reclaim_reent+0x72>
 80077d8:	4620      	mov	r0, r4
 80077da:	f000 f82f 	bl	800783c <_free_r>
 80077de:	69a3      	ldr	r3, [r4, #24]
 80077e0:	b1e3      	cbz	r3, 800781c <_reclaim_reent+0xb0>
 80077e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80077e4:	4620      	mov	r0, r4
 80077e6:	4798      	blx	r3
 80077e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80077ea:	b1b9      	cbz	r1, 800781c <_reclaim_reent+0xb0>
 80077ec:	4620      	mov	r0, r4
 80077ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80077f2:	f7ff bfad 	b.w	8007750 <cleanup_glue>
 80077f6:	5949      	ldr	r1, [r1, r5]
 80077f8:	b941      	cbnz	r1, 800780c <_reclaim_reent+0xa0>
 80077fa:	3504      	adds	r5, #4
 80077fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077fe:	2d80      	cmp	r5, #128	; 0x80
 8007800:	68d9      	ldr	r1, [r3, #12]
 8007802:	d1f8      	bne.n	80077f6 <_reclaim_reent+0x8a>
 8007804:	4620      	mov	r0, r4
 8007806:	f000 f819 	bl	800783c <_free_r>
 800780a:	e7ba      	b.n	8007782 <_reclaim_reent+0x16>
 800780c:	680e      	ldr	r6, [r1, #0]
 800780e:	4620      	mov	r0, r4
 8007810:	f000 f814 	bl	800783c <_free_r>
 8007814:	4631      	mov	r1, r6
 8007816:	e7ef      	b.n	80077f8 <_reclaim_reent+0x8c>
 8007818:	2500      	movs	r5, #0
 800781a:	e7ef      	b.n	80077fc <_reclaim_reent+0x90>
 800781c:	bd70      	pop	{r4, r5, r6, pc}
 800781e:	bf00      	nop
 8007820:	20000014 	.word	0x20000014

08007824 <__malloc_lock>:
 8007824:	4801      	ldr	r0, [pc, #4]	; (800782c <__malloc_lock+0x8>)
 8007826:	f7ff bf89 	b.w	800773c <__retarget_lock_acquire_recursive>
 800782a:	bf00      	nop
 800782c:	200089f8 	.word	0x200089f8

08007830 <__malloc_unlock>:
 8007830:	4801      	ldr	r0, [pc, #4]	; (8007838 <__malloc_unlock+0x8>)
 8007832:	f7ff bf84 	b.w	800773e <__retarget_lock_release_recursive>
 8007836:	bf00      	nop
 8007838:	200089f8 	.word	0x200089f8

0800783c <_free_r>:
 800783c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800783e:	2900      	cmp	r1, #0
 8007840:	d044      	beq.n	80078cc <_free_r+0x90>
 8007842:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007846:	9001      	str	r0, [sp, #4]
 8007848:	2b00      	cmp	r3, #0
 800784a:	f1a1 0404 	sub.w	r4, r1, #4
 800784e:	bfb8      	it	lt
 8007850:	18e4      	addlt	r4, r4, r3
 8007852:	f7ff ffe7 	bl	8007824 <__malloc_lock>
 8007856:	4a1e      	ldr	r2, [pc, #120]	; (80078d0 <_free_r+0x94>)
 8007858:	9801      	ldr	r0, [sp, #4]
 800785a:	6813      	ldr	r3, [r2, #0]
 800785c:	b933      	cbnz	r3, 800786c <_free_r+0x30>
 800785e:	6063      	str	r3, [r4, #4]
 8007860:	6014      	str	r4, [r2, #0]
 8007862:	b003      	add	sp, #12
 8007864:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007868:	f7ff bfe2 	b.w	8007830 <__malloc_unlock>
 800786c:	42a3      	cmp	r3, r4
 800786e:	d908      	bls.n	8007882 <_free_r+0x46>
 8007870:	6825      	ldr	r5, [r4, #0]
 8007872:	1961      	adds	r1, r4, r5
 8007874:	428b      	cmp	r3, r1
 8007876:	bf01      	itttt	eq
 8007878:	6819      	ldreq	r1, [r3, #0]
 800787a:	685b      	ldreq	r3, [r3, #4]
 800787c:	1949      	addeq	r1, r1, r5
 800787e:	6021      	streq	r1, [r4, #0]
 8007880:	e7ed      	b.n	800785e <_free_r+0x22>
 8007882:	461a      	mov	r2, r3
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	b10b      	cbz	r3, 800788c <_free_r+0x50>
 8007888:	42a3      	cmp	r3, r4
 800788a:	d9fa      	bls.n	8007882 <_free_r+0x46>
 800788c:	6811      	ldr	r1, [r2, #0]
 800788e:	1855      	adds	r5, r2, r1
 8007890:	42a5      	cmp	r5, r4
 8007892:	d10b      	bne.n	80078ac <_free_r+0x70>
 8007894:	6824      	ldr	r4, [r4, #0]
 8007896:	4421      	add	r1, r4
 8007898:	1854      	adds	r4, r2, r1
 800789a:	42a3      	cmp	r3, r4
 800789c:	6011      	str	r1, [r2, #0]
 800789e:	d1e0      	bne.n	8007862 <_free_r+0x26>
 80078a0:	681c      	ldr	r4, [r3, #0]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	6053      	str	r3, [r2, #4]
 80078a6:	4421      	add	r1, r4
 80078a8:	6011      	str	r1, [r2, #0]
 80078aa:	e7da      	b.n	8007862 <_free_r+0x26>
 80078ac:	d902      	bls.n	80078b4 <_free_r+0x78>
 80078ae:	230c      	movs	r3, #12
 80078b0:	6003      	str	r3, [r0, #0]
 80078b2:	e7d6      	b.n	8007862 <_free_r+0x26>
 80078b4:	6825      	ldr	r5, [r4, #0]
 80078b6:	1961      	adds	r1, r4, r5
 80078b8:	428b      	cmp	r3, r1
 80078ba:	bf04      	itt	eq
 80078bc:	6819      	ldreq	r1, [r3, #0]
 80078be:	685b      	ldreq	r3, [r3, #4]
 80078c0:	6063      	str	r3, [r4, #4]
 80078c2:	bf04      	itt	eq
 80078c4:	1949      	addeq	r1, r1, r5
 80078c6:	6021      	streq	r1, [r4, #0]
 80078c8:	6054      	str	r4, [r2, #4]
 80078ca:	e7ca      	b.n	8007862 <_free_r+0x26>
 80078cc:	b003      	add	sp, #12
 80078ce:	bd30      	pop	{r4, r5, pc}
 80078d0:	200089fc 	.word	0x200089fc

080078d4 <_init>:
 80078d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d6:	bf00      	nop
 80078d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078da:	bc08      	pop	{r3}
 80078dc:	469e      	mov	lr, r3
 80078de:	4770      	bx	lr

080078e0 <_fini>:
 80078e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e2:	bf00      	nop
 80078e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078e6:	bc08      	pop	{r3}
 80078e8:	469e      	mov	lr, r3
 80078ea:	4770      	bx	lr
