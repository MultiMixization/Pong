
ZyrPONG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001029c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002004  08010450  08010450  00020450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012454  08012454  0003027c  2**0
                  CONTENTS
  4 .ARM          00000008  08012454  08012454  00022454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801245c  0801245c  0003027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801245c  0801245c  0002245c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012460  08012460  00022460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000027c  20000000  08012464  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003027c  2**0
                  CONTENTS
 10 .bss          00008a5c  2000027c  2000027c  0003027c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008cd8  20008cd8  0003027c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003027c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028040  00000000  00000000  000302ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000051d6  00000000  00000000  000582ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002130  00000000  00000000  0005d4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f10  00000000  00000000  0005f5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002aae6  00000000  00000000  00061508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025e7a  00000000  00000000  0008bfee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6528  00000000  00000000  000b1e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a8390  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a100  00000000  00000000  001a83e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000027c 	.word	0x2000027c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010434 	.word	0x08010434

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000280 	.word	0x20000280
 80001ec:	08010434 	.word	0x08010434

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4a07      	ldr	r2, [pc, #28]	; (8001078 <vApplicationGetIdleTaskMemory+0x2c>)
 800105c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	4a06      	ldr	r2, [pc, #24]	; (800107c <vApplicationGetIdleTaskMemory+0x30>)
 8001062:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2280      	movs	r2, #128	; 0x80
 8001068:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800106a:	bf00      	nop
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000298 	.word	0x20000298
 800107c:	20000350 	.word	0x20000350

08001080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001080:	b5b0      	push	{r4, r5, r7, lr}
 8001082:	b096      	sub	sp, #88	; 0x58
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001086:	f003 ff95 	bl	8004fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108a:	f000 f873 	bl	8001174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108e:	f000 fae7 	bl	8001660 <MX_GPIO_Init>
  MX_CRC_Init();
 8001092:	f000 f8df 	bl	8001254 <MX_CRC_Init>
  MX_DMA2D_Init();
 8001096:	f000 f8f1 	bl	800127c <MX_DMA2D_Init>
  MX_FMC_Init();
 800109a:	f000 fa91 	bl	80015c0 <MX_FMC_Init>
  MX_LTDC_Init();
 800109e:	f000 f95f 	bl	8001360 <MX_LTDC_Init>
  MX_SPI5_Init();
 80010a2:	f000 f9dd 	bl	8001460 <MX_SPI5_Init>
  MX_TIM1_Init();
 80010a6:	f000 fa11 	bl	80014cc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80010aa:	f000 fa5f 	bl	800156c <MX_USART1_UART_Init>
  MX_I2C3_Init();
 80010ae:	f000 f917 	bl	80012e0 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  BSP_GYRO_Init();
 80010b2:	f002 fe8f 	bl	8003dd4 <BSP_GYRO_Init>

  BSP_LCD_Init();
 80010b6:	f002 ff0b 	bl	8003ed0 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);	//Warstwa spodnia
 80010ba:	4927      	ldr	r1, [pc, #156]	; (8001158 <main+0xd8>)
 80010bc:	2000      	movs	r0, #0
 80010be:	f002 ff89 	bl	8003fd4 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 80010c2:	2000      	movs	r0, #0
 80010c4:	f002 ffea 	bl	800409c <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 80010c8:	f003 fbbe 	bl	8004848 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80010cc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80010d0:	f003 f856 	bl	8004180 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	f002 fff0 	bl	80040bc <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80010dc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80010e0:	f003 f804 	bl	80040ec <BSP_LCD_SetBackColor>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80010e4:	4b1d      	ldr	r3, [pc, #116]	; (800115c <main+0xdc>)
 80010e6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80010ea:	461d      	mov	r5, r3
 80010ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80010f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f009 f9f3 	bl	800a4ea <osThreadCreate>
 8001104:	4603      	mov	r3, r0
 8001106:	4a16      	ldr	r2, [pc, #88]	; (8001160 <main+0xe0>)
 8001108:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(DataGathering, StartDataGathering, osPriorityHigh, 0, 2048);
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <main+0xe4>)
 800110c:	f107 0420 	add.w	r4, r7, #32
 8001110:	461d      	mov	r5, r3
 8001112:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001114:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001116:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800111a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SecondaryTaskHandle = osThreadCreate(osThread(DataGathering), NULL);
 800111e:	f107 0320 	add.w	r3, r7, #32
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f009 f9e0 	bl	800a4ea <osThreadCreate>
 800112a:	4603      	mov	r3, r0
 800112c:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <main+0xe8>)
 800112e:	6013      	str	r3, [r2, #0]

  osThreadDef(EnemySteer, StartEnemySteer, osPriorityNormal, 0, 2048);
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <main+0xec>)
 8001132:	1d3c      	adds	r4, r7, #4
 8001134:	461d      	mov	r5, r3
 8001136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001138:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800113a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800113e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TertraryTaskHandle = osThreadCreate(osThread(EnemySteer), NULL);
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f009 f9cf 	bl	800a4ea <osThreadCreate>
 800114c:	4603      	mov	r3, r0
 800114e:	4a08      	ldr	r2, [pc, #32]	; (8001170 <main+0xf0>)
 8001150:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001152:	f009 f9c3 	bl	800a4dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001156:	e7fe      	b.n	8001156 <main+0xd6>
 8001158:	d0130000 	.word	0xd0130000
 800115c:	08010478 	.word	0x08010478
 8001160:	200007ac 	.word	0x200007ac
 8001164:	08010494 	.word	0x08010494
 8001168:	200008c0 	.word	0x200008c0
 800116c:	080104b0 	.word	0x080104b0
 8001170:	200008c4 	.word	0x200008c4

08001174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b094      	sub	sp, #80	; 0x50
 8001178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117a:	f107 0320 	add.w	r3, r7, #32
 800117e:	2230      	movs	r2, #48	; 0x30
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f00a fd77 	bl	800bc76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	4b2b      	ldr	r3, [pc, #172]	; (800124c <SystemClock_Config+0xd8>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	4a2a      	ldr	r2, [pc, #168]	; (800124c <SystemClock_Config+0xd8>)
 80011a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a6:	6413      	str	r3, [r2, #64]	; 0x40
 80011a8:	4b28      	ldr	r3, [pc, #160]	; (800124c <SystemClock_Config+0xd8>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	4b25      	ldr	r3, [pc, #148]	; (8001250 <SystemClock_Config+0xdc>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a24      	ldr	r2, [pc, #144]	; (8001250 <SystemClock_Config+0xdc>)
 80011be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	4b22      	ldr	r3, [pc, #136]	; (8001250 <SystemClock_Config+0xdc>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d0:	2302      	movs	r3, #2
 80011d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d4:	2301      	movs	r3, #1
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011d8:	2310      	movs	r3, #16
 80011da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011dc:	2302      	movs	r3, #2
 80011de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011e0:	2300      	movs	r3, #0
 80011e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011e4:	2308      	movs	r3, #8
 80011e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80011e8:	23b4      	movs	r3, #180	; 0xb4
 80011ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011ec:	2302      	movs	r3, #2
 80011ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80011f0:	2303      	movs	r3, #3
 80011f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f4:	f107 0320 	add.w	r3, r7, #32
 80011f8:	4618      	mov	r0, r3
 80011fa:	f005 fead 	bl	8006f58 <HAL_RCC_OscConfig>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001204:	f001 f958 	bl	80024b8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001208:	f005 fe56 	bl	8006eb8 <HAL_PWREx_EnableOverDrive>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001212:	f001 f951 	bl	80024b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001216:	230f      	movs	r3, #15
 8001218:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800121a:	2302      	movs	r3, #2
 800121c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001222:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001226:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800122e:	f107 030c 	add.w	r3, r7, #12
 8001232:	2105      	movs	r1, #5
 8001234:	4618      	mov	r0, r3
 8001236:	f006 f907 	bl	8007448 <HAL_RCC_ClockConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001240:	f001 f93a 	bl	80024b8 <Error_Handler>
  }
}
 8001244:	bf00      	nop
 8001246:	3750      	adds	r7, #80	; 0x50
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40023800 	.word	0x40023800
 8001250:	40007000 	.word	0x40007000

08001254 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_CRC_Init+0x20>)
 800125a:	4a07      	ldr	r2, [pc, #28]	; (8001278 <MX_CRC_Init+0x24>)
 800125c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_CRC_Init+0x20>)
 8001260:	f003 fff0 	bl	8005244 <HAL_CRC_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800126a:	f001 f925 	bl	80024b8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000550 	.word	0x20000550
 8001278:	40023000 	.word	0x40023000

0800127c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001280:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <MX_DMA2D_Init+0x5c>)
 8001282:	4a16      	ldr	r2, [pc, #88]	; (80012dc <MX_DMA2D_Init+0x60>)
 8001284:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001286:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <MX_DMA2D_Init+0x5c>)
 8001288:	2200      	movs	r2, #0
 800128a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <MX_DMA2D_Init+0x5c>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <MX_DMA2D_Init+0x5c>)
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <MX_DMA2D_Init+0x5c>)
 800129a:	2200      	movs	r2, #0
 800129c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <MX_DMA2D_Init+0x5c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <MX_DMA2D_Init+0x5c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <MX_DMA2D_Init+0x5c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80012b0:	4809      	ldr	r0, [pc, #36]	; (80012d8 <MX_DMA2D_Init+0x5c>)
 80012b2:	f004 fa33 	bl	800571c <HAL_DMA2D_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80012bc:	f001 f8fc 	bl	80024b8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80012c0:	2101      	movs	r1, #1
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <MX_DMA2D_Init+0x5c>)
 80012c4:	f004 fc98 	bl	8005bf8 <HAL_DMA2D_ConfigLayer>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80012ce:	f001 f8f3 	bl	80024b8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000558 	.word	0x20000558
 80012dc:	4002b000 	.word	0x4002b000

080012e0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <MX_I2C3_Init+0x74>)
 80012e6:	4a1c      	ldr	r2, [pc, #112]	; (8001358 <MX_I2C3_Init+0x78>)
 80012e8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <MX_I2C3_Init+0x74>)
 80012ec:	4a1b      	ldr	r2, [pc, #108]	; (800135c <MX_I2C3_Init+0x7c>)
 80012ee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <MX_I2C3_Init+0x74>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <MX_I2C3_Init+0x74>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012fc:	4b15      	ldr	r3, [pc, #84]	; (8001354 <MX_I2C3_Init+0x74>)
 80012fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001302:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <MX_I2C3_Init+0x74>)
 8001306:	2200      	movs	r2, #0
 8001308:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <MX_I2C3_Init+0x74>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001310:	4b10      	ldr	r3, [pc, #64]	; (8001354 <MX_I2C3_Init+0x74>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <MX_I2C3_Init+0x74>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800131c:	480d      	ldr	r0, [pc, #52]	; (8001354 <MX_I2C3_Init+0x74>)
 800131e:	f005 f883 	bl	8006428 <HAL_I2C_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001328:	f001 f8c6 	bl	80024b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800132c:	2100      	movs	r1, #0
 800132e:	4809      	ldr	r0, [pc, #36]	; (8001354 <MX_I2C3_Init+0x74>)
 8001330:	f005 f9be 	bl	80066b0 <HAL_I2CEx_ConfigAnalogFilter>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800133a:	f001 f8bd 	bl	80024b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800133e:	2100      	movs	r1, #0
 8001340:	4804      	ldr	r0, [pc, #16]	; (8001354 <MX_I2C3_Init+0x74>)
 8001342:	f005 f9f1 	bl	8006728 <HAL_I2CEx_ConfigDigitalFilter>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800134c:	f001 f8b4 	bl	80024b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000598 	.word	0x20000598
 8001358:	40005c00 	.word	0x40005c00
 800135c:	000186a0 	.word	0x000186a0

08001360 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08e      	sub	sp, #56	; 0x38
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	2234      	movs	r2, #52	; 0x34
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f00a fc82 	bl	800bc76 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001372:	4b39      	ldr	r3, [pc, #228]	; (8001458 <MX_LTDC_Init+0xf8>)
 8001374:	4a39      	ldr	r2, [pc, #228]	; (800145c <MX_LTDC_Init+0xfc>)
 8001376:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001378:	4b37      	ldr	r3, [pc, #220]	; (8001458 <MX_LTDC_Init+0xf8>)
 800137a:	2200      	movs	r2, #0
 800137c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800137e:	4b36      	ldr	r3, [pc, #216]	; (8001458 <MX_LTDC_Init+0xf8>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001384:	4b34      	ldr	r3, [pc, #208]	; (8001458 <MX_LTDC_Init+0xf8>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800138a:	4b33      	ldr	r3, [pc, #204]	; (8001458 <MX_LTDC_Init+0xf8>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8001390:	4b31      	ldr	r3, [pc, #196]	; (8001458 <MX_LTDC_Init+0xf8>)
 8001392:	2209      	movs	r2, #9
 8001394:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001396:	4b30      	ldr	r3, [pc, #192]	; (8001458 <MX_LTDC_Init+0xf8>)
 8001398:	2201      	movs	r2, #1
 800139a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 800139c:	4b2e      	ldr	r3, [pc, #184]	; (8001458 <MX_LTDC_Init+0xf8>)
 800139e:	221d      	movs	r2, #29
 80013a0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80013a2:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <MX_LTDC_Init+0xf8>)
 80013a4:	2203      	movs	r2, #3
 80013a6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80013a8:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <MX_LTDC_Init+0xf8>)
 80013aa:	f240 120d 	movw	r2, #269	; 0x10d
 80013ae:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80013b0:	4b29      	ldr	r3, [pc, #164]	; (8001458 <MX_LTDC_Init+0xf8>)
 80013b2:	f240 1243 	movw	r2, #323	; 0x143
 80013b6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80013b8:	4b27      	ldr	r3, [pc, #156]	; (8001458 <MX_LTDC_Init+0xf8>)
 80013ba:	f240 1217 	movw	r2, #279	; 0x117
 80013be:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80013c0:	4b25      	ldr	r3, [pc, #148]	; (8001458 <MX_LTDC_Init+0xf8>)
 80013c2:	f240 1247 	movw	r2, #327	; 0x147
 80013c6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80013c8:	4b23      	ldr	r3, [pc, #140]	; (8001458 <MX_LTDC_Init+0xf8>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80013d0:	4b21      	ldr	r3, [pc, #132]	; (8001458 <MX_LTDC_Init+0xf8>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80013d8:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <MX_LTDC_Init+0xf8>)
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80013e0:	481d      	ldr	r0, [pc, #116]	; (8001458 <MX_LTDC_Init+0xf8>)
 80013e2:	f005 f9e1 	bl	80067a8 <HAL_LTDC_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80013ec:	f001 f864 	bl	80024b8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80013f4:	23f0      	movs	r3, #240	; 0xf0
 80013f6:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80013fc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001400:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001402:	2302      	movs	r3, #2
 8001404:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001406:	23ff      	movs	r3, #255	; 0xff
 8001408:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800140e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001412:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001414:	2307      	movs	r3, #7
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001418:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800141e:	23f0      	movs	r3, #240	; 0xf0
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8001422:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001426:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	2200      	movs	r2, #0
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	; (8001458 <MX_LTDC_Init+0xf8>)
 8001442:	f005 fb39 	bl	8006ab8 <HAL_LTDC_ConfigLayer>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 800144c:	f001 f834 	bl	80024b8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	3738      	adds	r7, #56	; 0x38
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	200005ec 	.word	0x200005ec
 800145c:	40016800 	.word	0x40016800

08001460 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001464:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <MX_SPI5_Init+0x64>)
 8001466:	4a18      	ldr	r2, [pc, #96]	; (80014c8 <MX_SPI5_Init+0x68>)
 8001468:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800146a:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <MX_SPI5_Init+0x64>)
 800146c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001470:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001472:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <MX_SPI5_Init+0x64>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <MX_SPI5_Init+0x64>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_SPI5_Init+0x64>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_SPI5_Init+0x64>)
 8001486:	2200      	movs	r2, #0
 8001488:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <MX_SPI5_Init+0x64>)
 800148c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001490:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_SPI5_Init+0x64>)
 8001494:	2200      	movs	r2, #0
 8001496:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <MX_SPI5_Init+0x64>)
 800149a:	2200      	movs	r2, #0
 800149c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_SPI5_Init+0x64>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014a4:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <MX_SPI5_Init+0x64>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_SPI5_Init+0x64>)
 80014ac:	220a      	movs	r2, #10
 80014ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80014b0:	4804      	ldr	r0, [pc, #16]	; (80014c4 <MX_SPI5_Init+0x64>)
 80014b2:	f006 fc6c 	bl	8007d8e <HAL_SPI_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80014bc:	f000 fffc 	bl	80024b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000694 	.word	0x20000694
 80014c8:	40015000 	.word	0x40015000

080014cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d2:	f107 0308 	add.w	r3, r7, #8
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e0:	463b      	mov	r3, r7
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014e8:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <MX_TIM1_Init+0x98>)
 80014ea:	4a1f      	ldr	r2, [pc, #124]	; (8001568 <MX_TIM1_Init+0x9c>)
 80014ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014ee:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <MX_TIM1_Init+0x98>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f4:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <MX_TIM1_Init+0x98>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014fa:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <MX_TIM1_Init+0x98>)
 80014fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001500:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001502:	4b18      	ldr	r3, [pc, #96]	; (8001564 <MX_TIM1_Init+0x98>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001508:	4b16      	ldr	r3, [pc, #88]	; (8001564 <MX_TIM1_Init+0x98>)
 800150a:	2200      	movs	r2, #0
 800150c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <MX_TIM1_Init+0x98>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001514:	4813      	ldr	r0, [pc, #76]	; (8001564 <MX_TIM1_Init+0x98>)
 8001516:	f007 fa19 	bl	800894c <HAL_TIM_Base_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001520:	f000 ffca 	bl	80024b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001528:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800152a:	f107 0308 	add.w	r3, r7, #8
 800152e:	4619      	mov	r1, r3
 8001530:	480c      	ldr	r0, [pc, #48]	; (8001564 <MX_TIM1_Init+0x98>)
 8001532:	f007 fbd3 	bl	8008cdc <HAL_TIM_ConfigClockSource>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800153c:	f000 ffbc 	bl	80024b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001548:	463b      	mov	r3, r7
 800154a:	4619      	mov	r1, r3
 800154c:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_TIM1_Init+0x98>)
 800154e:	f007 fdef 	bl	8009130 <HAL_TIMEx_MasterConfigSynchronization>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001558:	f000 ffae 	bl	80024b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	200006ec 	.word	0x200006ec
 8001568:	40010000 	.word	0x40010000

0800156c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_USART1_UART_Init+0x4c>)
 8001572:	4a12      	ldr	r2, [pc, #72]	; (80015bc <MX_USART1_UART_Init+0x50>)
 8001574:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <MX_USART1_UART_Init+0x4c>)
 8001578:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800157c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MX_USART1_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <MX_USART1_UART_Init+0x4c>)
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <MX_USART1_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_USART1_UART_Init+0x4c>)
 8001592:	220c      	movs	r2, #12
 8001594:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <MX_USART1_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_USART1_UART_Init+0x4c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <MX_USART1_UART_Init+0x4c>)
 80015a4:	f007 fe54 	bl	8009250 <HAL_UART_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015ae:	f000 ff83 	bl	80024b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000734 	.word	0x20000734
 80015bc:	40011000 	.word	0x40011000

080015c0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
 80015d4:	615a      	str	r2, [r3, #20]
 80015d6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80015d8:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <MX_FMC_Init+0x98>)
 80015da:	4a20      	ldr	r2, [pc, #128]	; (800165c <MX_FMC_Init+0x9c>)
 80015dc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80015de:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <MX_FMC_Init+0x98>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80015e4:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <MX_FMC_Init+0x98>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80015ea:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <MX_FMC_Init+0x98>)
 80015ec:	2204      	movs	r2, #4
 80015ee:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80015f0:	4b19      	ldr	r3, [pc, #100]	; (8001658 <MX_FMC_Init+0x98>)
 80015f2:	2210      	movs	r2, #16
 80015f4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <MX_FMC_Init+0x98>)
 80015f8:	2240      	movs	r2, #64	; 0x40
 80015fa:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80015fc:	4b16      	ldr	r3, [pc, #88]	; (8001658 <MX_FMC_Init+0x98>)
 80015fe:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001602:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001604:	4b14      	ldr	r3, [pc, #80]	; (8001658 <MX_FMC_Init+0x98>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800160a:	4b13      	ldr	r3, [pc, #76]	; (8001658 <MX_FMC_Init+0x98>)
 800160c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001610:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <MX_FMC_Init+0x98>)
 8001614:	2200      	movs	r2, #0
 8001616:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <MX_FMC_Init+0x98>)
 800161a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800161e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001620:	2302      	movs	r3, #2
 8001622:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001624:	2307      	movs	r3, #7
 8001626:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001628:	2304      	movs	r3, #4
 800162a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800162c:	2307      	movs	r3, #7
 800162e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001630:	2303      	movs	r3, #3
 8001632:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001634:	2302      	movs	r3, #2
 8001636:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001638:	2302      	movs	r3, #2
 800163a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	4619      	mov	r1, r3
 8001640:	4805      	ldr	r0, [pc, #20]	; (8001658 <MX_FMC_Init+0x98>)
 8001642:	f006 fb13 	bl	8007c6c <HAL_SDRAM_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800164c:	f000 ff34 	bl	80024b8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001650:	bf00      	nop
 8001652:	3720      	adds	r7, #32
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000778 	.word	0x20000778
 800165c:	a0000140 	.word	0xa0000140

08001660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08e      	sub	sp, #56	; 0x38
 8001664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
 800167a:	4b8a      	ldr	r3, [pc, #552]	; (80018a4 <MX_GPIO_Init+0x244>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a89      	ldr	r2, [pc, #548]	; (80018a4 <MX_GPIO_Init+0x244>)
 8001680:	f043 0304 	orr.w	r3, r3, #4
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b87      	ldr	r3, [pc, #540]	; (80018a4 <MX_GPIO_Init+0x244>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	623b      	str	r3, [r7, #32]
 8001690:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
 8001696:	4b83      	ldr	r3, [pc, #524]	; (80018a4 <MX_GPIO_Init+0x244>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a82      	ldr	r2, [pc, #520]	; (80018a4 <MX_GPIO_Init+0x244>)
 800169c:	f043 0320 	orr.w	r3, r3, #32
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b80      	ldr	r3, [pc, #512]	; (80018a4 <MX_GPIO_Init+0x244>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0320 	and.w	r3, r3, #32
 80016aa:	61fb      	str	r3, [r7, #28]
 80016ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
 80016b2:	4b7c      	ldr	r3, [pc, #496]	; (80018a4 <MX_GPIO_Init+0x244>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a7b      	ldr	r2, [pc, #492]	; (80018a4 <MX_GPIO_Init+0x244>)
 80016b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b79      	ldr	r3, [pc, #484]	; (80018a4 <MX_GPIO_Init+0x244>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c6:	61bb      	str	r3, [r7, #24]
 80016c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	4b75      	ldr	r3, [pc, #468]	; (80018a4 <MX_GPIO_Init+0x244>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a74      	ldr	r2, [pc, #464]	; (80018a4 <MX_GPIO_Init+0x244>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b72      	ldr	r3, [pc, #456]	; (80018a4 <MX_GPIO_Init+0x244>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	4b6e      	ldr	r3, [pc, #440]	; (80018a4 <MX_GPIO_Init+0x244>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a6d      	ldr	r2, [pc, #436]	; (80018a4 <MX_GPIO_Init+0x244>)
 80016f0:	f043 0302 	orr.w	r3, r3, #2
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b6b      	ldr	r3, [pc, #428]	; (80018a4 <MX_GPIO_Init+0x244>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	4b67      	ldr	r3, [pc, #412]	; (80018a4 <MX_GPIO_Init+0x244>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a66      	ldr	r2, [pc, #408]	; (80018a4 <MX_GPIO_Init+0x244>)
 800170c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b64      	ldr	r3, [pc, #400]	; (80018a4 <MX_GPIO_Init+0x244>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	4b60      	ldr	r3, [pc, #384]	; (80018a4 <MX_GPIO_Init+0x244>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a5f      	ldr	r2, [pc, #380]	; (80018a4 <MX_GPIO_Init+0x244>)
 8001728:	f043 0310 	orr.w	r3, r3, #16
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b5d      	ldr	r3, [pc, #372]	; (80018a4 <MX_GPIO_Init+0x244>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	4b59      	ldr	r3, [pc, #356]	; (80018a4 <MX_GPIO_Init+0x244>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a58      	ldr	r2, [pc, #352]	; (80018a4 <MX_GPIO_Init+0x244>)
 8001744:	f043 0308 	orr.w	r3, r3, #8
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b56      	ldr	r3, [pc, #344]	; (80018a4 <MX_GPIO_Init+0x244>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001756:	2200      	movs	r2, #0
 8001758:	2116      	movs	r1, #22
 800175a:	4853      	ldr	r0, [pc, #332]	; (80018a8 <MX_GPIO_Init+0x248>)
 800175c:	f004 fe4a 	bl	80063f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001760:	2200      	movs	r2, #0
 8001762:	2180      	movs	r1, #128	; 0x80
 8001764:	4851      	ldr	r0, [pc, #324]	; (80018ac <MX_GPIO_Init+0x24c>)
 8001766:	f004 fe45 	bl	80063f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800176a:	2200      	movs	r2, #0
 800176c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001770:	484f      	ldr	r0, [pc, #316]	; (80018b0 <MX_GPIO_Init+0x250>)
 8001772:	f004 fe3f 	bl	80063f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001776:	2200      	movs	r2, #0
 8001778:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800177c:	484d      	ldr	r0, [pc, #308]	; (80018b4 <MX_GPIO_Init+0x254>)
 800177e:	f004 fe39 	bl	80063f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001782:	2316      	movs	r3, #22
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001786:	2301      	movs	r3, #1
 8001788:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2300      	movs	r3, #0
 8001790:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001796:	4619      	mov	r1, r3
 8001798:	4843      	ldr	r0, [pc, #268]	; (80018a8 <MX_GPIO_Init+0x248>)
 800179a:	f004 fb5b 	bl	8005e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800179e:	f248 0307 	movw	r3, #32775	; 0x8007
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017a4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80017a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b2:	4619      	mov	r1, r3
 80017b4:	483d      	ldr	r0, [pc, #244]	; (80018ac <MX_GPIO_Init+0x24c>)
 80017b6:	f004 fb4d 	bl	8005e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	2301      	movs	r3, #1
 80017c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ce:	4619      	mov	r1, r3
 80017d0:	4836      	ldr	r0, [pc, #216]	; (80018ac <MX_GPIO_Init+0x24c>)
 80017d2:	f004 fb3f 	bl	8005e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80017d6:	2320      	movs	r3, #32
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017da:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80017e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e8:	4619      	mov	r1, r3
 80017ea:	482f      	ldr	r0, [pc, #188]	; (80018a8 <MX_GPIO_Init+0x248>)
 80017ec:	f004 fb32 	bl	8005e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80017f0:	2304      	movs	r3, #4
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80017fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001800:	4619      	mov	r1, r3
 8001802:	482d      	ldr	r0, [pc, #180]	; (80018b8 <MX_GPIO_Init+0x258>)
 8001804:	f004 fb26 	bl	8005e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001808:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180e:	2302      	movs	r3, #2
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2300      	movs	r3, #0
 8001818:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800181a:	230c      	movs	r3, #12
 800181c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001822:	4619      	mov	r1, r3
 8001824:	4824      	ldr	r0, [pc, #144]	; (80018b8 <MX_GPIO_Init+0x258>)
 8001826:	f004 fb15 	bl	8005e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800182a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001830:	2300      	movs	r3, #0
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183c:	4619      	mov	r1, r3
 800183e:	481e      	ldr	r0, [pc, #120]	; (80018b8 <MX_GPIO_Init+0x258>)
 8001840:	f004 fb08 	bl	8005e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001844:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184a:	2300      	movs	r3, #0
 800184c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001856:	4619      	mov	r1, r3
 8001858:	4815      	ldr	r0, [pc, #84]	; (80018b0 <MX_GPIO_Init+0x250>)
 800185a:	f004 fafb 	bl	8005e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800185e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001864:	2301      	movs	r3, #1
 8001866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001874:	4619      	mov	r1, r3
 8001876:	480e      	ldr	r0, [pc, #56]	; (80018b0 <MX_GPIO_Init+0x250>)
 8001878:	f004 faec 	bl	8005e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800187c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001882:	2301      	movs	r3, #1
 8001884:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800188e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001892:	4619      	mov	r1, r3
 8001894:	4807      	ldr	r0, [pc, #28]	; (80018b4 <MX_GPIO_Init+0x254>)
 8001896:	f004 fadd 	bl	8005e54 <HAL_GPIO_Init>

}
 800189a:	bf00      	nop
 800189c:	3738      	adds	r7, #56	; 0x38
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020800 	.word	0x40020800
 80018ac:	40020000 	.word	0x40020000
 80018b0:	40020c00 	.word	0x40020c00
 80018b4:	40021800 	.word	0x40021800
 80018b8:	40020400 	.word	0x40020400

080018bc <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	f04f 33ff 	mov.w	r3, #4294967295
 80018d0:	68b9      	ldr	r1, [r7, #8]
 80018d2:	4804      	ldr	r0, [pc, #16]	; (80018e4 <_write+0x28>)
 80018d4:	f007 fd09 	bl	80092ea <HAL_UART_Transmit>
	return len;
 80018d8:	687b      	ldr	r3, [r7, #4]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000734 	.word	0x20000734

080018e8 <HAL_LTDC_ReloadEventCallback>:

void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  ReloadFlag = 1;
 80018f0:	4b04      	ldr	r3, [pc, #16]	; (8001904 <HAL_LTDC_ReloadEventCallback+0x1c>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	601a      	str	r2, [r3, #0]
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	200007b0 	.word	0x200007b0

08001908 <Rewrite_History>:

void Rewrite_History()
{
 8001908:	b5b0      	push	{r4, r5, r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
	float newx_average = 0;
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]
	float newy_average = 0;
 8001914:	f04f 0300 	mov.w	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
	float newz_average = 0;
 800191a:	f04f 0300 	mov.w	r3, #0
 800191e:	607b      	str	r3, [r7, #4]
	for(int i=1; i<=10; i++)
 8001920:	2301      	movs	r3, #1
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	e047      	b.n	80019b6 <Rewrite_History+0xae>
	{
		x_history[i-1] = x_history[i];
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	3b01      	subs	r3, #1
 800192a:	49c3      	ldr	r1, [pc, #780]	; (8001c38 <Rewrite_History+0x330>)
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	0092      	lsls	r2, r2, #2
 8001930:	440a      	add	r2, r1
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	49c0      	ldr	r1, [pc, #768]	; (8001c38 <Rewrite_History+0x330>)
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	601a      	str	r2, [r3, #0]
		y_history[i-1] = y_history[i];
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	3b01      	subs	r3, #1
 8001940:	49be      	ldr	r1, [pc, #760]	; (8001c3c <Rewrite_History+0x334>)
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	0092      	lsls	r2, r2, #2
 8001946:	440a      	add	r2, r1
 8001948:	6812      	ldr	r2, [r2, #0]
 800194a:	49bc      	ldr	r1, [pc, #752]	; (8001c3c <Rewrite_History+0x334>)
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	440b      	add	r3, r1
 8001950:	601a      	str	r2, [r3, #0]
		z_history[i-1] = z_history[i];
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	3b01      	subs	r3, #1
 8001956:	49ba      	ldr	r1, [pc, #744]	; (8001c40 <Rewrite_History+0x338>)
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	0092      	lsls	r2, r2, #2
 800195c:	440a      	add	r2, r1
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	49b7      	ldr	r1, [pc, #732]	; (8001c40 <Rewrite_History+0x338>)
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	601a      	str	r2, [r3, #0]
		newx_average += x_history[i];
 8001968:	4ab3      	ldr	r2, [pc, #716]	; (8001c38 <Rewrite_History+0x330>)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	edd3 7a00 	vldr	s15, [r3]
 8001974:	ed97 7a03 	vldr	s14, [r7, #12]
 8001978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800197c:	edc7 7a03 	vstr	s15, [r7, #12]
		newy_average += y_history[i];
 8001980:	4aae      	ldr	r2, [pc, #696]	; (8001c3c <Rewrite_History+0x334>)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	edd3 7a00 	vldr	s15, [r3]
 800198c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001994:	edc7 7a02 	vstr	s15, [r7, #8]
		newz_average += z_history[i];
 8001998:	4aa9      	ldr	r2, [pc, #676]	; (8001c40 <Rewrite_History+0x338>)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	edd3 7a00 	vldr	s15, [r3]
 80019a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80019a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ac:	edc7 7a01 	vstr	s15, [r7, #4]
	for(int i=1; i<=10; i++)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	3301      	adds	r3, #1
 80019b4:	603b      	str	r3, [r7, #0]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	2b0a      	cmp	r3, #10
 80019ba:	ddb4      	ble.n	8001926 <Rewrite_History+0x1e>
	}
	BSP_GYRO_GetXYZ(gyroscope);
 80019bc:	48a1      	ldr	r0, [pc, #644]	; (8001c44 <Rewrite_History+0x33c>)
 80019be:	f002 fa73 	bl	8003ea8 <BSP_GYRO_GetXYZ>
	newx_average += gyroscope[0];
 80019c2:	4ba0      	ldr	r3, [pc, #640]	; (8001c44 <Rewrite_History+0x33c>)
 80019c4:	edd3 7a00 	vldr	s15, [r3]
 80019c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80019cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d0:	edc7 7a03 	vstr	s15, [r7, #12]
	newy_average += gyroscope[1];
 80019d4:	4b9b      	ldr	r3, [pc, #620]	; (8001c44 <Rewrite_History+0x33c>)
 80019d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80019da:	ed97 7a02 	vldr	s14, [r7, #8]
 80019de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e2:	edc7 7a02 	vstr	s15, [r7, #8]
	newz_average += gyroscope[2];
 80019e6:	4b97      	ldr	r3, [pc, #604]	; (8001c44 <Rewrite_History+0x33c>)
 80019e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80019ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80019f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f4:	edc7 7a01 	vstr	s15, [r7, #4]

	x_history[10] = gyroscope[0];
 80019f8:	4b92      	ldr	r3, [pc, #584]	; (8001c44 <Rewrite_History+0x33c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a8e      	ldr	r2, [pc, #568]	; (8001c38 <Rewrite_History+0x330>)
 80019fe:	6293      	str	r3, [r2, #40]	; 0x28
	y_history[10] = gyroscope[1];
 8001a00:	4b90      	ldr	r3, [pc, #576]	; (8001c44 <Rewrite_History+0x33c>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	4a8d      	ldr	r2, [pc, #564]	; (8001c3c <Rewrite_History+0x334>)
 8001a06:	6293      	str	r3, [r2, #40]	; 0x28
	z_history[10] = gyroscope[2];
 8001a08:	4b8e      	ldr	r3, [pc, #568]	; (8001c44 <Rewrite_History+0x33c>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	4a8c      	ldr	r2, [pc, #560]	; (8001c40 <Rewrite_History+0x338>)
 8001a0e:	6293      	str	r3, [r2, #40]	; 0x28

	x_average = (newx_average / 11.0) / 1000.0 - 2.7;
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f7fe fda9 	bl	8000568 <__aeabi_f2d>
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	4b8b      	ldr	r3, [pc, #556]	; (8001c48 <Rewrite_History+0x340>)
 8001a1c:	f7fe ff26 	bl	800086c <__aeabi_ddiv>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	4b87      	ldr	r3, [pc, #540]	; (8001c4c <Rewrite_History+0x344>)
 8001a2e:	f7fe ff1d 	bl	800086c <__aeabi_ddiv>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4610      	mov	r0, r2
 8001a38:	4619      	mov	r1, r3
 8001a3a:	a37d      	add	r3, pc, #500	; (adr r3, 8001c30 <Rewrite_History+0x328>)
 8001a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a40:	f7fe fc32 	bl	80002a8 <__aeabi_dsub>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4610      	mov	r0, r2
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f7ff f8dc 	bl	8000c08 <__aeabi_d2f>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4a7f      	ldr	r2, [pc, #508]	; (8001c50 <Rewrite_History+0x348>)
 8001a54:	6013      	str	r3, [r2, #0]
	y_average = (newy_average / 11.0) / 1000.0 - 2.7;
 8001a56:	68b8      	ldr	r0, [r7, #8]
 8001a58:	f7fe fd86 	bl	8000568 <__aeabi_f2d>
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	4b79      	ldr	r3, [pc, #484]	; (8001c48 <Rewrite_History+0x340>)
 8001a62:	f7fe ff03 	bl	800086c <__aeabi_ddiv>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	4b76      	ldr	r3, [pc, #472]	; (8001c4c <Rewrite_History+0x344>)
 8001a74:	f7fe fefa 	bl	800086c <__aeabi_ddiv>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	a36b      	add	r3, pc, #428	; (adr r3, 8001c30 <Rewrite_History+0x328>)
 8001a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a86:	f7fe fc0f 	bl	80002a8 <__aeabi_dsub>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4610      	mov	r0, r2
 8001a90:	4619      	mov	r1, r3
 8001a92:	f7ff f8b9 	bl	8000c08 <__aeabi_d2f>
 8001a96:	4603      	mov	r3, r0
 8001a98:	4a6e      	ldr	r2, [pc, #440]	; (8001c54 <Rewrite_History+0x34c>)
 8001a9a:	6013      	str	r3, [r2, #0]
	z_average = (newz_average / 11.0) / 1000.0 - 2.7;
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7fe fd63 	bl	8000568 <__aeabi_f2d>
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	4b68      	ldr	r3, [pc, #416]	; (8001c48 <Rewrite_History+0x340>)
 8001aa8:	f7fe fee0 	bl	800086c <__aeabi_ddiv>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	4b64      	ldr	r3, [pc, #400]	; (8001c4c <Rewrite_History+0x344>)
 8001aba:	f7fe fed7 	bl	800086c <__aeabi_ddiv>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	a35a      	add	r3, pc, #360	; (adr r3, 8001c30 <Rewrite_History+0x328>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	f7fe fbec 	bl	80002a8 <__aeabi_dsub>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7ff f896 	bl	8000c08 <__aeabi_d2f>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4a5e      	ldr	r2, [pc, #376]	; (8001c58 <Rewrite_History+0x350>)
 8001ae0:	6013      	str	r3, [r2, #0]

	AngleX += (x_average / 100.0);
 8001ae2:	4b5e      	ldr	r3, [pc, #376]	; (8001c5c <Rewrite_History+0x354>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fd3e 	bl	8000568 <__aeabi_f2d>
 8001aec:	4604      	mov	r4, r0
 8001aee:	460d      	mov	r5, r1
 8001af0:	4b57      	ldr	r3, [pc, #348]	; (8001c50 <Rewrite_History+0x348>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7fe fd37 	bl	8000568 <__aeabi_f2d>
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	4b58      	ldr	r3, [pc, #352]	; (8001c60 <Rewrite_History+0x358>)
 8001b00:	f7fe feb4 	bl	800086c <__aeabi_ddiv>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4620      	mov	r0, r4
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	f7fe fbce 	bl	80002ac <__adddf3>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	f7ff f876 	bl	8000c08 <__aeabi_d2f>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4a4f      	ldr	r2, [pc, #316]	; (8001c5c <Rewrite_History+0x354>)
 8001b20:	6013      	str	r3, [r2, #0]
	AngleY += (y_average / 100.0);
 8001b22:	4b50      	ldr	r3, [pc, #320]	; (8001c64 <Rewrite_History+0x35c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fd1e 	bl	8000568 <__aeabi_f2d>
 8001b2c:	4604      	mov	r4, r0
 8001b2e:	460d      	mov	r5, r1
 8001b30:	4b48      	ldr	r3, [pc, #288]	; (8001c54 <Rewrite_History+0x34c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7fe fd17 	bl	8000568 <__aeabi_f2d>
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	4b48      	ldr	r3, [pc, #288]	; (8001c60 <Rewrite_History+0x358>)
 8001b40:	f7fe fe94 	bl	800086c <__aeabi_ddiv>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4620      	mov	r0, r4
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	f7fe fbae 	bl	80002ac <__adddf3>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	f7ff f856 	bl	8000c08 <__aeabi_d2f>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	4a41      	ldr	r2, [pc, #260]	; (8001c64 <Rewrite_History+0x35c>)
 8001b60:	6013      	str	r3, [r2, #0]
	AngleZ += (z_average / 100.0);
 8001b62:	4b41      	ldr	r3, [pc, #260]	; (8001c68 <Rewrite_History+0x360>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fcfe 	bl	8000568 <__aeabi_f2d>
 8001b6c:	4604      	mov	r4, r0
 8001b6e:	460d      	mov	r5, r1
 8001b70:	4b39      	ldr	r3, [pc, #228]	; (8001c58 <Rewrite_History+0x350>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fcf7 	bl	8000568 <__aeabi_f2d>
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	4b38      	ldr	r3, [pc, #224]	; (8001c60 <Rewrite_History+0x358>)
 8001b80:	f7fe fe74 	bl	800086c <__aeabi_ddiv>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4620      	mov	r0, r4
 8001b8a:	4629      	mov	r1, r5
 8001b8c:	f7fe fb8e 	bl	80002ac <__adddf3>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7ff f836 	bl	8000c08 <__aeabi_d2f>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	4a32      	ldr	r2, [pc, #200]	; (8001c68 <Rewrite_History+0x360>)
 8001ba0:	6013      	str	r3, [r2, #0]

	if(AngleX > 180.0)
 8001ba2:	4b2e      	ldr	r3, [pc, #184]	; (8001c5c <Rewrite_History+0x354>)
 8001ba4:	edd3 7a00 	vldr	s15, [r3]
 8001ba8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001c6c <Rewrite_History+0x364>
 8001bac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb4:	dd09      	ble.n	8001bca <Rewrite_History+0x2c2>
	{
		AngleX = AngleX - 360.0;
 8001bb6:	4b29      	ldr	r3, [pc, #164]	; (8001c5c <Rewrite_History+0x354>)
 8001bb8:	edd3 7a00 	vldr	s15, [r3]
 8001bbc:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001c70 <Rewrite_History+0x368>
 8001bc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bc4:	4b25      	ldr	r3, [pc, #148]	; (8001c5c <Rewrite_History+0x354>)
 8001bc6:	edc3 7a00 	vstr	s15, [r3]
	}
	if(AngleX <= -180.0)
 8001bca:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <Rewrite_History+0x354>)
 8001bcc:	edd3 7a00 	vldr	s15, [r3]
 8001bd0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001c74 <Rewrite_History+0x36c>
 8001bd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bdc:	d809      	bhi.n	8001bf2 <Rewrite_History+0x2ea>
	{
		AngleX = AngleX + 360;
 8001bde:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <Rewrite_History+0x354>)
 8001be0:	edd3 7a00 	vldr	s15, [r3]
 8001be4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001c70 <Rewrite_History+0x368>
 8001be8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bec:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <Rewrite_History+0x354>)
 8001bee:	edc3 7a00 	vstr	s15, [r3]
	}

	if(AngleY > 180.0)
 8001bf2:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <Rewrite_History+0x35c>)
 8001bf4:	edd3 7a00 	vldr	s15, [r3]
 8001bf8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001c6c <Rewrite_History+0x364>
 8001bfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c04:	dd09      	ble.n	8001c1a <Rewrite_History+0x312>
	{
		AngleY = AngleY - 360.0;
 8001c06:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <Rewrite_History+0x35c>)
 8001c08:	edd3 7a00 	vldr	s15, [r3]
 8001c0c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001c70 <Rewrite_History+0x368>
 8001c10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c14:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <Rewrite_History+0x35c>)
 8001c16:	edc3 7a00 	vstr	s15, [r3]
	}
	if(AngleY <= -180.0)
 8001c1a:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <Rewrite_History+0x35c>)
 8001c1c:	edd3 7a00 	vldr	s15, [r3]
 8001c20:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001c74 <Rewrite_History+0x36c>
 8001c24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2c:	d82e      	bhi.n	8001c8c <Rewrite_History+0x384>
 8001c2e:	e023      	b.n	8001c78 <Rewrite_History+0x370>
 8001c30:	9999999a 	.word	0x9999999a
 8001c34:	40059999 	.word	0x40059999
 8001c38:	200007b4 	.word	0x200007b4
 8001c3c:	200007e0 	.word	0x200007e0
 8001c40:	2000080c 	.word	0x2000080c
 8001c44:	20000838 	.word	0x20000838
 8001c48:	40260000 	.word	0x40260000
 8001c4c:	408f4000 	.word	0x408f4000
 8001c50:	20000844 	.word	0x20000844
 8001c54:	20000848 	.word	0x20000848
 8001c58:	2000084c 	.word	0x2000084c
 8001c5c:	2000085c 	.word	0x2000085c
 8001c60:	40590000 	.word	0x40590000
 8001c64:	20000858 	.word	0x20000858
 8001c68:	20000860 	.word	0x20000860
 8001c6c:	43340000 	.word	0x43340000
 8001c70:	43b40000 	.word	0x43b40000
 8001c74:	c3340000 	.word	0xc3340000
	{
		AngleY = AngleY + 360;
 8001c78:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <Rewrite_History+0x3e0>)
 8001c7a:	edd3 7a00 	vldr	s15, [r3]
 8001c7e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001cec <Rewrite_History+0x3e4>
 8001c82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c86:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <Rewrite_History+0x3e0>)
 8001c88:	edc3 7a00 	vstr	s15, [r3]
	}

	if(AngleZ > 180.0)
 8001c8c:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <Rewrite_History+0x3e8>)
 8001c8e:	edd3 7a00 	vldr	s15, [r3]
 8001c92:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001cf4 <Rewrite_History+0x3ec>
 8001c96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9e:	dd09      	ble.n	8001cb4 <Rewrite_History+0x3ac>
	{
		AngleZ = AngleZ - 360.0;
 8001ca0:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <Rewrite_History+0x3e8>)
 8001ca2:	edd3 7a00 	vldr	s15, [r3]
 8001ca6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001cec <Rewrite_History+0x3e4>
 8001caa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <Rewrite_History+0x3e8>)
 8001cb0:	edc3 7a00 	vstr	s15, [r3]
	}
	if(AngleZ <= -180.0)
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <Rewrite_History+0x3e8>)
 8001cb6:	edd3 7a00 	vldr	s15, [r3]
 8001cba:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001cf8 <Rewrite_History+0x3f0>
 8001cbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc6:	d900      	bls.n	8001cca <Rewrite_History+0x3c2>
	{
		AngleZ = AngleZ + 360;
	}

	//HAL_I2C_Mem_Read( , );
}
 8001cc8:	e009      	b.n	8001cde <Rewrite_History+0x3d6>
		AngleZ = AngleZ + 360;
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <Rewrite_History+0x3e8>)
 8001ccc:	edd3 7a00 	vldr	s15, [r3]
 8001cd0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001cec <Rewrite_History+0x3e4>
 8001cd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <Rewrite_History+0x3e8>)
 8001cda:	edc3 7a00 	vstr	s15, [r3]
}
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000858 	.word	0x20000858
 8001cec:	43b40000 	.word	0x43b40000
 8001cf0:	20000860 	.word	0x20000860
 8001cf4:	43340000 	.word	0x43340000
 8001cf8:	c3340000 	.word	0xc3340000

08001cfc <StartDataGathering>:

void StartDataGathering(void const * argument)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Rewrite_History();
 8001d04:	f7ff fe00 	bl	8001908 <Rewrite_History>
		osDelay(10);
 8001d08:	200a      	movs	r0, #10
 8001d0a:	f008 fc3a 	bl	800a582 <osDelay>
		Rewrite_History();
 8001d0e:	e7f9      	b.n	8001d04 <StartDataGathering+0x8>

08001d10 <StartEnemySteer>:
	}
}

void StartEnemySteer(void const * argument)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	  pid_init(&pid, 1.0f, 1.0f, 1.0f, 10 , 8);
 8001d18:	2208      	movs	r2, #8
 8001d1a:	210a      	movs	r1, #10
 8001d1c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001d20:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001d24:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001d28:	4831      	ldr	r0, [pc, #196]	; (8001df0 <StartEnemySteer+0xe0>)
 8001d2a:	f000 fbca 	bl	80024c2 <pid_init>

	  pid.p_max = pid_scale(&pid, 5);
 8001d2e:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001d32:	482f      	ldr	r0, [pc, #188]	; (8001df0 <StartEnemySteer+0xe0>)
 8001d34:	f000 fd0a 	bl	800274c <pid_scale>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	4a2d      	ldr	r2, [pc, #180]	; (8001df0 <StartEnemySteer+0xe0>)
 8001d3c:	6193      	str	r3, [r2, #24]
	  pid.p_min = pid_scale(&pid, -5);
 8001d3e:	eeb9 0a04 	vmov.f32	s0, #148	; 0xc0a00000 -5.0
 8001d42:	482b      	ldr	r0, [pc, #172]	; (8001df0 <StartEnemySteer+0xe0>)
 8001d44:	f000 fd02 	bl	800274c <pid_scale>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	4a29      	ldr	r2, [pc, #164]	; (8001df0 <StartEnemySteer+0xe0>)
 8001d4c:	6253      	str	r3, [r2, #36]	; 0x24
	  pid.i_max = pid_scale(&pid, 5);
 8001d4e:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001d52:	4827      	ldr	r0, [pc, #156]	; (8001df0 <StartEnemySteer+0xe0>)
 8001d54:	f000 fcfa 	bl	800274c <pid_scale>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	4a25      	ldr	r2, [pc, #148]	; (8001df0 <StartEnemySteer+0xe0>)
 8001d5c:	61d3      	str	r3, [r2, #28]
	  pid.i_min = pid_scale(&pid, -5);
 8001d5e:	eeb9 0a04 	vmov.f32	s0, #148	; 0xc0a00000 -5.0
 8001d62:	4823      	ldr	r0, [pc, #140]	; (8001df0 <StartEnemySteer+0xe0>)
 8001d64:	f000 fcf2 	bl	800274c <pid_scale>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4a21      	ldr	r2, [pc, #132]	; (8001df0 <StartEnemySteer+0xe0>)
 8001d6c:	6293      	str	r3, [r2, #40]	; 0x28
	  pid.d_max = pid_scale(&pid, 5);
 8001d6e:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001d72:	481f      	ldr	r0, [pc, #124]	; (8001df0 <StartEnemySteer+0xe0>)
 8001d74:	f000 fcea 	bl	800274c <pid_scale>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	4a1d      	ldr	r2, [pc, #116]	; (8001df0 <StartEnemySteer+0xe0>)
 8001d7c:	6213      	str	r3, [r2, #32]
	  pid.d_min = pid_scale(&pid, -5);
 8001d7e:	eeb9 0a04 	vmov.f32	s0, #148	; 0xc0a00000 -5.0
 8001d82:	481b      	ldr	r0, [pc, #108]	; (8001df0 <StartEnemySteer+0xe0>)
 8001d84:	f000 fce2 	bl	800274c <pid_scale>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4a19      	ldr	r2, [pc, #100]	; (8001df0 <StartEnemySteer+0xe0>)
 8001d8c:	62d3      	str	r3, [r2, #44]	; 0x2c

	  pid.total_max = pid_scale(&pid, 5);
 8001d8e:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001d92:	4817      	ldr	r0, [pc, #92]	; (8001df0 <StartEnemySteer+0xe0>)
 8001d94:	f000 fcda 	bl	800274c <pid_scale>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	4a15      	ldr	r2, [pc, #84]	; (8001df0 <StartEnemySteer+0xe0>)
 8001d9c:	6493      	str	r3, [r2, #72]	; 0x48
	  pid.total_min = pid_scale(&pid, -5);
 8001d9e:	eeb9 0a04 	vmov.f32	s0, #148	; 0xc0a00000 -5.0
 8001da2:	4813      	ldr	r0, [pc, #76]	; (8001df0 <StartEnemySteer+0xe0>)
 8001da4:	f000 fcd2 	bl	800274c <pid_scale>
 8001da8:	4603      	mov	r3, r0
 8001daa:	4a11      	ldr	r2, [pc, #68]	; (8001df0 <StartEnemySteer+0xe0>)
 8001dac:	64d3      	str	r3, [r2, #76]	; 0x4c
	while(1)
	{
		LeftYSpeed = pid_calc(&pid, LeftYPos, BallYPos - 25);
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <StartEnemySteer+0xe4>)
 8001db0:	edd3 7a00 	vldr	s15, [r3]
 8001db4:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001db8:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <StartEnemySteer+0xe8>)
 8001dba:	edd3 7a00 	vldr	s15, [r3]
 8001dbe:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001dc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001dc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dca:	ee17 2a90 	vmov	r2, s15
 8001dce:	ee16 1a90 	vmov	r1, s13
 8001dd2:	4807      	ldr	r0, [pc, #28]	; (8001df0 <StartEnemySteer+0xe0>)
 8001dd4:	f000 fc00 	bl	80025d8 <pid_calc>
 8001dd8:	ee07 0a90 	vmov	s15, r0
 8001ddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <StartEnemySteer+0xec>)
 8001de2:	edc3 7a00 	vstr	s15, [r3]
		osDelay(8);
 8001de6:	2008      	movs	r0, #8
 8001de8:	f008 fbcb 	bl	800a582 <osDelay>
		LeftYSpeed = pid_calc(&pid, LeftYPos, BallYPos - 25);
 8001dec:	e7df      	b.n	8001dae <StartEnemySteer+0x9e>
 8001dee:	bf00      	nop
 8001df0:	20000868 	.word	0x20000868
 8001df4:	20000004 	.word	0x20000004
 8001df8:	20000014 	.word	0x20000014
 8001dfc:	20000850 	.word	0x20000850

08001e00 <CheckForCollisions>:
	}
}

void CheckForCollisions()
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
	//Left Block
	if(BallXPos <= 30 + BALL_DIAMETER)
 8001e04:	4bbd      	ldr	r3, [pc, #756]	; (80020fc <CheckForCollisions+0x2fc>)
 8001e06:	edd3 7a00 	vldr	s15, [r3]
 8001e0a:	ed9f 7abd 	vldr	s14, [pc, #756]	; 8002100 <CheckForCollisions+0x300>
 8001e0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e16:	f200 80be 	bhi.w	8001f96 <CheckForCollisions+0x196>
	{
		if(BallYPos <= LeftYPos + 50 && BallYPos >= LeftYPos)	//Front face
 8001e1a:	4bba      	ldr	r3, [pc, #744]	; (8002104 <CheckForCollisions+0x304>)
 8001e1c:	edd3 7a00 	vldr	s15, [r3]
 8001e20:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 8002108 <CheckForCollisions+0x308>
 8001e24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001e28:	4bb8      	ldr	r3, [pc, #736]	; (800210c <CheckForCollisions+0x30c>)
 8001e2a:	edd3 7a00 	vldr	s15, [r3]
 8001e2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e36:	db1a      	blt.n	8001e6e <CheckForCollisions+0x6e>
 8001e38:	4bb4      	ldr	r3, [pc, #720]	; (800210c <CheckForCollisions+0x30c>)
 8001e3a:	ed93 7a00 	vldr	s14, [r3]
 8001e3e:	4bb1      	ldr	r3, [pc, #708]	; (8002104 <CheckForCollisions+0x304>)
 8001e40:	edd3 7a00 	vldr	s15, [r3]
 8001e44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e4c:	db0f      	blt.n	8001e6e <CheckForCollisions+0x6e>
		{
			if(BallXSpeed < 0)
 8001e4e:	4bb0      	ldr	r3, [pc, #704]	; (8002110 <CheckForCollisions+0x310>)
 8001e50:	edd3 7a00 	vldr	s15, [r3]
 8001e54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5c:	d507      	bpl.n	8001e6e <CheckForCollisions+0x6e>
			{
				BallXSpeed = -BallXSpeed;
 8001e5e:	4bac      	ldr	r3, [pc, #688]	; (8002110 <CheckForCollisions+0x310>)
 8001e60:	edd3 7a00 	vldr	s15, [r3]
 8001e64:	eef1 7a67 	vneg.f32	s15, s15
 8001e68:	4ba9      	ldr	r3, [pc, #676]	; (8002110 <CheckForCollisions+0x310>)
 8001e6a:	edc3 7a00 	vstr	s15, [r3]
			}
		}
		if(BallYPos <= LeftYPos && BallYPos > LeftYPos - BALL_DIAMETER)
 8001e6e:	4ba7      	ldr	r3, [pc, #668]	; (800210c <CheckForCollisions+0x30c>)
 8001e70:	ed93 7a00 	vldr	s14, [r3]
 8001e74:	4ba3      	ldr	r3, [pc, #652]	; (8002104 <CheckForCollisions+0x304>)
 8001e76:	edd3 7a00 	vldr	s15, [r3]
 8001e7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e82:	d84e      	bhi.n	8001f22 <CheckForCollisions+0x122>
 8001e84:	4b9f      	ldr	r3, [pc, #636]	; (8002104 <CheckForCollisions+0x304>)
 8001e86:	edd3 7a00 	vldr	s15, [r3]
 8001e8a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e8e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001e92:	4b9e      	ldr	r3, [pc, #632]	; (800210c <CheckForCollisions+0x30c>)
 8001e94:	edd3 7a00 	vldr	s15, [r3]
 8001e98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea0:	d53f      	bpl.n	8001f22 <CheckForCollisions+0x122>
		{
			if(BallXSpeed < 0)
 8001ea2:	4b9b      	ldr	r3, [pc, #620]	; (8002110 <CheckForCollisions+0x310>)
 8001ea4:	edd3 7a00 	vldr	s15, [r3]
 8001ea8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb0:	d507      	bpl.n	8001ec2 <CheckForCollisions+0xc2>
			{
				BallXSpeed = -BallXSpeed;
 8001eb2:	4b97      	ldr	r3, [pc, #604]	; (8002110 <CheckForCollisions+0x310>)
 8001eb4:	edd3 7a00 	vldr	s15, [r3]
 8001eb8:	eef1 7a67 	vneg.f32	s15, s15
 8001ebc:	4b94      	ldr	r3, [pc, #592]	; (8002110 <CheckForCollisions+0x310>)
 8001ebe:	edc3 7a00 	vstr	s15, [r3]
			}
			if(LeftYSpeed > 0 && BallYSpeed < 0)
 8001ec2:	4b94      	ldr	r3, [pc, #592]	; (8002114 <CheckForCollisions+0x314>)
 8001ec4:	edd3 7a00 	vldr	s15, [r3]
 8001ec8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed0:	dd0f      	ble.n	8001ef2 <CheckForCollisions+0xf2>
 8001ed2:	4b91      	ldr	r3, [pc, #580]	; (8002118 <CheckForCollisions+0x318>)
 8001ed4:	edd3 7a00 	vldr	s15, [r3]
 8001ed8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee0:	d507      	bpl.n	8001ef2 <CheckForCollisions+0xf2>
			{
				BallYSpeed = - BallYSpeed;
 8001ee2:	4b8d      	ldr	r3, [pc, #564]	; (8002118 <CheckForCollisions+0x318>)
 8001ee4:	edd3 7a00 	vldr	s15, [r3]
 8001ee8:	eef1 7a67 	vneg.f32	s15, s15
 8001eec:	4b8a      	ldr	r3, [pc, #552]	; (8002118 <CheckForCollisions+0x318>)
 8001eee:	edc3 7a00 	vstr	s15, [r3]
			}
			if(LeftYSpeed < 0 && BallYSpeed > 0)
 8001ef2:	4b88      	ldr	r3, [pc, #544]	; (8002114 <CheckForCollisions+0x314>)
 8001ef4:	edd3 7a00 	vldr	s15, [r3]
 8001ef8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f00:	d50f      	bpl.n	8001f22 <CheckForCollisions+0x122>
 8001f02:	4b85      	ldr	r3, [pc, #532]	; (8002118 <CheckForCollisions+0x318>)
 8001f04:	edd3 7a00 	vldr	s15, [r3]
 8001f08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f10:	dd07      	ble.n	8001f22 <CheckForCollisions+0x122>
			{
				BallYSpeed = - BallYSpeed;
 8001f12:	4b81      	ldr	r3, [pc, #516]	; (8002118 <CheckForCollisions+0x318>)
 8001f14:	edd3 7a00 	vldr	s15, [r3]
 8001f18:	eef1 7a67 	vneg.f32	s15, s15
 8001f1c:	4b7e      	ldr	r3, [pc, #504]	; (8002118 <CheckForCollisions+0x318>)
 8001f1e:	edc3 7a00 	vstr	s15, [r3]
			}
		}
		if(BallYPos >= LeftYPos + 50 && BallYPos < LeftYPos + 50 + BALL_DIAMETER)
 8001f22:	4b78      	ldr	r3, [pc, #480]	; (8002104 <CheckForCollisions+0x304>)
 8001f24:	edd3 7a00 	vldr	s15, [r3]
 8001f28:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002108 <CheckForCollisions+0x308>
 8001f2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001f30:	4b76      	ldr	r3, [pc, #472]	; (800210c <CheckForCollisions+0x30c>)
 8001f32:	edd3 7a00 	vldr	s15, [r3]
 8001f36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3e:	d82a      	bhi.n	8001f96 <CheckForCollisions+0x196>
 8001f40:	4b70      	ldr	r3, [pc, #448]	; (8002104 <CheckForCollisions+0x304>)
 8001f42:	edd3 7a00 	vldr	s15, [r3]
 8001f46:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8002108 <CheckForCollisions+0x308>
 8001f4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f4e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001f56:	4b6d      	ldr	r3, [pc, #436]	; (800210c <CheckForCollisions+0x30c>)
 8001f58:	edd3 7a00 	vldr	s15, [r3]
 8001f5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f64:	dd17      	ble.n	8001f96 <CheckForCollisions+0x196>
		{
			if(BallXSpeed < 0)
 8001f66:	4b6a      	ldr	r3, [pc, #424]	; (8002110 <CheckForCollisions+0x310>)
 8001f68:	edd3 7a00 	vldr	s15, [r3]
 8001f6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f74:	d507      	bpl.n	8001f86 <CheckForCollisions+0x186>
			{
				BallXSpeed = -BallXSpeed;
 8001f76:	4b66      	ldr	r3, [pc, #408]	; (8002110 <CheckForCollisions+0x310>)
 8001f78:	edd3 7a00 	vldr	s15, [r3]
 8001f7c:	eef1 7a67 	vneg.f32	s15, s15
 8001f80:	4b63      	ldr	r3, [pc, #396]	; (8002110 <CheckForCollisions+0x310>)
 8001f82:	edc3 7a00 	vstr	s15, [r3]
			}
			BallYSpeed = -BallYSpeed;
 8001f86:	4b64      	ldr	r3, [pc, #400]	; (8002118 <CheckForCollisions+0x318>)
 8001f88:	edd3 7a00 	vldr	s15, [r3]
 8001f8c:	eef1 7a67 	vneg.f32	s15, s15
 8001f90:	4b61      	ldr	r3, [pc, #388]	; (8002118 <CheckForCollisions+0x318>)
 8001f92:	edc3 7a00 	vstr	s15, [r3]
		}
	}

	//Right Block
	if(BallXPos >= 210 - BALL_DIAMETER)
 8001f96:	4b59      	ldr	r3, [pc, #356]	; (80020fc <CheckForCollisions+0x2fc>)
 8001f98:	edd3 7a00 	vldr	s15, [r3]
 8001f9c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800211c <CheckForCollisions+0x31c>
 8001fa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa8:	da00      	bge.n	8001fac <CheckForCollisions+0x1ac>
				BallXSpeed = -BallXSpeed;
			}
			BallYSpeed = -BallYSpeed;
		}
	}
}
 8001faa:	e0d5      	b.n	8002158 <CheckForCollisions+0x358>
		if(BallYPos <= RightYPos + 50 && BallYPos >= RightYPos)	//Front face
 8001fac:	4b5c      	ldr	r3, [pc, #368]	; (8002120 <CheckForCollisions+0x320>)
 8001fae:	edd3 7a00 	vldr	s15, [r3]
 8001fb2:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8002108 <CheckForCollisions+0x308>
 8001fb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001fba:	4b54      	ldr	r3, [pc, #336]	; (800210c <CheckForCollisions+0x30c>)
 8001fbc:	edd3 7a00 	vldr	s15, [r3]
 8001fc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc8:	db1a      	blt.n	8002000 <CheckForCollisions+0x200>
 8001fca:	4b50      	ldr	r3, [pc, #320]	; (800210c <CheckForCollisions+0x30c>)
 8001fcc:	ed93 7a00 	vldr	s14, [r3]
 8001fd0:	4b53      	ldr	r3, [pc, #332]	; (8002120 <CheckForCollisions+0x320>)
 8001fd2:	edd3 7a00 	vldr	s15, [r3]
 8001fd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fde:	db0f      	blt.n	8002000 <CheckForCollisions+0x200>
			if(BallXSpeed > 0)
 8001fe0:	4b4b      	ldr	r3, [pc, #300]	; (8002110 <CheckForCollisions+0x310>)
 8001fe2:	edd3 7a00 	vldr	s15, [r3]
 8001fe6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fee:	dd07      	ble.n	8002000 <CheckForCollisions+0x200>
				BallXSpeed = -BallXSpeed;
 8001ff0:	4b47      	ldr	r3, [pc, #284]	; (8002110 <CheckForCollisions+0x310>)
 8001ff2:	edd3 7a00 	vldr	s15, [r3]
 8001ff6:	eef1 7a67 	vneg.f32	s15, s15
 8001ffa:	4b45      	ldr	r3, [pc, #276]	; (8002110 <CheckForCollisions+0x310>)
 8001ffc:	edc3 7a00 	vstr	s15, [r3]
		if(BallYPos <= RightYPos && BallYPos > RightYPos - BALL_DIAMETER)
 8002000:	4b42      	ldr	r3, [pc, #264]	; (800210c <CheckForCollisions+0x30c>)
 8002002:	ed93 7a00 	vldr	s14, [r3]
 8002006:	4b46      	ldr	r3, [pc, #280]	; (8002120 <CheckForCollisions+0x320>)
 8002008:	edd3 7a00 	vldr	s15, [r3]
 800200c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002014:	d84e      	bhi.n	80020b4 <CheckForCollisions+0x2b4>
 8002016:	4b42      	ldr	r3, [pc, #264]	; (8002120 <CheckForCollisions+0x320>)
 8002018:	edd3 7a00 	vldr	s15, [r3]
 800201c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002020:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002024:	4b39      	ldr	r3, [pc, #228]	; (800210c <CheckForCollisions+0x30c>)
 8002026:	edd3 7a00 	vldr	s15, [r3]
 800202a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800202e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002032:	d53f      	bpl.n	80020b4 <CheckForCollisions+0x2b4>
			if(BallXSpeed > 0)
 8002034:	4b36      	ldr	r3, [pc, #216]	; (8002110 <CheckForCollisions+0x310>)
 8002036:	edd3 7a00 	vldr	s15, [r3]
 800203a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800203e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002042:	dd07      	ble.n	8002054 <CheckForCollisions+0x254>
				BallXSpeed = -BallXSpeed;
 8002044:	4b32      	ldr	r3, [pc, #200]	; (8002110 <CheckForCollisions+0x310>)
 8002046:	edd3 7a00 	vldr	s15, [r3]
 800204a:	eef1 7a67 	vneg.f32	s15, s15
 800204e:	4b30      	ldr	r3, [pc, #192]	; (8002110 <CheckForCollisions+0x310>)
 8002050:	edc3 7a00 	vstr	s15, [r3]
			if(RightYSpeed > 0 && BallYSpeed < 0)
 8002054:	4b33      	ldr	r3, [pc, #204]	; (8002124 <CheckForCollisions+0x324>)
 8002056:	edd3 7a00 	vldr	s15, [r3]
 800205a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800205e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002062:	dd0f      	ble.n	8002084 <CheckForCollisions+0x284>
 8002064:	4b2c      	ldr	r3, [pc, #176]	; (8002118 <CheckForCollisions+0x318>)
 8002066:	edd3 7a00 	vldr	s15, [r3]
 800206a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800206e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002072:	d507      	bpl.n	8002084 <CheckForCollisions+0x284>
				BallYSpeed = - BallYSpeed;
 8002074:	4b28      	ldr	r3, [pc, #160]	; (8002118 <CheckForCollisions+0x318>)
 8002076:	edd3 7a00 	vldr	s15, [r3]
 800207a:	eef1 7a67 	vneg.f32	s15, s15
 800207e:	4b26      	ldr	r3, [pc, #152]	; (8002118 <CheckForCollisions+0x318>)
 8002080:	edc3 7a00 	vstr	s15, [r3]
			if(RightYSpeed < 0 && BallYSpeed > 0)
 8002084:	4b27      	ldr	r3, [pc, #156]	; (8002124 <CheckForCollisions+0x324>)
 8002086:	edd3 7a00 	vldr	s15, [r3]
 800208a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800208e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002092:	d50f      	bpl.n	80020b4 <CheckForCollisions+0x2b4>
 8002094:	4b20      	ldr	r3, [pc, #128]	; (8002118 <CheckForCollisions+0x318>)
 8002096:	edd3 7a00 	vldr	s15, [r3]
 800209a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800209e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a2:	dd07      	ble.n	80020b4 <CheckForCollisions+0x2b4>
				BallYSpeed = - BallYSpeed;
 80020a4:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <CheckForCollisions+0x318>)
 80020a6:	edd3 7a00 	vldr	s15, [r3]
 80020aa:	eef1 7a67 	vneg.f32	s15, s15
 80020ae:	4b1a      	ldr	r3, [pc, #104]	; (8002118 <CheckForCollisions+0x318>)
 80020b0:	edc3 7a00 	vstr	s15, [r3]
		if(BallYPos >= RightYPos + 50 && BallYPos < RightYPos + 50 + BALL_DIAMETER)
 80020b4:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <CheckForCollisions+0x320>)
 80020b6:	edd3 7a00 	vldr	s15, [r3]
 80020ba:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002108 <CheckForCollisions+0x308>
 80020be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80020c2:	4b12      	ldr	r3, [pc, #72]	; (800210c <CheckForCollisions+0x30c>)
 80020c4:	edd3 7a00 	vldr	s15, [r3]
 80020c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d0:	d900      	bls.n	80020d4 <CheckForCollisions+0x2d4>
}
 80020d2:	e041      	b.n	8002158 <CheckForCollisions+0x358>
		if(BallYPos >= RightYPos + 50 && BallYPos < RightYPos + 50 + BALL_DIAMETER)
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <CheckForCollisions+0x320>)
 80020d6:	edd3 7a00 	vldr	s15, [r3]
 80020da:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002108 <CheckForCollisions+0x308>
 80020de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020e2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80020e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80020ea:	4b08      	ldr	r3, [pc, #32]	; (800210c <CheckForCollisions+0x30c>)
 80020ec:	edd3 7a00 	vldr	s15, [r3]
 80020f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f8:	dc16      	bgt.n	8002128 <CheckForCollisions+0x328>
}
 80020fa:	e02d      	b.n	8002158 <CheckForCollisions+0x358>
 80020fc:	20000010 	.word	0x20000010
 8002100:	42200000 	.word	0x42200000
 8002104:	20000004 	.word	0x20000004
 8002108:	42480000 	.word	0x42480000
 800210c:	20000014 	.word	0x20000014
 8002110:	20000018 	.word	0x20000018
 8002114:	20000850 	.word	0x20000850
 8002118:	2000001c 	.word	0x2000001c
 800211c:	43480000 	.word	0x43480000
 8002120:	2000000c 	.word	0x2000000c
 8002124:	20000854 	.word	0x20000854
			if(BallXSpeed > 0)
 8002128:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <CheckForCollisions+0x364>)
 800212a:	edd3 7a00 	vldr	s15, [r3]
 800212e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002136:	dd07      	ble.n	8002148 <CheckForCollisions+0x348>
				BallXSpeed = -BallXSpeed;
 8002138:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <CheckForCollisions+0x364>)
 800213a:	edd3 7a00 	vldr	s15, [r3]
 800213e:	eef1 7a67 	vneg.f32	s15, s15
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <CheckForCollisions+0x364>)
 8002144:	edc3 7a00 	vstr	s15, [r3]
			BallYSpeed = -BallYSpeed;
 8002148:	4b07      	ldr	r3, [pc, #28]	; (8002168 <CheckForCollisions+0x368>)
 800214a:	edd3 7a00 	vldr	s15, [r3]
 800214e:	eef1 7a67 	vneg.f32	s15, s15
 8002152:	4b05      	ldr	r3, [pc, #20]	; (8002168 <CheckForCollisions+0x368>)
 8002154:	edc3 7a00 	vstr	s15, [r3]
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000018 	.word	0x20000018
 8002168:	2000001c 	.word	0x2000001c

0800216c <CheckForBoundaries>:

void CheckForBoundaries()
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
	if(RightYPos < 0)
 8002170:	4b49      	ldr	r3, [pc, #292]	; (8002298 <CheckForBoundaries+0x12c>)
 8002172:	edd3 7a00 	vldr	s15, [r3]
 8002176:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800217a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217e:	d507      	bpl.n	8002190 <CheckForBoundaries+0x24>
	{
		RightYPos = 0;
 8002180:	4b45      	ldr	r3, [pc, #276]	; (8002298 <CheckForBoundaries+0x12c>)
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
		RightYSpeed = 0;
 8002188:	4b44      	ldr	r3, [pc, #272]	; (800229c <CheckForBoundaries+0x130>)
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
	}
	if(RightYPos > 270)
 8002190:	4b41      	ldr	r3, [pc, #260]	; (8002298 <CheckForBoundaries+0x12c>)
 8002192:	edd3 7a00 	vldr	s15, [r3]
 8002196:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80022a0 <CheckForBoundaries+0x134>
 800219a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800219e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a2:	dd06      	ble.n	80021b2 <CheckForBoundaries+0x46>
	{
		RightYPos = 270;
 80021a4:	4b3c      	ldr	r3, [pc, #240]	; (8002298 <CheckForBoundaries+0x12c>)
 80021a6:	4a3f      	ldr	r2, [pc, #252]	; (80022a4 <CheckForBoundaries+0x138>)
 80021a8:	601a      	str	r2, [r3, #0]
		RightYSpeed = 0;
 80021aa:	4b3c      	ldr	r3, [pc, #240]	; (800229c <CheckForBoundaries+0x130>)
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
	}

	if(LeftYPos < 0)
 80021b2:	4b3d      	ldr	r3, [pc, #244]	; (80022a8 <CheckForBoundaries+0x13c>)
 80021b4:	edd3 7a00 	vldr	s15, [r3]
 80021b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c0:	d507      	bpl.n	80021d2 <CheckForBoundaries+0x66>
	{
		LeftYPos = 0;
 80021c2:	4b39      	ldr	r3, [pc, #228]	; (80022a8 <CheckForBoundaries+0x13c>)
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
		LeftYSpeed = 0;
 80021ca:	4b38      	ldr	r3, [pc, #224]	; (80022ac <CheckForBoundaries+0x140>)
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
	}
	if(LeftYPos > 270)
 80021d2:	4b35      	ldr	r3, [pc, #212]	; (80022a8 <CheckForBoundaries+0x13c>)
 80021d4:	edd3 7a00 	vldr	s15, [r3]
 80021d8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80022a0 <CheckForBoundaries+0x134>
 80021dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e4:	dd06      	ble.n	80021f4 <CheckForBoundaries+0x88>
	{
		LeftYPos = 270;
 80021e6:	4b30      	ldr	r3, [pc, #192]	; (80022a8 <CheckForBoundaries+0x13c>)
 80021e8:	4a2e      	ldr	r2, [pc, #184]	; (80022a4 <CheckForBoundaries+0x138>)
 80021ea:	601a      	str	r2, [r3, #0]
		LeftYSpeed = 0;
 80021ec:	4b2f      	ldr	r3, [pc, #188]	; (80022ac <CheckForBoundaries+0x140>)
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
	}

	if(BallXPos <= BALL_DIAMETER)
 80021f4:	4b2e      	ldr	r3, [pc, #184]	; (80022b0 <CheckForBoundaries+0x144>)
 80021f6:	edd3 7a00 	vldr	s15, [r3]
 80021fa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002206:	d80e      	bhi.n	8002226 <CheckForBoundaries+0xba>
	{
		score++;
 8002208:	4b2a      	ldr	r3, [pc, #168]	; (80022b4 <CheckForBoundaries+0x148>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	3301      	adds	r3, #1
 800220e:	4a29      	ldr	r2, [pc, #164]	; (80022b4 <CheckForBoundaries+0x148>)
 8002210:	6013      	str	r3, [r2, #0]
		BallXSpeed = 2;
 8002212:	4b29      	ldr	r3, [pc, #164]	; (80022b8 <CheckForBoundaries+0x14c>)
 8002214:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002218:	601a      	str	r2, [r3, #0]
		BallXPos = 120;
 800221a:	4b25      	ldr	r3, [pc, #148]	; (80022b0 <CheckForBoundaries+0x144>)
 800221c:	4a27      	ldr	r2, [pc, #156]	; (80022bc <CheckForBoundaries+0x150>)
 800221e:	601a      	str	r2, [r3, #0]
		BallYPos = 160;
 8002220:	4b27      	ldr	r3, [pc, #156]	; (80022c0 <CheckForBoundaries+0x154>)
 8002222:	4a28      	ldr	r2, [pc, #160]	; (80022c4 <CheckForBoundaries+0x158>)
 8002224:	601a      	str	r2, [r3, #0]
	}
	if(BallXPos >= 240 - BALL_DIAMETER)
 8002226:	4b22      	ldr	r3, [pc, #136]	; (80022b0 <CheckForBoundaries+0x144>)
 8002228:	edd3 7a00 	vldr	s15, [r3]
 800222c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80022c8 <CheckForBoundaries+0x15c>
 8002230:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002238:	db0e      	blt.n	8002258 <CheckForBoundaries+0xec>
	{
		score--;
 800223a:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <CheckForBoundaries+0x148>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	3b01      	subs	r3, #1
 8002240:	4a1c      	ldr	r2, [pc, #112]	; (80022b4 <CheckForBoundaries+0x148>)
 8002242:	6013      	str	r3, [r2, #0]
		BallXSpeed = -2;
 8002244:	4b1c      	ldr	r3, [pc, #112]	; (80022b8 <CheckForBoundaries+0x14c>)
 8002246:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800224a:	601a      	str	r2, [r3, #0]
		BallXPos = 120;
 800224c:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <CheckForBoundaries+0x144>)
 800224e:	4a1b      	ldr	r2, [pc, #108]	; (80022bc <CheckForBoundaries+0x150>)
 8002250:	601a      	str	r2, [r3, #0]
		BallYPos = 160;
 8002252:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <CheckForBoundaries+0x154>)
 8002254:	4a1b      	ldr	r2, [pc, #108]	; (80022c4 <CheckForBoundaries+0x158>)
 8002256:	601a      	str	r2, [r3, #0]
	}
	if(BallYPos <= BALL_DIAMETER || BallYPos >= 320 - BALL_DIAMETER)
 8002258:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <CheckForBoundaries+0x154>)
 800225a:	edd3 7a00 	vldr	s15, [r3]
 800225e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002262:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800226a:	d909      	bls.n	8002280 <CheckForBoundaries+0x114>
 800226c:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <CheckForBoundaries+0x154>)
 800226e:	edd3 7a00 	vldr	s15, [r3]
 8002272:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80022cc <CheckForBoundaries+0x160>
 8002276:	eef4 7ac7 	vcmpe.f32	s15, s14
 800227a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227e:	db07      	blt.n	8002290 <CheckForBoundaries+0x124>
	{
		BallYSpeed = -BallYSpeed;
 8002280:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <CheckForBoundaries+0x164>)
 8002282:	edd3 7a00 	vldr	s15, [r3]
 8002286:	eef1 7a67 	vneg.f32	s15, s15
 800228a:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <CheckForBoundaries+0x164>)
 800228c:	edc3 7a00 	vstr	s15, [r3]
	}

	CheckForCollisions();
 8002290:	f7ff fdb6 	bl	8001e00 <CheckForCollisions>
}
 8002294:	bf00      	nop
 8002296:	bd80      	pop	{r7, pc}
 8002298:	2000000c 	.word	0x2000000c
 800229c:	20000854 	.word	0x20000854
 80022a0:	43870000 	.word	0x43870000
 80022a4:	43870000 	.word	0x43870000
 80022a8:	20000004 	.word	0x20000004
 80022ac:	20000850 	.word	0x20000850
 80022b0:	20000010 	.word	0x20000010
 80022b4:	20000864 	.word	0x20000864
 80022b8:	20000018 	.word	0x20000018
 80022bc:	42f00000 	.word	0x42f00000
 80022c0:	20000014 	.word	0x20000014
 80022c4:	43200000 	.word	0x43200000
 80022c8:	43660000 	.word	0x43660000
 80022cc:	439b0000 	.word	0x439b0000
 80022d0:	2000001c 	.word	0x2000001c

080022d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80022d4:	b5b0      	push	{r4, r5, r7, lr}
 80022d6:	b08c      	sub	sp, #48	; 0x30
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
	//char line3[MAX_LINE_LENGTH];

  /* Infinite loop */
  for(;;)
  {
	  osDelay(33);
 80022dc:	2021      	movs	r0, #33	; 0x21
 80022de:	f008 f950 	bl	800a582 <osDelay>
	  RightYSpeed += AngleX / 50.0;
 80022e2:	4b5b      	ldr	r3, [pc, #364]	; (8002450 <StartDefaultTask+0x17c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe f93e 	bl	8000568 <__aeabi_f2d>
 80022ec:	4604      	mov	r4, r0
 80022ee:	460d      	mov	r5, r1
 80022f0:	4b58      	ldr	r3, [pc, #352]	; (8002454 <StartDefaultTask+0x180>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe f937 	bl	8000568 <__aeabi_f2d>
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	4b56      	ldr	r3, [pc, #344]	; (8002458 <StartDefaultTask+0x184>)
 8002300:	f7fe fab4 	bl	800086c <__aeabi_ddiv>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4620      	mov	r0, r4
 800230a:	4629      	mov	r1, r5
 800230c:	f7fd ffce 	bl	80002ac <__adddf3>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4610      	mov	r0, r2
 8002316:	4619      	mov	r1, r3
 8002318:	f7fe fc76 	bl	8000c08 <__aeabi_d2f>
 800231c:	4603      	mov	r3, r0
 800231e:	4a4c      	ldr	r2, [pc, #304]	; (8002450 <StartDefaultTask+0x17c>)
 8002320:	6013      	str	r3, [r2, #0]

	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8002322:	2101      	movs	r1, #1
 8002324:	484d      	ldr	r0, [pc, #308]	; (800245c <StartDefaultTask+0x188>)
 8002326:	f004 f84d 	bl	80063c4 <HAL_GPIO_ReadPin>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00f      	beq.n	8002350 <StartDefaultTask+0x7c>
	  {
		  AngleX = 0;
 8002330:	4b48      	ldr	r3, [pc, #288]	; (8002454 <StartDefaultTask+0x180>)
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
		  AngleY = 0;
 8002338:	4b49      	ldr	r3, [pc, #292]	; (8002460 <StartDefaultTask+0x18c>)
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
		  AngleZ = 0;
 8002340:	4b48      	ldr	r3, [pc, #288]	; (8002464 <StartDefaultTask+0x190>)
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	601a      	str	r2, [r3, #0]

		  RightYSpeed = 0;
 8002348:	4b41      	ldr	r3, [pc, #260]	; (8002450 <StartDefaultTask+0x17c>)
 800234a:	f04f 0200 	mov.w	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
	  }

	  sprintf(line0, "%d", score);
 8002350:	4b45      	ldr	r3, [pc, #276]	; (8002468 <StartDefaultTask+0x194>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	f107 031c 	add.w	r3, r7, #28
 8002358:	4944      	ldr	r1, [pc, #272]	; (800246c <StartDefaultTask+0x198>)
 800235a:	4618      	mov	r0, r3
 800235c:	f00a fc22 	bl	800cba4 <siprintf>
	  //sprintf(line1, "%.5f", BallXSpeed);
	  //sprintf(line2, "%.5f", y_average);
	  //sprintf(line3, "%.5f", z_average);

	  RightYPos += RightYSpeed;
 8002360:	4b43      	ldr	r3, [pc, #268]	; (8002470 <StartDefaultTask+0x19c>)
 8002362:	ed93 7a00 	vldr	s14, [r3]
 8002366:	4b3a      	ldr	r3, [pc, #232]	; (8002450 <StartDefaultTask+0x17c>)
 8002368:	edd3 7a00 	vldr	s15, [r3]
 800236c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002370:	4b3f      	ldr	r3, [pc, #252]	; (8002470 <StartDefaultTask+0x19c>)
 8002372:	edc3 7a00 	vstr	s15, [r3]
	  LeftYPos += LeftYSpeed;
 8002376:	4b3f      	ldr	r3, [pc, #252]	; (8002474 <StartDefaultTask+0x1a0>)
 8002378:	ed93 7a00 	vldr	s14, [r3]
 800237c:	4b3e      	ldr	r3, [pc, #248]	; (8002478 <StartDefaultTask+0x1a4>)
 800237e:	edd3 7a00 	vldr	s15, [r3]
 8002382:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002386:	4b3b      	ldr	r3, [pc, #236]	; (8002474 <StartDefaultTask+0x1a0>)
 8002388:	edc3 7a00 	vstr	s15, [r3]
	  BallXPos += BallXSpeed;
 800238c:	4b3b      	ldr	r3, [pc, #236]	; (800247c <StartDefaultTask+0x1a8>)
 800238e:	ed93 7a00 	vldr	s14, [r3]
 8002392:	4b3b      	ldr	r3, [pc, #236]	; (8002480 <StartDefaultTask+0x1ac>)
 8002394:	edd3 7a00 	vldr	s15, [r3]
 8002398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800239c:	4b37      	ldr	r3, [pc, #220]	; (800247c <StartDefaultTask+0x1a8>)
 800239e:	edc3 7a00 	vstr	s15, [r3]
	  BallYPos += BallYSpeed;
 80023a2:	4b38      	ldr	r3, [pc, #224]	; (8002484 <StartDefaultTask+0x1b0>)
 80023a4:	ed93 7a00 	vldr	s14, [r3]
 80023a8:	4b37      	ldr	r3, [pc, #220]	; (8002488 <StartDefaultTask+0x1b4>)
 80023aa:	edd3 7a00 	vldr	s15, [r3]
 80023ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b2:	4b34      	ldr	r3, [pc, #208]	; (8002484 <StartDefaultTask+0x1b0>)
 80023b4:	edc3 7a00 	vstr	s15, [r3]
	  CheckForBoundaries();
 80023b8:	f7ff fed8 	bl	800216c <CheckForBoundaries>

	  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80023bc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80023c0:	f001 fede 	bl	8004180 <BSP_LCD_Clear>
	  BSP_LCD_DisplayStringAtLine(0, line0);
 80023c4:	f107 031c 	add.w	r3, r7, #28
 80023c8:	4619      	mov	r1, r3
 80023ca:	2000      	movs	r0, #0
 80023cc:	f002 f802 	bl	80043d4 <BSP_LCD_DisplayStringAtLine>
	  //BSP_LCD_DisplayStringAtLine(1, line1);
	  //BSP_LCD_DisplayStringAtLine(2, line2);
	  //BSP_LCD_DisplayStringAtLine(3, line3);
	  BSP_LCD_FillCircle(BallXPos, BallYPos, BALL_DIAMETER);
 80023d0:	4b2a      	ldr	r3, [pc, #168]	; (800247c <StartDefaultTask+0x1a8>)
 80023d2:	edd3 7a00 	vldr	s15, [r3]
 80023d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023da:	ee17 3a90 	vmov	r3, s15
 80023de:	b29b      	uxth	r3, r3
 80023e0:	4a28      	ldr	r2, [pc, #160]	; (8002484 <StartDefaultTask+0x1b0>)
 80023e2:	edd2 7a00 	vldr	s15, [r2]
 80023e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023ea:	ee17 2a90 	vmov	r2, s15
 80023ee:	b291      	uxth	r1, r2
 80023f0:	220a      	movs	r2, #10
 80023f2:	4618      	mov	r0, r3
 80023f4:	f002 f988 	bl	8004708 <BSP_LCD_FillCircle>
	  BSP_LCD_FillRect( LeftXPos, LeftYPos, 10, 50);
 80023f8:	4b24      	ldr	r3, [pc, #144]	; (800248c <StartDefaultTask+0x1b8>)
 80023fa:	edd3 7a00 	vldr	s15, [r3]
 80023fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002402:	ee17 3a90 	vmov	r3, s15
 8002406:	b298      	uxth	r0, r3
 8002408:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <StartDefaultTask+0x1a0>)
 800240a:	edd3 7a00 	vldr	s15, [r3]
 800240e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002412:	ee17 3a90 	vmov	r3, s15
 8002416:	b299      	uxth	r1, r3
 8002418:	2332      	movs	r3, #50	; 0x32
 800241a:	220a      	movs	r2, #10
 800241c:	f002 f91a 	bl	8004654 <BSP_LCD_FillRect>
	  BSP_LCD_FillRect( RightXPos, RightYPos, 10, 50);
 8002420:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <StartDefaultTask+0x1bc>)
 8002422:	edd3 7a00 	vldr	s15, [r3]
 8002426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800242a:	ee17 3a90 	vmov	r3, s15
 800242e:	b298      	uxth	r0, r3
 8002430:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <StartDefaultTask+0x19c>)
 8002432:	edd3 7a00 	vldr	s15, [r3]
 8002436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800243a:	ee17 3a90 	vmov	r3, s15
 800243e:	b299      	uxth	r1, r3
 8002440:	2332      	movs	r3, #50	; 0x32
 8002442:	220a      	movs	r2, #10
 8002444:	f002 f906 	bl	8004654 <BSP_LCD_FillRect>
	  vTaskDelay(8);
 8002448:	2008      	movs	r0, #8
 800244a:	f008 fb19 	bl	800aa80 <vTaskDelay>
	  osDelay(33);
 800244e:	e745      	b.n	80022dc <StartDefaultTask+0x8>
 8002450:	20000854 	.word	0x20000854
 8002454:	2000085c 	.word	0x2000085c
 8002458:	40490000 	.word	0x40490000
 800245c:	40020000 	.word	0x40020000
 8002460:	20000858 	.word	0x20000858
 8002464:	20000860 	.word	0x20000860
 8002468:	20000864 	.word	0x20000864
 800246c:	080104cc 	.word	0x080104cc
 8002470:	2000000c 	.word	0x2000000c
 8002474:	20000004 	.word	0x20000004
 8002478:	20000850 	.word	0x20000850
 800247c:	20000010 	.word	0x20000010
 8002480:	20000018 	.word	0x20000018
 8002484:	20000014 	.word	0x20000014
 8002488:	2000001c 	.word	0x2000001c
 800248c:	20000000 	.word	0x20000000
 8002490:	20000008 	.word	0x20000008

08002494 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a04      	ldr	r2, [pc, #16]	; (80024b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d101      	bne.n	80024aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80024a6:	f002 fda7 	bl	8004ff8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40001000 	.word	0x40001000

080024b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024bc:	b672      	cpsid	i
}
 80024be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024c0:	e7fe      	b.n	80024c0 <Error_Handler+0x8>

080024c2 <pid_init>:
*
* Created on: 09.03.2018
* Author: Wojciech Domski 
*/
#include "pid.h"
void pid_init(cpid_t * pid, float p, float i, float d, uint8_t f, int32_t dt_ms) {
 80024c2:	b480      	push	{r7}
 80024c4:	b089      	sub	sp, #36	; 0x24
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6178      	str	r0, [r7, #20]
 80024ca:	ed87 0a04 	vstr	s0, [r7, #16]
 80024ce:	edc7 0a03 	vstr	s1, [r7, #12]
 80024d2:	ed87 1a02 	vstr	s2, [r7, #8]
 80024d6:	460b      	mov	r3, r1
 80024d8:	603a      	str	r2, [r7, #0]
 80024da:	71fb      	strb	r3, [r7, #7]
    uint32_t k;
    pid->power = 1;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2201      	movs	r2, #1
 80024e0:	635a      	str	r2, [r3, #52]	; 0x34

    for (k = 0; k < f; ++k) pid->power = pid->power * 2;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	e007      	b.n	80024f8 <pid_init+0x36>
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ec:	005a      	lsls	r2, r3, #1
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	635a      	str	r2, [r3, #52]	; 0x34
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3301      	adds	r3, #1
 80024f6:	61fb      	str	r3, [r7, #28]
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d3f3      	bcc.n	80024e8 <pid_init+0x26>

    pid->f = f;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	79fa      	ldrb	r2, [r7, #7]
 8002504:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    pid->p = (int32_t) (p * pid->power);
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800250c:	ee07 3a90 	vmov	s15, r3
 8002510:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002514:	edd7 7a04 	vldr	s15, [r7, #16]
 8002518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800251c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002520:	ee17 2a90 	vmov	r2, s15
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	601a      	str	r2, [r3, #0]
    pid->i = (int32_t) (i * pid->power);
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252c:	ee07 3a90 	vmov	s15, r3
 8002530:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002534:	edd7 7a03 	vldr	s15, [r7, #12]
 8002538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002540:	ee17 2a90 	vmov	r2, s15
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	605a      	str	r2, [r3, #4]
    pid->d = (int32_t) (d * pid->power);
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254c:	ee07 3a90 	vmov	s15, r3
 8002550:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002554:	edd7 7a02 	vldr	s15, [r7, #8]
 8002558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800255c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002560:	ee17 2a90 	vmov	r2, s15
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	609a      	str	r2, [r3, #8]
    pid->p_val = 0;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	2200      	movs	r2, #0
 800256c:	60da      	str	r2, [r3, #12]
    pid->i_val = 0;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2200      	movs	r2, #0
 8002572:	611a      	str	r2, [r3, #16]
    pid->d_val = 0;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2200      	movs	r2, #0
 8002578:	615a      	str	r2, [r3, #20]
    pid->p_max = INT32_MAX;
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002580:	619a      	str	r2, [r3, #24]
    pid->p_min = INT32_MIN;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002588:	625a      	str	r2, [r3, #36]	; 0x24
    pid->i_max = INT32_MAX;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002590:	61da      	str	r2, [r3, #28]
    pid->i_min = INT32_MIN;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002598:	629a      	str	r2, [r3, #40]	; 0x28
    pid->d_max = INT32_MAX;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80025a0:	621a      	str	r2, [r3, #32]
    pid->d_min = INT32_MIN;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80025a8:	62da      	str	r2, [r3, #44]	; 0x2c
    pid->e_last = 0;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2200      	movs	r2, #0
 80025ae:	641a      	str	r2, [r3, #64]	; 0x40
    pid->sum = 0;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	2200      	movs	r2, #0
 80025b4:	645a      	str	r2, [r3, #68]	; 0x44
    pid->total_max = INT32_MAX;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80025bc:	649a      	str	r2, [r3, #72]	; 0x48
    pid->total_min = INT32_MIN;
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80025c4:	64da      	str	r2, [r3, #76]	; 0x4c
    pid->dt_ms = dt_ms;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	655a      	str	r2, [r3, #84]	; 0x54
}
 80025cc:	bf00      	nop
 80025ce:	3724      	adds	r7, #36	; 0x24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <pid_calc>:

int32_t pid_calc(cpid_t * pid, int32_t mv, int32_t dv) {
 80025d8:	b480      	push	{r7}
 80025da:	b08b      	sub	sp, #44	; 0x2c
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
    int32_t p, i, d, e, total;
    pid->mv = mv;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	63da      	str	r2, [r3, #60]	; 0x3c
    pid->dv = dv;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	639a      	str	r2, [r3, #56]	; 0x38

    //UZUPELNIJ WYLICZANIE BLEDU
    e = dv - mv;
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	617b      	str	r3, [r7, #20]

    //UZUPELNIJ WYLICZANIE SYGNALU PRZEZ CZLON PROPORCJONALNY
    p = pid->p * e;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	fb02 f303 	mul.w	r3, r2, r3
 8002602:	627b      	str	r3, [r7, #36]	; 0x24

    if (p > pid->p_max) p = pid->p_max;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800260a:	429a      	cmp	r2, r3
 800260c:	dd03      	ble.n	8002616 <pid_calc+0x3e>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
 8002614:	e007      	b.n	8002626 <pid_calc+0x4e>
    else if (p < pid->p_min) p = pid->p_min;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800261c:	429a      	cmp	r2, r3
 800261e:	da02      	bge.n	8002626 <pid_calc+0x4e>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	627b      	str	r3, [r7, #36]	; 0x24

    pid->p_val = p >> pid->f;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800262c:	461a      	mov	r2, r3
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	fa43 f202 	asr.w	r2, r3, r2
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	60da      	str	r2, [r3, #12]
    i = pid->sum;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263c:	623b      	str	r3, [r7, #32]

    //UZUPELNIJ WYLICZANIE SYGNALU PRZEZ CZLON CALKUJACY
    //PAMIETAJ O SKALOWANIU CZASU WYKONYWANIA PETLI DO SEKUND
    i += pid->dt_ms * pid->i * e / 1000;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	6852      	ldr	r2, [r2, #4]
 8002646:	fb02 f303 	mul.w	r3, r2, r3
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	fb02 f303 	mul.w	r3, r2, r3
 8002650:	4a3d      	ldr	r2, [pc, #244]	; (8002748 <pid_calc+0x170>)
 8002652:	fb82 1203 	smull	r1, r2, r2, r3
 8002656:	1192      	asrs	r2, r2, #6
 8002658:	17db      	asrs	r3, r3, #31
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	6a3a      	ldr	r2, [r7, #32]
 800265e:	4413      	add	r3, r2
 8002660:	623b      	str	r3, [r7, #32]

    if (i > pid->i_max) i = pid->i_max;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	6a3a      	ldr	r2, [r7, #32]
 8002668:	429a      	cmp	r2, r3
 800266a:	dd03      	ble.n	8002674 <pid_calc+0x9c>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	623b      	str	r3, [r7, #32]
 8002672:	e007      	b.n	8002684 <pid_calc+0xac>
    else if (i < pid->i_min) i = pid->i_min;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002678:	6a3a      	ldr	r2, [r7, #32]
 800267a:	429a      	cmp	r2, r3
 800267c:	da02      	bge.n	8002684 <pid_calc+0xac>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002682:	623b      	str	r3, [r7, #32]

    pid->sum = i;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a3a      	ldr	r2, [r7, #32]
 8002688:	645a      	str	r2, [r3, #68]	; 0x44
    pid->i_val = i >> pid->f;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002690:	461a      	mov	r2, r3
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	fa43 f202 	asr.w	r2, r3, r2
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	611a      	str	r2, [r3, #16]

    //UZUPELNIJ WYLICZANIE SYGNALU PRZEZ CZLON ROZNICZKUJACEGO
    //PAMIETAJ O SKALOWANIU CZASU WYKONYWANIA PETLI DO SEKUND
    d = pid->d * (e - pid->e_last) * 1000 / pid->dt_ms;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026a4:	6979      	ldr	r1, [r7, #20]
 80026a6:	1a8a      	subs	r2, r1, r2
 80026a8:	fb02 f303 	mul.w	r3, r2, r3
 80026ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026b0:	fb03 f202 	mul.w	r2, r3, r2
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80026bc:	61fb      	str	r3, [r7, #28]
    
    if (d > pid->d_max) d = pid->d_max;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	dd03      	ble.n	80026d0 <pid_calc+0xf8>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	61fb      	str	r3, [r7, #28]
 80026ce:	e007      	b.n	80026e0 <pid_calc+0x108>
    else if (d < pid->d_min) d = pid->d_min;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	69fa      	ldr	r2, [r7, #28]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	da02      	bge.n	80026e0 <pid_calc+0x108>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	61fb      	str	r3, [r7, #28]

    pid->d_val = d >> pid->f;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026e6:	461a      	mov	r2, r3
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	fa43 f202 	asr.w	r2, r3, r2
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	615a      	str	r2, [r3, #20]
    total = p + i + d;
 80026f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	4413      	add	r3, r2
 80026f8:	69fa      	ldr	r2, [r7, #28]
 80026fa:	4413      	add	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]

    if (total > pid->total_max) total = pid->total_max;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	429a      	cmp	r2, r3
 8002706:	dd03      	ble.n	8002710 <pid_calc+0x138>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800270c:	61bb      	str	r3, [r7, #24]
 800270e:	e007      	b.n	8002720 <pid_calc+0x148>
    else if (total < pid->total_min) total = pid->total_min;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	429a      	cmp	r2, r3
 8002718:	da02      	bge.n	8002720 <pid_calc+0x148>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271e:	61bb      	str	r3, [r7, #24]

    pid->control = total >> pid->f;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002726:	461a      	mov	r2, r3
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	fa43 f202 	asr.w	r2, r3, r2
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	651a      	str	r2, [r3, #80]	; 0x50
    pid->e_last = e;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	641a      	str	r2, [r3, #64]	; 0x40

    return pid->control;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 800273c:	4618      	mov	r0, r3
 800273e:	372c      	adds	r7, #44	; 0x2c
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	10624dd3 	.word	0x10624dd3

0800274c <pid_scale>:

 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	ed87 0a00 	vstr	s0, [r7]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275c:	ee07 3a90 	vmov	s15, r3
 8002760:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002764:	edd7 7a00 	vldr	s15, [r7]
 8002768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800276c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002770:	ee17 3a90 	vmov	r3, s15
 8002774:	4618      	mov	r0, r3
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	607b      	str	r3, [r7, #4]
 800278a:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <HAL_MspInit+0x54>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	4a11      	ldr	r2, [pc, #68]	; (80027d4 <HAL_MspInit+0x54>)
 8002790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002794:	6453      	str	r3, [r2, #68]	; 0x44
 8002796:	4b0f      	ldr	r3, [pc, #60]	; (80027d4 <HAL_MspInit+0x54>)
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800279e:	607b      	str	r3, [r7, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	603b      	str	r3, [r7, #0]
 80027a6:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <HAL_MspInit+0x54>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	4a0a      	ldr	r2, [pc, #40]	; (80027d4 <HAL_MspInit+0x54>)
 80027ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b0:	6413      	str	r3, [r2, #64]	; 0x40
 80027b2:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <HAL_MspInit+0x54>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ba:	603b      	str	r3, [r7, #0]
 80027bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027be:	2200      	movs	r2, #0
 80027c0:	210f      	movs	r1, #15
 80027c2:	f06f 0001 	mvn.w	r0, #1
 80027c6:	f002 fd13 	bl	80051f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ca:	bf00      	nop
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40023800 	.word	0x40023800

080027d8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a0b      	ldr	r2, [pc, #44]	; (8002814 <HAL_CRC_MspInit+0x3c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d10d      	bne.n	8002806 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <HAL_CRC_MspInit+0x40>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	4a09      	ldr	r2, [pc, #36]	; (8002818 <HAL_CRC_MspInit+0x40>)
 80027f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027f8:	6313      	str	r3, [r2, #48]	; 0x30
 80027fa:	4b07      	ldr	r3, [pc, #28]	; (8002818 <HAL_CRC_MspInit+0x40>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002806:	bf00      	nop
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40023000 	.word	0x40023000
 8002818:	40023800 	.word	0x40023800

0800281c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a0e      	ldr	r2, [pc, #56]	; (8002864 <HAL_DMA2D_MspInit+0x48>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d115      	bne.n	800285a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	4b0d      	ldr	r3, [pc, #52]	; (8002868 <HAL_DMA2D_MspInit+0x4c>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	4a0c      	ldr	r2, [pc, #48]	; (8002868 <HAL_DMA2D_MspInit+0x4c>)
 8002838:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800283c:	6313      	str	r3, [r2, #48]	; 0x30
 800283e:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <HAL_DMA2D_MspInit+0x4c>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800284a:	2200      	movs	r2, #0
 800284c:	2105      	movs	r1, #5
 800284e:	205a      	movs	r0, #90	; 0x5a
 8002850:	f002 fcce 	bl	80051f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002854:	205a      	movs	r0, #90	; 0x5a
 8002856:	f002 fce7 	bl	8005228 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800285a:	bf00      	nop
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	4002b000 	.word	0x4002b000
 8002868:	40023800 	.word	0x40023800

0800286c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08a      	sub	sp, #40	; 0x28
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002874:	f107 0314 	add.w	r3, r7, #20
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	605a      	str	r2, [r3, #4]
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	60da      	str	r2, [r3, #12]
 8002882:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a29      	ldr	r2, [pc, #164]	; (8002930 <HAL_I2C_MspInit+0xc4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d14b      	bne.n	8002926 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	4b28      	ldr	r3, [pc, #160]	; (8002934 <HAL_I2C_MspInit+0xc8>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	4a27      	ldr	r2, [pc, #156]	; (8002934 <HAL_I2C_MspInit+0xc8>)
 8002898:	f043 0304 	orr.w	r3, r3, #4
 800289c:	6313      	str	r3, [r2, #48]	; 0x30
 800289e:	4b25      	ldr	r3, [pc, #148]	; (8002934 <HAL_I2C_MspInit+0xc8>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	4b21      	ldr	r3, [pc, #132]	; (8002934 <HAL_I2C_MspInit+0xc8>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	4a20      	ldr	r2, [pc, #128]	; (8002934 <HAL_I2C_MspInit+0xc8>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ba:	4b1e      	ldr	r3, [pc, #120]	; (8002934 <HAL_I2C_MspInit+0xc8>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80028c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028cc:	2312      	movs	r3, #18
 80028ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028d0:	2301      	movs	r3, #1
 80028d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d4:	2300      	movs	r3, #0
 80028d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028d8:	2304      	movs	r3, #4
 80028da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80028dc:	f107 0314 	add.w	r3, r7, #20
 80028e0:	4619      	mov	r1, r3
 80028e2:	4815      	ldr	r0, [pc, #84]	; (8002938 <HAL_I2C_MspInit+0xcc>)
 80028e4:	f003 fab6 	bl	8005e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80028e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028ee:	2312      	movs	r3, #18
 80028f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028f2:	2301      	movs	r3, #1
 80028f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f6:	2300      	movs	r3, #0
 80028f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028fa:	2304      	movs	r3, #4
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80028fe:	f107 0314 	add.w	r3, r7, #20
 8002902:	4619      	mov	r1, r3
 8002904:	480d      	ldr	r0, [pc, #52]	; (800293c <HAL_I2C_MspInit+0xd0>)
 8002906:	f003 faa5 	bl	8005e54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <HAL_I2C_MspInit+0xc8>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	4a08      	ldr	r2, [pc, #32]	; (8002934 <HAL_I2C_MspInit+0xc8>)
 8002914:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002918:	6413      	str	r3, [r2, #64]	; 0x40
 800291a:	4b06      	ldr	r3, [pc, #24]	; (8002934 <HAL_I2C_MspInit+0xc8>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002926:	bf00      	nop
 8002928:	3728      	adds	r7, #40	; 0x28
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40005c00 	.word	0x40005c00
 8002934:	40023800 	.word	0x40023800
 8002938:	40020800 	.word	0x40020800
 800293c:	40020000 	.word	0x40020000

08002940 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b09a      	sub	sp, #104	; 0x68
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002948:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800295c:	2230      	movs	r2, #48	; 0x30
 800295e:	2100      	movs	r1, #0
 8002960:	4618      	mov	r0, r3
 8002962:	f009 f988 	bl	800bc76 <memset>
  if(hltdc->Instance==LTDC)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a85      	ldr	r2, [pc, #532]	; (8002b80 <HAL_LTDC_MspInit+0x240>)
 800296c:	4293      	cmp	r3, r2
 800296e:	f040 8103 	bne.w	8002b78 <HAL_LTDC_MspInit+0x238>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002972:	2308      	movs	r3, #8
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002976:	23c0      	movs	r3, #192	; 0xc0
 8002978:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800297a:	2304      	movs	r3, #4
 800297c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 800297e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002982:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002988:	4618      	mov	r0, r3
 800298a:	f004 ffaf 	bl	80078ec <HAL_RCCEx_PeriphCLKConfig>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002994:	f7ff fd90 	bl	80024b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002998:	2300      	movs	r3, #0
 800299a:	623b      	str	r3, [r7, #32]
 800299c:	4b79      	ldr	r3, [pc, #484]	; (8002b84 <HAL_LTDC_MspInit+0x244>)
 800299e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a0:	4a78      	ldr	r2, [pc, #480]	; (8002b84 <HAL_LTDC_MspInit+0x244>)
 80029a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029a6:	6453      	str	r3, [r2, #68]	; 0x44
 80029a8:	4b76      	ldr	r3, [pc, #472]	; (8002b84 <HAL_LTDC_MspInit+0x244>)
 80029aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029b0:	623b      	str	r3, [r7, #32]
 80029b2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029b4:	2300      	movs	r3, #0
 80029b6:	61fb      	str	r3, [r7, #28]
 80029b8:	4b72      	ldr	r3, [pc, #456]	; (8002b84 <HAL_LTDC_MspInit+0x244>)
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	4a71      	ldr	r2, [pc, #452]	; (8002b84 <HAL_LTDC_MspInit+0x244>)
 80029be:	f043 0320 	orr.w	r3, r3, #32
 80029c2:	6313      	str	r3, [r2, #48]	; 0x30
 80029c4:	4b6f      	ldr	r3, [pc, #444]	; (8002b84 <HAL_LTDC_MspInit+0x244>)
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	f003 0320 	and.w	r3, r3, #32
 80029cc:	61fb      	str	r3, [r7, #28]
 80029ce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d0:	2300      	movs	r3, #0
 80029d2:	61bb      	str	r3, [r7, #24]
 80029d4:	4b6b      	ldr	r3, [pc, #428]	; (8002b84 <HAL_LTDC_MspInit+0x244>)
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	4a6a      	ldr	r2, [pc, #424]	; (8002b84 <HAL_LTDC_MspInit+0x244>)
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	6313      	str	r3, [r2, #48]	; 0x30
 80029e0:	4b68      	ldr	r3, [pc, #416]	; (8002b84 <HAL_LTDC_MspInit+0x244>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	4b64      	ldr	r3, [pc, #400]	; (8002b84 <HAL_LTDC_MspInit+0x244>)
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	4a63      	ldr	r2, [pc, #396]	; (8002b84 <HAL_LTDC_MspInit+0x244>)
 80029f6:	f043 0302 	orr.w	r3, r3, #2
 80029fa:	6313      	str	r3, [r2, #48]	; 0x30
 80029fc:	4b61      	ldr	r3, [pc, #388]	; (8002b84 <HAL_LTDC_MspInit+0x244>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a08:	2300      	movs	r3, #0
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	4b5d      	ldr	r3, [pc, #372]	; (8002b84 <HAL_LTDC_MspInit+0x244>)
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	4a5c      	ldr	r2, [pc, #368]	; (8002b84 <HAL_LTDC_MspInit+0x244>)
 8002a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a16:	6313      	str	r3, [r2, #48]	; 0x30
 8002a18:	4b5a      	ldr	r3, [pc, #360]	; (8002b84 <HAL_LTDC_MspInit+0x244>)
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a20:	613b      	str	r3, [r7, #16]
 8002a22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a24:	2300      	movs	r3, #0
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	4b56      	ldr	r3, [pc, #344]	; (8002b84 <HAL_LTDC_MspInit+0x244>)
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2c:	4a55      	ldr	r2, [pc, #340]	; (8002b84 <HAL_LTDC_MspInit+0x244>)
 8002a2e:	f043 0304 	orr.w	r3, r3, #4
 8002a32:	6313      	str	r3, [r2, #48]	; 0x30
 8002a34:	4b53      	ldr	r3, [pc, #332]	; (8002b84 <HAL_LTDC_MspInit+0x244>)
 8002a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a40:	2300      	movs	r3, #0
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	4b4f      	ldr	r3, [pc, #316]	; (8002b84 <HAL_LTDC_MspInit+0x244>)
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	4a4e      	ldr	r2, [pc, #312]	; (8002b84 <HAL_LTDC_MspInit+0x244>)
 8002a4a:	f043 0308 	orr.w	r3, r3, #8
 8002a4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a50:	4b4c      	ldr	r3, [pc, #304]	; (8002b84 <HAL_LTDC_MspInit+0x244>)
 8002a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002a5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a60:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a62:	2302      	movs	r3, #2
 8002a64:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a6e:	230e      	movs	r3, #14
 8002a70:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002a72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a76:	4619      	mov	r1, r3
 8002a78:	4843      	ldr	r0, [pc, #268]	; (8002b88 <HAL_LTDC_MspInit+0x248>)
 8002a7a:	f003 f9eb 	bl	8005e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002a7e:	f641 0358 	movw	r3, #6232	; 0x1858
 8002a82:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a84:	2302      	movs	r3, #2
 8002a86:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002a90:	230e      	movs	r3, #14
 8002a92:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a98:	4619      	mov	r1, r3
 8002a9a:	483c      	ldr	r0, [pc, #240]	; (8002b8c <HAL_LTDC_MspInit+0x24c>)
 8002a9c:	f003 f9da 	bl	8005e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aac:	2300      	movs	r3, #0
 8002aae:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002ab0:	2309      	movs	r3, #9
 8002ab2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4835      	ldr	r0, [pc, #212]	; (8002b90 <HAL_LTDC_MspInit+0x250>)
 8002abc:	f003 f9ca 	bl	8005e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002ac0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002ac4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ad2:	230e      	movs	r3, #14
 8002ad4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ada:	4619      	mov	r1, r3
 8002adc:	482c      	ldr	r0, [pc, #176]	; (8002b90 <HAL_LTDC_MspInit+0x250>)
 8002ade:	f003 f9b9 	bl	8005e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002ae2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002ae6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af0:	2300      	movs	r3, #0
 8002af2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002af4:	230e      	movs	r3, #14
 8002af6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002af8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002afc:	4619      	mov	r1, r3
 8002afe:	4825      	ldr	r0, [pc, #148]	; (8002b94 <HAL_LTDC_MspInit+0x254>)
 8002b00:	f003 f9a8 	bl	8005e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002b04:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002b08:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b12:	2300      	movs	r3, #0
 8002b14:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b16:	230e      	movs	r3, #14
 8002b18:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b1a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b1e:	4619      	mov	r1, r3
 8002b20:	481d      	ldr	r0, [pc, #116]	; (8002b98 <HAL_LTDC_MspInit+0x258>)
 8002b22:	f003 f997 	bl	8005e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002b26:	2348      	movs	r3, #72	; 0x48
 8002b28:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b32:	2300      	movs	r3, #0
 8002b34:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b36:	230e      	movs	r3, #14
 8002b38:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4816      	ldr	r0, [pc, #88]	; (8002b9c <HAL_LTDC_MspInit+0x25c>)
 8002b42:	f003 f987 	bl	8005e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002b46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b4a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b54:	2300      	movs	r3, #0
 8002b56:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002b58:	2309      	movs	r3, #9
 8002b5a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b60:	4619      	mov	r1, r3
 8002b62:	480c      	ldr	r0, [pc, #48]	; (8002b94 <HAL_LTDC_MspInit+0x254>)
 8002b64:	f003 f976 	bl	8005e54 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2105      	movs	r1, #5
 8002b6c:	2058      	movs	r0, #88	; 0x58
 8002b6e:	f002 fb3f 	bl	80051f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002b72:	2058      	movs	r0, #88	; 0x58
 8002b74:	f002 fb58 	bl	8005228 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002b78:	bf00      	nop
 8002b7a:	3768      	adds	r7, #104	; 0x68
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40016800 	.word	0x40016800
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40021400 	.word	0x40021400
 8002b8c:	40020000 	.word	0x40020000
 8002b90:	40020400 	.word	0x40020400
 8002b94:	40021800 	.word	0x40021800
 8002b98:	40020800 	.word	0x40020800
 8002b9c:	40020c00 	.word	0x40020c00

08002ba0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	; 0x28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba8:	f107 0314 	add.w	r3, r7, #20
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
 8002bb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a19      	ldr	r2, [pc, #100]	; (8002c24 <HAL_SPI_MspInit+0x84>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d12c      	bne.n	8002c1c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	4b18      	ldr	r3, [pc, #96]	; (8002c28 <HAL_SPI_MspInit+0x88>)
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bca:	4a17      	ldr	r2, [pc, #92]	; (8002c28 <HAL_SPI_MspInit+0x88>)
 8002bcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bd2:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <HAL_SPI_MspInit+0x88>)
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <HAL_SPI_MspInit+0x88>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	4a10      	ldr	r2, [pc, #64]	; (8002c28 <HAL_SPI_MspInit+0x88>)
 8002be8:	f043 0320 	orr.w	r3, r3, #32
 8002bec:	6313      	str	r3, [r2, #48]	; 0x30
 8002bee:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <HAL_SPI_MspInit+0x88>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002bfa:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c00:	2302      	movs	r3, #2
 8002c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002c0c:	2305      	movs	r3, #5
 8002c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c10:	f107 0314 	add.w	r3, r7, #20
 8002c14:	4619      	mov	r1, r3
 8002c16:	4805      	ldr	r0, [pc, #20]	; (8002c2c <HAL_SPI_MspInit+0x8c>)
 8002c18:	f003 f91c 	bl	8005e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002c1c:	bf00      	nop
 8002c1e:	3728      	adds	r7, #40	; 0x28
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40015000 	.word	0x40015000
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	40021400 	.word	0x40021400

08002c30 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a08      	ldr	r2, [pc, #32]	; (8002c60 <HAL_SPI_MspDeInit+0x30>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d10a      	bne.n	8002c58 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002c42:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <HAL_SPI_MspDeInit+0x34>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	4a07      	ldr	r2, [pc, #28]	; (8002c64 <HAL_SPI_MspDeInit+0x34>)
 8002c48:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002c4c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002c4e:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002c52:	4805      	ldr	r0, [pc, #20]	; (8002c68 <HAL_SPI_MspDeInit+0x38>)
 8002c54:	f003 faaa 	bl	80061ac <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002c58:	bf00      	nop
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40015000 	.word	0x40015000
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40021400 	.word	0x40021400

08002c6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a0b      	ldr	r2, [pc, #44]	; (8002ca8 <HAL_TIM_Base_MspInit+0x3c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d10d      	bne.n	8002c9a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <HAL_TIM_Base_MspInit+0x40>)
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	4a09      	ldr	r2, [pc, #36]	; (8002cac <HAL_TIM_Base_MspInit+0x40>)
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c8e:	4b07      	ldr	r3, [pc, #28]	; (8002cac <HAL_TIM_Base_MspInit+0x40>)
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002c9a:	bf00      	nop
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40010000 	.word	0x40010000
 8002cac:	40023800 	.word	0x40023800

08002cb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08a      	sub	sp, #40	; 0x28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb8:	f107 0314 	add.w	r3, r7, #20
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	60da      	str	r2, [r3, #12]
 8002cc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1d      	ldr	r2, [pc, #116]	; (8002d44 <HAL_UART_MspInit+0x94>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d134      	bne.n	8002d3c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	4b1c      	ldr	r3, [pc, #112]	; (8002d48 <HAL_UART_MspInit+0x98>)
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	4a1b      	ldr	r2, [pc, #108]	; (8002d48 <HAL_UART_MspInit+0x98>)
 8002cdc:	f043 0310 	orr.w	r3, r3, #16
 8002ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ce2:	4b19      	ldr	r3, [pc, #100]	; (8002d48 <HAL_UART_MspInit+0x98>)
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	f003 0310 	and.w	r3, r3, #16
 8002cea:	613b      	str	r3, [r7, #16]
 8002cec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <HAL_UART_MspInit+0x98>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	4a14      	ldr	r2, [pc, #80]	; (8002d48 <HAL_UART_MspInit+0x98>)
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfe:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <HAL_UART_MspInit+0x98>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002d0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d10:	2302      	movs	r3, #2
 8002d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d1c:	2307      	movs	r3, #7
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d20:	f107 0314 	add.w	r3, r7, #20
 8002d24:	4619      	mov	r1, r3
 8002d26:	4809      	ldr	r0, [pc, #36]	; (8002d4c <HAL_UART_MspInit+0x9c>)
 8002d28:	f003 f894 	bl	8005e54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2105      	movs	r1, #5
 8002d30:	2025      	movs	r0, #37	; 0x25
 8002d32:	f002 fa5d 	bl	80051f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d36:	2025      	movs	r0, #37	; 0x25
 8002d38:	f002 fa76 	bl	8005228 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d3c:	bf00      	nop
 8002d3e:	3728      	adds	r7, #40	; 0x28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40011000 	.word	0x40011000
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40020000 	.word	0x40020000

08002d50 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002d56:	1d3b      	adds	r3, r7, #4
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	605a      	str	r2, [r3, #4]
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	60da      	str	r2, [r3, #12]
 8002d62:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002d64:	4b3b      	ldr	r3, [pc, #236]	; (8002e54 <HAL_FMC_MspInit+0x104>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d16f      	bne.n	8002e4c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002d6c:	4b39      	ldr	r3, [pc, #228]	; (8002e54 <HAL_FMC_MspInit+0x104>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	603b      	str	r3, [r7, #0]
 8002d76:	4b38      	ldr	r3, [pc, #224]	; (8002e58 <HAL_FMC_MspInit+0x108>)
 8002d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7a:	4a37      	ldr	r2, [pc, #220]	; (8002e58 <HAL_FMC_MspInit+0x108>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	6393      	str	r3, [r2, #56]	; 0x38
 8002d82:	4b35      	ldr	r3, [pc, #212]	; (8002e58 <HAL_FMC_MspInit+0x108>)
 8002d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	603b      	str	r3, [r7, #0]
 8002d8c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002d8e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002d92:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d94:	2302      	movs	r3, #2
 8002d96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002da0:	230c      	movs	r3, #12
 8002da2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002da4:	1d3b      	adds	r3, r7, #4
 8002da6:	4619      	mov	r1, r3
 8002da8:	482c      	ldr	r0, [pc, #176]	; (8002e5c <HAL_FMC_MspInit+0x10c>)
 8002daa:	f003 f853 	bl	8005e54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002dae:	2301      	movs	r3, #1
 8002db0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db2:	2302      	movs	r3, #2
 8002db4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002dbe:	230c      	movs	r3, #12
 8002dc0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002dc2:	1d3b      	adds	r3, r7, #4
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4826      	ldr	r0, [pc, #152]	; (8002e60 <HAL_FMC_MspInit+0x110>)
 8002dc8:	f003 f844 	bl	8005e54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002dcc:	f248 1333 	movw	r3, #33075	; 0x8133
 8002dd0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002dde:	230c      	movs	r3, #12
 8002de0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002de2:	1d3b      	adds	r3, r7, #4
 8002de4:	4619      	mov	r1, r3
 8002de6:	481f      	ldr	r0, [pc, #124]	; (8002e64 <HAL_FMC_MspInit+0x114>)
 8002de8:	f003 f834 	bl	8005e54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002dec:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002df0:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df2:	2302      	movs	r3, #2
 8002df4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002dfe:	230c      	movs	r3, #12
 8002e00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e02:	1d3b      	adds	r3, r7, #4
 8002e04:	4619      	mov	r1, r3
 8002e06:	4818      	ldr	r0, [pc, #96]	; (8002e68 <HAL_FMC_MspInit+0x118>)
 8002e08:	f003 f824 	bl	8005e54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002e0c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002e10:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e12:	2302      	movs	r3, #2
 8002e14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e1e:	230c      	movs	r3, #12
 8002e20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e22:	1d3b      	adds	r3, r7, #4
 8002e24:	4619      	mov	r1, r3
 8002e26:	4811      	ldr	r0, [pc, #68]	; (8002e6c <HAL_FMC_MspInit+0x11c>)
 8002e28:	f003 f814 	bl	8005e54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002e2c:	2360      	movs	r3, #96	; 0x60
 8002e2e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e30:	2302      	movs	r3, #2
 8002e32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e3c:	230c      	movs	r3, #12
 8002e3e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e40:	1d3b      	adds	r3, r7, #4
 8002e42:	4619      	mov	r1, r3
 8002e44:	480a      	ldr	r0, [pc, #40]	; (8002e70 <HAL_FMC_MspInit+0x120>)
 8002e46:	f003 f805 	bl	8005e54 <HAL_GPIO_Init>
 8002e4a:	e000      	b.n	8002e4e <HAL_FMC_MspInit+0xfe>
    return;
 8002e4c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	200008c8 	.word	0x200008c8
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	40021400 	.word	0x40021400
 8002e60:	40020800 	.word	0x40020800
 8002e64:	40021800 	.word	0x40021800
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	40020c00 	.word	0x40020c00
 8002e70:	40020400 	.word	0x40020400

08002e74 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002e7c:	f7ff ff68 	bl	8002d50 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08c      	sub	sp, #48	; 0x30
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002e98:	2200      	movs	r2, #0
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	2036      	movs	r0, #54	; 0x36
 8002e9e:	f002 f9a7 	bl	80051f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ea2:	2036      	movs	r0, #54	; 0x36
 8002ea4:	f002 f9c0 	bl	8005228 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	4b1f      	ldr	r3, [pc, #124]	; (8002f2c <HAL_InitTick+0xa4>)
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	4a1e      	ldr	r2, [pc, #120]	; (8002f2c <HAL_InitTick+0xa4>)
 8002eb2:	f043 0310 	orr.w	r3, r3, #16
 8002eb6:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb8:	4b1c      	ldr	r3, [pc, #112]	; (8002f2c <HAL_InitTick+0xa4>)
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ec4:	f107 0210 	add.w	r2, r7, #16
 8002ec8:	f107 0314 	add.w	r3, r7, #20
 8002ecc:	4611      	mov	r1, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f004 fcda 	bl	8007888 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002ed4:	f004 fcb0 	bl	8007838 <HAL_RCC_GetPCLK1Freq>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee0:	4a13      	ldr	r2, [pc, #76]	; (8002f30 <HAL_InitTick+0xa8>)
 8002ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee6:	0c9b      	lsrs	r3, r3, #18
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002eec:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <HAL_InitTick+0xac>)
 8002eee:	4a12      	ldr	r2, [pc, #72]	; (8002f38 <HAL_InitTick+0xb0>)
 8002ef0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002ef2:	4b10      	ldr	r3, [pc, #64]	; (8002f34 <HAL_InitTick+0xac>)
 8002ef4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ef8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002efa:	4a0e      	ldr	r2, [pc, #56]	; (8002f34 <HAL_InitTick+0xac>)
 8002efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002f00:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <HAL_InitTick+0xac>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f06:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <HAL_InitTick+0xac>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002f0c:	4809      	ldr	r0, [pc, #36]	; (8002f34 <HAL_InitTick+0xac>)
 8002f0e:	f005 fd1d 	bl	800894c <HAL_TIM_Base_Init>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d104      	bne.n	8002f22 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002f18:	4806      	ldr	r0, [pc, #24]	; (8002f34 <HAL_InitTick+0xac>)
 8002f1a:	f005 fd67 	bl	80089ec <HAL_TIM_Base_Start_IT>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	e000      	b.n	8002f24 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3730      	adds	r7, #48	; 0x30
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	431bde83 	.word	0x431bde83
 8002f34:	200008cc 	.word	0x200008cc
 8002f38:	40001000 	.word	0x40001000

08002f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f40:	e7fe      	b.n	8002f40 <NMI_Handler+0x4>

08002f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f42:	b480      	push	{r7}
 8002f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f46:	e7fe      	b.n	8002f46 <HardFault_Handler+0x4>

08002f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f4c:	e7fe      	b.n	8002f4c <MemManage_Handler+0x4>

08002f4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f52:	e7fe      	b.n	8002f52 <BusFault_Handler+0x4>

08002f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f58:	e7fe      	b.n	8002f58 <UsageFault_Handler+0x4>

08002f5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f6c:	4802      	ldr	r0, [pc, #8]	; (8002f78 <USART1_IRQHandler+0x10>)
 8002f6e:	f006 fa4f 	bl	8009410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f72:	bf00      	nop
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000734 	.word	0x20000734

08002f7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f80:	4802      	ldr	r0, [pc, #8]	; (8002f8c <TIM6_DAC_IRQHandler+0x10>)
 8002f82:	f005 fda3 	bl	8008acc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	200008cc 	.word	0x200008cc

08002f90 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002f94:	4802      	ldr	r0, [pc, #8]	; (8002fa0 <LTDC_IRQHandler+0x10>)
 8002f96:	f003 fcd7 	bl	8006948 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	200005ec 	.word	0x200005ec

08002fa4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002fa8:	4802      	ldr	r0, [pc, #8]	; (8002fb4 <DMA2D_IRQHandler+0x10>)
 8002faa:	f002 fd14 	bl	80059d6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002fae:	bf00      	nop
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000558 	.word	0x20000558

08002fb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
	return 1;
 8002fbc:	2301      	movs	r3, #1
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <_kill>:

int _kill(int pid, int sig)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002fd2:	f008 fd1f 	bl	800ba14 <__errno>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2216      	movs	r2, #22
 8002fda:	601a      	str	r2, [r3, #0]
	return -1;
 8002fdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <_exit>:

void _exit (int status)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7ff ffe7 	bl	8002fc8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ffa:	e7fe      	b.n	8002ffa <_exit+0x12>

08002ffc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	e00a      	b.n	8003024 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800300e:	f3af 8000 	nop.w
 8003012:	4601      	mov	r1, r0
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	60ba      	str	r2, [r7, #8]
 800301a:	b2ca      	uxtb	r2, r1
 800301c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	3301      	adds	r3, #1
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	429a      	cmp	r2, r3
 800302a:	dbf0      	blt.n	800300e <_read+0x12>
	}

return len;
 800302c:	687b      	ldr	r3, [r7, #4]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
	return -1;
 800303e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003042:	4618      	mov	r0, r3
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
 8003056:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800305e:	605a      	str	r2, [r3, #4]
	return 0;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <_isatty>:

int _isatty(int file)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
	return 1;
 8003076:	2301      	movs	r3, #1
}
 8003078:	4618      	mov	r0, r3
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
	return 0;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
	...

080030a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030a8:	4a14      	ldr	r2, [pc, #80]	; (80030fc <_sbrk+0x5c>)
 80030aa:	4b15      	ldr	r3, [pc, #84]	; (8003100 <_sbrk+0x60>)
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030b4:	4b13      	ldr	r3, [pc, #76]	; (8003104 <_sbrk+0x64>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d102      	bne.n	80030c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030bc:	4b11      	ldr	r3, [pc, #68]	; (8003104 <_sbrk+0x64>)
 80030be:	4a12      	ldr	r2, [pc, #72]	; (8003108 <_sbrk+0x68>)
 80030c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030c2:	4b10      	ldr	r3, [pc, #64]	; (8003104 <_sbrk+0x64>)
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4413      	add	r3, r2
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d207      	bcs.n	80030e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030d0:	f008 fca0 	bl	800ba14 <__errno>
 80030d4:	4603      	mov	r3, r0
 80030d6:	220c      	movs	r2, #12
 80030d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030da:	f04f 33ff 	mov.w	r3, #4294967295
 80030de:	e009      	b.n	80030f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030e0:	4b08      	ldr	r3, [pc, #32]	; (8003104 <_sbrk+0x64>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030e6:	4b07      	ldr	r3, [pc, #28]	; (8003104 <_sbrk+0x64>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4413      	add	r3, r2
 80030ee:	4a05      	ldr	r2, [pc, #20]	; (8003104 <_sbrk+0x64>)
 80030f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030f2:	68fb      	ldr	r3, [r7, #12]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20030000 	.word	0x20030000
 8003100:	00000400 	.word	0x00000400
 8003104:	20000914 	.word	0x20000914
 8003108:	20008cd8 	.word	0x20008cd8

0800310c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003110:	4b06      	ldr	r3, [pc, #24]	; (800312c <SystemInit+0x20>)
 8003112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003116:	4a05      	ldr	r2, [pc, #20]	; (800312c <SystemInit+0x20>)
 8003118:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800311c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003120:	bf00      	nop
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	e000ed00 	.word	0xe000ed00

08003130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003130:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003168 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003134:	480d      	ldr	r0, [pc, #52]	; (800316c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003136:	490e      	ldr	r1, [pc, #56]	; (8003170 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003138:	4a0e      	ldr	r2, [pc, #56]	; (8003174 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800313a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800313c:	e002      	b.n	8003144 <LoopCopyDataInit>

0800313e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800313e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003142:	3304      	adds	r3, #4

08003144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003148:	d3f9      	bcc.n	800313e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800314a:	4a0b      	ldr	r2, [pc, #44]	; (8003178 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800314c:	4c0b      	ldr	r4, [pc, #44]	; (800317c <LoopFillZerobss+0x26>)
  movs r3, #0
 800314e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003150:	e001      	b.n	8003156 <LoopFillZerobss>

08003152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003154:	3204      	adds	r2, #4

08003156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003158:	d3fb      	bcc.n	8003152 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800315a:	f7ff ffd7 	bl	800310c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800315e:	f008 fd55 	bl	800bc0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003162:	f7fd ff8d 	bl	8001080 <main>
  bx  lr    
 8003166:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003168:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800316c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003170:	2000027c 	.word	0x2000027c
  ldr r2, =_sidata
 8003174:	08012464 	.word	0x08012464
  ldr r2, =_sbss
 8003178:	2000027c 	.word	0x2000027c
  ldr r4, =_ebss
 800317c:	20008cd8 	.word	0x20008cd8

08003180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003180:	e7fe      	b.n	8003180 <ADC_IRQHandler>

08003182 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8003186:	f000 fc73 	bl	8003a70 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800318a:	20ca      	movs	r0, #202	; 0xca
 800318c:	f000 f95d 	bl	800344a <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8003190:	20c3      	movs	r0, #195	; 0xc3
 8003192:	f000 f967 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8003196:	2008      	movs	r0, #8
 8003198:	f000 f964 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 800319c:	2050      	movs	r0, #80	; 0x50
 800319e:	f000 f961 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80031a2:	20cf      	movs	r0, #207	; 0xcf
 80031a4:	f000 f951 	bl	800344a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80031a8:	2000      	movs	r0, #0
 80031aa:	f000 f95b 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80031ae:	20c1      	movs	r0, #193	; 0xc1
 80031b0:	f000 f958 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80031b4:	2030      	movs	r0, #48	; 0x30
 80031b6:	f000 f955 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80031ba:	20ed      	movs	r0, #237	; 0xed
 80031bc:	f000 f945 	bl	800344a <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80031c0:	2064      	movs	r0, #100	; 0x64
 80031c2:	f000 f94f 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80031c6:	2003      	movs	r0, #3
 80031c8:	f000 f94c 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80031cc:	2012      	movs	r0, #18
 80031ce:	f000 f949 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80031d2:	2081      	movs	r0, #129	; 0x81
 80031d4:	f000 f946 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80031d8:	20e8      	movs	r0, #232	; 0xe8
 80031da:	f000 f936 	bl	800344a <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80031de:	2085      	movs	r0, #133	; 0x85
 80031e0:	f000 f940 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80031e4:	2000      	movs	r0, #0
 80031e6:	f000 f93d 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80031ea:	2078      	movs	r0, #120	; 0x78
 80031ec:	f000 f93a 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80031f0:	20cb      	movs	r0, #203	; 0xcb
 80031f2:	f000 f92a 	bl	800344a <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80031f6:	2039      	movs	r0, #57	; 0x39
 80031f8:	f000 f934 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80031fc:	202c      	movs	r0, #44	; 0x2c
 80031fe:	f000 f931 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003202:	2000      	movs	r0, #0
 8003204:	f000 f92e 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8003208:	2034      	movs	r0, #52	; 0x34
 800320a:	f000 f92b 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800320e:	2002      	movs	r0, #2
 8003210:	f000 f928 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8003214:	20f7      	movs	r0, #247	; 0xf7
 8003216:	f000 f918 	bl	800344a <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800321a:	2020      	movs	r0, #32
 800321c:	f000 f922 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8003220:	20ea      	movs	r0, #234	; 0xea
 8003222:	f000 f912 	bl	800344a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003226:	2000      	movs	r0, #0
 8003228:	f000 f91c 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800322c:	2000      	movs	r0, #0
 800322e:	f000 f919 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8003232:	20b1      	movs	r0, #177	; 0xb1
 8003234:	f000 f909 	bl	800344a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003238:	2000      	movs	r0, #0
 800323a:	f000 f913 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800323e:	201b      	movs	r0, #27
 8003240:	f000 f910 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8003244:	20b6      	movs	r0, #182	; 0xb6
 8003246:	f000 f900 	bl	800344a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800324a:	200a      	movs	r0, #10
 800324c:	f000 f90a 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8003250:	20a2      	movs	r0, #162	; 0xa2
 8003252:	f000 f907 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8003256:	20c0      	movs	r0, #192	; 0xc0
 8003258:	f000 f8f7 	bl	800344a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800325c:	2010      	movs	r0, #16
 800325e:	f000 f901 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8003262:	20c1      	movs	r0, #193	; 0xc1
 8003264:	f000 f8f1 	bl	800344a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8003268:	2010      	movs	r0, #16
 800326a:	f000 f8fb 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 800326e:	20c5      	movs	r0, #197	; 0xc5
 8003270:	f000 f8eb 	bl	800344a <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8003274:	2045      	movs	r0, #69	; 0x45
 8003276:	f000 f8f5 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800327a:	2015      	movs	r0, #21
 800327c:	f000 f8f2 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8003280:	20c7      	movs	r0, #199	; 0xc7
 8003282:	f000 f8e2 	bl	800344a <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8003286:	2090      	movs	r0, #144	; 0x90
 8003288:	f000 f8ec 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 800328c:	2036      	movs	r0, #54	; 0x36
 800328e:	f000 f8dc 	bl	800344a <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8003292:	20c8      	movs	r0, #200	; 0xc8
 8003294:	f000 f8e6 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8003298:	20f2      	movs	r0, #242	; 0xf2
 800329a:	f000 f8d6 	bl	800344a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800329e:	2000      	movs	r0, #0
 80032a0:	f000 f8e0 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80032a4:	20b0      	movs	r0, #176	; 0xb0
 80032a6:	f000 f8d0 	bl	800344a <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80032aa:	20c2      	movs	r0, #194	; 0xc2
 80032ac:	f000 f8da 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80032b0:	20b6      	movs	r0, #182	; 0xb6
 80032b2:	f000 f8ca 	bl	800344a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80032b6:	200a      	movs	r0, #10
 80032b8:	f000 f8d4 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80032bc:	20a7      	movs	r0, #167	; 0xa7
 80032be:	f000 f8d1 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80032c2:	2027      	movs	r0, #39	; 0x27
 80032c4:	f000 f8ce 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80032c8:	2004      	movs	r0, #4
 80032ca:	f000 f8cb 	bl	8003464 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80032ce:	202a      	movs	r0, #42	; 0x2a
 80032d0:	f000 f8bb 	bl	800344a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80032d4:	2000      	movs	r0, #0
 80032d6:	f000 f8c5 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80032da:	2000      	movs	r0, #0
 80032dc:	f000 f8c2 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80032e0:	2000      	movs	r0, #0
 80032e2:	f000 f8bf 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80032e6:	20ef      	movs	r0, #239	; 0xef
 80032e8:	f000 f8bc 	bl	8003464 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80032ec:	202b      	movs	r0, #43	; 0x2b
 80032ee:	f000 f8ac 	bl	800344a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80032f2:	2000      	movs	r0, #0
 80032f4:	f000 f8b6 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80032f8:	2000      	movs	r0, #0
 80032fa:	f000 f8b3 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80032fe:	2001      	movs	r0, #1
 8003300:	f000 f8b0 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8003304:	203f      	movs	r0, #63	; 0x3f
 8003306:	f000 f8ad 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800330a:	20f6      	movs	r0, #246	; 0xf6
 800330c:	f000 f89d 	bl	800344a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8003310:	2001      	movs	r0, #1
 8003312:	f000 f8a7 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003316:	2000      	movs	r0, #0
 8003318:	f000 f8a4 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 800331c:	2006      	movs	r0, #6
 800331e:	f000 f8a1 	bl	8003464 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8003322:	202c      	movs	r0, #44	; 0x2c
 8003324:	f000 f891 	bl	800344a <ili9341_WriteReg>
  LCD_Delay(200);
 8003328:	20c8      	movs	r0, #200	; 0xc8
 800332a:	f000 fc8f 	bl	8003c4c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800332e:	2026      	movs	r0, #38	; 0x26
 8003330:	f000 f88b 	bl	800344a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8003334:	2001      	movs	r0, #1
 8003336:	f000 f895 	bl	8003464 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800333a:	20e0      	movs	r0, #224	; 0xe0
 800333c:	f000 f885 	bl	800344a <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8003340:	200f      	movs	r0, #15
 8003342:	f000 f88f 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8003346:	2029      	movs	r0, #41	; 0x29
 8003348:	f000 f88c 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 800334c:	2024      	movs	r0, #36	; 0x24
 800334e:	f000 f889 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8003352:	200c      	movs	r0, #12
 8003354:	f000 f886 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8003358:	200e      	movs	r0, #14
 800335a:	f000 f883 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800335e:	2009      	movs	r0, #9
 8003360:	f000 f880 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8003364:	204e      	movs	r0, #78	; 0x4e
 8003366:	f000 f87d 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800336a:	2078      	movs	r0, #120	; 0x78
 800336c:	f000 f87a 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8003370:	203c      	movs	r0, #60	; 0x3c
 8003372:	f000 f877 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8003376:	2009      	movs	r0, #9
 8003378:	f000 f874 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 800337c:	2013      	movs	r0, #19
 800337e:	f000 f871 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8003382:	2005      	movs	r0, #5
 8003384:	f000 f86e 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8003388:	2017      	movs	r0, #23
 800338a:	f000 f86b 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800338e:	2011      	movs	r0, #17
 8003390:	f000 f868 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003394:	2000      	movs	r0, #0
 8003396:	f000 f865 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800339a:	20e1      	movs	r0, #225	; 0xe1
 800339c:	f000 f855 	bl	800344a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80033a0:	2000      	movs	r0, #0
 80033a2:	f000 f85f 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80033a6:	2016      	movs	r0, #22
 80033a8:	f000 f85c 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80033ac:	201b      	movs	r0, #27
 80033ae:	f000 f859 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80033b2:	2004      	movs	r0, #4
 80033b4:	f000 f856 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80033b8:	2011      	movs	r0, #17
 80033ba:	f000 f853 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80033be:	2007      	movs	r0, #7
 80033c0:	f000 f850 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80033c4:	2031      	movs	r0, #49	; 0x31
 80033c6:	f000 f84d 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80033ca:	2033      	movs	r0, #51	; 0x33
 80033cc:	f000 f84a 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80033d0:	2042      	movs	r0, #66	; 0x42
 80033d2:	f000 f847 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80033d6:	2005      	movs	r0, #5
 80033d8:	f000 f844 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80033dc:	200c      	movs	r0, #12
 80033de:	f000 f841 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80033e2:	200a      	movs	r0, #10
 80033e4:	f000 f83e 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80033e8:	2028      	movs	r0, #40	; 0x28
 80033ea:	f000 f83b 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80033ee:	202f      	movs	r0, #47	; 0x2f
 80033f0:	f000 f838 	bl	8003464 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80033f4:	200f      	movs	r0, #15
 80033f6:	f000 f835 	bl	8003464 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80033fa:	2011      	movs	r0, #17
 80033fc:	f000 f825 	bl	800344a <ili9341_WriteReg>
  LCD_Delay(200);
 8003400:	20c8      	movs	r0, #200	; 0xc8
 8003402:	f000 fc23 	bl	8003c4c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8003406:	2029      	movs	r0, #41	; 0x29
 8003408:	f000 f81f 	bl	800344a <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800340c:	202c      	movs	r0, #44	; 0x2c
 800340e:	f000 f81c 	bl	800344a <ili9341_WriteReg>
}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}

08003416 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800341a:	f000 fb29 	bl	8003a70 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800341e:	2103      	movs	r1, #3
 8003420:	20d3      	movs	r0, #211	; 0xd3
 8003422:	f000 f82c 	bl	800347e <ili9341_ReadData>
 8003426:	4603      	mov	r3, r0
 8003428:	b29b      	uxth	r3, r3
}
 800342a:	4618      	mov	r0, r3
 800342c:	bd80      	pop	{r7, pc}

0800342e <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8003432:	2029      	movs	r0, #41	; 0x29
 8003434:	f000 f809 	bl	800344a <ili9341_WriteReg>
}
 8003438:	bf00      	nop
 800343a:	bd80      	pop	{r7, pc}

0800343c <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8003440:	2028      	movs	r0, #40	; 0x28
 8003442:	f000 f802 	bl	800344a <ili9341_WriteReg>
}
 8003446:	bf00      	nop
 8003448:	bd80      	pop	{r7, pc}

0800344a <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b082      	sub	sp, #8
 800344e:	af00      	add	r7, sp, #0
 8003450:	4603      	mov	r3, r0
 8003452:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fba4 	bl	8003ba4 <LCD_IO_WriteReg>
}
 800345c:	bf00      	nop
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800346e:	88fb      	ldrh	r3, [r7, #6]
 8003470:	4618      	mov	r0, r3
 8003472:	f000 fb75 	bl	8003b60 <LCD_IO_WriteData>
}
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	4603      	mov	r3, r0
 8003486:	460a      	mov	r2, r1
 8003488:	80fb      	strh	r3, [r7, #6]
 800348a:	4613      	mov	r3, r2
 800348c:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800348e:	797a      	ldrb	r2, [r7, #5]
 8003490:	88fb      	ldrh	r3, [r7, #6]
 8003492:	4611      	mov	r1, r2
 8003494:	4618      	mov	r0, r3
 8003496:	f000 fba7 	bl	8003be8 <LCD_IO_ReadData>
 800349a:	4603      	mov	r3, r0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80034a8:	23f0      	movs	r3, #240	; 0xf0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80034b8:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80034bc:	4618      	mov	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b084      	sub	sp, #16
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	4603      	mov	r3, r0
 80034ce:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80034d0:	2300      	movs	r3, #0
 80034d2:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 80034d4:	f000 fbc6 	bl	8003c64 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80034d8:	88fb      	ldrh	r3, [r7, #6]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80034de:	f107 030f 	add.w	r3, r7, #15
 80034e2:	2201      	movs	r2, #1
 80034e4:	2120      	movs	r1, #32
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fc08 	bl	8003cfc <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct >> 8);
 80034ec:	88fb      	ldrh	r3, [r7, #6]
 80034ee:	0a1b      	lsrs	r3, r3, #8
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80034f6:	f107 030f 	add.w	r3, r7, #15
 80034fa:	2201      	movs	r2, #1
 80034fc:	2123      	movs	r1, #35	; 0x23
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 fbfc 	bl	8003cfc <GYRO_IO_Write>
}
 8003504:	bf00      	nop
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
}
 8003510:	bf00      	nop
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 8003520:	f000 fba0 	bl	8003c64 <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8003524:	1dfb      	adds	r3, r7, #7
 8003526:	2201      	movs	r2, #1
 8003528:	210f      	movs	r1, #15
 800352a:	4618      	mov	r0, r3
 800352c:	f000 fc18 	bl	8003d60 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 8003530:	79fb      	ldrb	r3, [r7, #7]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8003540:	1dfb      	adds	r3, r7, #7
 8003542:	2201      	movs	r2, #1
 8003544:	2124      	movs	r1, #36	; 0x24
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fc0a 	bl	8003d60 <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800354c:	79fb      	ldrb	r3, [r7, #7]
 800354e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003552:	b2db      	uxtb	r3, r3
 8003554:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8003556:	1dfb      	adds	r3, r7, #7
 8003558:	2201      	movs	r2, #1
 800355a:	2124      	movs	r1, #36	; 0x24
 800355c:	4618      	mov	r0, r3
 800355e:	f000 fbcd 	bl	8003cfc <GYRO_IO_Write>
}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b084      	sub	sp, #16
 800356e:	af00      	add	r7, sp, #0
 8003570:	4603      	mov	r3, r0
 8003572:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003574:	2300      	movs	r3, #0
 8003576:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8003578:	88fb      	ldrh	r3, [r7, #6]
 800357a:	b2db      	uxtb	r3, r3
 800357c:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800357e:	f107 030f 	add.w	r3, r7, #15
 8003582:	2201      	movs	r2, #1
 8003584:	2120      	movs	r1, #32
 8003586:	4618      	mov	r0, r3
 8003588:	f000 fbb8 	bl	8003cfc <GYRO_IO_Write>
}
 800358c:	bf00      	nop
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800359e:	2300      	movs	r3, #0
 80035a0:	73fb      	strb	r3, [r7, #15]
 80035a2:	2300      	movs	r3, #0
 80035a4:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80035a6:	f107 030f 	add.w	r3, r7, #15
 80035aa:	2201      	movs	r2, #1
 80035ac:	2130      	movs	r1, #48	; 0x30
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 fbd6 	bl	8003d60 <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80035b4:	f107 030e 	add.w	r3, r7, #14
 80035b8:	2201      	movs	r2, #1
 80035ba:	2122      	movs	r1, #34	; 0x22
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 fbcf 	bl	8003d60 <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80035cc:	88fb      	ldrh	r3, [r7, #6]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	121b      	asrs	r3, r3, #8
 80035d2:	b25a      	sxtb	r2, r3
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
 80035d6:	b25b      	sxtb	r3, r3
 80035d8:	4313      	orrs	r3, r2
 80035da:	b25b      	sxtb	r3, r3
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 80035e0:	7bbb      	ldrb	r3, [r7, #14]
 80035e2:	f023 0320 	bic.w	r3, r3, #32
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 80035ea:	88fb      	ldrh	r3, [r7, #6]
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	7bbb      	ldrb	r3, [r7, #14]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80035f6:	f107 030f 	add.w	r3, r7, #15
 80035fa:	2201      	movs	r2, #1
 80035fc:	2130      	movs	r1, #48	; 0x30
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fb7c 	bl	8003cfc <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8003604:	f107 030e 	add.w	r3, r7, #14
 8003608:	2201      	movs	r2, #1
 800360a:	2122      	movs	r1, #34	; 0x22
 800360c:	4618      	mov	r0, r3
 800360e:	f000 fb75 	bl	8003cfc <GYRO_IO_Write>
}
 8003612:	bf00      	nop
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b084      	sub	sp, #16
 800361e:	af00      	add	r7, sp, #0
 8003620:	4603      	mov	r3, r0
 8003622:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8003624:	f107 030f 	add.w	r3, r7, #15
 8003628:	2201      	movs	r2, #1
 800362a:	2122      	movs	r1, #34	; 0x22
 800362c:	4618      	mov	r0, r3
 800362e:	f000 fb97 	bl	8003d60 <GYRO_IO_Read>

  if(IntSel == L3GD20_INT1)
 8003632:	79fb      	ldrb	r3, [r7, #7]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10a      	bne.n	800364e <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 8003638:	7bfb      	ldrb	r3, [r7, #15]
 800363a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800363e:	b2db      	uxtb	r3, r3
 8003640:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8003642:	7bfb      	ldrb	r3, [r7, #15]
 8003644:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003648:	b2db      	uxtb	r3, r3
 800364a:	73fb      	strb	r3, [r7, #15]
 800364c:	e00c      	b.n	8003668 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d109      	bne.n	8003668 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	f023 0308 	bic.w	r3, r3, #8
 800365a:	b2db      	uxtb	r3, r3
 800365c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	f043 0308 	orr.w	r3, r3, #8
 8003664:	b2db      	uxtb	r3, r3
 8003666:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8003668:	f107 030f 	add.w	r3, r7, #15
 800366c:	2201      	movs	r2, #1
 800366e:	2122      	movs	r1, #34	; 0x22
 8003670:	4618      	mov	r0, r3
 8003672:	f000 fb43 	bl	8003cfc <GYRO_IO_Write>
}
 8003676:	bf00      	nop
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b084      	sub	sp, #16
 8003682:	af00      	add	r7, sp, #0
 8003684:	4603      	mov	r3, r0
 8003686:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8003688:	f107 030f 	add.w	r3, r7, #15
 800368c:	2201      	movs	r2, #1
 800368e:	2122      	movs	r1, #34	; 0x22
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fb65 	bl	8003d60 <GYRO_IO_Read>

  if(IntSel == L3GD20_INT1)
 8003696:	79fb      	ldrb	r3, [r7, #7]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d107      	bne.n	80036ac <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	73fb      	strb	r3, [r7, #15]
 80036aa:	e009      	b.n	80036c0 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 80036ac:	79fb      	ldrb	r3, [r7, #7]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d106      	bne.n	80036c0 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
 80036b4:	f023 0308 	bic.w	r3, r3, #8
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80036c0:	f107 030f 	add.w	r3, r7, #15
 80036c4:	2201      	movs	r2, #1
 80036c6:	2122      	movs	r1, #34	; 0x22
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 fb17 	bl	8003cfc <GYRO_IO_Write>
}
 80036ce:	bf00      	nop
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	4603      	mov	r3, r0
 80036de:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80036e0:	f107 030f 	add.w	r3, r7, #15
 80036e4:	2201      	movs	r2, #1
 80036e6:	2121      	movs	r1, #33	; 0x21
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 fb39 	bl	8003d60 <GYRO_IO_Read>

  tmpreg &= 0xC0;
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
 80036f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80036f8:	7bfa      	ldrb	r2, [r7, #15]
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8003702:	f107 030f 	add.w	r3, r7, #15
 8003706:	2201      	movs	r2, #1
 8003708:	2121      	movs	r1, #33	; 0x21
 800370a:	4618      	mov	r0, r3
 800370c:	f000 faf6 	bl	8003cfc <GYRO_IO_Write>
}
 8003710:	bf00      	nop
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8003722:	f107 030f 	add.w	r3, r7, #15
 8003726:	2201      	movs	r2, #1
 8003728:	2124      	movs	r1, #36	; 0x24
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fb18 	bl	8003d60 <GYRO_IO_Read>

  tmpreg &= 0xEF;
 8003730:	7bfb      	ldrb	r3, [r7, #15]
 8003732:	f023 0310 	bic.w	r3, r3, #16
 8003736:	b2db      	uxtb	r3, r3
 8003738:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 800373a:	7bfa      	ldrb	r2, [r7, #15]
 800373c:	79fb      	ldrb	r3, [r7, #7]
 800373e:	4313      	orrs	r3, r2
 8003740:	b2db      	uxtb	r3, r3
 8003742:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8003744:	f107 030f 	add.w	r3, r7, #15
 8003748:	2201      	movs	r2, #1
 800374a:	2124      	movs	r1, #36	; 0x24
 800374c:	4618      	mov	r0, r3
 800374e:	f000 fad5 	bl	8003cfc <GYRO_IO_Write>
}
 8003752:	bf00      	nop
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08a      	sub	sp, #40	; 0x28
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8003764:	2300      	movs	r3, #0
 8003766:	61bb      	str	r3, [r7, #24]
 8003768:	2300      	movs	r3, #0
 800376a:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 800376c:	f107 0310 	add.w	r3, r7, #16
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8003780:	2300      	movs	r3, #0
 8003782:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8003784:	f107 030f 	add.w	r3, r7, #15
 8003788:	2201      	movs	r2, #1
 800378a:	2123      	movs	r1, #35	; 0x23
 800378c:	4618      	mov	r0, r3
 800378e:	f000 fae7 	bl	8003d60 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8003792:	f107 0318 	add.w	r3, r7, #24
 8003796:	2206      	movs	r2, #6
 8003798:	2128      	movs	r1, #40	; 0x28
 800379a:	4618      	mov	r0, r3
 800379c:	f000 fae0 	bl	8003d60 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d123      	bne.n	80037f2 <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 80037aa:	2300      	movs	r3, #0
 80037ac:	623b      	str	r3, [r7, #32]
 80037ae:	e01c      	b.n	80037ea <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	3301      	adds	r3, #1
 80037b6:	3328      	adds	r3, #40	; 0x28
 80037b8:	443b      	add	r3, r7
 80037ba:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	021b      	lsls	r3, r3, #8
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	3328      	adds	r3, #40	; 0x28
 80037ca:	443b      	add	r3, r7
 80037cc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	4413      	add	r3, r2
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	b21a      	sxth	r2, r3
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	3328      	adds	r3, #40	; 0x28
 80037de:	443b      	add	r3, r7
 80037e0:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	3301      	adds	r3, #1
 80037e8:	623b      	str	r3, [r7, #32]
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	dddf      	ble.n	80037b0 <L3GD20_ReadXYZAngRate+0x54>
 80037f0:	e022      	b.n	8003838 <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80037f2:	2300      	movs	r3, #0
 80037f4:	623b      	str	r3, [r7, #32]
 80037f6:	e01c      	b.n	8003832 <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	3328      	adds	r3, #40	; 0x28
 80037fe:	443b      	add	r3, r7
 8003800:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003804:	b29b      	uxth	r3, r3
 8003806:	021b      	lsls	r3, r3, #8
 8003808:	b29a      	uxth	r2, r3
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	3301      	adds	r3, #1
 8003810:	3328      	adds	r3, #40	; 0x28
 8003812:	443b      	add	r3, r7
 8003814:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003818:	b29b      	uxth	r3, r3
 800381a:	4413      	add	r3, r2
 800381c:	b29b      	uxth	r3, r3
 800381e:	b21a      	sxth	r2, r3
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	3328      	adds	r3, #40	; 0x28
 8003826:	443b      	add	r3, r7
 8003828:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	3301      	adds	r3, #1
 8003830:	623b      	str	r3, [r7, #32]
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	2b02      	cmp	r3, #2
 8003836:	dddf      	ble.n	80037f8 <L3GD20_ReadXYZAngRate+0x9c>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800383e:	2b20      	cmp	r3, #32
 8003840:	d00c      	beq.n	800385c <L3GD20_ReadXYZAngRate+0x100>
 8003842:	2b20      	cmp	r3, #32
 8003844:	dc0d      	bgt.n	8003862 <L3GD20_ReadXYZAngRate+0x106>
 8003846:	2b00      	cmp	r3, #0
 8003848:	d002      	beq.n	8003850 <L3GD20_ReadXYZAngRate+0xf4>
 800384a:	2b10      	cmp	r3, #16
 800384c:	d003      	beq.n	8003856 <L3GD20_ReadXYZAngRate+0xfa>
 800384e:	e008      	b.n	8003862 <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8003850:	4b15      	ldr	r3, [pc, #84]	; (80038a8 <L3GD20_ReadXYZAngRate+0x14c>)
 8003852:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8003854:	e005      	b.n	8003862 <L3GD20_ReadXYZAngRate+0x106>

  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8003856:	4b15      	ldr	r3, [pc, #84]	; (80038ac <L3GD20_ReadXYZAngRate+0x150>)
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800385a:	e002      	b.n	8003862 <L3GD20_ReadXYZAngRate+0x106>

  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 800385c:	4b14      	ldr	r3, [pc, #80]	; (80038b0 <L3GD20_ReadXYZAngRate+0x154>)
 800385e:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8003860:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8003862:	2300      	movs	r3, #0
 8003864:	623b      	str	r3, [r7, #32]
 8003866:	e016      	b.n	8003896 <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	3328      	adds	r3, #40	; 0x28
 800386e:	443b      	add	r3, r7
 8003870:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8003874:	ee07 3a90 	vmov	s15, r3
 8003878:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	4413      	add	r3, r2
 8003884:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800388c:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	3301      	adds	r3, #1
 8003894:	623b      	str	r3, [r7, #32]
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	2b02      	cmp	r3, #2
 800389a:	dde5      	ble.n	8003868 <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 800389c:	bf00      	nop
 800389e:	bf00      	nop
 80038a0:	3728      	adds	r7, #40	; 0x28
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	410c0000 	.word	0x410c0000
 80038ac:	418c0000 	.word	0x418c0000
 80038b0:	428c0000 	.word	0x428c0000

080038b4 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80038b8:	4819      	ldr	r0, [pc, #100]	; (8003920 <SPIx_Init+0x6c>)
 80038ba:	f004 ff08 	bl	80086ce <HAL_SPI_GetState>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d12b      	bne.n	800391c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80038c4:	4b16      	ldr	r3, [pc, #88]	; (8003920 <SPIx_Init+0x6c>)
 80038c6:	4a17      	ldr	r2, [pc, #92]	; (8003924 <SPIx_Init+0x70>)
 80038c8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80038ca:	4b15      	ldr	r3, [pc, #84]	; (8003920 <SPIx_Init+0x6c>)
 80038cc:	2218      	movs	r2, #24
 80038ce:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80038d0:	4b13      	ldr	r3, [pc, #76]	; (8003920 <SPIx_Init+0x6c>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80038d6:	4b12      	ldr	r3, [pc, #72]	; (8003920 <SPIx_Init+0x6c>)
 80038d8:	2200      	movs	r2, #0
 80038da:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80038dc:	4b10      	ldr	r3, [pc, #64]	; (8003920 <SPIx_Init+0x6c>)
 80038de:	2200      	movs	r2, #0
 80038e0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80038e2:	4b0f      	ldr	r3, [pc, #60]	; (8003920 <SPIx_Init+0x6c>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80038e8:	4b0d      	ldr	r3, [pc, #52]	; (8003920 <SPIx_Init+0x6c>)
 80038ea:	2207      	movs	r2, #7
 80038ec:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80038ee:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <SPIx_Init+0x6c>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80038f4:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <SPIx_Init+0x6c>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80038fa:	4b09      	ldr	r3, [pc, #36]	; (8003920 <SPIx_Init+0x6c>)
 80038fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003900:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8003902:	4b07      	ldr	r3, [pc, #28]	; (8003920 <SPIx_Init+0x6c>)
 8003904:	2200      	movs	r2, #0
 8003906:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003908:	4b05      	ldr	r3, [pc, #20]	; (8003920 <SPIx_Init+0x6c>)
 800390a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800390e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8003910:	4803      	ldr	r0, [pc, #12]	; (8003920 <SPIx_Init+0x6c>)
 8003912:	f000 f873 	bl	80039fc <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8003916:	4802      	ldr	r0, [pc, #8]	; (8003920 <SPIx_Init+0x6c>)
 8003918:	f004 fa39 	bl	8007d8e <HAL_SPI_Init>
  } 
}
 800391c:	bf00      	nop
 800391e:	bd80      	pop	{r7, pc}
 8003920:	20000918 	.word	0x20000918
 8003924:	40015000 	.word	0x40015000

08003928 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	b29a      	uxth	r2, r3
 800393a:	4b09      	ldr	r3, [pc, #36]	; (8003960 <SPIx_Read+0x38>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f107 0108 	add.w	r1, r7, #8
 8003942:	4808      	ldr	r0, [pc, #32]	; (8003964 <SPIx_Read+0x3c>)
 8003944:	f004 fc10 	bl	8008168 <HAL_SPI_Receive>
 8003948:	4603      	mov	r3, r0
 800394a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800394c:	7bfb      	ldrb	r3, [r7, #15]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003952:	f000 f847 	bl	80039e4 <SPIx_Error>
  }
  
  return readvalue;
 8003956:	68bb      	ldr	r3, [r7, #8]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20000090 	.word	0x20000090
 8003964:	20000918 	.word	0x20000918

08003968 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8003976:	4b09      	ldr	r3, [pc, #36]	; (800399c <SPIx_Write+0x34>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	1db9      	adds	r1, r7, #6
 800397c:	2201      	movs	r2, #1
 800397e:	4808      	ldr	r0, [pc, #32]	; (80039a0 <SPIx_Write+0x38>)
 8003980:	f004 fab6 	bl	8007ef0 <HAL_SPI_Transmit>
 8003984:	4603      	mov	r3, r0
 8003986:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800398e:	f000 f829 	bl	80039e4 <SPIx_Error>
  }
}
 8003992:	bf00      	nop
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	20000090 	.word	0x20000090
 80039a0:	20000918 	.word	0x20000918

080039a4 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	4603      	mov	r3, r0
 80039ac:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 80039ae:	2300      	movs	r3, #0
 80039b0:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 80039b2:	4b0a      	ldr	r3, [pc, #40]	; (80039dc <SPIx_WriteRead+0x38>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f107 020f 	add.w	r2, r7, #15
 80039ba:	1df9      	adds	r1, r7, #7
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	2301      	movs	r3, #1
 80039c0:	4807      	ldr	r0, [pc, #28]	; (80039e0 <SPIx_WriteRead+0x3c>)
 80039c2:	f004 fce2 	bl	800838a <HAL_SPI_TransmitReceive>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 80039cc:	f000 f80a 	bl	80039e4 <SPIx_Error>
  }
  
  return receivedbyte;
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20000090 	.word	0x20000090
 80039e0:	20000918 	.word	0x20000918

080039e4 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80039e8:	4803      	ldr	r0, [pc, #12]	; (80039f8 <SPIx_Error+0x14>)
 80039ea:	f004 fa59 	bl	8007ea0 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80039ee:	f7ff ff61 	bl	80038b4 <SPIx_Init>
}
 80039f2:	bf00      	nop
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000918 	.word	0x20000918

080039fc <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08a      	sub	sp, #40	; 0x28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8003a04:	2300      	movs	r3, #0
 8003a06:	613b      	str	r3, [r7, #16]
 8003a08:	4b17      	ldr	r3, [pc, #92]	; (8003a68 <SPIx_MspInit+0x6c>)
 8003a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0c:	4a16      	ldr	r2, [pc, #88]	; (8003a68 <SPIx_MspInit+0x6c>)
 8003a0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a12:	6453      	str	r3, [r2, #68]	; 0x44
 8003a14:	4b14      	ldr	r3, [pc, #80]	; (8003a68 <SPIx_MspInit+0x6c>)
 8003a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	4b10      	ldr	r3, [pc, #64]	; (8003a68 <SPIx_MspInit+0x6c>)
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a28:	4a0f      	ldr	r2, [pc, #60]	; (8003a68 <SPIx_MspInit+0x6c>)
 8003a2a:	f043 0320 	orr.w	r3, r3, #32
 8003a2e:	6313      	str	r3, [r2, #48]	; 0x30
 8003a30:	4b0d      	ldr	r3, [pc, #52]	; (8003a68 <SPIx_MspInit+0x6c>)
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	f003 0320 	and.w	r3, r3, #32
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8003a3c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8003a42:	2302      	movs	r3, #2
 8003a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8003a46:	2302      	movs	r3, #2
 8003a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8003a4e:	2305      	movs	r3, #5
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8003a52:	f107 0314 	add.w	r3, r7, #20
 8003a56:	4619      	mov	r1, r3
 8003a58:	4804      	ldr	r0, [pc, #16]	; (8003a6c <SPIx_MspInit+0x70>)
 8003a5a:	f002 f9fb 	bl	8005e54 <HAL_GPIO_Init>
}
 8003a5e:	bf00      	nop
 8003a60:	3728      	adds	r7, #40	; 0x28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	40021400 	.word	0x40021400

08003a70 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b088      	sub	sp, #32
 8003a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8003a76:	4b36      	ldr	r3, [pc, #216]	; (8003b50 <LCD_IO_Init+0xe0>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d164      	bne.n	8003b48 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8003a7e:	4b34      	ldr	r3, [pc, #208]	; (8003b50 <LCD_IO_Init+0xe0>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003a84:	2300      	movs	r3, #0
 8003a86:	60bb      	str	r3, [r7, #8]
 8003a88:	4b32      	ldr	r3, [pc, #200]	; (8003b54 <LCD_IO_Init+0xe4>)
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	4a31      	ldr	r2, [pc, #196]	; (8003b54 <LCD_IO_Init+0xe4>)
 8003a8e:	f043 0308 	orr.w	r3, r3, #8
 8003a92:	6313      	str	r3, [r2, #48]	; 0x30
 8003a94:	4b2f      	ldr	r3, [pc, #188]	; (8003b54 <LCD_IO_Init+0xe4>)
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003aa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003aa4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003aae:	2302      	movs	r3, #2
 8003ab0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003ab2:	f107 030c 	add.w	r3, r7, #12
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4827      	ldr	r0, [pc, #156]	; (8003b58 <LCD_IO_Init+0xe8>)
 8003aba:	f002 f9cb 	bl	8005e54 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8003abe:	2300      	movs	r3, #0
 8003ac0:	607b      	str	r3, [r7, #4]
 8003ac2:	4b24      	ldr	r3, [pc, #144]	; (8003b54 <LCD_IO_Init+0xe4>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	4a23      	ldr	r2, [pc, #140]	; (8003b54 <LCD_IO_Init+0xe4>)
 8003ac8:	f043 0308 	orr.w	r3, r3, #8
 8003acc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ace:	4b21      	ldr	r3, [pc, #132]	; (8003b54 <LCD_IO_Init+0xe4>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	607b      	str	r3, [r7, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ade:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003ae8:	2302      	movs	r3, #2
 8003aea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003aec:	f107 030c 	add.w	r3, r7, #12
 8003af0:	4619      	mov	r1, r3
 8003af2:	4819      	ldr	r0, [pc, #100]	; (8003b58 <LCD_IO_Init+0xe8>)
 8003af4:	f002 f9ae 	bl	8005e54 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003af8:	2300      	movs	r3, #0
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	4b15      	ldr	r3, [pc, #84]	; (8003b54 <LCD_IO_Init+0xe4>)
 8003afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b00:	4a14      	ldr	r2, [pc, #80]	; (8003b54 <LCD_IO_Init+0xe4>)
 8003b02:	f043 0304 	orr.w	r3, r3, #4
 8003b06:	6313      	str	r3, [r2, #48]	; 0x30
 8003b08:	4b12      	ldr	r3, [pc, #72]	; (8003b54 <LCD_IO_Init+0xe4>)
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	603b      	str	r3, [r7, #0]
 8003b12:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003b14:	2304      	movs	r3, #4
 8003b16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003b20:	2302      	movs	r3, #2
 8003b22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003b24:	f107 030c 	add.w	r3, r7, #12
 8003b28:	4619      	mov	r1, r3
 8003b2a:	480c      	ldr	r0, [pc, #48]	; (8003b5c <LCD_IO_Init+0xec>)
 8003b2c:	f002 f992 	bl	8005e54 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003b30:	2200      	movs	r2, #0
 8003b32:	2104      	movs	r1, #4
 8003b34:	4809      	ldr	r0, [pc, #36]	; (8003b5c <LCD_IO_Init+0xec>)
 8003b36:	f002 fc5d 	bl	80063f4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	2104      	movs	r1, #4
 8003b3e:	4807      	ldr	r0, [pc, #28]	; (8003b5c <LCD_IO_Init+0xec>)
 8003b40:	f002 fc58 	bl	80063f4 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8003b44:	f7ff feb6 	bl	80038b4 <SPIx_Init>
  }
}
 8003b48:	bf00      	nop
 8003b4a:	3720      	adds	r7, #32
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	20000970 	.word	0x20000970
 8003b54:	40023800 	.word	0x40023800
 8003b58:	40020c00 	.word	0x40020c00
 8003b5c:	40020800 	.word	0x40020800

08003b60 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	4603      	mov	r3, r0
 8003b68:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b70:	480a      	ldr	r0, [pc, #40]	; (8003b9c <LCD_IO_WriteData+0x3c>)
 8003b72:	f002 fc3f 	bl	80063f4 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8003b76:	2200      	movs	r2, #0
 8003b78:	2104      	movs	r1, #4
 8003b7a:	4809      	ldr	r0, [pc, #36]	; (8003ba0 <LCD_IO_WriteData+0x40>)
 8003b7c:	f002 fc3a 	bl	80063f4 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8003b80:	88fb      	ldrh	r3, [r7, #6]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff fef0 	bl	8003968 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003b88:	2201      	movs	r2, #1
 8003b8a:	2104      	movs	r1, #4
 8003b8c:	4804      	ldr	r0, [pc, #16]	; (8003ba0 <LCD_IO_WriteData+0x40>)
 8003b8e:	f002 fc31 	bl	80063f4 <HAL_GPIO_WritePin>
}
 8003b92:	bf00      	nop
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40020c00 	.word	0x40020c00
 8003ba0:	40020800 	.word	0x40020800

08003ba4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	4603      	mov	r3, r0
 8003bac:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bb4:	480a      	ldr	r0, [pc, #40]	; (8003be0 <LCD_IO_WriteReg+0x3c>)
 8003bb6:	f002 fc1d 	bl	80063f4 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003bba:	2200      	movs	r2, #0
 8003bbc:	2104      	movs	r1, #4
 8003bbe:	4809      	ldr	r0, [pc, #36]	; (8003be4 <LCD_IO_WriteReg+0x40>)
 8003bc0:	f002 fc18 	bl	80063f4 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff fecd 	bl	8003968 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003bce:	2201      	movs	r2, #1
 8003bd0:	2104      	movs	r1, #4
 8003bd2:	4804      	ldr	r0, [pc, #16]	; (8003be4 <LCD_IO_WriteReg+0x40>)
 8003bd4:	f002 fc0e 	bl	80063f4 <HAL_GPIO_WritePin>
}
 8003bd8:	bf00      	nop
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40020c00 	.word	0x40020c00
 8003be4:	40020800 	.word	0x40020800

08003be8 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	460a      	mov	r2, r1
 8003bf2:	80fb      	strh	r3, [r7, #6]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	2104      	movs	r1, #4
 8003c00:	4810      	ldr	r0, [pc, #64]	; (8003c44 <LCD_IO_ReadData+0x5c>)
 8003c02:	f002 fbf7 	bl	80063f4 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003c06:	2200      	movs	r2, #0
 8003c08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c0c:	480e      	ldr	r0, [pc, #56]	; (8003c48 <LCD_IO_ReadData+0x60>)
 8003c0e:	f002 fbf1 	bl	80063f4 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8003c12:	88fb      	ldrh	r3, [r7, #6]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff fea7 	bl	8003968 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8003c1a:	797b      	ldrb	r3, [r7, #5]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff fe83 	bl	8003928 <SPIx_Read>
 8003c22:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003c24:	2201      	movs	r2, #1
 8003c26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c2a:	4807      	ldr	r0, [pc, #28]	; (8003c48 <LCD_IO_ReadData+0x60>)
 8003c2c:	f002 fbe2 	bl	80063f4 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003c30:	2201      	movs	r2, #1
 8003c32:	2104      	movs	r1, #4
 8003c34:	4803      	ldr	r0, [pc, #12]	; (8003c44 <LCD_IO_ReadData+0x5c>)
 8003c36:	f002 fbdd 	bl	80063f4 <HAL_GPIO_WritePin>
  
  return readvalue;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40020800 	.word	0x40020800
 8003c48:	40020c00 	.word	0x40020c00

08003c4c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f001 f9ef 	bl	8005038 <HAL_Delay>
}
 8003c5a:	bf00      	nop
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	4b20      	ldr	r3, [pc, #128]	; (8003cf0 <GYRO_IO_Init+0x8c>)
 8003c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c72:	4a1f      	ldr	r2, [pc, #124]	; (8003cf0 <GYRO_IO_Init+0x8c>)
 8003c74:	f043 0304 	orr.w	r3, r3, #4
 8003c78:	6313      	str	r3, [r2, #48]	; 0x30
 8003c7a:	4b1d      	ldr	r3, [pc, #116]	; (8003cf0 <GYRO_IO_Init+0x8c>)
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	60bb      	str	r3, [r7, #8]
 8003c84:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8003c86:	2302      	movs	r3, #2
 8003c88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8003c92:	2301      	movs	r3, #1
 8003c94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8003c96:	f107 030c 	add.w	r3, r7, #12
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	4815      	ldr	r0, [pc, #84]	; (8003cf4 <GYRO_IO_Init+0x90>)
 8003c9e:	f002 f8d9 	bl	8005e54 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	2102      	movs	r1, #2
 8003ca6:	4813      	ldr	r0, [pc, #76]	; (8003cf4 <GYRO_IO_Init+0x90>)
 8003ca8:	f002 fba4 	bl	80063f4 <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8003cac:	2300      	movs	r3, #0
 8003cae:	607b      	str	r3, [r7, #4]
 8003cb0:	4b0f      	ldr	r3, [pc, #60]	; (8003cf0 <GYRO_IO_Init+0x8c>)
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb4:	4a0e      	ldr	r2, [pc, #56]	; (8003cf0 <GYRO_IO_Init+0x8c>)
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	6313      	str	r3, [r2, #48]	; 0x30
 8003cbc:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <GYRO_IO_Init+0x8c>)
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	607b      	str	r3, [r7, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8003cc8:	2306      	movs	r3, #6
 8003cca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8003cd8:	f107 030c 	add.w	r3, r7, #12
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4806      	ldr	r0, [pc, #24]	; (8003cf8 <GYRO_IO_Init+0x94>)
 8003ce0:	f002 f8b8 	bl	8005e54 <HAL_GPIO_Init>

  SPIx_Init();
 8003ce4:	f7ff fde6 	bl	80038b4 <SPIx_Init>
}
 8003ce8:	bf00      	nop
 8003cea:	3720      	adds	r7, #32
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	40020800 	.word	0x40020800
 8003cf8:	40020000 	.word	0x40020000

08003cfc <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	70fb      	strb	r3, [r7, #3]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8003d0c:	883b      	ldrh	r3, [r7, #0]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d903      	bls.n	8003d1a <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8003d12:	78fb      	ldrb	r3, [r7, #3]
 8003d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d18:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	2102      	movs	r1, #2
 8003d1e:	480f      	ldr	r0, [pc, #60]	; (8003d5c <GYRO_IO_Write+0x60>)
 8003d20:	f002 fb68 	bl	80063f4 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8003d24:	78fb      	ldrb	r3, [r7, #3]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7ff fe3c 	bl	80039a4 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8003d2c:	e00a      	b.n	8003d44 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff fe36 	bl	80039a4 <SPIx_WriteRead>
    NumByteToWrite--;
 8003d38:	883b      	ldrh	r3, [r7, #0]
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3301      	adds	r3, #1
 8003d42:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8003d44:	883b      	ldrh	r3, [r7, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f1      	bne.n	8003d2e <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	2102      	movs	r1, #2
 8003d4e:	4803      	ldr	r0, [pc, #12]	; (8003d5c <GYRO_IO_Write+0x60>)
 8003d50:	f002 fb50 	bl	80063f4 <HAL_GPIO_WritePin>
}
 8003d54:	bf00      	nop
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40020800 	.word	0x40020800

08003d60 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	70fb      	strb	r3, [r7, #3]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8003d70:	883b      	ldrh	r3, [r7, #0]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d904      	bls.n	8003d80 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8003d76:	78fb      	ldrb	r3, [r7, #3]
 8003d78:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8003d7c:	70fb      	strb	r3, [r7, #3]
 8003d7e:	e003      	b.n	8003d88 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d86:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2102      	movs	r1, #2
 8003d8c:	4810      	ldr	r0, [pc, #64]	; (8003dd0 <GYRO_IO_Read+0x70>)
 8003d8e:	f002 fb31 	bl	80063f4 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8003d92:	78fb      	ldrb	r3, [r7, #3]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff fe05 	bl	80039a4 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8003d9a:	e00c      	b.n	8003db6 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	f7ff fe01 	bl	80039a4 <SPIx_WriteRead>
 8003da2:	4603      	mov	r3, r0
 8003da4:	461a      	mov	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8003daa:	883b      	ldrh	r3, [r7, #0]
 8003dac:	3b01      	subs	r3, #1
 8003dae:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3301      	adds	r3, #1
 8003db4:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8003db6:	883b      	ldrh	r3, [r7, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1ef      	bne.n	8003d9c <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	2102      	movs	r1, #2
 8003dc0:	4803      	ldr	r0, [pc, #12]	; (8003dd0 <GYRO_IO_Read+0x70>)
 8003dc2:	f002 fb17 	bl	80063f4 <HAL_GPIO_WritePin>
}  
 8003dc6:	bf00      	nop
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	40020800 	.word	0x40020800

08003dd4 <BSP_GYRO_Init>:
  * @brief  Set Gyroscope Initialization.
  * @param  None
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8003dde:	2300      	movs	r3, #0
 8003de0:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure={0,0};
 8003de2:	2300      	movs	r3, #0
 8003de4:	703b      	strb	r3, [r7, #0]
 8003de6:	2300      	movs	r3, #0
 8003de8:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8003dea:	4b2d      	ldr	r3, [pc, #180]	; (8003ea0 <BSP_GYRO_Init+0xcc>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	4798      	blx	r3
 8003df0:	4603      	mov	r3, r0
 8003df2:	2bd4      	cmp	r3, #212	; 0xd4
 8003df4:	d005      	beq.n	8003e02 <BSP_GYRO_Init+0x2e>
 8003df6:	4b2a      	ldr	r3, [pc, #168]	; (8003ea0 <BSP_GYRO_Init+0xcc>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	4798      	blx	r3
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2bd5      	cmp	r3, #213	; 0xd5
 8003e00:	d146      	bne.n	8003e90 <BSP_GYRO_Init+0xbc>
  {	
    /* Initialize the Gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8003e02:	4b28      	ldr	r3, [pc, #160]	; (8003ea4 <BSP_GYRO_Init+0xd0>)
 8003e04:	4a26      	ldr	r2, [pc, #152]	; (8003ea0 <BSP_GYRO_Init+0xcc>)
 8003e06:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the Gyroscope structure */
    L3GD20_InitStructure.Power_Mode = L3GD20_MODE_ACTIVE;
 8003e08:	2308      	movs	r3, #8
 8003e0a:	713b      	strb	r3, [r7, #4]
    L3GD20_InitStructure.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	717b      	strb	r3, [r7, #5]
    L3GD20_InitStructure.Axes_Enable = L3GD20_AXES_ENABLE;
 8003e10:	2307      	movs	r3, #7
 8003e12:	71bb      	strb	r3, [r7, #6]
    L3GD20_InitStructure.Band_Width = L3GD20_BANDWIDTH_4;
 8003e14:	2330      	movs	r3, #48	; 0x30
 8003e16:	71fb      	strb	r3, [r7, #7]
    L3GD20_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	723b      	strb	r3, [r7, #8]
    L3GD20_InitStructure.Endianness = L3GD20_BLE_LSB;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	727b      	strb	r3, [r7, #9]
    L3GD20_InitStructure.Full_Scale = L3GD20_FULLSCALE_500; 
 8003e20:	2310      	movs	r3, #16
 8003e22:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8003e24:	793a      	ldrb	r2, [r7, #4]
 8003e26:	797b      	ldrb	r3, [r7, #5]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	b2da      	uxtb	r2, r3
                       L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 8003e2c:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	b2da      	uxtb	r2, r3
                       L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 8003e32:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8003e34:	4313      	orrs	r3, r2
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 8003e3a:	7a3a      	ldrb	r2, [r7, #8]
 8003e3c:	7a7b      	ldrb	r3, [r7, #9]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	b2da      	uxtb	r2, r3
                         L3GD20_InitStructure.Full_Scale) << 8);
 8003e42:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 8003e44:	4313      	orrs	r3, r2
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	021b      	lsls	r3, r3, #8
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	89bb      	ldrh	r3, [r7, #12]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	81bb      	strh	r3, [r7, #12]
    
    /* Configure the Gyroscope main parameters */	 
    GyroscopeDrv->Init(ctrl);
 8003e54:	4b13      	ldr	r3, [pc, #76]	; (8003ea4 <BSP_GYRO_Init+0xd0>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	89ba      	ldrh	r2, [r7, #12]
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	4798      	blx	r3

    L3GD20_FilterStructure.HighPassFilter_Mode_Selection = L3GD20_HPM_NORMAL_MODE_RES;
 8003e60:	2300      	movs	r3, #0
 8003e62:	703b      	strb	r3, [r7, #0]
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_9;
 8003e64:	2309      	movs	r3, #9
 8003e66:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
 8003e68:	783a      	ldrb	r2, [r7, #0]
                       L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));
 8003e6a:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	81bb      	strh	r3, [r7, #12]

    /* Configure the Gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8003e72:	4b0c      	ldr	r3, [pc, #48]	; (8003ea4 <BSP_GYRO_Init+0xd0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e78:	89ba      	ldrh	r2, [r7, #12]
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	4610      	mov	r0, r2
 8003e7e:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8003e80:	4b08      	ldr	r3, [pc, #32]	; (8003ea4 <BSP_GYRO_Init+0xd0>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e86:	2010      	movs	r0, #16
 8003e88:	4798      	blx	r3

    ret = GYRO_OK;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	73fb      	strb	r3, [r7, #15]
 8003e8e:	e001      	b.n	8003e94 <BSP_GYRO_Init+0xc0>
  }
  else
  {
    ret = GYRO_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	2000005c 	.word	0x2000005c
 8003ea4:	20000974 	.word	0x20000974

08003ea8 <BSP_GYRO_GetXYZ>:
  * @brief  Gets XYZ angular acceleration/
  * @param  pfData: pointer on floating array         
  * @retval None
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8003eb0:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <BSP_GYRO_GetXYZ+0x24>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d004      	beq.n	8003ec4 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8003eba:	4b04      	ldr	r3, [pc, #16]	; (8003ecc <BSP_GYRO_GetXYZ+0x24>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	4798      	blx	r3
  }
}
 8003ec4:	bf00      	nop
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	20000974 	.word	0x20000974

08003ed0 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8003ed4:	4b2d      	ldr	r3, [pc, #180]	; (8003f8c <BSP_LCD_Init+0xbc>)
 8003ed6:	4a2e      	ldr	r2, [pc, #184]	; (8003f90 <BSP_LCD_Init+0xc0>)
 8003ed8:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8003eda:	4b2c      	ldr	r3, [pc, #176]	; (8003f8c <BSP_LCD_Init+0xbc>)
 8003edc:	2209      	movs	r2, #9
 8003ede:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8003ee0:	4b2a      	ldr	r3, [pc, #168]	; (8003f8c <BSP_LCD_Init+0xbc>)
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8003ee6:	4b29      	ldr	r3, [pc, #164]	; (8003f8c <BSP_LCD_Init+0xbc>)
 8003ee8:	221d      	movs	r2, #29
 8003eea:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8003eec:	4b27      	ldr	r3, [pc, #156]	; (8003f8c <BSP_LCD_Init+0xbc>)
 8003eee:	2203      	movs	r2, #3
 8003ef0:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8003ef2:	4b26      	ldr	r3, [pc, #152]	; (8003f8c <BSP_LCD_Init+0xbc>)
 8003ef4:	f240 120d 	movw	r2, #269	; 0x10d
 8003ef8:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8003efa:	4b24      	ldr	r3, [pc, #144]	; (8003f8c <BSP_LCD_Init+0xbc>)
 8003efc:	f240 1243 	movw	r2, #323	; 0x143
 8003f00:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8003f02:	4b22      	ldr	r3, [pc, #136]	; (8003f8c <BSP_LCD_Init+0xbc>)
 8003f04:	f240 1217 	movw	r2, #279	; 0x117
 8003f08:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8003f0a:	4b20      	ldr	r3, [pc, #128]	; (8003f8c <BSP_LCD_Init+0xbc>)
 8003f0c:	f240 1247 	movw	r2, #327	; 0x147
 8003f10:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8003f12:	4b1e      	ldr	r3, [pc, #120]	; (8003f8c <BSP_LCD_Init+0xbc>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8003f1a:	4b1c      	ldr	r3, [pc, #112]	; (8003f8c <BSP_LCD_Init+0xbc>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8003f22:	4b1a      	ldr	r3, [pc, #104]	; (8003f8c <BSP_LCD_Init+0xbc>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003f2a:	4b1a      	ldr	r3, [pc, #104]	; (8003f94 <BSP_LCD_Init+0xc4>)
 8003f2c:	2208      	movs	r2, #8
 8003f2e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003f30:	4b18      	ldr	r3, [pc, #96]	; (8003f94 <BSP_LCD_Init+0xc4>)
 8003f32:	22c0      	movs	r2, #192	; 0xc0
 8003f34:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003f36:	4b17      	ldr	r3, [pc, #92]	; (8003f94 <BSP_LCD_Init+0xc4>)
 8003f38:	2204      	movs	r2, #4
 8003f3a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003f3c:	4b15      	ldr	r3, [pc, #84]	; (8003f94 <BSP_LCD_Init+0xc4>)
 8003f3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f42:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8003f44:	4813      	ldr	r0, [pc, #76]	; (8003f94 <BSP_LCD_Init+0xc4>)
 8003f46:	f003 fcd1 	bl	80078ec <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003f4a:	4b10      	ldr	r3, [pc, #64]	; (8003f8c <BSP_LCD_Init+0xbc>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003f50:	4b0e      	ldr	r3, [pc, #56]	; (8003f8c <BSP_LCD_Init+0xbc>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003f56:	4b0d      	ldr	r3, [pc, #52]	; (8003f8c <BSP_LCD_Init+0xbc>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003f5c:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <BSP_LCD_Init+0xbc>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	611a      	str	r2, [r3, #16]
    
    MspInit();
 8003f62:	f000 fc81 	bl	8004868 <MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8003f66:	4809      	ldr	r0, [pc, #36]	; (8003f8c <BSP_LCD_Init+0xbc>)
 8003f68:	f002 fc1e 	bl	80067a8 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8003f6c:	4b0a      	ldr	r3, [pc, #40]	; (8003f98 <BSP_LCD_Init+0xc8>)
 8003f6e:	4a0b      	ldr	r2, [pc, #44]	; (8003f9c <BSP_LCD_Init+0xcc>)
 8003f70:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8003f72:	4b09      	ldr	r3, [pc, #36]	; (8003f98 <BSP_LCD_Init+0xc8>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8003f7a:	f000 fe63 	bl	8004c44 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003f7e:	4808      	ldr	r0, [pc, #32]	; (8003fa0 <BSP_LCD_Init+0xd0>)
 8003f80:	f000 f8ce 	bl	8004120 <BSP_LCD_SetFont>

  return LCD_OK;
 8003f84:	2300      	movs	r3, #0
}  
 8003f86:	4618      	mov	r0, r3
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000978 	.word	0x20000978
 8003f90:	40016800 	.word	0x40016800
 8003f94:	20000a60 	.word	0x20000a60
 8003f98:	20000aac 	.word	0x20000aac
 8003f9c:	20000024 	.word	0x20000024
 8003fa0:	20000094 	.word	0x20000094

08003fa4 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8003fa8:	4b03      	ldr	r3, [pc, #12]	; (8003fb8 <BSP_LCD_GetXSize+0x14>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	4798      	blx	r3
 8003fb0:	4603      	mov	r3, r0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20000aac 	.word	0x20000aac

08003fbc <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None    
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8003fc0:	4b03      	ldr	r3, [pc, #12]	; (8003fd0 <BSP_LCD_GetYSize+0x14>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc6:	4798      	blx	r3
 8003fc8:	4603      	mov	r3, r0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000aac 	.word	0x20000aac

08003fd4 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b090      	sub	sp, #64	; 0x40
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	6039      	str	r1, [r7, #0]
 8003fde:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8003fe4:	f7ff ffde 	bl	8003fa4 <BSP_LCD_GetXSize>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8003fec:	2300      	movs	r3, #0
 8003fee:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003ff0:	f7ff ffe4 	bl	8003fbc <BSP_LCD_GetYSize>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8004000:	23ff      	movs	r3, #255	; 0xff
 8004002:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8004004:	2300      	movs	r3, #0
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8004008:	2300      	movs	r3, #0
 800400a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800400e:	2300      	movs	r3, #0
 8004010:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8004014:	2300      	movs	r3, #0
 8004016:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800401a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800401e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004020:	2307      	movs	r3, #7
 8004022:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8004024:	f7ff ffbe 	bl	8003fa4 <BSP_LCD_GetXSize>
 8004028:	4603      	mov	r3, r0
 800402a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800402c:	f7ff ffc6 	bl	8003fbc <BSP_LCD_GetYSize>
 8004030:	4603      	mov	r3, r0
 8004032:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8004034:	88fa      	ldrh	r2, [r7, #6]
 8004036:	f107 030c 	add.w	r3, r7, #12
 800403a:	4619      	mov	r1, r3
 800403c:	4814      	ldr	r0, [pc, #80]	; (8004090 <BSP_LCD_LayerDefaultInit+0xbc>)
 800403e:	f002 fd3b 	bl	8006ab8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8004042:	88fa      	ldrh	r2, [r7, #6]
 8004044:	4913      	ldr	r1, [pc, #76]	; (8004094 <BSP_LCD_LayerDefaultInit+0xc0>)
 8004046:	4613      	mov	r3, r2
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	4413      	add	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	440b      	add	r3, r1
 8004050:	3304      	adds	r3, #4
 8004052:	f04f 32ff 	mov.w	r2, #4294967295
 8004056:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8004058:	88fa      	ldrh	r2, [r7, #6]
 800405a:	490e      	ldr	r1, [pc, #56]	; (8004094 <BSP_LCD_LayerDefaultInit+0xc0>)
 800405c:	4613      	mov	r3, r2
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	4413      	add	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	440b      	add	r3, r1
 8004066:	3308      	adds	r3, #8
 8004068:	4a0b      	ldr	r2, [pc, #44]	; (8004098 <BSP_LCD_LayerDefaultInit+0xc4>)
 800406a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800406c:	88fa      	ldrh	r2, [r7, #6]
 800406e:	4909      	ldr	r1, [pc, #36]	; (8004094 <BSP_LCD_LayerDefaultInit+0xc0>)
 8004070:	4613      	mov	r3, r2
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	4413      	add	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800407e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8004080:	4803      	ldr	r0, [pc, #12]	; (8004090 <BSP_LCD_LayerDefaultInit+0xbc>)
 8004082:	f002 fd57 	bl	8006b34 <HAL_LTDC_EnableDither>
}
 8004086:	bf00      	nop
 8004088:	3740      	adds	r7, #64	; 0x40
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	20000978 	.word	0x20000978
 8004094:	20000a94 	.word	0x20000a94
 8004098:	20000094 	.word	0x20000094

0800409c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80040a4:	4a04      	ldr	r2, [pc, #16]	; (80040b8 <BSP_LCD_SelectLayer+0x1c>)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6013      	str	r3, [r2, #0]
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	20000a90 	.word	0x20000a90

080040bc <BSP_LCD_SetTextColor>:
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80040c4:	4b07      	ldr	r3, [pc, #28]	; (80040e4 <BSP_LCD_SetTextColor+0x28>)
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	4907      	ldr	r1, [pc, #28]	; (80040e8 <BSP_LCD_SetTextColor+0x2c>)
 80040ca:	4613      	mov	r3, r2
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	4413      	add	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	440b      	add	r3, r1
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	601a      	str	r2, [r3, #0]
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	20000a90 	.word	0x20000a90
 80040e8:	20000a94 	.word	0x20000a94

080040ec <BSP_LCD_SetBackColor>:
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80040f4:	4b08      	ldr	r3, [pc, #32]	; (8004118 <BSP_LCD_SetBackColor+0x2c>)
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	4908      	ldr	r1, [pc, #32]	; (800411c <BSP_LCD_SetBackColor+0x30>)
 80040fa:	4613      	mov	r3, r2
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	4413      	add	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	440b      	add	r3, r1
 8004104:	3304      	adds	r3, #4
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	601a      	str	r2, [r3, #0]
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	20000a90 	.word	0x20000a90
 800411c:	20000a94 	.word	0x20000a94

08004120 <BSP_LCD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8004128:	4b08      	ldr	r3, [pc, #32]	; (800414c <BSP_LCD_SetFont+0x2c>)
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	4908      	ldr	r1, [pc, #32]	; (8004150 <BSP_LCD_SetFont+0x30>)
 800412e:	4613      	mov	r3, r2
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	440b      	add	r3, r1
 8004138:	3308      	adds	r3, #8
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	601a      	str	r2, [r3, #0]
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	20000a90 	.word	0x20000a90
 8004150:	20000a94 	.word	0x20000a94

08004154 <BSP_LCD_GetFont>:
  * @brief  Gets the Text Font.
  * @param  None
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8004158:	4b07      	ldr	r3, [pc, #28]	; (8004178 <BSP_LCD_GetFont+0x24>)
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	4907      	ldr	r1, [pc, #28]	; (800417c <BSP_LCD_GetFont+0x28>)
 800415e:	4613      	mov	r3, r2
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	4413      	add	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	440b      	add	r3, r1
 8004168:	3308      	adds	r3, #8
 800416a:	681b      	ldr	r3, [r3, #0]
}
 800416c:	4618      	mov	r0, r3
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	20000a90 	.word	0x20000a90
 800417c:	20000a94 	.word	0x20000a94

08004180 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8004180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004182:	b085      	sub	sp, #20
 8004184:	af02      	add	r7, sp, #8
 8004186:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8004188:	4b0f      	ldr	r3, [pc, #60]	; (80041c8 <BSP_LCD_Clear+0x48>)
 800418a:	681c      	ldr	r4, [r3, #0]
 800418c:	4b0e      	ldr	r3, [pc, #56]	; (80041c8 <BSP_LCD_Clear+0x48>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a0e      	ldr	r2, [pc, #56]	; (80041cc <BSP_LCD_Clear+0x4c>)
 8004192:	2134      	movs	r1, #52	; 0x34
 8004194:	fb01 f303 	mul.w	r3, r1, r3
 8004198:	4413      	add	r3, r2
 800419a:	335c      	adds	r3, #92	; 0x5c
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	461e      	mov	r6, r3
 80041a0:	f7ff ff00 	bl	8003fa4 <BSP_LCD_GetXSize>
 80041a4:	4605      	mov	r5, r0
 80041a6:	f7ff ff09 	bl	8003fbc <BSP_LCD_GetYSize>
 80041aa:	4602      	mov	r2, r0
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	9301      	str	r3, [sp, #4]
 80041b0:	2300      	movs	r3, #0
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	4613      	mov	r3, r2
 80041b6:	462a      	mov	r2, r5
 80041b8:	4631      	mov	r1, r6
 80041ba:	4620      	mov	r0, r4
 80041bc:	f000 fd0a 	bl	8004bd4 <FillBuffer>
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041c8:	20000a90 	.word	0x20000a90
 80041cc:	20000978 	.word	0x20000978

080041d0 <BSP_LCD_DisplayChar>:
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80041d0:	b590      	push	{r4, r7, lr}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	4603      	mov	r3, r0
 80041d8:	80fb      	strh	r3, [r7, #6]
 80041da:	460b      	mov	r3, r1
 80041dc:	80bb      	strh	r3, [r7, #4]
 80041de:	4613      	mov	r3, r2
 80041e0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80041e2:	4b1b      	ldr	r3, [pc, #108]	; (8004250 <BSP_LCD_DisplayChar+0x80>)
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	491b      	ldr	r1, [pc, #108]	; (8004254 <BSP_LCD_DisplayChar+0x84>)
 80041e8:	4613      	mov	r3, r2
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	4413      	add	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	3308      	adds	r3, #8
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6819      	ldr	r1, [r3, #0]
 80041f8:	78fb      	ldrb	r3, [r7, #3]
 80041fa:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80041fe:	4b14      	ldr	r3, [pc, #80]	; (8004250 <BSP_LCD_DisplayChar+0x80>)
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	4c14      	ldr	r4, [pc, #80]	; (8004254 <BSP_LCD_DisplayChar+0x84>)
 8004204:	4613      	mov	r3, r2
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	4413      	add	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4423      	add	r3, r4
 800420e:	3308      	adds	r3, #8
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004214:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004218:	4b0d      	ldr	r3, [pc, #52]	; (8004250 <BSP_LCD_DisplayChar+0x80>)
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	4c0d      	ldr	r4, [pc, #52]	; (8004254 <BSP_LCD_DisplayChar+0x84>)
 800421e:	4613      	mov	r3, r2
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	4413      	add	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4423      	add	r3, r4
 8004228:	3308      	adds	r3, #8
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	889b      	ldrh	r3, [r3, #4]
 800422e:	3307      	adds	r3, #7
 8004230:	2b00      	cmp	r3, #0
 8004232:	da00      	bge.n	8004236 <BSP_LCD_DisplayChar+0x66>
 8004234:	3307      	adds	r3, #7
 8004236:	10db      	asrs	r3, r3, #3
 8004238:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800423c:	18ca      	adds	r2, r1, r3
 800423e:	88b9      	ldrh	r1, [r7, #4]
 8004240:	88fb      	ldrh	r3, [r7, #6]
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fc0c 	bl	8004a60 <DrawChar>
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	bd90      	pop	{r4, r7, pc}
 8004250:	20000a90 	.word	0x20000a90
 8004254:	20000a94 	.word	0x20000a94

08004258 <BSP_LCD_DisplayStringAt>:
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8004258:	b5b0      	push	{r4, r5, r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af00      	add	r7, sp, #0
 800425e:	60ba      	str	r2, [r7, #8]
 8004260:	461a      	mov	r2, r3
 8004262:	4603      	mov	r3, r0
 8004264:	81fb      	strh	r3, [r7, #14]
 8004266:	460b      	mov	r3, r1
 8004268:	81bb      	strh	r3, [r7, #12]
 800426a:	4613      	mov	r3, r2
 800426c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800426e:	2301      	movs	r3, #1
 8004270:	83fb      	strh	r3, [r7, #30]
 8004272:	2300      	movs	r3, #0
 8004274:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8004276:	2300      	movs	r3, #0
 8004278:	61bb      	str	r3, [r7, #24]
 800427a:	2300      	movs	r3, #0
 800427c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8004282:	e002      	b.n	800428a <BSP_LCD_DisplayStringAt+0x32>
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	3301      	adds	r3, #1
 8004288:	61bb      	str	r3, [r7, #24]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	1c5a      	adds	r2, r3, #1
 800428e:	617a      	str	r2, [r7, #20]
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1f6      	bne.n	8004284 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8004296:	f7ff fe85 	bl	8003fa4 <BSP_LCD_GetXSize>
 800429a:	4601      	mov	r1, r0
 800429c:	4b4b      	ldr	r3, [pc, #300]	; (80043cc <BSP_LCD_DisplayStringAt+0x174>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	484b      	ldr	r0, [pc, #300]	; (80043d0 <BSP_LCD_DisplayStringAt+0x178>)
 80042a2:	4613      	mov	r3, r2
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	4413      	add	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4403      	add	r3, r0
 80042ac:	3308      	adds	r3, #8
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	889b      	ldrh	r3, [r3, #4]
 80042b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80042b6:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80042b8:	79fb      	ldrb	r3, [r7, #7]
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	d01c      	beq.n	80042f8 <BSP_LCD_DisplayStringAt+0xa0>
 80042be:	2b03      	cmp	r3, #3
 80042c0:	dc33      	bgt.n	800432a <BSP_LCD_DisplayStringAt+0xd2>
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d002      	beq.n	80042cc <BSP_LCD_DisplayStringAt+0x74>
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d019      	beq.n	80042fe <BSP_LCD_DisplayStringAt+0xa6>
 80042ca:	e02e      	b.n	800432a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	1ad1      	subs	r1, r2, r3
 80042d2:	4b3e      	ldr	r3, [pc, #248]	; (80043cc <BSP_LCD_DisplayStringAt+0x174>)
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	483e      	ldr	r0, [pc, #248]	; (80043d0 <BSP_LCD_DisplayStringAt+0x178>)
 80042d8:	4613      	mov	r3, r2
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	4413      	add	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4403      	add	r3, r0
 80042e2:	3308      	adds	r3, #8
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	889b      	ldrh	r3, [r3, #4]
 80042e8:	fb01 f303 	mul.w	r3, r1, r3
 80042ec:	085b      	lsrs	r3, r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	89fb      	ldrh	r3, [r7, #14]
 80042f2:	4413      	add	r3, r2
 80042f4:	83fb      	strh	r3, [r7, #30]
      break;
 80042f6:	e01b      	b.n	8004330 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80042f8:	89fb      	ldrh	r3, [r7, #14]
 80042fa:	83fb      	strh	r3, [r7, #30]
      break;
 80042fc:	e018      	b.n	8004330 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	b299      	uxth	r1, r3
 8004306:	4b31      	ldr	r3, [pc, #196]	; (80043cc <BSP_LCD_DisplayStringAt+0x174>)
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	4831      	ldr	r0, [pc, #196]	; (80043d0 <BSP_LCD_DisplayStringAt+0x178>)
 800430c:	4613      	mov	r3, r2
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	4413      	add	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4403      	add	r3, r0
 8004316:	3308      	adds	r3, #8
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	889b      	ldrh	r3, [r3, #4]
 800431c:	fb11 f303 	smulbb	r3, r1, r3
 8004320:	b29a      	uxth	r2, r3
 8004322:	89fb      	ldrh	r3, [r7, #14]
 8004324:	4413      	add	r3, r2
 8004326:	83fb      	strh	r3, [r7, #30]
      break;
 8004328:	e002      	b.n	8004330 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 800432a:	89fb      	ldrh	r3, [r7, #14]
 800432c:	83fb      	strh	r3, [r7, #30]
      break;
 800432e:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004330:	e01a      	b.n	8004368 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	781a      	ldrb	r2, [r3, #0]
 8004336:	89b9      	ldrh	r1, [r7, #12]
 8004338:	8bfb      	ldrh	r3, [r7, #30]
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff ff48 	bl	80041d0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8004340:	4b22      	ldr	r3, [pc, #136]	; (80043cc <BSP_LCD_DisplayStringAt+0x174>)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	4922      	ldr	r1, [pc, #136]	; (80043d0 <BSP_LCD_DisplayStringAt+0x178>)
 8004346:	4613      	mov	r3, r2
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	4413      	add	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	440b      	add	r3, r1
 8004350:	3308      	adds	r3, #8
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	889a      	ldrh	r2, [r3, #4]
 8004356:	8bfb      	ldrh	r3, [r7, #30]
 8004358:	4413      	add	r3, r2
 800435a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	3301      	adds	r3, #1
 8004360:	60bb      	str	r3, [r7, #8]
    i++;
 8004362:	8bbb      	ldrh	r3, [r7, #28]
 8004364:	3301      	adds	r3, #1
 8004366:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	bf14      	ite	ne
 8004370:	2301      	movne	r3, #1
 8004372:	2300      	moveq	r3, #0
 8004374:	b2dc      	uxtb	r4, r3
 8004376:	f7ff fe15 	bl	8003fa4 <BSP_LCD_GetXSize>
 800437a:	8bb9      	ldrh	r1, [r7, #28]
 800437c:	4b13      	ldr	r3, [pc, #76]	; (80043cc <BSP_LCD_DisplayStringAt+0x174>)
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	4d13      	ldr	r5, [pc, #76]	; (80043d0 <BSP_LCD_DisplayStringAt+0x178>)
 8004382:	4613      	mov	r3, r2
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	4413      	add	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	442b      	add	r3, r5
 800438c:	3308      	adds	r3, #8
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	889b      	ldrh	r3, [r3, #4]
 8004392:	fb01 f303 	mul.w	r3, r1, r3
 8004396:	1ac3      	subs	r3, r0, r3
 8004398:	b299      	uxth	r1, r3
 800439a:	4b0c      	ldr	r3, [pc, #48]	; (80043cc <BSP_LCD_DisplayStringAt+0x174>)
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	480c      	ldr	r0, [pc, #48]	; (80043d0 <BSP_LCD_DisplayStringAt+0x178>)
 80043a0:	4613      	mov	r3, r2
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	4413      	add	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4403      	add	r3, r0
 80043aa:	3308      	adds	r3, #8
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	889b      	ldrh	r3, [r3, #4]
 80043b0:	4299      	cmp	r1, r3
 80043b2:	bf2c      	ite	cs
 80043b4:	2301      	movcs	r3, #1
 80043b6:	2300      	movcc	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	4023      	ands	r3, r4
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1b7      	bne.n	8004332 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80043c2:	bf00      	nop
 80043c4:	bf00      	nop
 80043c6:	3720      	adds	r7, #32
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bdb0      	pop	{r4, r5, r7, pc}
 80043cc:	20000a90 	.word	0x20000a90
 80043d0:	20000a94 	.word	0x20000a94

080043d4 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	6039      	str	r1, [r7, #0]
 80043de:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80043e0:	f7ff feb8 	bl	8004154 <BSP_LCD_GetFont>
 80043e4:	4603      	mov	r3, r0
 80043e6:	88db      	ldrh	r3, [r3, #6]
 80043e8:	88fa      	ldrh	r2, [r7, #6]
 80043ea:	fb12 f303 	smulbb	r3, r2, r3
 80043ee:	b299      	uxth	r1, r3
 80043f0:	2303      	movs	r3, #3
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	2000      	movs	r0, #0
 80043f6:	f7ff ff2f 	bl	8004258 <BSP_LCD_DisplayStringAt>
}
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <BSP_LCD_DrawHLine>:
  * @param  Ypos: the Y position
  * @param  Length: line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004404:	b5b0      	push	{r4, r5, r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af02      	add	r7, sp, #8
 800440a:	4603      	mov	r3, r0
 800440c:	80fb      	strh	r3, [r7, #6]
 800440e:	460b      	mov	r3, r1
 8004410:	80bb      	strh	r3, [r7, #4]
 8004412:	4613      	mov	r3, r2
 8004414:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800441a:	4b16      	ldr	r3, [pc, #88]	; (8004474 <BSP_LCD_DrawHLine+0x70>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a16      	ldr	r2, [pc, #88]	; (8004478 <BSP_LCD_DrawHLine+0x74>)
 8004420:	2134      	movs	r1, #52	; 0x34
 8004422:	fb01 f303 	mul.w	r3, r1, r3
 8004426:	4413      	add	r3, r2
 8004428:	335c      	adds	r3, #92	; 0x5c
 800442a:	681c      	ldr	r4, [r3, #0]
 800442c:	f7ff fdba 	bl	8003fa4 <BSP_LCD_GetXSize>
 8004430:	4602      	mov	r2, r0
 8004432:	88bb      	ldrh	r3, [r7, #4]
 8004434:	fb03 f202 	mul.w	r2, r3, r2
 8004438:	88fb      	ldrh	r3, [r7, #6]
 800443a:	4413      	add	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4423      	add	r3, r4
 8004440:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8004442:	4b0c      	ldr	r3, [pc, #48]	; (8004474 <BSP_LCD_DrawHLine+0x70>)
 8004444:	6818      	ldr	r0, [r3, #0]
 8004446:	68f9      	ldr	r1, [r7, #12]
 8004448:	887c      	ldrh	r4, [r7, #2]
 800444a:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <BSP_LCD_DrawHLine+0x70>)
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	4d0b      	ldr	r5, [pc, #44]	; (800447c <BSP_LCD_DrawHLine+0x78>)
 8004450:	4613      	mov	r3, r2
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	4413      	add	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	442b      	add	r3, r5
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	9301      	str	r3, [sp, #4]
 800445e:	2300      	movs	r3, #0
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	2301      	movs	r3, #1
 8004464:	4622      	mov	r2, r4
 8004466:	f000 fbb5 	bl	8004bd4 <FillBuffer>
}
 800446a:	bf00      	nop
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bdb0      	pop	{r4, r5, r7, pc}
 8004472:	bf00      	nop
 8004474:	20000a90 	.word	0x20000a90
 8004478:	20000978 	.word	0x20000978
 800447c:	20000a94 	.word	0x20000a94

08004480 <BSP_LCD_DrawCircle>:
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8004480:	b590      	push	{r4, r7, lr}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	4603      	mov	r3, r0
 8004488:	80fb      	strh	r3, [r7, #6]
 800448a:	460b      	mov	r3, r1
 800448c:	80bb      	strh	r3, [r7, #4]
 800448e:	4613      	mov	r3, r2
 8004490:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8004492:	887b      	ldrh	r3, [r7, #2]
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	f1c3 0303 	rsb	r3, r3, #3
 800449a:	617b      	str	r3, [r7, #20]
  curx = 0;
 800449c:	2300      	movs	r3, #0
 800449e:	613b      	str	r3, [r7, #16]
  cury = Radius;
 80044a0:	887b      	ldrh	r3, [r7, #2]
 80044a2:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 80044a4:	e0c7      	b.n	8004636 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	88fb      	ldrh	r3, [r7, #6]
 80044ac:	4413      	add	r3, r2
 80044ae:	b298      	uxth	r0, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	88ba      	ldrh	r2, [r7, #4]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	b299      	uxth	r1, r3
 80044ba:	4b64      	ldr	r3, [pc, #400]	; (800464c <BSP_LCD_DrawCircle+0x1cc>)
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	4c64      	ldr	r4, [pc, #400]	; (8004650 <BSP_LCD_DrawCircle+0x1d0>)
 80044c0:	4613      	mov	r3, r2
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	4413      	add	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4423      	add	r3, r4
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	461a      	mov	r2, r3
 80044ce:	f000 faa1 	bl	8004a14 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	88fa      	ldrh	r2, [r7, #6]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	b298      	uxth	r0, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	88ba      	ldrh	r2, [r7, #4]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	b299      	uxth	r1, r3
 80044e6:	4b59      	ldr	r3, [pc, #356]	; (800464c <BSP_LCD_DrawCircle+0x1cc>)
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	4c59      	ldr	r4, [pc, #356]	; (8004650 <BSP_LCD_DrawCircle+0x1d0>)
 80044ec:	4613      	mov	r3, r2
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	4413      	add	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4423      	add	r3, r4
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	461a      	mov	r2, r3
 80044fa:	f000 fa8b 	bl	8004a14 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	b29a      	uxth	r2, r3
 8004502:	88fb      	ldrh	r3, [r7, #6]
 8004504:	4413      	add	r3, r2
 8004506:	b298      	uxth	r0, r3
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	b29b      	uxth	r3, r3
 800450c:	88ba      	ldrh	r2, [r7, #4]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	b299      	uxth	r1, r3
 8004512:	4b4e      	ldr	r3, [pc, #312]	; (800464c <BSP_LCD_DrawCircle+0x1cc>)
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	4c4e      	ldr	r4, [pc, #312]	; (8004650 <BSP_LCD_DrawCircle+0x1d0>)
 8004518:	4613      	mov	r3, r2
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	4413      	add	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4423      	add	r3, r4
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	461a      	mov	r2, r3
 8004526:	f000 fa75 	bl	8004a14 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	b29b      	uxth	r3, r3
 800452e:	88fa      	ldrh	r2, [r7, #6]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	b298      	uxth	r0, r3
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	b29b      	uxth	r3, r3
 8004538:	88ba      	ldrh	r2, [r7, #4]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	b299      	uxth	r1, r3
 800453e:	4b43      	ldr	r3, [pc, #268]	; (800464c <BSP_LCD_DrawCircle+0x1cc>)
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	4c43      	ldr	r4, [pc, #268]	; (8004650 <BSP_LCD_DrawCircle+0x1d0>)
 8004544:	4613      	mov	r3, r2
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	4413      	add	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4423      	add	r3, r4
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	461a      	mov	r2, r3
 8004552:	f000 fa5f 	bl	8004a14 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	b29a      	uxth	r2, r3
 800455a:	88fb      	ldrh	r3, [r7, #6]
 800455c:	4413      	add	r3, r2
 800455e:	b298      	uxth	r0, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	b29a      	uxth	r2, r3
 8004564:	88bb      	ldrh	r3, [r7, #4]
 8004566:	4413      	add	r3, r2
 8004568:	b299      	uxth	r1, r3
 800456a:	4b38      	ldr	r3, [pc, #224]	; (800464c <BSP_LCD_DrawCircle+0x1cc>)
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	4c38      	ldr	r4, [pc, #224]	; (8004650 <BSP_LCD_DrawCircle+0x1d0>)
 8004570:	4613      	mov	r3, r2
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	4413      	add	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4423      	add	r3, r4
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	461a      	mov	r2, r3
 800457e:	f000 fa49 	bl	8004a14 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	b29b      	uxth	r3, r3
 8004586:	88fa      	ldrh	r2, [r7, #6]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	b298      	uxth	r0, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	b29a      	uxth	r2, r3
 8004590:	88bb      	ldrh	r3, [r7, #4]
 8004592:	4413      	add	r3, r2
 8004594:	b299      	uxth	r1, r3
 8004596:	4b2d      	ldr	r3, [pc, #180]	; (800464c <BSP_LCD_DrawCircle+0x1cc>)
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	4c2d      	ldr	r4, [pc, #180]	; (8004650 <BSP_LCD_DrawCircle+0x1d0>)
 800459c:	4613      	mov	r3, r2
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	4413      	add	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4423      	add	r3, r4
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	461a      	mov	r2, r3
 80045aa:	f000 fa33 	bl	8004a14 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	88fb      	ldrh	r3, [r7, #6]
 80045b4:	4413      	add	r3, r2
 80045b6:	b298      	uxth	r0, r3
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	88bb      	ldrh	r3, [r7, #4]
 80045be:	4413      	add	r3, r2
 80045c0:	b299      	uxth	r1, r3
 80045c2:	4b22      	ldr	r3, [pc, #136]	; (800464c <BSP_LCD_DrawCircle+0x1cc>)
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	4c22      	ldr	r4, [pc, #136]	; (8004650 <BSP_LCD_DrawCircle+0x1d0>)
 80045c8:	4613      	mov	r3, r2
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	4413      	add	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4423      	add	r3, r4
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	f000 fa1d 	bl	8004a14 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	b29b      	uxth	r3, r3
 80045de:	88fa      	ldrh	r2, [r7, #6]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	b298      	uxth	r0, r3
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	88bb      	ldrh	r3, [r7, #4]
 80045ea:	4413      	add	r3, r2
 80045ec:	b299      	uxth	r1, r3
 80045ee:	4b17      	ldr	r3, [pc, #92]	; (800464c <BSP_LCD_DrawCircle+0x1cc>)
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	4c17      	ldr	r4, [pc, #92]	; (8004650 <BSP_LCD_DrawCircle+0x1d0>)
 80045f4:	4613      	mov	r3, r2
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	4413      	add	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4423      	add	r3, r4
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	461a      	mov	r2, r3
 8004602:	f000 fa07 	bl	8004a14 <BSP_LCD_DrawPixel>

    if (d < 0)
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	2b00      	cmp	r3, #0
 800460a:	da06      	bge.n	800461a <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	009a      	lsls	r2, r3, #2
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	4413      	add	r3, r2
 8004614:	3306      	adds	r3, #6
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	e00a      	b.n	8004630 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	009a      	lsls	r2, r3, #2
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	4413      	add	r3, r2
 8004626:	330a      	adds	r3, #10
 8004628:	617b      	str	r3, [r7, #20]
      cury--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	3b01      	subs	r3, #1
 800462e:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	3301      	adds	r3, #1
 8004634:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	429a      	cmp	r2, r3
 800463c:	f67f af33 	bls.w	80044a6 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8004640:	bf00      	nop
 8004642:	bf00      	nop
 8004644:	371c      	adds	r7, #28
 8004646:	46bd      	mov	sp, r7
 8004648:	bd90      	pop	{r4, r7, pc}
 800464a:	bf00      	nop
 800464c:	20000a90 	.word	0x20000a90
 8004650:	20000a94 	.word	0x20000a94

08004654 <BSP_LCD_FillRect>:
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004658:	b086      	sub	sp, #24
 800465a:	af02      	add	r7, sp, #8
 800465c:	4604      	mov	r4, r0
 800465e:	4608      	mov	r0, r1
 8004660:	4611      	mov	r1, r2
 8004662:	461a      	mov	r2, r3
 8004664:	4623      	mov	r3, r4
 8004666:	80fb      	strh	r3, [r7, #6]
 8004668:	4603      	mov	r3, r0
 800466a:	80bb      	strh	r3, [r7, #4]
 800466c:	460b      	mov	r3, r1
 800466e:	807b      	strh	r3, [r7, #2]
 8004670:	4613      	mov	r3, r2
 8004672:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8004674:	2300      	movs	r3, #0
 8004676:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004678:	4b20      	ldr	r3, [pc, #128]	; (80046fc <BSP_LCD_FillRect+0xa8>)
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	4920      	ldr	r1, [pc, #128]	; (8004700 <BSP_LCD_FillRect+0xac>)
 800467e:	4613      	mov	r3, r2
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	4413      	add	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	440b      	add	r3, r1
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4618      	mov	r0, r3
 800468c:	f7ff fd16 	bl	80040bc <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004690:	4b1a      	ldr	r3, [pc, #104]	; (80046fc <BSP_LCD_FillRect+0xa8>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a1b      	ldr	r2, [pc, #108]	; (8004704 <BSP_LCD_FillRect+0xb0>)
 8004696:	2134      	movs	r1, #52	; 0x34
 8004698:	fb01 f303 	mul.w	r3, r1, r3
 800469c:	4413      	add	r3, r2
 800469e:	335c      	adds	r3, #92	; 0x5c
 80046a0:	681c      	ldr	r4, [r3, #0]
 80046a2:	f7ff fc7f 	bl	8003fa4 <BSP_LCD_GetXSize>
 80046a6:	4602      	mov	r2, r0
 80046a8:	88bb      	ldrh	r3, [r7, #4]
 80046aa:	fb03 f202 	mul.w	r2, r3, r2
 80046ae:	88fb      	ldrh	r3, [r7, #6]
 80046b0:	4413      	add	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4423      	add	r3, r4
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80046b8:	4b10      	ldr	r3, [pc, #64]	; (80046fc <BSP_LCD_FillRect+0xa8>)
 80046ba:	681c      	ldr	r4, [r3, #0]
 80046bc:	68fd      	ldr	r5, [r7, #12]
 80046be:	887e      	ldrh	r6, [r7, #2]
 80046c0:	f8b7 8000 	ldrh.w	r8, [r7]
 80046c4:	f7ff fc6e 	bl	8003fa4 <BSP_LCD_GetXSize>
 80046c8:	4602      	mov	r2, r0
 80046ca:	887b      	ldrh	r3, [r7, #2]
 80046cc:	1ad1      	subs	r1, r2, r3
 80046ce:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <BSP_LCD_FillRect+0xa8>)
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	480b      	ldr	r0, [pc, #44]	; (8004700 <BSP_LCD_FillRect+0xac>)
 80046d4:	4613      	mov	r3, r2
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	4413      	add	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4403      	add	r3, r0
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	9301      	str	r3, [sp, #4]
 80046e2:	9100      	str	r1, [sp, #0]
 80046e4:	4643      	mov	r3, r8
 80046e6:	4632      	mov	r2, r6
 80046e8:	4629      	mov	r1, r5
 80046ea:	4620      	mov	r0, r4
 80046ec:	f000 fa72 	bl	8004bd4 <FillBuffer>
}
 80046f0:	bf00      	nop
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046fa:	bf00      	nop
 80046fc:	20000a90 	.word	0x20000a90
 8004700:	20000a94 	.word	0x20000a94
 8004704:	20000978 	.word	0x20000978

08004708 <BSP_LCD_FillCircle>:
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	4603      	mov	r3, r0
 8004710:	80fb      	strh	r3, [r7, #6]
 8004712:	460b      	mov	r3, r1
 8004714:	80bb      	strh	r3, [r7, #4]
 8004716:	4613      	mov	r3, r2
 8004718:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 800471a:	887b      	ldrh	r3, [r7, #2]
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	f1c3 0303 	rsb	r3, r3, #3
 8004722:	617b      	str	r3, [r7, #20]

  curx = 0;
 8004724:	2300      	movs	r3, #0
 8004726:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8004728:	887b      	ldrh	r3, [r7, #2]
 800472a:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800472c:	4b44      	ldr	r3, [pc, #272]	; (8004840 <BSP_LCD_FillCircle+0x138>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	4944      	ldr	r1, [pc, #272]	; (8004844 <BSP_LCD_FillCircle+0x13c>)
 8004732:	4613      	mov	r3, r2
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	4413      	add	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	440b      	add	r3, r1
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff fcbc 	bl	80040bc <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8004744:	e061      	b.n	800480a <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d021      	beq.n	8004790 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	b29b      	uxth	r3, r3
 8004750:	88fa      	ldrh	r2, [r7, #6]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	b298      	uxth	r0, r3
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	b29a      	uxth	r2, r3
 800475a:	88bb      	ldrh	r3, [r7, #4]
 800475c:	4413      	add	r3, r2
 800475e:	b299      	uxth	r1, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	b29b      	uxth	r3, r3
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	b29b      	uxth	r3, r3
 8004768:	461a      	mov	r2, r3
 800476a:	f7ff fe4b 	bl	8004404 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	b29b      	uxth	r3, r3
 8004772:	88fa      	ldrh	r2, [r7, #6]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	b298      	uxth	r0, r3
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	b29b      	uxth	r3, r3
 800477c:	88ba      	ldrh	r2, [r7, #4]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	b299      	uxth	r1, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	b29b      	uxth	r3, r3
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	b29b      	uxth	r3, r3
 800478a:	461a      	mov	r2, r3
 800478c:	f7ff fe3a 	bl	8004404 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d021      	beq.n	80047da <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	b29b      	uxth	r3, r3
 800479a:	88fa      	ldrh	r2, [r7, #6]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	b298      	uxth	r0, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	88ba      	ldrh	r2, [r7, #4]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	b299      	uxth	r1, r3
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	461a      	mov	r2, r3
 80047b4:	f7ff fe26 	bl	8004404 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	88fa      	ldrh	r2, [r7, #6]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	b298      	uxth	r0, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	88bb      	ldrh	r3, [r7, #4]
 80047c8:	4413      	add	r3, r2
 80047ca:	b299      	uxth	r1, r3
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	461a      	mov	r2, r3
 80047d6:	f7ff fe15 	bl	8004404 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	da06      	bge.n	80047ee <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	009a      	lsls	r2, r3, #2
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	4413      	add	r3, r2
 80047e8:	3306      	adds	r3, #6
 80047ea:	617b      	str	r3, [r7, #20]
 80047ec:	e00a      	b.n	8004804 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	009a      	lsls	r2, r3, #2
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	4413      	add	r3, r2
 80047fa:	330a      	adds	r3, #10
 80047fc:	617b      	str	r3, [r7, #20]
      cury--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	3b01      	subs	r3, #1
 8004802:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	3301      	adds	r3, #1
 8004808:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	429a      	cmp	r2, r3
 8004810:	d999      	bls.n	8004746 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004812:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <BSP_LCD_FillCircle+0x138>)
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	490b      	ldr	r1, [pc, #44]	; (8004844 <BSP_LCD_FillCircle+0x13c>)
 8004818:	4613      	mov	r3, r2
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	4413      	add	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff fc49 	bl	80040bc <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800482a:	887a      	ldrh	r2, [r7, #2]
 800482c:	88b9      	ldrh	r1, [r7, #4]
 800482e:	88fb      	ldrh	r3, [r7, #6]
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff fe25 	bl	8004480 <BSP_LCD_DrawCircle>
}
 8004836:	bf00      	nop
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	20000a90 	.word	0x20000a90
 8004844:	20000a94 	.word	0x20000a94

08004848 <BSP_LCD_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 800484c:	4b05      	ldr	r3, [pc, #20]	; (8004864 <BSP_LCD_DisplayOn+0x1c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8004856:	4b03      	ldr	r3, [pc, #12]	; (8004864 <BSP_LCD_DisplayOn+0x1c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	4798      	blx	r3
  }
}
 800485e:	bf00      	nop
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	20000aac 	.word	0x20000aac

08004868 <MspInit>:
  * @brief  Initializes the LTDC MSP.
  * @param  None
  * @retval None
  */
static void MspInit(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08e      	sub	sp, #56	; 0x38
 800486c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __LTDC_CLK_ENABLE();
 800486e:	2300      	movs	r3, #0
 8004870:	623b      	str	r3, [r7, #32]
 8004872:	4b61      	ldr	r3, [pc, #388]	; (80049f8 <MspInit+0x190>)
 8004874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004876:	4a60      	ldr	r2, [pc, #384]	; (80049f8 <MspInit+0x190>)
 8004878:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800487c:	6453      	str	r3, [r2, #68]	; 0x44
 800487e:	4b5e      	ldr	r3, [pc, #376]	; (80049f8 <MspInit+0x190>)
 8004880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004882:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004886:	623b      	str	r3, [r7, #32]
 8004888:	6a3b      	ldr	r3, [r7, #32]
  __DMA2D_CLK_ENABLE(); 
 800488a:	2300      	movs	r3, #0
 800488c:	61fb      	str	r3, [r7, #28]
 800488e:	4b5a      	ldr	r3, [pc, #360]	; (80049f8 <MspInit+0x190>)
 8004890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004892:	4a59      	ldr	r2, [pc, #356]	; (80049f8 <MspInit+0x190>)
 8004894:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004898:	6313      	str	r3, [r2, #48]	; 0x30
 800489a:	4b57      	ldr	r3, [pc, #348]	; (80049f8 <MspInit+0x190>)
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048a2:	61fb      	str	r3, [r7, #28]
 80048a4:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __GPIOA_CLK_ENABLE();
 80048a6:	2300      	movs	r3, #0
 80048a8:	61bb      	str	r3, [r7, #24]
 80048aa:	4b53      	ldr	r3, [pc, #332]	; (80049f8 <MspInit+0x190>)
 80048ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ae:	4a52      	ldr	r2, [pc, #328]	; (80049f8 <MspInit+0x190>)
 80048b0:	f043 0301 	orr.w	r3, r3, #1
 80048b4:	6313      	str	r3, [r2, #48]	; 0x30
 80048b6:	4b50      	ldr	r3, [pc, #320]	; (80049f8 <MspInit+0x190>)
 80048b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	61bb      	str	r3, [r7, #24]
 80048c0:	69bb      	ldr	r3, [r7, #24]
  __GPIOB_CLK_ENABLE();
 80048c2:	2300      	movs	r3, #0
 80048c4:	617b      	str	r3, [r7, #20]
 80048c6:	4b4c      	ldr	r3, [pc, #304]	; (80049f8 <MspInit+0x190>)
 80048c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ca:	4a4b      	ldr	r2, [pc, #300]	; (80049f8 <MspInit+0x190>)
 80048cc:	f043 0302 	orr.w	r3, r3, #2
 80048d0:	6313      	str	r3, [r2, #48]	; 0x30
 80048d2:	4b49      	ldr	r3, [pc, #292]	; (80049f8 <MspInit+0x190>)
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	697b      	ldr	r3, [r7, #20]
  __GPIOC_CLK_ENABLE();
 80048de:	2300      	movs	r3, #0
 80048e0:	613b      	str	r3, [r7, #16]
 80048e2:	4b45      	ldr	r3, [pc, #276]	; (80049f8 <MspInit+0x190>)
 80048e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e6:	4a44      	ldr	r2, [pc, #272]	; (80049f8 <MspInit+0x190>)
 80048e8:	f043 0304 	orr.w	r3, r3, #4
 80048ec:	6313      	str	r3, [r2, #48]	; 0x30
 80048ee:	4b42      	ldr	r3, [pc, #264]	; (80049f8 <MspInit+0x190>)
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	613b      	str	r3, [r7, #16]
 80048f8:	693b      	ldr	r3, [r7, #16]
  __GPIOD_CLK_ENABLE();
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	4b3e      	ldr	r3, [pc, #248]	; (80049f8 <MspInit+0x190>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	4a3d      	ldr	r2, [pc, #244]	; (80049f8 <MspInit+0x190>)
 8004904:	f043 0308 	orr.w	r3, r3, #8
 8004908:	6313      	str	r3, [r2, #48]	; 0x30
 800490a:	4b3b      	ldr	r3, [pc, #236]	; (80049f8 <MspInit+0x190>)
 800490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	68fb      	ldr	r3, [r7, #12]
  __GPIOF_CLK_ENABLE();
 8004916:	2300      	movs	r3, #0
 8004918:	60bb      	str	r3, [r7, #8]
 800491a:	4b37      	ldr	r3, [pc, #220]	; (80049f8 <MspInit+0x190>)
 800491c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491e:	4a36      	ldr	r2, [pc, #216]	; (80049f8 <MspInit+0x190>)
 8004920:	f043 0320 	orr.w	r3, r3, #32
 8004924:	6313      	str	r3, [r2, #48]	; 0x30
 8004926:	4b34      	ldr	r3, [pc, #208]	; (80049f8 <MspInit+0x190>)
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	f003 0320 	and.w	r3, r3, #32
 800492e:	60bb      	str	r3, [r7, #8]
 8004930:	68bb      	ldr	r3, [r7, #8]
  __GPIOG_CLK_ENABLE();
 8004932:	2300      	movs	r3, #0
 8004934:	607b      	str	r3, [r7, #4]
 8004936:	4b30      	ldr	r3, [pc, #192]	; (80049f8 <MspInit+0x190>)
 8004938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493a:	4a2f      	ldr	r2, [pc, #188]	; (80049f8 <MspInit+0x190>)
 800493c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004940:	6313      	str	r3, [r2, #48]	; 0x30
 8004942:	4b2d      	ldr	r3, [pc, #180]	; (80049f8 <MspInit+0x190>)
 8004944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494a:	607b      	str	r3, [r7, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800494e:	f641 0358 	movw	r3, #6232	; 0x1858
 8004952:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004954:	2302      	movs	r3, #2
 8004956:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004958:	2300      	movs	r3, #0
 800495a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800495c:	2302      	movs	r3, #2
 800495e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8004960:	230e      	movs	r3, #14
 8004962:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004968:	4619      	mov	r1, r3
 800496a:	4824      	ldr	r0, [pc, #144]	; (80049fc <MspInit+0x194>)
 800496c:	f001 fa72 	bl	8005e54 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8004970:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8004974:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800497a:	4619      	mov	r1, r3
 800497c:	4820      	ldr	r0, [pc, #128]	; (8004a00 <MspInit+0x198>)
 800497e:	f001 fa69 	bl	8005e54 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8004982:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8004986:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800498c:	4619      	mov	r1, r3
 800498e:	481d      	ldr	r0, [pc, #116]	; (8004a04 <MspInit+0x19c>)
 8004990:	f001 fa60 	bl	8005e54 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8004994:	2348      	movs	r3, #72	; 0x48
 8004996:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800499c:	4619      	mov	r1, r3
 800499e:	481a      	ldr	r0, [pc, #104]	; (8004a08 <MspInit+0x1a0>)
 80049a0:	f001 fa58 	bl	8005e54 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80049a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80049aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049ae:	4619      	mov	r1, r3
 80049b0:	4816      	ldr	r0, [pc, #88]	; (8004a0c <MspInit+0x1a4>)
 80049b2:	f001 fa4f 	bl	8005e54 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80049b6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80049ba:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80049bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049c0:	4619      	mov	r1, r3
 80049c2:	4813      	ldr	r0, [pc, #76]	; (8004a10 <MspInit+0x1a8>)
 80049c4:	f001 fa46 	bl	8005e54 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80049c8:	2303      	movs	r3, #3
 80049ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80049cc:	2309      	movs	r3, #9
 80049ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80049d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049d4:	4619      	mov	r1, r3
 80049d6:	480a      	ldr	r0, [pc, #40]	; (8004a00 <MspInit+0x198>)
 80049d8:	f001 fa3c 	bl	8005e54 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80049dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80049e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80049e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049e6:	4619      	mov	r1, r3
 80049e8:	4809      	ldr	r0, [pc, #36]	; (8004a10 <MspInit+0x1a8>)
 80049ea:	f001 fa33 	bl	8005e54 <HAL_GPIO_Init>
}
 80049ee:	bf00      	nop
 80049f0:	3738      	adds	r7, #56	; 0x38
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	40023800 	.word	0x40023800
 80049fc:	40020000 	.word	0x40020000
 8004a00:	40020400 	.word	0x40020400
 8004a04:	40020800 	.word	0x40020800
 8004a08:	40020c00 	.word	0x40020c00
 8004a0c:	40021400 	.word	0x40021400
 8004a10:	40021800 	.word	0x40021800

08004a14 <BSP_LCD_DrawPixel>:
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004a14:	b5b0      	push	{r4, r5, r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	603a      	str	r2, [r7, #0]
 8004a1e:	80fb      	strh	r3, [r7, #6]
 8004a20:	460b      	mov	r3, r1
 8004a22:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004a24:	4b0c      	ldr	r3, [pc, #48]	; (8004a58 <BSP_LCD_DrawPixel+0x44>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a0c      	ldr	r2, [pc, #48]	; (8004a5c <BSP_LCD_DrawPixel+0x48>)
 8004a2a:	2134      	movs	r1, #52	; 0x34
 8004a2c:	fb01 f303 	mul.w	r3, r1, r3
 8004a30:	4413      	add	r3, r2
 8004a32:	335c      	adds	r3, #92	; 0x5c
 8004a34:	681c      	ldr	r4, [r3, #0]
 8004a36:	88bd      	ldrh	r5, [r7, #4]
 8004a38:	f7ff fab4 	bl	8003fa4 <BSP_LCD_GetXSize>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	fb03 f205 	mul.w	r2, r3, r5
 8004a42:	88fb      	ldrh	r3, [r7, #6]
 8004a44:	4413      	add	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4423      	add	r3, r4
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	6013      	str	r3, [r2, #0]
}
 8004a50:	bf00      	nop
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bdb0      	pop	{r4, r5, r7, pc}
 8004a58:	20000a90 	.word	0x20000a90
 8004a5c:	20000978 	.word	0x20000978

08004a60 <DrawChar>:
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b088      	sub	sp, #32
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	4603      	mov	r3, r0
 8004a68:	603a      	str	r2, [r7, #0]
 8004a6a:	80fb      	strh	r3, [r7, #6]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004a70:	2300      	movs	r3, #0
 8004a72:	61fb      	str	r3, [r7, #28]
 8004a74:	2300      	movs	r3, #0
 8004a76:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8004a7c:	4b53      	ldr	r3, [pc, #332]	; (8004bcc <DrawChar+0x16c>)
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	4953      	ldr	r1, [pc, #332]	; (8004bd0 <DrawChar+0x170>)
 8004a82:	4613      	mov	r3, r2
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	4413      	add	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	440b      	add	r3, r1
 8004a8c:	3308      	adds	r3, #8
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	88db      	ldrh	r3, [r3, #6]
 8004a92:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004a94:	4b4d      	ldr	r3, [pc, #308]	; (8004bcc <DrawChar+0x16c>)
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	494d      	ldr	r1, [pc, #308]	; (8004bd0 <DrawChar+0x170>)
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	440b      	add	r3, r1
 8004aa4:	3308      	adds	r3, #8
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	889b      	ldrh	r3, [r3, #4]
 8004aaa:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8004aac:	8a3b      	ldrh	r3, [r7, #16]
 8004aae:	3307      	adds	r3, #7
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	da00      	bge.n	8004ab6 <DrawChar+0x56>
 8004ab4:	3307      	adds	r3, #7
 8004ab6:	10db      	asrs	r3, r3, #3
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	8a3b      	ldrh	r3, [r7, #16]
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61fb      	str	r3, [r7, #28]
 8004aca:	e076      	b.n	8004bba <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004acc:	8a3b      	ldrh	r3, [r7, #16]
 8004ace:	3307      	adds	r3, #7
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	da00      	bge.n	8004ad6 <DrawChar+0x76>
 8004ad4:	3307      	adds	r3, #7
 8004ad6:	10db      	asrs	r3, r3, #3
 8004ad8:	461a      	mov	r2, r3
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	fb02 f303 	mul.w	r3, r2, r3
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8004ae6:	8a3b      	ldrh	r3, [r7, #16]
 8004ae8:	3307      	adds	r3, #7
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	da00      	bge.n	8004af0 <DrawChar+0x90>
 8004aee:	3307      	adds	r3, #7
 8004af0:	10db      	asrs	r3, r3, #3
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d002      	beq.n	8004afc <DrawChar+0x9c>
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d004      	beq.n	8004b04 <DrawChar+0xa4>
 8004afa:	e00c      	b.n	8004b16 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	617b      	str	r3, [r7, #20]
      break;
 8004b02:	e016      	b.n	8004b32 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	021b      	lsls	r3, r3, #8
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	3201      	adds	r2, #1
 8004b0e:	7812      	ldrb	r2, [r2, #0]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	617b      	str	r3, [r7, #20]
      break;
 8004b14:	e00d      	b.n	8004b32 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	041a      	lsls	r2, r3, #16
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	021b      	lsls	r3, r3, #8
 8004b24:	4313      	orrs	r3, r2
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	3202      	adds	r2, #2
 8004b2a:	7812      	ldrb	r2, [r2, #0]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]
      break;
 8004b30:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8004b32:	2300      	movs	r3, #0
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	e036      	b.n	8004ba6 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004b38:	8a3a      	ldrh	r2, [r7, #16]
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	1ad2      	subs	r2, r2, r3
 8004b3e:	7bfb      	ldrb	r3, [r7, #15]
 8004b40:	4413      	add	r3, r2
 8004b42:	3b01      	subs	r3, #1
 8004b44:	2201      	movs	r2, #1
 8004b46:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d012      	beq.n	8004b7a <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	88fb      	ldrh	r3, [r7, #6]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	b298      	uxth	r0, r3
 8004b5e:	4b1b      	ldr	r3, [pc, #108]	; (8004bcc <DrawChar+0x16c>)
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	491b      	ldr	r1, [pc, #108]	; (8004bd0 <DrawChar+0x170>)
 8004b64:	4613      	mov	r3, r2
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	4413      	add	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	88bb      	ldrh	r3, [r7, #4]
 8004b72:	4619      	mov	r1, r3
 8004b74:	f7ff ff4e 	bl	8004a14 <BSP_LCD_DrawPixel>
 8004b78:	e012      	b.n	8004ba0 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	88fb      	ldrh	r3, [r7, #6]
 8004b80:	4413      	add	r3, r2
 8004b82:	b298      	uxth	r0, r3
 8004b84:	4b11      	ldr	r3, [pc, #68]	; (8004bcc <DrawChar+0x16c>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	4911      	ldr	r1, [pc, #68]	; (8004bd0 <DrawChar+0x170>)
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	4413      	add	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	440b      	add	r3, r1
 8004b94:	3304      	adds	r3, #4
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	88bb      	ldrh	r3, [r7, #4]
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	f7ff ff3a 	bl	8004a14 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	61bb      	str	r3, [r7, #24]
 8004ba6:	8a3b      	ldrh	r3, [r7, #16]
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d3c4      	bcc.n	8004b38 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8004bae:	88bb      	ldrh	r3, [r7, #4]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	61fb      	str	r3, [r7, #28]
 8004bba:	8a7b      	ldrh	r3, [r7, #18]
 8004bbc:	69fa      	ldr	r2, [r7, #28]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d384      	bcc.n	8004acc <DrawChar+0x6c>
  }
}
 8004bc2:	bf00      	nop
 8004bc4:	bf00      	nop
 8004bc6:	3720      	adds	r7, #32
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	20000a90 	.word	0x20000a90
 8004bd0:	20000a94 	.word	0x20000a94

08004bd4 <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  * @retval None
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
 8004be0:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8004be2:	4b16      	ldr	r3, [pc, #88]	; (8004c3c <FillBuffer+0x68>)
 8004be4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004be8:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004bea:	4b14      	ldr	r3, [pc, #80]	; (8004c3c <FillBuffer+0x68>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8004bf0:	4a12      	ldr	r2, [pc, #72]	; (8004c3c <FillBuffer+0x68>)
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8004bf6:	4b11      	ldr	r3, [pc, #68]	; (8004c3c <FillBuffer+0x68>)
 8004bf8:	4a11      	ldr	r2, [pc, #68]	; (8004c40 <FillBuffer+0x6c>)
 8004bfa:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8004bfc:	480f      	ldr	r0, [pc, #60]	; (8004c3c <FillBuffer+0x68>)
 8004bfe:	f000 fd8d 	bl	800571c <HAL_DMA2D_Init>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d115      	bne.n	8004c34 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8004c08:	68f9      	ldr	r1, [r7, #12]
 8004c0a:	480c      	ldr	r0, [pc, #48]	; (8004c3c <FillBuffer+0x68>)
 8004c0c:	f000 fff4 	bl	8005bf8 <HAL_DMA2D_ConfigLayer>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10e      	bne.n	8004c34 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	69f9      	ldr	r1, [r7, #28]
 8004c20:	4806      	ldr	r0, [pc, #24]	; (8004c3c <FillBuffer+0x68>)
 8004c22:	f000 fdc4 	bl	80057ae <HAL_DMA2D_Start>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d103      	bne.n	8004c34 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8004c2c:	210a      	movs	r1, #10
 8004c2e:	4803      	ldr	r0, [pc, #12]	; (8004c3c <FillBuffer+0x68>)
 8004c30:	f000 fde8 	bl	8005804 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004c34:	bf00      	nop
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	20000a20 	.word	0x20000a20
 8004c40:	4002b000 	.word	0x4002b000

08004c44 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param  None
  * @retval None
  */
void BSP_SDRAM_Init(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004c48:	4b22      	ldr	r3, [pc, #136]	; (8004cd4 <BSP_SDRAM_Init+0x90>)
 8004c4a:	4a23      	ldr	r2, [pc, #140]	; (8004cd8 <BSP_SDRAM_Init+0x94>)
 8004c4c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8004c4e:	4b23      	ldr	r3, [pc, #140]	; (8004cdc <BSP_SDRAM_Init+0x98>)
 8004c50:	2202      	movs	r2, #2
 8004c52:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8004c54:	4b21      	ldr	r3, [pc, #132]	; (8004cdc <BSP_SDRAM_Init+0x98>)
 8004c56:	2207      	movs	r2, #7
 8004c58:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8004c5a:	4b20      	ldr	r3, [pc, #128]	; (8004cdc <BSP_SDRAM_Init+0x98>)
 8004c5c:	2204      	movs	r2, #4
 8004c5e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8004c60:	4b1e      	ldr	r3, [pc, #120]	; (8004cdc <BSP_SDRAM_Init+0x98>)
 8004c62:	2207      	movs	r2, #7
 8004c64:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8004c66:	4b1d      	ldr	r3, [pc, #116]	; (8004cdc <BSP_SDRAM_Init+0x98>)
 8004c68:	2202      	movs	r2, #2
 8004c6a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8004c6c:	4b1b      	ldr	r3, [pc, #108]	; (8004cdc <BSP_SDRAM_Init+0x98>)
 8004c6e:	2202      	movs	r2, #2
 8004c70:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8004c72:	4b1a      	ldr	r3, [pc, #104]	; (8004cdc <BSP_SDRAM_Init+0x98>)
 8004c74:	2202      	movs	r2, #2
 8004c76:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8004c78:	4b16      	ldr	r3, [pc, #88]	; (8004cd4 <BSP_SDRAM_Init+0x90>)
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004c7e:	4b15      	ldr	r3, [pc, #84]	; (8004cd4 <BSP_SDRAM_Init+0x90>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004c84:	4b13      	ldr	r3, [pc, #76]	; (8004cd4 <BSP_SDRAM_Init+0x90>)
 8004c86:	2204      	movs	r2, #4
 8004c88:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004c8a:	4b12      	ldr	r3, [pc, #72]	; (8004cd4 <BSP_SDRAM_Init+0x90>)
 8004c8c:	2210      	movs	r2, #16
 8004c8e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004c90:	4b10      	ldr	r3, [pc, #64]	; (8004cd4 <BSP_SDRAM_Init+0x90>)
 8004c92:	2240      	movs	r2, #64	; 0x40
 8004c94:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8004c96:	4b0f      	ldr	r3, [pc, #60]	; (8004cd4 <BSP_SDRAM_Init+0x90>)
 8004c98:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8004c9c:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004c9e:	4b0d      	ldr	r3, [pc, #52]	; (8004cd4 <BSP_SDRAM_Init+0x90>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004ca4:	4b0b      	ldr	r3, [pc, #44]	; (8004cd4 <BSP_SDRAM_Init+0x90>)
 8004ca6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004caa:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8004cac:	4b09      	ldr	r3, [pc, #36]	; (8004cd4 <BSP_SDRAM_Init+0x90>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8004cb2:	4b08      	ldr	r3, [pc, #32]	; (8004cd4 <BSP_SDRAM_Init+0x90>)
 8004cb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004cb8:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  MspInit();
 8004cba:	f000 f871 	bl	8004da0 <MspInit>
  HAL_SDRAM_Init(&SdramHandle, &Timing);
 8004cbe:	4907      	ldr	r1, [pc, #28]	; (8004cdc <BSP_SDRAM_Init+0x98>)
 8004cc0:	4804      	ldr	r0, [pc, #16]	; (8004cd4 <BSP_SDRAM_Init+0x90>)
 8004cc2:	f002 ffd3 	bl	8007c6c <HAL_SDRAM_Init>
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004cc6:	f240 506a 	movw	r0, #1386	; 0x56a
 8004cca:	f000 f809 	bl	8004ce0 <BSP_SDRAM_Initialization_sequence>
}
 8004cce:	bf00      	nop
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20000ab0 	.word	0x20000ab0
 8004cd8:	a0000140 	.word	0xa0000140
 8004cdc:	20000ae4 	.word	0x20000ae4

08004ce0 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8004cec:	4b2a      	ldr	r3, [pc, #168]	; (8004d98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004cee:	2201      	movs	r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004cf2:	4b29      	ldr	r3, [pc, #164]	; (8004d98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004cf4:	2208      	movs	r2, #8
 8004cf6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004cf8:	4b27      	ldr	r3, [pc, #156]	; (8004d98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004cfe:	4b26      	ldr	r3, [pc, #152]	; (8004d98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004d04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d08:	4923      	ldr	r1, [pc, #140]	; (8004d98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d0a:	4824      	ldr	r0, [pc, #144]	; (8004d9c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004d0c:	f002 ffe2 	bl	8007cd4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004d10:	2001      	movs	r0, #1
 8004d12:	f000 f991 	bl	8005038 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8004d16:	4b20      	ldr	r3, [pc, #128]	; (8004d98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d18:	2202      	movs	r2, #2
 8004d1a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004d1c:	4b1e      	ldr	r3, [pc, #120]	; (8004d98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d1e:	2208      	movs	r2, #8
 8004d20:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004d22:	4b1d      	ldr	r3, [pc, #116]	; (8004d98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d24:	2201      	movs	r2, #1
 8004d26:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004d28:	4b1b      	ldr	r3, [pc, #108]	; (8004d98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8004d2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d32:	4919      	ldr	r1, [pc, #100]	; (8004d98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d34:	4819      	ldr	r0, [pc, #100]	; (8004d9c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004d36:	f002 ffcd 	bl	8007cd4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004d3a:	4b17      	ldr	r3, [pc, #92]	; (8004d98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d3c:	2203      	movs	r2, #3
 8004d3e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004d40:	4b15      	ldr	r3, [pc, #84]	; (8004d98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d42:	2208      	movs	r2, #8
 8004d44:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8004d46:	4b14      	ldr	r3, [pc, #80]	; (8004d98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d48:	2204      	movs	r2, #4
 8004d4a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004d4c:	4b12      	ldr	r3, [pc, #72]	; (8004d98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004d52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d56:	4910      	ldr	r1, [pc, #64]	; (8004d98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d58:	4810      	ldr	r0, [pc, #64]	; (8004d9c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004d5a:	f002 ffbb 	bl	8007cd4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8004d5e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8004d62:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8004d64:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d66:	2204      	movs	r2, #4
 8004d68:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004d6a:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d6c:	2208      	movs	r2, #8
 8004d6e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004d70:	4b09      	ldr	r3, [pc, #36]	; (8004d98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d72:	2201      	movs	r2, #1
 8004d74:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4a07      	ldr	r2, [pc, #28]	; (8004d98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d7a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004d7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d80:	4905      	ldr	r1, [pc, #20]	; (8004d98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004d82:	4806      	ldr	r0, [pc, #24]	; (8004d9c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004d84:	f002 ffa6 	bl	8007cd4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8004d88:	6879      	ldr	r1, [r7, #4]
 8004d8a:	4804      	ldr	r0, [pc, #16]	; (8004d9c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004d8c:	f002 ffd7 	bl	8007d3e <HAL_SDRAM_ProgramRefreshRate>
}
 8004d90:	bf00      	nop
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	20000b00 	.word	0x20000b00
 8004d9c:	20000ab0 	.word	0x20000ab0

08004da0 <MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  None
  * @retval None
  */
static void MspInit(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b08e      	sub	sp, #56	; 0x38
 8004da4:	af00      	add	r7, sp, #0
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;
  SDRAM_HandleTypeDef  *hsdram = &SdramHandle;
 8004da6:	4b79      	ldr	r3, [pc, #484]	; (8004f8c <MspInit+0x1ec>)
 8004da8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Enable FMC clock */
  __FMC_CLK_ENABLE();
 8004daa:	2300      	movs	r3, #0
 8004dac:	61fb      	str	r3, [r7, #28]
 8004dae:	4b78      	ldr	r3, [pc, #480]	; (8004f90 <MspInit+0x1f0>)
 8004db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db2:	4a77      	ldr	r2, [pc, #476]	; (8004f90 <MspInit+0x1f0>)
 8004db4:	f043 0301 	orr.w	r3, r3, #1
 8004db8:	6393      	str	r3, [r2, #56]	; 0x38
 8004dba:	4b75      	ldr	r3, [pc, #468]	; (8004f90 <MspInit+0x1f0>)
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	61fb      	str	r3, [r7, #28]
 8004dc4:	69fb      	ldr	r3, [r7, #28]

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	61bb      	str	r3, [r7, #24]
 8004dca:	4b71      	ldr	r3, [pc, #452]	; (8004f90 <MspInit+0x1f0>)
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	4a70      	ldr	r2, [pc, #448]	; (8004f90 <MspInit+0x1f0>)
 8004dd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8004dd6:	4b6e      	ldr	r3, [pc, #440]	; (8004f90 <MspInit+0x1f0>)
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dde:	61bb      	str	r3, [r7, #24]
 8004de0:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __GPIOB_CLK_ENABLE();
 8004de2:	2300      	movs	r3, #0
 8004de4:	617b      	str	r3, [r7, #20]
 8004de6:	4b6a      	ldr	r3, [pc, #424]	; (8004f90 <MspInit+0x1f0>)
 8004de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dea:	4a69      	ldr	r2, [pc, #420]	; (8004f90 <MspInit+0x1f0>)
 8004dec:	f043 0302 	orr.w	r3, r3, #2
 8004df0:	6313      	str	r3, [r2, #48]	; 0x30
 8004df2:	4b67      	ldr	r3, [pc, #412]	; (8004f90 <MspInit+0x1f0>)
 8004df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	697b      	ldr	r3, [r7, #20]
  __GPIOC_CLK_ENABLE();
 8004dfe:	2300      	movs	r3, #0
 8004e00:	613b      	str	r3, [r7, #16]
 8004e02:	4b63      	ldr	r3, [pc, #396]	; (8004f90 <MspInit+0x1f0>)
 8004e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e06:	4a62      	ldr	r2, [pc, #392]	; (8004f90 <MspInit+0x1f0>)
 8004e08:	f043 0304 	orr.w	r3, r3, #4
 8004e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e0e:	4b60      	ldr	r3, [pc, #384]	; (8004f90 <MspInit+0x1f0>)
 8004e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e12:	f003 0304 	and.w	r3, r3, #4
 8004e16:	613b      	str	r3, [r7, #16]
 8004e18:	693b      	ldr	r3, [r7, #16]
  __GPIOD_CLK_ENABLE();
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60fb      	str	r3, [r7, #12]
 8004e1e:	4b5c      	ldr	r3, [pc, #368]	; (8004f90 <MspInit+0x1f0>)
 8004e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e22:	4a5b      	ldr	r2, [pc, #364]	; (8004f90 <MspInit+0x1f0>)
 8004e24:	f043 0308 	orr.w	r3, r3, #8
 8004e28:	6313      	str	r3, [r2, #48]	; 0x30
 8004e2a:	4b59      	ldr	r3, [pc, #356]	; (8004f90 <MspInit+0x1f0>)
 8004e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2e:	f003 0308 	and.w	r3, r3, #8
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	68fb      	ldr	r3, [r7, #12]
  __GPIOE_CLK_ENABLE();
 8004e36:	2300      	movs	r3, #0
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	4b55      	ldr	r3, [pc, #340]	; (8004f90 <MspInit+0x1f0>)
 8004e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3e:	4a54      	ldr	r2, [pc, #336]	; (8004f90 <MspInit+0x1f0>)
 8004e40:	f043 0310 	orr.w	r3, r3, #16
 8004e44:	6313      	str	r3, [r2, #48]	; 0x30
 8004e46:	4b52      	ldr	r3, [pc, #328]	; (8004f90 <MspInit+0x1f0>)
 8004e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4a:	f003 0310 	and.w	r3, r3, #16
 8004e4e:	60bb      	str	r3, [r7, #8]
 8004e50:	68bb      	ldr	r3, [r7, #8]
  __GPIOF_CLK_ENABLE();
 8004e52:	2300      	movs	r3, #0
 8004e54:	607b      	str	r3, [r7, #4]
 8004e56:	4b4e      	ldr	r3, [pc, #312]	; (8004f90 <MspInit+0x1f0>)
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	4a4d      	ldr	r2, [pc, #308]	; (8004f90 <MspInit+0x1f0>)
 8004e5c:	f043 0320 	orr.w	r3, r3, #32
 8004e60:	6313      	str	r3, [r2, #48]	; 0x30
 8004e62:	4b4b      	ldr	r3, [pc, #300]	; (8004f90 <MspInit+0x1f0>)
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	f003 0320 	and.w	r3, r3, #32
 8004e6a:	607b      	str	r3, [r7, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
  __GPIOG_CLK_ENABLE();
 8004e6e:	2300      	movs	r3, #0
 8004e70:	603b      	str	r3, [r7, #0]
 8004e72:	4b47      	ldr	r3, [pc, #284]	; (8004f90 <MspInit+0x1f0>)
 8004e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e76:	4a46      	ldr	r2, [pc, #280]	; (8004f90 <MspInit+0x1f0>)
 8004e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e7e:	4b44      	ldr	r3, [pc, #272]	; (8004f90 <MspInit+0x1f0>)
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	683b      	ldr	r3, [r7, #0]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004e8e:	2302      	movs	r3, #2
 8004e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004e92:	2300      	movs	r3, #0
 8004e94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8004e96:	230c      	movs	r3, #12
 8004e98:	633b      	str	r3, [r7, #48]	; 0x30

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8004e9a:	2360      	movs	r3, #96	; 0x60
 8004e9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8004e9e:	f107 0320 	add.w	r3, r7, #32
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	483b      	ldr	r0, [pc, #236]	; (8004f94 <MspInit+0x1f4>)
 8004ea6:	f000 ffd5 	bl	8005e54 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8004eaa:	2301      	movs	r3, #1
 8004eac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8004eae:	f107 0320 	add.w	r3, r7, #32
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4838      	ldr	r0, [pc, #224]	; (8004f98 <MspInit+0x1f8>)
 8004eb6:	f000 ffcd 	bl	8005e54 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8004eba:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004ebe:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004ec0:	f107 0320 	add.w	r3, r7, #32
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4835      	ldr	r0, [pc, #212]	; (8004f9c <MspInit+0x1fc>)
 8004ec8:	f000 ffc4 	bl	8005e54 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8004ecc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004ed0:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8004ed2:	f107 0320 	add.w	r3, r7, #32
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	4831      	ldr	r0, [pc, #196]	; (8004fa0 <MspInit+0x200>)
 8004eda:	f000 ffbb 	bl	8005e54 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8004ede:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004ee2:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004ee4:	f107 0320 	add.w	r3, r7, #32
 8004ee8:	4619      	mov	r1, r3
 8004eea:	482e      	ldr	r0, [pc, #184]	; (8004fa4 <MspInit+0x204>)
 8004eec:	f000 ffb2 	bl	8005e54 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8004ef0:	f248 1333 	movw	r3, #33075	; 0x8133
 8004ef4:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004ef6:	f107 0320 	add.w	r3, r7, #32
 8004efa:	4619      	mov	r1, r3
 8004efc:	482a      	ldr	r0, [pc, #168]	; (8004fa8 <MspInit+0x208>)
 8004efe:	f000 ffa9 	bl	8005e54 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004f02:	4b2a      	ldr	r3, [pc, #168]	; (8004fac <MspInit+0x20c>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004f08:	4b28      	ldr	r3, [pc, #160]	; (8004fac <MspInit+0x20c>)
 8004f0a:	2280      	movs	r2, #128	; 0x80
 8004f0c:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004f0e:	4b27      	ldr	r3, [pc, #156]	; (8004fac <MspInit+0x20c>)
 8004f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f14:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8004f16:	4b25      	ldr	r3, [pc, #148]	; (8004fac <MspInit+0x20c>)
 8004f18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f1c:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004f1e:	4b23      	ldr	r3, [pc, #140]	; (8004fac <MspInit+0x20c>)
 8004f20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f24:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004f26:	4b21      	ldr	r3, [pc, #132]	; (8004fac <MspInit+0x20c>)
 8004f28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004f2c:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8004f2e:	4b1f      	ldr	r3, [pc, #124]	; (8004fac <MspInit+0x20c>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004f34:	4b1d      	ldr	r3, [pc, #116]	; (8004fac <MspInit+0x20c>)
 8004f36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f3a:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004f3c:	4b1b      	ldr	r3, [pc, #108]	; (8004fac <MspInit+0x20c>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004f42:	4b1a      	ldr	r3, [pc, #104]	; (8004fac <MspInit+0x20c>)
 8004f44:	2203      	movs	r2, #3
 8004f46:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004f48:	4b18      	ldr	r3, [pc, #96]	; (8004fac <MspInit+0x20c>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004f4e:	4b17      	ldr	r3, [pc, #92]	; (8004fac <MspInit+0x20c>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8004f54:	4b15      	ldr	r3, [pc, #84]	; (8004fac <MspInit+0x20c>)
 8004f56:	4a16      	ldr	r2, [pc, #88]	; (8004fb0 <MspInit+0x210>)
 8004f58:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8004f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f5c:	4a13      	ldr	r2, [pc, #76]	; (8004fac <MspInit+0x20c>)
 8004f5e:	631a      	str	r2, [r3, #48]	; 0x30
 8004f60:	4a12      	ldr	r2, [pc, #72]	; (8004fac <MspInit+0x20c>)
 8004f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f64:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8004f66:	4811      	ldr	r0, [pc, #68]	; (8004fac <MspInit+0x20c>)
 8004f68:	f000 fa36 	bl	80053d8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8004f6c:	480f      	ldr	r0, [pc, #60]	; (8004fac <MspInit+0x20c>)
 8004f6e:	f000 f985 	bl	800527c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0, 0);
 8004f72:	2200      	movs	r2, #0
 8004f74:	2100      	movs	r1, #0
 8004f76:	2038      	movs	r0, #56	; 0x38
 8004f78:	f000 f93a 	bl	80051f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004f7c:	2038      	movs	r0, #56	; 0x38
 8004f7e:	f000 f953 	bl	8005228 <HAL_NVIC_EnableIRQ>
}
 8004f82:	bf00      	nop
 8004f84:	3738      	adds	r7, #56	; 0x38
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	20000ab0 	.word	0x20000ab0
 8004f90:	40023800 	.word	0x40023800
 8004f94:	40020400 	.word	0x40020400
 8004f98:	40020800 	.word	0x40020800
 8004f9c:	40020c00 	.word	0x40020c00
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	40021400 	.word	0x40021400
 8004fa8:	40021800 	.word	0x40021800
 8004fac:	20000b10 	.word	0x20000b10
 8004fb0:	40026410 	.word	0x40026410

08004fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004fb8:	4b0e      	ldr	r3, [pc, #56]	; (8004ff4 <HAL_Init+0x40>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a0d      	ldr	r2, [pc, #52]	; (8004ff4 <HAL_Init+0x40>)
 8004fbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004fc4:	4b0b      	ldr	r3, [pc, #44]	; (8004ff4 <HAL_Init+0x40>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a0a      	ldr	r2, [pc, #40]	; (8004ff4 <HAL_Init+0x40>)
 8004fca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004fd0:	4b08      	ldr	r3, [pc, #32]	; (8004ff4 <HAL_Init+0x40>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a07      	ldr	r2, [pc, #28]	; (8004ff4 <HAL_Init+0x40>)
 8004fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004fdc:	2003      	movs	r0, #3
 8004fde:	f000 f8fc 	bl	80051da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004fe2:	200f      	movs	r0, #15
 8004fe4:	f7fd ff50 	bl	8002e88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004fe8:	f7fd fbca 	bl	8002780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40023c00 	.word	0x40023c00

08004ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ffc:	4b06      	ldr	r3, [pc, #24]	; (8005018 <HAL_IncTick+0x20>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	461a      	mov	r2, r3
 8005002:	4b06      	ldr	r3, [pc, #24]	; (800501c <HAL_IncTick+0x24>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4413      	add	r3, r2
 8005008:	4a04      	ldr	r2, [pc, #16]	; (800501c <HAL_IncTick+0x24>)
 800500a:	6013      	str	r3, [r2, #0]
}
 800500c:	bf00      	nop
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	200000a0 	.word	0x200000a0
 800501c:	20000b70 	.word	0x20000b70

08005020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
  return uwTick;
 8005024:	4b03      	ldr	r3, [pc, #12]	; (8005034 <HAL_GetTick+0x14>)
 8005026:	681b      	ldr	r3, [r3, #0]
}
 8005028:	4618      	mov	r0, r3
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	20000b70 	.word	0x20000b70

08005038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005040:	f7ff ffee 	bl	8005020 <HAL_GetTick>
 8005044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005050:	d005      	beq.n	800505e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005052:	4b0a      	ldr	r3, [pc, #40]	; (800507c <HAL_Delay+0x44>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4413      	add	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800505e:	bf00      	nop
 8005060:	f7ff ffde 	bl	8005020 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	429a      	cmp	r2, r3
 800506e:	d8f7      	bhi.n	8005060 <HAL_Delay+0x28>
  {
  }
}
 8005070:	bf00      	nop
 8005072:	bf00      	nop
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	200000a0 	.word	0x200000a0

08005080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f003 0307 	and.w	r3, r3, #7
 800508e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005090:	4b0c      	ldr	r3, [pc, #48]	; (80050c4 <__NVIC_SetPriorityGrouping+0x44>)
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800509c:	4013      	ands	r3, r2
 800509e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80050ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050b2:	4a04      	ldr	r2, [pc, #16]	; (80050c4 <__NVIC_SetPriorityGrouping+0x44>)
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	60d3      	str	r3, [r2, #12]
}
 80050b8:	bf00      	nop
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	e000ed00 	.word	0xe000ed00

080050c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050cc:	4b04      	ldr	r3, [pc, #16]	; (80050e0 <__NVIC_GetPriorityGrouping+0x18>)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	0a1b      	lsrs	r3, r3, #8
 80050d2:	f003 0307 	and.w	r3, r3, #7
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	e000ed00 	.word	0xe000ed00

080050e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	4603      	mov	r3, r0
 80050ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	db0b      	blt.n	800510e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050f6:	79fb      	ldrb	r3, [r7, #7]
 80050f8:	f003 021f 	and.w	r2, r3, #31
 80050fc:	4907      	ldr	r1, [pc, #28]	; (800511c <__NVIC_EnableIRQ+0x38>)
 80050fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005102:	095b      	lsrs	r3, r3, #5
 8005104:	2001      	movs	r0, #1
 8005106:	fa00 f202 	lsl.w	r2, r0, r2
 800510a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	e000e100 	.word	0xe000e100

08005120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	4603      	mov	r3, r0
 8005128:	6039      	str	r1, [r7, #0]
 800512a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800512c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005130:	2b00      	cmp	r3, #0
 8005132:	db0a      	blt.n	800514a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	b2da      	uxtb	r2, r3
 8005138:	490c      	ldr	r1, [pc, #48]	; (800516c <__NVIC_SetPriority+0x4c>)
 800513a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800513e:	0112      	lsls	r2, r2, #4
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	440b      	add	r3, r1
 8005144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005148:	e00a      	b.n	8005160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	b2da      	uxtb	r2, r3
 800514e:	4908      	ldr	r1, [pc, #32]	; (8005170 <__NVIC_SetPriority+0x50>)
 8005150:	79fb      	ldrb	r3, [r7, #7]
 8005152:	f003 030f 	and.w	r3, r3, #15
 8005156:	3b04      	subs	r3, #4
 8005158:	0112      	lsls	r2, r2, #4
 800515a:	b2d2      	uxtb	r2, r2
 800515c:	440b      	add	r3, r1
 800515e:	761a      	strb	r2, [r3, #24]
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	e000e100 	.word	0xe000e100
 8005170:	e000ed00 	.word	0xe000ed00

08005174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005174:	b480      	push	{r7}
 8005176:	b089      	sub	sp, #36	; 0x24
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	f1c3 0307 	rsb	r3, r3, #7
 800518e:	2b04      	cmp	r3, #4
 8005190:	bf28      	it	cs
 8005192:	2304      	movcs	r3, #4
 8005194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	3304      	adds	r3, #4
 800519a:	2b06      	cmp	r3, #6
 800519c:	d902      	bls.n	80051a4 <NVIC_EncodePriority+0x30>
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	3b03      	subs	r3, #3
 80051a2:	e000      	b.n	80051a6 <NVIC_EncodePriority+0x32>
 80051a4:	2300      	movs	r3, #0
 80051a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051a8:	f04f 32ff 	mov.w	r2, #4294967295
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	fa02 f303 	lsl.w	r3, r2, r3
 80051b2:	43da      	mvns	r2, r3
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	401a      	ands	r2, r3
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051bc:	f04f 31ff 	mov.w	r1, #4294967295
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	fa01 f303 	lsl.w	r3, r1, r3
 80051c6:	43d9      	mvns	r1, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051cc:	4313      	orrs	r3, r2
         );
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3724      	adds	r7, #36	; 0x24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b082      	sub	sp, #8
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7ff ff4c 	bl	8005080 <__NVIC_SetPriorityGrouping>
}
 80051e8:	bf00      	nop
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	4603      	mov	r3, r0
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
 80051fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80051fe:	2300      	movs	r3, #0
 8005200:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005202:	f7ff ff61 	bl	80050c8 <__NVIC_GetPriorityGrouping>
 8005206:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	68b9      	ldr	r1, [r7, #8]
 800520c:	6978      	ldr	r0, [r7, #20]
 800520e:	f7ff ffb1 	bl	8005174 <NVIC_EncodePriority>
 8005212:	4602      	mov	r2, r0
 8005214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005218:	4611      	mov	r1, r2
 800521a:	4618      	mov	r0, r3
 800521c:	f7ff ff80 	bl	8005120 <__NVIC_SetPriority>
}
 8005220:	bf00      	nop
 8005222:	3718      	adds	r7, #24
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	4603      	mov	r3, r0
 8005230:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005236:	4618      	mov	r0, r3
 8005238:	f7ff ff54 	bl	80050e4 <__NVIC_EnableIRQ>
}
 800523c:	bf00      	nop
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e00e      	b.n	8005274 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	795b      	ldrb	r3, [r3, #5]
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	d105      	bne.n	800526c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7fd fab6 	bl	80027d8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005288:	f7ff feca 	bl	8005020 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e099      	b.n	80053cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 0201 	bic.w	r2, r2, #1
 80052b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052b8:	e00f      	b.n	80052da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80052ba:	f7ff feb1 	bl	8005020 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b05      	cmp	r3, #5
 80052c6:	d908      	bls.n	80052da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2220      	movs	r2, #32
 80052cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2203      	movs	r2, #3
 80052d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e078      	b.n	80053cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1e8      	bne.n	80052ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	4b38      	ldr	r3, [pc, #224]	; (80053d4 <HAL_DMA_Init+0x158>)
 80052f4:	4013      	ands	r3, r2
 80052f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005306:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005312:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800531e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	4313      	orrs	r3, r2
 800532a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	2b04      	cmp	r3, #4
 8005332:	d107      	bne.n	8005344 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533c:	4313      	orrs	r3, r2
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	4313      	orrs	r3, r2
 8005342:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f023 0307 	bic.w	r3, r3, #7
 800535a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	4313      	orrs	r3, r2
 8005364:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	2b04      	cmp	r3, #4
 800536c:	d117      	bne.n	800539e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	4313      	orrs	r3, r2
 8005376:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00e      	beq.n	800539e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f94f 	bl	8005624 <DMA_CheckFifoParam>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d008      	beq.n	800539e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2240      	movs	r2, #64	; 0x40
 8005390:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800539a:	2301      	movs	r3, #1
 800539c:	e016      	b.n	80053cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f906 	bl	80055b8 <DMA_CalcBaseAndBitshift>
 80053ac:	4603      	mov	r3, r0
 80053ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053b4:	223f      	movs	r2, #63	; 0x3f
 80053b6:	409a      	lsls	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3718      	adds	r7, #24
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	f010803f 	.word	0xf010803f

080053d8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e050      	b.n	800548c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d101      	bne.n	80053fa <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80053f6:	2302      	movs	r3, #2
 80053f8:	e048      	b.n	800548c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 0201 	bic.w	r2, r2, #1
 8005408:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2200      	movs	r2, #0
 8005418:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2200      	movs	r2, #0
 8005420:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2200      	movs	r2, #0
 8005428:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2200      	movs	r2, #0
 8005430:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2221      	movs	r2, #33	; 0x21
 8005438:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f8bc 	bl	80055b8 <DMA_CalcBaseAndBitshift>
 8005440:	4603      	mov	r3, r0
 8005442:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800546c:	223f      	movs	r2, #63	; 0x3f
 800546e:	409a      	lsls	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80054a2:	f7ff fdbd 	bl	8005020 <HAL_GetTick>
 80054a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d008      	beq.n	80054c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2280      	movs	r2, #128	; 0x80
 80054b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e052      	b.n	800556c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f022 0216 	bic.w	r2, r2, #22
 80054d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	695a      	ldr	r2, [r3, #20]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d103      	bne.n	80054f6 <HAL_DMA_Abort+0x62>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d007      	beq.n	8005506 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 0208 	bic.w	r2, r2, #8
 8005504:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0201 	bic.w	r2, r2, #1
 8005514:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005516:	e013      	b.n	8005540 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005518:	f7ff fd82 	bl	8005020 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b05      	cmp	r3, #5
 8005524:	d90c      	bls.n	8005540 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2220      	movs	r2, #32
 800552a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2203      	movs	r2, #3
 8005530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e015      	b.n	800556c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1e4      	bne.n	8005518 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005552:	223f      	movs	r2, #63	; 0x3f
 8005554:	409a      	lsls	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d004      	beq.n	8005592 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2280      	movs	r2, #128	; 0x80
 800558c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e00c      	b.n	80055ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2205      	movs	r2, #5
 8005596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0201 	bic.w	r2, r2, #1
 80055a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	3b10      	subs	r3, #16
 80055c8:	4a14      	ldr	r2, [pc, #80]	; (800561c <DMA_CalcBaseAndBitshift+0x64>)
 80055ca:	fba2 2303 	umull	r2, r3, r2, r3
 80055ce:	091b      	lsrs	r3, r3, #4
 80055d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80055d2:	4a13      	ldr	r2, [pc, #76]	; (8005620 <DMA_CalcBaseAndBitshift+0x68>)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4413      	add	r3, r2
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	461a      	mov	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2b03      	cmp	r3, #3
 80055e4:	d909      	bls.n	80055fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80055ee:	f023 0303 	bic.w	r3, r3, #3
 80055f2:	1d1a      	adds	r2, r3, #4
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	659a      	str	r2, [r3, #88]	; 0x58
 80055f8:	e007      	b.n	800560a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005602:	f023 0303 	bic.w	r3, r3, #3
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	aaaaaaab 	.word	0xaaaaaaab
 8005620:	08011fa8 	.word	0x08011fa8

08005624 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800562c:	2300      	movs	r3, #0
 800562e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005634:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d11f      	bne.n	800567e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2b03      	cmp	r3, #3
 8005642:	d856      	bhi.n	80056f2 <DMA_CheckFifoParam+0xce>
 8005644:	a201      	add	r2, pc, #4	; (adr r2, 800564c <DMA_CheckFifoParam+0x28>)
 8005646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564a:	bf00      	nop
 800564c:	0800565d 	.word	0x0800565d
 8005650:	0800566f 	.word	0x0800566f
 8005654:	0800565d 	.word	0x0800565d
 8005658:	080056f3 	.word	0x080056f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005660:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d046      	beq.n	80056f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800566c:	e043      	b.n	80056f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005672:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005676:	d140      	bne.n	80056fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800567c:	e03d      	b.n	80056fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005686:	d121      	bne.n	80056cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	2b03      	cmp	r3, #3
 800568c:	d837      	bhi.n	80056fe <DMA_CheckFifoParam+0xda>
 800568e:	a201      	add	r2, pc, #4	; (adr r2, 8005694 <DMA_CheckFifoParam+0x70>)
 8005690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005694:	080056a5 	.word	0x080056a5
 8005698:	080056ab 	.word	0x080056ab
 800569c:	080056a5 	.word	0x080056a5
 80056a0:	080056bd 	.word	0x080056bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	73fb      	strb	r3, [r7, #15]
      break;
 80056a8:	e030      	b.n	800570c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d025      	beq.n	8005702 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056ba:	e022      	b.n	8005702 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056c4:	d11f      	bne.n	8005706 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80056ca:	e01c      	b.n	8005706 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d903      	bls.n	80056da <DMA_CheckFifoParam+0xb6>
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2b03      	cmp	r3, #3
 80056d6:	d003      	beq.n	80056e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80056d8:	e018      	b.n	800570c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	73fb      	strb	r3, [r7, #15]
      break;
 80056de:	e015      	b.n	800570c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00e      	beq.n	800570a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	73fb      	strb	r3, [r7, #15]
      break;
 80056f0:	e00b      	b.n	800570a <DMA_CheckFifoParam+0xe6>
      break;
 80056f2:	bf00      	nop
 80056f4:	e00a      	b.n	800570c <DMA_CheckFifoParam+0xe8>
      break;
 80056f6:	bf00      	nop
 80056f8:	e008      	b.n	800570c <DMA_CheckFifoParam+0xe8>
      break;
 80056fa:	bf00      	nop
 80056fc:	e006      	b.n	800570c <DMA_CheckFifoParam+0xe8>
      break;
 80056fe:	bf00      	nop
 8005700:	e004      	b.n	800570c <DMA_CheckFifoParam+0xe8>
      break;
 8005702:	bf00      	nop
 8005704:	e002      	b.n	800570c <DMA_CheckFifoParam+0xe8>
      break;   
 8005706:	bf00      	nop
 8005708:	e000      	b.n	800570c <DMA_CheckFifoParam+0xe8>
      break;
 800570a:	bf00      	nop
    }
  } 
  
  return status; 
 800570c:	7bfb      	ldrb	r3, [r7, #15]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop

0800571c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e03b      	b.n	80057a6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d106      	bne.n	8005748 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7fd f86a 	bl	800281c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2202      	movs	r2, #2
 800574c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576c:	f023 0107 	bic.w	r1, r3, #7
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689a      	ldr	r2, [r3, #8]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005786:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	68d1      	ldr	r1, [r2, #12]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	6812      	ldr	r2, [r2, #0]
 8005792:	430b      	orrs	r3, r1
 8005794:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b086      	sub	sp, #24
 80057b2:	af02      	add	r7, sp, #8
 80057b4:	60f8      	str	r0, [r7, #12]
 80057b6:	60b9      	str	r1, [r7, #8]
 80057b8:	607a      	str	r2, [r7, #4]
 80057ba:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d101      	bne.n	80057ca <HAL_DMA2D_Start+0x1c>
 80057c6:	2302      	movs	r3, #2
 80057c8:	e018      	b.n	80057fc <HAL_DMA2D_Start+0x4e>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2202      	movs	r2, #2
 80057d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	68b9      	ldr	r1, [r7, #8]
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 fa99 	bl	8005d1c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f042 0201 	orr.w	r2, r2, #1
 80057f8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800580e:	2300      	movs	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b00      	cmp	r3, #0
 800581e:	d056      	beq.n	80058ce <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005820:	f7ff fbfe 	bl	8005020 <HAL_GetTick>
 8005824:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005826:	e04b      	b.n	80058c0 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005836:	2b00      	cmp	r3, #0
 8005838:	d023      	beq.n	8005882 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f003 0320 	and.w	r3, r3, #32
 8005840:	2b00      	cmp	r3, #0
 8005842:	d005      	beq.n	8005850 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005848:	f043 0202 	orr.w	r2, r3, #2
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	d005      	beq.n	8005866 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800585e:	f043 0201 	orr.w	r2, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2221      	movs	r2, #33	; 0x21
 800586c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2204      	movs	r2, #4
 8005872:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e0a5      	b.n	80059ce <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005888:	d01a      	beq.n	80058c0 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800588a:	f7ff fbc9 	bl	8005020 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	429a      	cmp	r2, r3
 8005898:	d302      	bcc.n	80058a0 <HAL_DMA2D_PollForTransfer+0x9c>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10f      	bne.n	80058c0 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a4:	f043 0220 	orr.w	r2, r3, #32
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2203      	movs	r2, #3
 80058b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e086      	b.n	80059ce <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d0ac      	beq.n	8005828 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	f003 0320 	and.w	r3, r3, #32
 80058d8:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d061      	beq.n	80059b4 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80058f0:	f7ff fb96 	bl	8005020 <HAL_GetTick>
 80058f4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80058f6:	e056      	b.n	80059a6 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005906:	2b00      	cmp	r3, #0
 8005908:	d02e      	beq.n	8005968 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f003 0308 	and.w	r3, r3, #8
 8005910:	2b00      	cmp	r3, #0
 8005912:	d005      	beq.n	8005920 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005918:	f043 0204 	orr.w	r2, r3, #4
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f003 0320 	and.w	r3, r3, #32
 8005926:	2b00      	cmp	r3, #0
 8005928:	d005      	beq.n	8005936 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592e:	f043 0202 	orr.w	r2, r3, #2
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b00      	cmp	r3, #0
 800593e:	d005      	beq.n	800594c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005944:	f043 0201 	orr.w	r2, r3, #1
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2229      	movs	r2, #41	; 0x29
 8005952:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2204      	movs	r2, #4
 8005958:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e032      	b.n	80059ce <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596e:	d01a      	beq.n	80059a6 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005970:	f7ff fb56 	bl	8005020 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d302      	bcc.n	8005986 <HAL_DMA2D_PollForTransfer+0x182>
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10f      	bne.n	80059a6 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800598a:	f043 0220 	orr.w	r2, r3, #32
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2203      	movs	r2, #3
 8005996:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e013      	b.n	80059ce <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f003 0310 	and.w	r3, r3, #16
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d0a1      	beq.n	80058f8 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2212      	movs	r2, #18
 80059ba:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3718      	adds	r7, #24
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b084      	sub	sp, #16
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d026      	beq.n	8005a46 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d021      	beq.n	8005a46 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a10:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a16:	f043 0201 	orr.w	r2, r3, #1
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2201      	movs	r2, #1
 8005a24:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2204      	movs	r2, #4
 8005a2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f003 0320 	and.w	r3, r3, #32
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d026      	beq.n	8005a9e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d021      	beq.n	8005a9e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a68:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a76:	f043 0202 	orr.w	r2, r3, #2
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2204      	movs	r2, #4
 8005a82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f003 0308 	and.w	r3, r3, #8
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d026      	beq.n	8005af6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d021      	beq.n	8005af6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ac0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2208      	movs	r2, #8
 8005ac8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ace:	f043 0204 	orr.w	r2, r3, #4
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2204      	movs	r2, #4
 8005ada:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d013      	beq.n	8005b28 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00e      	beq.n	8005b28 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b18:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2204      	movs	r2, #4
 8005b20:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f853 	bl	8005bce <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d024      	beq.n	8005b7c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d01f      	beq.n	8005b7c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005b4a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2202      	movs	r2, #2
 8005b52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f003 0310 	and.w	r3, r3, #16
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d01f      	beq.n	8005bc6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d01a      	beq.n	8005bc6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b9e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2210      	movs	r2, #16
 8005ba6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f80e 	bl	8005be2 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005bc6:	bf00      	nop
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b083      	sub	sp, #12
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005bd6:	bf00      	nop
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
	...

08005bf8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d101      	bne.n	8005c18 <HAL_DMA2D_ConfigLayer+0x20>
 8005c14:	2302      	movs	r3, #2
 8005c16:	e079      	b.n	8005d0c <HAL_DMA2D_ConfigLayer+0x114>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	011b      	lsls	r3, r3, #4
 8005c2c:	3318      	adds	r3, #24
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	4413      	add	r3, r2
 8005c32:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	041b      	lsls	r3, r3, #16
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005c42:	4b35      	ldr	r3, [pc, #212]	; (8005d18 <HAL_DMA2D_ConfigLayer+0x120>)
 8005c44:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	2b0a      	cmp	r3, #10
 8005c4c:	d003      	beq.n	8005c56 <HAL_DMA2D_ConfigLayer+0x5e>
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	2b09      	cmp	r3, #9
 8005c54:	d107      	bne.n	8005c66 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	e005      	b.n	8005c72 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	061b      	lsls	r3, r3, #24
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d120      	bne.n	8005cba <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	43db      	mvns	r3, r3
 8005c82:	ea02 0103 	and.w	r1, r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	6812      	ldr	r2, [r2, #0]
 8005c98:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2b0a      	cmp	r3, #10
 8005ca0:	d003      	beq.n	8005caa <HAL_DMA2D_ConfigLayer+0xb2>
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	2b09      	cmp	r3, #9
 8005ca8:	d127      	bne.n	8005cfa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	68da      	ldr	r2, [r3, #12]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005cb6:	629a      	str	r2, [r3, #40]	; 0x28
 8005cb8:	e01f      	b.n	8005cfa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	69da      	ldr	r2, [r3, #28]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	43db      	mvns	r3, r3
 8005cc4:	ea02 0103 	and.w	r1, r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	6812      	ldr	r2, [r2, #0]
 8005cda:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	2b0a      	cmp	r3, #10
 8005ce2:	d003      	beq.n	8005cec <HAL_DMA2D_ConfigLayer+0xf4>
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	2b09      	cmp	r3, #9
 8005cea:	d106      	bne.n	8005cfa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	68da      	ldr	r2, [r3, #12]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005cf8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	371c      	adds	r7, #28
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	ff03000f 	.word	0xff03000f

08005d1c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b08b      	sub	sp, #44	; 0x2c
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
 8005d28:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d30:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	041a      	lsls	r2, r3, #16
 8005d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d54:	d174      	bne.n	8005e40 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005d5c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d64:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005d6c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d108      	bne.n	8005d8e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	431a      	orrs	r2, r3
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d8c:	e053      	b.n	8005e36 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d106      	bne.n	8005da4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005d96:	69ba      	ldr	r2, [r7, #24]
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	627b      	str	r3, [r7, #36]	; 0x24
 8005da2:	e048      	b.n	8005e36 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d111      	bne.n	8005dd0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	0cdb      	lsrs	r3, r3, #19
 8005db0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	0a9b      	lsrs	r3, r3, #10
 8005db6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	08db      	lsrs	r3, r3, #3
 8005dbc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	02db      	lsls	r3, r3, #11
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8005dce:	e032      	b.n	8005e36 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	2b03      	cmp	r3, #3
 8005dd6:	d117      	bne.n	8005e08 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	0fdb      	lsrs	r3, r3, #31
 8005ddc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	0cdb      	lsrs	r3, r3, #19
 8005de2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	0adb      	lsrs	r3, r3, #11
 8005de8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	08db      	lsrs	r3, r3, #3
 8005dee:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	029b      	lsls	r3, r3, #10
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	03db      	lsls	r3, r3, #15
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	627b      	str	r3, [r7, #36]	; 0x24
 8005e06:	e016      	b.n	8005e36 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	0f1b      	lsrs	r3, r3, #28
 8005e0c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	0d1b      	lsrs	r3, r3, #20
 8005e12:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	0b1b      	lsrs	r3, r3, #12
 8005e18:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	091b      	lsrs	r3, r3, #4
 8005e1e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	011a      	lsls	r2, r3, #4
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	021b      	lsls	r3, r3, #8
 8005e28:	431a      	orrs	r2, r3
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	031b      	lsls	r3, r3, #12
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e3c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005e3e:	e003      	b.n	8005e48 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	60da      	str	r2, [r3, #12]
}
 8005e48:	bf00      	nop
 8005e4a:	372c      	adds	r7, #44	; 0x2c
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b089      	sub	sp, #36	; 0x24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	61fb      	str	r3, [r7, #28]
 8005e6e:	e177      	b.n	8006160 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e70:	2201      	movs	r2, #1
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	fa02 f303 	lsl.w	r3, r2, r3
 8005e78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	4013      	ands	r3, r2
 8005e82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	f040 8166 	bne.w	800615a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f003 0303 	and.w	r3, r3, #3
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d005      	beq.n	8005ea6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d130      	bne.n	8005f08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	2203      	movs	r2, #3
 8005eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb6:	43db      	mvns	r3, r3
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	68da      	ldr	r2, [r3, #12]
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005edc:	2201      	movs	r2, #1
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee4:	43db      	mvns	r3, r3
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	4013      	ands	r3, r2
 8005eea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	091b      	lsrs	r3, r3, #4
 8005ef2:	f003 0201 	and.w	r2, r3, #1
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f003 0303 	and.w	r3, r3, #3
 8005f10:	2b03      	cmp	r3, #3
 8005f12:	d017      	beq.n	8005f44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	005b      	lsls	r3, r3, #1
 8005f1e:	2203      	movs	r2, #3
 8005f20:	fa02 f303 	lsl.w	r3, r2, r3
 8005f24:	43db      	mvns	r3, r3
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	689a      	ldr	r2, [r3, #8]
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	005b      	lsls	r3, r3, #1
 8005f34:	fa02 f303 	lsl.w	r3, r2, r3
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f003 0303 	and.w	r3, r3, #3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d123      	bne.n	8005f98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	08da      	lsrs	r2, r3, #3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	3208      	adds	r2, #8
 8005f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	f003 0307 	and.w	r3, r3, #7
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	220f      	movs	r2, #15
 8005f68:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6c:	43db      	mvns	r3, r3
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	4013      	ands	r3, r2
 8005f72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	691a      	ldr	r2, [r3, #16]
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	f003 0307 	and.w	r3, r3, #7
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	fa02 f303 	lsl.w	r3, r2, r3
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	08da      	lsrs	r2, r3, #3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	3208      	adds	r2, #8
 8005f92:	69b9      	ldr	r1, [r7, #24]
 8005f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	2203      	movs	r2, #3
 8005fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa8:	43db      	mvns	r3, r3
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	4013      	ands	r3, r2
 8005fae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f003 0203 	and.w	r2, r3, #3
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	005b      	lsls	r3, r3, #1
 8005fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 80c0 	beq.w	800615a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fda:	2300      	movs	r3, #0
 8005fdc:	60fb      	str	r3, [r7, #12]
 8005fde:	4b66      	ldr	r3, [pc, #408]	; (8006178 <HAL_GPIO_Init+0x324>)
 8005fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe2:	4a65      	ldr	r2, [pc, #404]	; (8006178 <HAL_GPIO_Init+0x324>)
 8005fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8005fea:	4b63      	ldr	r3, [pc, #396]	; (8006178 <HAL_GPIO_Init+0x324>)
 8005fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ff2:	60fb      	str	r3, [r7, #12]
 8005ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ff6:	4a61      	ldr	r2, [pc, #388]	; (800617c <HAL_GPIO_Init+0x328>)
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	089b      	lsrs	r3, r3, #2
 8005ffc:	3302      	adds	r3, #2
 8005ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	f003 0303 	and.w	r3, r3, #3
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	220f      	movs	r2, #15
 800600e:	fa02 f303 	lsl.w	r3, r2, r3
 8006012:	43db      	mvns	r3, r3
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	4013      	ands	r3, r2
 8006018:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a58      	ldr	r2, [pc, #352]	; (8006180 <HAL_GPIO_Init+0x32c>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d037      	beq.n	8006092 <HAL_GPIO_Init+0x23e>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a57      	ldr	r2, [pc, #348]	; (8006184 <HAL_GPIO_Init+0x330>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d031      	beq.n	800608e <HAL_GPIO_Init+0x23a>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a56      	ldr	r2, [pc, #344]	; (8006188 <HAL_GPIO_Init+0x334>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d02b      	beq.n	800608a <HAL_GPIO_Init+0x236>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a55      	ldr	r2, [pc, #340]	; (800618c <HAL_GPIO_Init+0x338>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d025      	beq.n	8006086 <HAL_GPIO_Init+0x232>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a54      	ldr	r2, [pc, #336]	; (8006190 <HAL_GPIO_Init+0x33c>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d01f      	beq.n	8006082 <HAL_GPIO_Init+0x22e>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a53      	ldr	r2, [pc, #332]	; (8006194 <HAL_GPIO_Init+0x340>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d019      	beq.n	800607e <HAL_GPIO_Init+0x22a>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a52      	ldr	r2, [pc, #328]	; (8006198 <HAL_GPIO_Init+0x344>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d013      	beq.n	800607a <HAL_GPIO_Init+0x226>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a51      	ldr	r2, [pc, #324]	; (800619c <HAL_GPIO_Init+0x348>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00d      	beq.n	8006076 <HAL_GPIO_Init+0x222>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a50      	ldr	r2, [pc, #320]	; (80061a0 <HAL_GPIO_Init+0x34c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d007      	beq.n	8006072 <HAL_GPIO_Init+0x21e>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a4f      	ldr	r2, [pc, #316]	; (80061a4 <HAL_GPIO_Init+0x350>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d101      	bne.n	800606e <HAL_GPIO_Init+0x21a>
 800606a:	2309      	movs	r3, #9
 800606c:	e012      	b.n	8006094 <HAL_GPIO_Init+0x240>
 800606e:	230a      	movs	r3, #10
 8006070:	e010      	b.n	8006094 <HAL_GPIO_Init+0x240>
 8006072:	2308      	movs	r3, #8
 8006074:	e00e      	b.n	8006094 <HAL_GPIO_Init+0x240>
 8006076:	2307      	movs	r3, #7
 8006078:	e00c      	b.n	8006094 <HAL_GPIO_Init+0x240>
 800607a:	2306      	movs	r3, #6
 800607c:	e00a      	b.n	8006094 <HAL_GPIO_Init+0x240>
 800607e:	2305      	movs	r3, #5
 8006080:	e008      	b.n	8006094 <HAL_GPIO_Init+0x240>
 8006082:	2304      	movs	r3, #4
 8006084:	e006      	b.n	8006094 <HAL_GPIO_Init+0x240>
 8006086:	2303      	movs	r3, #3
 8006088:	e004      	b.n	8006094 <HAL_GPIO_Init+0x240>
 800608a:	2302      	movs	r3, #2
 800608c:	e002      	b.n	8006094 <HAL_GPIO_Init+0x240>
 800608e:	2301      	movs	r3, #1
 8006090:	e000      	b.n	8006094 <HAL_GPIO_Init+0x240>
 8006092:	2300      	movs	r3, #0
 8006094:	69fa      	ldr	r2, [r7, #28]
 8006096:	f002 0203 	and.w	r2, r2, #3
 800609a:	0092      	lsls	r2, r2, #2
 800609c:	4093      	lsls	r3, r2
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060a4:	4935      	ldr	r1, [pc, #212]	; (800617c <HAL_GPIO_Init+0x328>)
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	089b      	lsrs	r3, r3, #2
 80060aa:	3302      	adds	r3, #2
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80060b2:	4b3d      	ldr	r3, [pc, #244]	; (80061a8 <HAL_GPIO_Init+0x354>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	43db      	mvns	r3, r3
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	4013      	ands	r3, r2
 80060c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d003      	beq.n	80060d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80060d6:	4a34      	ldr	r2, [pc, #208]	; (80061a8 <HAL_GPIO_Init+0x354>)
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80060dc:	4b32      	ldr	r3, [pc, #200]	; (80061a8 <HAL_GPIO_Init+0x354>)
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	43db      	mvns	r3, r3
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	4013      	ands	r3, r2
 80060ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d003      	beq.n	8006100 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006100:	4a29      	ldr	r2, [pc, #164]	; (80061a8 <HAL_GPIO_Init+0x354>)
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006106:	4b28      	ldr	r3, [pc, #160]	; (80061a8 <HAL_GPIO_Init+0x354>)
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	43db      	mvns	r3, r3
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	4013      	ands	r3, r2
 8006114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d003      	beq.n	800612a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	4313      	orrs	r3, r2
 8006128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800612a:	4a1f      	ldr	r2, [pc, #124]	; (80061a8 <HAL_GPIO_Init+0x354>)
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006130:	4b1d      	ldr	r3, [pc, #116]	; (80061a8 <HAL_GPIO_Init+0x354>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	43db      	mvns	r3, r3
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	4013      	ands	r3, r2
 800613e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800614c:	69ba      	ldr	r2, [r7, #24]
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	4313      	orrs	r3, r2
 8006152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006154:	4a14      	ldr	r2, [pc, #80]	; (80061a8 <HAL_GPIO_Init+0x354>)
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	3301      	adds	r3, #1
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	2b0f      	cmp	r3, #15
 8006164:	f67f ae84 	bls.w	8005e70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006168:	bf00      	nop
 800616a:	bf00      	nop
 800616c:	3724      	adds	r7, #36	; 0x24
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	40023800 	.word	0x40023800
 800617c:	40013800 	.word	0x40013800
 8006180:	40020000 	.word	0x40020000
 8006184:	40020400 	.word	0x40020400
 8006188:	40020800 	.word	0x40020800
 800618c:	40020c00 	.word	0x40020c00
 8006190:	40021000 	.word	0x40021000
 8006194:	40021400 	.word	0x40021400
 8006198:	40021800 	.word	0x40021800
 800619c:	40021c00 	.word	0x40021c00
 80061a0:	40022000 	.word	0x40022000
 80061a4:	40022400 	.word	0x40022400
 80061a8:	40013c00 	.word	0x40013c00

080061ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80061ba:	2300      	movs	r3, #0
 80061bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80061be:	2300      	movs	r3, #0
 80061c0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061c2:	2300      	movs	r3, #0
 80061c4:	617b      	str	r3, [r7, #20]
 80061c6:	e0d9      	b.n	800637c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80061c8:	2201      	movs	r2, #1
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	fa02 f303 	lsl.w	r3, r2, r3
 80061d0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	4013      	ands	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	429a      	cmp	r2, r3
 80061e0:	f040 80c9 	bne.w	8006376 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80061e4:	4a6b      	ldr	r2, [pc, #428]	; (8006394 <HAL_GPIO_DeInit+0x1e8>)
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	089b      	lsrs	r3, r3, #2
 80061ea:	3302      	adds	r3, #2
 80061ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061f0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f003 0303 	and.w	r3, r3, #3
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	220f      	movs	r2, #15
 80061fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	4013      	ands	r3, r2
 8006204:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a63      	ldr	r2, [pc, #396]	; (8006398 <HAL_GPIO_DeInit+0x1ec>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d037      	beq.n	800627e <HAL_GPIO_DeInit+0xd2>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a62      	ldr	r2, [pc, #392]	; (800639c <HAL_GPIO_DeInit+0x1f0>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d031      	beq.n	800627a <HAL_GPIO_DeInit+0xce>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a61      	ldr	r2, [pc, #388]	; (80063a0 <HAL_GPIO_DeInit+0x1f4>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d02b      	beq.n	8006276 <HAL_GPIO_DeInit+0xca>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a60      	ldr	r2, [pc, #384]	; (80063a4 <HAL_GPIO_DeInit+0x1f8>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d025      	beq.n	8006272 <HAL_GPIO_DeInit+0xc6>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a5f      	ldr	r2, [pc, #380]	; (80063a8 <HAL_GPIO_DeInit+0x1fc>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d01f      	beq.n	800626e <HAL_GPIO_DeInit+0xc2>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a5e      	ldr	r2, [pc, #376]	; (80063ac <HAL_GPIO_DeInit+0x200>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d019      	beq.n	800626a <HAL_GPIO_DeInit+0xbe>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a5d      	ldr	r2, [pc, #372]	; (80063b0 <HAL_GPIO_DeInit+0x204>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d013      	beq.n	8006266 <HAL_GPIO_DeInit+0xba>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a5c      	ldr	r2, [pc, #368]	; (80063b4 <HAL_GPIO_DeInit+0x208>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d00d      	beq.n	8006262 <HAL_GPIO_DeInit+0xb6>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a5b      	ldr	r2, [pc, #364]	; (80063b8 <HAL_GPIO_DeInit+0x20c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d007      	beq.n	800625e <HAL_GPIO_DeInit+0xb2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a5a      	ldr	r2, [pc, #360]	; (80063bc <HAL_GPIO_DeInit+0x210>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d101      	bne.n	800625a <HAL_GPIO_DeInit+0xae>
 8006256:	2309      	movs	r3, #9
 8006258:	e012      	b.n	8006280 <HAL_GPIO_DeInit+0xd4>
 800625a:	230a      	movs	r3, #10
 800625c:	e010      	b.n	8006280 <HAL_GPIO_DeInit+0xd4>
 800625e:	2308      	movs	r3, #8
 8006260:	e00e      	b.n	8006280 <HAL_GPIO_DeInit+0xd4>
 8006262:	2307      	movs	r3, #7
 8006264:	e00c      	b.n	8006280 <HAL_GPIO_DeInit+0xd4>
 8006266:	2306      	movs	r3, #6
 8006268:	e00a      	b.n	8006280 <HAL_GPIO_DeInit+0xd4>
 800626a:	2305      	movs	r3, #5
 800626c:	e008      	b.n	8006280 <HAL_GPIO_DeInit+0xd4>
 800626e:	2304      	movs	r3, #4
 8006270:	e006      	b.n	8006280 <HAL_GPIO_DeInit+0xd4>
 8006272:	2303      	movs	r3, #3
 8006274:	e004      	b.n	8006280 <HAL_GPIO_DeInit+0xd4>
 8006276:	2302      	movs	r3, #2
 8006278:	e002      	b.n	8006280 <HAL_GPIO_DeInit+0xd4>
 800627a:	2301      	movs	r3, #1
 800627c:	e000      	b.n	8006280 <HAL_GPIO_DeInit+0xd4>
 800627e:	2300      	movs	r3, #0
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	f002 0203 	and.w	r2, r2, #3
 8006286:	0092      	lsls	r2, r2, #2
 8006288:	4093      	lsls	r3, r2
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	429a      	cmp	r2, r3
 800628e:	d132      	bne.n	80062f6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006290:	4b4b      	ldr	r3, [pc, #300]	; (80063c0 <HAL_GPIO_DeInit+0x214>)
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	43db      	mvns	r3, r3
 8006298:	4949      	ldr	r1, [pc, #292]	; (80063c0 <HAL_GPIO_DeInit+0x214>)
 800629a:	4013      	ands	r3, r2
 800629c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800629e:	4b48      	ldr	r3, [pc, #288]	; (80063c0 <HAL_GPIO_DeInit+0x214>)
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	43db      	mvns	r3, r3
 80062a6:	4946      	ldr	r1, [pc, #280]	; (80063c0 <HAL_GPIO_DeInit+0x214>)
 80062a8:	4013      	ands	r3, r2
 80062aa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80062ac:	4b44      	ldr	r3, [pc, #272]	; (80063c0 <HAL_GPIO_DeInit+0x214>)
 80062ae:	68da      	ldr	r2, [r3, #12]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	43db      	mvns	r3, r3
 80062b4:	4942      	ldr	r1, [pc, #264]	; (80063c0 <HAL_GPIO_DeInit+0x214>)
 80062b6:	4013      	ands	r3, r2
 80062b8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80062ba:	4b41      	ldr	r3, [pc, #260]	; (80063c0 <HAL_GPIO_DeInit+0x214>)
 80062bc:	689a      	ldr	r2, [r3, #8]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	43db      	mvns	r3, r3
 80062c2:	493f      	ldr	r1, [pc, #252]	; (80063c0 <HAL_GPIO_DeInit+0x214>)
 80062c4:	4013      	ands	r3, r2
 80062c6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f003 0303 	and.w	r3, r3, #3
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	220f      	movs	r2, #15
 80062d2:	fa02 f303 	lsl.w	r3, r2, r3
 80062d6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80062d8:	4a2e      	ldr	r2, [pc, #184]	; (8006394 <HAL_GPIO_DeInit+0x1e8>)
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	089b      	lsrs	r3, r3, #2
 80062de:	3302      	adds	r3, #2
 80062e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	43da      	mvns	r2, r3
 80062e8:	482a      	ldr	r0, [pc, #168]	; (8006394 <HAL_GPIO_DeInit+0x1e8>)
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	089b      	lsrs	r3, r3, #2
 80062ee:	400a      	ands	r2, r1
 80062f0:	3302      	adds	r3, #2
 80062f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	005b      	lsls	r3, r3, #1
 80062fe:	2103      	movs	r1, #3
 8006300:	fa01 f303 	lsl.w	r3, r1, r3
 8006304:	43db      	mvns	r3, r3
 8006306:	401a      	ands	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	08da      	lsrs	r2, r3, #3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	3208      	adds	r2, #8
 8006314:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	f003 0307 	and.w	r3, r3, #7
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	220f      	movs	r2, #15
 8006322:	fa02 f303 	lsl.w	r3, r2, r3
 8006326:	43db      	mvns	r3, r3
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	08d2      	lsrs	r2, r2, #3
 800632c:	4019      	ands	r1, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	3208      	adds	r2, #8
 8006332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	2103      	movs	r1, #3
 8006340:	fa01 f303 	lsl.w	r3, r1, r3
 8006344:	43db      	mvns	r3, r3
 8006346:	401a      	ands	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	2101      	movs	r1, #1
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	fa01 f303 	lsl.w	r3, r1, r3
 8006358:	43db      	mvns	r3, r3
 800635a:	401a      	ands	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	005b      	lsls	r3, r3, #1
 8006368:	2103      	movs	r1, #3
 800636a:	fa01 f303 	lsl.w	r3, r1, r3
 800636e:	43db      	mvns	r3, r3
 8006370:	401a      	ands	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	3301      	adds	r3, #1
 800637a:	617b      	str	r3, [r7, #20]
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	2b0f      	cmp	r3, #15
 8006380:	f67f af22 	bls.w	80061c8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006384:	bf00      	nop
 8006386:	bf00      	nop
 8006388:	371c      	adds	r7, #28
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	40013800 	.word	0x40013800
 8006398:	40020000 	.word	0x40020000
 800639c:	40020400 	.word	0x40020400
 80063a0:	40020800 	.word	0x40020800
 80063a4:	40020c00 	.word	0x40020c00
 80063a8:	40021000 	.word	0x40021000
 80063ac:	40021400 	.word	0x40021400
 80063b0:	40021800 	.word	0x40021800
 80063b4:	40021c00 	.word	0x40021c00
 80063b8:	40022000 	.word	0x40022000
 80063bc:	40022400 	.word	0x40022400
 80063c0:	40013c00 	.word	0x40013c00

080063c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	460b      	mov	r3, r1
 80063ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691a      	ldr	r2, [r3, #16]
 80063d4:	887b      	ldrh	r3, [r7, #2]
 80063d6:	4013      	ands	r3, r2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d002      	beq.n	80063e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80063dc:	2301      	movs	r3, #1
 80063de:	73fb      	strb	r3, [r7, #15]
 80063e0:	e001      	b.n	80063e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80063e2:	2300      	movs	r3, #0
 80063e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80063e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3714      	adds	r7, #20
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	460b      	mov	r3, r1
 80063fe:	807b      	strh	r3, [r7, #2]
 8006400:	4613      	mov	r3, r2
 8006402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006404:	787b      	ldrb	r3, [r7, #1]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800640a:	887a      	ldrh	r2, [r7, #2]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006410:	e003      	b.n	800641a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006412:	887b      	ldrh	r3, [r7, #2]
 8006414:	041a      	lsls	r2, r3, #16
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	619a      	str	r2, [r3, #24]
}
 800641a:	bf00      	nop
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
	...

08006428 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e12b      	b.n	8006692 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d106      	bne.n	8006454 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7fc fa0c 	bl	800286c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2224      	movs	r2, #36	; 0x24
 8006458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 0201 	bic.w	r2, r2, #1
 800646a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800647a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800648a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800648c:	f001 f9d4 	bl	8007838 <HAL_RCC_GetPCLK1Freq>
 8006490:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	4a81      	ldr	r2, [pc, #516]	; (800669c <HAL_I2C_Init+0x274>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d807      	bhi.n	80064ac <HAL_I2C_Init+0x84>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4a80      	ldr	r2, [pc, #512]	; (80066a0 <HAL_I2C_Init+0x278>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	bf94      	ite	ls
 80064a4:	2301      	movls	r3, #1
 80064a6:	2300      	movhi	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	e006      	b.n	80064ba <HAL_I2C_Init+0x92>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4a7d      	ldr	r2, [pc, #500]	; (80066a4 <HAL_I2C_Init+0x27c>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	bf94      	ite	ls
 80064b4:	2301      	movls	r3, #1
 80064b6:	2300      	movhi	r3, #0
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e0e7      	b.n	8006692 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4a78      	ldr	r2, [pc, #480]	; (80066a8 <HAL_I2C_Init+0x280>)
 80064c6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ca:	0c9b      	lsrs	r3, r3, #18
 80064cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	430a      	orrs	r2, r1
 80064e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6a1b      	ldr	r3, [r3, #32]
 80064e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	4a6a      	ldr	r2, [pc, #424]	; (800669c <HAL_I2C_Init+0x274>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d802      	bhi.n	80064fc <HAL_I2C_Init+0xd4>
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	3301      	adds	r3, #1
 80064fa:	e009      	b.n	8006510 <HAL_I2C_Init+0xe8>
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006502:	fb02 f303 	mul.w	r3, r2, r3
 8006506:	4a69      	ldr	r2, [pc, #420]	; (80066ac <HAL_I2C_Init+0x284>)
 8006508:	fba2 2303 	umull	r2, r3, r2, r3
 800650c:	099b      	lsrs	r3, r3, #6
 800650e:	3301      	adds	r3, #1
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	6812      	ldr	r2, [r2, #0]
 8006514:	430b      	orrs	r3, r1
 8006516:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006522:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	495c      	ldr	r1, [pc, #368]	; (800669c <HAL_I2C_Init+0x274>)
 800652c:	428b      	cmp	r3, r1
 800652e:	d819      	bhi.n	8006564 <HAL_I2C_Init+0x13c>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	1e59      	subs	r1, r3, #1
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	fbb1 f3f3 	udiv	r3, r1, r3
 800653e:	1c59      	adds	r1, r3, #1
 8006540:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006544:	400b      	ands	r3, r1
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00a      	beq.n	8006560 <HAL_I2C_Init+0x138>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	1e59      	subs	r1, r3, #1
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	005b      	lsls	r3, r3, #1
 8006554:	fbb1 f3f3 	udiv	r3, r1, r3
 8006558:	3301      	adds	r3, #1
 800655a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800655e:	e051      	b.n	8006604 <HAL_I2C_Init+0x1dc>
 8006560:	2304      	movs	r3, #4
 8006562:	e04f      	b.n	8006604 <HAL_I2C_Init+0x1dc>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d111      	bne.n	8006590 <HAL_I2C_Init+0x168>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	1e58      	subs	r0, r3, #1
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6859      	ldr	r1, [r3, #4]
 8006574:	460b      	mov	r3, r1
 8006576:	005b      	lsls	r3, r3, #1
 8006578:	440b      	add	r3, r1
 800657a:	fbb0 f3f3 	udiv	r3, r0, r3
 800657e:	3301      	adds	r3, #1
 8006580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006584:	2b00      	cmp	r3, #0
 8006586:	bf0c      	ite	eq
 8006588:	2301      	moveq	r3, #1
 800658a:	2300      	movne	r3, #0
 800658c:	b2db      	uxtb	r3, r3
 800658e:	e012      	b.n	80065b6 <HAL_I2C_Init+0x18e>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	1e58      	subs	r0, r3, #1
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6859      	ldr	r1, [r3, #4]
 8006598:	460b      	mov	r3, r1
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	440b      	add	r3, r1
 800659e:	0099      	lsls	r1, r3, #2
 80065a0:	440b      	add	r3, r1
 80065a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80065a6:	3301      	adds	r3, #1
 80065a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	bf0c      	ite	eq
 80065b0:	2301      	moveq	r3, #1
 80065b2:	2300      	movne	r3, #0
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <HAL_I2C_Init+0x196>
 80065ba:	2301      	movs	r3, #1
 80065bc:	e022      	b.n	8006604 <HAL_I2C_Init+0x1dc>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10e      	bne.n	80065e4 <HAL_I2C_Init+0x1bc>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	1e58      	subs	r0, r3, #1
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6859      	ldr	r1, [r3, #4]
 80065ce:	460b      	mov	r3, r1
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	440b      	add	r3, r1
 80065d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80065d8:	3301      	adds	r3, #1
 80065da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065e2:	e00f      	b.n	8006604 <HAL_I2C_Init+0x1dc>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	1e58      	subs	r0, r3, #1
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6859      	ldr	r1, [r3, #4]
 80065ec:	460b      	mov	r3, r1
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	440b      	add	r3, r1
 80065f2:	0099      	lsls	r1, r3, #2
 80065f4:	440b      	add	r3, r1
 80065f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80065fa:	3301      	adds	r3, #1
 80065fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006600:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006604:	6879      	ldr	r1, [r7, #4]
 8006606:	6809      	ldr	r1, [r1, #0]
 8006608:	4313      	orrs	r3, r2
 800660a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	69da      	ldr	r2, [r3, #28]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	431a      	orrs	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006632:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	6911      	ldr	r1, [r2, #16]
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	68d2      	ldr	r2, [r2, #12]
 800663e:	4311      	orrs	r1, r2
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	6812      	ldr	r2, [r2, #0]
 8006644:	430b      	orrs	r3, r1
 8006646:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	695a      	ldr	r2, [r3, #20]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	431a      	orrs	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	430a      	orrs	r2, r1
 8006662:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0201 	orr.w	r2, r2, #1
 8006672:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2220      	movs	r2, #32
 800667e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	000186a0 	.word	0x000186a0
 80066a0:	001e847f 	.word	0x001e847f
 80066a4:	003d08ff 	.word	0x003d08ff
 80066a8:	431bde83 	.word	0x431bde83
 80066ac:	10624dd3 	.word	0x10624dd3

080066b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b20      	cmp	r3, #32
 80066c4:	d129      	bne.n	800671a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2224      	movs	r2, #36	; 0x24
 80066ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f022 0201 	bic.w	r2, r2, #1
 80066dc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0210 	bic.w	r2, r2, #16
 80066ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f042 0201 	orr.w	r2, r2, #1
 800670c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2220      	movs	r2, #32
 8006712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006716:	2300      	movs	r3, #0
 8006718:	e000      	b.n	800671c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800671a:	2302      	movs	r3, #2
  }
}
 800671c:	4618      	mov	r0, r3
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006732:	2300      	movs	r3, #0
 8006734:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b20      	cmp	r3, #32
 8006740:	d12a      	bne.n	8006798 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2224      	movs	r2, #36	; 0x24
 8006746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f022 0201 	bic.w	r2, r2, #1
 8006758:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006760:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006762:	89fb      	ldrh	r3, [r7, #14]
 8006764:	f023 030f 	bic.w	r3, r3, #15
 8006768:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	b29a      	uxth	r2, r3
 800676e:	89fb      	ldrh	r3, [r7, #14]
 8006770:	4313      	orrs	r3, r2
 8006772:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	89fa      	ldrh	r2, [r7, #14]
 800677a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f042 0201 	orr.w	r2, r2, #1
 800678a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2220      	movs	r2, #32
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006794:	2300      	movs	r3, #0
 8006796:	e000      	b.n	800679a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006798:	2302      	movs	r3, #2
  }
}
 800679a:	4618      	mov	r0, r3
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
	...

080067a8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e0bf      	b.n	800693a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d106      	bne.n	80067d4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f7fc f8b6 	bl	8002940 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	699a      	ldr	r2, [r3, #24]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80067ea:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6999      	ldr	r1, [r3, #24]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006800:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	430a      	orrs	r2, r1
 800680e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6899      	ldr	r1, [r3, #8]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	4b4a      	ldr	r3, [pc, #296]	; (8006944 <HAL_LTDC_Init+0x19c>)
 800681c:	400b      	ands	r3, r1
 800681e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	041b      	lsls	r3, r3, #16
 8006826:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6899      	ldr	r1, [r3, #8]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	699a      	ldr	r2, [r3, #24]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	431a      	orrs	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68d9      	ldr	r1, [r3, #12]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	4b3e      	ldr	r3, [pc, #248]	; (8006944 <HAL_LTDC_Init+0x19c>)
 800684a:	400b      	ands	r3, r1
 800684c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	041b      	lsls	r3, r3, #16
 8006854:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68d9      	ldr	r1, [r3, #12]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a1a      	ldr	r2, [r3, #32]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	431a      	orrs	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6919      	ldr	r1, [r3, #16]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	4b33      	ldr	r3, [pc, #204]	; (8006944 <HAL_LTDC_Init+0x19c>)
 8006878:	400b      	ands	r3, r1
 800687a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006880:	041b      	lsls	r3, r3, #16
 8006882:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6919      	ldr	r1, [r3, #16]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	431a      	orrs	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	430a      	orrs	r2, r1
 8006898:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6959      	ldr	r1, [r3, #20]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	4b27      	ldr	r3, [pc, #156]	; (8006944 <HAL_LTDC_Init+0x19c>)
 80068a6:	400b      	ands	r3, r1
 80068a8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ae:	041b      	lsls	r3, r3, #16
 80068b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6959      	ldr	r1, [r3, #20]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	431a      	orrs	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068ce:	021b      	lsls	r3, r3, #8
 80068d0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80068d8:	041b      	lsls	r3, r3, #16
 80068da:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80068ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80068fe:	431a      	orrs	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	430a      	orrs	r2, r1
 8006906:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0206 	orr.w	r2, r2, #6
 8006916:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	699a      	ldr	r2, [r3, #24]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f042 0201 	orr.w	r2, r2, #1
 8006926:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	f000f800 	.word	0xf000f800

08006948 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006956:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f003 0304 	and.w	r3, r3, #4
 8006966:	2b00      	cmp	r3, #0
 8006968:	d023      	beq.n	80069b2 <HAL_LTDC_IRQHandler+0x6a>
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	f003 0304 	and.w	r3, r3, #4
 8006970:	2b00      	cmp	r3, #0
 8006972:	d01e      	beq.n	80069b2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f022 0204 	bic.w	r2, r2, #4
 8006982:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2204      	movs	r2, #4
 800698a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006992:	f043 0201 	orr.w	r2, r3, #1
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2204      	movs	r2, #4
 80069a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f86f 	bl	8006a90 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f003 0302 	and.w	r3, r3, #2
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d023      	beq.n	8006a04 <HAL_LTDC_IRQHandler+0xbc>
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d01e      	beq.n	8006a04 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0202 	bic.w	r2, r2, #2
 80069d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2202      	movs	r2, #2
 80069dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80069e4:	f043 0202 	orr.w	r2, r3, #2
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2204      	movs	r2, #4
 80069f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f846 	bl	8006a90 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d01b      	beq.n	8006a46 <HAL_LTDC_IRQHandler+0xfe>
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d016      	beq.n	8006a46 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f022 0201 	bic.w	r2, r2, #1
 8006a26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f82f 	bl	8006aa4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f003 0308 	and.w	r3, r3, #8
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d01b      	beq.n	8006a88 <HAL_LTDC_IRQHandler+0x140>
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	f003 0308 	and.w	r3, r3, #8
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d016      	beq.n	8006a88 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f022 0208 	bic.w	r2, r2, #8
 8006a68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2208      	movs	r2, #8
 8006a70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f7fa ff30 	bl	80018e8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006a88:	bf00      	nop
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006ab8:	b5b0      	push	{r4, r5, r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d101      	bne.n	8006ad2 <HAL_LTDC_ConfigLayer+0x1a>
 8006ace:	2302      	movs	r3, #2
 8006ad0:	e02c      	b.n	8006b2c <HAL_LTDC_ConfigLayer+0x74>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2202      	movs	r2, #2
 8006ade:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2134      	movs	r1, #52	; 0x34
 8006ae8:	fb01 f303 	mul.w	r3, r1, r3
 8006aec:	4413      	add	r3, r2
 8006aee:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	4614      	mov	r4, r2
 8006af6:	461d      	mov	r5, r3
 8006af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006afc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006afe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b04:	682b      	ldr	r3, [r5, #0]
 8006b06:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	68b9      	ldr	r1, [r7, #8]
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f000 f83b 	bl	8006b88 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2201      	movs	r2, #1
 8006b18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bdb0      	pop	{r4, r5, r7, pc}

08006b34 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d101      	bne.n	8006b4a <HAL_LTDC_EnableDither+0x16>
 8006b46:	2302      	movs	r3, #2
 8006b48:	e016      	b.n	8006b78 <HAL_LTDC_EnableDither+0x44>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2202      	movs	r2, #2
 8006b56:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8006b5a:	4b0a      	ldr	r3, [pc, #40]	; (8006b84 <HAL_LTDC_EnableDither+0x50>)
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	4a09      	ldr	r2, [pc, #36]	; (8006b84 <HAL_LTDC_EnableDither+0x50>)
 8006b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b64:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	40016800 	.word	0x40016800

08006b88 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b089      	sub	sp, #36	; 0x24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	0c1b      	lsrs	r3, r3, #16
 8006ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ba4:	4413      	add	r3, r2
 8006ba6:	041b      	lsls	r3, r3, #16
 8006ba8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	01db      	lsls	r3, r3, #7
 8006bb4:	4413      	add	r3, r2
 8006bb6:	3384      	adds	r3, #132	; 0x84
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	6812      	ldr	r2, [r2, #0]
 8006bbe:	4611      	mov	r1, r2
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	01d2      	lsls	r2, r2, #7
 8006bc4:	440a      	add	r2, r1
 8006bc6:	3284      	adds	r2, #132	; 0x84
 8006bc8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006bcc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	0c1b      	lsrs	r3, r3, #16
 8006bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006bde:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006be0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4619      	mov	r1, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	01db      	lsls	r3, r3, #7
 8006bec:	440b      	add	r3, r1
 8006bee:	3384      	adds	r3, #132	; 0x84
 8006bf0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006bf6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	68da      	ldr	r2, [r3, #12]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c06:	4413      	add	r3, r2
 8006c08:	041b      	lsls	r3, r3, #16
 8006c0a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	461a      	mov	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	01db      	lsls	r3, r3, #7
 8006c16:	4413      	add	r3, r2
 8006c18:	3384      	adds	r3, #132	; 0x84
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	6812      	ldr	r2, [r2, #0]
 8006c20:	4611      	mov	r1, r2
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	01d2      	lsls	r2, r2, #7
 8006c26:	440a      	add	r2, r1
 8006c28:	3284      	adds	r2, #132	; 0x84
 8006c2a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006c2e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	689a      	ldr	r2, [r3, #8]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c3e:	4413      	add	r3, r2
 8006c40:	1c5a      	adds	r2, r3, #1
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4619      	mov	r1, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	01db      	lsls	r3, r3, #7
 8006c4c:	440b      	add	r3, r1
 8006c4e:	3384      	adds	r3, #132	; 0x84
 8006c50:	4619      	mov	r1, r3
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	01db      	lsls	r3, r3, #7
 8006c62:	4413      	add	r3, r2
 8006c64:	3384      	adds	r3, #132	; 0x84
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	6812      	ldr	r2, [r2, #0]
 8006c6c:	4611      	mov	r1, r2
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	01d2      	lsls	r2, r2, #7
 8006c72:	440a      	add	r2, r1
 8006c74:	3284      	adds	r2, #132	; 0x84
 8006c76:	f023 0307 	bic.w	r3, r3, #7
 8006c7a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	461a      	mov	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	01db      	lsls	r3, r3, #7
 8006c86:	4413      	add	r3, r2
 8006c88:	3384      	adds	r3, #132	; 0x84
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006c98:	021b      	lsls	r3, r3, #8
 8006c9a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006ca2:	041b      	lsls	r3, r3, #16
 8006ca4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	061b      	lsls	r3, r3, #24
 8006cac:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	01db      	lsls	r3, r3, #7
 8006cb8:	4413      	add	r3, r2
 8006cba:	3384      	adds	r3, #132	; 0x84
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	01db      	lsls	r3, r3, #7
 8006cc8:	4413      	add	r3, r2
 8006cca:	3384      	adds	r3, #132	; 0x84
 8006ccc:	461a      	mov	r2, r3
 8006cce:	2300      	movs	r3, #0
 8006cd0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006cd8:	461a      	mov	r2, r3
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	01db      	lsls	r3, r3, #7
 8006cec:	440b      	add	r3, r1
 8006cee:	3384      	adds	r3, #132	; 0x84
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	01db      	lsls	r3, r3, #7
 8006d02:	4413      	add	r3, r2
 8006d04:	3384      	adds	r3, #132	; 0x84
 8006d06:	695b      	ldr	r3, [r3, #20]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	6812      	ldr	r2, [r2, #0]
 8006d0c:	4611      	mov	r1, r2
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	01d2      	lsls	r2, r2, #7
 8006d12:	440a      	add	r2, r1
 8006d14:	3284      	adds	r2, #132	; 0x84
 8006d16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006d1a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	461a      	mov	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	01db      	lsls	r3, r3, #7
 8006d26:	4413      	add	r3, r2
 8006d28:	3384      	adds	r3, #132	; 0x84
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	461a      	mov	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	01db      	lsls	r3, r3, #7
 8006d3c:	4413      	add	r3, r2
 8006d3e:	3384      	adds	r3, #132	; 0x84
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	6812      	ldr	r2, [r2, #0]
 8006d46:	4611      	mov	r1, r2
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	01d2      	lsls	r2, r2, #7
 8006d4c:	440a      	add	r2, r1
 8006d4e:	3284      	adds	r2, #132	; 0x84
 8006d50:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006d54:	f023 0307 	bic.w	r3, r3, #7
 8006d58:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	69da      	ldr	r2, [r3, #28]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	68f9      	ldr	r1, [r7, #12]
 8006d64:	6809      	ldr	r1, [r1, #0]
 8006d66:	4608      	mov	r0, r1
 8006d68:	6879      	ldr	r1, [r7, #4]
 8006d6a:	01c9      	lsls	r1, r1, #7
 8006d6c:	4401      	add	r1, r0
 8006d6e:	3184      	adds	r1, #132	; 0x84
 8006d70:	4313      	orrs	r3, r2
 8006d72:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	461a      	mov	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	01db      	lsls	r3, r3, #7
 8006d7e:	4413      	add	r3, r2
 8006d80:	3384      	adds	r3, #132	; 0x84
 8006d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	01db      	lsls	r3, r3, #7
 8006d8e:	4413      	add	r3, r2
 8006d90:	3384      	adds	r3, #132	; 0x84
 8006d92:	461a      	mov	r2, r3
 8006d94:	2300      	movs	r3, #0
 8006d96:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	01db      	lsls	r3, r3, #7
 8006da2:	4413      	add	r3, r2
 8006da4:	3384      	adds	r3, #132	; 0x84
 8006da6:	461a      	mov	r2, r3
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d102      	bne.n	8006dbc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006db6:	2304      	movs	r3, #4
 8006db8:	61fb      	str	r3, [r7, #28]
 8006dba:	e01b      	b.n	8006df4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d102      	bne.n	8006dca <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	61fb      	str	r3, [r7, #28]
 8006dc8:	e014      	b.n	8006df4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	2b04      	cmp	r3, #4
 8006dd0:	d00b      	beq.n	8006dea <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d007      	beq.n	8006dea <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006dde:	2b03      	cmp	r3, #3
 8006de0:	d003      	beq.n	8006dea <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006de6:	2b07      	cmp	r3, #7
 8006de8:	d102      	bne.n	8006df0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006dea:	2302      	movs	r3, #2
 8006dec:	61fb      	str	r3, [r7, #28]
 8006dee:	e001      	b.n	8006df4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006df0:	2301      	movs	r3, #1
 8006df2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	461a      	mov	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	01db      	lsls	r3, r3, #7
 8006dfe:	4413      	add	r3, r2
 8006e00:	3384      	adds	r3, #132	; 0x84
 8006e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	6812      	ldr	r2, [r2, #0]
 8006e08:	4611      	mov	r1, r2
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	01d2      	lsls	r2, r2, #7
 8006e0e:	440a      	add	r2, r1
 8006e10:	3284      	adds	r2, #132	; 0x84
 8006e12:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006e16:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1c:	69fa      	ldr	r2, [r7, #28]
 8006e1e:	fb02 f303 	mul.w	r3, r2, r3
 8006e22:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	6859      	ldr	r1, [r3, #4]
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	1acb      	subs	r3, r1, r3
 8006e2e:	69f9      	ldr	r1, [r7, #28]
 8006e30:	fb01 f303 	mul.w	r3, r1, r3
 8006e34:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006e36:	68f9      	ldr	r1, [r7, #12]
 8006e38:	6809      	ldr	r1, [r1, #0]
 8006e3a:	4608      	mov	r0, r1
 8006e3c:	6879      	ldr	r1, [r7, #4]
 8006e3e:	01c9      	lsls	r1, r1, #7
 8006e40:	4401      	add	r1, r0
 8006e42:	3184      	adds	r1, #132	; 0x84
 8006e44:	4313      	orrs	r3, r2
 8006e46:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	01db      	lsls	r3, r3, #7
 8006e52:	4413      	add	r3, r2
 8006e54:	3384      	adds	r3, #132	; 0x84
 8006e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	6812      	ldr	r2, [r2, #0]
 8006e5c:	4611      	mov	r1, r2
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	01d2      	lsls	r2, r2, #7
 8006e62:	440a      	add	r2, r1
 8006e64:	3284      	adds	r2, #132	; 0x84
 8006e66:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006e6a:	f023 0307 	bic.w	r3, r3, #7
 8006e6e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	461a      	mov	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	01db      	lsls	r3, r3, #7
 8006e7a:	4413      	add	r3, r2
 8006e7c:	3384      	adds	r3, #132	; 0x84
 8006e7e:	461a      	mov	r2, r3
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e84:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	01db      	lsls	r3, r3, #7
 8006e90:	4413      	add	r3, r2
 8006e92:	3384      	adds	r3, #132	; 0x84
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	6812      	ldr	r2, [r2, #0]
 8006e9a:	4611      	mov	r1, r2
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	01d2      	lsls	r2, r2, #7
 8006ea0:	440a      	add	r2, r1
 8006ea2:	3284      	adds	r2, #132	; 0x84
 8006ea4:	f043 0301 	orr.w	r3, r3, #1
 8006ea8:	6013      	str	r3, [r2, #0]
}
 8006eaa:	bf00      	nop
 8006eac:	3724      	adds	r7, #36	; 0x24
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
	...

08006eb8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	603b      	str	r3, [r7, #0]
 8006ec6:	4b20      	ldr	r3, [pc, #128]	; (8006f48 <HAL_PWREx_EnableOverDrive+0x90>)
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eca:	4a1f      	ldr	r2, [pc, #124]	; (8006f48 <HAL_PWREx_EnableOverDrive+0x90>)
 8006ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8006ed2:	4b1d      	ldr	r3, [pc, #116]	; (8006f48 <HAL_PWREx_EnableOverDrive+0x90>)
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eda:	603b      	str	r3, [r7, #0]
 8006edc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006ede:	4b1b      	ldr	r3, [pc, #108]	; (8006f4c <HAL_PWREx_EnableOverDrive+0x94>)
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ee4:	f7fe f89c 	bl	8005020 <HAL_GetTick>
 8006ee8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006eea:	e009      	b.n	8006f00 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006eec:	f7fe f898 	bl	8005020 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006efa:	d901      	bls.n	8006f00 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e01f      	b.n	8006f40 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006f00:	4b13      	ldr	r3, [pc, #76]	; (8006f50 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f0c:	d1ee      	bne.n	8006eec <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006f0e:	4b11      	ldr	r3, [pc, #68]	; (8006f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f10:	2201      	movs	r2, #1
 8006f12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f14:	f7fe f884 	bl	8005020 <HAL_GetTick>
 8006f18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006f1a:	e009      	b.n	8006f30 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006f1c:	f7fe f880 	bl	8005020 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f2a:	d901      	bls.n	8006f30 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e007      	b.n	8006f40 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006f30:	4b07      	ldr	r3, [pc, #28]	; (8006f50 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f3c:	d1ee      	bne.n	8006f1c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	40023800 	.word	0x40023800
 8006f4c:	420e0040 	.word	0x420e0040
 8006f50:	40007000 	.word	0x40007000
 8006f54:	420e0044 	.word	0x420e0044

08006f58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e267      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d075      	beq.n	8007062 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f76:	4b88      	ldr	r3, [pc, #544]	; (8007198 <HAL_RCC_OscConfig+0x240>)
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f003 030c 	and.w	r3, r3, #12
 8006f7e:	2b04      	cmp	r3, #4
 8006f80:	d00c      	beq.n	8006f9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f82:	4b85      	ldr	r3, [pc, #532]	; (8007198 <HAL_RCC_OscConfig+0x240>)
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f8a:	2b08      	cmp	r3, #8
 8006f8c:	d112      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f8e:	4b82      	ldr	r3, [pc, #520]	; (8007198 <HAL_RCC_OscConfig+0x240>)
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f9a:	d10b      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f9c:	4b7e      	ldr	r3, [pc, #504]	; (8007198 <HAL_RCC_OscConfig+0x240>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d05b      	beq.n	8007060 <HAL_RCC_OscConfig+0x108>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d157      	bne.n	8007060 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e242      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fbc:	d106      	bne.n	8006fcc <HAL_RCC_OscConfig+0x74>
 8006fbe:	4b76      	ldr	r3, [pc, #472]	; (8007198 <HAL_RCC_OscConfig+0x240>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a75      	ldr	r2, [pc, #468]	; (8007198 <HAL_RCC_OscConfig+0x240>)
 8006fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fc8:	6013      	str	r3, [r2, #0]
 8006fca:	e01d      	b.n	8007008 <HAL_RCC_OscConfig+0xb0>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fd4:	d10c      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x98>
 8006fd6:	4b70      	ldr	r3, [pc, #448]	; (8007198 <HAL_RCC_OscConfig+0x240>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a6f      	ldr	r2, [pc, #444]	; (8007198 <HAL_RCC_OscConfig+0x240>)
 8006fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	4b6d      	ldr	r3, [pc, #436]	; (8007198 <HAL_RCC_OscConfig+0x240>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a6c      	ldr	r2, [pc, #432]	; (8007198 <HAL_RCC_OscConfig+0x240>)
 8006fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fec:	6013      	str	r3, [r2, #0]
 8006fee:	e00b      	b.n	8007008 <HAL_RCC_OscConfig+0xb0>
 8006ff0:	4b69      	ldr	r3, [pc, #420]	; (8007198 <HAL_RCC_OscConfig+0x240>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a68      	ldr	r2, [pc, #416]	; (8007198 <HAL_RCC_OscConfig+0x240>)
 8006ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ffa:	6013      	str	r3, [r2, #0]
 8006ffc:	4b66      	ldr	r3, [pc, #408]	; (8007198 <HAL_RCC_OscConfig+0x240>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a65      	ldr	r2, [pc, #404]	; (8007198 <HAL_RCC_OscConfig+0x240>)
 8007002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007006:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d013      	beq.n	8007038 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007010:	f7fe f806 	bl	8005020 <HAL_GetTick>
 8007014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007016:	e008      	b.n	800702a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007018:	f7fe f802 	bl	8005020 <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	2b64      	cmp	r3, #100	; 0x64
 8007024:	d901      	bls.n	800702a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e207      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800702a:	4b5b      	ldr	r3, [pc, #364]	; (8007198 <HAL_RCC_OscConfig+0x240>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d0f0      	beq.n	8007018 <HAL_RCC_OscConfig+0xc0>
 8007036:	e014      	b.n	8007062 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007038:	f7fd fff2 	bl	8005020 <HAL_GetTick>
 800703c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800703e:	e008      	b.n	8007052 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007040:	f7fd ffee 	bl	8005020 <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	2b64      	cmp	r3, #100	; 0x64
 800704c:	d901      	bls.n	8007052 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e1f3      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007052:	4b51      	ldr	r3, [pc, #324]	; (8007198 <HAL_RCC_OscConfig+0x240>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1f0      	bne.n	8007040 <HAL_RCC_OscConfig+0xe8>
 800705e:	e000      	b.n	8007062 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0302 	and.w	r3, r3, #2
 800706a:	2b00      	cmp	r3, #0
 800706c:	d063      	beq.n	8007136 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800706e:	4b4a      	ldr	r3, [pc, #296]	; (8007198 <HAL_RCC_OscConfig+0x240>)
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f003 030c 	and.w	r3, r3, #12
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00b      	beq.n	8007092 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800707a:	4b47      	ldr	r3, [pc, #284]	; (8007198 <HAL_RCC_OscConfig+0x240>)
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007082:	2b08      	cmp	r3, #8
 8007084:	d11c      	bne.n	80070c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007086:	4b44      	ldr	r3, [pc, #272]	; (8007198 <HAL_RCC_OscConfig+0x240>)
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d116      	bne.n	80070c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007092:	4b41      	ldr	r3, [pc, #260]	; (8007198 <HAL_RCC_OscConfig+0x240>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0302 	and.w	r3, r3, #2
 800709a:	2b00      	cmp	r3, #0
 800709c:	d005      	beq.n	80070aa <HAL_RCC_OscConfig+0x152>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d001      	beq.n	80070aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e1c7      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070aa:	4b3b      	ldr	r3, [pc, #236]	; (8007198 <HAL_RCC_OscConfig+0x240>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	00db      	lsls	r3, r3, #3
 80070b8:	4937      	ldr	r1, [pc, #220]	; (8007198 <HAL_RCC_OscConfig+0x240>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070be:	e03a      	b.n	8007136 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d020      	beq.n	800710a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070c8:	4b34      	ldr	r3, [pc, #208]	; (800719c <HAL_RCC_OscConfig+0x244>)
 80070ca:	2201      	movs	r2, #1
 80070cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ce:	f7fd ffa7 	bl	8005020 <HAL_GetTick>
 80070d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070d4:	e008      	b.n	80070e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070d6:	f7fd ffa3 	bl	8005020 <HAL_GetTick>
 80070da:	4602      	mov	r2, r0
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d901      	bls.n	80070e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e1a8      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070e8:	4b2b      	ldr	r3, [pc, #172]	; (8007198 <HAL_RCC_OscConfig+0x240>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0302 	and.w	r3, r3, #2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d0f0      	beq.n	80070d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070f4:	4b28      	ldr	r3, [pc, #160]	; (8007198 <HAL_RCC_OscConfig+0x240>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	00db      	lsls	r3, r3, #3
 8007102:	4925      	ldr	r1, [pc, #148]	; (8007198 <HAL_RCC_OscConfig+0x240>)
 8007104:	4313      	orrs	r3, r2
 8007106:	600b      	str	r3, [r1, #0]
 8007108:	e015      	b.n	8007136 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800710a:	4b24      	ldr	r3, [pc, #144]	; (800719c <HAL_RCC_OscConfig+0x244>)
 800710c:	2200      	movs	r2, #0
 800710e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007110:	f7fd ff86 	bl	8005020 <HAL_GetTick>
 8007114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007116:	e008      	b.n	800712a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007118:	f7fd ff82 	bl	8005020 <HAL_GetTick>
 800711c:	4602      	mov	r2, r0
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	2b02      	cmp	r3, #2
 8007124:	d901      	bls.n	800712a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e187      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800712a:	4b1b      	ldr	r3, [pc, #108]	; (8007198 <HAL_RCC_OscConfig+0x240>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0302 	and.w	r3, r3, #2
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1f0      	bne.n	8007118 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 0308 	and.w	r3, r3, #8
 800713e:	2b00      	cmp	r3, #0
 8007140:	d036      	beq.n	80071b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d016      	beq.n	8007178 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800714a:	4b15      	ldr	r3, [pc, #84]	; (80071a0 <HAL_RCC_OscConfig+0x248>)
 800714c:	2201      	movs	r2, #1
 800714e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007150:	f7fd ff66 	bl	8005020 <HAL_GetTick>
 8007154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007156:	e008      	b.n	800716a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007158:	f7fd ff62 	bl	8005020 <HAL_GetTick>
 800715c:	4602      	mov	r2, r0
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	2b02      	cmp	r3, #2
 8007164:	d901      	bls.n	800716a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e167      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800716a:	4b0b      	ldr	r3, [pc, #44]	; (8007198 <HAL_RCC_OscConfig+0x240>)
 800716c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800716e:	f003 0302 	and.w	r3, r3, #2
 8007172:	2b00      	cmp	r3, #0
 8007174:	d0f0      	beq.n	8007158 <HAL_RCC_OscConfig+0x200>
 8007176:	e01b      	b.n	80071b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007178:	4b09      	ldr	r3, [pc, #36]	; (80071a0 <HAL_RCC_OscConfig+0x248>)
 800717a:	2200      	movs	r2, #0
 800717c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800717e:	f7fd ff4f 	bl	8005020 <HAL_GetTick>
 8007182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007184:	e00e      	b.n	80071a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007186:	f7fd ff4b 	bl	8005020 <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	2b02      	cmp	r3, #2
 8007192:	d907      	bls.n	80071a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007194:	2303      	movs	r3, #3
 8007196:	e150      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
 8007198:	40023800 	.word	0x40023800
 800719c:	42470000 	.word	0x42470000
 80071a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071a4:	4b88      	ldr	r3, [pc, #544]	; (80073c8 <HAL_RCC_OscConfig+0x470>)
 80071a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071a8:	f003 0302 	and.w	r3, r3, #2
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1ea      	bne.n	8007186 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0304 	and.w	r3, r3, #4
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	f000 8097 	beq.w	80072ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071be:	2300      	movs	r3, #0
 80071c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071c2:	4b81      	ldr	r3, [pc, #516]	; (80073c8 <HAL_RCC_OscConfig+0x470>)
 80071c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10f      	bne.n	80071ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071ce:	2300      	movs	r3, #0
 80071d0:	60bb      	str	r3, [r7, #8]
 80071d2:	4b7d      	ldr	r3, [pc, #500]	; (80073c8 <HAL_RCC_OscConfig+0x470>)
 80071d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d6:	4a7c      	ldr	r2, [pc, #496]	; (80073c8 <HAL_RCC_OscConfig+0x470>)
 80071d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071dc:	6413      	str	r3, [r2, #64]	; 0x40
 80071de:	4b7a      	ldr	r3, [pc, #488]	; (80073c8 <HAL_RCC_OscConfig+0x470>)
 80071e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071e6:	60bb      	str	r3, [r7, #8]
 80071e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071ea:	2301      	movs	r3, #1
 80071ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071ee:	4b77      	ldr	r3, [pc, #476]	; (80073cc <HAL_RCC_OscConfig+0x474>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d118      	bne.n	800722c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071fa:	4b74      	ldr	r3, [pc, #464]	; (80073cc <HAL_RCC_OscConfig+0x474>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a73      	ldr	r2, [pc, #460]	; (80073cc <HAL_RCC_OscConfig+0x474>)
 8007200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007206:	f7fd ff0b 	bl	8005020 <HAL_GetTick>
 800720a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800720c:	e008      	b.n	8007220 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800720e:	f7fd ff07 	bl	8005020 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	2b02      	cmp	r3, #2
 800721a:	d901      	bls.n	8007220 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	e10c      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007220:	4b6a      	ldr	r3, [pc, #424]	; (80073cc <HAL_RCC_OscConfig+0x474>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007228:	2b00      	cmp	r3, #0
 800722a:	d0f0      	beq.n	800720e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d106      	bne.n	8007242 <HAL_RCC_OscConfig+0x2ea>
 8007234:	4b64      	ldr	r3, [pc, #400]	; (80073c8 <HAL_RCC_OscConfig+0x470>)
 8007236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007238:	4a63      	ldr	r2, [pc, #396]	; (80073c8 <HAL_RCC_OscConfig+0x470>)
 800723a:	f043 0301 	orr.w	r3, r3, #1
 800723e:	6713      	str	r3, [r2, #112]	; 0x70
 8007240:	e01c      	b.n	800727c <HAL_RCC_OscConfig+0x324>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	2b05      	cmp	r3, #5
 8007248:	d10c      	bne.n	8007264 <HAL_RCC_OscConfig+0x30c>
 800724a:	4b5f      	ldr	r3, [pc, #380]	; (80073c8 <HAL_RCC_OscConfig+0x470>)
 800724c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800724e:	4a5e      	ldr	r2, [pc, #376]	; (80073c8 <HAL_RCC_OscConfig+0x470>)
 8007250:	f043 0304 	orr.w	r3, r3, #4
 8007254:	6713      	str	r3, [r2, #112]	; 0x70
 8007256:	4b5c      	ldr	r3, [pc, #368]	; (80073c8 <HAL_RCC_OscConfig+0x470>)
 8007258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800725a:	4a5b      	ldr	r2, [pc, #364]	; (80073c8 <HAL_RCC_OscConfig+0x470>)
 800725c:	f043 0301 	orr.w	r3, r3, #1
 8007260:	6713      	str	r3, [r2, #112]	; 0x70
 8007262:	e00b      	b.n	800727c <HAL_RCC_OscConfig+0x324>
 8007264:	4b58      	ldr	r3, [pc, #352]	; (80073c8 <HAL_RCC_OscConfig+0x470>)
 8007266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007268:	4a57      	ldr	r2, [pc, #348]	; (80073c8 <HAL_RCC_OscConfig+0x470>)
 800726a:	f023 0301 	bic.w	r3, r3, #1
 800726e:	6713      	str	r3, [r2, #112]	; 0x70
 8007270:	4b55      	ldr	r3, [pc, #340]	; (80073c8 <HAL_RCC_OscConfig+0x470>)
 8007272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007274:	4a54      	ldr	r2, [pc, #336]	; (80073c8 <HAL_RCC_OscConfig+0x470>)
 8007276:	f023 0304 	bic.w	r3, r3, #4
 800727a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d015      	beq.n	80072b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007284:	f7fd fecc 	bl	8005020 <HAL_GetTick>
 8007288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800728a:	e00a      	b.n	80072a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800728c:	f7fd fec8 	bl	8005020 <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	f241 3288 	movw	r2, #5000	; 0x1388
 800729a:	4293      	cmp	r3, r2
 800729c:	d901      	bls.n	80072a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e0cb      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072a2:	4b49      	ldr	r3, [pc, #292]	; (80073c8 <HAL_RCC_OscConfig+0x470>)
 80072a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a6:	f003 0302 	and.w	r3, r3, #2
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d0ee      	beq.n	800728c <HAL_RCC_OscConfig+0x334>
 80072ae:	e014      	b.n	80072da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072b0:	f7fd feb6 	bl	8005020 <HAL_GetTick>
 80072b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072b6:	e00a      	b.n	80072ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072b8:	f7fd feb2 	bl	8005020 <HAL_GetTick>
 80072bc:	4602      	mov	r2, r0
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d901      	bls.n	80072ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e0b5      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072ce:	4b3e      	ldr	r3, [pc, #248]	; (80073c8 <HAL_RCC_OscConfig+0x470>)
 80072d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1ee      	bne.n	80072b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072da:	7dfb      	ldrb	r3, [r7, #23]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d105      	bne.n	80072ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072e0:	4b39      	ldr	r3, [pc, #228]	; (80073c8 <HAL_RCC_OscConfig+0x470>)
 80072e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e4:	4a38      	ldr	r2, [pc, #224]	; (80073c8 <HAL_RCC_OscConfig+0x470>)
 80072e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f000 80a1 	beq.w	8007438 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80072f6:	4b34      	ldr	r3, [pc, #208]	; (80073c8 <HAL_RCC_OscConfig+0x470>)
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f003 030c 	and.w	r3, r3, #12
 80072fe:	2b08      	cmp	r3, #8
 8007300:	d05c      	beq.n	80073bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	2b02      	cmp	r3, #2
 8007308:	d141      	bne.n	800738e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800730a:	4b31      	ldr	r3, [pc, #196]	; (80073d0 <HAL_RCC_OscConfig+0x478>)
 800730c:	2200      	movs	r2, #0
 800730e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007310:	f7fd fe86 	bl	8005020 <HAL_GetTick>
 8007314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007316:	e008      	b.n	800732a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007318:	f7fd fe82 	bl	8005020 <HAL_GetTick>
 800731c:	4602      	mov	r2, r0
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	2b02      	cmp	r3, #2
 8007324:	d901      	bls.n	800732a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e087      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800732a:	4b27      	ldr	r3, [pc, #156]	; (80073c8 <HAL_RCC_OscConfig+0x470>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1f0      	bne.n	8007318 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	69da      	ldr	r2, [r3, #28]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	431a      	orrs	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	019b      	lsls	r3, r3, #6
 8007346:	431a      	orrs	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734c:	085b      	lsrs	r3, r3, #1
 800734e:	3b01      	subs	r3, #1
 8007350:	041b      	lsls	r3, r3, #16
 8007352:	431a      	orrs	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007358:	061b      	lsls	r3, r3, #24
 800735a:	491b      	ldr	r1, [pc, #108]	; (80073c8 <HAL_RCC_OscConfig+0x470>)
 800735c:	4313      	orrs	r3, r2
 800735e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007360:	4b1b      	ldr	r3, [pc, #108]	; (80073d0 <HAL_RCC_OscConfig+0x478>)
 8007362:	2201      	movs	r2, #1
 8007364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007366:	f7fd fe5b 	bl	8005020 <HAL_GetTick>
 800736a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800736c:	e008      	b.n	8007380 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800736e:	f7fd fe57 	bl	8005020 <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	2b02      	cmp	r3, #2
 800737a:	d901      	bls.n	8007380 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e05c      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007380:	4b11      	ldr	r3, [pc, #68]	; (80073c8 <HAL_RCC_OscConfig+0x470>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d0f0      	beq.n	800736e <HAL_RCC_OscConfig+0x416>
 800738c:	e054      	b.n	8007438 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800738e:	4b10      	ldr	r3, [pc, #64]	; (80073d0 <HAL_RCC_OscConfig+0x478>)
 8007390:	2200      	movs	r2, #0
 8007392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007394:	f7fd fe44 	bl	8005020 <HAL_GetTick>
 8007398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800739a:	e008      	b.n	80073ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800739c:	f7fd fe40 	bl	8005020 <HAL_GetTick>
 80073a0:	4602      	mov	r2, r0
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d901      	bls.n	80073ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80073aa:	2303      	movs	r3, #3
 80073ac:	e045      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073ae:	4b06      	ldr	r3, [pc, #24]	; (80073c8 <HAL_RCC_OscConfig+0x470>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1f0      	bne.n	800739c <HAL_RCC_OscConfig+0x444>
 80073ba:	e03d      	b.n	8007438 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d107      	bne.n	80073d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e038      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
 80073c8:	40023800 	.word	0x40023800
 80073cc:	40007000 	.word	0x40007000
 80073d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80073d4:	4b1b      	ldr	r3, [pc, #108]	; (8007444 <HAL_RCC_OscConfig+0x4ec>)
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d028      	beq.n	8007434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d121      	bne.n	8007434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d11a      	bne.n	8007434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007404:	4013      	ands	r3, r2
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800740a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800740c:	4293      	cmp	r3, r2
 800740e:	d111      	bne.n	8007434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741a:	085b      	lsrs	r3, r3, #1
 800741c:	3b01      	subs	r3, #1
 800741e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007420:	429a      	cmp	r2, r3
 8007422:	d107      	bne.n	8007434 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007430:	429a      	cmp	r2, r3
 8007432:	d001      	beq.n	8007438 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e000      	b.n	800743a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3718      	adds	r7, #24
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	40023800 	.word	0x40023800

08007448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e0cc      	b.n	80075f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800745c:	4b68      	ldr	r3, [pc, #416]	; (8007600 <HAL_RCC_ClockConfig+0x1b8>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 030f 	and.w	r3, r3, #15
 8007464:	683a      	ldr	r2, [r7, #0]
 8007466:	429a      	cmp	r2, r3
 8007468:	d90c      	bls.n	8007484 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800746a:	4b65      	ldr	r3, [pc, #404]	; (8007600 <HAL_RCC_ClockConfig+0x1b8>)
 800746c:	683a      	ldr	r2, [r7, #0]
 800746e:	b2d2      	uxtb	r2, r2
 8007470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007472:	4b63      	ldr	r3, [pc, #396]	; (8007600 <HAL_RCC_ClockConfig+0x1b8>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 030f 	and.w	r3, r3, #15
 800747a:	683a      	ldr	r2, [r7, #0]
 800747c:	429a      	cmp	r2, r3
 800747e:	d001      	beq.n	8007484 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e0b8      	b.n	80075f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0302 	and.w	r3, r3, #2
 800748c:	2b00      	cmp	r3, #0
 800748e:	d020      	beq.n	80074d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0304 	and.w	r3, r3, #4
 8007498:	2b00      	cmp	r3, #0
 800749a:	d005      	beq.n	80074a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800749c:	4b59      	ldr	r3, [pc, #356]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	4a58      	ldr	r2, [pc, #352]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80074a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80074a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0308 	and.w	r3, r3, #8
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d005      	beq.n	80074c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80074b4:	4b53      	ldr	r3, [pc, #332]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	4a52      	ldr	r2, [pc, #328]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80074ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80074be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074c0:	4b50      	ldr	r3, [pc, #320]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	494d      	ldr	r1, [pc, #308]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d044      	beq.n	8007568 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d107      	bne.n	80074f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074e6:	4b47      	ldr	r3, [pc, #284]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d119      	bne.n	8007526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e07f      	b.n	80075f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d003      	beq.n	8007506 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007502:	2b03      	cmp	r3, #3
 8007504:	d107      	bne.n	8007516 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007506:	4b3f      	ldr	r3, [pc, #252]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d109      	bne.n	8007526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e06f      	b.n	80075f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007516:	4b3b      	ldr	r3, [pc, #236]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 0302 	and.w	r3, r3, #2
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e067      	b.n	80075f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007526:	4b37      	ldr	r3, [pc, #220]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f023 0203 	bic.w	r2, r3, #3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	4934      	ldr	r1, [pc, #208]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 8007534:	4313      	orrs	r3, r2
 8007536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007538:	f7fd fd72 	bl	8005020 <HAL_GetTick>
 800753c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800753e:	e00a      	b.n	8007556 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007540:	f7fd fd6e 	bl	8005020 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	f241 3288 	movw	r2, #5000	; 0x1388
 800754e:	4293      	cmp	r3, r2
 8007550:	d901      	bls.n	8007556 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e04f      	b.n	80075f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007556:	4b2b      	ldr	r3, [pc, #172]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f003 020c 	and.w	r2, r3, #12
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	429a      	cmp	r2, r3
 8007566:	d1eb      	bne.n	8007540 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007568:	4b25      	ldr	r3, [pc, #148]	; (8007600 <HAL_RCC_ClockConfig+0x1b8>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 030f 	and.w	r3, r3, #15
 8007570:	683a      	ldr	r2, [r7, #0]
 8007572:	429a      	cmp	r2, r3
 8007574:	d20c      	bcs.n	8007590 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007576:	4b22      	ldr	r3, [pc, #136]	; (8007600 <HAL_RCC_ClockConfig+0x1b8>)
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	b2d2      	uxtb	r2, r2
 800757c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800757e:	4b20      	ldr	r3, [pc, #128]	; (8007600 <HAL_RCC_ClockConfig+0x1b8>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 030f 	and.w	r3, r3, #15
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	429a      	cmp	r2, r3
 800758a:	d001      	beq.n	8007590 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e032      	b.n	80075f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0304 	and.w	r3, r3, #4
 8007598:	2b00      	cmp	r3, #0
 800759a:	d008      	beq.n	80075ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800759c:	4b19      	ldr	r3, [pc, #100]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	4916      	ldr	r1, [pc, #88]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80075aa:	4313      	orrs	r3, r2
 80075ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 0308 	and.w	r3, r3, #8
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d009      	beq.n	80075ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80075ba:	4b12      	ldr	r3, [pc, #72]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	00db      	lsls	r3, r3, #3
 80075c8:	490e      	ldr	r1, [pc, #56]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80075ce:	f000 f821 	bl	8007614 <HAL_RCC_GetSysClockFreq>
 80075d2:	4602      	mov	r2, r0
 80075d4:	4b0b      	ldr	r3, [pc, #44]	; (8007604 <HAL_RCC_ClockConfig+0x1bc>)
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	091b      	lsrs	r3, r3, #4
 80075da:	f003 030f 	and.w	r3, r3, #15
 80075de:	490a      	ldr	r1, [pc, #40]	; (8007608 <HAL_RCC_ClockConfig+0x1c0>)
 80075e0:	5ccb      	ldrb	r3, [r1, r3]
 80075e2:	fa22 f303 	lsr.w	r3, r2, r3
 80075e6:	4a09      	ldr	r2, [pc, #36]	; (800760c <HAL_RCC_ClockConfig+0x1c4>)
 80075e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80075ea:	4b09      	ldr	r3, [pc, #36]	; (8007610 <HAL_RCC_ClockConfig+0x1c8>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fb fc4a 	bl	8002e88 <HAL_InitTick>

  return HAL_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	40023c00 	.word	0x40023c00
 8007604:	40023800 	.word	0x40023800
 8007608:	080104d8 	.word	0x080104d8
 800760c:	20000020 	.word	0x20000020
 8007610:	2000009c 	.word	0x2000009c

08007614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007618:	b094      	sub	sp, #80	; 0x50
 800761a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800761c:	2300      	movs	r3, #0
 800761e:	647b      	str	r3, [r7, #68]	; 0x44
 8007620:	2300      	movs	r3, #0
 8007622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007624:	2300      	movs	r3, #0
 8007626:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007628:	2300      	movs	r3, #0
 800762a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800762c:	4b79      	ldr	r3, [pc, #484]	; (8007814 <HAL_RCC_GetSysClockFreq+0x200>)
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f003 030c 	and.w	r3, r3, #12
 8007634:	2b08      	cmp	r3, #8
 8007636:	d00d      	beq.n	8007654 <HAL_RCC_GetSysClockFreq+0x40>
 8007638:	2b08      	cmp	r3, #8
 800763a:	f200 80e1 	bhi.w	8007800 <HAL_RCC_GetSysClockFreq+0x1ec>
 800763e:	2b00      	cmp	r3, #0
 8007640:	d002      	beq.n	8007648 <HAL_RCC_GetSysClockFreq+0x34>
 8007642:	2b04      	cmp	r3, #4
 8007644:	d003      	beq.n	800764e <HAL_RCC_GetSysClockFreq+0x3a>
 8007646:	e0db      	b.n	8007800 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007648:	4b73      	ldr	r3, [pc, #460]	; (8007818 <HAL_RCC_GetSysClockFreq+0x204>)
 800764a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800764c:	e0db      	b.n	8007806 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800764e:	4b73      	ldr	r3, [pc, #460]	; (800781c <HAL_RCC_GetSysClockFreq+0x208>)
 8007650:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007652:	e0d8      	b.n	8007806 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007654:	4b6f      	ldr	r3, [pc, #444]	; (8007814 <HAL_RCC_GetSysClockFreq+0x200>)
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800765c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800765e:	4b6d      	ldr	r3, [pc, #436]	; (8007814 <HAL_RCC_GetSysClockFreq+0x200>)
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d063      	beq.n	8007732 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800766a:	4b6a      	ldr	r3, [pc, #424]	; (8007814 <HAL_RCC_GetSysClockFreq+0x200>)
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	099b      	lsrs	r3, r3, #6
 8007670:	2200      	movs	r2, #0
 8007672:	63bb      	str	r3, [r7, #56]	; 0x38
 8007674:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800767c:	633b      	str	r3, [r7, #48]	; 0x30
 800767e:	2300      	movs	r3, #0
 8007680:	637b      	str	r3, [r7, #52]	; 0x34
 8007682:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007686:	4622      	mov	r2, r4
 8007688:	462b      	mov	r3, r5
 800768a:	f04f 0000 	mov.w	r0, #0
 800768e:	f04f 0100 	mov.w	r1, #0
 8007692:	0159      	lsls	r1, r3, #5
 8007694:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007698:	0150      	lsls	r0, r2, #5
 800769a:	4602      	mov	r2, r0
 800769c:	460b      	mov	r3, r1
 800769e:	4621      	mov	r1, r4
 80076a0:	1a51      	subs	r1, r2, r1
 80076a2:	6139      	str	r1, [r7, #16]
 80076a4:	4629      	mov	r1, r5
 80076a6:	eb63 0301 	sbc.w	r3, r3, r1
 80076aa:	617b      	str	r3, [r7, #20]
 80076ac:	f04f 0200 	mov.w	r2, #0
 80076b0:	f04f 0300 	mov.w	r3, #0
 80076b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80076b8:	4659      	mov	r1, fp
 80076ba:	018b      	lsls	r3, r1, #6
 80076bc:	4651      	mov	r1, sl
 80076be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80076c2:	4651      	mov	r1, sl
 80076c4:	018a      	lsls	r2, r1, #6
 80076c6:	4651      	mov	r1, sl
 80076c8:	ebb2 0801 	subs.w	r8, r2, r1
 80076cc:	4659      	mov	r1, fp
 80076ce:	eb63 0901 	sbc.w	r9, r3, r1
 80076d2:	f04f 0200 	mov.w	r2, #0
 80076d6:	f04f 0300 	mov.w	r3, #0
 80076da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076e6:	4690      	mov	r8, r2
 80076e8:	4699      	mov	r9, r3
 80076ea:	4623      	mov	r3, r4
 80076ec:	eb18 0303 	adds.w	r3, r8, r3
 80076f0:	60bb      	str	r3, [r7, #8]
 80076f2:	462b      	mov	r3, r5
 80076f4:	eb49 0303 	adc.w	r3, r9, r3
 80076f8:	60fb      	str	r3, [r7, #12]
 80076fa:	f04f 0200 	mov.w	r2, #0
 80076fe:	f04f 0300 	mov.w	r3, #0
 8007702:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007706:	4629      	mov	r1, r5
 8007708:	024b      	lsls	r3, r1, #9
 800770a:	4621      	mov	r1, r4
 800770c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007710:	4621      	mov	r1, r4
 8007712:	024a      	lsls	r2, r1, #9
 8007714:	4610      	mov	r0, r2
 8007716:	4619      	mov	r1, r3
 8007718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800771a:	2200      	movs	r2, #0
 800771c:	62bb      	str	r3, [r7, #40]	; 0x28
 800771e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007720:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007724:	f7f9 fac0 	bl	8000ca8 <__aeabi_uldivmod>
 8007728:	4602      	mov	r2, r0
 800772a:	460b      	mov	r3, r1
 800772c:	4613      	mov	r3, r2
 800772e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007730:	e058      	b.n	80077e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007732:	4b38      	ldr	r3, [pc, #224]	; (8007814 <HAL_RCC_GetSysClockFreq+0x200>)
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	099b      	lsrs	r3, r3, #6
 8007738:	2200      	movs	r2, #0
 800773a:	4618      	mov	r0, r3
 800773c:	4611      	mov	r1, r2
 800773e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007742:	623b      	str	r3, [r7, #32]
 8007744:	2300      	movs	r3, #0
 8007746:	627b      	str	r3, [r7, #36]	; 0x24
 8007748:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800774c:	4642      	mov	r2, r8
 800774e:	464b      	mov	r3, r9
 8007750:	f04f 0000 	mov.w	r0, #0
 8007754:	f04f 0100 	mov.w	r1, #0
 8007758:	0159      	lsls	r1, r3, #5
 800775a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800775e:	0150      	lsls	r0, r2, #5
 8007760:	4602      	mov	r2, r0
 8007762:	460b      	mov	r3, r1
 8007764:	4641      	mov	r1, r8
 8007766:	ebb2 0a01 	subs.w	sl, r2, r1
 800776a:	4649      	mov	r1, r9
 800776c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007770:	f04f 0200 	mov.w	r2, #0
 8007774:	f04f 0300 	mov.w	r3, #0
 8007778:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800777c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007780:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007784:	ebb2 040a 	subs.w	r4, r2, sl
 8007788:	eb63 050b 	sbc.w	r5, r3, fp
 800778c:	f04f 0200 	mov.w	r2, #0
 8007790:	f04f 0300 	mov.w	r3, #0
 8007794:	00eb      	lsls	r3, r5, #3
 8007796:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800779a:	00e2      	lsls	r2, r4, #3
 800779c:	4614      	mov	r4, r2
 800779e:	461d      	mov	r5, r3
 80077a0:	4643      	mov	r3, r8
 80077a2:	18e3      	adds	r3, r4, r3
 80077a4:	603b      	str	r3, [r7, #0]
 80077a6:	464b      	mov	r3, r9
 80077a8:	eb45 0303 	adc.w	r3, r5, r3
 80077ac:	607b      	str	r3, [r7, #4]
 80077ae:	f04f 0200 	mov.w	r2, #0
 80077b2:	f04f 0300 	mov.w	r3, #0
 80077b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80077ba:	4629      	mov	r1, r5
 80077bc:	028b      	lsls	r3, r1, #10
 80077be:	4621      	mov	r1, r4
 80077c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80077c4:	4621      	mov	r1, r4
 80077c6:	028a      	lsls	r2, r1, #10
 80077c8:	4610      	mov	r0, r2
 80077ca:	4619      	mov	r1, r3
 80077cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077ce:	2200      	movs	r2, #0
 80077d0:	61bb      	str	r3, [r7, #24]
 80077d2:	61fa      	str	r2, [r7, #28]
 80077d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077d8:	f7f9 fa66 	bl	8000ca8 <__aeabi_uldivmod>
 80077dc:	4602      	mov	r2, r0
 80077de:	460b      	mov	r3, r1
 80077e0:	4613      	mov	r3, r2
 80077e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80077e4:	4b0b      	ldr	r3, [pc, #44]	; (8007814 <HAL_RCC_GetSysClockFreq+0x200>)
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	0c1b      	lsrs	r3, r3, #16
 80077ea:	f003 0303 	and.w	r3, r3, #3
 80077ee:	3301      	adds	r3, #1
 80077f0:	005b      	lsls	r3, r3, #1
 80077f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80077f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80077fe:	e002      	b.n	8007806 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007800:	4b05      	ldr	r3, [pc, #20]	; (8007818 <HAL_RCC_GetSysClockFreq+0x204>)
 8007802:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007804:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007808:	4618      	mov	r0, r3
 800780a:	3750      	adds	r7, #80	; 0x50
 800780c:	46bd      	mov	sp, r7
 800780e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007812:	bf00      	nop
 8007814:	40023800 	.word	0x40023800
 8007818:	00f42400 	.word	0x00f42400
 800781c:	007a1200 	.word	0x007a1200

08007820 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007820:	b480      	push	{r7}
 8007822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007824:	4b03      	ldr	r3, [pc, #12]	; (8007834 <HAL_RCC_GetHCLKFreq+0x14>)
 8007826:	681b      	ldr	r3, [r3, #0]
}
 8007828:	4618      	mov	r0, r3
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	20000020 	.word	0x20000020

08007838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800783c:	f7ff fff0 	bl	8007820 <HAL_RCC_GetHCLKFreq>
 8007840:	4602      	mov	r2, r0
 8007842:	4b05      	ldr	r3, [pc, #20]	; (8007858 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	0a9b      	lsrs	r3, r3, #10
 8007848:	f003 0307 	and.w	r3, r3, #7
 800784c:	4903      	ldr	r1, [pc, #12]	; (800785c <HAL_RCC_GetPCLK1Freq+0x24>)
 800784e:	5ccb      	ldrb	r3, [r1, r3]
 8007850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007854:	4618      	mov	r0, r3
 8007856:	bd80      	pop	{r7, pc}
 8007858:	40023800 	.word	0x40023800
 800785c:	080104e8 	.word	0x080104e8

08007860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007864:	f7ff ffdc 	bl	8007820 <HAL_RCC_GetHCLKFreq>
 8007868:	4602      	mov	r2, r0
 800786a:	4b05      	ldr	r3, [pc, #20]	; (8007880 <HAL_RCC_GetPCLK2Freq+0x20>)
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	0b5b      	lsrs	r3, r3, #13
 8007870:	f003 0307 	and.w	r3, r3, #7
 8007874:	4903      	ldr	r1, [pc, #12]	; (8007884 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007876:	5ccb      	ldrb	r3, [r1, r3]
 8007878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800787c:	4618      	mov	r0, r3
 800787e:	bd80      	pop	{r7, pc}
 8007880:	40023800 	.word	0x40023800
 8007884:	080104e8 	.word	0x080104e8

08007888 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	220f      	movs	r2, #15
 8007896:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007898:	4b12      	ldr	r3, [pc, #72]	; (80078e4 <HAL_RCC_GetClockConfig+0x5c>)
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	f003 0203 	and.w	r2, r3, #3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80078a4:	4b0f      	ldr	r3, [pc, #60]	; (80078e4 <HAL_RCC_GetClockConfig+0x5c>)
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80078b0:	4b0c      	ldr	r3, [pc, #48]	; (80078e4 <HAL_RCC_GetClockConfig+0x5c>)
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80078bc:	4b09      	ldr	r3, [pc, #36]	; (80078e4 <HAL_RCC_GetClockConfig+0x5c>)
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	08db      	lsrs	r3, r3, #3
 80078c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80078ca:	4b07      	ldr	r3, [pc, #28]	; (80078e8 <HAL_RCC_GetClockConfig+0x60>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 020f 	and.w	r2, r3, #15
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	601a      	str	r2, [r3, #0]
}
 80078d6:	bf00      	nop
 80078d8:	370c      	adds	r7, #12
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	40023800 	.word	0x40023800
 80078e8:	40023c00 	.word	0x40023c00

080078ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b086      	sub	sp, #24
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80078f4:	2300      	movs	r3, #0
 80078f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80078f8:	2300      	movs	r3, #0
 80078fa:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10b      	bne.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007910:	2b00      	cmp	r3, #0
 8007912:	d105      	bne.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800791c:	2b00      	cmp	r3, #0
 800791e:	d075      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007920:	4b91      	ldr	r3, [pc, #580]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007922:	2200      	movs	r2, #0
 8007924:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007926:	f7fd fb7b 	bl	8005020 <HAL_GetTick>
 800792a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800792c:	e008      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800792e:	f7fd fb77 	bl	8005020 <HAL_GetTick>
 8007932:	4602      	mov	r2, r0
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	2b02      	cmp	r3, #2
 800793a:	d901      	bls.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e189      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007940:	4b8a      	ldr	r3, [pc, #552]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1f0      	bne.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f003 0301 	and.w	r3, r3, #1
 8007954:	2b00      	cmp	r3, #0
 8007956:	d009      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	019a      	lsls	r2, r3, #6
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	071b      	lsls	r3, r3, #28
 8007964:	4981      	ldr	r1, [pc, #516]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007966:	4313      	orrs	r3, r2
 8007968:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 0302 	and.w	r3, r3, #2
 8007974:	2b00      	cmp	r3, #0
 8007976:	d01f      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007978:	4b7c      	ldr	r3, [pc, #496]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800797a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800797e:	0f1b      	lsrs	r3, r3, #28
 8007980:	f003 0307 	and.w	r3, r3, #7
 8007984:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	019a      	lsls	r2, r3, #6
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	061b      	lsls	r3, r3, #24
 8007992:	431a      	orrs	r2, r3
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	071b      	lsls	r3, r3, #28
 8007998:	4974      	ldr	r1, [pc, #464]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800799a:	4313      	orrs	r3, r2
 800799c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80079a0:	4b72      	ldr	r3, [pc, #456]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80079a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079a6:	f023 021f 	bic.w	r2, r3, #31
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	69db      	ldr	r3, [r3, #28]
 80079ae:	3b01      	subs	r3, #1
 80079b0:	496e      	ldr	r1, [pc, #440]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80079b2:	4313      	orrs	r3, r2
 80079b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00d      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	019a      	lsls	r2, r3, #6
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	061b      	lsls	r3, r3, #24
 80079d0:	431a      	orrs	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	071b      	lsls	r3, r3, #28
 80079d8:	4964      	ldr	r1, [pc, #400]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80079da:	4313      	orrs	r3, r2
 80079dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80079e0:	4b61      	ldr	r3, [pc, #388]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80079e2:	2201      	movs	r2, #1
 80079e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80079e6:	f7fd fb1b 	bl	8005020 <HAL_GetTick>
 80079ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80079ec:	e008      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80079ee:	f7fd fb17 	bl	8005020 <HAL_GetTick>
 80079f2:	4602      	mov	r2, r0
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	d901      	bls.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079fc:	2303      	movs	r3, #3
 80079fe:	e129      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a00:	4b5a      	ldr	r3, [pc, #360]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d0f0      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0304 	and.w	r3, r3, #4
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d105      	bne.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d079      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007a24:	4b52      	ldr	r3, [pc, #328]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007a26:	2200      	movs	r2, #0
 8007a28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a2a:	f7fd faf9 	bl	8005020 <HAL_GetTick>
 8007a2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007a30:	e008      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007a32:	f7fd faf5 	bl	8005020 <HAL_GetTick>
 8007a36:	4602      	mov	r2, r0
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d901      	bls.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a40:	2303      	movs	r3, #3
 8007a42:	e107      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007a44:	4b49      	ldr	r3, [pc, #292]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a50:	d0ef      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 0304 	and.w	r3, r3, #4
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d020      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007a5e:	4b43      	ldr	r3, [pc, #268]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a64:	0f1b      	lsrs	r3, r3, #28
 8007a66:	f003 0307 	and.w	r3, r3, #7
 8007a6a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	019a      	lsls	r2, r3, #6
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	061b      	lsls	r3, r3, #24
 8007a78:	431a      	orrs	r2, r3
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	071b      	lsls	r3, r3, #28
 8007a7e:	493b      	ldr	r1, [pc, #236]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007a80:	4313      	orrs	r3, r2
 8007a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007a86:	4b39      	ldr	r3, [pc, #228]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a8c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a1b      	ldr	r3, [r3, #32]
 8007a94:	3b01      	subs	r3, #1
 8007a96:	021b      	lsls	r3, r3, #8
 8007a98:	4934      	ldr	r1, [pc, #208]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0308 	and.w	r3, r3, #8
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d01e      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007aac:	4b2f      	ldr	r3, [pc, #188]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ab2:	0e1b      	lsrs	r3, r3, #24
 8007ab4:	f003 030f 	and.w	r3, r3, #15
 8007ab8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	019a      	lsls	r2, r3, #6
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	061b      	lsls	r3, r3, #24
 8007ac4:	431a      	orrs	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	071b      	lsls	r3, r3, #28
 8007acc:	4927      	ldr	r1, [pc, #156]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007ad4:	4b25      	ldr	r3, [pc, #148]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ada:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae2:	4922      	ldr	r1, [pc, #136]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007aea:	4b21      	ldr	r3, [pc, #132]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007aec:	2201      	movs	r2, #1
 8007aee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007af0:	f7fd fa96 	bl	8005020 <HAL_GetTick>
 8007af4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007af6:	e008      	b.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007af8:	f7fd fa92 	bl	8005020 <HAL_GetTick>
 8007afc:	4602      	mov	r2, r0
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d901      	bls.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b06:	2303      	movs	r3, #3
 8007b08:	e0a4      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007b0a:	4b18      	ldr	r3, [pc, #96]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b16:	d1ef      	bne.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 0320 	and.w	r3, r3, #32
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f000 808b 	beq.w	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007b26:	2300      	movs	r3, #0
 8007b28:	60fb      	str	r3, [r7, #12]
 8007b2a:	4b10      	ldr	r3, [pc, #64]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2e:	4a0f      	ldr	r2, [pc, #60]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b34:	6413      	str	r3, [r2, #64]	; 0x40
 8007b36:	4b0d      	ldr	r3, [pc, #52]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b3e:	60fb      	str	r3, [r7, #12]
 8007b40:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007b42:	4b0c      	ldr	r3, [pc, #48]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a0b      	ldr	r2, [pc, #44]	; (8007b74 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b4c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007b4e:	f7fd fa67 	bl	8005020 <HAL_GetTick>
 8007b52:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007b54:	e010      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007b56:	f7fd fa63 	bl	8005020 <HAL_GetTick>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d909      	bls.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e075      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007b68:	42470068 	.word	0x42470068
 8007b6c:	40023800 	.word	0x40023800
 8007b70:	42470070 	.word	0x42470070
 8007b74:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007b78:	4b38      	ldr	r3, [pc, #224]	; (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d0e8      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007b84:	4b36      	ldr	r3, [pc, #216]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b8c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d02f      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d028      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ba2:	4b2f      	ldr	r3, [pc, #188]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007baa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007bac:	4b2d      	ldr	r3, [pc, #180]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007bae:	2201      	movs	r2, #1
 8007bb0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007bb2:	4b2c      	ldr	r3, [pc, #176]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007bb8:	4a29      	ldr	r2, [pc, #164]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007bbe:	4b28      	ldr	r3, [pc, #160]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bc2:	f003 0301 	and.w	r3, r3, #1
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d114      	bne.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007bca:	f7fd fa29 	bl	8005020 <HAL_GetTick>
 8007bce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bd0:	e00a      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007bd2:	f7fd fa25 	bl	8005020 <HAL_GetTick>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	1ad3      	subs	r3, r2, r3
 8007bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d901      	bls.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007be4:	2303      	movs	r3, #3
 8007be6:	e035      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007be8:	4b1d      	ldr	r3, [pc, #116]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bec:	f003 0302 	and.w	r3, r3, #2
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d0ee      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c00:	d10d      	bne.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007c02:	4b17      	ldr	r3, [pc, #92]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c16:	4912      	ldr	r1, [pc, #72]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	608b      	str	r3, [r1, #8]
 8007c1c:	e005      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8007c1e:	4b10      	ldr	r3, [pc, #64]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	4a0f      	ldr	r2, [pc, #60]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007c24:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007c28:	6093      	str	r3, [r2, #8]
 8007c2a:	4b0d      	ldr	r3, [pc, #52]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007c2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c36:	490a      	ldr	r1, [pc, #40]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 0310 	and.w	r3, r3, #16
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d004      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007c4e:	4b06      	ldr	r3, [pc, #24]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007c50:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3718      	adds	r7, #24
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	40007000 	.word	0x40007000
 8007c60:	40023800 	.word	0x40023800
 8007c64:	42470e40 	.word	0x42470e40
 8007c68:	424711e0 	.word	0x424711e0

08007c6c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d101      	bne.n	8007c80 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e025      	b.n	8007ccc <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d106      	bne.n	8007c9a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f7fb f8ed 	bl	8002e74 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2202      	movs	r2, #2
 8007c9e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	3304      	adds	r3, #4
 8007caa:	4619      	mov	r1, r3
 8007cac:	4610      	mov	r0, r2
 8007cae:	f002 fae3 	bl	800a278 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6818      	ldr	r0, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	461a      	mov	r2, r3
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	f002 fb38 	bl	800a332 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3708      	adds	r7, #8
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b086      	sub	sp, #24
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007ce6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007ce8:	7dfb      	ldrb	r3, [r7, #23]
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d101      	bne.n	8007cf2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8007cee:	2302      	movs	r3, #2
 8007cf0:	e021      	b.n	8007d36 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8007cf2:	7dfb      	ldrb	r3, [r7, #23]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d002      	beq.n	8007cfe <HAL_SDRAM_SendCommand+0x2a>
 8007cf8:	7dfb      	ldrb	r3, [r7, #23]
 8007cfa:	2b05      	cmp	r3, #5
 8007cfc:	d118      	bne.n	8007d30 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2202      	movs	r2, #2
 8007d02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	68b9      	ldr	r1, [r7, #8]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f002 fb78 	bl	800a404 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d104      	bne.n	8007d26 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2205      	movs	r2, #5
 8007d20:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007d24:	e006      	b.n	8007d34 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007d2e:	e001      	b.n	8007d34 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e000      	b.n	8007d36 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3718      	adds	r7, #24
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b082      	sub	sp, #8
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d101      	bne.n	8007d58 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007d54:	2302      	movs	r3, #2
 8007d56:	e016      	b.n	8007d86 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d10f      	bne.n	8007d84 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2202      	movs	r2, #2
 8007d68:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	4618      	mov	r0, r3
 8007d74:	f002 fb83 	bl	800a47e <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
 8007d82:	e000      	b.n	8007d86 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3708      	adds	r7, #8
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b082      	sub	sp, #8
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d101      	bne.n	8007da0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e07b      	b.n	8007e98 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d108      	bne.n	8007dba <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007db0:	d009      	beq.n	8007dc6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	61da      	str	r2, [r3, #28]
 8007db8:	e005      	b.n	8007dc6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d106      	bne.n	8007de6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f7fa fedd 	bl	8002ba0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2202      	movs	r2, #2
 8007dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dfc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007e0e:	431a      	orrs	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e18:	431a      	orrs	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	f003 0302 	and.w	r3, r3, #2
 8007e22:	431a      	orrs	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	695b      	ldr	r3, [r3, #20]
 8007e28:	f003 0301 	and.w	r3, r3, #1
 8007e2c:	431a      	orrs	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e36:	431a      	orrs	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	69db      	ldr	r3, [r3, #28]
 8007e3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e40:	431a      	orrs	r2, r3
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a1b      	ldr	r3, [r3, #32]
 8007e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e4a:	ea42 0103 	orr.w	r1, r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e52:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	0c1b      	lsrs	r3, r3, #16
 8007e64:	f003 0104 	and.w	r1, r3, #4
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6c:	f003 0210 	and.w	r2, r3, #16
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	430a      	orrs	r2, r1
 8007e76:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	69da      	ldr	r2, [r3, #28]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e86:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2201      	movs	r2, #1
 8007e92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e01a      	b.n	8007ee8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ec8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f7fa feb0 	bl	8002c30 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3708      	adds	r7, #8
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b088      	sub	sp, #32
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	603b      	str	r3, [r7, #0]
 8007efc:	4613      	mov	r3, r2
 8007efe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f00:	2300      	movs	r3, #0
 8007f02:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d101      	bne.n	8007f12 <HAL_SPI_Transmit+0x22>
 8007f0e:	2302      	movs	r3, #2
 8007f10:	e126      	b.n	8008160 <HAL_SPI_Transmit+0x270>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f1a:	f7fd f881 	bl	8005020 <HAL_GetTick>
 8007f1e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007f20:	88fb      	ldrh	r3, [r7, #6]
 8007f22:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d002      	beq.n	8007f36 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007f30:	2302      	movs	r3, #2
 8007f32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f34:	e10b      	b.n	800814e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d002      	beq.n	8007f42 <HAL_SPI_Transmit+0x52>
 8007f3c:	88fb      	ldrh	r3, [r7, #6]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d102      	bne.n	8007f48 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f46:	e102      	b.n	800814e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2203      	movs	r2, #3
 8007f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	68ba      	ldr	r2, [r7, #8]
 8007f5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	88fa      	ldrh	r2, [r7, #6]
 8007f60:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	88fa      	ldrh	r2, [r7, #6]
 8007f66:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2200      	movs	r2, #0
 8007f72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f8e:	d10f      	bne.n	8007fb0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f9e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fba:	2b40      	cmp	r3, #64	; 0x40
 8007fbc:	d007      	beq.n	8007fce <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fcc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fd6:	d14b      	bne.n	8008070 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d002      	beq.n	8007fe6 <HAL_SPI_Transmit+0xf6>
 8007fe0:	8afb      	ldrh	r3, [r7, #22]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d13e      	bne.n	8008064 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fea:	881a      	ldrh	r2, [r3, #0]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff6:	1c9a      	adds	r2, r3, #2
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008000:	b29b      	uxth	r3, r3
 8008002:	3b01      	subs	r3, #1
 8008004:	b29a      	uxth	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800800a:	e02b      	b.n	8008064 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f003 0302 	and.w	r3, r3, #2
 8008016:	2b02      	cmp	r3, #2
 8008018:	d112      	bne.n	8008040 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800801e:	881a      	ldrh	r2, [r3, #0]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802a:	1c9a      	adds	r2, r3, #2
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008034:	b29b      	uxth	r3, r3
 8008036:	3b01      	subs	r3, #1
 8008038:	b29a      	uxth	r2, r3
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	86da      	strh	r2, [r3, #54]	; 0x36
 800803e:	e011      	b.n	8008064 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008040:	f7fc ffee 	bl	8005020 <HAL_GetTick>
 8008044:	4602      	mov	r2, r0
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	1ad3      	subs	r3, r2, r3
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	429a      	cmp	r2, r3
 800804e:	d803      	bhi.n	8008058 <HAL_SPI_Transmit+0x168>
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008056:	d102      	bne.n	800805e <HAL_SPI_Transmit+0x16e>
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d102      	bne.n	8008064 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008062:	e074      	b.n	800814e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008068:	b29b      	uxth	r3, r3
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1ce      	bne.n	800800c <HAL_SPI_Transmit+0x11c>
 800806e:	e04c      	b.n	800810a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d002      	beq.n	800807e <HAL_SPI_Transmit+0x18e>
 8008078:	8afb      	ldrh	r3, [r7, #22]
 800807a:	2b01      	cmp	r3, #1
 800807c:	d140      	bne.n	8008100 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	330c      	adds	r3, #12
 8008088:	7812      	ldrb	r2, [r2, #0]
 800808a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008090:	1c5a      	adds	r2, r3, #1
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800809a:	b29b      	uxth	r3, r3
 800809c:	3b01      	subs	r3, #1
 800809e:	b29a      	uxth	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80080a4:	e02c      	b.n	8008100 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	f003 0302 	and.w	r3, r3, #2
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d113      	bne.n	80080dc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	330c      	adds	r3, #12
 80080be:	7812      	ldrb	r2, [r2, #0]
 80080c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c6:	1c5a      	adds	r2, r3, #1
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	3b01      	subs	r3, #1
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80080da:	e011      	b.n	8008100 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080dc:	f7fc ffa0 	bl	8005020 <HAL_GetTick>
 80080e0:	4602      	mov	r2, r0
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d803      	bhi.n	80080f4 <HAL_SPI_Transmit+0x204>
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f2:	d102      	bne.n	80080fa <HAL_SPI_Transmit+0x20a>
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d102      	bne.n	8008100 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80080fe:	e026      	b.n	800814e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008104:	b29b      	uxth	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1cd      	bne.n	80080a6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800810a:	69ba      	ldr	r2, [r7, #24]
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f000 fbda 	bl	80088c8 <SPI_EndRxTxTransaction>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d002      	beq.n	8008120 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2220      	movs	r2, #32
 800811e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10a      	bne.n	800813e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008128:	2300      	movs	r3, #0
 800812a:	613b      	str	r3, [r7, #16]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	613b      	str	r3, [r7, #16]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	613b      	str	r3, [r7, #16]
 800813c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008142:	2b00      	cmp	r3, #0
 8008144:	d002      	beq.n	800814c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	77fb      	strb	r3, [r7, #31]
 800814a:	e000      	b.n	800814e <HAL_SPI_Transmit+0x25e>
  }

error:
 800814c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800815e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3720      	adds	r7, #32
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b088      	sub	sp, #32
 800816c:	af02      	add	r7, sp, #8
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	603b      	str	r3, [r7, #0]
 8008174:	4613      	mov	r3, r2
 8008176:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008178:	2300      	movs	r3, #0
 800817a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008184:	d112      	bne.n	80081ac <HAL_SPI_Receive+0x44>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10e      	bne.n	80081ac <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2204      	movs	r2, #4
 8008192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008196:	88fa      	ldrh	r2, [r7, #6]
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	4613      	mov	r3, r2
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	68b9      	ldr	r1, [r7, #8]
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f000 f8f1 	bl	800838a <HAL_SPI_TransmitReceive>
 80081a8:	4603      	mov	r3, r0
 80081aa:	e0ea      	b.n	8008382 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d101      	bne.n	80081ba <HAL_SPI_Receive+0x52>
 80081b6:	2302      	movs	r3, #2
 80081b8:	e0e3      	b.n	8008382 <HAL_SPI_Receive+0x21a>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081c2:	f7fc ff2d 	bl	8005020 <HAL_GetTick>
 80081c6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d002      	beq.n	80081da <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80081d4:	2302      	movs	r3, #2
 80081d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80081d8:	e0ca      	b.n	8008370 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d002      	beq.n	80081e6 <HAL_SPI_Receive+0x7e>
 80081e0:	88fb      	ldrh	r3, [r7, #6]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d102      	bne.n	80081ec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80081ea:	e0c1      	b.n	8008370 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2204      	movs	r2, #4
 80081f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	68ba      	ldr	r2, [r7, #8]
 80081fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	88fa      	ldrh	r2, [r7, #6]
 8008204:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	88fa      	ldrh	r2, [r7, #6]
 800820a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2200      	movs	r2, #0
 8008210:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2200      	movs	r2, #0
 8008228:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008232:	d10f      	bne.n	8008254 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008242:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008252:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800825e:	2b40      	cmp	r3, #64	; 0x40
 8008260:	d007      	beq.n	8008272 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008270:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d162      	bne.n	8008340 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800827a:	e02e      	b.n	80082da <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	f003 0301 	and.w	r3, r3, #1
 8008286:	2b01      	cmp	r3, #1
 8008288:	d115      	bne.n	80082b6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f103 020c 	add.w	r2, r3, #12
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008296:	7812      	ldrb	r2, [r2, #0]
 8008298:	b2d2      	uxtb	r2, r2
 800829a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a0:	1c5a      	adds	r2, r3, #1
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	3b01      	subs	r3, #1
 80082ae:	b29a      	uxth	r2, r3
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80082b4:	e011      	b.n	80082da <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082b6:	f7fc feb3 	bl	8005020 <HAL_GetTick>
 80082ba:	4602      	mov	r2, r0
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	683a      	ldr	r2, [r7, #0]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d803      	bhi.n	80082ce <HAL_SPI_Receive+0x166>
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082cc:	d102      	bne.n	80082d4 <HAL_SPI_Receive+0x16c>
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d102      	bne.n	80082da <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80082d4:	2303      	movs	r3, #3
 80082d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80082d8:	e04a      	b.n	8008370 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082de:	b29b      	uxth	r3, r3
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1cb      	bne.n	800827c <HAL_SPI_Receive+0x114>
 80082e4:	e031      	b.n	800834a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	f003 0301 	and.w	r3, r3, #1
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d113      	bne.n	800831c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	68da      	ldr	r2, [r3, #12]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fe:	b292      	uxth	r2, r2
 8008300:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008306:	1c9a      	adds	r2, r3, #2
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008310:	b29b      	uxth	r3, r3
 8008312:	3b01      	subs	r3, #1
 8008314:	b29a      	uxth	r2, r3
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	87da      	strh	r2, [r3, #62]	; 0x3e
 800831a:	e011      	b.n	8008340 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800831c:	f7fc fe80 	bl	8005020 <HAL_GetTick>
 8008320:	4602      	mov	r2, r0
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	1ad3      	subs	r3, r2, r3
 8008326:	683a      	ldr	r2, [r7, #0]
 8008328:	429a      	cmp	r2, r3
 800832a:	d803      	bhi.n	8008334 <HAL_SPI_Receive+0x1cc>
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008332:	d102      	bne.n	800833a <HAL_SPI_Receive+0x1d2>
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d102      	bne.n	8008340 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800833a:	2303      	movs	r3, #3
 800833c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800833e:	e017      	b.n	8008370 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008344:	b29b      	uxth	r3, r3
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1cd      	bne.n	80082e6 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800834a:	693a      	ldr	r2, [r7, #16]
 800834c:	6839      	ldr	r1, [r7, #0]
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f000 fa54 	bl	80087fc <SPI_EndRxTransaction>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d002      	beq.n	8008360 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2220      	movs	r2, #32
 800835e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008364:	2b00      	cmp	r3, #0
 8008366:	d002      	beq.n	800836e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008368:	2301      	movs	r3, #1
 800836a:	75fb      	strb	r3, [r7, #23]
 800836c:	e000      	b.n	8008370 <HAL_SPI_Receive+0x208>
  }

error :
 800836e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2200      	movs	r2, #0
 800837c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008380:	7dfb      	ldrb	r3, [r7, #23]
}
 8008382:	4618      	mov	r0, r3
 8008384:	3718      	adds	r7, #24
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800838a:	b580      	push	{r7, lr}
 800838c:	b08c      	sub	sp, #48	; 0x30
 800838e:	af00      	add	r7, sp, #0
 8008390:	60f8      	str	r0, [r7, #12]
 8008392:	60b9      	str	r1, [r7, #8]
 8008394:	607a      	str	r2, [r7, #4]
 8008396:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008398:	2301      	movs	r3, #1
 800839a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800839c:	2300      	movs	r3, #0
 800839e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d101      	bne.n	80083b0 <HAL_SPI_TransmitReceive+0x26>
 80083ac:	2302      	movs	r3, #2
 80083ae:	e18a      	b.n	80086c6 <HAL_SPI_TransmitReceive+0x33c>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083b8:	f7fc fe32 	bl	8005020 <HAL_GetTick>
 80083bc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80083ce:	887b      	ldrh	r3, [r7, #2]
 80083d0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80083d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d00f      	beq.n	80083fa <HAL_SPI_TransmitReceive+0x70>
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083e0:	d107      	bne.n	80083f2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d103      	bne.n	80083f2 <HAL_SPI_TransmitReceive+0x68>
 80083ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083ee:	2b04      	cmp	r3, #4
 80083f0:	d003      	beq.n	80083fa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80083f2:	2302      	movs	r3, #2
 80083f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80083f8:	e15b      	b.n	80086b2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d005      	beq.n	800840c <HAL_SPI_TransmitReceive+0x82>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d002      	beq.n	800840c <HAL_SPI_TransmitReceive+0x82>
 8008406:	887b      	ldrh	r3, [r7, #2]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d103      	bne.n	8008414 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008412:	e14e      	b.n	80086b2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b04      	cmp	r3, #4
 800841e:	d003      	beq.n	8008428 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2205      	movs	r2, #5
 8008424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2200      	movs	r2, #0
 800842c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	887a      	ldrh	r2, [r7, #2]
 8008438:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	887a      	ldrh	r2, [r7, #2]
 800843e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	887a      	ldrh	r2, [r7, #2]
 800844a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	887a      	ldrh	r2, [r7, #2]
 8008450:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2200      	movs	r2, #0
 800845c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008468:	2b40      	cmp	r3, #64	; 0x40
 800846a:	d007      	beq.n	800847c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800847a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008484:	d178      	bne.n	8008578 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d002      	beq.n	8008494 <HAL_SPI_TransmitReceive+0x10a>
 800848e:	8b7b      	ldrh	r3, [r7, #26]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d166      	bne.n	8008562 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008498:	881a      	ldrh	r2, [r3, #0]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a4:	1c9a      	adds	r2, r3, #2
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	3b01      	subs	r3, #1
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084b8:	e053      	b.n	8008562 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	f003 0302 	and.w	r3, r3, #2
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d11b      	bne.n	8008500 <HAL_SPI_TransmitReceive+0x176>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d016      	beq.n	8008500 <HAL_SPI_TransmitReceive+0x176>
 80084d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d113      	bne.n	8008500 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084dc:	881a      	ldrh	r2, [r3, #0]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e8:	1c9a      	adds	r2, r3, #2
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	3b01      	subs	r3, #1
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80084fc:	2300      	movs	r3, #0
 80084fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f003 0301 	and.w	r3, r3, #1
 800850a:	2b01      	cmp	r3, #1
 800850c:	d119      	bne.n	8008542 <HAL_SPI_TransmitReceive+0x1b8>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008512:	b29b      	uxth	r3, r3
 8008514:	2b00      	cmp	r3, #0
 8008516:	d014      	beq.n	8008542 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68da      	ldr	r2, [r3, #12]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008522:	b292      	uxth	r2, r2
 8008524:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852a:	1c9a      	adds	r2, r3, #2
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008534:	b29b      	uxth	r3, r3
 8008536:	3b01      	subs	r3, #1
 8008538:	b29a      	uxth	r2, r3
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800853e:	2301      	movs	r3, #1
 8008540:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008542:	f7fc fd6d 	bl	8005020 <HAL_GetTick>
 8008546:	4602      	mov	r2, r0
 8008548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854a:	1ad3      	subs	r3, r2, r3
 800854c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800854e:	429a      	cmp	r2, r3
 8008550:	d807      	bhi.n	8008562 <HAL_SPI_TransmitReceive+0x1d8>
 8008552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008558:	d003      	beq.n	8008562 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800855a:	2303      	movs	r3, #3
 800855c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008560:	e0a7      	b.n	80086b2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008566:	b29b      	uxth	r3, r3
 8008568:	2b00      	cmp	r3, #0
 800856a:	d1a6      	bne.n	80084ba <HAL_SPI_TransmitReceive+0x130>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008570:	b29b      	uxth	r3, r3
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1a1      	bne.n	80084ba <HAL_SPI_TransmitReceive+0x130>
 8008576:	e07c      	b.n	8008672 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d002      	beq.n	8008586 <HAL_SPI_TransmitReceive+0x1fc>
 8008580:	8b7b      	ldrh	r3, [r7, #26]
 8008582:	2b01      	cmp	r3, #1
 8008584:	d16b      	bne.n	800865e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	330c      	adds	r3, #12
 8008590:	7812      	ldrb	r2, [r2, #0]
 8008592:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008598:	1c5a      	adds	r2, r3, #1
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	3b01      	subs	r3, #1
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085ac:	e057      	b.n	800865e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	f003 0302 	and.w	r3, r3, #2
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d11c      	bne.n	80085f6 <HAL_SPI_TransmitReceive+0x26c>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d017      	beq.n	80085f6 <HAL_SPI_TransmitReceive+0x26c>
 80085c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d114      	bne.n	80085f6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	330c      	adds	r3, #12
 80085d6:	7812      	ldrb	r2, [r2, #0]
 80085d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085de:	1c5a      	adds	r2, r3, #1
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	3b01      	subs	r3, #1
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085f2:	2300      	movs	r3, #0
 80085f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	f003 0301 	and.w	r3, r3, #1
 8008600:	2b01      	cmp	r3, #1
 8008602:	d119      	bne.n	8008638 <HAL_SPI_TransmitReceive+0x2ae>
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008608:	b29b      	uxth	r3, r3
 800860a:	2b00      	cmp	r3, #0
 800860c:	d014      	beq.n	8008638 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68da      	ldr	r2, [r3, #12]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008618:	b2d2      	uxtb	r2, r2
 800861a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008620:	1c5a      	adds	r2, r3, #1
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800862a:	b29b      	uxth	r3, r3
 800862c:	3b01      	subs	r3, #1
 800862e:	b29a      	uxth	r2, r3
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008634:	2301      	movs	r3, #1
 8008636:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008638:	f7fc fcf2 	bl	8005020 <HAL_GetTick>
 800863c:	4602      	mov	r2, r0
 800863e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008640:	1ad3      	subs	r3, r2, r3
 8008642:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008644:	429a      	cmp	r2, r3
 8008646:	d803      	bhi.n	8008650 <HAL_SPI_TransmitReceive+0x2c6>
 8008648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800864e:	d102      	bne.n	8008656 <HAL_SPI_TransmitReceive+0x2cc>
 8008650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008652:	2b00      	cmp	r3, #0
 8008654:	d103      	bne.n	800865e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008656:	2303      	movs	r3, #3
 8008658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800865c:	e029      	b.n	80086b2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008662:	b29b      	uxth	r3, r3
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1a2      	bne.n	80085ae <HAL_SPI_TransmitReceive+0x224>
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800866c:	b29b      	uxth	r3, r3
 800866e:	2b00      	cmp	r3, #0
 8008670:	d19d      	bne.n	80085ae <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008674:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f000 f926 	bl	80088c8 <SPI_EndRxTxTransaction>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d006      	beq.n	8008690 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2220      	movs	r2, #32
 800868c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800868e:	e010      	b.n	80086b2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10b      	bne.n	80086b0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008698:	2300      	movs	r3, #0
 800869a:	617b      	str	r3, [r7, #20]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	617b      	str	r3, [r7, #20]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	617b      	str	r3, [r7, #20]
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	e000      	b.n	80086b2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80086b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2201      	movs	r2, #1
 80086b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80086c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3730      	adds	r7, #48	; 0x30
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b083      	sub	sp, #12
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086dc:	b2db      	uxtb	r3, r3
}
 80086de:	4618      	mov	r0, r3
 80086e0:	370c      	adds	r7, #12
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
	...

080086ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b088      	sub	sp, #32
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	603b      	str	r3, [r7, #0]
 80086f8:	4613      	mov	r3, r2
 80086fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80086fc:	f7fc fc90 	bl	8005020 <HAL_GetTick>
 8008700:	4602      	mov	r2, r0
 8008702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008704:	1a9b      	subs	r3, r3, r2
 8008706:	683a      	ldr	r2, [r7, #0]
 8008708:	4413      	add	r3, r2
 800870a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800870c:	f7fc fc88 	bl	8005020 <HAL_GetTick>
 8008710:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008712:	4b39      	ldr	r3, [pc, #228]	; (80087f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	015b      	lsls	r3, r3, #5
 8008718:	0d1b      	lsrs	r3, r3, #20
 800871a:	69fa      	ldr	r2, [r7, #28]
 800871c:	fb02 f303 	mul.w	r3, r2, r3
 8008720:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008722:	e054      	b.n	80087ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800872a:	d050      	beq.n	80087ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800872c:	f7fc fc78 	bl	8005020 <HAL_GetTick>
 8008730:	4602      	mov	r2, r0
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	69fa      	ldr	r2, [r7, #28]
 8008738:	429a      	cmp	r2, r3
 800873a:	d902      	bls.n	8008742 <SPI_WaitFlagStateUntilTimeout+0x56>
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d13d      	bne.n	80087be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	685a      	ldr	r2, [r3, #4]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008750:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800875a:	d111      	bne.n	8008780 <SPI_WaitFlagStateUntilTimeout+0x94>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008764:	d004      	beq.n	8008770 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800876e:	d107      	bne.n	8008780 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800877e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008788:	d10f      	bne.n	80087aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008798:	601a      	str	r2, [r3, #0]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2201      	movs	r2, #1
 80087ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80087ba:	2303      	movs	r3, #3
 80087bc:	e017      	b.n	80087ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80087c4:	2300      	movs	r3, #0
 80087c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	3b01      	subs	r3, #1
 80087cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	689a      	ldr	r2, [r3, #8]
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	4013      	ands	r3, r2
 80087d8:	68ba      	ldr	r2, [r7, #8]
 80087da:	429a      	cmp	r2, r3
 80087dc:	bf0c      	ite	eq
 80087de:	2301      	moveq	r3, #1
 80087e0:	2300      	movne	r3, #0
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	461a      	mov	r2, r3
 80087e6:	79fb      	ldrb	r3, [r7, #7]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d19b      	bne.n	8008724 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3720      	adds	r7, #32
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	20000020 	.word	0x20000020

080087fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b086      	sub	sp, #24
 8008800:	af02      	add	r7, sp, #8
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008810:	d111      	bne.n	8008836 <SPI_EndRxTransaction+0x3a>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800881a:	d004      	beq.n	8008826 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008824:	d107      	bne.n	8008836 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008834:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800883e:	d12a      	bne.n	8008896 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008848:	d012      	beq.n	8008870 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	9300      	str	r3, [sp, #0]
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	2200      	movs	r2, #0
 8008852:	2180      	movs	r1, #128	; 0x80
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	f7ff ff49 	bl	80086ec <SPI_WaitFlagStateUntilTimeout>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	d02d      	beq.n	80088bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008864:	f043 0220 	orr.w	r2, r3, #32
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800886c:	2303      	movs	r3, #3
 800886e:	e026      	b.n	80088be <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	2200      	movs	r2, #0
 8008878:	2101      	movs	r1, #1
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f7ff ff36 	bl	80086ec <SPI_WaitFlagStateUntilTimeout>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d01a      	beq.n	80088bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800888a:	f043 0220 	orr.w	r2, r3, #32
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e013      	b.n	80088be <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	9300      	str	r3, [sp, #0]
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	2200      	movs	r2, #0
 800889e:	2101      	movs	r1, #1
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f7ff ff23 	bl	80086ec <SPI_WaitFlagStateUntilTimeout>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d007      	beq.n	80088bc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088b0:	f043 0220 	orr.w	r2, r3, #32
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80088b8:	2303      	movs	r3, #3
 80088ba:	e000      	b.n	80088be <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
	...

080088c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b088      	sub	sp, #32
 80088cc:	af02      	add	r7, sp, #8
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80088d4:	4b1b      	ldr	r3, [pc, #108]	; (8008944 <SPI_EndRxTxTransaction+0x7c>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a1b      	ldr	r2, [pc, #108]	; (8008948 <SPI_EndRxTxTransaction+0x80>)
 80088da:	fba2 2303 	umull	r2, r3, r2, r3
 80088de:	0d5b      	lsrs	r3, r3, #21
 80088e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80088e4:	fb02 f303 	mul.w	r3, r2, r3
 80088e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088f2:	d112      	bne.n	800891a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	9300      	str	r3, [sp, #0]
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	2200      	movs	r2, #0
 80088fc:	2180      	movs	r1, #128	; 0x80
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f7ff fef4 	bl	80086ec <SPI_WaitFlagStateUntilTimeout>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d016      	beq.n	8008938 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800890e:	f043 0220 	orr.w	r2, r3, #32
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008916:	2303      	movs	r3, #3
 8008918:	e00f      	b.n	800893a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00a      	beq.n	8008936 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	3b01      	subs	r3, #1
 8008924:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008930:	2b80      	cmp	r3, #128	; 0x80
 8008932:	d0f2      	beq.n	800891a <SPI_EndRxTxTransaction+0x52>
 8008934:	e000      	b.n	8008938 <SPI_EndRxTxTransaction+0x70>
        break;
 8008936:	bf00      	nop
  }

  return HAL_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3718      	adds	r7, #24
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	20000020 	.word	0x20000020
 8008948:	165e9f81 	.word	0x165e9f81

0800894c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d101      	bne.n	800895e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e041      	b.n	80089e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008964:	b2db      	uxtb	r3, r3
 8008966:	2b00      	cmp	r3, #0
 8008968:	d106      	bne.n	8008978 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f7fa f97a 	bl	8002c6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2202      	movs	r2, #2
 800897c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	3304      	adds	r3, #4
 8008988:	4619      	mov	r1, r3
 800898a:	4610      	mov	r0, r2
 800898c:	f000 fa96 	bl	8008ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2201      	movs	r2, #1
 80089a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3708      	adds	r7, #8
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
	...

080089ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d001      	beq.n	8008a04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e04e      	b.n	8008aa2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2202      	movs	r2, #2
 8008a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68da      	ldr	r2, [r3, #12]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f042 0201 	orr.w	r2, r2, #1
 8008a1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a23      	ldr	r2, [pc, #140]	; (8008ab0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d022      	beq.n	8008a6c <HAL_TIM_Base_Start_IT+0x80>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a2e:	d01d      	beq.n	8008a6c <HAL_TIM_Base_Start_IT+0x80>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a1f      	ldr	r2, [pc, #124]	; (8008ab4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d018      	beq.n	8008a6c <HAL_TIM_Base_Start_IT+0x80>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a1e      	ldr	r2, [pc, #120]	; (8008ab8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d013      	beq.n	8008a6c <HAL_TIM_Base_Start_IT+0x80>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a1c      	ldr	r2, [pc, #112]	; (8008abc <HAL_TIM_Base_Start_IT+0xd0>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d00e      	beq.n	8008a6c <HAL_TIM_Base_Start_IT+0x80>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a1b      	ldr	r2, [pc, #108]	; (8008ac0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d009      	beq.n	8008a6c <HAL_TIM_Base_Start_IT+0x80>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a19      	ldr	r2, [pc, #100]	; (8008ac4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d004      	beq.n	8008a6c <HAL_TIM_Base_Start_IT+0x80>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a18      	ldr	r2, [pc, #96]	; (8008ac8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d111      	bne.n	8008a90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	f003 0307 	and.w	r3, r3, #7
 8008a76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2b06      	cmp	r3, #6
 8008a7c:	d010      	beq.n	8008aa0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f042 0201 	orr.w	r2, r2, #1
 8008a8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a8e:	e007      	b.n	8008aa0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f042 0201 	orr.w	r2, r2, #1
 8008a9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3714      	adds	r7, #20
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	40010000 	.word	0x40010000
 8008ab4:	40000400 	.word	0x40000400
 8008ab8:	40000800 	.word	0x40000800
 8008abc:	40000c00 	.word	0x40000c00
 8008ac0:	40010400 	.word	0x40010400
 8008ac4:	40014000 	.word	0x40014000
 8008ac8:	40001800 	.word	0x40001800

08008acc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	f003 0302 	and.w	r3, r3, #2
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	d122      	bne.n	8008b28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	f003 0302 	and.w	r3, r3, #2
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d11b      	bne.n	8008b28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f06f 0202 	mvn.w	r2, #2
 8008af8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2201      	movs	r2, #1
 8008afe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	699b      	ldr	r3, [r3, #24]
 8008b06:	f003 0303 	and.w	r3, r3, #3
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d003      	beq.n	8008b16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f9b5 	bl	8008e7e <HAL_TIM_IC_CaptureCallback>
 8008b14:	e005      	b.n	8008b22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f9a7 	bl	8008e6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 f9b8 	bl	8008e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	f003 0304 	and.w	r3, r3, #4
 8008b32:	2b04      	cmp	r3, #4
 8008b34:	d122      	bne.n	8008b7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	f003 0304 	and.w	r3, r3, #4
 8008b40:	2b04      	cmp	r3, #4
 8008b42:	d11b      	bne.n	8008b7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f06f 0204 	mvn.w	r2, #4
 8008b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2202      	movs	r2, #2
 8008b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d003      	beq.n	8008b6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f98b 	bl	8008e7e <HAL_TIM_IC_CaptureCallback>
 8008b68:	e005      	b.n	8008b76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 f97d 	bl	8008e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 f98e 	bl	8008e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	f003 0308 	and.w	r3, r3, #8
 8008b86:	2b08      	cmp	r3, #8
 8008b88:	d122      	bne.n	8008bd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	f003 0308 	and.w	r3, r3, #8
 8008b94:	2b08      	cmp	r3, #8
 8008b96:	d11b      	bne.n	8008bd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f06f 0208 	mvn.w	r2, #8
 8008ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2204      	movs	r2, #4
 8008ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	69db      	ldr	r3, [r3, #28]
 8008bae:	f003 0303 	and.w	r3, r3, #3
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d003      	beq.n	8008bbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f961 	bl	8008e7e <HAL_TIM_IC_CaptureCallback>
 8008bbc:	e005      	b.n	8008bca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 f953 	bl	8008e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 f964 	bl	8008e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	f003 0310 	and.w	r3, r3, #16
 8008bda:	2b10      	cmp	r3, #16
 8008bdc:	d122      	bne.n	8008c24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	f003 0310 	and.w	r3, r3, #16
 8008be8:	2b10      	cmp	r3, #16
 8008bea:	d11b      	bne.n	8008c24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f06f 0210 	mvn.w	r2, #16
 8008bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2208      	movs	r2, #8
 8008bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	69db      	ldr	r3, [r3, #28]
 8008c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d003      	beq.n	8008c12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 f937 	bl	8008e7e <HAL_TIM_IC_CaptureCallback>
 8008c10:	e005      	b.n	8008c1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 f929 	bl	8008e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 f93a 	bl	8008e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	f003 0301 	and.w	r3, r3, #1
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d10e      	bne.n	8008c50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	f003 0301 	and.w	r3, r3, #1
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d107      	bne.n	8008c50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f06f 0201 	mvn.w	r2, #1
 8008c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7f9 fc22 	bl	8002494 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c5a:	2b80      	cmp	r3, #128	; 0x80
 8008c5c:	d10e      	bne.n	8008c7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c68:	2b80      	cmp	r3, #128	; 0x80
 8008c6a:	d107      	bne.n	8008c7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 fae0 	bl	800923c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c86:	2b40      	cmp	r3, #64	; 0x40
 8008c88:	d10e      	bne.n	8008ca8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c94:	2b40      	cmp	r3, #64	; 0x40
 8008c96:	d107      	bne.n	8008ca8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f8ff 	bl	8008ea6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	f003 0320 	and.w	r3, r3, #32
 8008cb2:	2b20      	cmp	r3, #32
 8008cb4:	d10e      	bne.n	8008cd4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	f003 0320 	and.w	r3, r3, #32
 8008cc0:	2b20      	cmp	r3, #32
 8008cc2:	d107      	bne.n	8008cd4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f06f 0220 	mvn.w	r2, #32
 8008ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 faaa 	bl	8009228 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008cd4:	bf00      	nop
 8008cd6:	3708      	adds	r7, #8
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d101      	bne.n	8008cf8 <HAL_TIM_ConfigClockSource+0x1c>
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	e0b4      	b.n	8008e62 <HAL_TIM_ConfigClockSource+0x186>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2202      	movs	r2, #2
 8008d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008d16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	68ba      	ldr	r2, [r7, #8]
 8008d26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d30:	d03e      	beq.n	8008db0 <HAL_TIM_ConfigClockSource+0xd4>
 8008d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d36:	f200 8087 	bhi.w	8008e48 <HAL_TIM_ConfigClockSource+0x16c>
 8008d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d3e:	f000 8086 	beq.w	8008e4e <HAL_TIM_ConfigClockSource+0x172>
 8008d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d46:	d87f      	bhi.n	8008e48 <HAL_TIM_ConfigClockSource+0x16c>
 8008d48:	2b70      	cmp	r3, #112	; 0x70
 8008d4a:	d01a      	beq.n	8008d82 <HAL_TIM_ConfigClockSource+0xa6>
 8008d4c:	2b70      	cmp	r3, #112	; 0x70
 8008d4e:	d87b      	bhi.n	8008e48 <HAL_TIM_ConfigClockSource+0x16c>
 8008d50:	2b60      	cmp	r3, #96	; 0x60
 8008d52:	d050      	beq.n	8008df6 <HAL_TIM_ConfigClockSource+0x11a>
 8008d54:	2b60      	cmp	r3, #96	; 0x60
 8008d56:	d877      	bhi.n	8008e48 <HAL_TIM_ConfigClockSource+0x16c>
 8008d58:	2b50      	cmp	r3, #80	; 0x50
 8008d5a:	d03c      	beq.n	8008dd6 <HAL_TIM_ConfigClockSource+0xfa>
 8008d5c:	2b50      	cmp	r3, #80	; 0x50
 8008d5e:	d873      	bhi.n	8008e48 <HAL_TIM_ConfigClockSource+0x16c>
 8008d60:	2b40      	cmp	r3, #64	; 0x40
 8008d62:	d058      	beq.n	8008e16 <HAL_TIM_ConfigClockSource+0x13a>
 8008d64:	2b40      	cmp	r3, #64	; 0x40
 8008d66:	d86f      	bhi.n	8008e48 <HAL_TIM_ConfigClockSource+0x16c>
 8008d68:	2b30      	cmp	r3, #48	; 0x30
 8008d6a:	d064      	beq.n	8008e36 <HAL_TIM_ConfigClockSource+0x15a>
 8008d6c:	2b30      	cmp	r3, #48	; 0x30
 8008d6e:	d86b      	bhi.n	8008e48 <HAL_TIM_ConfigClockSource+0x16c>
 8008d70:	2b20      	cmp	r3, #32
 8008d72:	d060      	beq.n	8008e36 <HAL_TIM_ConfigClockSource+0x15a>
 8008d74:	2b20      	cmp	r3, #32
 8008d76:	d867      	bhi.n	8008e48 <HAL_TIM_ConfigClockSource+0x16c>
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d05c      	beq.n	8008e36 <HAL_TIM_ConfigClockSource+0x15a>
 8008d7c:	2b10      	cmp	r3, #16
 8008d7e:	d05a      	beq.n	8008e36 <HAL_TIM_ConfigClockSource+0x15a>
 8008d80:	e062      	b.n	8008e48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6818      	ldr	r0, [r3, #0]
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	6899      	ldr	r1, [r3, #8]
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	685a      	ldr	r2, [r3, #4]
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	f000 f9ad 	bl	80090f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008da4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	609a      	str	r2, [r3, #8]
      break;
 8008dae:	e04f      	b.n	8008e50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6818      	ldr	r0, [r3, #0]
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	6899      	ldr	r1, [r3, #8]
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	685a      	ldr	r2, [r3, #4]
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	f000 f996 	bl	80090f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	689a      	ldr	r2, [r3, #8]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008dd2:	609a      	str	r2, [r3, #8]
      break;
 8008dd4:	e03c      	b.n	8008e50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6818      	ldr	r0, [r3, #0]
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	6859      	ldr	r1, [r3, #4]
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	461a      	mov	r2, r3
 8008de4:	f000 f90a 	bl	8008ffc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2150      	movs	r1, #80	; 0x50
 8008dee:	4618      	mov	r0, r3
 8008df0:	f000 f963 	bl	80090ba <TIM_ITRx_SetConfig>
      break;
 8008df4:	e02c      	b.n	8008e50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6818      	ldr	r0, [r3, #0]
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	6859      	ldr	r1, [r3, #4]
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	461a      	mov	r2, r3
 8008e04:	f000 f929 	bl	800905a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2160      	movs	r1, #96	; 0x60
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f000 f953 	bl	80090ba <TIM_ITRx_SetConfig>
      break;
 8008e14:	e01c      	b.n	8008e50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6818      	ldr	r0, [r3, #0]
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	6859      	ldr	r1, [r3, #4]
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	461a      	mov	r2, r3
 8008e24:	f000 f8ea 	bl	8008ffc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2140      	movs	r1, #64	; 0x40
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f000 f943 	bl	80090ba <TIM_ITRx_SetConfig>
      break;
 8008e34:	e00c      	b.n	8008e50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4619      	mov	r1, r3
 8008e40:	4610      	mov	r0, r2
 8008e42:	f000 f93a 	bl	80090ba <TIM_ITRx_SetConfig>
      break;
 8008e46:	e003      	b.n	8008e50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e4c:	e000      	b.n	8008e50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008e4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	b083      	sub	sp, #12
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e72:	bf00      	nop
 8008e74:	370c      	adds	r7, #12
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr

08008e7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e7e:	b480      	push	{r7}
 8008e80:	b083      	sub	sp, #12
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e86:	bf00      	nop
 8008e88:	370c      	adds	r7, #12
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e92:	b480      	push	{r7}
 8008e94:	b083      	sub	sp, #12
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e9a:	bf00      	nop
 8008e9c:	370c      	adds	r7, #12
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr

08008ea6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ea6:	b480      	push	{r7}
 8008ea8:	b083      	sub	sp, #12
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008eae:	bf00      	nop
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
	...

08008ebc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a40      	ldr	r2, [pc, #256]	; (8008fd0 <TIM_Base_SetConfig+0x114>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d013      	beq.n	8008efc <TIM_Base_SetConfig+0x40>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eda:	d00f      	beq.n	8008efc <TIM_Base_SetConfig+0x40>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a3d      	ldr	r2, [pc, #244]	; (8008fd4 <TIM_Base_SetConfig+0x118>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d00b      	beq.n	8008efc <TIM_Base_SetConfig+0x40>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4a3c      	ldr	r2, [pc, #240]	; (8008fd8 <TIM_Base_SetConfig+0x11c>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d007      	beq.n	8008efc <TIM_Base_SetConfig+0x40>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a3b      	ldr	r2, [pc, #236]	; (8008fdc <TIM_Base_SetConfig+0x120>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d003      	beq.n	8008efc <TIM_Base_SetConfig+0x40>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a3a      	ldr	r2, [pc, #232]	; (8008fe0 <TIM_Base_SetConfig+0x124>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d108      	bne.n	8008f0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4a2f      	ldr	r2, [pc, #188]	; (8008fd0 <TIM_Base_SetConfig+0x114>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d02b      	beq.n	8008f6e <TIM_Base_SetConfig+0xb2>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f1c:	d027      	beq.n	8008f6e <TIM_Base_SetConfig+0xb2>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4a2c      	ldr	r2, [pc, #176]	; (8008fd4 <TIM_Base_SetConfig+0x118>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d023      	beq.n	8008f6e <TIM_Base_SetConfig+0xb2>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4a2b      	ldr	r2, [pc, #172]	; (8008fd8 <TIM_Base_SetConfig+0x11c>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d01f      	beq.n	8008f6e <TIM_Base_SetConfig+0xb2>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4a2a      	ldr	r2, [pc, #168]	; (8008fdc <TIM_Base_SetConfig+0x120>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d01b      	beq.n	8008f6e <TIM_Base_SetConfig+0xb2>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4a29      	ldr	r2, [pc, #164]	; (8008fe0 <TIM_Base_SetConfig+0x124>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d017      	beq.n	8008f6e <TIM_Base_SetConfig+0xb2>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4a28      	ldr	r2, [pc, #160]	; (8008fe4 <TIM_Base_SetConfig+0x128>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d013      	beq.n	8008f6e <TIM_Base_SetConfig+0xb2>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4a27      	ldr	r2, [pc, #156]	; (8008fe8 <TIM_Base_SetConfig+0x12c>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d00f      	beq.n	8008f6e <TIM_Base_SetConfig+0xb2>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4a26      	ldr	r2, [pc, #152]	; (8008fec <TIM_Base_SetConfig+0x130>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d00b      	beq.n	8008f6e <TIM_Base_SetConfig+0xb2>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a25      	ldr	r2, [pc, #148]	; (8008ff0 <TIM_Base_SetConfig+0x134>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d007      	beq.n	8008f6e <TIM_Base_SetConfig+0xb2>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a24      	ldr	r2, [pc, #144]	; (8008ff4 <TIM_Base_SetConfig+0x138>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d003      	beq.n	8008f6e <TIM_Base_SetConfig+0xb2>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a23      	ldr	r2, [pc, #140]	; (8008ff8 <TIM_Base_SetConfig+0x13c>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d108      	bne.n	8008f80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	695b      	ldr	r3, [r3, #20]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	689a      	ldr	r2, [r3, #8]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	4a0a      	ldr	r2, [pc, #40]	; (8008fd0 <TIM_Base_SetConfig+0x114>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d003      	beq.n	8008fb4 <TIM_Base_SetConfig+0xf8>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4a0c      	ldr	r2, [pc, #48]	; (8008fe0 <TIM_Base_SetConfig+0x124>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d103      	bne.n	8008fbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	691a      	ldr	r2, [r3, #16]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	615a      	str	r2, [r3, #20]
}
 8008fc2:	bf00      	nop
 8008fc4:	3714      	adds	r7, #20
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop
 8008fd0:	40010000 	.word	0x40010000
 8008fd4:	40000400 	.word	0x40000400
 8008fd8:	40000800 	.word	0x40000800
 8008fdc:	40000c00 	.word	0x40000c00
 8008fe0:	40010400 	.word	0x40010400
 8008fe4:	40014000 	.word	0x40014000
 8008fe8:	40014400 	.word	0x40014400
 8008fec:	40014800 	.word	0x40014800
 8008ff0:	40001800 	.word	0x40001800
 8008ff4:	40001c00 	.word	0x40001c00
 8008ff8:	40002000 	.word	0x40002000

08008ffc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b087      	sub	sp, #28
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6a1b      	ldr	r3, [r3, #32]
 800900c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6a1b      	ldr	r3, [r3, #32]
 8009012:	f023 0201 	bic.w	r2, r3, #1
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	699b      	ldr	r3, [r3, #24]
 800901e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009026:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	011b      	lsls	r3, r3, #4
 800902c:	693a      	ldr	r2, [r7, #16]
 800902e:	4313      	orrs	r3, r2
 8009030:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	f023 030a 	bic.w	r3, r3, #10
 8009038:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800903a:	697a      	ldr	r2, [r7, #20]
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	4313      	orrs	r3, r2
 8009040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	693a      	ldr	r2, [r7, #16]
 8009046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	697a      	ldr	r2, [r7, #20]
 800904c:	621a      	str	r2, [r3, #32]
}
 800904e:	bf00      	nop
 8009050:	371c      	adds	r7, #28
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr

0800905a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800905a:	b480      	push	{r7}
 800905c:	b087      	sub	sp, #28
 800905e:	af00      	add	r7, sp, #0
 8009060:	60f8      	str	r0, [r7, #12]
 8009062:	60b9      	str	r1, [r7, #8]
 8009064:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	f023 0210 	bic.w	r2, r3, #16
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	699b      	ldr	r3, [r3, #24]
 8009076:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6a1b      	ldr	r3, [r3, #32]
 800907c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009084:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	031b      	lsls	r3, r3, #12
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	4313      	orrs	r3, r2
 800908e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009096:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	011b      	lsls	r3, r3, #4
 800909c:	693a      	ldr	r2, [r7, #16]
 800909e:	4313      	orrs	r3, r2
 80090a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	697a      	ldr	r2, [r7, #20]
 80090a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	693a      	ldr	r2, [r7, #16]
 80090ac:	621a      	str	r2, [r3, #32]
}
 80090ae:	bf00      	nop
 80090b0:	371c      	adds	r7, #28
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr

080090ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80090ba:	b480      	push	{r7}
 80090bc:	b085      	sub	sp, #20
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
 80090c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80090d2:	683a      	ldr	r2, [r7, #0]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	f043 0307 	orr.w	r3, r3, #7
 80090dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	68fa      	ldr	r2, [r7, #12]
 80090e2:	609a      	str	r2, [r3, #8]
}
 80090e4:	bf00      	nop
 80090e6:	3714      	adds	r7, #20
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b087      	sub	sp, #28
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]
 80090fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800910a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	021a      	lsls	r2, r3, #8
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	431a      	orrs	r2, r3
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	4313      	orrs	r3, r2
 8009118:	697a      	ldr	r2, [r7, #20]
 800911a:	4313      	orrs	r3, r2
 800911c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	697a      	ldr	r2, [r7, #20]
 8009122:	609a      	str	r2, [r3, #8]
}
 8009124:	bf00      	nop
 8009126:	371c      	adds	r7, #28
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009140:	2b01      	cmp	r3, #1
 8009142:	d101      	bne.n	8009148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009144:	2302      	movs	r3, #2
 8009146:	e05a      	b.n	80091fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2202      	movs	r2, #2
 8009154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800916e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68fa      	ldr	r2, [r7, #12]
 8009176:	4313      	orrs	r3, r2
 8009178:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a21      	ldr	r2, [pc, #132]	; (800920c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d022      	beq.n	80091d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009194:	d01d      	beq.n	80091d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a1d      	ldr	r2, [pc, #116]	; (8009210 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d018      	beq.n	80091d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a1b      	ldr	r2, [pc, #108]	; (8009214 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d013      	beq.n	80091d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a1a      	ldr	r2, [pc, #104]	; (8009218 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d00e      	beq.n	80091d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a18      	ldr	r2, [pc, #96]	; (800921c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d009      	beq.n	80091d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a17      	ldr	r2, [pc, #92]	; (8009220 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d004      	beq.n	80091d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a15      	ldr	r2, [pc, #84]	; (8009224 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d10c      	bne.n	80091ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	68ba      	ldr	r2, [r7, #8]
 80091e0:	4313      	orrs	r3, r2
 80091e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	68ba      	ldr	r2, [r7, #8]
 80091ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3714      	adds	r7, #20
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	40010000 	.word	0x40010000
 8009210:	40000400 	.word	0x40000400
 8009214:	40000800 	.word	0x40000800
 8009218:	40000c00 	.word	0x40000c00
 800921c:	40010400 	.word	0x40010400
 8009220:	40014000 	.word	0x40014000
 8009224:	40001800 	.word	0x40001800

08009228 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009230:	bf00      	nop
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009244:	bf00      	nop
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d101      	bne.n	8009262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	e03f      	b.n	80092e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009268:	b2db      	uxtb	r3, r3
 800926a:	2b00      	cmp	r3, #0
 800926c:	d106      	bne.n	800927c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f7f9 fd1a 	bl	8002cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2224      	movs	r2, #36	; 0x24
 8009280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68da      	ldr	r2, [r3, #12]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009292:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 fd7b 	bl	8009d90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	691a      	ldr	r2, [r3, #16]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80092a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	695a      	ldr	r2, [r3, #20]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68da      	ldr	r2, [r3, #12]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80092c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2220      	movs	r2, #32
 80092d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2220      	movs	r2, #32
 80092dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3708      	adds	r7, #8
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b08a      	sub	sp, #40	; 0x28
 80092ee:	af02      	add	r7, sp, #8
 80092f0:	60f8      	str	r0, [r7, #12]
 80092f2:	60b9      	str	r1, [r7, #8]
 80092f4:	603b      	str	r3, [r7, #0]
 80092f6:	4613      	mov	r3, r2
 80092f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80092fa:	2300      	movs	r3, #0
 80092fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009304:	b2db      	uxtb	r3, r3
 8009306:	2b20      	cmp	r3, #32
 8009308:	d17c      	bne.n	8009404 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d002      	beq.n	8009316 <HAL_UART_Transmit+0x2c>
 8009310:	88fb      	ldrh	r3, [r7, #6]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d101      	bne.n	800931a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	e075      	b.n	8009406 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009320:	2b01      	cmp	r3, #1
 8009322:	d101      	bne.n	8009328 <HAL_UART_Transmit+0x3e>
 8009324:	2302      	movs	r3, #2
 8009326:	e06e      	b.n	8009406 <HAL_UART_Transmit+0x11c>
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2201      	movs	r2, #1
 800932c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2200      	movs	r2, #0
 8009334:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2221      	movs	r2, #33	; 0x21
 800933a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800933e:	f7fb fe6f 	bl	8005020 <HAL_GetTick>
 8009342:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	88fa      	ldrh	r2, [r7, #6]
 8009348:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	88fa      	ldrh	r2, [r7, #6]
 800934e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009358:	d108      	bne.n	800936c <HAL_UART_Transmit+0x82>
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d104      	bne.n	800936c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009362:	2300      	movs	r3, #0
 8009364:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	61bb      	str	r3, [r7, #24]
 800936a:	e003      	b.n	8009374 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009370:	2300      	movs	r3, #0
 8009372:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2200      	movs	r2, #0
 8009378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800937c:	e02a      	b.n	80093d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	2200      	movs	r2, #0
 8009386:	2180      	movs	r1, #128	; 0x80
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f000 faf9 	bl	8009980 <UART_WaitOnFlagUntilTimeout>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d001      	beq.n	8009398 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009394:	2303      	movs	r3, #3
 8009396:	e036      	b.n	8009406 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d10b      	bne.n	80093b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	881b      	ldrh	r3, [r3, #0]
 80093a2:	461a      	mov	r2, r3
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	3302      	adds	r3, #2
 80093b2:	61bb      	str	r3, [r7, #24]
 80093b4:	e007      	b.n	80093c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	781a      	ldrb	r2, [r3, #0]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	3301      	adds	r3, #1
 80093c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	3b01      	subs	r3, #1
 80093ce:	b29a      	uxth	r2, r3
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80093d8:	b29b      	uxth	r3, r3
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1cf      	bne.n	800937e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	9300      	str	r3, [sp, #0]
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	2200      	movs	r2, #0
 80093e6:	2140      	movs	r1, #64	; 0x40
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f000 fac9 	bl	8009980 <UART_WaitOnFlagUntilTimeout>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d001      	beq.n	80093f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80093f4:	2303      	movs	r3, #3
 80093f6:	e006      	b.n	8009406 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2220      	movs	r2, #32
 80093fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009400:	2300      	movs	r3, #0
 8009402:	e000      	b.n	8009406 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009404:	2302      	movs	r3, #2
  }
}
 8009406:	4618      	mov	r0, r3
 8009408:	3720      	adds	r7, #32
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
	...

08009410 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b0ba      	sub	sp, #232	; 0xe8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	695b      	ldr	r3, [r3, #20]
 8009432:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009436:	2300      	movs	r3, #0
 8009438:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800943c:	2300      	movs	r3, #0
 800943e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009446:	f003 030f 	and.w	r3, r3, #15
 800944a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800944e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009452:	2b00      	cmp	r3, #0
 8009454:	d10f      	bne.n	8009476 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800945a:	f003 0320 	and.w	r3, r3, #32
 800945e:	2b00      	cmp	r3, #0
 8009460:	d009      	beq.n	8009476 <HAL_UART_IRQHandler+0x66>
 8009462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009466:	f003 0320 	and.w	r3, r3, #32
 800946a:	2b00      	cmp	r3, #0
 800946c:	d003      	beq.n	8009476 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 fbd3 	bl	8009c1a <UART_Receive_IT>
      return;
 8009474:	e256      	b.n	8009924 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009476:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800947a:	2b00      	cmp	r3, #0
 800947c:	f000 80de 	beq.w	800963c <HAL_UART_IRQHandler+0x22c>
 8009480:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009484:	f003 0301 	and.w	r3, r3, #1
 8009488:	2b00      	cmp	r3, #0
 800948a:	d106      	bne.n	800949a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800948c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009490:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009494:	2b00      	cmp	r3, #0
 8009496:	f000 80d1 	beq.w	800963c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800949a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800949e:	f003 0301 	and.w	r3, r3, #1
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00b      	beq.n	80094be <HAL_UART_IRQHandler+0xae>
 80094a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d005      	beq.n	80094be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b6:	f043 0201 	orr.w	r2, r3, #1
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80094be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094c2:	f003 0304 	and.w	r3, r3, #4
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00b      	beq.n	80094e2 <HAL_UART_IRQHandler+0xd2>
 80094ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094ce:	f003 0301 	and.w	r3, r3, #1
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d005      	beq.n	80094e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094da:	f043 0202 	orr.w	r2, r3, #2
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80094e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094e6:	f003 0302 	and.w	r3, r3, #2
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00b      	beq.n	8009506 <HAL_UART_IRQHandler+0xf6>
 80094ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094f2:	f003 0301 	and.w	r3, r3, #1
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d005      	beq.n	8009506 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094fe:	f043 0204 	orr.w	r2, r3, #4
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800950a:	f003 0308 	and.w	r3, r3, #8
 800950e:	2b00      	cmp	r3, #0
 8009510:	d011      	beq.n	8009536 <HAL_UART_IRQHandler+0x126>
 8009512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009516:	f003 0320 	and.w	r3, r3, #32
 800951a:	2b00      	cmp	r3, #0
 800951c:	d105      	bne.n	800952a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800951e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009522:	f003 0301 	and.w	r3, r3, #1
 8009526:	2b00      	cmp	r3, #0
 8009528:	d005      	beq.n	8009536 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952e:	f043 0208 	orr.w	r2, r3, #8
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953a:	2b00      	cmp	r3, #0
 800953c:	f000 81ed 	beq.w	800991a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009544:	f003 0320 	and.w	r3, r3, #32
 8009548:	2b00      	cmp	r3, #0
 800954a:	d008      	beq.n	800955e <HAL_UART_IRQHandler+0x14e>
 800954c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009550:	f003 0320 	and.w	r3, r3, #32
 8009554:	2b00      	cmp	r3, #0
 8009556:	d002      	beq.n	800955e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 fb5e 	bl	8009c1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	695b      	ldr	r3, [r3, #20]
 8009564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009568:	2b40      	cmp	r3, #64	; 0x40
 800956a:	bf0c      	ite	eq
 800956c:	2301      	moveq	r3, #1
 800956e:	2300      	movne	r3, #0
 8009570:	b2db      	uxtb	r3, r3
 8009572:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957a:	f003 0308 	and.w	r3, r3, #8
 800957e:	2b00      	cmp	r3, #0
 8009580:	d103      	bne.n	800958a <HAL_UART_IRQHandler+0x17a>
 8009582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009586:	2b00      	cmp	r3, #0
 8009588:	d04f      	beq.n	800962a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 fa66 	bl	8009a5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	695b      	ldr	r3, [r3, #20]
 8009596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800959a:	2b40      	cmp	r3, #64	; 0x40
 800959c:	d141      	bne.n	8009622 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	3314      	adds	r3, #20
 80095a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80095ac:	e853 3f00 	ldrex	r3, [r3]
 80095b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80095b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80095b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	3314      	adds	r3, #20
 80095c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80095ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80095ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80095d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80095da:	e841 2300 	strex	r3, r2, [r1]
 80095de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80095e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1d9      	bne.n	800959e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d013      	beq.n	800961a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f6:	4a7d      	ldr	r2, [pc, #500]	; (80097ec <HAL_UART_IRQHandler+0x3dc>)
 80095f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095fe:	4618      	mov	r0, r3
 8009600:	f7fb ffb8 	bl	8005574 <HAL_DMA_Abort_IT>
 8009604:	4603      	mov	r3, r0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d016      	beq.n	8009638 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800960e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009614:	4610      	mov	r0, r2
 8009616:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009618:	e00e      	b.n	8009638 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 f99a 	bl	8009954 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009620:	e00a      	b.n	8009638 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 f996 	bl	8009954 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009628:	e006      	b.n	8009638 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 f992 	bl	8009954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009636:	e170      	b.n	800991a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009638:	bf00      	nop
    return;
 800963a:	e16e      	b.n	800991a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009640:	2b01      	cmp	r3, #1
 8009642:	f040 814a 	bne.w	80098da <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800964a:	f003 0310 	and.w	r3, r3, #16
 800964e:	2b00      	cmp	r3, #0
 8009650:	f000 8143 	beq.w	80098da <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009658:	f003 0310 	and.w	r3, r3, #16
 800965c:	2b00      	cmp	r3, #0
 800965e:	f000 813c 	beq.w	80098da <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009662:	2300      	movs	r3, #0
 8009664:	60bb      	str	r3, [r7, #8]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	60bb      	str	r3, [r7, #8]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	60bb      	str	r3, [r7, #8]
 8009676:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	695b      	ldr	r3, [r3, #20]
 800967e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009682:	2b40      	cmp	r3, #64	; 0x40
 8009684:	f040 80b4 	bne.w	80097f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009694:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009698:	2b00      	cmp	r3, #0
 800969a:	f000 8140 	beq.w	800991e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80096a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80096a6:	429a      	cmp	r2, r3
 80096a8:	f080 8139 	bcs.w	800991e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80096b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b8:	69db      	ldr	r3, [r3, #28]
 80096ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096be:	f000 8088 	beq.w	80097d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	330c      	adds	r3, #12
 80096c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80096d0:	e853 3f00 	ldrex	r3, [r3]
 80096d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80096d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80096dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	330c      	adds	r3, #12
 80096ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80096ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80096f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80096fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80096fe:	e841 2300 	strex	r3, r2, [r1]
 8009702:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009706:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800970a:	2b00      	cmp	r3, #0
 800970c:	d1d9      	bne.n	80096c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	3314      	adds	r3, #20
 8009714:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009718:	e853 3f00 	ldrex	r3, [r3]
 800971c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800971e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009720:	f023 0301 	bic.w	r3, r3, #1
 8009724:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	3314      	adds	r3, #20
 800972e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009732:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009736:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009738:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800973a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800973e:	e841 2300 	strex	r3, r2, [r1]
 8009742:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009744:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009746:	2b00      	cmp	r3, #0
 8009748:	d1e1      	bne.n	800970e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	3314      	adds	r3, #20
 8009750:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009752:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009754:	e853 3f00 	ldrex	r3, [r3]
 8009758:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800975a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800975c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009760:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	3314      	adds	r3, #20
 800976a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800976e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009770:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009772:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009774:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009776:	e841 2300 	strex	r3, r2, [r1]
 800977a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800977c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800977e:	2b00      	cmp	r3, #0
 8009780:	d1e3      	bne.n	800974a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2220      	movs	r2, #32
 8009786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	330c      	adds	r3, #12
 8009796:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800979a:	e853 3f00 	ldrex	r3, [r3]
 800979e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80097a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097a2:	f023 0310 	bic.w	r3, r3, #16
 80097a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	330c      	adds	r3, #12
 80097b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80097b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80097b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80097ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80097bc:	e841 2300 	strex	r3, r2, [r1]
 80097c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80097c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d1e3      	bne.n	8009790 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7fb fe61 	bl	8005494 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80097da:	b29b      	uxth	r3, r3
 80097dc:	1ad3      	subs	r3, r2, r3
 80097de:	b29b      	uxth	r3, r3
 80097e0:	4619      	mov	r1, r3
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 f8c0 	bl	8009968 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80097e8:	e099      	b.n	800991e <HAL_UART_IRQHandler+0x50e>
 80097ea:	bf00      	nop
 80097ec:	08009b23 	.word	0x08009b23
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	1ad3      	subs	r3, r2, r3
 80097fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009804:	b29b      	uxth	r3, r3
 8009806:	2b00      	cmp	r3, #0
 8009808:	f000 808b 	beq.w	8009922 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800980c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009810:	2b00      	cmp	r3, #0
 8009812:	f000 8086 	beq.w	8009922 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	330c      	adds	r3, #12
 800981c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009820:	e853 3f00 	ldrex	r3, [r3]
 8009824:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009828:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800982c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	330c      	adds	r3, #12
 8009836:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800983a:	647a      	str	r2, [r7, #68]	; 0x44
 800983c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009840:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009842:	e841 2300 	strex	r3, r2, [r1]
 8009846:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1e3      	bne.n	8009816 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	3314      	adds	r3, #20
 8009854:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009858:	e853 3f00 	ldrex	r3, [r3]
 800985c:	623b      	str	r3, [r7, #32]
   return(result);
 800985e:	6a3b      	ldr	r3, [r7, #32]
 8009860:	f023 0301 	bic.w	r3, r3, #1
 8009864:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	3314      	adds	r3, #20
 800986e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009872:	633a      	str	r2, [r7, #48]	; 0x30
 8009874:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009876:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800987a:	e841 2300 	strex	r3, r2, [r1]
 800987e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1e3      	bne.n	800984e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2220      	movs	r2, #32
 800988a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	330c      	adds	r3, #12
 800989a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	e853 3f00 	ldrex	r3, [r3]
 80098a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f023 0310 	bic.w	r3, r3, #16
 80098aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	330c      	adds	r3, #12
 80098b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80098b8:	61fa      	str	r2, [r7, #28]
 80098ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098bc:	69b9      	ldr	r1, [r7, #24]
 80098be:	69fa      	ldr	r2, [r7, #28]
 80098c0:	e841 2300 	strex	r3, r2, [r1]
 80098c4:	617b      	str	r3, [r7, #20]
   return(result);
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1e3      	bne.n	8009894 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80098cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80098d0:	4619      	mov	r1, r3
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 f848 	bl	8009968 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80098d8:	e023      	b.n	8009922 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80098da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d009      	beq.n	80098fa <HAL_UART_IRQHandler+0x4ea>
 80098e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d003      	beq.n	80098fa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 f929 	bl	8009b4a <UART_Transmit_IT>
    return;
 80098f8:	e014      	b.n	8009924 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80098fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009902:	2b00      	cmp	r3, #0
 8009904:	d00e      	beq.n	8009924 <HAL_UART_IRQHandler+0x514>
 8009906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800990a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800990e:	2b00      	cmp	r3, #0
 8009910:	d008      	beq.n	8009924 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 f969 	bl	8009bea <UART_EndTransmit_IT>
    return;
 8009918:	e004      	b.n	8009924 <HAL_UART_IRQHandler+0x514>
    return;
 800991a:	bf00      	nop
 800991c:	e002      	b.n	8009924 <HAL_UART_IRQHandler+0x514>
      return;
 800991e:	bf00      	nop
 8009920:	e000      	b.n	8009924 <HAL_UART_IRQHandler+0x514>
      return;
 8009922:	bf00      	nop
  }
}
 8009924:	37e8      	adds	r7, #232	; 0xe8
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop

0800992c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009934:	bf00      	nop
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009948:	bf00      	nop
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800995c:	bf00      	nop
 800995e:	370c      	adds	r7, #12
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	460b      	mov	r3, r1
 8009972:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009974:	bf00      	nop
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b090      	sub	sp, #64	; 0x40
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	603b      	str	r3, [r7, #0]
 800998c:	4613      	mov	r3, r2
 800998e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009990:	e050      	b.n	8009a34 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009998:	d04c      	beq.n	8009a34 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800999a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800999c:	2b00      	cmp	r3, #0
 800999e:	d007      	beq.n	80099b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80099a0:	f7fb fb3e 	bl	8005020 <HAL_GetTick>
 80099a4:	4602      	mov	r2, r0
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	1ad3      	subs	r3, r2, r3
 80099aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d241      	bcs.n	8009a34 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	330c      	adds	r3, #12
 80099b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ba:	e853 3f00 	ldrex	r3, [r3]
 80099be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80099c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	330c      	adds	r3, #12
 80099ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80099d0:	637a      	str	r2, [r7, #52]	; 0x34
 80099d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80099d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099d8:	e841 2300 	strex	r3, r2, [r1]
 80099dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80099de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d1e5      	bne.n	80099b0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	3314      	adds	r3, #20
 80099ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	e853 3f00 	ldrex	r3, [r3]
 80099f2:	613b      	str	r3, [r7, #16]
   return(result);
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	f023 0301 	bic.w	r3, r3, #1
 80099fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	3314      	adds	r3, #20
 8009a02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a04:	623a      	str	r2, [r7, #32]
 8009a06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a08:	69f9      	ldr	r1, [r7, #28]
 8009a0a:	6a3a      	ldr	r2, [r7, #32]
 8009a0c:	e841 2300 	strex	r3, r2, [r1]
 8009a10:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d1e5      	bne.n	80099e4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2220      	movs	r2, #32
 8009a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2220      	movs	r2, #32
 8009a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009a30:	2303      	movs	r3, #3
 8009a32:	e00f      	b.n	8009a54 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	68ba      	ldr	r2, [r7, #8]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	bf0c      	ite	eq
 8009a44:	2301      	moveq	r3, #1
 8009a46:	2300      	movne	r3, #0
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	79fb      	ldrb	r3, [r7, #7]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d09f      	beq.n	8009992 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3740      	adds	r7, #64	; 0x40
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b095      	sub	sp, #84	; 0x54
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	330c      	adds	r3, #12
 8009a6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a6e:	e853 3f00 	ldrex	r3, [r3]
 8009a72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	330c      	adds	r3, #12
 8009a82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a84:	643a      	str	r2, [r7, #64]	; 0x40
 8009a86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a8c:	e841 2300 	strex	r3, r2, [r1]
 8009a90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d1e5      	bne.n	8009a64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	3314      	adds	r3, #20
 8009a9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa0:	6a3b      	ldr	r3, [r7, #32]
 8009aa2:	e853 3f00 	ldrex	r3, [r3]
 8009aa6:	61fb      	str	r3, [r7, #28]
   return(result);
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	f023 0301 	bic.w	r3, r3, #1
 8009aae:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	3314      	adds	r3, #20
 8009ab6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ab8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009aba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009abc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ac0:	e841 2300 	strex	r3, r2, [r1]
 8009ac4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d1e5      	bne.n	8009a98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d119      	bne.n	8009b08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	330c      	adds	r3, #12
 8009ada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	e853 3f00 	ldrex	r3, [r3]
 8009ae2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	f023 0310 	bic.w	r3, r3, #16
 8009aea:	647b      	str	r3, [r7, #68]	; 0x44
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	330c      	adds	r3, #12
 8009af2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009af4:	61ba      	str	r2, [r7, #24]
 8009af6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af8:	6979      	ldr	r1, [r7, #20]
 8009afa:	69ba      	ldr	r2, [r7, #24]
 8009afc:	e841 2300 	strex	r3, r2, [r1]
 8009b00:	613b      	str	r3, [r7, #16]
   return(result);
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1e5      	bne.n	8009ad4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2220      	movs	r2, #32
 8009b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009b16:	bf00      	nop
 8009b18:	3754      	adds	r7, #84	; 0x54
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr

08009b22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b084      	sub	sp, #16
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2200      	movs	r2, #0
 8009b34:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b3c:	68f8      	ldr	r0, [r7, #12]
 8009b3e:	f7ff ff09 	bl	8009954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b42:	bf00      	nop
 8009b44:	3710      	adds	r7, #16
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009b4a:	b480      	push	{r7}
 8009b4c:	b085      	sub	sp, #20
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	2b21      	cmp	r3, #33	; 0x21
 8009b5c:	d13e      	bne.n	8009bdc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b66:	d114      	bne.n	8009b92 <UART_Transmit_IT+0x48>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	691b      	ldr	r3, [r3, #16]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d110      	bne.n	8009b92 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6a1b      	ldr	r3, [r3, #32]
 8009b74:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	881b      	ldrh	r3, [r3, #0]
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b84:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6a1b      	ldr	r3, [r3, #32]
 8009b8a:	1c9a      	adds	r2, r3, #2
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	621a      	str	r2, [r3, #32]
 8009b90:	e008      	b.n	8009ba4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6a1b      	ldr	r3, [r3, #32]
 8009b96:	1c59      	adds	r1, r3, #1
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	6211      	str	r1, [r2, #32]
 8009b9c:	781a      	ldrb	r2, [r3, #0]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	3b01      	subs	r3, #1
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d10f      	bne.n	8009bd8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68da      	ldr	r2, [r3, #12]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009bc6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	68da      	ldr	r2, [r3, #12]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bd6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	e000      	b.n	8009bde <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009bdc:	2302      	movs	r3, #2
  }
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3714      	adds	r7, #20
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr

08009bea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b082      	sub	sp, #8
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68da      	ldr	r2, [r3, #12]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2220      	movs	r2, #32
 8009c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f7ff fe8e 	bl	800992c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009c10:	2300      	movs	r3, #0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3708      	adds	r7, #8
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b08c      	sub	sp, #48	; 0x30
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	2b22      	cmp	r3, #34	; 0x22
 8009c2c:	f040 80ab 	bne.w	8009d86 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c38:	d117      	bne.n	8009c6a <UART_Receive_IT+0x50>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	691b      	ldr	r3, [r3, #16]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d113      	bne.n	8009c6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009c42:	2300      	movs	r3, #0
 8009c44:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c4a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c58:	b29a      	uxth	r2, r3
 8009c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c62:	1c9a      	adds	r2, r3, #2
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	629a      	str	r2, [r3, #40]	; 0x28
 8009c68:	e026      	b.n	8009cb8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009c70:	2300      	movs	r3, #0
 8009c72:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c7c:	d007      	beq.n	8009c8e <UART_Receive_IT+0x74>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d10a      	bne.n	8009c9c <UART_Receive_IT+0x82>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d106      	bne.n	8009c9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	b2da      	uxtb	r2, r3
 8009c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c98:	701a      	strb	r2, [r3, #0]
 8009c9a:	e008      	b.n	8009cae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ca8:	b2da      	uxtb	r2, r3
 8009caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb2:	1c5a      	adds	r2, r3, #1
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	3b01      	subs	r3, #1
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d15a      	bne.n	8009d82 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68da      	ldr	r2, [r3, #12]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f022 0220 	bic.w	r2, r2, #32
 8009cda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68da      	ldr	r2, [r3, #12]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009cea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	695a      	ldr	r2, [r3, #20]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f022 0201 	bic.w	r2, r2, #1
 8009cfa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2220      	movs	r2, #32
 8009d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d135      	bne.n	8009d78 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	330c      	adds	r3, #12
 8009d18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	e853 3f00 	ldrex	r3, [r3]
 8009d20:	613b      	str	r3, [r7, #16]
   return(result);
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	f023 0310 	bic.w	r3, r3, #16
 8009d28:	627b      	str	r3, [r7, #36]	; 0x24
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	330c      	adds	r3, #12
 8009d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d32:	623a      	str	r2, [r7, #32]
 8009d34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d36:	69f9      	ldr	r1, [r7, #28]
 8009d38:	6a3a      	ldr	r2, [r7, #32]
 8009d3a:	e841 2300 	strex	r3, r2, [r1]
 8009d3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d1e5      	bne.n	8009d12 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f003 0310 	and.w	r3, r3, #16
 8009d50:	2b10      	cmp	r3, #16
 8009d52:	d10a      	bne.n	8009d6a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009d54:	2300      	movs	r3, #0
 8009d56:	60fb      	str	r3, [r7, #12]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	60fb      	str	r3, [r7, #12]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	60fb      	str	r3, [r7, #12]
 8009d68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009d6e:	4619      	mov	r1, r3
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f7ff fdf9 	bl	8009968 <HAL_UARTEx_RxEventCallback>
 8009d76:	e002      	b.n	8009d7e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f7ff fde1 	bl	8009940 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	e002      	b.n	8009d88 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009d82:	2300      	movs	r3, #0
 8009d84:	e000      	b.n	8009d88 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009d86:	2302      	movs	r3, #2
  }
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3730      	adds	r7, #48	; 0x30
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d94:	b0c0      	sub	sp, #256	; 0x100
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	691b      	ldr	r3, [r3, #16]
 8009da4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dac:	68d9      	ldr	r1, [r3, #12]
 8009dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	ea40 0301 	orr.w	r3, r0, r1
 8009db8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dbe:	689a      	ldr	r2, [r3, #8]
 8009dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	431a      	orrs	r2, r3
 8009dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dcc:	695b      	ldr	r3, [r3, #20]
 8009dce:	431a      	orrs	r2, r3
 8009dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dd4:	69db      	ldr	r3, [r3, #28]
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009de8:	f021 010c 	bic.w	r1, r1, #12
 8009dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009df6:	430b      	orrs	r3, r1
 8009df8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	695b      	ldr	r3, [r3, #20]
 8009e02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e0a:	6999      	ldr	r1, [r3, #24]
 8009e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	ea40 0301 	orr.w	r3, r0, r1
 8009e16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	4b8f      	ldr	r3, [pc, #572]	; (800a05c <UART_SetConfig+0x2cc>)
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d005      	beq.n	8009e30 <UART_SetConfig+0xa0>
 8009e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	4b8d      	ldr	r3, [pc, #564]	; (800a060 <UART_SetConfig+0x2d0>)
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d104      	bne.n	8009e3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009e30:	f7fd fd16 	bl	8007860 <HAL_RCC_GetPCLK2Freq>
 8009e34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009e38:	e003      	b.n	8009e42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009e3a:	f7fd fcfd 	bl	8007838 <HAL_RCC_GetPCLK1Freq>
 8009e3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e46:	69db      	ldr	r3, [r3, #28]
 8009e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e4c:	f040 810c 	bne.w	800a068 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e54:	2200      	movs	r2, #0
 8009e56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009e5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009e5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009e62:	4622      	mov	r2, r4
 8009e64:	462b      	mov	r3, r5
 8009e66:	1891      	adds	r1, r2, r2
 8009e68:	65b9      	str	r1, [r7, #88]	; 0x58
 8009e6a:	415b      	adcs	r3, r3
 8009e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009e72:	4621      	mov	r1, r4
 8009e74:	eb12 0801 	adds.w	r8, r2, r1
 8009e78:	4629      	mov	r1, r5
 8009e7a:	eb43 0901 	adc.w	r9, r3, r1
 8009e7e:	f04f 0200 	mov.w	r2, #0
 8009e82:	f04f 0300 	mov.w	r3, #0
 8009e86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009e8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009e8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009e92:	4690      	mov	r8, r2
 8009e94:	4699      	mov	r9, r3
 8009e96:	4623      	mov	r3, r4
 8009e98:	eb18 0303 	adds.w	r3, r8, r3
 8009e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009ea0:	462b      	mov	r3, r5
 8009ea2:	eb49 0303 	adc.w	r3, r9, r3
 8009ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009eb6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009eba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	18db      	adds	r3, r3, r3
 8009ec2:	653b      	str	r3, [r7, #80]	; 0x50
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	eb42 0303 	adc.w	r3, r2, r3
 8009eca:	657b      	str	r3, [r7, #84]	; 0x54
 8009ecc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009ed0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009ed4:	f7f6 fee8 	bl	8000ca8 <__aeabi_uldivmod>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	460b      	mov	r3, r1
 8009edc:	4b61      	ldr	r3, [pc, #388]	; (800a064 <UART_SetConfig+0x2d4>)
 8009ede:	fba3 2302 	umull	r2, r3, r3, r2
 8009ee2:	095b      	lsrs	r3, r3, #5
 8009ee4:	011c      	lsls	r4, r3, #4
 8009ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009eea:	2200      	movs	r2, #0
 8009eec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ef0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009ef4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009ef8:	4642      	mov	r2, r8
 8009efa:	464b      	mov	r3, r9
 8009efc:	1891      	adds	r1, r2, r2
 8009efe:	64b9      	str	r1, [r7, #72]	; 0x48
 8009f00:	415b      	adcs	r3, r3
 8009f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009f08:	4641      	mov	r1, r8
 8009f0a:	eb12 0a01 	adds.w	sl, r2, r1
 8009f0e:	4649      	mov	r1, r9
 8009f10:	eb43 0b01 	adc.w	fp, r3, r1
 8009f14:	f04f 0200 	mov.w	r2, #0
 8009f18:	f04f 0300 	mov.w	r3, #0
 8009f1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009f20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009f24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f28:	4692      	mov	sl, r2
 8009f2a:	469b      	mov	fp, r3
 8009f2c:	4643      	mov	r3, r8
 8009f2e:	eb1a 0303 	adds.w	r3, sl, r3
 8009f32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009f36:	464b      	mov	r3, r9
 8009f38:	eb4b 0303 	adc.w	r3, fp, r3
 8009f3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009f50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009f54:	460b      	mov	r3, r1
 8009f56:	18db      	adds	r3, r3, r3
 8009f58:	643b      	str	r3, [r7, #64]	; 0x40
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	eb42 0303 	adc.w	r3, r2, r3
 8009f60:	647b      	str	r3, [r7, #68]	; 0x44
 8009f62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009f66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009f6a:	f7f6 fe9d 	bl	8000ca8 <__aeabi_uldivmod>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	460b      	mov	r3, r1
 8009f72:	4611      	mov	r1, r2
 8009f74:	4b3b      	ldr	r3, [pc, #236]	; (800a064 <UART_SetConfig+0x2d4>)
 8009f76:	fba3 2301 	umull	r2, r3, r3, r1
 8009f7a:	095b      	lsrs	r3, r3, #5
 8009f7c:	2264      	movs	r2, #100	; 0x64
 8009f7e:	fb02 f303 	mul.w	r3, r2, r3
 8009f82:	1acb      	subs	r3, r1, r3
 8009f84:	00db      	lsls	r3, r3, #3
 8009f86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009f8a:	4b36      	ldr	r3, [pc, #216]	; (800a064 <UART_SetConfig+0x2d4>)
 8009f8c:	fba3 2302 	umull	r2, r3, r3, r2
 8009f90:	095b      	lsrs	r3, r3, #5
 8009f92:	005b      	lsls	r3, r3, #1
 8009f94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009f98:	441c      	add	r4, r3
 8009f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009fa4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009fa8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009fac:	4642      	mov	r2, r8
 8009fae:	464b      	mov	r3, r9
 8009fb0:	1891      	adds	r1, r2, r2
 8009fb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8009fb4:	415b      	adcs	r3, r3
 8009fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009fbc:	4641      	mov	r1, r8
 8009fbe:	1851      	adds	r1, r2, r1
 8009fc0:	6339      	str	r1, [r7, #48]	; 0x30
 8009fc2:	4649      	mov	r1, r9
 8009fc4:	414b      	adcs	r3, r1
 8009fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8009fc8:	f04f 0200 	mov.w	r2, #0
 8009fcc:	f04f 0300 	mov.w	r3, #0
 8009fd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009fd4:	4659      	mov	r1, fp
 8009fd6:	00cb      	lsls	r3, r1, #3
 8009fd8:	4651      	mov	r1, sl
 8009fda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009fde:	4651      	mov	r1, sl
 8009fe0:	00ca      	lsls	r2, r1, #3
 8009fe2:	4610      	mov	r0, r2
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	4642      	mov	r2, r8
 8009fea:	189b      	adds	r3, r3, r2
 8009fec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ff0:	464b      	mov	r3, r9
 8009ff2:	460a      	mov	r2, r1
 8009ff4:	eb42 0303 	adc.w	r3, r2, r3
 8009ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a008:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a00c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a010:	460b      	mov	r3, r1
 800a012:	18db      	adds	r3, r3, r3
 800a014:	62bb      	str	r3, [r7, #40]	; 0x28
 800a016:	4613      	mov	r3, r2
 800a018:	eb42 0303 	adc.w	r3, r2, r3
 800a01c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a01e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a022:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a026:	f7f6 fe3f 	bl	8000ca8 <__aeabi_uldivmod>
 800a02a:	4602      	mov	r2, r0
 800a02c:	460b      	mov	r3, r1
 800a02e:	4b0d      	ldr	r3, [pc, #52]	; (800a064 <UART_SetConfig+0x2d4>)
 800a030:	fba3 1302 	umull	r1, r3, r3, r2
 800a034:	095b      	lsrs	r3, r3, #5
 800a036:	2164      	movs	r1, #100	; 0x64
 800a038:	fb01 f303 	mul.w	r3, r1, r3
 800a03c:	1ad3      	subs	r3, r2, r3
 800a03e:	00db      	lsls	r3, r3, #3
 800a040:	3332      	adds	r3, #50	; 0x32
 800a042:	4a08      	ldr	r2, [pc, #32]	; (800a064 <UART_SetConfig+0x2d4>)
 800a044:	fba2 2303 	umull	r2, r3, r2, r3
 800a048:	095b      	lsrs	r3, r3, #5
 800a04a:	f003 0207 	and.w	r2, r3, #7
 800a04e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4422      	add	r2, r4
 800a056:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a058:	e105      	b.n	800a266 <UART_SetConfig+0x4d6>
 800a05a:	bf00      	nop
 800a05c:	40011000 	.word	0x40011000
 800a060:	40011400 	.word	0x40011400
 800a064:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a06c:	2200      	movs	r2, #0
 800a06e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a072:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a076:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a07a:	4642      	mov	r2, r8
 800a07c:	464b      	mov	r3, r9
 800a07e:	1891      	adds	r1, r2, r2
 800a080:	6239      	str	r1, [r7, #32]
 800a082:	415b      	adcs	r3, r3
 800a084:	627b      	str	r3, [r7, #36]	; 0x24
 800a086:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a08a:	4641      	mov	r1, r8
 800a08c:	1854      	adds	r4, r2, r1
 800a08e:	4649      	mov	r1, r9
 800a090:	eb43 0501 	adc.w	r5, r3, r1
 800a094:	f04f 0200 	mov.w	r2, #0
 800a098:	f04f 0300 	mov.w	r3, #0
 800a09c:	00eb      	lsls	r3, r5, #3
 800a09e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a0a2:	00e2      	lsls	r2, r4, #3
 800a0a4:	4614      	mov	r4, r2
 800a0a6:	461d      	mov	r5, r3
 800a0a8:	4643      	mov	r3, r8
 800a0aa:	18e3      	adds	r3, r4, r3
 800a0ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a0b0:	464b      	mov	r3, r9
 800a0b2:	eb45 0303 	adc.w	r3, r5, r3
 800a0b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a0ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a0c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a0ca:	f04f 0200 	mov.w	r2, #0
 800a0ce:	f04f 0300 	mov.w	r3, #0
 800a0d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a0d6:	4629      	mov	r1, r5
 800a0d8:	008b      	lsls	r3, r1, #2
 800a0da:	4621      	mov	r1, r4
 800a0dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a0e0:	4621      	mov	r1, r4
 800a0e2:	008a      	lsls	r2, r1, #2
 800a0e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a0e8:	f7f6 fdde 	bl	8000ca8 <__aeabi_uldivmod>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	460b      	mov	r3, r1
 800a0f0:	4b60      	ldr	r3, [pc, #384]	; (800a274 <UART_SetConfig+0x4e4>)
 800a0f2:	fba3 2302 	umull	r2, r3, r3, r2
 800a0f6:	095b      	lsrs	r3, r3, #5
 800a0f8:	011c      	lsls	r4, r3, #4
 800a0fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0fe:	2200      	movs	r2, #0
 800a100:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a104:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a108:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a10c:	4642      	mov	r2, r8
 800a10e:	464b      	mov	r3, r9
 800a110:	1891      	adds	r1, r2, r2
 800a112:	61b9      	str	r1, [r7, #24]
 800a114:	415b      	adcs	r3, r3
 800a116:	61fb      	str	r3, [r7, #28]
 800a118:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a11c:	4641      	mov	r1, r8
 800a11e:	1851      	adds	r1, r2, r1
 800a120:	6139      	str	r1, [r7, #16]
 800a122:	4649      	mov	r1, r9
 800a124:	414b      	adcs	r3, r1
 800a126:	617b      	str	r3, [r7, #20]
 800a128:	f04f 0200 	mov.w	r2, #0
 800a12c:	f04f 0300 	mov.w	r3, #0
 800a130:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a134:	4659      	mov	r1, fp
 800a136:	00cb      	lsls	r3, r1, #3
 800a138:	4651      	mov	r1, sl
 800a13a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a13e:	4651      	mov	r1, sl
 800a140:	00ca      	lsls	r2, r1, #3
 800a142:	4610      	mov	r0, r2
 800a144:	4619      	mov	r1, r3
 800a146:	4603      	mov	r3, r0
 800a148:	4642      	mov	r2, r8
 800a14a:	189b      	adds	r3, r3, r2
 800a14c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a150:	464b      	mov	r3, r9
 800a152:	460a      	mov	r2, r1
 800a154:	eb42 0303 	adc.w	r3, r2, r3
 800a158:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a15c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	67bb      	str	r3, [r7, #120]	; 0x78
 800a166:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a168:	f04f 0200 	mov.w	r2, #0
 800a16c:	f04f 0300 	mov.w	r3, #0
 800a170:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a174:	4649      	mov	r1, r9
 800a176:	008b      	lsls	r3, r1, #2
 800a178:	4641      	mov	r1, r8
 800a17a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a17e:	4641      	mov	r1, r8
 800a180:	008a      	lsls	r2, r1, #2
 800a182:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a186:	f7f6 fd8f 	bl	8000ca8 <__aeabi_uldivmod>
 800a18a:	4602      	mov	r2, r0
 800a18c:	460b      	mov	r3, r1
 800a18e:	4b39      	ldr	r3, [pc, #228]	; (800a274 <UART_SetConfig+0x4e4>)
 800a190:	fba3 1302 	umull	r1, r3, r3, r2
 800a194:	095b      	lsrs	r3, r3, #5
 800a196:	2164      	movs	r1, #100	; 0x64
 800a198:	fb01 f303 	mul.w	r3, r1, r3
 800a19c:	1ad3      	subs	r3, r2, r3
 800a19e:	011b      	lsls	r3, r3, #4
 800a1a0:	3332      	adds	r3, #50	; 0x32
 800a1a2:	4a34      	ldr	r2, [pc, #208]	; (800a274 <UART_SetConfig+0x4e4>)
 800a1a4:	fba2 2303 	umull	r2, r3, r2, r3
 800a1a8:	095b      	lsrs	r3, r3, #5
 800a1aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1ae:	441c      	add	r4, r3
 800a1b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	673b      	str	r3, [r7, #112]	; 0x70
 800a1b8:	677a      	str	r2, [r7, #116]	; 0x74
 800a1ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a1be:	4642      	mov	r2, r8
 800a1c0:	464b      	mov	r3, r9
 800a1c2:	1891      	adds	r1, r2, r2
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	415b      	adcs	r3, r3
 800a1c8:	60fb      	str	r3, [r7, #12]
 800a1ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a1ce:	4641      	mov	r1, r8
 800a1d0:	1851      	adds	r1, r2, r1
 800a1d2:	6039      	str	r1, [r7, #0]
 800a1d4:	4649      	mov	r1, r9
 800a1d6:	414b      	adcs	r3, r1
 800a1d8:	607b      	str	r3, [r7, #4]
 800a1da:	f04f 0200 	mov.w	r2, #0
 800a1de:	f04f 0300 	mov.w	r3, #0
 800a1e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a1e6:	4659      	mov	r1, fp
 800a1e8:	00cb      	lsls	r3, r1, #3
 800a1ea:	4651      	mov	r1, sl
 800a1ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1f0:	4651      	mov	r1, sl
 800a1f2:	00ca      	lsls	r2, r1, #3
 800a1f4:	4610      	mov	r0, r2
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	4642      	mov	r2, r8
 800a1fc:	189b      	adds	r3, r3, r2
 800a1fe:	66bb      	str	r3, [r7, #104]	; 0x68
 800a200:	464b      	mov	r3, r9
 800a202:	460a      	mov	r2, r1
 800a204:	eb42 0303 	adc.w	r3, r2, r3
 800a208:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a20a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	663b      	str	r3, [r7, #96]	; 0x60
 800a214:	667a      	str	r2, [r7, #100]	; 0x64
 800a216:	f04f 0200 	mov.w	r2, #0
 800a21a:	f04f 0300 	mov.w	r3, #0
 800a21e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a222:	4649      	mov	r1, r9
 800a224:	008b      	lsls	r3, r1, #2
 800a226:	4641      	mov	r1, r8
 800a228:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a22c:	4641      	mov	r1, r8
 800a22e:	008a      	lsls	r2, r1, #2
 800a230:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a234:	f7f6 fd38 	bl	8000ca8 <__aeabi_uldivmod>
 800a238:	4602      	mov	r2, r0
 800a23a:	460b      	mov	r3, r1
 800a23c:	4b0d      	ldr	r3, [pc, #52]	; (800a274 <UART_SetConfig+0x4e4>)
 800a23e:	fba3 1302 	umull	r1, r3, r3, r2
 800a242:	095b      	lsrs	r3, r3, #5
 800a244:	2164      	movs	r1, #100	; 0x64
 800a246:	fb01 f303 	mul.w	r3, r1, r3
 800a24a:	1ad3      	subs	r3, r2, r3
 800a24c:	011b      	lsls	r3, r3, #4
 800a24e:	3332      	adds	r3, #50	; 0x32
 800a250:	4a08      	ldr	r2, [pc, #32]	; (800a274 <UART_SetConfig+0x4e4>)
 800a252:	fba2 2303 	umull	r2, r3, r2, r3
 800a256:	095b      	lsrs	r3, r3, #5
 800a258:	f003 020f 	and.w	r2, r3, #15
 800a25c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4422      	add	r2, r4
 800a264:	609a      	str	r2, [r3, #8]
}
 800a266:	bf00      	nop
 800a268:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a26c:	46bd      	mov	sp, r7
 800a26e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a272:	bf00      	nop
 800a274:	51eb851f 	.word	0x51eb851f

0800a278 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d123      	bne.n	800a2d2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a292:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a296:	683a      	ldr	r2, [r7, #0]
 800a298:	6851      	ldr	r1, [r2, #4]
 800a29a:	683a      	ldr	r2, [r7, #0]
 800a29c:	6892      	ldr	r2, [r2, #8]
 800a29e:	4311      	orrs	r1, r2
 800a2a0:	683a      	ldr	r2, [r7, #0]
 800a2a2:	68d2      	ldr	r2, [r2, #12]
 800a2a4:	4311      	orrs	r1, r2
 800a2a6:	683a      	ldr	r2, [r7, #0]
 800a2a8:	6912      	ldr	r2, [r2, #16]
 800a2aa:	4311      	orrs	r1, r2
 800a2ac:	683a      	ldr	r2, [r7, #0]
 800a2ae:	6952      	ldr	r2, [r2, #20]
 800a2b0:	4311      	orrs	r1, r2
 800a2b2:	683a      	ldr	r2, [r7, #0]
 800a2b4:	6992      	ldr	r2, [r2, #24]
 800a2b6:	4311      	orrs	r1, r2
 800a2b8:	683a      	ldr	r2, [r7, #0]
 800a2ba:	69d2      	ldr	r2, [r2, #28]
 800a2bc:	4311      	orrs	r1, r2
 800a2be:	683a      	ldr	r2, [r7, #0]
 800a2c0:	6a12      	ldr	r2, [r2, #32]
 800a2c2:	4311      	orrs	r1, r2
 800a2c4:	683a      	ldr	r2, [r7, #0]
 800a2c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a2c8:	430a      	orrs	r2, r1
 800a2ca:	431a      	orrs	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	601a      	str	r2, [r3, #0]
 800a2d0:	e028      	b.n	800a324 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	69d9      	ldr	r1, [r3, #28]
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	6a1b      	ldr	r3, [r3, #32]
 800a2e2:	4319      	orrs	r1, r3
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e8:	430b      	orrs	r3, r1
 800a2ea:	431a      	orrs	r2, r3
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a2f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a2fc:	683a      	ldr	r2, [r7, #0]
 800a2fe:	6851      	ldr	r1, [r2, #4]
 800a300:	683a      	ldr	r2, [r7, #0]
 800a302:	6892      	ldr	r2, [r2, #8]
 800a304:	4311      	orrs	r1, r2
 800a306:	683a      	ldr	r2, [r7, #0]
 800a308:	68d2      	ldr	r2, [r2, #12]
 800a30a:	4311      	orrs	r1, r2
 800a30c:	683a      	ldr	r2, [r7, #0]
 800a30e:	6912      	ldr	r2, [r2, #16]
 800a310:	4311      	orrs	r1, r2
 800a312:	683a      	ldr	r2, [r7, #0]
 800a314:	6952      	ldr	r2, [r2, #20]
 800a316:	4311      	orrs	r1, r2
 800a318:	683a      	ldr	r2, [r7, #0]
 800a31a:	6992      	ldr	r2, [r2, #24]
 800a31c:	430a      	orrs	r2, r1
 800a31e:	431a      	orrs	r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a324:	2300      	movs	r3, #0
}
 800a326:	4618      	mov	r0, r3
 800a328:	370c      	adds	r7, #12
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr

0800a332 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a332:	b480      	push	{r7}
 800a334:	b085      	sub	sp, #20
 800a336:	af00      	add	r7, sp, #0
 800a338:	60f8      	str	r0, [r7, #12]
 800a33a:	60b9      	str	r1, [r7, #8]
 800a33c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d128      	bne.n	800a396 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	1e59      	subs	r1, r3, #1
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	3b01      	subs	r3, #1
 800a358:	011b      	lsls	r3, r3, #4
 800a35a:	4319      	orrs	r1, r3
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	3b01      	subs	r3, #1
 800a362:	021b      	lsls	r3, r3, #8
 800a364:	4319      	orrs	r1, r3
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	3b01      	subs	r3, #1
 800a36c:	031b      	lsls	r3, r3, #12
 800a36e:	4319      	orrs	r1, r3
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	691b      	ldr	r3, [r3, #16]
 800a374:	3b01      	subs	r3, #1
 800a376:	041b      	lsls	r3, r3, #16
 800a378:	4319      	orrs	r1, r3
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	695b      	ldr	r3, [r3, #20]
 800a37e:	3b01      	subs	r3, #1
 800a380:	051b      	lsls	r3, r3, #20
 800a382:	4319      	orrs	r1, r3
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	699b      	ldr	r3, [r3, #24]
 800a388:	3b01      	subs	r3, #1
 800a38a:	061b      	lsls	r3, r3, #24
 800a38c:	430b      	orrs	r3, r1
 800a38e:	431a      	orrs	r2, r3
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	609a      	str	r2, [r3, #8]
 800a394:	e02f      	b.n	800a3f6 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	689b      	ldr	r3, [r3, #8]
 800a39a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a39e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3a2:	68ba      	ldr	r2, [r7, #8]
 800a3a4:	68d2      	ldr	r2, [r2, #12]
 800a3a6:	3a01      	subs	r2, #1
 800a3a8:	0311      	lsls	r1, r2, #12
 800a3aa:	68ba      	ldr	r2, [r7, #8]
 800a3ac:	6952      	ldr	r2, [r2, #20]
 800a3ae:	3a01      	subs	r2, #1
 800a3b0:	0512      	lsls	r2, r2, #20
 800a3b2:	430a      	orrs	r2, r1
 800a3b4:	431a      	orrs	r2, r3
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	1e59      	subs	r1, r3, #1
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	3b01      	subs	r3, #1
 800a3ce:	011b      	lsls	r3, r3, #4
 800a3d0:	4319      	orrs	r1, r3
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	3b01      	subs	r3, #1
 800a3d8:	021b      	lsls	r3, r3, #8
 800a3da:	4319      	orrs	r1, r3
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	691b      	ldr	r3, [r3, #16]
 800a3e0:	3b01      	subs	r3, #1
 800a3e2:	041b      	lsls	r3, r3, #16
 800a3e4:	4319      	orrs	r1, r3
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	699b      	ldr	r3, [r3, #24]
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	061b      	lsls	r3, r3, #24
 800a3ee:	430b      	orrs	r3, r1
 800a3f0:	431a      	orrs	r2, r3
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3714      	adds	r7, #20
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b086      	sub	sp, #24
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800a410:	2300      	movs	r3, #0
 800a412:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	0d9b      	lsrs	r3, r3, #22
 800a41a:	059b      	lsls	r3, r3, #22
 800a41c:	68ba      	ldr	r2, [r7, #8]
 800a41e:	6811      	ldr	r1, [r2, #0]
 800a420:	68ba      	ldr	r2, [r7, #8]
 800a422:	6852      	ldr	r2, [r2, #4]
 800a424:	4311      	orrs	r1, r2
 800a426:	68ba      	ldr	r2, [r7, #8]
 800a428:	6892      	ldr	r2, [r2, #8]
 800a42a:	3a01      	subs	r2, #1
 800a42c:	0152      	lsls	r2, r2, #5
 800a42e:	4311      	orrs	r1, r2
 800a430:	68ba      	ldr	r2, [r7, #8]
 800a432:	68d2      	ldr	r2, [r2, #12]
 800a434:	0252      	lsls	r2, r2, #9
 800a436:	430a      	orrs	r2, r1
 800a438:	431a      	orrs	r2, r3
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800a43e:	f7fa fdef 	bl	8005020 <HAL_GetTick>
 800a442:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a444:	e010      	b.n	800a468 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a44c:	d00c      	beq.n	800a468 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d007      	beq.n	800a464 <FMC_SDRAM_SendCommand+0x60>
 800a454:	f7fa fde4 	bl	8005020 <HAL_GetTick>
 800a458:	4602      	mov	r2, r0
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	1ad3      	subs	r3, r2, r3
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	429a      	cmp	r2, r3
 800a462:	d201      	bcs.n	800a468 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800a464:	2303      	movs	r3, #3
 800a466:	e006      	b.n	800a476 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	699b      	ldr	r3, [r3, #24]
 800a46c:	f003 0320 	and.w	r3, r3, #32
 800a470:	2b20      	cmp	r3, #32
 800a472:	d0e8      	beq.n	800a446 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	3718      	adds	r7, #24
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a47e:	b480      	push	{r7}
 800a480:	b083      	sub	sp, #12
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
 800a486:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	695b      	ldr	r3, [r3, #20]
 800a48c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800a490:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800a494:	683a      	ldr	r2, [r7, #0]
 800a496:	0052      	lsls	r2, r2, #1
 800a498:	431a      	orrs	r2, r3
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b085      	sub	sp, #20
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a4ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a4be:	2b84      	cmp	r3, #132	; 0x84
 800a4c0:	d005      	beq.n	800a4ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a4c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	4413      	add	r3, r2
 800a4ca:	3303      	adds	r3, #3
 800a4cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3714      	adds	r7, #20
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a4e0:	f000 fb02 	bl	800aae8 <vTaskStartScheduler>
  
  return osOK;
 800a4e4:	2300      	movs	r3, #0
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a4ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4ec:	b089      	sub	sp, #36	; 0x24
 800a4ee:	af04      	add	r7, sp, #16
 800a4f0:	6078      	str	r0, [r7, #4]
 800a4f2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	695b      	ldr	r3, [r3, #20]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d020      	beq.n	800a53e <osThreadCreate+0x54>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	699b      	ldr	r3, [r3, #24]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d01c      	beq.n	800a53e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	685c      	ldr	r4, [r3, #4]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681d      	ldr	r5, [r3, #0]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	691e      	ldr	r6, [r3, #16]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a516:	4618      	mov	r0, r3
 800a518:	f7ff ffc8 	bl	800a4ac <makeFreeRtosPriority>
 800a51c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	695b      	ldr	r3, [r3, #20]
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a526:	9202      	str	r2, [sp, #8]
 800a528:	9301      	str	r3, [sp, #4]
 800a52a:	9100      	str	r1, [sp, #0]
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	4632      	mov	r2, r6
 800a530:	4629      	mov	r1, r5
 800a532:	4620      	mov	r0, r4
 800a534:	f000 f8ed 	bl	800a712 <xTaskCreateStatic>
 800a538:	4603      	mov	r3, r0
 800a53a:	60fb      	str	r3, [r7, #12]
 800a53c:	e01c      	b.n	800a578 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	685c      	ldr	r4, [r3, #4]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a54a:	b29e      	uxth	r6, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a552:	4618      	mov	r0, r3
 800a554:	f7ff ffaa 	bl	800a4ac <makeFreeRtosPriority>
 800a558:	4602      	mov	r2, r0
 800a55a:	f107 030c 	add.w	r3, r7, #12
 800a55e:	9301      	str	r3, [sp, #4]
 800a560:	9200      	str	r2, [sp, #0]
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	4632      	mov	r2, r6
 800a566:	4629      	mov	r1, r5
 800a568:	4620      	mov	r0, r4
 800a56a:	f000 f92f 	bl	800a7cc <xTaskCreate>
 800a56e:	4603      	mov	r3, r0
 800a570:	2b01      	cmp	r3, #1
 800a572:	d001      	beq.n	800a578 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a574:	2300      	movs	r3, #0
 800a576:	e000      	b.n	800a57a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a578:	68fb      	ldr	r3, [r7, #12]
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3714      	adds	r7, #20
 800a57e:	46bd      	mov	sp, r7
 800a580:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a582 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b084      	sub	sp, #16
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d001      	beq.n	800a598 <osDelay+0x16>
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	e000      	b.n	800a59a <osDelay+0x18>
 800a598:	2301      	movs	r3, #1
 800a59a:	4618      	mov	r0, r3
 800a59c:	f000 fa70 	bl	800aa80 <vTaskDelay>
  
  return osOK;
 800a5a0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3710      	adds	r7, #16
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a5aa:	b480      	push	{r7}
 800a5ac:	b083      	sub	sp, #12
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f103 0208 	add.w	r2, r3, #8
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f04f 32ff 	mov.w	r2, #4294967295
 800a5c2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f103 0208 	add.w	r2, r3, #8
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f103 0208 	add.w	r2, r3, #8
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a5de:	bf00      	nop
 800a5e0:	370c      	adds	r7, #12
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr

0800a5ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a5ea:	b480      	push	{r7}
 800a5ec:	b083      	sub	sp, #12
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a5f8:	bf00      	nop
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a604:	b480      	push	{r7}
 800a606:	b085      	sub	sp, #20
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	68fa      	ldr	r2, [r7, #12]
 800a618:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	689a      	ldr	r2, [r3, #8]
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	689b      	ldr	r3, [r3, #8]
 800a626:	683a      	ldr	r2, [r7, #0]
 800a628:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	683a      	ldr	r2, [r7, #0]
 800a62e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	1c5a      	adds	r2, r3, #1
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	601a      	str	r2, [r3, #0]
}
 800a640:	bf00      	nop
 800a642:	3714      	adds	r7, #20
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a64c:	b480      	push	{r7}
 800a64e:	b085      	sub	sp, #20
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a662:	d103      	bne.n	800a66c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	691b      	ldr	r3, [r3, #16]
 800a668:	60fb      	str	r3, [r7, #12]
 800a66a:	e00c      	b.n	800a686 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	3308      	adds	r3, #8
 800a670:	60fb      	str	r3, [r7, #12]
 800a672:	e002      	b.n	800a67a <vListInsert+0x2e>
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	60fb      	str	r3, [r7, #12]
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	68ba      	ldr	r2, [r7, #8]
 800a682:	429a      	cmp	r2, r3
 800a684:	d2f6      	bcs.n	800a674 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	685a      	ldr	r2, [r3, #4]
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	683a      	ldr	r2, [r7, #0]
 800a694:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	68fa      	ldr	r2, [r7, #12]
 800a69a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	683a      	ldr	r2, [r7, #0]
 800a6a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	1c5a      	adds	r2, r3, #1
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	601a      	str	r2, [r3, #0]
}
 800a6b2:	bf00      	nop
 800a6b4:	3714      	adds	r7, #20
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr

0800a6be <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a6be:	b480      	push	{r7}
 800a6c0:	b085      	sub	sp, #20
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	691b      	ldr	r3, [r3, #16]
 800a6ca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	6892      	ldr	r2, [r2, #8]
 800a6d4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	687a      	ldr	r2, [r7, #4]
 800a6dc:	6852      	ldr	r2, [r2, #4]
 800a6de:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d103      	bne.n	800a6f2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	689a      	ldr	r2, [r3, #8]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	1e5a      	subs	r2, r3, #1
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
}
 800a706:	4618      	mov	r0, r3
 800a708:	3714      	adds	r7, #20
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr

0800a712 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a712:	b580      	push	{r7, lr}
 800a714:	b08e      	sub	sp, #56	; 0x38
 800a716:	af04      	add	r7, sp, #16
 800a718:	60f8      	str	r0, [r7, #12]
 800a71a:	60b9      	str	r1, [r7, #8]
 800a71c:	607a      	str	r2, [r7, #4]
 800a71e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a722:	2b00      	cmp	r3, #0
 800a724:	d10a      	bne.n	800a73c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72a:	f383 8811 	msr	BASEPRI, r3
 800a72e:	f3bf 8f6f 	isb	sy
 800a732:	f3bf 8f4f 	dsb	sy
 800a736:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a738:	bf00      	nop
 800a73a:	e7fe      	b.n	800a73a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d10a      	bne.n	800a758 <xTaskCreateStatic+0x46>
	__asm volatile
 800a742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a746:	f383 8811 	msr	BASEPRI, r3
 800a74a:	f3bf 8f6f 	isb	sy
 800a74e:	f3bf 8f4f 	dsb	sy
 800a752:	61fb      	str	r3, [r7, #28]
}
 800a754:	bf00      	nop
 800a756:	e7fe      	b.n	800a756 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a758:	23b8      	movs	r3, #184	; 0xb8
 800a75a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	2bb8      	cmp	r3, #184	; 0xb8
 800a760:	d00a      	beq.n	800a778 <xTaskCreateStatic+0x66>
	__asm volatile
 800a762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a766:	f383 8811 	msr	BASEPRI, r3
 800a76a:	f3bf 8f6f 	isb	sy
 800a76e:	f3bf 8f4f 	dsb	sy
 800a772:	61bb      	str	r3, [r7, #24]
}
 800a774:	bf00      	nop
 800a776:	e7fe      	b.n	800a776 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a778:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d01e      	beq.n	800a7be <xTaskCreateStatic+0xac>
 800a780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a782:	2b00      	cmp	r3, #0
 800a784:	d01b      	beq.n	800a7be <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a788:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a78e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a792:	2202      	movs	r2, #2
 800a794:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a798:	2300      	movs	r3, #0
 800a79a:	9303      	str	r3, [sp, #12]
 800a79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79e:	9302      	str	r3, [sp, #8]
 800a7a0:	f107 0314 	add.w	r3, r7, #20
 800a7a4:	9301      	str	r3, [sp, #4]
 800a7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	68b9      	ldr	r1, [r7, #8]
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f000 f851 	bl	800a858 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a7b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a7b8:	f000 f8f8 	bl	800a9ac <prvAddNewTaskToReadyList>
 800a7bc:	e001      	b.n	800a7c2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a7c2:	697b      	ldr	r3, [r7, #20]
	}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3728      	adds	r7, #40	; 0x28
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b08c      	sub	sp, #48	; 0x30
 800a7d0:	af04      	add	r7, sp, #16
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	603b      	str	r3, [r7, #0]
 800a7d8:	4613      	mov	r3, r2
 800a7da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a7dc:	88fb      	ldrh	r3, [r7, #6]
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f000 ff29 	bl	800b638 <pvPortMalloc>
 800a7e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00e      	beq.n	800a80c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a7ee:	20b8      	movs	r0, #184	; 0xb8
 800a7f0:	f000 ff22 	bl	800b638 <pvPortMalloc>
 800a7f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d003      	beq.n	800a804 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	697a      	ldr	r2, [r7, #20]
 800a800:	631a      	str	r2, [r3, #48]	; 0x30
 800a802:	e005      	b.n	800a810 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a804:	6978      	ldr	r0, [r7, #20]
 800a806:	f000 ffe7 	bl	800b7d8 <vPortFree>
 800a80a:	e001      	b.n	800a810 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a80c:	2300      	movs	r3, #0
 800a80e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d017      	beq.n	800a846 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	2200      	movs	r2, #0
 800a81a:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a81e:	88fa      	ldrh	r2, [r7, #6]
 800a820:	2300      	movs	r3, #0
 800a822:	9303      	str	r3, [sp, #12]
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	9302      	str	r3, [sp, #8]
 800a828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82a:	9301      	str	r3, [sp, #4]
 800a82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82e:	9300      	str	r3, [sp, #0]
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	68b9      	ldr	r1, [r7, #8]
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	f000 f80f 	bl	800a858 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a83a:	69f8      	ldr	r0, [r7, #28]
 800a83c:	f000 f8b6 	bl	800a9ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a840:	2301      	movs	r3, #1
 800a842:	61bb      	str	r3, [r7, #24]
 800a844:	e002      	b.n	800a84c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a846:	f04f 33ff 	mov.w	r3, #4294967295
 800a84a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a84c:	69bb      	ldr	r3, [r7, #24]
	}
 800a84e:	4618      	mov	r0, r3
 800a850:	3720      	adds	r7, #32
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
	...

0800a858 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b088      	sub	sp, #32
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	607a      	str	r2, [r7, #4]
 800a864:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a868:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	461a      	mov	r2, r3
 800a870:	21a5      	movs	r1, #165	; 0xa5
 800a872:	f001 fa00 	bl	800bc76 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a880:	3b01      	subs	r3, #1
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	4413      	add	r3, r2
 800a886:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	f023 0307 	bic.w	r3, r3, #7
 800a88e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a890:	69bb      	ldr	r3, [r7, #24]
 800a892:	f003 0307 	and.w	r3, r3, #7
 800a896:	2b00      	cmp	r3, #0
 800a898:	d00a      	beq.n	800a8b0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89e:	f383 8811 	msr	BASEPRI, r3
 800a8a2:	f3bf 8f6f 	isb	sy
 800a8a6:	f3bf 8f4f 	dsb	sy
 800a8aa:	617b      	str	r3, [r7, #20]
}
 800a8ac:	bf00      	nop
 800a8ae:	e7fe      	b.n	800a8ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d01f      	beq.n	800a8f6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	61fb      	str	r3, [r7, #28]
 800a8ba:	e012      	b.n	800a8e2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a8bc:	68ba      	ldr	r2, [r7, #8]
 800a8be:	69fb      	ldr	r3, [r7, #28]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	7819      	ldrb	r1, [r3, #0]
 800a8c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8c6:	69fb      	ldr	r3, [r7, #28]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	3334      	adds	r3, #52	; 0x34
 800a8cc:	460a      	mov	r2, r1
 800a8ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a8d0:	68ba      	ldr	r2, [r7, #8]
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d006      	beq.n	800a8ea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8dc:	69fb      	ldr	r3, [r7, #28]
 800a8de:	3301      	adds	r3, #1
 800a8e0:	61fb      	str	r3, [r7, #28]
 800a8e2:	69fb      	ldr	r3, [r7, #28]
 800a8e4:	2b0f      	cmp	r3, #15
 800a8e6:	d9e9      	bls.n	800a8bc <prvInitialiseNewTask+0x64>
 800a8e8:	e000      	b.n	800a8ec <prvInitialiseNewTask+0x94>
			{
				break;
 800a8ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a8f4:	e003      	b.n	800a8fe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a900:	2b06      	cmp	r3, #6
 800a902:	d901      	bls.n	800a908 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a904:	2306      	movs	r3, #6
 800a906:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a90c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a912:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a916:	2200      	movs	r2, #0
 800a918:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91c:	3304      	adds	r3, #4
 800a91e:	4618      	mov	r0, r3
 800a920:	f7ff fe63 	bl	800a5ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a926:	3318      	adds	r3, #24
 800a928:	4618      	mov	r0, r3
 800a92a:	f7ff fe5e 	bl	800a5ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a932:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a936:	f1c3 0207 	rsb	r2, r3, #7
 800a93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a942:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800a944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a946:	2200      	movs	r2, #0
 800a948:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94c:	2200      	movs	r2, #0
 800a94e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a954:	2200      	movs	r2, #0
 800a956:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95c:	3350      	adds	r3, #80	; 0x50
 800a95e:	2260      	movs	r2, #96	; 0x60
 800a960:	2100      	movs	r1, #0
 800a962:	4618      	mov	r0, r3
 800a964:	f001 f987 	bl	800bc76 <memset>
 800a968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96a:	4a0d      	ldr	r2, [pc, #52]	; (800a9a0 <prvInitialiseNewTask+0x148>)
 800a96c:	655a      	str	r2, [r3, #84]	; 0x54
 800a96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a970:	4a0c      	ldr	r2, [pc, #48]	; (800a9a4 <prvInitialiseNewTask+0x14c>)
 800a972:	659a      	str	r2, [r3, #88]	; 0x58
 800a974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a976:	4a0c      	ldr	r2, [pc, #48]	; (800a9a8 <prvInitialiseNewTask+0x150>)
 800a978:	65da      	str	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a97a:	683a      	ldr	r2, [r7, #0]
 800a97c:	68f9      	ldr	r1, [r7, #12]
 800a97e:	69b8      	ldr	r0, [r7, #24]
 800a980:	f000 fc48 	bl	800b214 <pxPortInitialiseStack>
 800a984:	4602      	mov	r2, r0
 800a986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a988:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d002      	beq.n	800a996 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a996:	bf00      	nop
 800a998:	3720      	adds	r7, #32
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	08011fd0 	.word	0x08011fd0
 800a9a4:	08011ff0 	.word	0x08011ff0
 800a9a8:	08011fb0 	.word	0x08011fb0

0800a9ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a9b4:	f000 fd5e 	bl	800b474 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a9b8:	4b2a      	ldr	r3, [pc, #168]	; (800aa64 <prvAddNewTaskToReadyList+0xb8>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	3301      	adds	r3, #1
 800a9be:	4a29      	ldr	r2, [pc, #164]	; (800aa64 <prvAddNewTaskToReadyList+0xb8>)
 800a9c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a9c2:	4b29      	ldr	r3, [pc, #164]	; (800aa68 <prvAddNewTaskToReadyList+0xbc>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d109      	bne.n	800a9de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a9ca:	4a27      	ldr	r2, [pc, #156]	; (800aa68 <prvAddNewTaskToReadyList+0xbc>)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a9d0:	4b24      	ldr	r3, [pc, #144]	; (800aa64 <prvAddNewTaskToReadyList+0xb8>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d110      	bne.n	800a9fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a9d8:	f000 faf4 	bl	800afc4 <prvInitialiseTaskLists>
 800a9dc:	e00d      	b.n	800a9fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a9de:	4b23      	ldr	r3, [pc, #140]	; (800aa6c <prvAddNewTaskToReadyList+0xc0>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d109      	bne.n	800a9fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a9e6:	4b20      	ldr	r3, [pc, #128]	; (800aa68 <prvAddNewTaskToReadyList+0xbc>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d802      	bhi.n	800a9fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a9f4:	4a1c      	ldr	r2, [pc, #112]	; (800aa68 <prvAddNewTaskToReadyList+0xbc>)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a9fa:	4b1d      	ldr	r3, [pc, #116]	; (800aa70 <prvAddNewTaskToReadyList+0xc4>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	3301      	adds	r3, #1
 800aa00:	4a1b      	ldr	r2, [pc, #108]	; (800aa70 <prvAddNewTaskToReadyList+0xc4>)
 800aa02:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa08:	2201      	movs	r2, #1
 800aa0a:	409a      	lsls	r2, r3
 800aa0c:	4b19      	ldr	r3, [pc, #100]	; (800aa74 <prvAddNewTaskToReadyList+0xc8>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	4a18      	ldr	r2, [pc, #96]	; (800aa74 <prvAddNewTaskToReadyList+0xc8>)
 800aa14:	6013      	str	r3, [r2, #0]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	4413      	add	r3, r2
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	4a15      	ldr	r2, [pc, #84]	; (800aa78 <prvAddNewTaskToReadyList+0xcc>)
 800aa24:	441a      	add	r2, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	3304      	adds	r3, #4
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	4610      	mov	r0, r2
 800aa2e:	f7ff fde9 	bl	800a604 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aa32:	f000 fd4f 	bl	800b4d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aa36:	4b0d      	ldr	r3, [pc, #52]	; (800aa6c <prvAddNewTaskToReadyList+0xc0>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d00e      	beq.n	800aa5c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aa3e:	4b0a      	ldr	r3, [pc, #40]	; (800aa68 <prvAddNewTaskToReadyList+0xbc>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d207      	bcs.n	800aa5c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aa4c:	4b0b      	ldr	r3, [pc, #44]	; (800aa7c <prvAddNewTaskToReadyList+0xd0>)
 800aa4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa52:	601a      	str	r2, [r3, #0]
 800aa54:	f3bf 8f4f 	dsb	sy
 800aa58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa5c:	bf00      	nop
 800aa5e:	3708      	adds	r7, #8
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	20000c74 	.word	0x20000c74
 800aa68:	20000b74 	.word	0x20000b74
 800aa6c:	20000c80 	.word	0x20000c80
 800aa70:	20000c90 	.word	0x20000c90
 800aa74:	20000c7c 	.word	0x20000c7c
 800aa78:	20000b78 	.word	0x20000b78
 800aa7c:	e000ed04 	.word	0xe000ed04

0800aa80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d017      	beq.n	800aac2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aa92:	4b13      	ldr	r3, [pc, #76]	; (800aae0 <vTaskDelay+0x60>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d00a      	beq.n	800aab0 <vTaskDelay+0x30>
	__asm volatile
 800aa9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9e:	f383 8811 	msr	BASEPRI, r3
 800aaa2:	f3bf 8f6f 	isb	sy
 800aaa6:	f3bf 8f4f 	dsb	sy
 800aaaa:	60bb      	str	r3, [r7, #8]
}
 800aaac:	bf00      	nop
 800aaae:	e7fe      	b.n	800aaae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aab0:	f000 f884 	bl	800abbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aab4:	2100      	movs	r1, #0
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 fb46 	bl	800b148 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aabc:	f000 f88c 	bl	800abd8 <xTaskResumeAll>
 800aac0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d107      	bne.n	800aad8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800aac8:	4b06      	ldr	r3, [pc, #24]	; (800aae4 <vTaskDelay+0x64>)
 800aaca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aace:	601a      	str	r2, [r3, #0]
 800aad0:	f3bf 8f4f 	dsb	sy
 800aad4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aad8:	bf00      	nop
 800aada:	3710      	adds	r7, #16
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	20000c9c 	.word	0x20000c9c
 800aae4:	e000ed04 	.word	0xe000ed04

0800aae8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b08a      	sub	sp, #40	; 0x28
 800aaec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aaf6:	463a      	mov	r2, r7
 800aaf8:	1d39      	adds	r1, r7, #4
 800aafa:	f107 0308 	add.w	r3, r7, #8
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7f6 faa4 	bl	800104c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ab04:	6839      	ldr	r1, [r7, #0]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	68ba      	ldr	r2, [r7, #8]
 800ab0a:	9202      	str	r2, [sp, #8]
 800ab0c:	9301      	str	r3, [sp, #4]
 800ab0e:	2300      	movs	r3, #0
 800ab10:	9300      	str	r3, [sp, #0]
 800ab12:	2300      	movs	r3, #0
 800ab14:	460a      	mov	r2, r1
 800ab16:	4921      	ldr	r1, [pc, #132]	; (800ab9c <vTaskStartScheduler+0xb4>)
 800ab18:	4821      	ldr	r0, [pc, #132]	; (800aba0 <vTaskStartScheduler+0xb8>)
 800ab1a:	f7ff fdfa 	bl	800a712 <xTaskCreateStatic>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	4a20      	ldr	r2, [pc, #128]	; (800aba4 <vTaskStartScheduler+0xbc>)
 800ab22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ab24:	4b1f      	ldr	r3, [pc, #124]	; (800aba4 <vTaskStartScheduler+0xbc>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d002      	beq.n	800ab32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	617b      	str	r3, [r7, #20]
 800ab30:	e001      	b.n	800ab36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ab32:	2300      	movs	r3, #0
 800ab34:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d11b      	bne.n	800ab74 <vTaskStartScheduler+0x8c>
	__asm volatile
 800ab3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab40:	f383 8811 	msr	BASEPRI, r3
 800ab44:	f3bf 8f6f 	isb	sy
 800ab48:	f3bf 8f4f 	dsb	sy
 800ab4c:	613b      	str	r3, [r7, #16]
}
 800ab4e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ab50:	4b15      	ldr	r3, [pc, #84]	; (800aba8 <vTaskStartScheduler+0xc0>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	3350      	adds	r3, #80	; 0x50
 800ab56:	4a15      	ldr	r2, [pc, #84]	; (800abac <vTaskStartScheduler+0xc4>)
 800ab58:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ab5a:	4b15      	ldr	r3, [pc, #84]	; (800abb0 <vTaskStartScheduler+0xc8>)
 800ab5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ab62:	4b14      	ldr	r3, [pc, #80]	; (800abb4 <vTaskStartScheduler+0xcc>)
 800ab64:	2201      	movs	r2, #1
 800ab66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ab68:	4b13      	ldr	r3, [pc, #76]	; (800abb8 <vTaskStartScheduler+0xd0>)
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ab6e:	f000 fbdf 	bl	800b330 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ab72:	e00e      	b.n	800ab92 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab7a:	d10a      	bne.n	800ab92 <vTaskStartScheduler+0xaa>
	__asm volatile
 800ab7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab80:	f383 8811 	msr	BASEPRI, r3
 800ab84:	f3bf 8f6f 	isb	sy
 800ab88:	f3bf 8f4f 	dsb	sy
 800ab8c:	60fb      	str	r3, [r7, #12]
}
 800ab8e:	bf00      	nop
 800ab90:	e7fe      	b.n	800ab90 <vTaskStartScheduler+0xa8>
}
 800ab92:	bf00      	nop
 800ab94:	3718      	adds	r7, #24
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	080104d0 	.word	0x080104d0
 800aba0:	0800af91 	.word	0x0800af91
 800aba4:	20000c98 	.word	0x20000c98
 800aba8:	20000b74 	.word	0x20000b74
 800abac:	200000a8 	.word	0x200000a8
 800abb0:	20000c94 	.word	0x20000c94
 800abb4:	20000c80 	.word	0x20000c80
 800abb8:	20000c78 	.word	0x20000c78

0800abbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800abbc:	b480      	push	{r7}
 800abbe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800abc0:	4b04      	ldr	r3, [pc, #16]	; (800abd4 <vTaskSuspendAll+0x18>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	3301      	adds	r3, #1
 800abc6:	4a03      	ldr	r2, [pc, #12]	; (800abd4 <vTaskSuspendAll+0x18>)
 800abc8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800abca:	bf00      	nop
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr
 800abd4:	20000c9c 	.word	0x20000c9c

0800abd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800abde:	2300      	movs	r3, #0
 800abe0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800abe2:	2300      	movs	r3, #0
 800abe4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800abe6:	4b41      	ldr	r3, [pc, #260]	; (800acec <xTaskResumeAll+0x114>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d10a      	bne.n	800ac04 <xTaskResumeAll+0x2c>
	__asm volatile
 800abee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf2:	f383 8811 	msr	BASEPRI, r3
 800abf6:	f3bf 8f6f 	isb	sy
 800abfa:	f3bf 8f4f 	dsb	sy
 800abfe:	603b      	str	r3, [r7, #0]
}
 800ac00:	bf00      	nop
 800ac02:	e7fe      	b.n	800ac02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ac04:	f000 fc36 	bl	800b474 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ac08:	4b38      	ldr	r3, [pc, #224]	; (800acec <xTaskResumeAll+0x114>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	3b01      	subs	r3, #1
 800ac0e:	4a37      	ldr	r2, [pc, #220]	; (800acec <xTaskResumeAll+0x114>)
 800ac10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac12:	4b36      	ldr	r3, [pc, #216]	; (800acec <xTaskResumeAll+0x114>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d161      	bne.n	800acde <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ac1a:	4b35      	ldr	r3, [pc, #212]	; (800acf0 <xTaskResumeAll+0x118>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d05d      	beq.n	800acde <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac22:	e02e      	b.n	800ac82 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac24:	4b33      	ldr	r3, [pc, #204]	; (800acf4 <xTaskResumeAll+0x11c>)
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	3318      	adds	r3, #24
 800ac30:	4618      	mov	r0, r3
 800ac32:	f7ff fd44 	bl	800a6be <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	3304      	adds	r3, #4
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7ff fd3f 	bl	800a6be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac44:	2201      	movs	r2, #1
 800ac46:	409a      	lsls	r2, r3
 800ac48:	4b2b      	ldr	r3, [pc, #172]	; (800acf8 <xTaskResumeAll+0x120>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	4a2a      	ldr	r2, [pc, #168]	; (800acf8 <xTaskResumeAll+0x120>)
 800ac50:	6013      	str	r3, [r2, #0]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac56:	4613      	mov	r3, r2
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	4413      	add	r3, r2
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	4a27      	ldr	r2, [pc, #156]	; (800acfc <xTaskResumeAll+0x124>)
 800ac60:	441a      	add	r2, r3
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	3304      	adds	r3, #4
 800ac66:	4619      	mov	r1, r3
 800ac68:	4610      	mov	r0, r2
 800ac6a:	f7ff fccb 	bl	800a604 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac72:	4b23      	ldr	r3, [pc, #140]	; (800ad00 <xTaskResumeAll+0x128>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d302      	bcc.n	800ac82 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ac7c:	4b21      	ldr	r3, [pc, #132]	; (800ad04 <xTaskResumeAll+0x12c>)
 800ac7e:	2201      	movs	r2, #1
 800ac80:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac82:	4b1c      	ldr	r3, [pc, #112]	; (800acf4 <xTaskResumeAll+0x11c>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d1cc      	bne.n	800ac24 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d001      	beq.n	800ac94 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ac90:	f000 fa3a 	bl	800b108 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ac94:	4b1c      	ldr	r3, [pc, #112]	; (800ad08 <xTaskResumeAll+0x130>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d010      	beq.n	800acc2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aca0:	f000 f836 	bl	800ad10 <xTaskIncrementTick>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d002      	beq.n	800acb0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800acaa:	4b16      	ldr	r3, [pc, #88]	; (800ad04 <xTaskResumeAll+0x12c>)
 800acac:	2201      	movs	r2, #1
 800acae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	3b01      	subs	r3, #1
 800acb4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d1f1      	bne.n	800aca0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800acbc:	4b12      	ldr	r3, [pc, #72]	; (800ad08 <xTaskResumeAll+0x130>)
 800acbe:	2200      	movs	r2, #0
 800acc0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800acc2:	4b10      	ldr	r3, [pc, #64]	; (800ad04 <xTaskResumeAll+0x12c>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d009      	beq.n	800acde <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800acca:	2301      	movs	r3, #1
 800accc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800acce:	4b0f      	ldr	r3, [pc, #60]	; (800ad0c <xTaskResumeAll+0x134>)
 800acd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acd4:	601a      	str	r2, [r3, #0]
 800acd6:	f3bf 8f4f 	dsb	sy
 800acda:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800acde:	f000 fbf9 	bl	800b4d4 <vPortExitCritical>

	return xAlreadyYielded;
 800ace2:	68bb      	ldr	r3, [r7, #8]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3710      	adds	r7, #16
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}
 800acec:	20000c9c 	.word	0x20000c9c
 800acf0:	20000c74 	.word	0x20000c74
 800acf4:	20000c34 	.word	0x20000c34
 800acf8:	20000c7c 	.word	0x20000c7c
 800acfc:	20000b78 	.word	0x20000b78
 800ad00:	20000b74 	.word	0x20000b74
 800ad04:	20000c88 	.word	0x20000c88
 800ad08:	20000c84 	.word	0x20000c84
 800ad0c:	e000ed04 	.word	0xe000ed04

0800ad10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ad16:	2300      	movs	r3, #0
 800ad18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad1a:	4b4e      	ldr	r3, [pc, #312]	; (800ae54 <xTaskIncrementTick+0x144>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	f040 808e 	bne.w	800ae40 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ad24:	4b4c      	ldr	r3, [pc, #304]	; (800ae58 <xTaskIncrementTick+0x148>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	3301      	adds	r3, #1
 800ad2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ad2c:	4a4a      	ldr	r2, [pc, #296]	; (800ae58 <xTaskIncrementTick+0x148>)
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d120      	bne.n	800ad7a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ad38:	4b48      	ldr	r3, [pc, #288]	; (800ae5c <xTaskIncrementTick+0x14c>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d00a      	beq.n	800ad58 <xTaskIncrementTick+0x48>
	__asm volatile
 800ad42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad46:	f383 8811 	msr	BASEPRI, r3
 800ad4a:	f3bf 8f6f 	isb	sy
 800ad4e:	f3bf 8f4f 	dsb	sy
 800ad52:	603b      	str	r3, [r7, #0]
}
 800ad54:	bf00      	nop
 800ad56:	e7fe      	b.n	800ad56 <xTaskIncrementTick+0x46>
 800ad58:	4b40      	ldr	r3, [pc, #256]	; (800ae5c <xTaskIncrementTick+0x14c>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	60fb      	str	r3, [r7, #12]
 800ad5e:	4b40      	ldr	r3, [pc, #256]	; (800ae60 <xTaskIncrementTick+0x150>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a3e      	ldr	r2, [pc, #248]	; (800ae5c <xTaskIncrementTick+0x14c>)
 800ad64:	6013      	str	r3, [r2, #0]
 800ad66:	4a3e      	ldr	r2, [pc, #248]	; (800ae60 <xTaskIncrementTick+0x150>)
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6013      	str	r3, [r2, #0]
 800ad6c:	4b3d      	ldr	r3, [pc, #244]	; (800ae64 <xTaskIncrementTick+0x154>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	3301      	adds	r3, #1
 800ad72:	4a3c      	ldr	r2, [pc, #240]	; (800ae64 <xTaskIncrementTick+0x154>)
 800ad74:	6013      	str	r3, [r2, #0]
 800ad76:	f000 f9c7 	bl	800b108 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ad7a:	4b3b      	ldr	r3, [pc, #236]	; (800ae68 <xTaskIncrementTick+0x158>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	693a      	ldr	r2, [r7, #16]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d348      	bcc.n	800ae16 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad84:	4b35      	ldr	r3, [pc, #212]	; (800ae5c <xTaskIncrementTick+0x14c>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d104      	bne.n	800ad98 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad8e:	4b36      	ldr	r3, [pc, #216]	; (800ae68 <xTaskIncrementTick+0x158>)
 800ad90:	f04f 32ff 	mov.w	r2, #4294967295
 800ad94:	601a      	str	r2, [r3, #0]
					break;
 800ad96:	e03e      	b.n	800ae16 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad98:	4b30      	ldr	r3, [pc, #192]	; (800ae5c <xTaskIncrementTick+0x14c>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	68db      	ldr	r3, [r3, #12]
 800ada0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ada8:	693a      	ldr	r2, [r7, #16]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	429a      	cmp	r2, r3
 800adae:	d203      	bcs.n	800adb8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800adb0:	4a2d      	ldr	r2, [pc, #180]	; (800ae68 <xTaskIncrementTick+0x158>)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800adb6:	e02e      	b.n	800ae16 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	3304      	adds	r3, #4
 800adbc:	4618      	mov	r0, r3
 800adbe:	f7ff fc7e 	bl	800a6be <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d004      	beq.n	800add4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	3318      	adds	r3, #24
 800adce:	4618      	mov	r0, r3
 800add0:	f7ff fc75 	bl	800a6be <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add8:	2201      	movs	r2, #1
 800adda:	409a      	lsls	r2, r3
 800addc:	4b23      	ldr	r3, [pc, #140]	; (800ae6c <xTaskIncrementTick+0x15c>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	4a22      	ldr	r2, [pc, #136]	; (800ae6c <xTaskIncrementTick+0x15c>)
 800ade4:	6013      	str	r3, [r2, #0]
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adea:	4613      	mov	r3, r2
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	4413      	add	r3, r2
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	4a1f      	ldr	r2, [pc, #124]	; (800ae70 <xTaskIncrementTick+0x160>)
 800adf4:	441a      	add	r2, r3
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	3304      	adds	r3, #4
 800adfa:	4619      	mov	r1, r3
 800adfc:	4610      	mov	r0, r2
 800adfe:	f7ff fc01 	bl	800a604 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae06:	4b1b      	ldr	r3, [pc, #108]	; (800ae74 <xTaskIncrementTick+0x164>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d3b9      	bcc.n	800ad84 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ae10:	2301      	movs	r3, #1
 800ae12:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae14:	e7b6      	b.n	800ad84 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ae16:	4b17      	ldr	r3, [pc, #92]	; (800ae74 <xTaskIncrementTick+0x164>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae1c:	4914      	ldr	r1, [pc, #80]	; (800ae70 <xTaskIncrementTick+0x160>)
 800ae1e:	4613      	mov	r3, r2
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	4413      	add	r3, r2
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	440b      	add	r3, r1
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d901      	bls.n	800ae32 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ae32:	4b11      	ldr	r3, [pc, #68]	; (800ae78 <xTaskIncrementTick+0x168>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d007      	beq.n	800ae4a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	617b      	str	r3, [r7, #20]
 800ae3e:	e004      	b.n	800ae4a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ae40:	4b0e      	ldr	r3, [pc, #56]	; (800ae7c <xTaskIncrementTick+0x16c>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	3301      	adds	r3, #1
 800ae46:	4a0d      	ldr	r2, [pc, #52]	; (800ae7c <xTaskIncrementTick+0x16c>)
 800ae48:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ae4a:	697b      	ldr	r3, [r7, #20]
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3718      	adds	r7, #24
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}
 800ae54:	20000c9c 	.word	0x20000c9c
 800ae58:	20000c78 	.word	0x20000c78
 800ae5c:	20000c2c 	.word	0x20000c2c
 800ae60:	20000c30 	.word	0x20000c30
 800ae64:	20000c8c 	.word	0x20000c8c
 800ae68:	20000c94 	.word	0x20000c94
 800ae6c:	20000c7c 	.word	0x20000c7c
 800ae70:	20000b78 	.word	0x20000b78
 800ae74:	20000b74 	.word	0x20000b74
 800ae78:	20000c88 	.word	0x20000c88
 800ae7c:	20000c84 	.word	0x20000c84

0800ae80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b088      	sub	sp, #32
 800ae84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ae86:	4b3c      	ldr	r3, [pc, #240]	; (800af78 <vTaskSwitchContext+0xf8>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d003      	beq.n	800ae96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ae8e:	4b3b      	ldr	r3, [pc, #236]	; (800af7c <vTaskSwitchContext+0xfc>)
 800ae90:	2201      	movs	r2, #1
 800ae92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ae94:	e06b      	b.n	800af6e <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 800ae96:	4b39      	ldr	r3, [pc, #228]	; (800af7c <vTaskSwitchContext+0xfc>)
 800ae98:	2200      	movs	r2, #0
 800ae9a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800ae9c:	4b38      	ldr	r3, [pc, #224]	; (800af80 <vTaskSwitchContext+0x100>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aea2:	61fb      	str	r3, [r7, #28]
 800aea4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800aea8:	61bb      	str	r3, [r7, #24]
 800aeaa:	69fb      	ldr	r3, [r7, #28]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	69ba      	ldr	r2, [r7, #24]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d111      	bne.n	800aed8 <vTaskSwitchContext+0x58>
 800aeb4:	69fb      	ldr	r3, [r7, #28]
 800aeb6:	3304      	adds	r3, #4
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	69ba      	ldr	r2, [r7, #24]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d10b      	bne.n	800aed8 <vTaskSwitchContext+0x58>
 800aec0:	69fb      	ldr	r3, [r7, #28]
 800aec2:	3308      	adds	r3, #8
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	69ba      	ldr	r2, [r7, #24]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d105      	bne.n	800aed8 <vTaskSwitchContext+0x58>
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	330c      	adds	r3, #12
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	69ba      	ldr	r2, [r7, #24]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d008      	beq.n	800aeea <vTaskSwitchContext+0x6a>
 800aed8:	4b29      	ldr	r3, [pc, #164]	; (800af80 <vTaskSwitchContext+0x100>)
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	4b28      	ldr	r3, [pc, #160]	; (800af80 <vTaskSwitchContext+0x100>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	3334      	adds	r3, #52	; 0x34
 800aee2:	4619      	mov	r1, r3
 800aee4:	4610      	mov	r0, r2
 800aee6:	f7f6 f89e 	bl	8001026 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeea:	4b26      	ldr	r3, [pc, #152]	; (800af84 <vTaskSwitchContext+0x104>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	fab3 f383 	clz	r3, r3
 800aef6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800aef8:	7afb      	ldrb	r3, [r7, #11]
 800aefa:	f1c3 031f 	rsb	r3, r3, #31
 800aefe:	617b      	str	r3, [r7, #20]
 800af00:	4921      	ldr	r1, [pc, #132]	; (800af88 <vTaskSwitchContext+0x108>)
 800af02:	697a      	ldr	r2, [r7, #20]
 800af04:	4613      	mov	r3, r2
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	4413      	add	r3, r2
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	440b      	add	r3, r1
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d10a      	bne.n	800af2a <vTaskSwitchContext+0xaa>
	__asm volatile
 800af14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af18:	f383 8811 	msr	BASEPRI, r3
 800af1c:	f3bf 8f6f 	isb	sy
 800af20:	f3bf 8f4f 	dsb	sy
 800af24:	607b      	str	r3, [r7, #4]
}
 800af26:	bf00      	nop
 800af28:	e7fe      	b.n	800af28 <vTaskSwitchContext+0xa8>
 800af2a:	697a      	ldr	r2, [r7, #20]
 800af2c:	4613      	mov	r3, r2
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	4413      	add	r3, r2
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	4a14      	ldr	r2, [pc, #80]	; (800af88 <vTaskSwitchContext+0x108>)
 800af36:	4413      	add	r3, r2
 800af38:	613b      	str	r3, [r7, #16]
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	685a      	ldr	r2, [r3, #4]
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	605a      	str	r2, [r3, #4]
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	685a      	ldr	r2, [r3, #4]
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	3308      	adds	r3, #8
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d104      	bne.n	800af5a <vTaskSwitchContext+0xda>
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	685a      	ldr	r2, [r3, #4]
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	605a      	str	r2, [r3, #4]
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	4a07      	ldr	r2, [pc, #28]	; (800af80 <vTaskSwitchContext+0x100>)
 800af62:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800af64:	4b06      	ldr	r3, [pc, #24]	; (800af80 <vTaskSwitchContext+0x100>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	3350      	adds	r3, #80	; 0x50
 800af6a:	4a08      	ldr	r2, [pc, #32]	; (800af8c <vTaskSwitchContext+0x10c>)
 800af6c:	6013      	str	r3, [r2, #0]
}
 800af6e:	bf00      	nop
 800af70:	3720      	adds	r7, #32
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	20000c9c 	.word	0x20000c9c
 800af7c:	20000c88 	.word	0x20000c88
 800af80:	20000b74 	.word	0x20000b74
 800af84:	20000c7c 	.word	0x20000c7c
 800af88:	20000b78 	.word	0x20000b78
 800af8c:	200000a8 	.word	0x200000a8

0800af90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800af98:	f000 f854 	bl	800b044 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af9c:	4b07      	ldr	r3, [pc, #28]	; (800afbc <prvIdleTask+0x2c>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d907      	bls.n	800afb4 <prvIdleTask+0x24>
			{
				taskYIELD();
 800afa4:	4b06      	ldr	r3, [pc, #24]	; (800afc0 <prvIdleTask+0x30>)
 800afa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afaa:	601a      	str	r2, [r3, #0]
 800afac:	f3bf 8f4f 	dsb	sy
 800afb0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800afb4:	f7f6 f830 	bl	8001018 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800afb8:	e7ee      	b.n	800af98 <prvIdleTask+0x8>
 800afba:	bf00      	nop
 800afbc:	20000b78 	.word	0x20000b78
 800afc0:	e000ed04 	.word	0xe000ed04

0800afc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afca:	2300      	movs	r3, #0
 800afcc:	607b      	str	r3, [r7, #4]
 800afce:	e00c      	b.n	800afea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	4613      	mov	r3, r2
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	4413      	add	r3, r2
 800afd8:	009b      	lsls	r3, r3, #2
 800afda:	4a12      	ldr	r2, [pc, #72]	; (800b024 <prvInitialiseTaskLists+0x60>)
 800afdc:	4413      	add	r3, r2
 800afde:	4618      	mov	r0, r3
 800afe0:	f7ff fae3 	bl	800a5aa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	3301      	adds	r3, #1
 800afe8:	607b      	str	r3, [r7, #4]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2b06      	cmp	r3, #6
 800afee:	d9ef      	bls.n	800afd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aff0:	480d      	ldr	r0, [pc, #52]	; (800b028 <prvInitialiseTaskLists+0x64>)
 800aff2:	f7ff fada 	bl	800a5aa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aff6:	480d      	ldr	r0, [pc, #52]	; (800b02c <prvInitialiseTaskLists+0x68>)
 800aff8:	f7ff fad7 	bl	800a5aa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800affc:	480c      	ldr	r0, [pc, #48]	; (800b030 <prvInitialiseTaskLists+0x6c>)
 800affe:	f7ff fad4 	bl	800a5aa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b002:	480c      	ldr	r0, [pc, #48]	; (800b034 <prvInitialiseTaskLists+0x70>)
 800b004:	f7ff fad1 	bl	800a5aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b008:	480b      	ldr	r0, [pc, #44]	; (800b038 <prvInitialiseTaskLists+0x74>)
 800b00a:	f7ff face 	bl	800a5aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b00e:	4b0b      	ldr	r3, [pc, #44]	; (800b03c <prvInitialiseTaskLists+0x78>)
 800b010:	4a05      	ldr	r2, [pc, #20]	; (800b028 <prvInitialiseTaskLists+0x64>)
 800b012:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b014:	4b0a      	ldr	r3, [pc, #40]	; (800b040 <prvInitialiseTaskLists+0x7c>)
 800b016:	4a05      	ldr	r2, [pc, #20]	; (800b02c <prvInitialiseTaskLists+0x68>)
 800b018:	601a      	str	r2, [r3, #0]
}
 800b01a:	bf00      	nop
 800b01c:	3708      	adds	r7, #8
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop
 800b024:	20000b78 	.word	0x20000b78
 800b028:	20000c04 	.word	0x20000c04
 800b02c:	20000c18 	.word	0x20000c18
 800b030:	20000c34 	.word	0x20000c34
 800b034:	20000c48 	.word	0x20000c48
 800b038:	20000c60 	.word	0x20000c60
 800b03c:	20000c2c 	.word	0x20000c2c
 800b040:	20000c30 	.word	0x20000c30

0800b044 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b04a:	e019      	b.n	800b080 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b04c:	f000 fa12 	bl	800b474 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b050:	4b10      	ldr	r3, [pc, #64]	; (800b094 <prvCheckTasksWaitingTermination+0x50>)
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	68db      	ldr	r3, [r3, #12]
 800b056:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	3304      	adds	r3, #4
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7ff fb2e 	bl	800a6be <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b062:	4b0d      	ldr	r3, [pc, #52]	; (800b098 <prvCheckTasksWaitingTermination+0x54>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	3b01      	subs	r3, #1
 800b068:	4a0b      	ldr	r2, [pc, #44]	; (800b098 <prvCheckTasksWaitingTermination+0x54>)
 800b06a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b06c:	4b0b      	ldr	r3, [pc, #44]	; (800b09c <prvCheckTasksWaitingTermination+0x58>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	3b01      	subs	r3, #1
 800b072:	4a0a      	ldr	r2, [pc, #40]	; (800b09c <prvCheckTasksWaitingTermination+0x58>)
 800b074:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b076:	f000 fa2d 	bl	800b4d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 f810 	bl	800b0a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b080:	4b06      	ldr	r3, [pc, #24]	; (800b09c <prvCheckTasksWaitingTermination+0x58>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d1e1      	bne.n	800b04c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b088:	bf00      	nop
 800b08a:	bf00      	nop
 800b08c:	3708      	adds	r7, #8
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	20000c48 	.word	0x20000c48
 800b098:	20000c74 	.word	0x20000c74
 800b09c:	20000c5c 	.word	0x20000c5c

0800b0a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	3350      	adds	r3, #80	; 0x50
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f001 fd07 	bl	800cac0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d108      	bne.n	800b0ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f000 fb89 	bl	800b7d8 <vPortFree>
				vPortFree( pxTCB );
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 fb86 	bl	800b7d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b0cc:	e018      	b.n	800b100 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	d103      	bne.n	800b0e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 fb7d 	bl	800b7d8 <vPortFree>
	}
 800b0de:	e00f      	b.n	800b100 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800b0e6:	2b02      	cmp	r3, #2
 800b0e8:	d00a      	beq.n	800b100 <prvDeleteTCB+0x60>
	__asm volatile
 800b0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ee:	f383 8811 	msr	BASEPRI, r3
 800b0f2:	f3bf 8f6f 	isb	sy
 800b0f6:	f3bf 8f4f 	dsb	sy
 800b0fa:	60fb      	str	r3, [r7, #12]
}
 800b0fc:	bf00      	nop
 800b0fe:	e7fe      	b.n	800b0fe <prvDeleteTCB+0x5e>
	}
 800b100:	bf00      	nop
 800b102:	3710      	adds	r7, #16
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b10e:	4b0c      	ldr	r3, [pc, #48]	; (800b140 <prvResetNextTaskUnblockTime+0x38>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d104      	bne.n	800b122 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b118:	4b0a      	ldr	r3, [pc, #40]	; (800b144 <prvResetNextTaskUnblockTime+0x3c>)
 800b11a:	f04f 32ff 	mov.w	r2, #4294967295
 800b11e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b120:	e008      	b.n	800b134 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b122:	4b07      	ldr	r3, [pc, #28]	; (800b140 <prvResetNextTaskUnblockTime+0x38>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	68db      	ldr	r3, [r3, #12]
 800b128:	68db      	ldr	r3, [r3, #12]
 800b12a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	4a04      	ldr	r2, [pc, #16]	; (800b144 <prvResetNextTaskUnblockTime+0x3c>)
 800b132:	6013      	str	r3, [r2, #0]
}
 800b134:	bf00      	nop
 800b136:	370c      	adds	r7, #12
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr
 800b140:	20000c2c 	.word	0x20000c2c
 800b144:	20000c94 	.word	0x20000c94

0800b148 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b152:	4b29      	ldr	r3, [pc, #164]	; (800b1f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b158:	4b28      	ldr	r3, [pc, #160]	; (800b1fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	3304      	adds	r3, #4
 800b15e:	4618      	mov	r0, r3
 800b160:	f7ff faad 	bl	800a6be <uxListRemove>
 800b164:	4603      	mov	r3, r0
 800b166:	2b00      	cmp	r3, #0
 800b168:	d10b      	bne.n	800b182 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b16a:	4b24      	ldr	r3, [pc, #144]	; (800b1fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b170:	2201      	movs	r2, #1
 800b172:	fa02 f303 	lsl.w	r3, r2, r3
 800b176:	43da      	mvns	r2, r3
 800b178:	4b21      	ldr	r3, [pc, #132]	; (800b200 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4013      	ands	r3, r2
 800b17e:	4a20      	ldr	r2, [pc, #128]	; (800b200 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b180:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b188:	d10a      	bne.n	800b1a0 <prvAddCurrentTaskToDelayedList+0x58>
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d007      	beq.n	800b1a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b190:	4b1a      	ldr	r3, [pc, #104]	; (800b1fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	3304      	adds	r3, #4
 800b196:	4619      	mov	r1, r3
 800b198:	481a      	ldr	r0, [pc, #104]	; (800b204 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b19a:	f7ff fa33 	bl	800a604 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b19e:	e026      	b.n	800b1ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b1a0:	68fa      	ldr	r2, [r7, #12]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b1a8:	4b14      	ldr	r3, [pc, #80]	; (800b1fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	68ba      	ldr	r2, [r7, #8]
 800b1ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b1b0:	68ba      	ldr	r2, [r7, #8]
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d209      	bcs.n	800b1cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1b8:	4b13      	ldr	r3, [pc, #76]	; (800b208 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	4b0f      	ldr	r3, [pc, #60]	; (800b1fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	3304      	adds	r3, #4
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	4610      	mov	r0, r2
 800b1c6:	f7ff fa41 	bl	800a64c <vListInsert>
}
 800b1ca:	e010      	b.n	800b1ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1cc:	4b0f      	ldr	r3, [pc, #60]	; (800b20c <prvAddCurrentTaskToDelayedList+0xc4>)
 800b1ce:	681a      	ldr	r2, [r3, #0]
 800b1d0:	4b0a      	ldr	r3, [pc, #40]	; (800b1fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	3304      	adds	r3, #4
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	4610      	mov	r0, r2
 800b1da:	f7ff fa37 	bl	800a64c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b1de:	4b0c      	ldr	r3, [pc, #48]	; (800b210 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	68ba      	ldr	r2, [r7, #8]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d202      	bcs.n	800b1ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b1e8:	4a09      	ldr	r2, [pc, #36]	; (800b210 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	6013      	str	r3, [r2, #0]
}
 800b1ee:	bf00      	nop
 800b1f0:	3710      	adds	r7, #16
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	20000c78 	.word	0x20000c78
 800b1fc:	20000b74 	.word	0x20000b74
 800b200:	20000c7c 	.word	0x20000c7c
 800b204:	20000c60 	.word	0x20000c60
 800b208:	20000c30 	.word	0x20000c30
 800b20c:	20000c2c 	.word	0x20000c2c
 800b210:	20000c94 	.word	0x20000c94

0800b214 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b214:	b480      	push	{r7}
 800b216:	b085      	sub	sp, #20
 800b218:	af00      	add	r7, sp, #0
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	3b04      	subs	r3, #4
 800b224:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b22c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	3b04      	subs	r3, #4
 800b232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	f023 0201 	bic.w	r2, r3, #1
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	3b04      	subs	r3, #4
 800b242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b244:	4a0c      	ldr	r2, [pc, #48]	; (800b278 <pxPortInitialiseStack+0x64>)
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	3b14      	subs	r3, #20
 800b24e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	3b04      	subs	r3, #4
 800b25a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f06f 0202 	mvn.w	r2, #2
 800b262:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	3b20      	subs	r3, #32
 800b268:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b26a:	68fb      	ldr	r3, [r7, #12]
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3714      	adds	r7, #20
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr
 800b278:	0800b27d 	.word	0x0800b27d

0800b27c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b27c:	b480      	push	{r7}
 800b27e:	b085      	sub	sp, #20
 800b280:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b282:	2300      	movs	r3, #0
 800b284:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b286:	4b12      	ldr	r3, [pc, #72]	; (800b2d0 <prvTaskExitError+0x54>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b28e:	d00a      	beq.n	800b2a6 <prvTaskExitError+0x2a>
	__asm volatile
 800b290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b294:	f383 8811 	msr	BASEPRI, r3
 800b298:	f3bf 8f6f 	isb	sy
 800b29c:	f3bf 8f4f 	dsb	sy
 800b2a0:	60fb      	str	r3, [r7, #12]
}
 800b2a2:	bf00      	nop
 800b2a4:	e7fe      	b.n	800b2a4 <prvTaskExitError+0x28>
	__asm volatile
 800b2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2aa:	f383 8811 	msr	BASEPRI, r3
 800b2ae:	f3bf 8f6f 	isb	sy
 800b2b2:	f3bf 8f4f 	dsb	sy
 800b2b6:	60bb      	str	r3, [r7, #8]
}
 800b2b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b2ba:	bf00      	nop
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d0fc      	beq.n	800b2bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b2c2:	bf00      	nop
 800b2c4:	bf00      	nop
 800b2c6:	3714      	adds	r7, #20
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr
 800b2d0:	200000a4 	.word	0x200000a4
	...

0800b2e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b2e0:	4b07      	ldr	r3, [pc, #28]	; (800b300 <pxCurrentTCBConst2>)
 800b2e2:	6819      	ldr	r1, [r3, #0]
 800b2e4:	6808      	ldr	r0, [r1, #0]
 800b2e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ea:	f380 8809 	msr	PSP, r0
 800b2ee:	f3bf 8f6f 	isb	sy
 800b2f2:	f04f 0000 	mov.w	r0, #0
 800b2f6:	f380 8811 	msr	BASEPRI, r0
 800b2fa:	4770      	bx	lr
 800b2fc:	f3af 8000 	nop.w

0800b300 <pxCurrentTCBConst2>:
 800b300:	20000b74 	.word	0x20000b74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b304:	bf00      	nop
 800b306:	bf00      	nop

0800b308 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b308:	4808      	ldr	r0, [pc, #32]	; (800b32c <prvPortStartFirstTask+0x24>)
 800b30a:	6800      	ldr	r0, [r0, #0]
 800b30c:	6800      	ldr	r0, [r0, #0]
 800b30e:	f380 8808 	msr	MSP, r0
 800b312:	f04f 0000 	mov.w	r0, #0
 800b316:	f380 8814 	msr	CONTROL, r0
 800b31a:	b662      	cpsie	i
 800b31c:	b661      	cpsie	f
 800b31e:	f3bf 8f4f 	dsb	sy
 800b322:	f3bf 8f6f 	isb	sy
 800b326:	df00      	svc	0
 800b328:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b32a:	bf00      	nop
 800b32c:	e000ed08 	.word	0xe000ed08

0800b330 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b086      	sub	sp, #24
 800b334:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b336:	4b46      	ldr	r3, [pc, #280]	; (800b450 <xPortStartScheduler+0x120>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4a46      	ldr	r2, [pc, #280]	; (800b454 <xPortStartScheduler+0x124>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d10a      	bne.n	800b356 <xPortStartScheduler+0x26>
	__asm volatile
 800b340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b344:	f383 8811 	msr	BASEPRI, r3
 800b348:	f3bf 8f6f 	isb	sy
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	613b      	str	r3, [r7, #16]
}
 800b352:	bf00      	nop
 800b354:	e7fe      	b.n	800b354 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b356:	4b3e      	ldr	r3, [pc, #248]	; (800b450 <xPortStartScheduler+0x120>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a3f      	ldr	r2, [pc, #252]	; (800b458 <xPortStartScheduler+0x128>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d10a      	bne.n	800b376 <xPortStartScheduler+0x46>
	__asm volatile
 800b360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b364:	f383 8811 	msr	BASEPRI, r3
 800b368:	f3bf 8f6f 	isb	sy
 800b36c:	f3bf 8f4f 	dsb	sy
 800b370:	60fb      	str	r3, [r7, #12]
}
 800b372:	bf00      	nop
 800b374:	e7fe      	b.n	800b374 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b376:	4b39      	ldr	r3, [pc, #228]	; (800b45c <xPortStartScheduler+0x12c>)
 800b378:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	22ff      	movs	r2, #255	; 0xff
 800b386:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	781b      	ldrb	r3, [r3, #0]
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b390:	78fb      	ldrb	r3, [r7, #3]
 800b392:	b2db      	uxtb	r3, r3
 800b394:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b398:	b2da      	uxtb	r2, r3
 800b39a:	4b31      	ldr	r3, [pc, #196]	; (800b460 <xPortStartScheduler+0x130>)
 800b39c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b39e:	4b31      	ldr	r3, [pc, #196]	; (800b464 <xPortStartScheduler+0x134>)
 800b3a0:	2207      	movs	r2, #7
 800b3a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b3a4:	e009      	b.n	800b3ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b3a6:	4b2f      	ldr	r3, [pc, #188]	; (800b464 <xPortStartScheduler+0x134>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	3b01      	subs	r3, #1
 800b3ac:	4a2d      	ldr	r2, [pc, #180]	; (800b464 <xPortStartScheduler+0x134>)
 800b3ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b3b0:	78fb      	ldrb	r3, [r7, #3]
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	005b      	lsls	r3, r3, #1
 800b3b6:	b2db      	uxtb	r3, r3
 800b3b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b3ba:	78fb      	ldrb	r3, [r7, #3]
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3c2:	2b80      	cmp	r3, #128	; 0x80
 800b3c4:	d0ef      	beq.n	800b3a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b3c6:	4b27      	ldr	r3, [pc, #156]	; (800b464 <xPortStartScheduler+0x134>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f1c3 0307 	rsb	r3, r3, #7
 800b3ce:	2b04      	cmp	r3, #4
 800b3d0:	d00a      	beq.n	800b3e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d6:	f383 8811 	msr	BASEPRI, r3
 800b3da:	f3bf 8f6f 	isb	sy
 800b3de:	f3bf 8f4f 	dsb	sy
 800b3e2:	60bb      	str	r3, [r7, #8]
}
 800b3e4:	bf00      	nop
 800b3e6:	e7fe      	b.n	800b3e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b3e8:	4b1e      	ldr	r3, [pc, #120]	; (800b464 <xPortStartScheduler+0x134>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	021b      	lsls	r3, r3, #8
 800b3ee:	4a1d      	ldr	r2, [pc, #116]	; (800b464 <xPortStartScheduler+0x134>)
 800b3f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b3f2:	4b1c      	ldr	r3, [pc, #112]	; (800b464 <xPortStartScheduler+0x134>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b3fa:	4a1a      	ldr	r2, [pc, #104]	; (800b464 <xPortStartScheduler+0x134>)
 800b3fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	b2da      	uxtb	r2, r3
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b406:	4b18      	ldr	r3, [pc, #96]	; (800b468 <xPortStartScheduler+0x138>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4a17      	ldr	r2, [pc, #92]	; (800b468 <xPortStartScheduler+0x138>)
 800b40c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b410:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b412:	4b15      	ldr	r3, [pc, #84]	; (800b468 <xPortStartScheduler+0x138>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a14      	ldr	r2, [pc, #80]	; (800b468 <xPortStartScheduler+0x138>)
 800b418:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b41c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b41e:	f000 f8dd 	bl	800b5dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b422:	4b12      	ldr	r3, [pc, #72]	; (800b46c <xPortStartScheduler+0x13c>)
 800b424:	2200      	movs	r2, #0
 800b426:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b428:	f000 f8fc 	bl	800b624 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b42c:	4b10      	ldr	r3, [pc, #64]	; (800b470 <xPortStartScheduler+0x140>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a0f      	ldr	r2, [pc, #60]	; (800b470 <xPortStartScheduler+0x140>)
 800b432:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b436:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b438:	f7ff ff66 	bl	800b308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b43c:	f7ff fd20 	bl	800ae80 <vTaskSwitchContext>
	prvTaskExitError();
 800b440:	f7ff ff1c 	bl	800b27c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b444:	2300      	movs	r3, #0
}
 800b446:	4618      	mov	r0, r3
 800b448:	3718      	adds	r7, #24
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	e000ed00 	.word	0xe000ed00
 800b454:	410fc271 	.word	0x410fc271
 800b458:	410fc270 	.word	0x410fc270
 800b45c:	e000e400 	.word	0xe000e400
 800b460:	20000ca0 	.word	0x20000ca0
 800b464:	20000ca4 	.word	0x20000ca4
 800b468:	e000ed20 	.word	0xe000ed20
 800b46c:	200000a4 	.word	0x200000a4
 800b470:	e000ef34 	.word	0xe000ef34

0800b474 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b474:	b480      	push	{r7}
 800b476:	b083      	sub	sp, #12
 800b478:	af00      	add	r7, sp, #0
	__asm volatile
 800b47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47e:	f383 8811 	msr	BASEPRI, r3
 800b482:	f3bf 8f6f 	isb	sy
 800b486:	f3bf 8f4f 	dsb	sy
 800b48a:	607b      	str	r3, [r7, #4]
}
 800b48c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b48e:	4b0f      	ldr	r3, [pc, #60]	; (800b4cc <vPortEnterCritical+0x58>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	3301      	adds	r3, #1
 800b494:	4a0d      	ldr	r2, [pc, #52]	; (800b4cc <vPortEnterCritical+0x58>)
 800b496:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b498:	4b0c      	ldr	r3, [pc, #48]	; (800b4cc <vPortEnterCritical+0x58>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d10f      	bne.n	800b4c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b4a0:	4b0b      	ldr	r3, [pc, #44]	; (800b4d0 <vPortEnterCritical+0x5c>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	b2db      	uxtb	r3, r3
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d00a      	beq.n	800b4c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ae:	f383 8811 	msr	BASEPRI, r3
 800b4b2:	f3bf 8f6f 	isb	sy
 800b4b6:	f3bf 8f4f 	dsb	sy
 800b4ba:	603b      	str	r3, [r7, #0]
}
 800b4bc:	bf00      	nop
 800b4be:	e7fe      	b.n	800b4be <vPortEnterCritical+0x4a>
	}
}
 800b4c0:	bf00      	nop
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr
 800b4cc:	200000a4 	.word	0x200000a4
 800b4d0:	e000ed04 	.word	0xe000ed04

0800b4d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b083      	sub	sp, #12
 800b4d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b4da:	4b12      	ldr	r3, [pc, #72]	; (800b524 <vPortExitCritical+0x50>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d10a      	bne.n	800b4f8 <vPortExitCritical+0x24>
	__asm volatile
 800b4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e6:	f383 8811 	msr	BASEPRI, r3
 800b4ea:	f3bf 8f6f 	isb	sy
 800b4ee:	f3bf 8f4f 	dsb	sy
 800b4f2:	607b      	str	r3, [r7, #4]
}
 800b4f4:	bf00      	nop
 800b4f6:	e7fe      	b.n	800b4f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b4f8:	4b0a      	ldr	r3, [pc, #40]	; (800b524 <vPortExitCritical+0x50>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	3b01      	subs	r3, #1
 800b4fe:	4a09      	ldr	r2, [pc, #36]	; (800b524 <vPortExitCritical+0x50>)
 800b500:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b502:	4b08      	ldr	r3, [pc, #32]	; (800b524 <vPortExitCritical+0x50>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d105      	bne.n	800b516 <vPortExitCritical+0x42>
 800b50a:	2300      	movs	r3, #0
 800b50c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b514:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b516:	bf00      	nop
 800b518:	370c      	adds	r7, #12
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop
 800b524:	200000a4 	.word	0x200000a4
	...

0800b530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b530:	f3ef 8009 	mrs	r0, PSP
 800b534:	f3bf 8f6f 	isb	sy
 800b538:	4b15      	ldr	r3, [pc, #84]	; (800b590 <pxCurrentTCBConst>)
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	f01e 0f10 	tst.w	lr, #16
 800b540:	bf08      	it	eq
 800b542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b54a:	6010      	str	r0, [r2, #0]
 800b54c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b550:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b554:	f380 8811 	msr	BASEPRI, r0
 800b558:	f3bf 8f4f 	dsb	sy
 800b55c:	f3bf 8f6f 	isb	sy
 800b560:	f7ff fc8e 	bl	800ae80 <vTaskSwitchContext>
 800b564:	f04f 0000 	mov.w	r0, #0
 800b568:	f380 8811 	msr	BASEPRI, r0
 800b56c:	bc09      	pop	{r0, r3}
 800b56e:	6819      	ldr	r1, [r3, #0]
 800b570:	6808      	ldr	r0, [r1, #0]
 800b572:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b576:	f01e 0f10 	tst.w	lr, #16
 800b57a:	bf08      	it	eq
 800b57c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b580:	f380 8809 	msr	PSP, r0
 800b584:	f3bf 8f6f 	isb	sy
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	f3af 8000 	nop.w

0800b590 <pxCurrentTCBConst>:
 800b590:	20000b74 	.word	0x20000b74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b594:	bf00      	nop
 800b596:	bf00      	nop

0800b598 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b082      	sub	sp, #8
 800b59c:	af00      	add	r7, sp, #0
	__asm volatile
 800b59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a2:	f383 8811 	msr	BASEPRI, r3
 800b5a6:	f3bf 8f6f 	isb	sy
 800b5aa:	f3bf 8f4f 	dsb	sy
 800b5ae:	607b      	str	r3, [r7, #4]
}
 800b5b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b5b2:	f7ff fbad 	bl	800ad10 <xTaskIncrementTick>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d003      	beq.n	800b5c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b5bc:	4b06      	ldr	r3, [pc, #24]	; (800b5d8 <SysTick_Handler+0x40>)
 800b5be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5c2:	601a      	str	r2, [r3, #0]
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	f383 8811 	msr	BASEPRI, r3
}
 800b5ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b5d0:	bf00      	nop
 800b5d2:	3708      	adds	r7, #8
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	e000ed04 	.word	0xe000ed04

0800b5dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b5dc:	b480      	push	{r7}
 800b5de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b5e0:	4b0b      	ldr	r3, [pc, #44]	; (800b610 <vPortSetupTimerInterrupt+0x34>)
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b5e6:	4b0b      	ldr	r3, [pc, #44]	; (800b614 <vPortSetupTimerInterrupt+0x38>)
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b5ec:	4b0a      	ldr	r3, [pc, #40]	; (800b618 <vPortSetupTimerInterrupt+0x3c>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a0a      	ldr	r2, [pc, #40]	; (800b61c <vPortSetupTimerInterrupt+0x40>)
 800b5f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b5f6:	099b      	lsrs	r3, r3, #6
 800b5f8:	4a09      	ldr	r2, [pc, #36]	; (800b620 <vPortSetupTimerInterrupt+0x44>)
 800b5fa:	3b01      	subs	r3, #1
 800b5fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b5fe:	4b04      	ldr	r3, [pc, #16]	; (800b610 <vPortSetupTimerInterrupt+0x34>)
 800b600:	2207      	movs	r2, #7
 800b602:	601a      	str	r2, [r3, #0]
}
 800b604:	bf00      	nop
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	e000e010 	.word	0xe000e010
 800b614:	e000e018 	.word	0xe000e018
 800b618:	20000020 	.word	0x20000020
 800b61c:	10624dd3 	.word	0x10624dd3
 800b620:	e000e014 	.word	0xe000e014

0800b624 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b624:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b634 <vPortEnableVFP+0x10>
 800b628:	6801      	ldr	r1, [r0, #0]
 800b62a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b62e:	6001      	str	r1, [r0, #0]
 800b630:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b632:	bf00      	nop
 800b634:	e000ed88 	.word	0xe000ed88

0800b638 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b08a      	sub	sp, #40	; 0x28
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b640:	2300      	movs	r3, #0
 800b642:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b644:	f7ff faba 	bl	800abbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b648:	4b5d      	ldr	r3, [pc, #372]	; (800b7c0 <pvPortMalloc+0x188>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d101      	bne.n	800b654 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b650:	f000 f924 	bl	800b89c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b654:	4b5b      	ldr	r3, [pc, #364]	; (800b7c4 <pvPortMalloc+0x18c>)
 800b656:	681a      	ldr	r2, [r3, #0]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	4013      	ands	r3, r2
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	f040 8093 	bne.w	800b788 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d01d      	beq.n	800b6a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b668:	2208      	movs	r2, #8
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	4413      	add	r3, r2
 800b66e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f003 0307 	and.w	r3, r3, #7
 800b676:	2b00      	cmp	r3, #0
 800b678:	d014      	beq.n	800b6a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f023 0307 	bic.w	r3, r3, #7
 800b680:	3308      	adds	r3, #8
 800b682:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f003 0307 	and.w	r3, r3, #7
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d00a      	beq.n	800b6a4 <pvPortMalloc+0x6c>
	__asm volatile
 800b68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b692:	f383 8811 	msr	BASEPRI, r3
 800b696:	f3bf 8f6f 	isb	sy
 800b69a:	f3bf 8f4f 	dsb	sy
 800b69e:	617b      	str	r3, [r7, #20]
}
 800b6a0:	bf00      	nop
 800b6a2:	e7fe      	b.n	800b6a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d06e      	beq.n	800b788 <pvPortMalloc+0x150>
 800b6aa:	4b47      	ldr	r3, [pc, #284]	; (800b7c8 <pvPortMalloc+0x190>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d869      	bhi.n	800b788 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b6b4:	4b45      	ldr	r3, [pc, #276]	; (800b7cc <pvPortMalloc+0x194>)
 800b6b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b6b8:	4b44      	ldr	r3, [pc, #272]	; (800b7cc <pvPortMalloc+0x194>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b6be:	e004      	b.n	800b6ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	687a      	ldr	r2, [r7, #4]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d903      	bls.n	800b6dc <pvPortMalloc+0xa4>
 800b6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d1f1      	bne.n	800b6c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b6dc:	4b38      	ldr	r3, [pc, #224]	; (800b7c0 <pvPortMalloc+0x188>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d050      	beq.n	800b788 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b6e6:	6a3b      	ldr	r3, [r7, #32]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	2208      	movs	r2, #8
 800b6ec:	4413      	add	r3, r2
 800b6ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	6a3b      	ldr	r3, [r7, #32]
 800b6f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fa:	685a      	ldr	r2, [r3, #4]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	1ad2      	subs	r2, r2, r3
 800b700:	2308      	movs	r3, #8
 800b702:	005b      	lsls	r3, r3, #1
 800b704:	429a      	cmp	r2, r3
 800b706:	d91f      	bls.n	800b748 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	4413      	add	r3, r2
 800b70e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b710:	69bb      	ldr	r3, [r7, #24]
 800b712:	f003 0307 	and.w	r3, r3, #7
 800b716:	2b00      	cmp	r3, #0
 800b718:	d00a      	beq.n	800b730 <pvPortMalloc+0xf8>
	__asm volatile
 800b71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71e:	f383 8811 	msr	BASEPRI, r3
 800b722:	f3bf 8f6f 	isb	sy
 800b726:	f3bf 8f4f 	dsb	sy
 800b72a:	613b      	str	r3, [r7, #16]
}
 800b72c:	bf00      	nop
 800b72e:	e7fe      	b.n	800b72e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b732:	685a      	ldr	r2, [r3, #4]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	1ad2      	subs	r2, r2, r3
 800b738:	69bb      	ldr	r3, [r7, #24]
 800b73a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b742:	69b8      	ldr	r0, [r7, #24]
 800b744:	f000 f90c 	bl	800b960 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b748:	4b1f      	ldr	r3, [pc, #124]	; (800b7c8 <pvPortMalloc+0x190>)
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	1ad3      	subs	r3, r2, r3
 800b752:	4a1d      	ldr	r2, [pc, #116]	; (800b7c8 <pvPortMalloc+0x190>)
 800b754:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b756:	4b1c      	ldr	r3, [pc, #112]	; (800b7c8 <pvPortMalloc+0x190>)
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	4b1d      	ldr	r3, [pc, #116]	; (800b7d0 <pvPortMalloc+0x198>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	429a      	cmp	r2, r3
 800b760:	d203      	bcs.n	800b76a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b762:	4b19      	ldr	r3, [pc, #100]	; (800b7c8 <pvPortMalloc+0x190>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4a1a      	ldr	r2, [pc, #104]	; (800b7d0 <pvPortMalloc+0x198>)
 800b768:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b76c:	685a      	ldr	r2, [r3, #4]
 800b76e:	4b15      	ldr	r3, [pc, #84]	; (800b7c4 <pvPortMalloc+0x18c>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	431a      	orrs	r2, r3
 800b774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b776:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77a:	2200      	movs	r2, #0
 800b77c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b77e:	4b15      	ldr	r3, [pc, #84]	; (800b7d4 <pvPortMalloc+0x19c>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	3301      	adds	r3, #1
 800b784:	4a13      	ldr	r2, [pc, #76]	; (800b7d4 <pvPortMalloc+0x19c>)
 800b786:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b788:	f7ff fa26 	bl	800abd8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d101      	bne.n	800b796 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800b792:	f7f5 fc53 	bl	800103c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	f003 0307 	and.w	r3, r3, #7
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d00a      	beq.n	800b7b6 <pvPortMalloc+0x17e>
	__asm volatile
 800b7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a4:	f383 8811 	msr	BASEPRI, r3
 800b7a8:	f3bf 8f6f 	isb	sy
 800b7ac:	f3bf 8f4f 	dsb	sy
 800b7b0:	60fb      	str	r3, [r7, #12]
}
 800b7b2:	bf00      	nop
 800b7b4:	e7fe      	b.n	800b7b4 <pvPortMalloc+0x17c>
	return pvReturn;
 800b7b6:	69fb      	ldr	r3, [r7, #28]
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3728      	adds	r7, #40	; 0x28
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	20008cb0 	.word	0x20008cb0
 800b7c4:	20008cc4 	.word	0x20008cc4
 800b7c8:	20008cb4 	.word	0x20008cb4
 800b7cc:	20008ca8 	.word	0x20008ca8
 800b7d0:	20008cb8 	.word	0x20008cb8
 800b7d4:	20008cbc 	.word	0x20008cbc

0800b7d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b086      	sub	sp, #24
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d04d      	beq.n	800b886 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b7ea:	2308      	movs	r3, #8
 800b7ec:	425b      	negs	r3, r3
 800b7ee:	697a      	ldr	r2, [r7, #20]
 800b7f0:	4413      	add	r3, r2
 800b7f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	685a      	ldr	r2, [r3, #4]
 800b7fc:	4b24      	ldr	r3, [pc, #144]	; (800b890 <vPortFree+0xb8>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4013      	ands	r3, r2
 800b802:	2b00      	cmp	r3, #0
 800b804:	d10a      	bne.n	800b81c <vPortFree+0x44>
	__asm volatile
 800b806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b80a:	f383 8811 	msr	BASEPRI, r3
 800b80e:	f3bf 8f6f 	isb	sy
 800b812:	f3bf 8f4f 	dsb	sy
 800b816:	60fb      	str	r3, [r7, #12]
}
 800b818:	bf00      	nop
 800b81a:	e7fe      	b.n	800b81a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d00a      	beq.n	800b83a <vPortFree+0x62>
	__asm volatile
 800b824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b828:	f383 8811 	msr	BASEPRI, r3
 800b82c:	f3bf 8f6f 	isb	sy
 800b830:	f3bf 8f4f 	dsb	sy
 800b834:	60bb      	str	r3, [r7, #8]
}
 800b836:	bf00      	nop
 800b838:	e7fe      	b.n	800b838 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	685a      	ldr	r2, [r3, #4]
 800b83e:	4b14      	ldr	r3, [pc, #80]	; (800b890 <vPortFree+0xb8>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4013      	ands	r3, r2
 800b844:	2b00      	cmp	r3, #0
 800b846:	d01e      	beq.n	800b886 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d11a      	bne.n	800b886 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	685a      	ldr	r2, [r3, #4]
 800b854:	4b0e      	ldr	r3, [pc, #56]	; (800b890 <vPortFree+0xb8>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	43db      	mvns	r3, r3
 800b85a:	401a      	ands	r2, r3
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b860:	f7ff f9ac 	bl	800abbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	685a      	ldr	r2, [r3, #4]
 800b868:	4b0a      	ldr	r3, [pc, #40]	; (800b894 <vPortFree+0xbc>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4413      	add	r3, r2
 800b86e:	4a09      	ldr	r2, [pc, #36]	; (800b894 <vPortFree+0xbc>)
 800b870:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b872:	6938      	ldr	r0, [r7, #16]
 800b874:	f000 f874 	bl	800b960 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b878:	4b07      	ldr	r3, [pc, #28]	; (800b898 <vPortFree+0xc0>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	3301      	adds	r3, #1
 800b87e:	4a06      	ldr	r2, [pc, #24]	; (800b898 <vPortFree+0xc0>)
 800b880:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b882:	f7ff f9a9 	bl	800abd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b886:	bf00      	nop
 800b888:	3718      	adds	r7, #24
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	bf00      	nop
 800b890:	20008cc4 	.word	0x20008cc4
 800b894:	20008cb4 	.word	0x20008cb4
 800b898:	20008cc0 	.word	0x20008cc0

0800b89c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b89c:	b480      	push	{r7}
 800b89e:	b085      	sub	sp, #20
 800b8a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b8a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b8a8:	4b27      	ldr	r3, [pc, #156]	; (800b948 <prvHeapInit+0xac>)
 800b8aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f003 0307 	and.w	r3, r3, #7
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d00c      	beq.n	800b8d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	3307      	adds	r3, #7
 800b8ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f023 0307 	bic.w	r3, r3, #7
 800b8c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b8c4:	68ba      	ldr	r2, [r7, #8]
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	1ad3      	subs	r3, r2, r3
 800b8ca:	4a1f      	ldr	r2, [pc, #124]	; (800b948 <prvHeapInit+0xac>)
 800b8cc:	4413      	add	r3, r2
 800b8ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b8d4:	4a1d      	ldr	r2, [pc, #116]	; (800b94c <prvHeapInit+0xb0>)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b8da:	4b1c      	ldr	r3, [pc, #112]	; (800b94c <prvHeapInit+0xb0>)
 800b8dc:	2200      	movs	r2, #0
 800b8de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	68ba      	ldr	r2, [r7, #8]
 800b8e4:	4413      	add	r3, r2
 800b8e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b8e8:	2208      	movs	r2, #8
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	1a9b      	subs	r3, r3, r2
 800b8ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f023 0307 	bic.w	r3, r3, #7
 800b8f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	4a15      	ldr	r2, [pc, #84]	; (800b950 <prvHeapInit+0xb4>)
 800b8fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b8fe:	4b14      	ldr	r3, [pc, #80]	; (800b950 <prvHeapInit+0xb4>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	2200      	movs	r2, #0
 800b904:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b906:	4b12      	ldr	r3, [pc, #72]	; (800b950 <prvHeapInit+0xb4>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	2200      	movs	r2, #0
 800b90c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	68fa      	ldr	r2, [r7, #12]
 800b916:	1ad2      	subs	r2, r2, r3
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b91c:	4b0c      	ldr	r3, [pc, #48]	; (800b950 <prvHeapInit+0xb4>)
 800b91e:	681a      	ldr	r2, [r3, #0]
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	4a0a      	ldr	r2, [pc, #40]	; (800b954 <prvHeapInit+0xb8>)
 800b92a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	4a09      	ldr	r2, [pc, #36]	; (800b958 <prvHeapInit+0xbc>)
 800b932:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b934:	4b09      	ldr	r3, [pc, #36]	; (800b95c <prvHeapInit+0xc0>)
 800b936:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b93a:	601a      	str	r2, [r3, #0]
}
 800b93c:	bf00      	nop
 800b93e:	3714      	adds	r7, #20
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr
 800b948:	20000ca8 	.word	0x20000ca8
 800b94c:	20008ca8 	.word	0x20008ca8
 800b950:	20008cb0 	.word	0x20008cb0
 800b954:	20008cb8 	.word	0x20008cb8
 800b958:	20008cb4 	.word	0x20008cb4
 800b95c:	20008cc4 	.word	0x20008cc4

0800b960 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b960:	b480      	push	{r7}
 800b962:	b085      	sub	sp, #20
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b968:	4b28      	ldr	r3, [pc, #160]	; (800ba0c <prvInsertBlockIntoFreeList+0xac>)
 800b96a:	60fb      	str	r3, [r7, #12]
 800b96c:	e002      	b.n	800b974 <prvInsertBlockIntoFreeList+0x14>
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	60fb      	str	r3, [r7, #12]
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d8f7      	bhi.n	800b96e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	68ba      	ldr	r2, [r7, #8]
 800b988:	4413      	add	r3, r2
 800b98a:	687a      	ldr	r2, [r7, #4]
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d108      	bne.n	800b9a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	685a      	ldr	r2, [r3, #4]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	441a      	add	r2, r3
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	68ba      	ldr	r2, [r7, #8]
 800b9ac:	441a      	add	r2, r3
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d118      	bne.n	800b9e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	4b15      	ldr	r3, [pc, #84]	; (800ba10 <prvInsertBlockIntoFreeList+0xb0>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d00d      	beq.n	800b9de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	685a      	ldr	r2, [r3, #4]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	441a      	add	r2, r3
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	681a      	ldr	r2, [r3, #0]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	601a      	str	r2, [r3, #0]
 800b9dc:	e008      	b.n	800b9f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b9de:	4b0c      	ldr	r3, [pc, #48]	; (800ba10 <prvInsertBlockIntoFreeList+0xb0>)
 800b9e0:	681a      	ldr	r2, [r3, #0]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	601a      	str	r2, [r3, #0]
 800b9e6:	e003      	b.n	800b9f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681a      	ldr	r2, [r3, #0]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b9f0:	68fa      	ldr	r2, [r7, #12]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d002      	beq.n	800b9fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	687a      	ldr	r2, [r7, #4]
 800b9fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9fe:	bf00      	nop
 800ba00:	3714      	adds	r7, #20
 800ba02:	46bd      	mov	sp, r7
 800ba04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba08:	4770      	bx	lr
 800ba0a:	bf00      	nop
 800ba0c:	20008ca8 	.word	0x20008ca8
 800ba10:	20008cb0 	.word	0x20008cb0

0800ba14 <__errno>:
 800ba14:	4b01      	ldr	r3, [pc, #4]	; (800ba1c <__errno+0x8>)
 800ba16:	6818      	ldr	r0, [r3, #0]
 800ba18:	4770      	bx	lr
 800ba1a:	bf00      	nop
 800ba1c:	200000a8 	.word	0x200000a8

0800ba20 <std>:
 800ba20:	2300      	movs	r3, #0
 800ba22:	b510      	push	{r4, lr}
 800ba24:	4604      	mov	r4, r0
 800ba26:	e9c0 3300 	strd	r3, r3, [r0]
 800ba2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba2e:	6083      	str	r3, [r0, #8]
 800ba30:	8181      	strh	r1, [r0, #12]
 800ba32:	6643      	str	r3, [r0, #100]	; 0x64
 800ba34:	81c2      	strh	r2, [r0, #14]
 800ba36:	6183      	str	r3, [r0, #24]
 800ba38:	4619      	mov	r1, r3
 800ba3a:	2208      	movs	r2, #8
 800ba3c:	305c      	adds	r0, #92	; 0x5c
 800ba3e:	f000 f91a 	bl	800bc76 <memset>
 800ba42:	4b05      	ldr	r3, [pc, #20]	; (800ba58 <std+0x38>)
 800ba44:	6263      	str	r3, [r4, #36]	; 0x24
 800ba46:	4b05      	ldr	r3, [pc, #20]	; (800ba5c <std+0x3c>)
 800ba48:	62a3      	str	r3, [r4, #40]	; 0x28
 800ba4a:	4b05      	ldr	r3, [pc, #20]	; (800ba60 <std+0x40>)
 800ba4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ba4e:	4b05      	ldr	r3, [pc, #20]	; (800ba64 <std+0x44>)
 800ba50:	6224      	str	r4, [r4, #32]
 800ba52:	6323      	str	r3, [r4, #48]	; 0x30
 800ba54:	bd10      	pop	{r4, pc}
 800ba56:	bf00      	nop
 800ba58:	0800cbe5 	.word	0x0800cbe5
 800ba5c:	0800cc07 	.word	0x0800cc07
 800ba60:	0800cc3f 	.word	0x0800cc3f
 800ba64:	0800cc63 	.word	0x0800cc63

0800ba68 <_cleanup_r>:
 800ba68:	4901      	ldr	r1, [pc, #4]	; (800ba70 <_cleanup_r+0x8>)
 800ba6a:	f000 b8af 	b.w	800bbcc <_fwalk_reent>
 800ba6e:	bf00      	nop
 800ba70:	0800e811 	.word	0x0800e811

0800ba74 <__sfmoreglue>:
 800ba74:	b570      	push	{r4, r5, r6, lr}
 800ba76:	2268      	movs	r2, #104	; 0x68
 800ba78:	1e4d      	subs	r5, r1, #1
 800ba7a:	4355      	muls	r5, r2
 800ba7c:	460e      	mov	r6, r1
 800ba7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ba82:	f000 f921 	bl	800bcc8 <_malloc_r>
 800ba86:	4604      	mov	r4, r0
 800ba88:	b140      	cbz	r0, 800ba9c <__sfmoreglue+0x28>
 800ba8a:	2100      	movs	r1, #0
 800ba8c:	e9c0 1600 	strd	r1, r6, [r0]
 800ba90:	300c      	adds	r0, #12
 800ba92:	60a0      	str	r0, [r4, #8]
 800ba94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ba98:	f000 f8ed 	bl	800bc76 <memset>
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	bd70      	pop	{r4, r5, r6, pc}

0800baa0 <__sfp_lock_acquire>:
 800baa0:	4801      	ldr	r0, [pc, #4]	; (800baa8 <__sfp_lock_acquire+0x8>)
 800baa2:	f000 b8d8 	b.w	800bc56 <__retarget_lock_acquire_recursive>
 800baa6:	bf00      	nop
 800baa8:	20008cc9 	.word	0x20008cc9

0800baac <__sfp_lock_release>:
 800baac:	4801      	ldr	r0, [pc, #4]	; (800bab4 <__sfp_lock_release+0x8>)
 800baae:	f000 b8d3 	b.w	800bc58 <__retarget_lock_release_recursive>
 800bab2:	bf00      	nop
 800bab4:	20008cc9 	.word	0x20008cc9

0800bab8 <__sinit_lock_acquire>:
 800bab8:	4801      	ldr	r0, [pc, #4]	; (800bac0 <__sinit_lock_acquire+0x8>)
 800baba:	f000 b8cc 	b.w	800bc56 <__retarget_lock_acquire_recursive>
 800babe:	bf00      	nop
 800bac0:	20008cca 	.word	0x20008cca

0800bac4 <__sinit_lock_release>:
 800bac4:	4801      	ldr	r0, [pc, #4]	; (800bacc <__sinit_lock_release+0x8>)
 800bac6:	f000 b8c7 	b.w	800bc58 <__retarget_lock_release_recursive>
 800baca:	bf00      	nop
 800bacc:	20008cca 	.word	0x20008cca

0800bad0 <__sinit>:
 800bad0:	b510      	push	{r4, lr}
 800bad2:	4604      	mov	r4, r0
 800bad4:	f7ff fff0 	bl	800bab8 <__sinit_lock_acquire>
 800bad8:	69a3      	ldr	r3, [r4, #24]
 800bada:	b11b      	cbz	r3, 800bae4 <__sinit+0x14>
 800badc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bae0:	f7ff bff0 	b.w	800bac4 <__sinit_lock_release>
 800bae4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bae8:	6523      	str	r3, [r4, #80]	; 0x50
 800baea:	4b13      	ldr	r3, [pc, #76]	; (800bb38 <__sinit+0x68>)
 800baec:	4a13      	ldr	r2, [pc, #76]	; (800bb3c <__sinit+0x6c>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	62a2      	str	r2, [r4, #40]	; 0x28
 800baf2:	42a3      	cmp	r3, r4
 800baf4:	bf04      	itt	eq
 800baf6:	2301      	moveq	r3, #1
 800baf8:	61a3      	streq	r3, [r4, #24]
 800bafa:	4620      	mov	r0, r4
 800bafc:	f000 f820 	bl	800bb40 <__sfp>
 800bb00:	6060      	str	r0, [r4, #4]
 800bb02:	4620      	mov	r0, r4
 800bb04:	f000 f81c 	bl	800bb40 <__sfp>
 800bb08:	60a0      	str	r0, [r4, #8]
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	f000 f818 	bl	800bb40 <__sfp>
 800bb10:	2200      	movs	r2, #0
 800bb12:	60e0      	str	r0, [r4, #12]
 800bb14:	2104      	movs	r1, #4
 800bb16:	6860      	ldr	r0, [r4, #4]
 800bb18:	f7ff ff82 	bl	800ba20 <std>
 800bb1c:	68a0      	ldr	r0, [r4, #8]
 800bb1e:	2201      	movs	r2, #1
 800bb20:	2109      	movs	r1, #9
 800bb22:	f7ff ff7d 	bl	800ba20 <std>
 800bb26:	68e0      	ldr	r0, [r4, #12]
 800bb28:	2202      	movs	r2, #2
 800bb2a:	2112      	movs	r1, #18
 800bb2c:	f7ff ff78 	bl	800ba20 <std>
 800bb30:	2301      	movs	r3, #1
 800bb32:	61a3      	str	r3, [r4, #24]
 800bb34:	e7d2      	b.n	800badc <__sinit+0xc>
 800bb36:	bf00      	nop
 800bb38:	08012010 	.word	0x08012010
 800bb3c:	0800ba69 	.word	0x0800ba69

0800bb40 <__sfp>:
 800bb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb42:	4607      	mov	r7, r0
 800bb44:	f7ff ffac 	bl	800baa0 <__sfp_lock_acquire>
 800bb48:	4b1e      	ldr	r3, [pc, #120]	; (800bbc4 <__sfp+0x84>)
 800bb4a:	681e      	ldr	r6, [r3, #0]
 800bb4c:	69b3      	ldr	r3, [r6, #24]
 800bb4e:	b913      	cbnz	r3, 800bb56 <__sfp+0x16>
 800bb50:	4630      	mov	r0, r6
 800bb52:	f7ff ffbd 	bl	800bad0 <__sinit>
 800bb56:	3648      	adds	r6, #72	; 0x48
 800bb58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bb5c:	3b01      	subs	r3, #1
 800bb5e:	d503      	bpl.n	800bb68 <__sfp+0x28>
 800bb60:	6833      	ldr	r3, [r6, #0]
 800bb62:	b30b      	cbz	r3, 800bba8 <__sfp+0x68>
 800bb64:	6836      	ldr	r6, [r6, #0]
 800bb66:	e7f7      	b.n	800bb58 <__sfp+0x18>
 800bb68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bb6c:	b9d5      	cbnz	r5, 800bba4 <__sfp+0x64>
 800bb6e:	4b16      	ldr	r3, [pc, #88]	; (800bbc8 <__sfp+0x88>)
 800bb70:	60e3      	str	r3, [r4, #12]
 800bb72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bb76:	6665      	str	r5, [r4, #100]	; 0x64
 800bb78:	f000 f86c 	bl	800bc54 <__retarget_lock_init_recursive>
 800bb7c:	f7ff ff96 	bl	800baac <__sfp_lock_release>
 800bb80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bb84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bb88:	6025      	str	r5, [r4, #0]
 800bb8a:	61a5      	str	r5, [r4, #24]
 800bb8c:	2208      	movs	r2, #8
 800bb8e:	4629      	mov	r1, r5
 800bb90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bb94:	f000 f86f 	bl	800bc76 <memset>
 800bb98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bb9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bba0:	4620      	mov	r0, r4
 800bba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bba4:	3468      	adds	r4, #104	; 0x68
 800bba6:	e7d9      	b.n	800bb5c <__sfp+0x1c>
 800bba8:	2104      	movs	r1, #4
 800bbaa:	4638      	mov	r0, r7
 800bbac:	f7ff ff62 	bl	800ba74 <__sfmoreglue>
 800bbb0:	4604      	mov	r4, r0
 800bbb2:	6030      	str	r0, [r6, #0]
 800bbb4:	2800      	cmp	r0, #0
 800bbb6:	d1d5      	bne.n	800bb64 <__sfp+0x24>
 800bbb8:	f7ff ff78 	bl	800baac <__sfp_lock_release>
 800bbbc:	230c      	movs	r3, #12
 800bbbe:	603b      	str	r3, [r7, #0]
 800bbc0:	e7ee      	b.n	800bba0 <__sfp+0x60>
 800bbc2:	bf00      	nop
 800bbc4:	08012010 	.word	0x08012010
 800bbc8:	ffff0001 	.word	0xffff0001

0800bbcc <_fwalk_reent>:
 800bbcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbd0:	4606      	mov	r6, r0
 800bbd2:	4688      	mov	r8, r1
 800bbd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bbd8:	2700      	movs	r7, #0
 800bbda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bbde:	f1b9 0901 	subs.w	r9, r9, #1
 800bbe2:	d505      	bpl.n	800bbf0 <_fwalk_reent+0x24>
 800bbe4:	6824      	ldr	r4, [r4, #0]
 800bbe6:	2c00      	cmp	r4, #0
 800bbe8:	d1f7      	bne.n	800bbda <_fwalk_reent+0xe>
 800bbea:	4638      	mov	r0, r7
 800bbec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbf0:	89ab      	ldrh	r3, [r5, #12]
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d907      	bls.n	800bc06 <_fwalk_reent+0x3a>
 800bbf6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	d003      	beq.n	800bc06 <_fwalk_reent+0x3a>
 800bbfe:	4629      	mov	r1, r5
 800bc00:	4630      	mov	r0, r6
 800bc02:	47c0      	blx	r8
 800bc04:	4307      	orrs	r7, r0
 800bc06:	3568      	adds	r5, #104	; 0x68
 800bc08:	e7e9      	b.n	800bbde <_fwalk_reent+0x12>
	...

0800bc0c <__libc_init_array>:
 800bc0c:	b570      	push	{r4, r5, r6, lr}
 800bc0e:	4d0d      	ldr	r5, [pc, #52]	; (800bc44 <__libc_init_array+0x38>)
 800bc10:	4c0d      	ldr	r4, [pc, #52]	; (800bc48 <__libc_init_array+0x3c>)
 800bc12:	1b64      	subs	r4, r4, r5
 800bc14:	10a4      	asrs	r4, r4, #2
 800bc16:	2600      	movs	r6, #0
 800bc18:	42a6      	cmp	r6, r4
 800bc1a:	d109      	bne.n	800bc30 <__libc_init_array+0x24>
 800bc1c:	4d0b      	ldr	r5, [pc, #44]	; (800bc4c <__libc_init_array+0x40>)
 800bc1e:	4c0c      	ldr	r4, [pc, #48]	; (800bc50 <__libc_init_array+0x44>)
 800bc20:	f004 fc08 	bl	8010434 <_init>
 800bc24:	1b64      	subs	r4, r4, r5
 800bc26:	10a4      	asrs	r4, r4, #2
 800bc28:	2600      	movs	r6, #0
 800bc2a:	42a6      	cmp	r6, r4
 800bc2c:	d105      	bne.n	800bc3a <__libc_init_array+0x2e>
 800bc2e:	bd70      	pop	{r4, r5, r6, pc}
 800bc30:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc34:	4798      	blx	r3
 800bc36:	3601      	adds	r6, #1
 800bc38:	e7ee      	b.n	800bc18 <__libc_init_array+0xc>
 800bc3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc3e:	4798      	blx	r3
 800bc40:	3601      	adds	r6, #1
 800bc42:	e7f2      	b.n	800bc2a <__libc_init_array+0x1e>
 800bc44:	0801245c 	.word	0x0801245c
 800bc48:	0801245c 	.word	0x0801245c
 800bc4c:	0801245c 	.word	0x0801245c
 800bc50:	08012460 	.word	0x08012460

0800bc54 <__retarget_lock_init_recursive>:
 800bc54:	4770      	bx	lr

0800bc56 <__retarget_lock_acquire_recursive>:
 800bc56:	4770      	bx	lr

0800bc58 <__retarget_lock_release_recursive>:
 800bc58:	4770      	bx	lr

0800bc5a <memcpy>:
 800bc5a:	440a      	add	r2, r1
 800bc5c:	4291      	cmp	r1, r2
 800bc5e:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc62:	d100      	bne.n	800bc66 <memcpy+0xc>
 800bc64:	4770      	bx	lr
 800bc66:	b510      	push	{r4, lr}
 800bc68:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc70:	4291      	cmp	r1, r2
 800bc72:	d1f9      	bne.n	800bc68 <memcpy+0xe>
 800bc74:	bd10      	pop	{r4, pc}

0800bc76 <memset>:
 800bc76:	4402      	add	r2, r0
 800bc78:	4603      	mov	r3, r0
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d100      	bne.n	800bc80 <memset+0xa>
 800bc7e:	4770      	bx	lr
 800bc80:	f803 1b01 	strb.w	r1, [r3], #1
 800bc84:	e7f9      	b.n	800bc7a <memset+0x4>
	...

0800bc88 <sbrk_aligned>:
 800bc88:	b570      	push	{r4, r5, r6, lr}
 800bc8a:	4e0e      	ldr	r6, [pc, #56]	; (800bcc4 <sbrk_aligned+0x3c>)
 800bc8c:	460c      	mov	r4, r1
 800bc8e:	6831      	ldr	r1, [r6, #0]
 800bc90:	4605      	mov	r5, r0
 800bc92:	b911      	cbnz	r1, 800bc9a <sbrk_aligned+0x12>
 800bc94:	f000 ff70 	bl	800cb78 <_sbrk_r>
 800bc98:	6030      	str	r0, [r6, #0]
 800bc9a:	4621      	mov	r1, r4
 800bc9c:	4628      	mov	r0, r5
 800bc9e:	f000 ff6b 	bl	800cb78 <_sbrk_r>
 800bca2:	1c43      	adds	r3, r0, #1
 800bca4:	d00a      	beq.n	800bcbc <sbrk_aligned+0x34>
 800bca6:	1cc4      	adds	r4, r0, #3
 800bca8:	f024 0403 	bic.w	r4, r4, #3
 800bcac:	42a0      	cmp	r0, r4
 800bcae:	d007      	beq.n	800bcc0 <sbrk_aligned+0x38>
 800bcb0:	1a21      	subs	r1, r4, r0
 800bcb2:	4628      	mov	r0, r5
 800bcb4:	f000 ff60 	bl	800cb78 <_sbrk_r>
 800bcb8:	3001      	adds	r0, #1
 800bcba:	d101      	bne.n	800bcc0 <sbrk_aligned+0x38>
 800bcbc:	f04f 34ff 	mov.w	r4, #4294967295
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	bd70      	pop	{r4, r5, r6, pc}
 800bcc4:	20008cd0 	.word	0x20008cd0

0800bcc8 <_malloc_r>:
 800bcc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bccc:	1ccd      	adds	r5, r1, #3
 800bcce:	f025 0503 	bic.w	r5, r5, #3
 800bcd2:	3508      	adds	r5, #8
 800bcd4:	2d0c      	cmp	r5, #12
 800bcd6:	bf38      	it	cc
 800bcd8:	250c      	movcc	r5, #12
 800bcda:	2d00      	cmp	r5, #0
 800bcdc:	4607      	mov	r7, r0
 800bcde:	db01      	blt.n	800bce4 <_malloc_r+0x1c>
 800bce0:	42a9      	cmp	r1, r5
 800bce2:	d905      	bls.n	800bcf0 <_malloc_r+0x28>
 800bce4:	230c      	movs	r3, #12
 800bce6:	603b      	str	r3, [r7, #0]
 800bce8:	2600      	movs	r6, #0
 800bcea:	4630      	mov	r0, r6
 800bcec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcf0:	4e2e      	ldr	r6, [pc, #184]	; (800bdac <_malloc_r+0xe4>)
 800bcf2:	f003 f969 	bl	800efc8 <__malloc_lock>
 800bcf6:	6833      	ldr	r3, [r6, #0]
 800bcf8:	461c      	mov	r4, r3
 800bcfa:	bb34      	cbnz	r4, 800bd4a <_malloc_r+0x82>
 800bcfc:	4629      	mov	r1, r5
 800bcfe:	4638      	mov	r0, r7
 800bd00:	f7ff ffc2 	bl	800bc88 <sbrk_aligned>
 800bd04:	1c43      	adds	r3, r0, #1
 800bd06:	4604      	mov	r4, r0
 800bd08:	d14d      	bne.n	800bda6 <_malloc_r+0xde>
 800bd0a:	6834      	ldr	r4, [r6, #0]
 800bd0c:	4626      	mov	r6, r4
 800bd0e:	2e00      	cmp	r6, #0
 800bd10:	d140      	bne.n	800bd94 <_malloc_r+0xcc>
 800bd12:	6823      	ldr	r3, [r4, #0]
 800bd14:	4631      	mov	r1, r6
 800bd16:	4638      	mov	r0, r7
 800bd18:	eb04 0803 	add.w	r8, r4, r3
 800bd1c:	f000 ff2c 	bl	800cb78 <_sbrk_r>
 800bd20:	4580      	cmp	r8, r0
 800bd22:	d13a      	bne.n	800bd9a <_malloc_r+0xd2>
 800bd24:	6821      	ldr	r1, [r4, #0]
 800bd26:	3503      	adds	r5, #3
 800bd28:	1a6d      	subs	r5, r5, r1
 800bd2a:	f025 0503 	bic.w	r5, r5, #3
 800bd2e:	3508      	adds	r5, #8
 800bd30:	2d0c      	cmp	r5, #12
 800bd32:	bf38      	it	cc
 800bd34:	250c      	movcc	r5, #12
 800bd36:	4629      	mov	r1, r5
 800bd38:	4638      	mov	r0, r7
 800bd3a:	f7ff ffa5 	bl	800bc88 <sbrk_aligned>
 800bd3e:	3001      	adds	r0, #1
 800bd40:	d02b      	beq.n	800bd9a <_malloc_r+0xd2>
 800bd42:	6823      	ldr	r3, [r4, #0]
 800bd44:	442b      	add	r3, r5
 800bd46:	6023      	str	r3, [r4, #0]
 800bd48:	e00e      	b.n	800bd68 <_malloc_r+0xa0>
 800bd4a:	6822      	ldr	r2, [r4, #0]
 800bd4c:	1b52      	subs	r2, r2, r5
 800bd4e:	d41e      	bmi.n	800bd8e <_malloc_r+0xc6>
 800bd50:	2a0b      	cmp	r2, #11
 800bd52:	d916      	bls.n	800bd82 <_malloc_r+0xba>
 800bd54:	1961      	adds	r1, r4, r5
 800bd56:	42a3      	cmp	r3, r4
 800bd58:	6025      	str	r5, [r4, #0]
 800bd5a:	bf18      	it	ne
 800bd5c:	6059      	strne	r1, [r3, #4]
 800bd5e:	6863      	ldr	r3, [r4, #4]
 800bd60:	bf08      	it	eq
 800bd62:	6031      	streq	r1, [r6, #0]
 800bd64:	5162      	str	r2, [r4, r5]
 800bd66:	604b      	str	r3, [r1, #4]
 800bd68:	4638      	mov	r0, r7
 800bd6a:	f104 060b 	add.w	r6, r4, #11
 800bd6e:	f003 f931 	bl	800efd4 <__malloc_unlock>
 800bd72:	f026 0607 	bic.w	r6, r6, #7
 800bd76:	1d23      	adds	r3, r4, #4
 800bd78:	1af2      	subs	r2, r6, r3
 800bd7a:	d0b6      	beq.n	800bcea <_malloc_r+0x22>
 800bd7c:	1b9b      	subs	r3, r3, r6
 800bd7e:	50a3      	str	r3, [r4, r2]
 800bd80:	e7b3      	b.n	800bcea <_malloc_r+0x22>
 800bd82:	6862      	ldr	r2, [r4, #4]
 800bd84:	42a3      	cmp	r3, r4
 800bd86:	bf0c      	ite	eq
 800bd88:	6032      	streq	r2, [r6, #0]
 800bd8a:	605a      	strne	r2, [r3, #4]
 800bd8c:	e7ec      	b.n	800bd68 <_malloc_r+0xa0>
 800bd8e:	4623      	mov	r3, r4
 800bd90:	6864      	ldr	r4, [r4, #4]
 800bd92:	e7b2      	b.n	800bcfa <_malloc_r+0x32>
 800bd94:	4634      	mov	r4, r6
 800bd96:	6876      	ldr	r6, [r6, #4]
 800bd98:	e7b9      	b.n	800bd0e <_malloc_r+0x46>
 800bd9a:	230c      	movs	r3, #12
 800bd9c:	603b      	str	r3, [r7, #0]
 800bd9e:	4638      	mov	r0, r7
 800bda0:	f003 f918 	bl	800efd4 <__malloc_unlock>
 800bda4:	e7a1      	b.n	800bcea <_malloc_r+0x22>
 800bda6:	6025      	str	r5, [r4, #0]
 800bda8:	e7de      	b.n	800bd68 <_malloc_r+0xa0>
 800bdaa:	bf00      	nop
 800bdac:	20008ccc 	.word	0x20008ccc

0800bdb0 <__cvt>:
 800bdb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bdb4:	ec55 4b10 	vmov	r4, r5, d0
 800bdb8:	2d00      	cmp	r5, #0
 800bdba:	460e      	mov	r6, r1
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	462b      	mov	r3, r5
 800bdc0:	bfbb      	ittet	lt
 800bdc2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bdc6:	461d      	movlt	r5, r3
 800bdc8:	2300      	movge	r3, #0
 800bdca:	232d      	movlt	r3, #45	; 0x2d
 800bdcc:	700b      	strb	r3, [r1, #0]
 800bdce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdd0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bdd4:	4691      	mov	r9, r2
 800bdd6:	f023 0820 	bic.w	r8, r3, #32
 800bdda:	bfbc      	itt	lt
 800bddc:	4622      	movlt	r2, r4
 800bdde:	4614      	movlt	r4, r2
 800bde0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bde4:	d005      	beq.n	800bdf2 <__cvt+0x42>
 800bde6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bdea:	d100      	bne.n	800bdee <__cvt+0x3e>
 800bdec:	3601      	adds	r6, #1
 800bdee:	2102      	movs	r1, #2
 800bdf0:	e000      	b.n	800bdf4 <__cvt+0x44>
 800bdf2:	2103      	movs	r1, #3
 800bdf4:	ab03      	add	r3, sp, #12
 800bdf6:	9301      	str	r3, [sp, #4]
 800bdf8:	ab02      	add	r3, sp, #8
 800bdfa:	9300      	str	r3, [sp, #0]
 800bdfc:	ec45 4b10 	vmov	d0, r4, r5
 800be00:	4653      	mov	r3, sl
 800be02:	4632      	mov	r2, r6
 800be04:	f001 fe90 	bl	800db28 <_dtoa_r>
 800be08:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800be0c:	4607      	mov	r7, r0
 800be0e:	d102      	bne.n	800be16 <__cvt+0x66>
 800be10:	f019 0f01 	tst.w	r9, #1
 800be14:	d022      	beq.n	800be5c <__cvt+0xac>
 800be16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800be1a:	eb07 0906 	add.w	r9, r7, r6
 800be1e:	d110      	bne.n	800be42 <__cvt+0x92>
 800be20:	783b      	ldrb	r3, [r7, #0]
 800be22:	2b30      	cmp	r3, #48	; 0x30
 800be24:	d10a      	bne.n	800be3c <__cvt+0x8c>
 800be26:	2200      	movs	r2, #0
 800be28:	2300      	movs	r3, #0
 800be2a:	4620      	mov	r0, r4
 800be2c:	4629      	mov	r1, r5
 800be2e:	f7f4 fe5b 	bl	8000ae8 <__aeabi_dcmpeq>
 800be32:	b918      	cbnz	r0, 800be3c <__cvt+0x8c>
 800be34:	f1c6 0601 	rsb	r6, r6, #1
 800be38:	f8ca 6000 	str.w	r6, [sl]
 800be3c:	f8da 3000 	ldr.w	r3, [sl]
 800be40:	4499      	add	r9, r3
 800be42:	2200      	movs	r2, #0
 800be44:	2300      	movs	r3, #0
 800be46:	4620      	mov	r0, r4
 800be48:	4629      	mov	r1, r5
 800be4a:	f7f4 fe4d 	bl	8000ae8 <__aeabi_dcmpeq>
 800be4e:	b108      	cbz	r0, 800be54 <__cvt+0xa4>
 800be50:	f8cd 900c 	str.w	r9, [sp, #12]
 800be54:	2230      	movs	r2, #48	; 0x30
 800be56:	9b03      	ldr	r3, [sp, #12]
 800be58:	454b      	cmp	r3, r9
 800be5a:	d307      	bcc.n	800be6c <__cvt+0xbc>
 800be5c:	9b03      	ldr	r3, [sp, #12]
 800be5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be60:	1bdb      	subs	r3, r3, r7
 800be62:	4638      	mov	r0, r7
 800be64:	6013      	str	r3, [r2, #0]
 800be66:	b004      	add	sp, #16
 800be68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be6c:	1c59      	adds	r1, r3, #1
 800be6e:	9103      	str	r1, [sp, #12]
 800be70:	701a      	strb	r2, [r3, #0]
 800be72:	e7f0      	b.n	800be56 <__cvt+0xa6>

0800be74 <__exponent>:
 800be74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be76:	4603      	mov	r3, r0
 800be78:	2900      	cmp	r1, #0
 800be7a:	bfb8      	it	lt
 800be7c:	4249      	neglt	r1, r1
 800be7e:	f803 2b02 	strb.w	r2, [r3], #2
 800be82:	bfb4      	ite	lt
 800be84:	222d      	movlt	r2, #45	; 0x2d
 800be86:	222b      	movge	r2, #43	; 0x2b
 800be88:	2909      	cmp	r1, #9
 800be8a:	7042      	strb	r2, [r0, #1]
 800be8c:	dd2a      	ble.n	800bee4 <__exponent+0x70>
 800be8e:	f10d 0407 	add.w	r4, sp, #7
 800be92:	46a4      	mov	ip, r4
 800be94:	270a      	movs	r7, #10
 800be96:	46a6      	mov	lr, r4
 800be98:	460a      	mov	r2, r1
 800be9a:	fb91 f6f7 	sdiv	r6, r1, r7
 800be9e:	fb07 1516 	mls	r5, r7, r6, r1
 800bea2:	3530      	adds	r5, #48	; 0x30
 800bea4:	2a63      	cmp	r2, #99	; 0x63
 800bea6:	f104 34ff 	add.w	r4, r4, #4294967295
 800beaa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800beae:	4631      	mov	r1, r6
 800beb0:	dcf1      	bgt.n	800be96 <__exponent+0x22>
 800beb2:	3130      	adds	r1, #48	; 0x30
 800beb4:	f1ae 0502 	sub.w	r5, lr, #2
 800beb8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bebc:	1c44      	adds	r4, r0, #1
 800bebe:	4629      	mov	r1, r5
 800bec0:	4561      	cmp	r1, ip
 800bec2:	d30a      	bcc.n	800beda <__exponent+0x66>
 800bec4:	f10d 0209 	add.w	r2, sp, #9
 800bec8:	eba2 020e 	sub.w	r2, r2, lr
 800becc:	4565      	cmp	r5, ip
 800bece:	bf88      	it	hi
 800bed0:	2200      	movhi	r2, #0
 800bed2:	4413      	add	r3, r2
 800bed4:	1a18      	subs	r0, r3, r0
 800bed6:	b003      	add	sp, #12
 800bed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800beda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bede:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bee2:	e7ed      	b.n	800bec0 <__exponent+0x4c>
 800bee4:	2330      	movs	r3, #48	; 0x30
 800bee6:	3130      	adds	r1, #48	; 0x30
 800bee8:	7083      	strb	r3, [r0, #2]
 800beea:	70c1      	strb	r1, [r0, #3]
 800beec:	1d03      	adds	r3, r0, #4
 800beee:	e7f1      	b.n	800bed4 <__exponent+0x60>

0800bef0 <_printf_float>:
 800bef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bef4:	ed2d 8b02 	vpush	{d8}
 800bef8:	b08d      	sub	sp, #52	; 0x34
 800befa:	460c      	mov	r4, r1
 800befc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bf00:	4616      	mov	r6, r2
 800bf02:	461f      	mov	r7, r3
 800bf04:	4605      	mov	r5, r0
 800bf06:	f003 f82f 	bl	800ef68 <_localeconv_r>
 800bf0a:	f8d0 a000 	ldr.w	sl, [r0]
 800bf0e:	4650      	mov	r0, sl
 800bf10:	f7f4 f96e 	bl	80001f0 <strlen>
 800bf14:	2300      	movs	r3, #0
 800bf16:	930a      	str	r3, [sp, #40]	; 0x28
 800bf18:	6823      	ldr	r3, [r4, #0]
 800bf1a:	9305      	str	r3, [sp, #20]
 800bf1c:	f8d8 3000 	ldr.w	r3, [r8]
 800bf20:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bf24:	3307      	adds	r3, #7
 800bf26:	f023 0307 	bic.w	r3, r3, #7
 800bf2a:	f103 0208 	add.w	r2, r3, #8
 800bf2e:	f8c8 2000 	str.w	r2, [r8]
 800bf32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf36:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bf3a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bf3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bf42:	9307      	str	r3, [sp, #28]
 800bf44:	f8cd 8018 	str.w	r8, [sp, #24]
 800bf48:	ee08 0a10 	vmov	s16, r0
 800bf4c:	4b9f      	ldr	r3, [pc, #636]	; (800c1cc <_printf_float+0x2dc>)
 800bf4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf52:	f04f 32ff 	mov.w	r2, #4294967295
 800bf56:	f7f4 fdf9 	bl	8000b4c <__aeabi_dcmpun>
 800bf5a:	bb88      	cbnz	r0, 800bfc0 <_printf_float+0xd0>
 800bf5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf60:	4b9a      	ldr	r3, [pc, #616]	; (800c1cc <_printf_float+0x2dc>)
 800bf62:	f04f 32ff 	mov.w	r2, #4294967295
 800bf66:	f7f4 fdd3 	bl	8000b10 <__aeabi_dcmple>
 800bf6a:	bb48      	cbnz	r0, 800bfc0 <_printf_float+0xd0>
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	2300      	movs	r3, #0
 800bf70:	4640      	mov	r0, r8
 800bf72:	4649      	mov	r1, r9
 800bf74:	f7f4 fdc2 	bl	8000afc <__aeabi_dcmplt>
 800bf78:	b110      	cbz	r0, 800bf80 <_printf_float+0x90>
 800bf7a:	232d      	movs	r3, #45	; 0x2d
 800bf7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf80:	4b93      	ldr	r3, [pc, #588]	; (800c1d0 <_printf_float+0x2e0>)
 800bf82:	4894      	ldr	r0, [pc, #592]	; (800c1d4 <_printf_float+0x2e4>)
 800bf84:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bf88:	bf94      	ite	ls
 800bf8a:	4698      	movls	r8, r3
 800bf8c:	4680      	movhi	r8, r0
 800bf8e:	2303      	movs	r3, #3
 800bf90:	6123      	str	r3, [r4, #16]
 800bf92:	9b05      	ldr	r3, [sp, #20]
 800bf94:	f023 0204 	bic.w	r2, r3, #4
 800bf98:	6022      	str	r2, [r4, #0]
 800bf9a:	f04f 0900 	mov.w	r9, #0
 800bf9e:	9700      	str	r7, [sp, #0]
 800bfa0:	4633      	mov	r3, r6
 800bfa2:	aa0b      	add	r2, sp, #44	; 0x2c
 800bfa4:	4621      	mov	r1, r4
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	f000 f9d8 	bl	800c35c <_printf_common>
 800bfac:	3001      	adds	r0, #1
 800bfae:	f040 8090 	bne.w	800c0d2 <_printf_float+0x1e2>
 800bfb2:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb6:	b00d      	add	sp, #52	; 0x34
 800bfb8:	ecbd 8b02 	vpop	{d8}
 800bfbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfc0:	4642      	mov	r2, r8
 800bfc2:	464b      	mov	r3, r9
 800bfc4:	4640      	mov	r0, r8
 800bfc6:	4649      	mov	r1, r9
 800bfc8:	f7f4 fdc0 	bl	8000b4c <__aeabi_dcmpun>
 800bfcc:	b140      	cbz	r0, 800bfe0 <_printf_float+0xf0>
 800bfce:	464b      	mov	r3, r9
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	bfbc      	itt	lt
 800bfd4:	232d      	movlt	r3, #45	; 0x2d
 800bfd6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bfda:	487f      	ldr	r0, [pc, #508]	; (800c1d8 <_printf_float+0x2e8>)
 800bfdc:	4b7f      	ldr	r3, [pc, #508]	; (800c1dc <_printf_float+0x2ec>)
 800bfde:	e7d1      	b.n	800bf84 <_printf_float+0x94>
 800bfe0:	6863      	ldr	r3, [r4, #4]
 800bfe2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bfe6:	9206      	str	r2, [sp, #24]
 800bfe8:	1c5a      	adds	r2, r3, #1
 800bfea:	d13f      	bne.n	800c06c <_printf_float+0x17c>
 800bfec:	2306      	movs	r3, #6
 800bfee:	6063      	str	r3, [r4, #4]
 800bff0:	9b05      	ldr	r3, [sp, #20]
 800bff2:	6861      	ldr	r1, [r4, #4]
 800bff4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bff8:	2300      	movs	r3, #0
 800bffa:	9303      	str	r3, [sp, #12]
 800bffc:	ab0a      	add	r3, sp, #40	; 0x28
 800bffe:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c002:	ab09      	add	r3, sp, #36	; 0x24
 800c004:	ec49 8b10 	vmov	d0, r8, r9
 800c008:	9300      	str	r3, [sp, #0]
 800c00a:	6022      	str	r2, [r4, #0]
 800c00c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c010:	4628      	mov	r0, r5
 800c012:	f7ff fecd 	bl	800bdb0 <__cvt>
 800c016:	9b06      	ldr	r3, [sp, #24]
 800c018:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c01a:	2b47      	cmp	r3, #71	; 0x47
 800c01c:	4680      	mov	r8, r0
 800c01e:	d108      	bne.n	800c032 <_printf_float+0x142>
 800c020:	1cc8      	adds	r0, r1, #3
 800c022:	db02      	blt.n	800c02a <_printf_float+0x13a>
 800c024:	6863      	ldr	r3, [r4, #4]
 800c026:	4299      	cmp	r1, r3
 800c028:	dd41      	ble.n	800c0ae <_printf_float+0x1be>
 800c02a:	f1ab 0b02 	sub.w	fp, fp, #2
 800c02e:	fa5f fb8b 	uxtb.w	fp, fp
 800c032:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c036:	d820      	bhi.n	800c07a <_printf_float+0x18a>
 800c038:	3901      	subs	r1, #1
 800c03a:	465a      	mov	r2, fp
 800c03c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c040:	9109      	str	r1, [sp, #36]	; 0x24
 800c042:	f7ff ff17 	bl	800be74 <__exponent>
 800c046:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c048:	1813      	adds	r3, r2, r0
 800c04a:	2a01      	cmp	r2, #1
 800c04c:	4681      	mov	r9, r0
 800c04e:	6123      	str	r3, [r4, #16]
 800c050:	dc02      	bgt.n	800c058 <_printf_float+0x168>
 800c052:	6822      	ldr	r2, [r4, #0]
 800c054:	07d2      	lsls	r2, r2, #31
 800c056:	d501      	bpl.n	800c05c <_printf_float+0x16c>
 800c058:	3301      	adds	r3, #1
 800c05a:	6123      	str	r3, [r4, #16]
 800c05c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c060:	2b00      	cmp	r3, #0
 800c062:	d09c      	beq.n	800bf9e <_printf_float+0xae>
 800c064:	232d      	movs	r3, #45	; 0x2d
 800c066:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c06a:	e798      	b.n	800bf9e <_printf_float+0xae>
 800c06c:	9a06      	ldr	r2, [sp, #24]
 800c06e:	2a47      	cmp	r2, #71	; 0x47
 800c070:	d1be      	bne.n	800bff0 <_printf_float+0x100>
 800c072:	2b00      	cmp	r3, #0
 800c074:	d1bc      	bne.n	800bff0 <_printf_float+0x100>
 800c076:	2301      	movs	r3, #1
 800c078:	e7b9      	b.n	800bfee <_printf_float+0xfe>
 800c07a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c07e:	d118      	bne.n	800c0b2 <_printf_float+0x1c2>
 800c080:	2900      	cmp	r1, #0
 800c082:	6863      	ldr	r3, [r4, #4]
 800c084:	dd0b      	ble.n	800c09e <_printf_float+0x1ae>
 800c086:	6121      	str	r1, [r4, #16]
 800c088:	b913      	cbnz	r3, 800c090 <_printf_float+0x1a0>
 800c08a:	6822      	ldr	r2, [r4, #0]
 800c08c:	07d0      	lsls	r0, r2, #31
 800c08e:	d502      	bpl.n	800c096 <_printf_float+0x1a6>
 800c090:	3301      	adds	r3, #1
 800c092:	440b      	add	r3, r1
 800c094:	6123      	str	r3, [r4, #16]
 800c096:	65a1      	str	r1, [r4, #88]	; 0x58
 800c098:	f04f 0900 	mov.w	r9, #0
 800c09c:	e7de      	b.n	800c05c <_printf_float+0x16c>
 800c09e:	b913      	cbnz	r3, 800c0a6 <_printf_float+0x1b6>
 800c0a0:	6822      	ldr	r2, [r4, #0]
 800c0a2:	07d2      	lsls	r2, r2, #31
 800c0a4:	d501      	bpl.n	800c0aa <_printf_float+0x1ba>
 800c0a6:	3302      	adds	r3, #2
 800c0a8:	e7f4      	b.n	800c094 <_printf_float+0x1a4>
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	e7f2      	b.n	800c094 <_printf_float+0x1a4>
 800c0ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c0b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0b4:	4299      	cmp	r1, r3
 800c0b6:	db05      	blt.n	800c0c4 <_printf_float+0x1d4>
 800c0b8:	6823      	ldr	r3, [r4, #0]
 800c0ba:	6121      	str	r1, [r4, #16]
 800c0bc:	07d8      	lsls	r0, r3, #31
 800c0be:	d5ea      	bpl.n	800c096 <_printf_float+0x1a6>
 800c0c0:	1c4b      	adds	r3, r1, #1
 800c0c2:	e7e7      	b.n	800c094 <_printf_float+0x1a4>
 800c0c4:	2900      	cmp	r1, #0
 800c0c6:	bfd4      	ite	le
 800c0c8:	f1c1 0202 	rsble	r2, r1, #2
 800c0cc:	2201      	movgt	r2, #1
 800c0ce:	4413      	add	r3, r2
 800c0d0:	e7e0      	b.n	800c094 <_printf_float+0x1a4>
 800c0d2:	6823      	ldr	r3, [r4, #0]
 800c0d4:	055a      	lsls	r2, r3, #21
 800c0d6:	d407      	bmi.n	800c0e8 <_printf_float+0x1f8>
 800c0d8:	6923      	ldr	r3, [r4, #16]
 800c0da:	4642      	mov	r2, r8
 800c0dc:	4631      	mov	r1, r6
 800c0de:	4628      	mov	r0, r5
 800c0e0:	47b8      	blx	r7
 800c0e2:	3001      	adds	r0, #1
 800c0e4:	d12c      	bne.n	800c140 <_printf_float+0x250>
 800c0e6:	e764      	b.n	800bfb2 <_printf_float+0xc2>
 800c0e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c0ec:	f240 80e0 	bls.w	800c2b0 <_printf_float+0x3c0>
 800c0f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	f7f4 fcf6 	bl	8000ae8 <__aeabi_dcmpeq>
 800c0fc:	2800      	cmp	r0, #0
 800c0fe:	d034      	beq.n	800c16a <_printf_float+0x27a>
 800c100:	4a37      	ldr	r2, [pc, #220]	; (800c1e0 <_printf_float+0x2f0>)
 800c102:	2301      	movs	r3, #1
 800c104:	4631      	mov	r1, r6
 800c106:	4628      	mov	r0, r5
 800c108:	47b8      	blx	r7
 800c10a:	3001      	adds	r0, #1
 800c10c:	f43f af51 	beq.w	800bfb2 <_printf_float+0xc2>
 800c110:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c114:	429a      	cmp	r2, r3
 800c116:	db02      	blt.n	800c11e <_printf_float+0x22e>
 800c118:	6823      	ldr	r3, [r4, #0]
 800c11a:	07d8      	lsls	r0, r3, #31
 800c11c:	d510      	bpl.n	800c140 <_printf_float+0x250>
 800c11e:	ee18 3a10 	vmov	r3, s16
 800c122:	4652      	mov	r2, sl
 800c124:	4631      	mov	r1, r6
 800c126:	4628      	mov	r0, r5
 800c128:	47b8      	blx	r7
 800c12a:	3001      	adds	r0, #1
 800c12c:	f43f af41 	beq.w	800bfb2 <_printf_float+0xc2>
 800c130:	f04f 0800 	mov.w	r8, #0
 800c134:	f104 091a 	add.w	r9, r4, #26
 800c138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c13a:	3b01      	subs	r3, #1
 800c13c:	4543      	cmp	r3, r8
 800c13e:	dc09      	bgt.n	800c154 <_printf_float+0x264>
 800c140:	6823      	ldr	r3, [r4, #0]
 800c142:	079b      	lsls	r3, r3, #30
 800c144:	f100 8105 	bmi.w	800c352 <_printf_float+0x462>
 800c148:	68e0      	ldr	r0, [r4, #12]
 800c14a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c14c:	4298      	cmp	r0, r3
 800c14e:	bfb8      	it	lt
 800c150:	4618      	movlt	r0, r3
 800c152:	e730      	b.n	800bfb6 <_printf_float+0xc6>
 800c154:	2301      	movs	r3, #1
 800c156:	464a      	mov	r2, r9
 800c158:	4631      	mov	r1, r6
 800c15a:	4628      	mov	r0, r5
 800c15c:	47b8      	blx	r7
 800c15e:	3001      	adds	r0, #1
 800c160:	f43f af27 	beq.w	800bfb2 <_printf_float+0xc2>
 800c164:	f108 0801 	add.w	r8, r8, #1
 800c168:	e7e6      	b.n	800c138 <_printf_float+0x248>
 800c16a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	dc39      	bgt.n	800c1e4 <_printf_float+0x2f4>
 800c170:	4a1b      	ldr	r2, [pc, #108]	; (800c1e0 <_printf_float+0x2f0>)
 800c172:	2301      	movs	r3, #1
 800c174:	4631      	mov	r1, r6
 800c176:	4628      	mov	r0, r5
 800c178:	47b8      	blx	r7
 800c17a:	3001      	adds	r0, #1
 800c17c:	f43f af19 	beq.w	800bfb2 <_printf_float+0xc2>
 800c180:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c184:	4313      	orrs	r3, r2
 800c186:	d102      	bne.n	800c18e <_printf_float+0x29e>
 800c188:	6823      	ldr	r3, [r4, #0]
 800c18a:	07d9      	lsls	r1, r3, #31
 800c18c:	d5d8      	bpl.n	800c140 <_printf_float+0x250>
 800c18e:	ee18 3a10 	vmov	r3, s16
 800c192:	4652      	mov	r2, sl
 800c194:	4631      	mov	r1, r6
 800c196:	4628      	mov	r0, r5
 800c198:	47b8      	blx	r7
 800c19a:	3001      	adds	r0, #1
 800c19c:	f43f af09 	beq.w	800bfb2 <_printf_float+0xc2>
 800c1a0:	f04f 0900 	mov.w	r9, #0
 800c1a4:	f104 0a1a 	add.w	sl, r4, #26
 800c1a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1aa:	425b      	negs	r3, r3
 800c1ac:	454b      	cmp	r3, r9
 800c1ae:	dc01      	bgt.n	800c1b4 <_printf_float+0x2c4>
 800c1b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1b2:	e792      	b.n	800c0da <_printf_float+0x1ea>
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	4652      	mov	r2, sl
 800c1b8:	4631      	mov	r1, r6
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	47b8      	blx	r7
 800c1be:	3001      	adds	r0, #1
 800c1c0:	f43f aef7 	beq.w	800bfb2 <_printf_float+0xc2>
 800c1c4:	f109 0901 	add.w	r9, r9, #1
 800c1c8:	e7ee      	b.n	800c1a8 <_printf_float+0x2b8>
 800c1ca:	bf00      	nop
 800c1cc:	7fefffff 	.word	0x7fefffff
 800c1d0:	08012014 	.word	0x08012014
 800c1d4:	08012018 	.word	0x08012018
 800c1d8:	08012020 	.word	0x08012020
 800c1dc:	0801201c 	.word	0x0801201c
 800c1e0:	08012024 	.word	0x08012024
 800c1e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	bfa8      	it	ge
 800c1ec:	461a      	movge	r2, r3
 800c1ee:	2a00      	cmp	r2, #0
 800c1f0:	4691      	mov	r9, r2
 800c1f2:	dc37      	bgt.n	800c264 <_printf_float+0x374>
 800c1f4:	f04f 0b00 	mov.w	fp, #0
 800c1f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c1fc:	f104 021a 	add.w	r2, r4, #26
 800c200:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c202:	9305      	str	r3, [sp, #20]
 800c204:	eba3 0309 	sub.w	r3, r3, r9
 800c208:	455b      	cmp	r3, fp
 800c20a:	dc33      	bgt.n	800c274 <_printf_float+0x384>
 800c20c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c210:	429a      	cmp	r2, r3
 800c212:	db3b      	blt.n	800c28c <_printf_float+0x39c>
 800c214:	6823      	ldr	r3, [r4, #0]
 800c216:	07da      	lsls	r2, r3, #31
 800c218:	d438      	bmi.n	800c28c <_printf_float+0x39c>
 800c21a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c21c:	9a05      	ldr	r2, [sp, #20]
 800c21e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c220:	1a9a      	subs	r2, r3, r2
 800c222:	eba3 0901 	sub.w	r9, r3, r1
 800c226:	4591      	cmp	r9, r2
 800c228:	bfa8      	it	ge
 800c22a:	4691      	movge	r9, r2
 800c22c:	f1b9 0f00 	cmp.w	r9, #0
 800c230:	dc35      	bgt.n	800c29e <_printf_float+0x3ae>
 800c232:	f04f 0800 	mov.w	r8, #0
 800c236:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c23a:	f104 0a1a 	add.w	sl, r4, #26
 800c23e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c242:	1a9b      	subs	r3, r3, r2
 800c244:	eba3 0309 	sub.w	r3, r3, r9
 800c248:	4543      	cmp	r3, r8
 800c24a:	f77f af79 	ble.w	800c140 <_printf_float+0x250>
 800c24e:	2301      	movs	r3, #1
 800c250:	4652      	mov	r2, sl
 800c252:	4631      	mov	r1, r6
 800c254:	4628      	mov	r0, r5
 800c256:	47b8      	blx	r7
 800c258:	3001      	adds	r0, #1
 800c25a:	f43f aeaa 	beq.w	800bfb2 <_printf_float+0xc2>
 800c25e:	f108 0801 	add.w	r8, r8, #1
 800c262:	e7ec      	b.n	800c23e <_printf_float+0x34e>
 800c264:	4613      	mov	r3, r2
 800c266:	4631      	mov	r1, r6
 800c268:	4642      	mov	r2, r8
 800c26a:	4628      	mov	r0, r5
 800c26c:	47b8      	blx	r7
 800c26e:	3001      	adds	r0, #1
 800c270:	d1c0      	bne.n	800c1f4 <_printf_float+0x304>
 800c272:	e69e      	b.n	800bfb2 <_printf_float+0xc2>
 800c274:	2301      	movs	r3, #1
 800c276:	4631      	mov	r1, r6
 800c278:	4628      	mov	r0, r5
 800c27a:	9205      	str	r2, [sp, #20]
 800c27c:	47b8      	blx	r7
 800c27e:	3001      	adds	r0, #1
 800c280:	f43f ae97 	beq.w	800bfb2 <_printf_float+0xc2>
 800c284:	9a05      	ldr	r2, [sp, #20]
 800c286:	f10b 0b01 	add.w	fp, fp, #1
 800c28a:	e7b9      	b.n	800c200 <_printf_float+0x310>
 800c28c:	ee18 3a10 	vmov	r3, s16
 800c290:	4652      	mov	r2, sl
 800c292:	4631      	mov	r1, r6
 800c294:	4628      	mov	r0, r5
 800c296:	47b8      	blx	r7
 800c298:	3001      	adds	r0, #1
 800c29a:	d1be      	bne.n	800c21a <_printf_float+0x32a>
 800c29c:	e689      	b.n	800bfb2 <_printf_float+0xc2>
 800c29e:	9a05      	ldr	r2, [sp, #20]
 800c2a0:	464b      	mov	r3, r9
 800c2a2:	4442      	add	r2, r8
 800c2a4:	4631      	mov	r1, r6
 800c2a6:	4628      	mov	r0, r5
 800c2a8:	47b8      	blx	r7
 800c2aa:	3001      	adds	r0, #1
 800c2ac:	d1c1      	bne.n	800c232 <_printf_float+0x342>
 800c2ae:	e680      	b.n	800bfb2 <_printf_float+0xc2>
 800c2b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2b2:	2a01      	cmp	r2, #1
 800c2b4:	dc01      	bgt.n	800c2ba <_printf_float+0x3ca>
 800c2b6:	07db      	lsls	r3, r3, #31
 800c2b8:	d538      	bpl.n	800c32c <_printf_float+0x43c>
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	4642      	mov	r2, r8
 800c2be:	4631      	mov	r1, r6
 800c2c0:	4628      	mov	r0, r5
 800c2c2:	47b8      	blx	r7
 800c2c4:	3001      	adds	r0, #1
 800c2c6:	f43f ae74 	beq.w	800bfb2 <_printf_float+0xc2>
 800c2ca:	ee18 3a10 	vmov	r3, s16
 800c2ce:	4652      	mov	r2, sl
 800c2d0:	4631      	mov	r1, r6
 800c2d2:	4628      	mov	r0, r5
 800c2d4:	47b8      	blx	r7
 800c2d6:	3001      	adds	r0, #1
 800c2d8:	f43f ae6b 	beq.w	800bfb2 <_printf_float+0xc2>
 800c2dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	f7f4 fc00 	bl	8000ae8 <__aeabi_dcmpeq>
 800c2e8:	b9d8      	cbnz	r0, 800c322 <_printf_float+0x432>
 800c2ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2ec:	f108 0201 	add.w	r2, r8, #1
 800c2f0:	3b01      	subs	r3, #1
 800c2f2:	4631      	mov	r1, r6
 800c2f4:	4628      	mov	r0, r5
 800c2f6:	47b8      	blx	r7
 800c2f8:	3001      	adds	r0, #1
 800c2fa:	d10e      	bne.n	800c31a <_printf_float+0x42a>
 800c2fc:	e659      	b.n	800bfb2 <_printf_float+0xc2>
 800c2fe:	2301      	movs	r3, #1
 800c300:	4652      	mov	r2, sl
 800c302:	4631      	mov	r1, r6
 800c304:	4628      	mov	r0, r5
 800c306:	47b8      	blx	r7
 800c308:	3001      	adds	r0, #1
 800c30a:	f43f ae52 	beq.w	800bfb2 <_printf_float+0xc2>
 800c30e:	f108 0801 	add.w	r8, r8, #1
 800c312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c314:	3b01      	subs	r3, #1
 800c316:	4543      	cmp	r3, r8
 800c318:	dcf1      	bgt.n	800c2fe <_printf_float+0x40e>
 800c31a:	464b      	mov	r3, r9
 800c31c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c320:	e6dc      	b.n	800c0dc <_printf_float+0x1ec>
 800c322:	f04f 0800 	mov.w	r8, #0
 800c326:	f104 0a1a 	add.w	sl, r4, #26
 800c32a:	e7f2      	b.n	800c312 <_printf_float+0x422>
 800c32c:	2301      	movs	r3, #1
 800c32e:	4642      	mov	r2, r8
 800c330:	e7df      	b.n	800c2f2 <_printf_float+0x402>
 800c332:	2301      	movs	r3, #1
 800c334:	464a      	mov	r2, r9
 800c336:	4631      	mov	r1, r6
 800c338:	4628      	mov	r0, r5
 800c33a:	47b8      	blx	r7
 800c33c:	3001      	adds	r0, #1
 800c33e:	f43f ae38 	beq.w	800bfb2 <_printf_float+0xc2>
 800c342:	f108 0801 	add.w	r8, r8, #1
 800c346:	68e3      	ldr	r3, [r4, #12]
 800c348:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c34a:	1a5b      	subs	r3, r3, r1
 800c34c:	4543      	cmp	r3, r8
 800c34e:	dcf0      	bgt.n	800c332 <_printf_float+0x442>
 800c350:	e6fa      	b.n	800c148 <_printf_float+0x258>
 800c352:	f04f 0800 	mov.w	r8, #0
 800c356:	f104 0919 	add.w	r9, r4, #25
 800c35a:	e7f4      	b.n	800c346 <_printf_float+0x456>

0800c35c <_printf_common>:
 800c35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c360:	4616      	mov	r6, r2
 800c362:	4699      	mov	r9, r3
 800c364:	688a      	ldr	r2, [r1, #8]
 800c366:	690b      	ldr	r3, [r1, #16]
 800c368:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c36c:	4293      	cmp	r3, r2
 800c36e:	bfb8      	it	lt
 800c370:	4613      	movlt	r3, r2
 800c372:	6033      	str	r3, [r6, #0]
 800c374:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c378:	4607      	mov	r7, r0
 800c37a:	460c      	mov	r4, r1
 800c37c:	b10a      	cbz	r2, 800c382 <_printf_common+0x26>
 800c37e:	3301      	adds	r3, #1
 800c380:	6033      	str	r3, [r6, #0]
 800c382:	6823      	ldr	r3, [r4, #0]
 800c384:	0699      	lsls	r1, r3, #26
 800c386:	bf42      	ittt	mi
 800c388:	6833      	ldrmi	r3, [r6, #0]
 800c38a:	3302      	addmi	r3, #2
 800c38c:	6033      	strmi	r3, [r6, #0]
 800c38e:	6825      	ldr	r5, [r4, #0]
 800c390:	f015 0506 	ands.w	r5, r5, #6
 800c394:	d106      	bne.n	800c3a4 <_printf_common+0x48>
 800c396:	f104 0a19 	add.w	sl, r4, #25
 800c39a:	68e3      	ldr	r3, [r4, #12]
 800c39c:	6832      	ldr	r2, [r6, #0]
 800c39e:	1a9b      	subs	r3, r3, r2
 800c3a0:	42ab      	cmp	r3, r5
 800c3a2:	dc26      	bgt.n	800c3f2 <_printf_common+0x96>
 800c3a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c3a8:	1e13      	subs	r3, r2, #0
 800c3aa:	6822      	ldr	r2, [r4, #0]
 800c3ac:	bf18      	it	ne
 800c3ae:	2301      	movne	r3, #1
 800c3b0:	0692      	lsls	r2, r2, #26
 800c3b2:	d42b      	bmi.n	800c40c <_printf_common+0xb0>
 800c3b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3b8:	4649      	mov	r1, r9
 800c3ba:	4638      	mov	r0, r7
 800c3bc:	47c0      	blx	r8
 800c3be:	3001      	adds	r0, #1
 800c3c0:	d01e      	beq.n	800c400 <_printf_common+0xa4>
 800c3c2:	6823      	ldr	r3, [r4, #0]
 800c3c4:	68e5      	ldr	r5, [r4, #12]
 800c3c6:	6832      	ldr	r2, [r6, #0]
 800c3c8:	f003 0306 	and.w	r3, r3, #6
 800c3cc:	2b04      	cmp	r3, #4
 800c3ce:	bf08      	it	eq
 800c3d0:	1aad      	subeq	r5, r5, r2
 800c3d2:	68a3      	ldr	r3, [r4, #8]
 800c3d4:	6922      	ldr	r2, [r4, #16]
 800c3d6:	bf0c      	ite	eq
 800c3d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c3dc:	2500      	movne	r5, #0
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	bfc4      	itt	gt
 800c3e2:	1a9b      	subgt	r3, r3, r2
 800c3e4:	18ed      	addgt	r5, r5, r3
 800c3e6:	2600      	movs	r6, #0
 800c3e8:	341a      	adds	r4, #26
 800c3ea:	42b5      	cmp	r5, r6
 800c3ec:	d11a      	bne.n	800c424 <_printf_common+0xc8>
 800c3ee:	2000      	movs	r0, #0
 800c3f0:	e008      	b.n	800c404 <_printf_common+0xa8>
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	4652      	mov	r2, sl
 800c3f6:	4649      	mov	r1, r9
 800c3f8:	4638      	mov	r0, r7
 800c3fa:	47c0      	blx	r8
 800c3fc:	3001      	adds	r0, #1
 800c3fe:	d103      	bne.n	800c408 <_printf_common+0xac>
 800c400:	f04f 30ff 	mov.w	r0, #4294967295
 800c404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c408:	3501      	adds	r5, #1
 800c40a:	e7c6      	b.n	800c39a <_printf_common+0x3e>
 800c40c:	18e1      	adds	r1, r4, r3
 800c40e:	1c5a      	adds	r2, r3, #1
 800c410:	2030      	movs	r0, #48	; 0x30
 800c412:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c416:	4422      	add	r2, r4
 800c418:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c41c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c420:	3302      	adds	r3, #2
 800c422:	e7c7      	b.n	800c3b4 <_printf_common+0x58>
 800c424:	2301      	movs	r3, #1
 800c426:	4622      	mov	r2, r4
 800c428:	4649      	mov	r1, r9
 800c42a:	4638      	mov	r0, r7
 800c42c:	47c0      	blx	r8
 800c42e:	3001      	adds	r0, #1
 800c430:	d0e6      	beq.n	800c400 <_printf_common+0xa4>
 800c432:	3601      	adds	r6, #1
 800c434:	e7d9      	b.n	800c3ea <_printf_common+0x8e>
	...

0800c438 <_printf_i>:
 800c438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c43c:	7e0f      	ldrb	r7, [r1, #24]
 800c43e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c440:	2f78      	cmp	r7, #120	; 0x78
 800c442:	4691      	mov	r9, r2
 800c444:	4680      	mov	r8, r0
 800c446:	460c      	mov	r4, r1
 800c448:	469a      	mov	sl, r3
 800c44a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c44e:	d807      	bhi.n	800c460 <_printf_i+0x28>
 800c450:	2f62      	cmp	r7, #98	; 0x62
 800c452:	d80a      	bhi.n	800c46a <_printf_i+0x32>
 800c454:	2f00      	cmp	r7, #0
 800c456:	f000 80d8 	beq.w	800c60a <_printf_i+0x1d2>
 800c45a:	2f58      	cmp	r7, #88	; 0x58
 800c45c:	f000 80a3 	beq.w	800c5a6 <_printf_i+0x16e>
 800c460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c464:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c468:	e03a      	b.n	800c4e0 <_printf_i+0xa8>
 800c46a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c46e:	2b15      	cmp	r3, #21
 800c470:	d8f6      	bhi.n	800c460 <_printf_i+0x28>
 800c472:	a101      	add	r1, pc, #4	; (adr r1, 800c478 <_printf_i+0x40>)
 800c474:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c478:	0800c4d1 	.word	0x0800c4d1
 800c47c:	0800c4e5 	.word	0x0800c4e5
 800c480:	0800c461 	.word	0x0800c461
 800c484:	0800c461 	.word	0x0800c461
 800c488:	0800c461 	.word	0x0800c461
 800c48c:	0800c461 	.word	0x0800c461
 800c490:	0800c4e5 	.word	0x0800c4e5
 800c494:	0800c461 	.word	0x0800c461
 800c498:	0800c461 	.word	0x0800c461
 800c49c:	0800c461 	.word	0x0800c461
 800c4a0:	0800c461 	.word	0x0800c461
 800c4a4:	0800c5f1 	.word	0x0800c5f1
 800c4a8:	0800c515 	.word	0x0800c515
 800c4ac:	0800c5d3 	.word	0x0800c5d3
 800c4b0:	0800c461 	.word	0x0800c461
 800c4b4:	0800c461 	.word	0x0800c461
 800c4b8:	0800c613 	.word	0x0800c613
 800c4bc:	0800c461 	.word	0x0800c461
 800c4c0:	0800c515 	.word	0x0800c515
 800c4c4:	0800c461 	.word	0x0800c461
 800c4c8:	0800c461 	.word	0x0800c461
 800c4cc:	0800c5db 	.word	0x0800c5db
 800c4d0:	682b      	ldr	r3, [r5, #0]
 800c4d2:	1d1a      	adds	r2, r3, #4
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	602a      	str	r2, [r5, #0]
 800c4d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	e0a3      	b.n	800c62c <_printf_i+0x1f4>
 800c4e4:	6820      	ldr	r0, [r4, #0]
 800c4e6:	6829      	ldr	r1, [r5, #0]
 800c4e8:	0606      	lsls	r6, r0, #24
 800c4ea:	f101 0304 	add.w	r3, r1, #4
 800c4ee:	d50a      	bpl.n	800c506 <_printf_i+0xce>
 800c4f0:	680e      	ldr	r6, [r1, #0]
 800c4f2:	602b      	str	r3, [r5, #0]
 800c4f4:	2e00      	cmp	r6, #0
 800c4f6:	da03      	bge.n	800c500 <_printf_i+0xc8>
 800c4f8:	232d      	movs	r3, #45	; 0x2d
 800c4fa:	4276      	negs	r6, r6
 800c4fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c500:	485e      	ldr	r0, [pc, #376]	; (800c67c <_printf_i+0x244>)
 800c502:	230a      	movs	r3, #10
 800c504:	e019      	b.n	800c53a <_printf_i+0x102>
 800c506:	680e      	ldr	r6, [r1, #0]
 800c508:	602b      	str	r3, [r5, #0]
 800c50a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c50e:	bf18      	it	ne
 800c510:	b236      	sxthne	r6, r6
 800c512:	e7ef      	b.n	800c4f4 <_printf_i+0xbc>
 800c514:	682b      	ldr	r3, [r5, #0]
 800c516:	6820      	ldr	r0, [r4, #0]
 800c518:	1d19      	adds	r1, r3, #4
 800c51a:	6029      	str	r1, [r5, #0]
 800c51c:	0601      	lsls	r1, r0, #24
 800c51e:	d501      	bpl.n	800c524 <_printf_i+0xec>
 800c520:	681e      	ldr	r6, [r3, #0]
 800c522:	e002      	b.n	800c52a <_printf_i+0xf2>
 800c524:	0646      	lsls	r6, r0, #25
 800c526:	d5fb      	bpl.n	800c520 <_printf_i+0xe8>
 800c528:	881e      	ldrh	r6, [r3, #0]
 800c52a:	4854      	ldr	r0, [pc, #336]	; (800c67c <_printf_i+0x244>)
 800c52c:	2f6f      	cmp	r7, #111	; 0x6f
 800c52e:	bf0c      	ite	eq
 800c530:	2308      	moveq	r3, #8
 800c532:	230a      	movne	r3, #10
 800c534:	2100      	movs	r1, #0
 800c536:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c53a:	6865      	ldr	r5, [r4, #4]
 800c53c:	60a5      	str	r5, [r4, #8]
 800c53e:	2d00      	cmp	r5, #0
 800c540:	bfa2      	ittt	ge
 800c542:	6821      	ldrge	r1, [r4, #0]
 800c544:	f021 0104 	bicge.w	r1, r1, #4
 800c548:	6021      	strge	r1, [r4, #0]
 800c54a:	b90e      	cbnz	r6, 800c550 <_printf_i+0x118>
 800c54c:	2d00      	cmp	r5, #0
 800c54e:	d04d      	beq.n	800c5ec <_printf_i+0x1b4>
 800c550:	4615      	mov	r5, r2
 800c552:	fbb6 f1f3 	udiv	r1, r6, r3
 800c556:	fb03 6711 	mls	r7, r3, r1, r6
 800c55a:	5dc7      	ldrb	r7, [r0, r7]
 800c55c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c560:	4637      	mov	r7, r6
 800c562:	42bb      	cmp	r3, r7
 800c564:	460e      	mov	r6, r1
 800c566:	d9f4      	bls.n	800c552 <_printf_i+0x11a>
 800c568:	2b08      	cmp	r3, #8
 800c56a:	d10b      	bne.n	800c584 <_printf_i+0x14c>
 800c56c:	6823      	ldr	r3, [r4, #0]
 800c56e:	07de      	lsls	r6, r3, #31
 800c570:	d508      	bpl.n	800c584 <_printf_i+0x14c>
 800c572:	6923      	ldr	r3, [r4, #16]
 800c574:	6861      	ldr	r1, [r4, #4]
 800c576:	4299      	cmp	r1, r3
 800c578:	bfde      	ittt	le
 800c57a:	2330      	movle	r3, #48	; 0x30
 800c57c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c580:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c584:	1b52      	subs	r2, r2, r5
 800c586:	6122      	str	r2, [r4, #16]
 800c588:	f8cd a000 	str.w	sl, [sp]
 800c58c:	464b      	mov	r3, r9
 800c58e:	aa03      	add	r2, sp, #12
 800c590:	4621      	mov	r1, r4
 800c592:	4640      	mov	r0, r8
 800c594:	f7ff fee2 	bl	800c35c <_printf_common>
 800c598:	3001      	adds	r0, #1
 800c59a:	d14c      	bne.n	800c636 <_printf_i+0x1fe>
 800c59c:	f04f 30ff 	mov.w	r0, #4294967295
 800c5a0:	b004      	add	sp, #16
 800c5a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5a6:	4835      	ldr	r0, [pc, #212]	; (800c67c <_printf_i+0x244>)
 800c5a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c5ac:	6829      	ldr	r1, [r5, #0]
 800c5ae:	6823      	ldr	r3, [r4, #0]
 800c5b0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c5b4:	6029      	str	r1, [r5, #0]
 800c5b6:	061d      	lsls	r5, r3, #24
 800c5b8:	d514      	bpl.n	800c5e4 <_printf_i+0x1ac>
 800c5ba:	07df      	lsls	r7, r3, #31
 800c5bc:	bf44      	itt	mi
 800c5be:	f043 0320 	orrmi.w	r3, r3, #32
 800c5c2:	6023      	strmi	r3, [r4, #0]
 800c5c4:	b91e      	cbnz	r6, 800c5ce <_printf_i+0x196>
 800c5c6:	6823      	ldr	r3, [r4, #0]
 800c5c8:	f023 0320 	bic.w	r3, r3, #32
 800c5cc:	6023      	str	r3, [r4, #0]
 800c5ce:	2310      	movs	r3, #16
 800c5d0:	e7b0      	b.n	800c534 <_printf_i+0xfc>
 800c5d2:	6823      	ldr	r3, [r4, #0]
 800c5d4:	f043 0320 	orr.w	r3, r3, #32
 800c5d8:	6023      	str	r3, [r4, #0]
 800c5da:	2378      	movs	r3, #120	; 0x78
 800c5dc:	4828      	ldr	r0, [pc, #160]	; (800c680 <_printf_i+0x248>)
 800c5de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c5e2:	e7e3      	b.n	800c5ac <_printf_i+0x174>
 800c5e4:	0659      	lsls	r1, r3, #25
 800c5e6:	bf48      	it	mi
 800c5e8:	b2b6      	uxthmi	r6, r6
 800c5ea:	e7e6      	b.n	800c5ba <_printf_i+0x182>
 800c5ec:	4615      	mov	r5, r2
 800c5ee:	e7bb      	b.n	800c568 <_printf_i+0x130>
 800c5f0:	682b      	ldr	r3, [r5, #0]
 800c5f2:	6826      	ldr	r6, [r4, #0]
 800c5f4:	6961      	ldr	r1, [r4, #20]
 800c5f6:	1d18      	adds	r0, r3, #4
 800c5f8:	6028      	str	r0, [r5, #0]
 800c5fa:	0635      	lsls	r5, r6, #24
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	d501      	bpl.n	800c604 <_printf_i+0x1cc>
 800c600:	6019      	str	r1, [r3, #0]
 800c602:	e002      	b.n	800c60a <_printf_i+0x1d2>
 800c604:	0670      	lsls	r0, r6, #25
 800c606:	d5fb      	bpl.n	800c600 <_printf_i+0x1c8>
 800c608:	8019      	strh	r1, [r3, #0]
 800c60a:	2300      	movs	r3, #0
 800c60c:	6123      	str	r3, [r4, #16]
 800c60e:	4615      	mov	r5, r2
 800c610:	e7ba      	b.n	800c588 <_printf_i+0x150>
 800c612:	682b      	ldr	r3, [r5, #0]
 800c614:	1d1a      	adds	r2, r3, #4
 800c616:	602a      	str	r2, [r5, #0]
 800c618:	681d      	ldr	r5, [r3, #0]
 800c61a:	6862      	ldr	r2, [r4, #4]
 800c61c:	2100      	movs	r1, #0
 800c61e:	4628      	mov	r0, r5
 800c620:	f7f3 fdee 	bl	8000200 <memchr>
 800c624:	b108      	cbz	r0, 800c62a <_printf_i+0x1f2>
 800c626:	1b40      	subs	r0, r0, r5
 800c628:	6060      	str	r0, [r4, #4]
 800c62a:	6863      	ldr	r3, [r4, #4]
 800c62c:	6123      	str	r3, [r4, #16]
 800c62e:	2300      	movs	r3, #0
 800c630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c634:	e7a8      	b.n	800c588 <_printf_i+0x150>
 800c636:	6923      	ldr	r3, [r4, #16]
 800c638:	462a      	mov	r2, r5
 800c63a:	4649      	mov	r1, r9
 800c63c:	4640      	mov	r0, r8
 800c63e:	47d0      	blx	sl
 800c640:	3001      	adds	r0, #1
 800c642:	d0ab      	beq.n	800c59c <_printf_i+0x164>
 800c644:	6823      	ldr	r3, [r4, #0]
 800c646:	079b      	lsls	r3, r3, #30
 800c648:	d413      	bmi.n	800c672 <_printf_i+0x23a>
 800c64a:	68e0      	ldr	r0, [r4, #12]
 800c64c:	9b03      	ldr	r3, [sp, #12]
 800c64e:	4298      	cmp	r0, r3
 800c650:	bfb8      	it	lt
 800c652:	4618      	movlt	r0, r3
 800c654:	e7a4      	b.n	800c5a0 <_printf_i+0x168>
 800c656:	2301      	movs	r3, #1
 800c658:	4632      	mov	r2, r6
 800c65a:	4649      	mov	r1, r9
 800c65c:	4640      	mov	r0, r8
 800c65e:	47d0      	blx	sl
 800c660:	3001      	adds	r0, #1
 800c662:	d09b      	beq.n	800c59c <_printf_i+0x164>
 800c664:	3501      	adds	r5, #1
 800c666:	68e3      	ldr	r3, [r4, #12]
 800c668:	9903      	ldr	r1, [sp, #12]
 800c66a:	1a5b      	subs	r3, r3, r1
 800c66c:	42ab      	cmp	r3, r5
 800c66e:	dcf2      	bgt.n	800c656 <_printf_i+0x21e>
 800c670:	e7eb      	b.n	800c64a <_printf_i+0x212>
 800c672:	2500      	movs	r5, #0
 800c674:	f104 0619 	add.w	r6, r4, #25
 800c678:	e7f5      	b.n	800c666 <_printf_i+0x22e>
 800c67a:	bf00      	nop
 800c67c:	08012026 	.word	0x08012026
 800c680:	08012037 	.word	0x08012037

0800c684 <_scanf_float>:
 800c684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c688:	b087      	sub	sp, #28
 800c68a:	4617      	mov	r7, r2
 800c68c:	9303      	str	r3, [sp, #12]
 800c68e:	688b      	ldr	r3, [r1, #8]
 800c690:	1e5a      	subs	r2, r3, #1
 800c692:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c696:	bf83      	ittte	hi
 800c698:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c69c:	195b      	addhi	r3, r3, r5
 800c69e:	9302      	strhi	r3, [sp, #8]
 800c6a0:	2300      	movls	r3, #0
 800c6a2:	bf86      	itte	hi
 800c6a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c6a8:	608b      	strhi	r3, [r1, #8]
 800c6aa:	9302      	strls	r3, [sp, #8]
 800c6ac:	680b      	ldr	r3, [r1, #0]
 800c6ae:	468b      	mov	fp, r1
 800c6b0:	2500      	movs	r5, #0
 800c6b2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c6b6:	f84b 3b1c 	str.w	r3, [fp], #28
 800c6ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c6be:	4680      	mov	r8, r0
 800c6c0:	460c      	mov	r4, r1
 800c6c2:	465e      	mov	r6, fp
 800c6c4:	46aa      	mov	sl, r5
 800c6c6:	46a9      	mov	r9, r5
 800c6c8:	9501      	str	r5, [sp, #4]
 800c6ca:	68a2      	ldr	r2, [r4, #8]
 800c6cc:	b152      	cbz	r2, 800c6e4 <_scanf_float+0x60>
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	2b4e      	cmp	r3, #78	; 0x4e
 800c6d4:	d864      	bhi.n	800c7a0 <_scanf_float+0x11c>
 800c6d6:	2b40      	cmp	r3, #64	; 0x40
 800c6d8:	d83c      	bhi.n	800c754 <_scanf_float+0xd0>
 800c6da:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c6de:	b2c8      	uxtb	r0, r1
 800c6e0:	280e      	cmp	r0, #14
 800c6e2:	d93a      	bls.n	800c75a <_scanf_float+0xd6>
 800c6e4:	f1b9 0f00 	cmp.w	r9, #0
 800c6e8:	d003      	beq.n	800c6f2 <_scanf_float+0x6e>
 800c6ea:	6823      	ldr	r3, [r4, #0]
 800c6ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c6f0:	6023      	str	r3, [r4, #0]
 800c6f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c6f6:	f1ba 0f01 	cmp.w	sl, #1
 800c6fa:	f200 8113 	bhi.w	800c924 <_scanf_float+0x2a0>
 800c6fe:	455e      	cmp	r6, fp
 800c700:	f200 8105 	bhi.w	800c90e <_scanf_float+0x28a>
 800c704:	2501      	movs	r5, #1
 800c706:	4628      	mov	r0, r5
 800c708:	b007      	add	sp, #28
 800c70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c70e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c712:	2a0d      	cmp	r2, #13
 800c714:	d8e6      	bhi.n	800c6e4 <_scanf_float+0x60>
 800c716:	a101      	add	r1, pc, #4	; (adr r1, 800c71c <_scanf_float+0x98>)
 800c718:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c71c:	0800c85b 	.word	0x0800c85b
 800c720:	0800c6e5 	.word	0x0800c6e5
 800c724:	0800c6e5 	.word	0x0800c6e5
 800c728:	0800c6e5 	.word	0x0800c6e5
 800c72c:	0800c8bb 	.word	0x0800c8bb
 800c730:	0800c893 	.word	0x0800c893
 800c734:	0800c6e5 	.word	0x0800c6e5
 800c738:	0800c6e5 	.word	0x0800c6e5
 800c73c:	0800c869 	.word	0x0800c869
 800c740:	0800c6e5 	.word	0x0800c6e5
 800c744:	0800c6e5 	.word	0x0800c6e5
 800c748:	0800c6e5 	.word	0x0800c6e5
 800c74c:	0800c6e5 	.word	0x0800c6e5
 800c750:	0800c821 	.word	0x0800c821
 800c754:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c758:	e7db      	b.n	800c712 <_scanf_float+0x8e>
 800c75a:	290e      	cmp	r1, #14
 800c75c:	d8c2      	bhi.n	800c6e4 <_scanf_float+0x60>
 800c75e:	a001      	add	r0, pc, #4	; (adr r0, 800c764 <_scanf_float+0xe0>)
 800c760:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c764:	0800c813 	.word	0x0800c813
 800c768:	0800c6e5 	.word	0x0800c6e5
 800c76c:	0800c813 	.word	0x0800c813
 800c770:	0800c8a7 	.word	0x0800c8a7
 800c774:	0800c6e5 	.word	0x0800c6e5
 800c778:	0800c7c1 	.word	0x0800c7c1
 800c77c:	0800c7fd 	.word	0x0800c7fd
 800c780:	0800c7fd 	.word	0x0800c7fd
 800c784:	0800c7fd 	.word	0x0800c7fd
 800c788:	0800c7fd 	.word	0x0800c7fd
 800c78c:	0800c7fd 	.word	0x0800c7fd
 800c790:	0800c7fd 	.word	0x0800c7fd
 800c794:	0800c7fd 	.word	0x0800c7fd
 800c798:	0800c7fd 	.word	0x0800c7fd
 800c79c:	0800c7fd 	.word	0x0800c7fd
 800c7a0:	2b6e      	cmp	r3, #110	; 0x6e
 800c7a2:	d809      	bhi.n	800c7b8 <_scanf_float+0x134>
 800c7a4:	2b60      	cmp	r3, #96	; 0x60
 800c7a6:	d8b2      	bhi.n	800c70e <_scanf_float+0x8a>
 800c7a8:	2b54      	cmp	r3, #84	; 0x54
 800c7aa:	d077      	beq.n	800c89c <_scanf_float+0x218>
 800c7ac:	2b59      	cmp	r3, #89	; 0x59
 800c7ae:	d199      	bne.n	800c6e4 <_scanf_float+0x60>
 800c7b0:	2d07      	cmp	r5, #7
 800c7b2:	d197      	bne.n	800c6e4 <_scanf_float+0x60>
 800c7b4:	2508      	movs	r5, #8
 800c7b6:	e029      	b.n	800c80c <_scanf_float+0x188>
 800c7b8:	2b74      	cmp	r3, #116	; 0x74
 800c7ba:	d06f      	beq.n	800c89c <_scanf_float+0x218>
 800c7bc:	2b79      	cmp	r3, #121	; 0x79
 800c7be:	e7f6      	b.n	800c7ae <_scanf_float+0x12a>
 800c7c0:	6821      	ldr	r1, [r4, #0]
 800c7c2:	05c8      	lsls	r0, r1, #23
 800c7c4:	d51a      	bpl.n	800c7fc <_scanf_float+0x178>
 800c7c6:	9b02      	ldr	r3, [sp, #8]
 800c7c8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c7cc:	6021      	str	r1, [r4, #0]
 800c7ce:	f109 0901 	add.w	r9, r9, #1
 800c7d2:	b11b      	cbz	r3, 800c7dc <_scanf_float+0x158>
 800c7d4:	3b01      	subs	r3, #1
 800c7d6:	3201      	adds	r2, #1
 800c7d8:	9302      	str	r3, [sp, #8]
 800c7da:	60a2      	str	r2, [r4, #8]
 800c7dc:	68a3      	ldr	r3, [r4, #8]
 800c7de:	3b01      	subs	r3, #1
 800c7e0:	60a3      	str	r3, [r4, #8]
 800c7e2:	6923      	ldr	r3, [r4, #16]
 800c7e4:	3301      	adds	r3, #1
 800c7e6:	6123      	str	r3, [r4, #16]
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	3b01      	subs	r3, #1
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	607b      	str	r3, [r7, #4]
 800c7f0:	f340 8084 	ble.w	800c8fc <_scanf_float+0x278>
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	603b      	str	r3, [r7, #0]
 800c7fa:	e766      	b.n	800c6ca <_scanf_float+0x46>
 800c7fc:	eb1a 0f05 	cmn.w	sl, r5
 800c800:	f47f af70 	bne.w	800c6e4 <_scanf_float+0x60>
 800c804:	6822      	ldr	r2, [r4, #0]
 800c806:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c80a:	6022      	str	r2, [r4, #0]
 800c80c:	f806 3b01 	strb.w	r3, [r6], #1
 800c810:	e7e4      	b.n	800c7dc <_scanf_float+0x158>
 800c812:	6822      	ldr	r2, [r4, #0]
 800c814:	0610      	lsls	r0, r2, #24
 800c816:	f57f af65 	bpl.w	800c6e4 <_scanf_float+0x60>
 800c81a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c81e:	e7f4      	b.n	800c80a <_scanf_float+0x186>
 800c820:	f1ba 0f00 	cmp.w	sl, #0
 800c824:	d10e      	bne.n	800c844 <_scanf_float+0x1c0>
 800c826:	f1b9 0f00 	cmp.w	r9, #0
 800c82a:	d10e      	bne.n	800c84a <_scanf_float+0x1c6>
 800c82c:	6822      	ldr	r2, [r4, #0]
 800c82e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c832:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c836:	d108      	bne.n	800c84a <_scanf_float+0x1c6>
 800c838:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c83c:	6022      	str	r2, [r4, #0]
 800c83e:	f04f 0a01 	mov.w	sl, #1
 800c842:	e7e3      	b.n	800c80c <_scanf_float+0x188>
 800c844:	f1ba 0f02 	cmp.w	sl, #2
 800c848:	d055      	beq.n	800c8f6 <_scanf_float+0x272>
 800c84a:	2d01      	cmp	r5, #1
 800c84c:	d002      	beq.n	800c854 <_scanf_float+0x1d0>
 800c84e:	2d04      	cmp	r5, #4
 800c850:	f47f af48 	bne.w	800c6e4 <_scanf_float+0x60>
 800c854:	3501      	adds	r5, #1
 800c856:	b2ed      	uxtb	r5, r5
 800c858:	e7d8      	b.n	800c80c <_scanf_float+0x188>
 800c85a:	f1ba 0f01 	cmp.w	sl, #1
 800c85e:	f47f af41 	bne.w	800c6e4 <_scanf_float+0x60>
 800c862:	f04f 0a02 	mov.w	sl, #2
 800c866:	e7d1      	b.n	800c80c <_scanf_float+0x188>
 800c868:	b97d      	cbnz	r5, 800c88a <_scanf_float+0x206>
 800c86a:	f1b9 0f00 	cmp.w	r9, #0
 800c86e:	f47f af3c 	bne.w	800c6ea <_scanf_float+0x66>
 800c872:	6822      	ldr	r2, [r4, #0]
 800c874:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c878:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c87c:	f47f af39 	bne.w	800c6f2 <_scanf_float+0x6e>
 800c880:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c884:	6022      	str	r2, [r4, #0]
 800c886:	2501      	movs	r5, #1
 800c888:	e7c0      	b.n	800c80c <_scanf_float+0x188>
 800c88a:	2d03      	cmp	r5, #3
 800c88c:	d0e2      	beq.n	800c854 <_scanf_float+0x1d0>
 800c88e:	2d05      	cmp	r5, #5
 800c890:	e7de      	b.n	800c850 <_scanf_float+0x1cc>
 800c892:	2d02      	cmp	r5, #2
 800c894:	f47f af26 	bne.w	800c6e4 <_scanf_float+0x60>
 800c898:	2503      	movs	r5, #3
 800c89a:	e7b7      	b.n	800c80c <_scanf_float+0x188>
 800c89c:	2d06      	cmp	r5, #6
 800c89e:	f47f af21 	bne.w	800c6e4 <_scanf_float+0x60>
 800c8a2:	2507      	movs	r5, #7
 800c8a4:	e7b2      	b.n	800c80c <_scanf_float+0x188>
 800c8a6:	6822      	ldr	r2, [r4, #0]
 800c8a8:	0591      	lsls	r1, r2, #22
 800c8aa:	f57f af1b 	bpl.w	800c6e4 <_scanf_float+0x60>
 800c8ae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c8b2:	6022      	str	r2, [r4, #0]
 800c8b4:	f8cd 9004 	str.w	r9, [sp, #4]
 800c8b8:	e7a8      	b.n	800c80c <_scanf_float+0x188>
 800c8ba:	6822      	ldr	r2, [r4, #0]
 800c8bc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c8c0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c8c4:	d006      	beq.n	800c8d4 <_scanf_float+0x250>
 800c8c6:	0550      	lsls	r0, r2, #21
 800c8c8:	f57f af0c 	bpl.w	800c6e4 <_scanf_float+0x60>
 800c8cc:	f1b9 0f00 	cmp.w	r9, #0
 800c8d0:	f43f af0f 	beq.w	800c6f2 <_scanf_float+0x6e>
 800c8d4:	0591      	lsls	r1, r2, #22
 800c8d6:	bf58      	it	pl
 800c8d8:	9901      	ldrpl	r1, [sp, #4]
 800c8da:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c8de:	bf58      	it	pl
 800c8e0:	eba9 0101 	subpl.w	r1, r9, r1
 800c8e4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c8e8:	bf58      	it	pl
 800c8ea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c8ee:	6022      	str	r2, [r4, #0]
 800c8f0:	f04f 0900 	mov.w	r9, #0
 800c8f4:	e78a      	b.n	800c80c <_scanf_float+0x188>
 800c8f6:	f04f 0a03 	mov.w	sl, #3
 800c8fa:	e787      	b.n	800c80c <_scanf_float+0x188>
 800c8fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c900:	4639      	mov	r1, r7
 800c902:	4640      	mov	r0, r8
 800c904:	4798      	blx	r3
 800c906:	2800      	cmp	r0, #0
 800c908:	f43f aedf 	beq.w	800c6ca <_scanf_float+0x46>
 800c90c:	e6ea      	b.n	800c6e4 <_scanf_float+0x60>
 800c90e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c912:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c916:	463a      	mov	r2, r7
 800c918:	4640      	mov	r0, r8
 800c91a:	4798      	blx	r3
 800c91c:	6923      	ldr	r3, [r4, #16]
 800c91e:	3b01      	subs	r3, #1
 800c920:	6123      	str	r3, [r4, #16]
 800c922:	e6ec      	b.n	800c6fe <_scanf_float+0x7a>
 800c924:	1e6b      	subs	r3, r5, #1
 800c926:	2b06      	cmp	r3, #6
 800c928:	d825      	bhi.n	800c976 <_scanf_float+0x2f2>
 800c92a:	2d02      	cmp	r5, #2
 800c92c:	d836      	bhi.n	800c99c <_scanf_float+0x318>
 800c92e:	455e      	cmp	r6, fp
 800c930:	f67f aee8 	bls.w	800c704 <_scanf_float+0x80>
 800c934:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c938:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c93c:	463a      	mov	r2, r7
 800c93e:	4640      	mov	r0, r8
 800c940:	4798      	blx	r3
 800c942:	6923      	ldr	r3, [r4, #16]
 800c944:	3b01      	subs	r3, #1
 800c946:	6123      	str	r3, [r4, #16]
 800c948:	e7f1      	b.n	800c92e <_scanf_float+0x2aa>
 800c94a:	9802      	ldr	r0, [sp, #8]
 800c94c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c950:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c954:	9002      	str	r0, [sp, #8]
 800c956:	463a      	mov	r2, r7
 800c958:	4640      	mov	r0, r8
 800c95a:	4798      	blx	r3
 800c95c:	6923      	ldr	r3, [r4, #16]
 800c95e:	3b01      	subs	r3, #1
 800c960:	6123      	str	r3, [r4, #16]
 800c962:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c966:	fa5f fa8a 	uxtb.w	sl, sl
 800c96a:	f1ba 0f02 	cmp.w	sl, #2
 800c96e:	d1ec      	bne.n	800c94a <_scanf_float+0x2c6>
 800c970:	3d03      	subs	r5, #3
 800c972:	b2ed      	uxtb	r5, r5
 800c974:	1b76      	subs	r6, r6, r5
 800c976:	6823      	ldr	r3, [r4, #0]
 800c978:	05da      	lsls	r2, r3, #23
 800c97a:	d52f      	bpl.n	800c9dc <_scanf_float+0x358>
 800c97c:	055b      	lsls	r3, r3, #21
 800c97e:	d510      	bpl.n	800c9a2 <_scanf_float+0x31e>
 800c980:	455e      	cmp	r6, fp
 800c982:	f67f aebf 	bls.w	800c704 <_scanf_float+0x80>
 800c986:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c98a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c98e:	463a      	mov	r2, r7
 800c990:	4640      	mov	r0, r8
 800c992:	4798      	blx	r3
 800c994:	6923      	ldr	r3, [r4, #16]
 800c996:	3b01      	subs	r3, #1
 800c998:	6123      	str	r3, [r4, #16]
 800c99a:	e7f1      	b.n	800c980 <_scanf_float+0x2fc>
 800c99c:	46aa      	mov	sl, r5
 800c99e:	9602      	str	r6, [sp, #8]
 800c9a0:	e7df      	b.n	800c962 <_scanf_float+0x2de>
 800c9a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c9a6:	6923      	ldr	r3, [r4, #16]
 800c9a8:	2965      	cmp	r1, #101	; 0x65
 800c9aa:	f103 33ff 	add.w	r3, r3, #4294967295
 800c9ae:	f106 35ff 	add.w	r5, r6, #4294967295
 800c9b2:	6123      	str	r3, [r4, #16]
 800c9b4:	d00c      	beq.n	800c9d0 <_scanf_float+0x34c>
 800c9b6:	2945      	cmp	r1, #69	; 0x45
 800c9b8:	d00a      	beq.n	800c9d0 <_scanf_float+0x34c>
 800c9ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c9be:	463a      	mov	r2, r7
 800c9c0:	4640      	mov	r0, r8
 800c9c2:	4798      	blx	r3
 800c9c4:	6923      	ldr	r3, [r4, #16]
 800c9c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c9ca:	3b01      	subs	r3, #1
 800c9cc:	1eb5      	subs	r5, r6, #2
 800c9ce:	6123      	str	r3, [r4, #16]
 800c9d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c9d4:	463a      	mov	r2, r7
 800c9d6:	4640      	mov	r0, r8
 800c9d8:	4798      	blx	r3
 800c9da:	462e      	mov	r6, r5
 800c9dc:	6825      	ldr	r5, [r4, #0]
 800c9de:	f015 0510 	ands.w	r5, r5, #16
 800c9e2:	d159      	bne.n	800ca98 <_scanf_float+0x414>
 800c9e4:	7035      	strb	r5, [r6, #0]
 800c9e6:	6823      	ldr	r3, [r4, #0]
 800c9e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c9ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c9f0:	d11b      	bne.n	800ca2a <_scanf_float+0x3a6>
 800c9f2:	9b01      	ldr	r3, [sp, #4]
 800c9f4:	454b      	cmp	r3, r9
 800c9f6:	eba3 0209 	sub.w	r2, r3, r9
 800c9fa:	d123      	bne.n	800ca44 <_scanf_float+0x3c0>
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	4659      	mov	r1, fp
 800ca00:	4640      	mov	r0, r8
 800ca02:	f000 ff57 	bl	800d8b4 <_strtod_r>
 800ca06:	6822      	ldr	r2, [r4, #0]
 800ca08:	9b03      	ldr	r3, [sp, #12]
 800ca0a:	f012 0f02 	tst.w	r2, #2
 800ca0e:	ec57 6b10 	vmov	r6, r7, d0
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	d021      	beq.n	800ca5a <_scanf_float+0x3d6>
 800ca16:	9903      	ldr	r1, [sp, #12]
 800ca18:	1d1a      	adds	r2, r3, #4
 800ca1a:	600a      	str	r2, [r1, #0]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	e9c3 6700 	strd	r6, r7, [r3]
 800ca22:	68e3      	ldr	r3, [r4, #12]
 800ca24:	3301      	adds	r3, #1
 800ca26:	60e3      	str	r3, [r4, #12]
 800ca28:	e66d      	b.n	800c706 <_scanf_float+0x82>
 800ca2a:	9b04      	ldr	r3, [sp, #16]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d0e5      	beq.n	800c9fc <_scanf_float+0x378>
 800ca30:	9905      	ldr	r1, [sp, #20]
 800ca32:	230a      	movs	r3, #10
 800ca34:	462a      	mov	r2, r5
 800ca36:	3101      	adds	r1, #1
 800ca38:	4640      	mov	r0, r8
 800ca3a:	f000 ffc3 	bl	800d9c4 <_strtol_r>
 800ca3e:	9b04      	ldr	r3, [sp, #16]
 800ca40:	9e05      	ldr	r6, [sp, #20]
 800ca42:	1ac2      	subs	r2, r0, r3
 800ca44:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ca48:	429e      	cmp	r6, r3
 800ca4a:	bf28      	it	cs
 800ca4c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ca50:	4912      	ldr	r1, [pc, #72]	; (800ca9c <_scanf_float+0x418>)
 800ca52:	4630      	mov	r0, r6
 800ca54:	f000 f8a6 	bl	800cba4 <siprintf>
 800ca58:	e7d0      	b.n	800c9fc <_scanf_float+0x378>
 800ca5a:	9903      	ldr	r1, [sp, #12]
 800ca5c:	f012 0f04 	tst.w	r2, #4
 800ca60:	f103 0204 	add.w	r2, r3, #4
 800ca64:	600a      	str	r2, [r1, #0]
 800ca66:	d1d9      	bne.n	800ca1c <_scanf_float+0x398>
 800ca68:	f8d3 8000 	ldr.w	r8, [r3]
 800ca6c:	ee10 2a10 	vmov	r2, s0
 800ca70:	ee10 0a10 	vmov	r0, s0
 800ca74:	463b      	mov	r3, r7
 800ca76:	4639      	mov	r1, r7
 800ca78:	f7f4 f868 	bl	8000b4c <__aeabi_dcmpun>
 800ca7c:	b128      	cbz	r0, 800ca8a <_scanf_float+0x406>
 800ca7e:	4808      	ldr	r0, [pc, #32]	; (800caa0 <_scanf_float+0x41c>)
 800ca80:	f000 f88a 	bl	800cb98 <nanf>
 800ca84:	ed88 0a00 	vstr	s0, [r8]
 800ca88:	e7cb      	b.n	800ca22 <_scanf_float+0x39e>
 800ca8a:	4630      	mov	r0, r6
 800ca8c:	4639      	mov	r1, r7
 800ca8e:	f7f4 f8bb 	bl	8000c08 <__aeabi_d2f>
 800ca92:	f8c8 0000 	str.w	r0, [r8]
 800ca96:	e7c4      	b.n	800ca22 <_scanf_float+0x39e>
 800ca98:	2500      	movs	r5, #0
 800ca9a:	e634      	b.n	800c706 <_scanf_float+0x82>
 800ca9c:	08012048 	.word	0x08012048
 800caa0:	08012450 	.word	0x08012450

0800caa4 <cleanup_glue>:
 800caa4:	b538      	push	{r3, r4, r5, lr}
 800caa6:	460c      	mov	r4, r1
 800caa8:	6809      	ldr	r1, [r1, #0]
 800caaa:	4605      	mov	r5, r0
 800caac:	b109      	cbz	r1, 800cab2 <cleanup_glue+0xe>
 800caae:	f7ff fff9 	bl	800caa4 <cleanup_glue>
 800cab2:	4621      	mov	r1, r4
 800cab4:	4628      	mov	r0, r5
 800cab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800caba:	f002 bf69 	b.w	800f990 <_free_r>
	...

0800cac0 <_reclaim_reent>:
 800cac0:	4b2c      	ldr	r3, [pc, #176]	; (800cb74 <_reclaim_reent+0xb4>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4283      	cmp	r3, r0
 800cac6:	b570      	push	{r4, r5, r6, lr}
 800cac8:	4604      	mov	r4, r0
 800caca:	d051      	beq.n	800cb70 <_reclaim_reent+0xb0>
 800cacc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cace:	b143      	cbz	r3, 800cae2 <_reclaim_reent+0x22>
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d14a      	bne.n	800cb6c <_reclaim_reent+0xac>
 800cad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cad8:	6819      	ldr	r1, [r3, #0]
 800cada:	b111      	cbz	r1, 800cae2 <_reclaim_reent+0x22>
 800cadc:	4620      	mov	r0, r4
 800cade:	f002 ff57 	bl	800f990 <_free_r>
 800cae2:	6961      	ldr	r1, [r4, #20]
 800cae4:	b111      	cbz	r1, 800caec <_reclaim_reent+0x2c>
 800cae6:	4620      	mov	r0, r4
 800cae8:	f002 ff52 	bl	800f990 <_free_r>
 800caec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800caee:	b111      	cbz	r1, 800caf6 <_reclaim_reent+0x36>
 800caf0:	4620      	mov	r0, r4
 800caf2:	f002 ff4d 	bl	800f990 <_free_r>
 800caf6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800caf8:	b111      	cbz	r1, 800cb00 <_reclaim_reent+0x40>
 800cafa:	4620      	mov	r0, r4
 800cafc:	f002 ff48 	bl	800f990 <_free_r>
 800cb00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cb02:	b111      	cbz	r1, 800cb0a <_reclaim_reent+0x4a>
 800cb04:	4620      	mov	r0, r4
 800cb06:	f002 ff43 	bl	800f990 <_free_r>
 800cb0a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cb0c:	b111      	cbz	r1, 800cb14 <_reclaim_reent+0x54>
 800cb0e:	4620      	mov	r0, r4
 800cb10:	f002 ff3e 	bl	800f990 <_free_r>
 800cb14:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cb16:	b111      	cbz	r1, 800cb1e <_reclaim_reent+0x5e>
 800cb18:	4620      	mov	r0, r4
 800cb1a:	f002 ff39 	bl	800f990 <_free_r>
 800cb1e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cb20:	b111      	cbz	r1, 800cb28 <_reclaim_reent+0x68>
 800cb22:	4620      	mov	r0, r4
 800cb24:	f002 ff34 	bl	800f990 <_free_r>
 800cb28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb2a:	b111      	cbz	r1, 800cb32 <_reclaim_reent+0x72>
 800cb2c:	4620      	mov	r0, r4
 800cb2e:	f002 ff2f 	bl	800f990 <_free_r>
 800cb32:	69a3      	ldr	r3, [r4, #24]
 800cb34:	b1e3      	cbz	r3, 800cb70 <_reclaim_reent+0xb0>
 800cb36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cb38:	4620      	mov	r0, r4
 800cb3a:	4798      	blx	r3
 800cb3c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cb3e:	b1b9      	cbz	r1, 800cb70 <_reclaim_reent+0xb0>
 800cb40:	4620      	mov	r0, r4
 800cb42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cb46:	f7ff bfad 	b.w	800caa4 <cleanup_glue>
 800cb4a:	5949      	ldr	r1, [r1, r5]
 800cb4c:	b941      	cbnz	r1, 800cb60 <_reclaim_reent+0xa0>
 800cb4e:	3504      	adds	r5, #4
 800cb50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb52:	2d80      	cmp	r5, #128	; 0x80
 800cb54:	68d9      	ldr	r1, [r3, #12]
 800cb56:	d1f8      	bne.n	800cb4a <_reclaim_reent+0x8a>
 800cb58:	4620      	mov	r0, r4
 800cb5a:	f002 ff19 	bl	800f990 <_free_r>
 800cb5e:	e7ba      	b.n	800cad6 <_reclaim_reent+0x16>
 800cb60:	680e      	ldr	r6, [r1, #0]
 800cb62:	4620      	mov	r0, r4
 800cb64:	f002 ff14 	bl	800f990 <_free_r>
 800cb68:	4631      	mov	r1, r6
 800cb6a:	e7ef      	b.n	800cb4c <_reclaim_reent+0x8c>
 800cb6c:	2500      	movs	r5, #0
 800cb6e:	e7ef      	b.n	800cb50 <_reclaim_reent+0x90>
 800cb70:	bd70      	pop	{r4, r5, r6, pc}
 800cb72:	bf00      	nop
 800cb74:	200000a8 	.word	0x200000a8

0800cb78 <_sbrk_r>:
 800cb78:	b538      	push	{r3, r4, r5, lr}
 800cb7a:	4d06      	ldr	r5, [pc, #24]	; (800cb94 <_sbrk_r+0x1c>)
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	4604      	mov	r4, r0
 800cb80:	4608      	mov	r0, r1
 800cb82:	602b      	str	r3, [r5, #0]
 800cb84:	f7f6 fa8c 	bl	80030a0 <_sbrk>
 800cb88:	1c43      	adds	r3, r0, #1
 800cb8a:	d102      	bne.n	800cb92 <_sbrk_r+0x1a>
 800cb8c:	682b      	ldr	r3, [r5, #0]
 800cb8e:	b103      	cbz	r3, 800cb92 <_sbrk_r+0x1a>
 800cb90:	6023      	str	r3, [r4, #0]
 800cb92:	bd38      	pop	{r3, r4, r5, pc}
 800cb94:	20008cd4 	.word	0x20008cd4

0800cb98 <nanf>:
 800cb98:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cba0 <nanf+0x8>
 800cb9c:	4770      	bx	lr
 800cb9e:	bf00      	nop
 800cba0:	7fc00000 	.word	0x7fc00000

0800cba4 <siprintf>:
 800cba4:	b40e      	push	{r1, r2, r3}
 800cba6:	b500      	push	{lr}
 800cba8:	b09c      	sub	sp, #112	; 0x70
 800cbaa:	ab1d      	add	r3, sp, #116	; 0x74
 800cbac:	9002      	str	r0, [sp, #8]
 800cbae:	9006      	str	r0, [sp, #24]
 800cbb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cbb4:	4809      	ldr	r0, [pc, #36]	; (800cbdc <siprintf+0x38>)
 800cbb6:	9107      	str	r1, [sp, #28]
 800cbb8:	9104      	str	r1, [sp, #16]
 800cbba:	4909      	ldr	r1, [pc, #36]	; (800cbe0 <siprintf+0x3c>)
 800cbbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbc0:	9105      	str	r1, [sp, #20]
 800cbc2:	6800      	ldr	r0, [r0, #0]
 800cbc4:	9301      	str	r3, [sp, #4]
 800cbc6:	a902      	add	r1, sp, #8
 800cbc8:	f002 ff8a 	bl	800fae0 <_svfiprintf_r>
 800cbcc:	9b02      	ldr	r3, [sp, #8]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	701a      	strb	r2, [r3, #0]
 800cbd2:	b01c      	add	sp, #112	; 0x70
 800cbd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbd8:	b003      	add	sp, #12
 800cbda:	4770      	bx	lr
 800cbdc:	200000a8 	.word	0x200000a8
 800cbe0:	ffff0208 	.word	0xffff0208

0800cbe4 <__sread>:
 800cbe4:	b510      	push	{r4, lr}
 800cbe6:	460c      	mov	r4, r1
 800cbe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbec:	f003 f878 	bl	800fce0 <_read_r>
 800cbf0:	2800      	cmp	r0, #0
 800cbf2:	bfab      	itete	ge
 800cbf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cbf6:	89a3      	ldrhlt	r3, [r4, #12]
 800cbf8:	181b      	addge	r3, r3, r0
 800cbfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cbfe:	bfac      	ite	ge
 800cc00:	6563      	strge	r3, [r4, #84]	; 0x54
 800cc02:	81a3      	strhlt	r3, [r4, #12]
 800cc04:	bd10      	pop	{r4, pc}

0800cc06 <__swrite>:
 800cc06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc0a:	461f      	mov	r7, r3
 800cc0c:	898b      	ldrh	r3, [r1, #12]
 800cc0e:	05db      	lsls	r3, r3, #23
 800cc10:	4605      	mov	r5, r0
 800cc12:	460c      	mov	r4, r1
 800cc14:	4616      	mov	r6, r2
 800cc16:	d505      	bpl.n	800cc24 <__swrite+0x1e>
 800cc18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc1c:	2302      	movs	r3, #2
 800cc1e:	2200      	movs	r2, #0
 800cc20:	f002 f9a6 	bl	800ef70 <_lseek_r>
 800cc24:	89a3      	ldrh	r3, [r4, #12]
 800cc26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc2e:	81a3      	strh	r3, [r4, #12]
 800cc30:	4632      	mov	r2, r6
 800cc32:	463b      	mov	r3, r7
 800cc34:	4628      	mov	r0, r5
 800cc36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc3a:	f000 bec5 	b.w	800d9c8 <_write_r>

0800cc3e <__sseek>:
 800cc3e:	b510      	push	{r4, lr}
 800cc40:	460c      	mov	r4, r1
 800cc42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc46:	f002 f993 	bl	800ef70 <_lseek_r>
 800cc4a:	1c43      	adds	r3, r0, #1
 800cc4c:	89a3      	ldrh	r3, [r4, #12]
 800cc4e:	bf15      	itete	ne
 800cc50:	6560      	strne	r0, [r4, #84]	; 0x54
 800cc52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cc56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cc5a:	81a3      	strheq	r3, [r4, #12]
 800cc5c:	bf18      	it	ne
 800cc5e:	81a3      	strhne	r3, [r4, #12]
 800cc60:	bd10      	pop	{r4, pc}

0800cc62 <__sclose>:
 800cc62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc66:	f000 bec1 	b.w	800d9ec <_close_r>

0800cc6a <sulp>:
 800cc6a:	b570      	push	{r4, r5, r6, lr}
 800cc6c:	4604      	mov	r4, r0
 800cc6e:	460d      	mov	r5, r1
 800cc70:	ec45 4b10 	vmov	d0, r4, r5
 800cc74:	4616      	mov	r6, r2
 800cc76:	f002 fd25 	bl	800f6c4 <__ulp>
 800cc7a:	ec51 0b10 	vmov	r0, r1, d0
 800cc7e:	b17e      	cbz	r6, 800cca0 <sulp+0x36>
 800cc80:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cc84:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	dd09      	ble.n	800cca0 <sulp+0x36>
 800cc8c:	051b      	lsls	r3, r3, #20
 800cc8e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cc92:	2400      	movs	r4, #0
 800cc94:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cc98:	4622      	mov	r2, r4
 800cc9a:	462b      	mov	r3, r5
 800cc9c:	f7f3 fcbc 	bl	8000618 <__aeabi_dmul>
 800cca0:	bd70      	pop	{r4, r5, r6, pc}
 800cca2:	0000      	movs	r0, r0
 800cca4:	0000      	movs	r0, r0
	...

0800cca8 <_strtod_l>:
 800cca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccac:	ed2d 8b02 	vpush	{d8}
 800ccb0:	b09d      	sub	sp, #116	; 0x74
 800ccb2:	461f      	mov	r7, r3
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	9318      	str	r3, [sp, #96]	; 0x60
 800ccb8:	4ba2      	ldr	r3, [pc, #648]	; (800cf44 <_strtod_l+0x29c>)
 800ccba:	9213      	str	r2, [sp, #76]	; 0x4c
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	9305      	str	r3, [sp, #20]
 800ccc0:	4604      	mov	r4, r0
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	4688      	mov	r8, r1
 800ccc6:	f7f3 fa93 	bl	80001f0 <strlen>
 800ccca:	f04f 0a00 	mov.w	sl, #0
 800ccce:	4605      	mov	r5, r0
 800ccd0:	f04f 0b00 	mov.w	fp, #0
 800ccd4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ccd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ccda:	781a      	ldrb	r2, [r3, #0]
 800ccdc:	2a2b      	cmp	r2, #43	; 0x2b
 800ccde:	d04e      	beq.n	800cd7e <_strtod_l+0xd6>
 800cce0:	d83b      	bhi.n	800cd5a <_strtod_l+0xb2>
 800cce2:	2a0d      	cmp	r2, #13
 800cce4:	d834      	bhi.n	800cd50 <_strtod_l+0xa8>
 800cce6:	2a08      	cmp	r2, #8
 800cce8:	d834      	bhi.n	800cd54 <_strtod_l+0xac>
 800ccea:	2a00      	cmp	r2, #0
 800ccec:	d03e      	beq.n	800cd6c <_strtod_l+0xc4>
 800ccee:	2300      	movs	r3, #0
 800ccf0:	930a      	str	r3, [sp, #40]	; 0x28
 800ccf2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ccf4:	7833      	ldrb	r3, [r6, #0]
 800ccf6:	2b30      	cmp	r3, #48	; 0x30
 800ccf8:	f040 80b0 	bne.w	800ce5c <_strtod_l+0x1b4>
 800ccfc:	7873      	ldrb	r3, [r6, #1]
 800ccfe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cd02:	2b58      	cmp	r3, #88	; 0x58
 800cd04:	d168      	bne.n	800cdd8 <_strtod_l+0x130>
 800cd06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd08:	9301      	str	r3, [sp, #4]
 800cd0a:	ab18      	add	r3, sp, #96	; 0x60
 800cd0c:	9702      	str	r7, [sp, #8]
 800cd0e:	9300      	str	r3, [sp, #0]
 800cd10:	4a8d      	ldr	r2, [pc, #564]	; (800cf48 <_strtod_l+0x2a0>)
 800cd12:	ab19      	add	r3, sp, #100	; 0x64
 800cd14:	a917      	add	r1, sp, #92	; 0x5c
 800cd16:	4620      	mov	r0, r4
 800cd18:	f001 fe1e 	bl	800e958 <__gethex>
 800cd1c:	f010 0707 	ands.w	r7, r0, #7
 800cd20:	4605      	mov	r5, r0
 800cd22:	d005      	beq.n	800cd30 <_strtod_l+0x88>
 800cd24:	2f06      	cmp	r7, #6
 800cd26:	d12c      	bne.n	800cd82 <_strtod_l+0xda>
 800cd28:	3601      	adds	r6, #1
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	9617      	str	r6, [sp, #92]	; 0x5c
 800cd2e:	930a      	str	r3, [sp, #40]	; 0x28
 800cd30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	f040 8590 	bne.w	800d858 <_strtod_l+0xbb0>
 800cd38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd3a:	b1eb      	cbz	r3, 800cd78 <_strtod_l+0xd0>
 800cd3c:	4652      	mov	r2, sl
 800cd3e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cd42:	ec43 2b10 	vmov	d0, r2, r3
 800cd46:	b01d      	add	sp, #116	; 0x74
 800cd48:	ecbd 8b02 	vpop	{d8}
 800cd4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd50:	2a20      	cmp	r2, #32
 800cd52:	d1cc      	bne.n	800ccee <_strtod_l+0x46>
 800cd54:	3301      	adds	r3, #1
 800cd56:	9317      	str	r3, [sp, #92]	; 0x5c
 800cd58:	e7be      	b.n	800ccd8 <_strtod_l+0x30>
 800cd5a:	2a2d      	cmp	r2, #45	; 0x2d
 800cd5c:	d1c7      	bne.n	800ccee <_strtod_l+0x46>
 800cd5e:	2201      	movs	r2, #1
 800cd60:	920a      	str	r2, [sp, #40]	; 0x28
 800cd62:	1c5a      	adds	r2, r3, #1
 800cd64:	9217      	str	r2, [sp, #92]	; 0x5c
 800cd66:	785b      	ldrb	r3, [r3, #1]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d1c2      	bne.n	800ccf2 <_strtod_l+0x4a>
 800cd6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cd6e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	f040 856e 	bne.w	800d854 <_strtod_l+0xbac>
 800cd78:	4652      	mov	r2, sl
 800cd7a:	465b      	mov	r3, fp
 800cd7c:	e7e1      	b.n	800cd42 <_strtod_l+0x9a>
 800cd7e:	2200      	movs	r2, #0
 800cd80:	e7ee      	b.n	800cd60 <_strtod_l+0xb8>
 800cd82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cd84:	b13a      	cbz	r2, 800cd96 <_strtod_l+0xee>
 800cd86:	2135      	movs	r1, #53	; 0x35
 800cd88:	a81a      	add	r0, sp, #104	; 0x68
 800cd8a:	f002 fda6 	bl	800f8da <__copybits>
 800cd8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cd90:	4620      	mov	r0, r4
 800cd92:	f002 f965 	bl	800f060 <_Bfree>
 800cd96:	3f01      	subs	r7, #1
 800cd98:	2f04      	cmp	r7, #4
 800cd9a:	d806      	bhi.n	800cdaa <_strtod_l+0x102>
 800cd9c:	e8df f007 	tbb	[pc, r7]
 800cda0:	1714030a 	.word	0x1714030a
 800cda4:	0a          	.byte	0x0a
 800cda5:	00          	.byte	0x00
 800cda6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800cdaa:	0728      	lsls	r0, r5, #28
 800cdac:	d5c0      	bpl.n	800cd30 <_strtod_l+0x88>
 800cdae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800cdb2:	e7bd      	b.n	800cd30 <_strtod_l+0x88>
 800cdb4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800cdb8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cdba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cdbe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cdc2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cdc6:	e7f0      	b.n	800cdaa <_strtod_l+0x102>
 800cdc8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800cf4c <_strtod_l+0x2a4>
 800cdcc:	e7ed      	b.n	800cdaa <_strtod_l+0x102>
 800cdce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800cdd2:	f04f 3aff 	mov.w	sl, #4294967295
 800cdd6:	e7e8      	b.n	800cdaa <_strtod_l+0x102>
 800cdd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cdda:	1c5a      	adds	r2, r3, #1
 800cddc:	9217      	str	r2, [sp, #92]	; 0x5c
 800cdde:	785b      	ldrb	r3, [r3, #1]
 800cde0:	2b30      	cmp	r3, #48	; 0x30
 800cde2:	d0f9      	beq.n	800cdd8 <_strtod_l+0x130>
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d0a3      	beq.n	800cd30 <_strtod_l+0x88>
 800cde8:	2301      	movs	r3, #1
 800cdea:	f04f 0900 	mov.w	r9, #0
 800cdee:	9304      	str	r3, [sp, #16]
 800cdf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cdf2:	9308      	str	r3, [sp, #32]
 800cdf4:	f8cd 901c 	str.w	r9, [sp, #28]
 800cdf8:	464f      	mov	r7, r9
 800cdfa:	220a      	movs	r2, #10
 800cdfc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cdfe:	7806      	ldrb	r6, [r0, #0]
 800ce00:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ce04:	b2d9      	uxtb	r1, r3
 800ce06:	2909      	cmp	r1, #9
 800ce08:	d92a      	bls.n	800ce60 <_strtod_l+0x1b8>
 800ce0a:	9905      	ldr	r1, [sp, #20]
 800ce0c:	462a      	mov	r2, r5
 800ce0e:	f002 ff83 	bl	800fd18 <strncmp>
 800ce12:	b398      	cbz	r0, 800ce7c <_strtod_l+0x1d4>
 800ce14:	2000      	movs	r0, #0
 800ce16:	4632      	mov	r2, r6
 800ce18:	463d      	mov	r5, r7
 800ce1a:	9005      	str	r0, [sp, #20]
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	2a65      	cmp	r2, #101	; 0x65
 800ce20:	d001      	beq.n	800ce26 <_strtod_l+0x17e>
 800ce22:	2a45      	cmp	r2, #69	; 0x45
 800ce24:	d118      	bne.n	800ce58 <_strtod_l+0x1b0>
 800ce26:	b91d      	cbnz	r5, 800ce30 <_strtod_l+0x188>
 800ce28:	9a04      	ldr	r2, [sp, #16]
 800ce2a:	4302      	orrs	r2, r0
 800ce2c:	d09e      	beq.n	800cd6c <_strtod_l+0xc4>
 800ce2e:	2500      	movs	r5, #0
 800ce30:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ce34:	f108 0201 	add.w	r2, r8, #1
 800ce38:	9217      	str	r2, [sp, #92]	; 0x5c
 800ce3a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ce3e:	2a2b      	cmp	r2, #43	; 0x2b
 800ce40:	d075      	beq.n	800cf2e <_strtod_l+0x286>
 800ce42:	2a2d      	cmp	r2, #45	; 0x2d
 800ce44:	d07b      	beq.n	800cf3e <_strtod_l+0x296>
 800ce46:	f04f 0c00 	mov.w	ip, #0
 800ce4a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ce4e:	2909      	cmp	r1, #9
 800ce50:	f240 8082 	bls.w	800cf58 <_strtod_l+0x2b0>
 800ce54:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ce58:	2600      	movs	r6, #0
 800ce5a:	e09d      	b.n	800cf98 <_strtod_l+0x2f0>
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	e7c4      	b.n	800cdea <_strtod_l+0x142>
 800ce60:	2f08      	cmp	r7, #8
 800ce62:	bfd8      	it	le
 800ce64:	9907      	ldrle	r1, [sp, #28]
 800ce66:	f100 0001 	add.w	r0, r0, #1
 800ce6a:	bfda      	itte	le
 800ce6c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ce70:	9307      	strle	r3, [sp, #28]
 800ce72:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ce76:	3701      	adds	r7, #1
 800ce78:	9017      	str	r0, [sp, #92]	; 0x5c
 800ce7a:	e7bf      	b.n	800cdfc <_strtod_l+0x154>
 800ce7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce7e:	195a      	adds	r2, r3, r5
 800ce80:	9217      	str	r2, [sp, #92]	; 0x5c
 800ce82:	5d5a      	ldrb	r2, [r3, r5]
 800ce84:	2f00      	cmp	r7, #0
 800ce86:	d037      	beq.n	800cef8 <_strtod_l+0x250>
 800ce88:	9005      	str	r0, [sp, #20]
 800ce8a:	463d      	mov	r5, r7
 800ce8c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ce90:	2b09      	cmp	r3, #9
 800ce92:	d912      	bls.n	800ceba <_strtod_l+0x212>
 800ce94:	2301      	movs	r3, #1
 800ce96:	e7c2      	b.n	800ce1e <_strtod_l+0x176>
 800ce98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce9a:	1c5a      	adds	r2, r3, #1
 800ce9c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ce9e:	785a      	ldrb	r2, [r3, #1]
 800cea0:	3001      	adds	r0, #1
 800cea2:	2a30      	cmp	r2, #48	; 0x30
 800cea4:	d0f8      	beq.n	800ce98 <_strtod_l+0x1f0>
 800cea6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ceaa:	2b08      	cmp	r3, #8
 800ceac:	f200 84d9 	bhi.w	800d862 <_strtod_l+0xbba>
 800ceb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ceb2:	9005      	str	r0, [sp, #20]
 800ceb4:	2000      	movs	r0, #0
 800ceb6:	9308      	str	r3, [sp, #32]
 800ceb8:	4605      	mov	r5, r0
 800ceba:	3a30      	subs	r2, #48	; 0x30
 800cebc:	f100 0301 	add.w	r3, r0, #1
 800cec0:	d014      	beq.n	800ceec <_strtod_l+0x244>
 800cec2:	9905      	ldr	r1, [sp, #20]
 800cec4:	4419      	add	r1, r3
 800cec6:	9105      	str	r1, [sp, #20]
 800cec8:	462b      	mov	r3, r5
 800ceca:	eb00 0e05 	add.w	lr, r0, r5
 800cece:	210a      	movs	r1, #10
 800ced0:	4573      	cmp	r3, lr
 800ced2:	d113      	bne.n	800cefc <_strtod_l+0x254>
 800ced4:	182b      	adds	r3, r5, r0
 800ced6:	2b08      	cmp	r3, #8
 800ced8:	f105 0501 	add.w	r5, r5, #1
 800cedc:	4405      	add	r5, r0
 800cede:	dc1c      	bgt.n	800cf1a <_strtod_l+0x272>
 800cee0:	9907      	ldr	r1, [sp, #28]
 800cee2:	230a      	movs	r3, #10
 800cee4:	fb03 2301 	mla	r3, r3, r1, r2
 800cee8:	9307      	str	r3, [sp, #28]
 800ceea:	2300      	movs	r3, #0
 800ceec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ceee:	1c51      	adds	r1, r2, #1
 800cef0:	9117      	str	r1, [sp, #92]	; 0x5c
 800cef2:	7852      	ldrb	r2, [r2, #1]
 800cef4:	4618      	mov	r0, r3
 800cef6:	e7c9      	b.n	800ce8c <_strtod_l+0x1e4>
 800cef8:	4638      	mov	r0, r7
 800cefa:	e7d2      	b.n	800cea2 <_strtod_l+0x1fa>
 800cefc:	2b08      	cmp	r3, #8
 800cefe:	dc04      	bgt.n	800cf0a <_strtod_l+0x262>
 800cf00:	9e07      	ldr	r6, [sp, #28]
 800cf02:	434e      	muls	r6, r1
 800cf04:	9607      	str	r6, [sp, #28]
 800cf06:	3301      	adds	r3, #1
 800cf08:	e7e2      	b.n	800ced0 <_strtod_l+0x228>
 800cf0a:	f103 0c01 	add.w	ip, r3, #1
 800cf0e:	f1bc 0f10 	cmp.w	ip, #16
 800cf12:	bfd8      	it	le
 800cf14:	fb01 f909 	mulle.w	r9, r1, r9
 800cf18:	e7f5      	b.n	800cf06 <_strtod_l+0x25e>
 800cf1a:	2d10      	cmp	r5, #16
 800cf1c:	bfdc      	itt	le
 800cf1e:	230a      	movle	r3, #10
 800cf20:	fb03 2909 	mlale	r9, r3, r9, r2
 800cf24:	e7e1      	b.n	800ceea <_strtod_l+0x242>
 800cf26:	2300      	movs	r3, #0
 800cf28:	9305      	str	r3, [sp, #20]
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	e77c      	b.n	800ce28 <_strtod_l+0x180>
 800cf2e:	f04f 0c00 	mov.w	ip, #0
 800cf32:	f108 0202 	add.w	r2, r8, #2
 800cf36:	9217      	str	r2, [sp, #92]	; 0x5c
 800cf38:	f898 2002 	ldrb.w	r2, [r8, #2]
 800cf3c:	e785      	b.n	800ce4a <_strtod_l+0x1a2>
 800cf3e:	f04f 0c01 	mov.w	ip, #1
 800cf42:	e7f6      	b.n	800cf32 <_strtod_l+0x28a>
 800cf44:	08012298 	.word	0x08012298
 800cf48:	08012050 	.word	0x08012050
 800cf4c:	7ff00000 	.word	0x7ff00000
 800cf50:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cf52:	1c51      	adds	r1, r2, #1
 800cf54:	9117      	str	r1, [sp, #92]	; 0x5c
 800cf56:	7852      	ldrb	r2, [r2, #1]
 800cf58:	2a30      	cmp	r2, #48	; 0x30
 800cf5a:	d0f9      	beq.n	800cf50 <_strtod_l+0x2a8>
 800cf5c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800cf60:	2908      	cmp	r1, #8
 800cf62:	f63f af79 	bhi.w	800ce58 <_strtod_l+0x1b0>
 800cf66:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800cf6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cf6c:	9206      	str	r2, [sp, #24]
 800cf6e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cf70:	1c51      	adds	r1, r2, #1
 800cf72:	9117      	str	r1, [sp, #92]	; 0x5c
 800cf74:	7852      	ldrb	r2, [r2, #1]
 800cf76:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800cf7a:	2e09      	cmp	r6, #9
 800cf7c:	d937      	bls.n	800cfee <_strtod_l+0x346>
 800cf7e:	9e06      	ldr	r6, [sp, #24]
 800cf80:	1b89      	subs	r1, r1, r6
 800cf82:	2908      	cmp	r1, #8
 800cf84:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800cf88:	dc02      	bgt.n	800cf90 <_strtod_l+0x2e8>
 800cf8a:	4576      	cmp	r6, lr
 800cf8c:	bfa8      	it	ge
 800cf8e:	4676      	movge	r6, lr
 800cf90:	f1bc 0f00 	cmp.w	ip, #0
 800cf94:	d000      	beq.n	800cf98 <_strtod_l+0x2f0>
 800cf96:	4276      	negs	r6, r6
 800cf98:	2d00      	cmp	r5, #0
 800cf9a:	d14d      	bne.n	800d038 <_strtod_l+0x390>
 800cf9c:	9904      	ldr	r1, [sp, #16]
 800cf9e:	4301      	orrs	r1, r0
 800cfa0:	f47f aec6 	bne.w	800cd30 <_strtod_l+0x88>
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	f47f aee1 	bne.w	800cd6c <_strtod_l+0xc4>
 800cfaa:	2a69      	cmp	r2, #105	; 0x69
 800cfac:	d027      	beq.n	800cffe <_strtod_l+0x356>
 800cfae:	dc24      	bgt.n	800cffa <_strtod_l+0x352>
 800cfb0:	2a49      	cmp	r2, #73	; 0x49
 800cfb2:	d024      	beq.n	800cffe <_strtod_l+0x356>
 800cfb4:	2a4e      	cmp	r2, #78	; 0x4e
 800cfb6:	f47f aed9 	bne.w	800cd6c <_strtod_l+0xc4>
 800cfba:	499f      	ldr	r1, [pc, #636]	; (800d238 <_strtod_l+0x590>)
 800cfbc:	a817      	add	r0, sp, #92	; 0x5c
 800cfbe:	f001 ff23 	bl	800ee08 <__match>
 800cfc2:	2800      	cmp	r0, #0
 800cfc4:	f43f aed2 	beq.w	800cd6c <_strtod_l+0xc4>
 800cfc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	2b28      	cmp	r3, #40	; 0x28
 800cfce:	d12d      	bne.n	800d02c <_strtod_l+0x384>
 800cfd0:	499a      	ldr	r1, [pc, #616]	; (800d23c <_strtod_l+0x594>)
 800cfd2:	aa1a      	add	r2, sp, #104	; 0x68
 800cfd4:	a817      	add	r0, sp, #92	; 0x5c
 800cfd6:	f001 ff2b 	bl	800ee30 <__hexnan>
 800cfda:	2805      	cmp	r0, #5
 800cfdc:	d126      	bne.n	800d02c <_strtod_l+0x384>
 800cfde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cfe0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800cfe4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800cfe8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800cfec:	e6a0      	b.n	800cd30 <_strtod_l+0x88>
 800cfee:	210a      	movs	r1, #10
 800cff0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800cff4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800cff8:	e7b9      	b.n	800cf6e <_strtod_l+0x2c6>
 800cffa:	2a6e      	cmp	r2, #110	; 0x6e
 800cffc:	e7db      	b.n	800cfb6 <_strtod_l+0x30e>
 800cffe:	4990      	ldr	r1, [pc, #576]	; (800d240 <_strtod_l+0x598>)
 800d000:	a817      	add	r0, sp, #92	; 0x5c
 800d002:	f001 ff01 	bl	800ee08 <__match>
 800d006:	2800      	cmp	r0, #0
 800d008:	f43f aeb0 	beq.w	800cd6c <_strtod_l+0xc4>
 800d00c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d00e:	498d      	ldr	r1, [pc, #564]	; (800d244 <_strtod_l+0x59c>)
 800d010:	3b01      	subs	r3, #1
 800d012:	a817      	add	r0, sp, #92	; 0x5c
 800d014:	9317      	str	r3, [sp, #92]	; 0x5c
 800d016:	f001 fef7 	bl	800ee08 <__match>
 800d01a:	b910      	cbnz	r0, 800d022 <_strtod_l+0x37a>
 800d01c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d01e:	3301      	adds	r3, #1
 800d020:	9317      	str	r3, [sp, #92]	; 0x5c
 800d022:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d254 <_strtod_l+0x5ac>
 800d026:	f04f 0a00 	mov.w	sl, #0
 800d02a:	e681      	b.n	800cd30 <_strtod_l+0x88>
 800d02c:	4886      	ldr	r0, [pc, #536]	; (800d248 <_strtod_l+0x5a0>)
 800d02e:	f002 fe6b 	bl	800fd08 <nan>
 800d032:	ec5b ab10 	vmov	sl, fp, d0
 800d036:	e67b      	b.n	800cd30 <_strtod_l+0x88>
 800d038:	9b05      	ldr	r3, [sp, #20]
 800d03a:	9807      	ldr	r0, [sp, #28]
 800d03c:	1af3      	subs	r3, r6, r3
 800d03e:	2f00      	cmp	r7, #0
 800d040:	bf08      	it	eq
 800d042:	462f      	moveq	r7, r5
 800d044:	2d10      	cmp	r5, #16
 800d046:	9306      	str	r3, [sp, #24]
 800d048:	46a8      	mov	r8, r5
 800d04a:	bfa8      	it	ge
 800d04c:	f04f 0810 	movge.w	r8, #16
 800d050:	f7f3 fa68 	bl	8000524 <__aeabi_ui2d>
 800d054:	2d09      	cmp	r5, #9
 800d056:	4682      	mov	sl, r0
 800d058:	468b      	mov	fp, r1
 800d05a:	dd13      	ble.n	800d084 <_strtod_l+0x3dc>
 800d05c:	4b7b      	ldr	r3, [pc, #492]	; (800d24c <_strtod_l+0x5a4>)
 800d05e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d062:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d066:	f7f3 fad7 	bl	8000618 <__aeabi_dmul>
 800d06a:	4682      	mov	sl, r0
 800d06c:	4648      	mov	r0, r9
 800d06e:	468b      	mov	fp, r1
 800d070:	f7f3 fa58 	bl	8000524 <__aeabi_ui2d>
 800d074:	4602      	mov	r2, r0
 800d076:	460b      	mov	r3, r1
 800d078:	4650      	mov	r0, sl
 800d07a:	4659      	mov	r1, fp
 800d07c:	f7f3 f916 	bl	80002ac <__adddf3>
 800d080:	4682      	mov	sl, r0
 800d082:	468b      	mov	fp, r1
 800d084:	2d0f      	cmp	r5, #15
 800d086:	dc38      	bgt.n	800d0fa <_strtod_l+0x452>
 800d088:	9b06      	ldr	r3, [sp, #24]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	f43f ae50 	beq.w	800cd30 <_strtod_l+0x88>
 800d090:	dd24      	ble.n	800d0dc <_strtod_l+0x434>
 800d092:	2b16      	cmp	r3, #22
 800d094:	dc0b      	bgt.n	800d0ae <_strtod_l+0x406>
 800d096:	496d      	ldr	r1, [pc, #436]	; (800d24c <_strtod_l+0x5a4>)
 800d098:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d09c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0a0:	4652      	mov	r2, sl
 800d0a2:	465b      	mov	r3, fp
 800d0a4:	f7f3 fab8 	bl	8000618 <__aeabi_dmul>
 800d0a8:	4682      	mov	sl, r0
 800d0aa:	468b      	mov	fp, r1
 800d0ac:	e640      	b.n	800cd30 <_strtod_l+0x88>
 800d0ae:	9a06      	ldr	r2, [sp, #24]
 800d0b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	db20      	blt.n	800d0fa <_strtod_l+0x452>
 800d0b8:	4c64      	ldr	r4, [pc, #400]	; (800d24c <_strtod_l+0x5a4>)
 800d0ba:	f1c5 050f 	rsb	r5, r5, #15
 800d0be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d0c2:	4652      	mov	r2, sl
 800d0c4:	465b      	mov	r3, fp
 800d0c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0ca:	f7f3 faa5 	bl	8000618 <__aeabi_dmul>
 800d0ce:	9b06      	ldr	r3, [sp, #24]
 800d0d0:	1b5d      	subs	r5, r3, r5
 800d0d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d0d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d0da:	e7e3      	b.n	800d0a4 <_strtod_l+0x3fc>
 800d0dc:	9b06      	ldr	r3, [sp, #24]
 800d0de:	3316      	adds	r3, #22
 800d0e0:	db0b      	blt.n	800d0fa <_strtod_l+0x452>
 800d0e2:	9b05      	ldr	r3, [sp, #20]
 800d0e4:	1b9e      	subs	r6, r3, r6
 800d0e6:	4b59      	ldr	r3, [pc, #356]	; (800d24c <_strtod_l+0x5a4>)
 800d0e8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d0ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d0f0:	4650      	mov	r0, sl
 800d0f2:	4659      	mov	r1, fp
 800d0f4:	f7f3 fbba 	bl	800086c <__aeabi_ddiv>
 800d0f8:	e7d6      	b.n	800d0a8 <_strtod_l+0x400>
 800d0fa:	9b06      	ldr	r3, [sp, #24]
 800d0fc:	eba5 0808 	sub.w	r8, r5, r8
 800d100:	4498      	add	r8, r3
 800d102:	f1b8 0f00 	cmp.w	r8, #0
 800d106:	dd74      	ble.n	800d1f2 <_strtod_l+0x54a>
 800d108:	f018 030f 	ands.w	r3, r8, #15
 800d10c:	d00a      	beq.n	800d124 <_strtod_l+0x47c>
 800d10e:	494f      	ldr	r1, [pc, #316]	; (800d24c <_strtod_l+0x5a4>)
 800d110:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d114:	4652      	mov	r2, sl
 800d116:	465b      	mov	r3, fp
 800d118:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d11c:	f7f3 fa7c 	bl	8000618 <__aeabi_dmul>
 800d120:	4682      	mov	sl, r0
 800d122:	468b      	mov	fp, r1
 800d124:	f038 080f 	bics.w	r8, r8, #15
 800d128:	d04f      	beq.n	800d1ca <_strtod_l+0x522>
 800d12a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d12e:	dd22      	ble.n	800d176 <_strtod_l+0x4ce>
 800d130:	2500      	movs	r5, #0
 800d132:	462e      	mov	r6, r5
 800d134:	9507      	str	r5, [sp, #28]
 800d136:	9505      	str	r5, [sp, #20]
 800d138:	2322      	movs	r3, #34	; 0x22
 800d13a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d254 <_strtod_l+0x5ac>
 800d13e:	6023      	str	r3, [r4, #0]
 800d140:	f04f 0a00 	mov.w	sl, #0
 800d144:	9b07      	ldr	r3, [sp, #28]
 800d146:	2b00      	cmp	r3, #0
 800d148:	f43f adf2 	beq.w	800cd30 <_strtod_l+0x88>
 800d14c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d14e:	4620      	mov	r0, r4
 800d150:	f001 ff86 	bl	800f060 <_Bfree>
 800d154:	9905      	ldr	r1, [sp, #20]
 800d156:	4620      	mov	r0, r4
 800d158:	f001 ff82 	bl	800f060 <_Bfree>
 800d15c:	4631      	mov	r1, r6
 800d15e:	4620      	mov	r0, r4
 800d160:	f001 ff7e 	bl	800f060 <_Bfree>
 800d164:	9907      	ldr	r1, [sp, #28]
 800d166:	4620      	mov	r0, r4
 800d168:	f001 ff7a 	bl	800f060 <_Bfree>
 800d16c:	4629      	mov	r1, r5
 800d16e:	4620      	mov	r0, r4
 800d170:	f001 ff76 	bl	800f060 <_Bfree>
 800d174:	e5dc      	b.n	800cd30 <_strtod_l+0x88>
 800d176:	4b36      	ldr	r3, [pc, #216]	; (800d250 <_strtod_l+0x5a8>)
 800d178:	9304      	str	r3, [sp, #16]
 800d17a:	2300      	movs	r3, #0
 800d17c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d180:	4650      	mov	r0, sl
 800d182:	4659      	mov	r1, fp
 800d184:	4699      	mov	r9, r3
 800d186:	f1b8 0f01 	cmp.w	r8, #1
 800d18a:	dc21      	bgt.n	800d1d0 <_strtod_l+0x528>
 800d18c:	b10b      	cbz	r3, 800d192 <_strtod_l+0x4ea>
 800d18e:	4682      	mov	sl, r0
 800d190:	468b      	mov	fp, r1
 800d192:	4b2f      	ldr	r3, [pc, #188]	; (800d250 <_strtod_l+0x5a8>)
 800d194:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d198:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d19c:	4652      	mov	r2, sl
 800d19e:	465b      	mov	r3, fp
 800d1a0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d1a4:	f7f3 fa38 	bl	8000618 <__aeabi_dmul>
 800d1a8:	4b2a      	ldr	r3, [pc, #168]	; (800d254 <_strtod_l+0x5ac>)
 800d1aa:	460a      	mov	r2, r1
 800d1ac:	400b      	ands	r3, r1
 800d1ae:	492a      	ldr	r1, [pc, #168]	; (800d258 <_strtod_l+0x5b0>)
 800d1b0:	428b      	cmp	r3, r1
 800d1b2:	4682      	mov	sl, r0
 800d1b4:	d8bc      	bhi.n	800d130 <_strtod_l+0x488>
 800d1b6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d1ba:	428b      	cmp	r3, r1
 800d1bc:	bf86      	itte	hi
 800d1be:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d25c <_strtod_l+0x5b4>
 800d1c2:	f04f 3aff 	movhi.w	sl, #4294967295
 800d1c6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	9304      	str	r3, [sp, #16]
 800d1ce:	e084      	b.n	800d2da <_strtod_l+0x632>
 800d1d0:	f018 0f01 	tst.w	r8, #1
 800d1d4:	d005      	beq.n	800d1e2 <_strtod_l+0x53a>
 800d1d6:	9b04      	ldr	r3, [sp, #16]
 800d1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1dc:	f7f3 fa1c 	bl	8000618 <__aeabi_dmul>
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	9a04      	ldr	r2, [sp, #16]
 800d1e4:	3208      	adds	r2, #8
 800d1e6:	f109 0901 	add.w	r9, r9, #1
 800d1ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d1ee:	9204      	str	r2, [sp, #16]
 800d1f0:	e7c9      	b.n	800d186 <_strtod_l+0x4de>
 800d1f2:	d0ea      	beq.n	800d1ca <_strtod_l+0x522>
 800d1f4:	f1c8 0800 	rsb	r8, r8, #0
 800d1f8:	f018 020f 	ands.w	r2, r8, #15
 800d1fc:	d00a      	beq.n	800d214 <_strtod_l+0x56c>
 800d1fe:	4b13      	ldr	r3, [pc, #76]	; (800d24c <_strtod_l+0x5a4>)
 800d200:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d204:	4650      	mov	r0, sl
 800d206:	4659      	mov	r1, fp
 800d208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20c:	f7f3 fb2e 	bl	800086c <__aeabi_ddiv>
 800d210:	4682      	mov	sl, r0
 800d212:	468b      	mov	fp, r1
 800d214:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d218:	d0d7      	beq.n	800d1ca <_strtod_l+0x522>
 800d21a:	f1b8 0f1f 	cmp.w	r8, #31
 800d21e:	dd1f      	ble.n	800d260 <_strtod_l+0x5b8>
 800d220:	2500      	movs	r5, #0
 800d222:	462e      	mov	r6, r5
 800d224:	9507      	str	r5, [sp, #28]
 800d226:	9505      	str	r5, [sp, #20]
 800d228:	2322      	movs	r3, #34	; 0x22
 800d22a:	f04f 0a00 	mov.w	sl, #0
 800d22e:	f04f 0b00 	mov.w	fp, #0
 800d232:	6023      	str	r3, [r4, #0]
 800d234:	e786      	b.n	800d144 <_strtod_l+0x49c>
 800d236:	bf00      	nop
 800d238:	08012021 	.word	0x08012021
 800d23c:	08012064 	.word	0x08012064
 800d240:	08012019 	.word	0x08012019
 800d244:	080121a4 	.word	0x080121a4
 800d248:	08012450 	.word	0x08012450
 800d24c:	08012330 	.word	0x08012330
 800d250:	08012308 	.word	0x08012308
 800d254:	7ff00000 	.word	0x7ff00000
 800d258:	7ca00000 	.word	0x7ca00000
 800d25c:	7fefffff 	.word	0x7fefffff
 800d260:	f018 0310 	ands.w	r3, r8, #16
 800d264:	bf18      	it	ne
 800d266:	236a      	movne	r3, #106	; 0x6a
 800d268:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d618 <_strtod_l+0x970>
 800d26c:	9304      	str	r3, [sp, #16]
 800d26e:	4650      	mov	r0, sl
 800d270:	4659      	mov	r1, fp
 800d272:	2300      	movs	r3, #0
 800d274:	f018 0f01 	tst.w	r8, #1
 800d278:	d004      	beq.n	800d284 <_strtod_l+0x5dc>
 800d27a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d27e:	f7f3 f9cb 	bl	8000618 <__aeabi_dmul>
 800d282:	2301      	movs	r3, #1
 800d284:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d288:	f109 0908 	add.w	r9, r9, #8
 800d28c:	d1f2      	bne.n	800d274 <_strtod_l+0x5cc>
 800d28e:	b10b      	cbz	r3, 800d294 <_strtod_l+0x5ec>
 800d290:	4682      	mov	sl, r0
 800d292:	468b      	mov	fp, r1
 800d294:	9b04      	ldr	r3, [sp, #16]
 800d296:	b1c3      	cbz	r3, 800d2ca <_strtod_l+0x622>
 800d298:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d29c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	4659      	mov	r1, fp
 800d2a4:	dd11      	ble.n	800d2ca <_strtod_l+0x622>
 800d2a6:	2b1f      	cmp	r3, #31
 800d2a8:	f340 8124 	ble.w	800d4f4 <_strtod_l+0x84c>
 800d2ac:	2b34      	cmp	r3, #52	; 0x34
 800d2ae:	bfde      	ittt	le
 800d2b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d2b4:	f04f 33ff 	movle.w	r3, #4294967295
 800d2b8:	fa03 f202 	lslle.w	r2, r3, r2
 800d2bc:	f04f 0a00 	mov.w	sl, #0
 800d2c0:	bfcc      	ite	gt
 800d2c2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d2c6:	ea02 0b01 	andle.w	fp, r2, r1
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	4650      	mov	r0, sl
 800d2d0:	4659      	mov	r1, fp
 800d2d2:	f7f3 fc09 	bl	8000ae8 <__aeabi_dcmpeq>
 800d2d6:	2800      	cmp	r0, #0
 800d2d8:	d1a2      	bne.n	800d220 <_strtod_l+0x578>
 800d2da:	9b07      	ldr	r3, [sp, #28]
 800d2dc:	9300      	str	r3, [sp, #0]
 800d2de:	9908      	ldr	r1, [sp, #32]
 800d2e0:	462b      	mov	r3, r5
 800d2e2:	463a      	mov	r2, r7
 800d2e4:	4620      	mov	r0, r4
 800d2e6:	f001 ff23 	bl	800f130 <__s2b>
 800d2ea:	9007      	str	r0, [sp, #28]
 800d2ec:	2800      	cmp	r0, #0
 800d2ee:	f43f af1f 	beq.w	800d130 <_strtod_l+0x488>
 800d2f2:	9b05      	ldr	r3, [sp, #20]
 800d2f4:	1b9e      	subs	r6, r3, r6
 800d2f6:	9b06      	ldr	r3, [sp, #24]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	bfb4      	ite	lt
 800d2fc:	4633      	movlt	r3, r6
 800d2fe:	2300      	movge	r3, #0
 800d300:	930c      	str	r3, [sp, #48]	; 0x30
 800d302:	9b06      	ldr	r3, [sp, #24]
 800d304:	2500      	movs	r5, #0
 800d306:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d30a:	9312      	str	r3, [sp, #72]	; 0x48
 800d30c:	462e      	mov	r6, r5
 800d30e:	9b07      	ldr	r3, [sp, #28]
 800d310:	4620      	mov	r0, r4
 800d312:	6859      	ldr	r1, [r3, #4]
 800d314:	f001 fe64 	bl	800efe0 <_Balloc>
 800d318:	9005      	str	r0, [sp, #20]
 800d31a:	2800      	cmp	r0, #0
 800d31c:	f43f af0c 	beq.w	800d138 <_strtod_l+0x490>
 800d320:	9b07      	ldr	r3, [sp, #28]
 800d322:	691a      	ldr	r2, [r3, #16]
 800d324:	3202      	adds	r2, #2
 800d326:	f103 010c 	add.w	r1, r3, #12
 800d32a:	0092      	lsls	r2, r2, #2
 800d32c:	300c      	adds	r0, #12
 800d32e:	f7fe fc94 	bl	800bc5a <memcpy>
 800d332:	ec4b ab10 	vmov	d0, sl, fp
 800d336:	aa1a      	add	r2, sp, #104	; 0x68
 800d338:	a919      	add	r1, sp, #100	; 0x64
 800d33a:	4620      	mov	r0, r4
 800d33c:	f002 fa3e 	bl	800f7bc <__d2b>
 800d340:	ec4b ab18 	vmov	d8, sl, fp
 800d344:	9018      	str	r0, [sp, #96]	; 0x60
 800d346:	2800      	cmp	r0, #0
 800d348:	f43f aef6 	beq.w	800d138 <_strtod_l+0x490>
 800d34c:	2101      	movs	r1, #1
 800d34e:	4620      	mov	r0, r4
 800d350:	f001 ff88 	bl	800f264 <__i2b>
 800d354:	4606      	mov	r6, r0
 800d356:	2800      	cmp	r0, #0
 800d358:	f43f aeee 	beq.w	800d138 <_strtod_l+0x490>
 800d35c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d35e:	9904      	ldr	r1, [sp, #16]
 800d360:	2b00      	cmp	r3, #0
 800d362:	bfab      	itete	ge
 800d364:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d366:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d368:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d36a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d36e:	bfac      	ite	ge
 800d370:	eb03 0902 	addge.w	r9, r3, r2
 800d374:	1ad7      	sublt	r7, r2, r3
 800d376:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d378:	eba3 0801 	sub.w	r8, r3, r1
 800d37c:	4490      	add	r8, r2
 800d37e:	4ba1      	ldr	r3, [pc, #644]	; (800d604 <_strtod_l+0x95c>)
 800d380:	f108 38ff 	add.w	r8, r8, #4294967295
 800d384:	4598      	cmp	r8, r3
 800d386:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d38a:	f280 80c7 	bge.w	800d51c <_strtod_l+0x874>
 800d38e:	eba3 0308 	sub.w	r3, r3, r8
 800d392:	2b1f      	cmp	r3, #31
 800d394:	eba2 0203 	sub.w	r2, r2, r3
 800d398:	f04f 0101 	mov.w	r1, #1
 800d39c:	f300 80b1 	bgt.w	800d502 <_strtod_l+0x85a>
 800d3a0:	fa01 f303 	lsl.w	r3, r1, r3
 800d3a4:	930d      	str	r3, [sp, #52]	; 0x34
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	9308      	str	r3, [sp, #32]
 800d3aa:	eb09 0802 	add.w	r8, r9, r2
 800d3ae:	9b04      	ldr	r3, [sp, #16]
 800d3b0:	45c1      	cmp	r9, r8
 800d3b2:	4417      	add	r7, r2
 800d3b4:	441f      	add	r7, r3
 800d3b6:	464b      	mov	r3, r9
 800d3b8:	bfa8      	it	ge
 800d3ba:	4643      	movge	r3, r8
 800d3bc:	42bb      	cmp	r3, r7
 800d3be:	bfa8      	it	ge
 800d3c0:	463b      	movge	r3, r7
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	bfc2      	ittt	gt
 800d3c6:	eba8 0803 	subgt.w	r8, r8, r3
 800d3ca:	1aff      	subgt	r7, r7, r3
 800d3cc:	eba9 0903 	subgt.w	r9, r9, r3
 800d3d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	dd17      	ble.n	800d406 <_strtod_l+0x75e>
 800d3d6:	4631      	mov	r1, r6
 800d3d8:	461a      	mov	r2, r3
 800d3da:	4620      	mov	r0, r4
 800d3dc:	f002 f802 	bl	800f3e4 <__pow5mult>
 800d3e0:	4606      	mov	r6, r0
 800d3e2:	2800      	cmp	r0, #0
 800d3e4:	f43f aea8 	beq.w	800d138 <_strtod_l+0x490>
 800d3e8:	4601      	mov	r1, r0
 800d3ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d3ec:	4620      	mov	r0, r4
 800d3ee:	f001 ff4f 	bl	800f290 <__multiply>
 800d3f2:	900b      	str	r0, [sp, #44]	; 0x2c
 800d3f4:	2800      	cmp	r0, #0
 800d3f6:	f43f ae9f 	beq.w	800d138 <_strtod_l+0x490>
 800d3fa:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	f001 fe2f 	bl	800f060 <_Bfree>
 800d402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d404:	9318      	str	r3, [sp, #96]	; 0x60
 800d406:	f1b8 0f00 	cmp.w	r8, #0
 800d40a:	f300 808c 	bgt.w	800d526 <_strtod_l+0x87e>
 800d40e:	9b06      	ldr	r3, [sp, #24]
 800d410:	2b00      	cmp	r3, #0
 800d412:	dd08      	ble.n	800d426 <_strtod_l+0x77e>
 800d414:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d416:	9905      	ldr	r1, [sp, #20]
 800d418:	4620      	mov	r0, r4
 800d41a:	f001 ffe3 	bl	800f3e4 <__pow5mult>
 800d41e:	9005      	str	r0, [sp, #20]
 800d420:	2800      	cmp	r0, #0
 800d422:	f43f ae89 	beq.w	800d138 <_strtod_l+0x490>
 800d426:	2f00      	cmp	r7, #0
 800d428:	dd08      	ble.n	800d43c <_strtod_l+0x794>
 800d42a:	9905      	ldr	r1, [sp, #20]
 800d42c:	463a      	mov	r2, r7
 800d42e:	4620      	mov	r0, r4
 800d430:	f002 f832 	bl	800f498 <__lshift>
 800d434:	9005      	str	r0, [sp, #20]
 800d436:	2800      	cmp	r0, #0
 800d438:	f43f ae7e 	beq.w	800d138 <_strtod_l+0x490>
 800d43c:	f1b9 0f00 	cmp.w	r9, #0
 800d440:	dd08      	ble.n	800d454 <_strtod_l+0x7ac>
 800d442:	4631      	mov	r1, r6
 800d444:	464a      	mov	r2, r9
 800d446:	4620      	mov	r0, r4
 800d448:	f002 f826 	bl	800f498 <__lshift>
 800d44c:	4606      	mov	r6, r0
 800d44e:	2800      	cmp	r0, #0
 800d450:	f43f ae72 	beq.w	800d138 <_strtod_l+0x490>
 800d454:	9a05      	ldr	r2, [sp, #20]
 800d456:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d458:	4620      	mov	r0, r4
 800d45a:	f002 f8a9 	bl	800f5b0 <__mdiff>
 800d45e:	4605      	mov	r5, r0
 800d460:	2800      	cmp	r0, #0
 800d462:	f43f ae69 	beq.w	800d138 <_strtod_l+0x490>
 800d466:	68c3      	ldr	r3, [r0, #12]
 800d468:	930b      	str	r3, [sp, #44]	; 0x2c
 800d46a:	2300      	movs	r3, #0
 800d46c:	60c3      	str	r3, [r0, #12]
 800d46e:	4631      	mov	r1, r6
 800d470:	f002 f882 	bl	800f578 <__mcmp>
 800d474:	2800      	cmp	r0, #0
 800d476:	da60      	bge.n	800d53a <_strtod_l+0x892>
 800d478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d47a:	ea53 030a 	orrs.w	r3, r3, sl
 800d47e:	f040 8082 	bne.w	800d586 <_strtod_l+0x8de>
 800d482:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d486:	2b00      	cmp	r3, #0
 800d488:	d17d      	bne.n	800d586 <_strtod_l+0x8de>
 800d48a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d48e:	0d1b      	lsrs	r3, r3, #20
 800d490:	051b      	lsls	r3, r3, #20
 800d492:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d496:	d976      	bls.n	800d586 <_strtod_l+0x8de>
 800d498:	696b      	ldr	r3, [r5, #20]
 800d49a:	b913      	cbnz	r3, 800d4a2 <_strtod_l+0x7fa>
 800d49c:	692b      	ldr	r3, [r5, #16]
 800d49e:	2b01      	cmp	r3, #1
 800d4a0:	dd71      	ble.n	800d586 <_strtod_l+0x8de>
 800d4a2:	4629      	mov	r1, r5
 800d4a4:	2201      	movs	r2, #1
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	f001 fff6 	bl	800f498 <__lshift>
 800d4ac:	4631      	mov	r1, r6
 800d4ae:	4605      	mov	r5, r0
 800d4b0:	f002 f862 	bl	800f578 <__mcmp>
 800d4b4:	2800      	cmp	r0, #0
 800d4b6:	dd66      	ble.n	800d586 <_strtod_l+0x8de>
 800d4b8:	9904      	ldr	r1, [sp, #16]
 800d4ba:	4a53      	ldr	r2, [pc, #332]	; (800d608 <_strtod_l+0x960>)
 800d4bc:	465b      	mov	r3, fp
 800d4be:	2900      	cmp	r1, #0
 800d4c0:	f000 8081 	beq.w	800d5c6 <_strtod_l+0x91e>
 800d4c4:	ea02 010b 	and.w	r1, r2, fp
 800d4c8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d4cc:	dc7b      	bgt.n	800d5c6 <_strtod_l+0x91e>
 800d4ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d4d2:	f77f aea9 	ble.w	800d228 <_strtod_l+0x580>
 800d4d6:	4b4d      	ldr	r3, [pc, #308]	; (800d60c <_strtod_l+0x964>)
 800d4d8:	4650      	mov	r0, sl
 800d4da:	4659      	mov	r1, fp
 800d4dc:	2200      	movs	r2, #0
 800d4de:	f7f3 f89b 	bl	8000618 <__aeabi_dmul>
 800d4e2:	460b      	mov	r3, r1
 800d4e4:	4303      	orrs	r3, r0
 800d4e6:	bf08      	it	eq
 800d4e8:	2322      	moveq	r3, #34	; 0x22
 800d4ea:	4682      	mov	sl, r0
 800d4ec:	468b      	mov	fp, r1
 800d4ee:	bf08      	it	eq
 800d4f0:	6023      	streq	r3, [r4, #0]
 800d4f2:	e62b      	b.n	800d14c <_strtod_l+0x4a4>
 800d4f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d4f8:	fa02 f303 	lsl.w	r3, r2, r3
 800d4fc:	ea03 0a0a 	and.w	sl, r3, sl
 800d500:	e6e3      	b.n	800d2ca <_strtod_l+0x622>
 800d502:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d506:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d50a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d50e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d512:	fa01 f308 	lsl.w	r3, r1, r8
 800d516:	9308      	str	r3, [sp, #32]
 800d518:	910d      	str	r1, [sp, #52]	; 0x34
 800d51a:	e746      	b.n	800d3aa <_strtod_l+0x702>
 800d51c:	2300      	movs	r3, #0
 800d51e:	9308      	str	r3, [sp, #32]
 800d520:	2301      	movs	r3, #1
 800d522:	930d      	str	r3, [sp, #52]	; 0x34
 800d524:	e741      	b.n	800d3aa <_strtod_l+0x702>
 800d526:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d528:	4642      	mov	r2, r8
 800d52a:	4620      	mov	r0, r4
 800d52c:	f001 ffb4 	bl	800f498 <__lshift>
 800d530:	9018      	str	r0, [sp, #96]	; 0x60
 800d532:	2800      	cmp	r0, #0
 800d534:	f47f af6b 	bne.w	800d40e <_strtod_l+0x766>
 800d538:	e5fe      	b.n	800d138 <_strtod_l+0x490>
 800d53a:	465f      	mov	r7, fp
 800d53c:	d16e      	bne.n	800d61c <_strtod_l+0x974>
 800d53e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d540:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d544:	b342      	cbz	r2, 800d598 <_strtod_l+0x8f0>
 800d546:	4a32      	ldr	r2, [pc, #200]	; (800d610 <_strtod_l+0x968>)
 800d548:	4293      	cmp	r3, r2
 800d54a:	d128      	bne.n	800d59e <_strtod_l+0x8f6>
 800d54c:	9b04      	ldr	r3, [sp, #16]
 800d54e:	4651      	mov	r1, sl
 800d550:	b1eb      	cbz	r3, 800d58e <_strtod_l+0x8e6>
 800d552:	4b2d      	ldr	r3, [pc, #180]	; (800d608 <_strtod_l+0x960>)
 800d554:	403b      	ands	r3, r7
 800d556:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d55a:	f04f 32ff 	mov.w	r2, #4294967295
 800d55e:	d819      	bhi.n	800d594 <_strtod_l+0x8ec>
 800d560:	0d1b      	lsrs	r3, r3, #20
 800d562:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d566:	fa02 f303 	lsl.w	r3, r2, r3
 800d56a:	4299      	cmp	r1, r3
 800d56c:	d117      	bne.n	800d59e <_strtod_l+0x8f6>
 800d56e:	4b29      	ldr	r3, [pc, #164]	; (800d614 <_strtod_l+0x96c>)
 800d570:	429f      	cmp	r7, r3
 800d572:	d102      	bne.n	800d57a <_strtod_l+0x8d2>
 800d574:	3101      	adds	r1, #1
 800d576:	f43f addf 	beq.w	800d138 <_strtod_l+0x490>
 800d57a:	4b23      	ldr	r3, [pc, #140]	; (800d608 <_strtod_l+0x960>)
 800d57c:	403b      	ands	r3, r7
 800d57e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d582:	f04f 0a00 	mov.w	sl, #0
 800d586:	9b04      	ldr	r3, [sp, #16]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d1a4      	bne.n	800d4d6 <_strtod_l+0x82e>
 800d58c:	e5de      	b.n	800d14c <_strtod_l+0x4a4>
 800d58e:	f04f 33ff 	mov.w	r3, #4294967295
 800d592:	e7ea      	b.n	800d56a <_strtod_l+0x8c2>
 800d594:	4613      	mov	r3, r2
 800d596:	e7e8      	b.n	800d56a <_strtod_l+0x8c2>
 800d598:	ea53 030a 	orrs.w	r3, r3, sl
 800d59c:	d08c      	beq.n	800d4b8 <_strtod_l+0x810>
 800d59e:	9b08      	ldr	r3, [sp, #32]
 800d5a0:	b1db      	cbz	r3, 800d5da <_strtod_l+0x932>
 800d5a2:	423b      	tst	r3, r7
 800d5a4:	d0ef      	beq.n	800d586 <_strtod_l+0x8de>
 800d5a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5a8:	9a04      	ldr	r2, [sp, #16]
 800d5aa:	4650      	mov	r0, sl
 800d5ac:	4659      	mov	r1, fp
 800d5ae:	b1c3      	cbz	r3, 800d5e2 <_strtod_l+0x93a>
 800d5b0:	f7ff fb5b 	bl	800cc6a <sulp>
 800d5b4:	4602      	mov	r2, r0
 800d5b6:	460b      	mov	r3, r1
 800d5b8:	ec51 0b18 	vmov	r0, r1, d8
 800d5bc:	f7f2 fe76 	bl	80002ac <__adddf3>
 800d5c0:	4682      	mov	sl, r0
 800d5c2:	468b      	mov	fp, r1
 800d5c4:	e7df      	b.n	800d586 <_strtod_l+0x8de>
 800d5c6:	4013      	ands	r3, r2
 800d5c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d5cc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d5d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d5d4:	f04f 3aff 	mov.w	sl, #4294967295
 800d5d8:	e7d5      	b.n	800d586 <_strtod_l+0x8de>
 800d5da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d5dc:	ea13 0f0a 	tst.w	r3, sl
 800d5e0:	e7e0      	b.n	800d5a4 <_strtod_l+0x8fc>
 800d5e2:	f7ff fb42 	bl	800cc6a <sulp>
 800d5e6:	4602      	mov	r2, r0
 800d5e8:	460b      	mov	r3, r1
 800d5ea:	ec51 0b18 	vmov	r0, r1, d8
 800d5ee:	f7f2 fe5b 	bl	80002a8 <__aeabi_dsub>
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	4682      	mov	sl, r0
 800d5f8:	468b      	mov	fp, r1
 800d5fa:	f7f3 fa75 	bl	8000ae8 <__aeabi_dcmpeq>
 800d5fe:	2800      	cmp	r0, #0
 800d600:	d0c1      	beq.n	800d586 <_strtod_l+0x8de>
 800d602:	e611      	b.n	800d228 <_strtod_l+0x580>
 800d604:	fffffc02 	.word	0xfffffc02
 800d608:	7ff00000 	.word	0x7ff00000
 800d60c:	39500000 	.word	0x39500000
 800d610:	000fffff 	.word	0x000fffff
 800d614:	7fefffff 	.word	0x7fefffff
 800d618:	08012078 	.word	0x08012078
 800d61c:	4631      	mov	r1, r6
 800d61e:	4628      	mov	r0, r5
 800d620:	f002 f928 	bl	800f874 <__ratio>
 800d624:	ec59 8b10 	vmov	r8, r9, d0
 800d628:	ee10 0a10 	vmov	r0, s0
 800d62c:	2200      	movs	r2, #0
 800d62e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d632:	4649      	mov	r1, r9
 800d634:	f7f3 fa6c 	bl	8000b10 <__aeabi_dcmple>
 800d638:	2800      	cmp	r0, #0
 800d63a:	d07a      	beq.n	800d732 <_strtod_l+0xa8a>
 800d63c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d04a      	beq.n	800d6d8 <_strtod_l+0xa30>
 800d642:	4b95      	ldr	r3, [pc, #596]	; (800d898 <_strtod_l+0xbf0>)
 800d644:	2200      	movs	r2, #0
 800d646:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d64a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d898 <_strtod_l+0xbf0>
 800d64e:	f04f 0800 	mov.w	r8, #0
 800d652:	4b92      	ldr	r3, [pc, #584]	; (800d89c <_strtod_l+0xbf4>)
 800d654:	403b      	ands	r3, r7
 800d656:	930d      	str	r3, [sp, #52]	; 0x34
 800d658:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d65a:	4b91      	ldr	r3, [pc, #580]	; (800d8a0 <_strtod_l+0xbf8>)
 800d65c:	429a      	cmp	r2, r3
 800d65e:	f040 80b0 	bne.w	800d7c2 <_strtod_l+0xb1a>
 800d662:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d666:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d66a:	ec4b ab10 	vmov	d0, sl, fp
 800d66e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d672:	f002 f827 	bl	800f6c4 <__ulp>
 800d676:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d67a:	ec53 2b10 	vmov	r2, r3, d0
 800d67e:	f7f2 ffcb 	bl	8000618 <__aeabi_dmul>
 800d682:	4652      	mov	r2, sl
 800d684:	465b      	mov	r3, fp
 800d686:	f7f2 fe11 	bl	80002ac <__adddf3>
 800d68a:	460b      	mov	r3, r1
 800d68c:	4983      	ldr	r1, [pc, #524]	; (800d89c <_strtod_l+0xbf4>)
 800d68e:	4a85      	ldr	r2, [pc, #532]	; (800d8a4 <_strtod_l+0xbfc>)
 800d690:	4019      	ands	r1, r3
 800d692:	4291      	cmp	r1, r2
 800d694:	4682      	mov	sl, r0
 800d696:	d960      	bls.n	800d75a <_strtod_l+0xab2>
 800d698:	ee18 3a90 	vmov	r3, s17
 800d69c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	d104      	bne.n	800d6ae <_strtod_l+0xa06>
 800d6a4:	ee18 3a10 	vmov	r3, s16
 800d6a8:	3301      	adds	r3, #1
 800d6aa:	f43f ad45 	beq.w	800d138 <_strtod_l+0x490>
 800d6ae:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d8b0 <_strtod_l+0xc08>
 800d6b2:	f04f 3aff 	mov.w	sl, #4294967295
 800d6b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d6b8:	4620      	mov	r0, r4
 800d6ba:	f001 fcd1 	bl	800f060 <_Bfree>
 800d6be:	9905      	ldr	r1, [sp, #20]
 800d6c0:	4620      	mov	r0, r4
 800d6c2:	f001 fccd 	bl	800f060 <_Bfree>
 800d6c6:	4631      	mov	r1, r6
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	f001 fcc9 	bl	800f060 <_Bfree>
 800d6ce:	4629      	mov	r1, r5
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	f001 fcc5 	bl	800f060 <_Bfree>
 800d6d6:	e61a      	b.n	800d30e <_strtod_l+0x666>
 800d6d8:	f1ba 0f00 	cmp.w	sl, #0
 800d6dc:	d11b      	bne.n	800d716 <_strtod_l+0xa6e>
 800d6de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d6e2:	b9f3      	cbnz	r3, 800d722 <_strtod_l+0xa7a>
 800d6e4:	4b6c      	ldr	r3, [pc, #432]	; (800d898 <_strtod_l+0xbf0>)
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	4640      	mov	r0, r8
 800d6ea:	4649      	mov	r1, r9
 800d6ec:	f7f3 fa06 	bl	8000afc <__aeabi_dcmplt>
 800d6f0:	b9d0      	cbnz	r0, 800d728 <_strtod_l+0xa80>
 800d6f2:	4640      	mov	r0, r8
 800d6f4:	4649      	mov	r1, r9
 800d6f6:	4b6c      	ldr	r3, [pc, #432]	; (800d8a8 <_strtod_l+0xc00>)
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	f7f2 ff8d 	bl	8000618 <__aeabi_dmul>
 800d6fe:	4680      	mov	r8, r0
 800d700:	4689      	mov	r9, r1
 800d702:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d706:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d70a:	9315      	str	r3, [sp, #84]	; 0x54
 800d70c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d710:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d714:	e79d      	b.n	800d652 <_strtod_l+0x9aa>
 800d716:	f1ba 0f01 	cmp.w	sl, #1
 800d71a:	d102      	bne.n	800d722 <_strtod_l+0xa7a>
 800d71c:	2f00      	cmp	r7, #0
 800d71e:	f43f ad83 	beq.w	800d228 <_strtod_l+0x580>
 800d722:	4b62      	ldr	r3, [pc, #392]	; (800d8ac <_strtod_l+0xc04>)
 800d724:	2200      	movs	r2, #0
 800d726:	e78e      	b.n	800d646 <_strtod_l+0x99e>
 800d728:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d8a8 <_strtod_l+0xc00>
 800d72c:	f04f 0800 	mov.w	r8, #0
 800d730:	e7e7      	b.n	800d702 <_strtod_l+0xa5a>
 800d732:	4b5d      	ldr	r3, [pc, #372]	; (800d8a8 <_strtod_l+0xc00>)
 800d734:	4640      	mov	r0, r8
 800d736:	4649      	mov	r1, r9
 800d738:	2200      	movs	r2, #0
 800d73a:	f7f2 ff6d 	bl	8000618 <__aeabi_dmul>
 800d73e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d740:	4680      	mov	r8, r0
 800d742:	4689      	mov	r9, r1
 800d744:	b933      	cbnz	r3, 800d754 <_strtod_l+0xaac>
 800d746:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d74a:	900e      	str	r0, [sp, #56]	; 0x38
 800d74c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d74e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d752:	e7dd      	b.n	800d710 <_strtod_l+0xa68>
 800d754:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d758:	e7f9      	b.n	800d74e <_strtod_l+0xaa6>
 800d75a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d75e:	9b04      	ldr	r3, [sp, #16]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d1a8      	bne.n	800d6b6 <_strtod_l+0xa0e>
 800d764:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d768:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d76a:	0d1b      	lsrs	r3, r3, #20
 800d76c:	051b      	lsls	r3, r3, #20
 800d76e:	429a      	cmp	r2, r3
 800d770:	d1a1      	bne.n	800d6b6 <_strtod_l+0xa0e>
 800d772:	4640      	mov	r0, r8
 800d774:	4649      	mov	r1, r9
 800d776:	f7f3 faaf 	bl	8000cd8 <__aeabi_d2lz>
 800d77a:	f7f2 ff1f 	bl	80005bc <__aeabi_l2d>
 800d77e:	4602      	mov	r2, r0
 800d780:	460b      	mov	r3, r1
 800d782:	4640      	mov	r0, r8
 800d784:	4649      	mov	r1, r9
 800d786:	f7f2 fd8f 	bl	80002a8 <__aeabi_dsub>
 800d78a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d78c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d790:	ea43 030a 	orr.w	r3, r3, sl
 800d794:	4313      	orrs	r3, r2
 800d796:	4680      	mov	r8, r0
 800d798:	4689      	mov	r9, r1
 800d79a:	d055      	beq.n	800d848 <_strtod_l+0xba0>
 800d79c:	a336      	add	r3, pc, #216	; (adr r3, 800d878 <_strtod_l+0xbd0>)
 800d79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a2:	f7f3 f9ab 	bl	8000afc <__aeabi_dcmplt>
 800d7a6:	2800      	cmp	r0, #0
 800d7a8:	f47f acd0 	bne.w	800d14c <_strtod_l+0x4a4>
 800d7ac:	a334      	add	r3, pc, #208	; (adr r3, 800d880 <_strtod_l+0xbd8>)
 800d7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b2:	4640      	mov	r0, r8
 800d7b4:	4649      	mov	r1, r9
 800d7b6:	f7f3 f9bf 	bl	8000b38 <__aeabi_dcmpgt>
 800d7ba:	2800      	cmp	r0, #0
 800d7bc:	f43f af7b 	beq.w	800d6b6 <_strtod_l+0xa0e>
 800d7c0:	e4c4      	b.n	800d14c <_strtod_l+0x4a4>
 800d7c2:	9b04      	ldr	r3, [sp, #16]
 800d7c4:	b333      	cbz	r3, 800d814 <_strtod_l+0xb6c>
 800d7c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7c8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d7cc:	d822      	bhi.n	800d814 <_strtod_l+0xb6c>
 800d7ce:	a32e      	add	r3, pc, #184	; (adr r3, 800d888 <_strtod_l+0xbe0>)
 800d7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d4:	4640      	mov	r0, r8
 800d7d6:	4649      	mov	r1, r9
 800d7d8:	f7f3 f99a 	bl	8000b10 <__aeabi_dcmple>
 800d7dc:	b1a0      	cbz	r0, 800d808 <_strtod_l+0xb60>
 800d7de:	4649      	mov	r1, r9
 800d7e0:	4640      	mov	r0, r8
 800d7e2:	f7f3 f9f1 	bl	8000bc8 <__aeabi_d2uiz>
 800d7e6:	2801      	cmp	r0, #1
 800d7e8:	bf38      	it	cc
 800d7ea:	2001      	movcc	r0, #1
 800d7ec:	f7f2 fe9a 	bl	8000524 <__aeabi_ui2d>
 800d7f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7f2:	4680      	mov	r8, r0
 800d7f4:	4689      	mov	r9, r1
 800d7f6:	bb23      	cbnz	r3, 800d842 <_strtod_l+0xb9a>
 800d7f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d7fc:	9010      	str	r0, [sp, #64]	; 0x40
 800d7fe:	9311      	str	r3, [sp, #68]	; 0x44
 800d800:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d804:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d80a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d80c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d810:	1a9b      	subs	r3, r3, r2
 800d812:	9309      	str	r3, [sp, #36]	; 0x24
 800d814:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d818:	eeb0 0a48 	vmov.f32	s0, s16
 800d81c:	eef0 0a68 	vmov.f32	s1, s17
 800d820:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d824:	f001 ff4e 	bl	800f6c4 <__ulp>
 800d828:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d82c:	ec53 2b10 	vmov	r2, r3, d0
 800d830:	f7f2 fef2 	bl	8000618 <__aeabi_dmul>
 800d834:	ec53 2b18 	vmov	r2, r3, d8
 800d838:	f7f2 fd38 	bl	80002ac <__adddf3>
 800d83c:	4682      	mov	sl, r0
 800d83e:	468b      	mov	fp, r1
 800d840:	e78d      	b.n	800d75e <_strtod_l+0xab6>
 800d842:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d846:	e7db      	b.n	800d800 <_strtod_l+0xb58>
 800d848:	a311      	add	r3, pc, #68	; (adr r3, 800d890 <_strtod_l+0xbe8>)
 800d84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d84e:	f7f3 f955 	bl	8000afc <__aeabi_dcmplt>
 800d852:	e7b2      	b.n	800d7ba <_strtod_l+0xb12>
 800d854:	2300      	movs	r3, #0
 800d856:	930a      	str	r3, [sp, #40]	; 0x28
 800d858:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d85a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d85c:	6013      	str	r3, [r2, #0]
 800d85e:	f7ff ba6b 	b.w	800cd38 <_strtod_l+0x90>
 800d862:	2a65      	cmp	r2, #101	; 0x65
 800d864:	f43f ab5f 	beq.w	800cf26 <_strtod_l+0x27e>
 800d868:	2a45      	cmp	r2, #69	; 0x45
 800d86a:	f43f ab5c 	beq.w	800cf26 <_strtod_l+0x27e>
 800d86e:	2301      	movs	r3, #1
 800d870:	f7ff bb94 	b.w	800cf9c <_strtod_l+0x2f4>
 800d874:	f3af 8000 	nop.w
 800d878:	94a03595 	.word	0x94a03595
 800d87c:	3fdfffff 	.word	0x3fdfffff
 800d880:	35afe535 	.word	0x35afe535
 800d884:	3fe00000 	.word	0x3fe00000
 800d888:	ffc00000 	.word	0xffc00000
 800d88c:	41dfffff 	.word	0x41dfffff
 800d890:	94a03595 	.word	0x94a03595
 800d894:	3fcfffff 	.word	0x3fcfffff
 800d898:	3ff00000 	.word	0x3ff00000
 800d89c:	7ff00000 	.word	0x7ff00000
 800d8a0:	7fe00000 	.word	0x7fe00000
 800d8a4:	7c9fffff 	.word	0x7c9fffff
 800d8a8:	3fe00000 	.word	0x3fe00000
 800d8ac:	bff00000 	.word	0xbff00000
 800d8b0:	7fefffff 	.word	0x7fefffff

0800d8b4 <_strtod_r>:
 800d8b4:	4b01      	ldr	r3, [pc, #4]	; (800d8bc <_strtod_r+0x8>)
 800d8b6:	f7ff b9f7 	b.w	800cca8 <_strtod_l>
 800d8ba:	bf00      	nop
 800d8bc:	20000110 	.word	0x20000110

0800d8c0 <_strtol_l.constprop.0>:
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8c6:	d001      	beq.n	800d8cc <_strtol_l.constprop.0+0xc>
 800d8c8:	2b24      	cmp	r3, #36	; 0x24
 800d8ca:	d906      	bls.n	800d8da <_strtol_l.constprop.0+0x1a>
 800d8cc:	f7fe f8a2 	bl	800ba14 <__errno>
 800d8d0:	2316      	movs	r3, #22
 800d8d2:	6003      	str	r3, [r0, #0]
 800d8d4:	2000      	movs	r0, #0
 800d8d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d9c0 <_strtol_l.constprop.0+0x100>
 800d8de:	460d      	mov	r5, r1
 800d8e0:	462e      	mov	r6, r5
 800d8e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d8e6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d8ea:	f017 0708 	ands.w	r7, r7, #8
 800d8ee:	d1f7      	bne.n	800d8e0 <_strtol_l.constprop.0+0x20>
 800d8f0:	2c2d      	cmp	r4, #45	; 0x2d
 800d8f2:	d132      	bne.n	800d95a <_strtol_l.constprop.0+0x9a>
 800d8f4:	782c      	ldrb	r4, [r5, #0]
 800d8f6:	2701      	movs	r7, #1
 800d8f8:	1cb5      	adds	r5, r6, #2
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d05b      	beq.n	800d9b6 <_strtol_l.constprop.0+0xf6>
 800d8fe:	2b10      	cmp	r3, #16
 800d900:	d109      	bne.n	800d916 <_strtol_l.constprop.0+0x56>
 800d902:	2c30      	cmp	r4, #48	; 0x30
 800d904:	d107      	bne.n	800d916 <_strtol_l.constprop.0+0x56>
 800d906:	782c      	ldrb	r4, [r5, #0]
 800d908:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d90c:	2c58      	cmp	r4, #88	; 0x58
 800d90e:	d14d      	bne.n	800d9ac <_strtol_l.constprop.0+0xec>
 800d910:	786c      	ldrb	r4, [r5, #1]
 800d912:	2310      	movs	r3, #16
 800d914:	3502      	adds	r5, #2
 800d916:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d91a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d91e:	f04f 0c00 	mov.w	ip, #0
 800d922:	fbb8 f9f3 	udiv	r9, r8, r3
 800d926:	4666      	mov	r6, ip
 800d928:	fb03 8a19 	mls	sl, r3, r9, r8
 800d92c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d930:	f1be 0f09 	cmp.w	lr, #9
 800d934:	d816      	bhi.n	800d964 <_strtol_l.constprop.0+0xa4>
 800d936:	4674      	mov	r4, lr
 800d938:	42a3      	cmp	r3, r4
 800d93a:	dd24      	ble.n	800d986 <_strtol_l.constprop.0+0xc6>
 800d93c:	f1bc 0f00 	cmp.w	ip, #0
 800d940:	db1e      	blt.n	800d980 <_strtol_l.constprop.0+0xc0>
 800d942:	45b1      	cmp	r9, r6
 800d944:	d31c      	bcc.n	800d980 <_strtol_l.constprop.0+0xc0>
 800d946:	d101      	bne.n	800d94c <_strtol_l.constprop.0+0x8c>
 800d948:	45a2      	cmp	sl, r4
 800d94a:	db19      	blt.n	800d980 <_strtol_l.constprop.0+0xc0>
 800d94c:	fb06 4603 	mla	r6, r6, r3, r4
 800d950:	f04f 0c01 	mov.w	ip, #1
 800d954:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d958:	e7e8      	b.n	800d92c <_strtol_l.constprop.0+0x6c>
 800d95a:	2c2b      	cmp	r4, #43	; 0x2b
 800d95c:	bf04      	itt	eq
 800d95e:	782c      	ldrbeq	r4, [r5, #0]
 800d960:	1cb5      	addeq	r5, r6, #2
 800d962:	e7ca      	b.n	800d8fa <_strtol_l.constprop.0+0x3a>
 800d964:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d968:	f1be 0f19 	cmp.w	lr, #25
 800d96c:	d801      	bhi.n	800d972 <_strtol_l.constprop.0+0xb2>
 800d96e:	3c37      	subs	r4, #55	; 0x37
 800d970:	e7e2      	b.n	800d938 <_strtol_l.constprop.0+0x78>
 800d972:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d976:	f1be 0f19 	cmp.w	lr, #25
 800d97a:	d804      	bhi.n	800d986 <_strtol_l.constprop.0+0xc6>
 800d97c:	3c57      	subs	r4, #87	; 0x57
 800d97e:	e7db      	b.n	800d938 <_strtol_l.constprop.0+0x78>
 800d980:	f04f 3cff 	mov.w	ip, #4294967295
 800d984:	e7e6      	b.n	800d954 <_strtol_l.constprop.0+0x94>
 800d986:	f1bc 0f00 	cmp.w	ip, #0
 800d98a:	da05      	bge.n	800d998 <_strtol_l.constprop.0+0xd8>
 800d98c:	2322      	movs	r3, #34	; 0x22
 800d98e:	6003      	str	r3, [r0, #0]
 800d990:	4646      	mov	r6, r8
 800d992:	b942      	cbnz	r2, 800d9a6 <_strtol_l.constprop.0+0xe6>
 800d994:	4630      	mov	r0, r6
 800d996:	e79e      	b.n	800d8d6 <_strtol_l.constprop.0+0x16>
 800d998:	b107      	cbz	r7, 800d99c <_strtol_l.constprop.0+0xdc>
 800d99a:	4276      	negs	r6, r6
 800d99c:	2a00      	cmp	r2, #0
 800d99e:	d0f9      	beq.n	800d994 <_strtol_l.constprop.0+0xd4>
 800d9a0:	f1bc 0f00 	cmp.w	ip, #0
 800d9a4:	d000      	beq.n	800d9a8 <_strtol_l.constprop.0+0xe8>
 800d9a6:	1e69      	subs	r1, r5, #1
 800d9a8:	6011      	str	r1, [r2, #0]
 800d9aa:	e7f3      	b.n	800d994 <_strtol_l.constprop.0+0xd4>
 800d9ac:	2430      	movs	r4, #48	; 0x30
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d1b1      	bne.n	800d916 <_strtol_l.constprop.0+0x56>
 800d9b2:	2308      	movs	r3, #8
 800d9b4:	e7af      	b.n	800d916 <_strtol_l.constprop.0+0x56>
 800d9b6:	2c30      	cmp	r4, #48	; 0x30
 800d9b8:	d0a5      	beq.n	800d906 <_strtol_l.constprop.0+0x46>
 800d9ba:	230a      	movs	r3, #10
 800d9bc:	e7ab      	b.n	800d916 <_strtol_l.constprop.0+0x56>
 800d9be:	bf00      	nop
 800d9c0:	080120a1 	.word	0x080120a1

0800d9c4 <_strtol_r>:
 800d9c4:	f7ff bf7c 	b.w	800d8c0 <_strtol_l.constprop.0>

0800d9c8 <_write_r>:
 800d9c8:	b538      	push	{r3, r4, r5, lr}
 800d9ca:	4d07      	ldr	r5, [pc, #28]	; (800d9e8 <_write_r+0x20>)
 800d9cc:	4604      	mov	r4, r0
 800d9ce:	4608      	mov	r0, r1
 800d9d0:	4611      	mov	r1, r2
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	602a      	str	r2, [r5, #0]
 800d9d6:	461a      	mov	r2, r3
 800d9d8:	f7f3 ff70 	bl	80018bc <_write>
 800d9dc:	1c43      	adds	r3, r0, #1
 800d9de:	d102      	bne.n	800d9e6 <_write_r+0x1e>
 800d9e0:	682b      	ldr	r3, [r5, #0]
 800d9e2:	b103      	cbz	r3, 800d9e6 <_write_r+0x1e>
 800d9e4:	6023      	str	r3, [r4, #0]
 800d9e6:	bd38      	pop	{r3, r4, r5, pc}
 800d9e8:	20008cd4 	.word	0x20008cd4

0800d9ec <_close_r>:
 800d9ec:	b538      	push	{r3, r4, r5, lr}
 800d9ee:	4d06      	ldr	r5, [pc, #24]	; (800da08 <_close_r+0x1c>)
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	4604      	mov	r4, r0
 800d9f4:	4608      	mov	r0, r1
 800d9f6:	602b      	str	r3, [r5, #0]
 800d9f8:	f7f5 fb1d 	bl	8003036 <_close>
 800d9fc:	1c43      	adds	r3, r0, #1
 800d9fe:	d102      	bne.n	800da06 <_close_r+0x1a>
 800da00:	682b      	ldr	r3, [r5, #0]
 800da02:	b103      	cbz	r3, 800da06 <_close_r+0x1a>
 800da04:	6023      	str	r3, [r4, #0]
 800da06:	bd38      	pop	{r3, r4, r5, pc}
 800da08:	20008cd4 	.word	0x20008cd4

0800da0c <quorem>:
 800da0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da10:	6903      	ldr	r3, [r0, #16]
 800da12:	690c      	ldr	r4, [r1, #16]
 800da14:	42a3      	cmp	r3, r4
 800da16:	4607      	mov	r7, r0
 800da18:	f2c0 8081 	blt.w	800db1e <quorem+0x112>
 800da1c:	3c01      	subs	r4, #1
 800da1e:	f101 0814 	add.w	r8, r1, #20
 800da22:	f100 0514 	add.w	r5, r0, #20
 800da26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800da2a:	9301      	str	r3, [sp, #4]
 800da2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800da30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800da34:	3301      	adds	r3, #1
 800da36:	429a      	cmp	r2, r3
 800da38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800da3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800da40:	fbb2 f6f3 	udiv	r6, r2, r3
 800da44:	d331      	bcc.n	800daaa <quorem+0x9e>
 800da46:	f04f 0e00 	mov.w	lr, #0
 800da4a:	4640      	mov	r0, r8
 800da4c:	46ac      	mov	ip, r5
 800da4e:	46f2      	mov	sl, lr
 800da50:	f850 2b04 	ldr.w	r2, [r0], #4
 800da54:	b293      	uxth	r3, r2
 800da56:	fb06 e303 	mla	r3, r6, r3, lr
 800da5a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800da5e:	b29b      	uxth	r3, r3
 800da60:	ebaa 0303 	sub.w	r3, sl, r3
 800da64:	f8dc a000 	ldr.w	sl, [ip]
 800da68:	0c12      	lsrs	r2, r2, #16
 800da6a:	fa13 f38a 	uxtah	r3, r3, sl
 800da6e:	fb06 e202 	mla	r2, r6, r2, lr
 800da72:	9300      	str	r3, [sp, #0]
 800da74:	9b00      	ldr	r3, [sp, #0]
 800da76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800da7a:	b292      	uxth	r2, r2
 800da7c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800da80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800da84:	f8bd 3000 	ldrh.w	r3, [sp]
 800da88:	4581      	cmp	r9, r0
 800da8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da8e:	f84c 3b04 	str.w	r3, [ip], #4
 800da92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800da96:	d2db      	bcs.n	800da50 <quorem+0x44>
 800da98:	f855 300b 	ldr.w	r3, [r5, fp]
 800da9c:	b92b      	cbnz	r3, 800daaa <quorem+0x9e>
 800da9e:	9b01      	ldr	r3, [sp, #4]
 800daa0:	3b04      	subs	r3, #4
 800daa2:	429d      	cmp	r5, r3
 800daa4:	461a      	mov	r2, r3
 800daa6:	d32e      	bcc.n	800db06 <quorem+0xfa>
 800daa8:	613c      	str	r4, [r7, #16]
 800daaa:	4638      	mov	r0, r7
 800daac:	f001 fd64 	bl	800f578 <__mcmp>
 800dab0:	2800      	cmp	r0, #0
 800dab2:	db24      	blt.n	800dafe <quorem+0xf2>
 800dab4:	3601      	adds	r6, #1
 800dab6:	4628      	mov	r0, r5
 800dab8:	f04f 0c00 	mov.w	ip, #0
 800dabc:	f858 2b04 	ldr.w	r2, [r8], #4
 800dac0:	f8d0 e000 	ldr.w	lr, [r0]
 800dac4:	b293      	uxth	r3, r2
 800dac6:	ebac 0303 	sub.w	r3, ip, r3
 800daca:	0c12      	lsrs	r2, r2, #16
 800dacc:	fa13 f38e 	uxtah	r3, r3, lr
 800dad0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dad4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dad8:	b29b      	uxth	r3, r3
 800dada:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dade:	45c1      	cmp	r9, r8
 800dae0:	f840 3b04 	str.w	r3, [r0], #4
 800dae4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dae8:	d2e8      	bcs.n	800dabc <quorem+0xb0>
 800daea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800daee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800daf2:	b922      	cbnz	r2, 800dafe <quorem+0xf2>
 800daf4:	3b04      	subs	r3, #4
 800daf6:	429d      	cmp	r5, r3
 800daf8:	461a      	mov	r2, r3
 800dafa:	d30a      	bcc.n	800db12 <quorem+0x106>
 800dafc:	613c      	str	r4, [r7, #16]
 800dafe:	4630      	mov	r0, r6
 800db00:	b003      	add	sp, #12
 800db02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db06:	6812      	ldr	r2, [r2, #0]
 800db08:	3b04      	subs	r3, #4
 800db0a:	2a00      	cmp	r2, #0
 800db0c:	d1cc      	bne.n	800daa8 <quorem+0x9c>
 800db0e:	3c01      	subs	r4, #1
 800db10:	e7c7      	b.n	800daa2 <quorem+0x96>
 800db12:	6812      	ldr	r2, [r2, #0]
 800db14:	3b04      	subs	r3, #4
 800db16:	2a00      	cmp	r2, #0
 800db18:	d1f0      	bne.n	800dafc <quorem+0xf0>
 800db1a:	3c01      	subs	r4, #1
 800db1c:	e7eb      	b.n	800daf6 <quorem+0xea>
 800db1e:	2000      	movs	r0, #0
 800db20:	e7ee      	b.n	800db00 <quorem+0xf4>
 800db22:	0000      	movs	r0, r0
 800db24:	0000      	movs	r0, r0
	...

0800db28 <_dtoa_r>:
 800db28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db2c:	ed2d 8b04 	vpush	{d8-d9}
 800db30:	ec57 6b10 	vmov	r6, r7, d0
 800db34:	b093      	sub	sp, #76	; 0x4c
 800db36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800db38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800db3c:	9106      	str	r1, [sp, #24]
 800db3e:	ee10 aa10 	vmov	sl, s0
 800db42:	4604      	mov	r4, r0
 800db44:	9209      	str	r2, [sp, #36]	; 0x24
 800db46:	930c      	str	r3, [sp, #48]	; 0x30
 800db48:	46bb      	mov	fp, r7
 800db4a:	b975      	cbnz	r5, 800db6a <_dtoa_r+0x42>
 800db4c:	2010      	movs	r0, #16
 800db4e:	f001 fa21 	bl	800ef94 <malloc>
 800db52:	4602      	mov	r2, r0
 800db54:	6260      	str	r0, [r4, #36]	; 0x24
 800db56:	b920      	cbnz	r0, 800db62 <_dtoa_r+0x3a>
 800db58:	4ba7      	ldr	r3, [pc, #668]	; (800ddf8 <_dtoa_r+0x2d0>)
 800db5a:	21ea      	movs	r1, #234	; 0xea
 800db5c:	48a7      	ldr	r0, [pc, #668]	; (800ddfc <_dtoa_r+0x2d4>)
 800db5e:	f002 f8fd 	bl	800fd5c <__assert_func>
 800db62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800db66:	6005      	str	r5, [r0, #0]
 800db68:	60c5      	str	r5, [r0, #12]
 800db6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db6c:	6819      	ldr	r1, [r3, #0]
 800db6e:	b151      	cbz	r1, 800db86 <_dtoa_r+0x5e>
 800db70:	685a      	ldr	r2, [r3, #4]
 800db72:	604a      	str	r2, [r1, #4]
 800db74:	2301      	movs	r3, #1
 800db76:	4093      	lsls	r3, r2
 800db78:	608b      	str	r3, [r1, #8]
 800db7a:	4620      	mov	r0, r4
 800db7c:	f001 fa70 	bl	800f060 <_Bfree>
 800db80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db82:	2200      	movs	r2, #0
 800db84:	601a      	str	r2, [r3, #0]
 800db86:	1e3b      	subs	r3, r7, #0
 800db88:	bfaa      	itet	ge
 800db8a:	2300      	movge	r3, #0
 800db8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800db90:	f8c8 3000 	strge.w	r3, [r8]
 800db94:	4b9a      	ldr	r3, [pc, #616]	; (800de00 <_dtoa_r+0x2d8>)
 800db96:	bfbc      	itt	lt
 800db98:	2201      	movlt	r2, #1
 800db9a:	f8c8 2000 	strlt.w	r2, [r8]
 800db9e:	ea33 030b 	bics.w	r3, r3, fp
 800dba2:	d11b      	bne.n	800dbdc <_dtoa_r+0xb4>
 800dba4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dba6:	f242 730f 	movw	r3, #9999	; 0x270f
 800dbaa:	6013      	str	r3, [r2, #0]
 800dbac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dbb0:	4333      	orrs	r3, r6
 800dbb2:	f000 8592 	beq.w	800e6da <_dtoa_r+0xbb2>
 800dbb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dbb8:	b963      	cbnz	r3, 800dbd4 <_dtoa_r+0xac>
 800dbba:	4b92      	ldr	r3, [pc, #584]	; (800de04 <_dtoa_r+0x2dc>)
 800dbbc:	e022      	b.n	800dc04 <_dtoa_r+0xdc>
 800dbbe:	4b92      	ldr	r3, [pc, #584]	; (800de08 <_dtoa_r+0x2e0>)
 800dbc0:	9301      	str	r3, [sp, #4]
 800dbc2:	3308      	adds	r3, #8
 800dbc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dbc6:	6013      	str	r3, [r2, #0]
 800dbc8:	9801      	ldr	r0, [sp, #4]
 800dbca:	b013      	add	sp, #76	; 0x4c
 800dbcc:	ecbd 8b04 	vpop	{d8-d9}
 800dbd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbd4:	4b8b      	ldr	r3, [pc, #556]	; (800de04 <_dtoa_r+0x2dc>)
 800dbd6:	9301      	str	r3, [sp, #4]
 800dbd8:	3303      	adds	r3, #3
 800dbda:	e7f3      	b.n	800dbc4 <_dtoa_r+0x9c>
 800dbdc:	2200      	movs	r2, #0
 800dbde:	2300      	movs	r3, #0
 800dbe0:	4650      	mov	r0, sl
 800dbe2:	4659      	mov	r1, fp
 800dbe4:	f7f2 ff80 	bl	8000ae8 <__aeabi_dcmpeq>
 800dbe8:	ec4b ab19 	vmov	d9, sl, fp
 800dbec:	4680      	mov	r8, r0
 800dbee:	b158      	cbz	r0, 800dc08 <_dtoa_r+0xe0>
 800dbf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	6013      	str	r3, [r2, #0]
 800dbf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	f000 856b 	beq.w	800e6d4 <_dtoa_r+0xbac>
 800dbfe:	4883      	ldr	r0, [pc, #524]	; (800de0c <_dtoa_r+0x2e4>)
 800dc00:	6018      	str	r0, [r3, #0]
 800dc02:	1e43      	subs	r3, r0, #1
 800dc04:	9301      	str	r3, [sp, #4]
 800dc06:	e7df      	b.n	800dbc8 <_dtoa_r+0xa0>
 800dc08:	ec4b ab10 	vmov	d0, sl, fp
 800dc0c:	aa10      	add	r2, sp, #64	; 0x40
 800dc0e:	a911      	add	r1, sp, #68	; 0x44
 800dc10:	4620      	mov	r0, r4
 800dc12:	f001 fdd3 	bl	800f7bc <__d2b>
 800dc16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800dc1a:	ee08 0a10 	vmov	s16, r0
 800dc1e:	2d00      	cmp	r5, #0
 800dc20:	f000 8084 	beq.w	800dd2c <_dtoa_r+0x204>
 800dc24:	ee19 3a90 	vmov	r3, s19
 800dc28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800dc30:	4656      	mov	r6, sl
 800dc32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800dc36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dc3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800dc3e:	4b74      	ldr	r3, [pc, #464]	; (800de10 <_dtoa_r+0x2e8>)
 800dc40:	2200      	movs	r2, #0
 800dc42:	4630      	mov	r0, r6
 800dc44:	4639      	mov	r1, r7
 800dc46:	f7f2 fb2f 	bl	80002a8 <__aeabi_dsub>
 800dc4a:	a365      	add	r3, pc, #404	; (adr r3, 800dde0 <_dtoa_r+0x2b8>)
 800dc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc50:	f7f2 fce2 	bl	8000618 <__aeabi_dmul>
 800dc54:	a364      	add	r3, pc, #400	; (adr r3, 800dde8 <_dtoa_r+0x2c0>)
 800dc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc5a:	f7f2 fb27 	bl	80002ac <__adddf3>
 800dc5e:	4606      	mov	r6, r0
 800dc60:	4628      	mov	r0, r5
 800dc62:	460f      	mov	r7, r1
 800dc64:	f7f2 fc6e 	bl	8000544 <__aeabi_i2d>
 800dc68:	a361      	add	r3, pc, #388	; (adr r3, 800ddf0 <_dtoa_r+0x2c8>)
 800dc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc6e:	f7f2 fcd3 	bl	8000618 <__aeabi_dmul>
 800dc72:	4602      	mov	r2, r0
 800dc74:	460b      	mov	r3, r1
 800dc76:	4630      	mov	r0, r6
 800dc78:	4639      	mov	r1, r7
 800dc7a:	f7f2 fb17 	bl	80002ac <__adddf3>
 800dc7e:	4606      	mov	r6, r0
 800dc80:	460f      	mov	r7, r1
 800dc82:	f7f2 ff79 	bl	8000b78 <__aeabi_d2iz>
 800dc86:	2200      	movs	r2, #0
 800dc88:	9000      	str	r0, [sp, #0]
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	4630      	mov	r0, r6
 800dc8e:	4639      	mov	r1, r7
 800dc90:	f7f2 ff34 	bl	8000afc <__aeabi_dcmplt>
 800dc94:	b150      	cbz	r0, 800dcac <_dtoa_r+0x184>
 800dc96:	9800      	ldr	r0, [sp, #0]
 800dc98:	f7f2 fc54 	bl	8000544 <__aeabi_i2d>
 800dc9c:	4632      	mov	r2, r6
 800dc9e:	463b      	mov	r3, r7
 800dca0:	f7f2 ff22 	bl	8000ae8 <__aeabi_dcmpeq>
 800dca4:	b910      	cbnz	r0, 800dcac <_dtoa_r+0x184>
 800dca6:	9b00      	ldr	r3, [sp, #0]
 800dca8:	3b01      	subs	r3, #1
 800dcaa:	9300      	str	r3, [sp, #0]
 800dcac:	9b00      	ldr	r3, [sp, #0]
 800dcae:	2b16      	cmp	r3, #22
 800dcb0:	d85a      	bhi.n	800dd68 <_dtoa_r+0x240>
 800dcb2:	9a00      	ldr	r2, [sp, #0]
 800dcb4:	4b57      	ldr	r3, [pc, #348]	; (800de14 <_dtoa_r+0x2ec>)
 800dcb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dcba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcbe:	ec51 0b19 	vmov	r0, r1, d9
 800dcc2:	f7f2 ff1b 	bl	8000afc <__aeabi_dcmplt>
 800dcc6:	2800      	cmp	r0, #0
 800dcc8:	d050      	beq.n	800dd6c <_dtoa_r+0x244>
 800dcca:	9b00      	ldr	r3, [sp, #0]
 800dccc:	3b01      	subs	r3, #1
 800dcce:	9300      	str	r3, [sp, #0]
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	930b      	str	r3, [sp, #44]	; 0x2c
 800dcd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dcd6:	1b5d      	subs	r5, r3, r5
 800dcd8:	1e6b      	subs	r3, r5, #1
 800dcda:	9305      	str	r3, [sp, #20]
 800dcdc:	bf45      	ittet	mi
 800dcde:	f1c5 0301 	rsbmi	r3, r5, #1
 800dce2:	9304      	strmi	r3, [sp, #16]
 800dce4:	2300      	movpl	r3, #0
 800dce6:	2300      	movmi	r3, #0
 800dce8:	bf4c      	ite	mi
 800dcea:	9305      	strmi	r3, [sp, #20]
 800dcec:	9304      	strpl	r3, [sp, #16]
 800dcee:	9b00      	ldr	r3, [sp, #0]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	db3d      	blt.n	800dd70 <_dtoa_r+0x248>
 800dcf4:	9b05      	ldr	r3, [sp, #20]
 800dcf6:	9a00      	ldr	r2, [sp, #0]
 800dcf8:	920a      	str	r2, [sp, #40]	; 0x28
 800dcfa:	4413      	add	r3, r2
 800dcfc:	9305      	str	r3, [sp, #20]
 800dcfe:	2300      	movs	r3, #0
 800dd00:	9307      	str	r3, [sp, #28]
 800dd02:	9b06      	ldr	r3, [sp, #24]
 800dd04:	2b09      	cmp	r3, #9
 800dd06:	f200 8089 	bhi.w	800de1c <_dtoa_r+0x2f4>
 800dd0a:	2b05      	cmp	r3, #5
 800dd0c:	bfc4      	itt	gt
 800dd0e:	3b04      	subgt	r3, #4
 800dd10:	9306      	strgt	r3, [sp, #24]
 800dd12:	9b06      	ldr	r3, [sp, #24]
 800dd14:	f1a3 0302 	sub.w	r3, r3, #2
 800dd18:	bfcc      	ite	gt
 800dd1a:	2500      	movgt	r5, #0
 800dd1c:	2501      	movle	r5, #1
 800dd1e:	2b03      	cmp	r3, #3
 800dd20:	f200 8087 	bhi.w	800de32 <_dtoa_r+0x30a>
 800dd24:	e8df f003 	tbb	[pc, r3]
 800dd28:	59383a2d 	.word	0x59383a2d
 800dd2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800dd30:	441d      	add	r5, r3
 800dd32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dd36:	2b20      	cmp	r3, #32
 800dd38:	bfc1      	itttt	gt
 800dd3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dd3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800dd42:	fa0b f303 	lslgt.w	r3, fp, r3
 800dd46:	fa26 f000 	lsrgt.w	r0, r6, r0
 800dd4a:	bfda      	itte	le
 800dd4c:	f1c3 0320 	rsble	r3, r3, #32
 800dd50:	fa06 f003 	lslle.w	r0, r6, r3
 800dd54:	4318      	orrgt	r0, r3
 800dd56:	f7f2 fbe5 	bl	8000524 <__aeabi_ui2d>
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	4606      	mov	r6, r0
 800dd5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800dd62:	3d01      	subs	r5, #1
 800dd64:	930e      	str	r3, [sp, #56]	; 0x38
 800dd66:	e76a      	b.n	800dc3e <_dtoa_r+0x116>
 800dd68:	2301      	movs	r3, #1
 800dd6a:	e7b2      	b.n	800dcd2 <_dtoa_r+0x1aa>
 800dd6c:	900b      	str	r0, [sp, #44]	; 0x2c
 800dd6e:	e7b1      	b.n	800dcd4 <_dtoa_r+0x1ac>
 800dd70:	9b04      	ldr	r3, [sp, #16]
 800dd72:	9a00      	ldr	r2, [sp, #0]
 800dd74:	1a9b      	subs	r3, r3, r2
 800dd76:	9304      	str	r3, [sp, #16]
 800dd78:	4253      	negs	r3, r2
 800dd7a:	9307      	str	r3, [sp, #28]
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	930a      	str	r3, [sp, #40]	; 0x28
 800dd80:	e7bf      	b.n	800dd02 <_dtoa_r+0x1da>
 800dd82:	2300      	movs	r3, #0
 800dd84:	9308      	str	r3, [sp, #32]
 800dd86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	dc55      	bgt.n	800de38 <_dtoa_r+0x310>
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dd92:	461a      	mov	r2, r3
 800dd94:	9209      	str	r2, [sp, #36]	; 0x24
 800dd96:	e00c      	b.n	800ddb2 <_dtoa_r+0x28a>
 800dd98:	2301      	movs	r3, #1
 800dd9a:	e7f3      	b.n	800dd84 <_dtoa_r+0x25c>
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dda0:	9308      	str	r3, [sp, #32]
 800dda2:	9b00      	ldr	r3, [sp, #0]
 800dda4:	4413      	add	r3, r2
 800dda6:	9302      	str	r3, [sp, #8]
 800dda8:	3301      	adds	r3, #1
 800ddaa:	2b01      	cmp	r3, #1
 800ddac:	9303      	str	r3, [sp, #12]
 800ddae:	bfb8      	it	lt
 800ddb0:	2301      	movlt	r3, #1
 800ddb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	6042      	str	r2, [r0, #4]
 800ddb8:	2204      	movs	r2, #4
 800ddba:	f102 0614 	add.w	r6, r2, #20
 800ddbe:	429e      	cmp	r6, r3
 800ddc0:	6841      	ldr	r1, [r0, #4]
 800ddc2:	d93d      	bls.n	800de40 <_dtoa_r+0x318>
 800ddc4:	4620      	mov	r0, r4
 800ddc6:	f001 f90b 	bl	800efe0 <_Balloc>
 800ddca:	9001      	str	r0, [sp, #4]
 800ddcc:	2800      	cmp	r0, #0
 800ddce:	d13b      	bne.n	800de48 <_dtoa_r+0x320>
 800ddd0:	4b11      	ldr	r3, [pc, #68]	; (800de18 <_dtoa_r+0x2f0>)
 800ddd2:	4602      	mov	r2, r0
 800ddd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ddd8:	e6c0      	b.n	800db5c <_dtoa_r+0x34>
 800ddda:	2301      	movs	r3, #1
 800dddc:	e7df      	b.n	800dd9e <_dtoa_r+0x276>
 800ddde:	bf00      	nop
 800dde0:	636f4361 	.word	0x636f4361
 800dde4:	3fd287a7 	.word	0x3fd287a7
 800dde8:	8b60c8b3 	.word	0x8b60c8b3
 800ddec:	3fc68a28 	.word	0x3fc68a28
 800ddf0:	509f79fb 	.word	0x509f79fb
 800ddf4:	3fd34413 	.word	0x3fd34413
 800ddf8:	080121ae 	.word	0x080121ae
 800ddfc:	080121c5 	.word	0x080121c5
 800de00:	7ff00000 	.word	0x7ff00000
 800de04:	080121aa 	.word	0x080121aa
 800de08:	080121a1 	.word	0x080121a1
 800de0c:	08012025 	.word	0x08012025
 800de10:	3ff80000 	.word	0x3ff80000
 800de14:	08012330 	.word	0x08012330
 800de18:	08012220 	.word	0x08012220
 800de1c:	2501      	movs	r5, #1
 800de1e:	2300      	movs	r3, #0
 800de20:	9306      	str	r3, [sp, #24]
 800de22:	9508      	str	r5, [sp, #32]
 800de24:	f04f 33ff 	mov.w	r3, #4294967295
 800de28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800de2c:	2200      	movs	r2, #0
 800de2e:	2312      	movs	r3, #18
 800de30:	e7b0      	b.n	800dd94 <_dtoa_r+0x26c>
 800de32:	2301      	movs	r3, #1
 800de34:	9308      	str	r3, [sp, #32]
 800de36:	e7f5      	b.n	800de24 <_dtoa_r+0x2fc>
 800de38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800de3e:	e7b8      	b.n	800ddb2 <_dtoa_r+0x28a>
 800de40:	3101      	adds	r1, #1
 800de42:	6041      	str	r1, [r0, #4]
 800de44:	0052      	lsls	r2, r2, #1
 800de46:	e7b8      	b.n	800ddba <_dtoa_r+0x292>
 800de48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de4a:	9a01      	ldr	r2, [sp, #4]
 800de4c:	601a      	str	r2, [r3, #0]
 800de4e:	9b03      	ldr	r3, [sp, #12]
 800de50:	2b0e      	cmp	r3, #14
 800de52:	f200 809d 	bhi.w	800df90 <_dtoa_r+0x468>
 800de56:	2d00      	cmp	r5, #0
 800de58:	f000 809a 	beq.w	800df90 <_dtoa_r+0x468>
 800de5c:	9b00      	ldr	r3, [sp, #0]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	dd32      	ble.n	800dec8 <_dtoa_r+0x3a0>
 800de62:	4ab7      	ldr	r2, [pc, #732]	; (800e140 <_dtoa_r+0x618>)
 800de64:	f003 030f 	and.w	r3, r3, #15
 800de68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800de6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800de70:	9b00      	ldr	r3, [sp, #0]
 800de72:	05d8      	lsls	r0, r3, #23
 800de74:	ea4f 1723 	mov.w	r7, r3, asr #4
 800de78:	d516      	bpl.n	800dea8 <_dtoa_r+0x380>
 800de7a:	4bb2      	ldr	r3, [pc, #712]	; (800e144 <_dtoa_r+0x61c>)
 800de7c:	ec51 0b19 	vmov	r0, r1, d9
 800de80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800de84:	f7f2 fcf2 	bl	800086c <__aeabi_ddiv>
 800de88:	f007 070f 	and.w	r7, r7, #15
 800de8c:	4682      	mov	sl, r0
 800de8e:	468b      	mov	fp, r1
 800de90:	2503      	movs	r5, #3
 800de92:	4eac      	ldr	r6, [pc, #688]	; (800e144 <_dtoa_r+0x61c>)
 800de94:	b957      	cbnz	r7, 800deac <_dtoa_r+0x384>
 800de96:	4642      	mov	r2, r8
 800de98:	464b      	mov	r3, r9
 800de9a:	4650      	mov	r0, sl
 800de9c:	4659      	mov	r1, fp
 800de9e:	f7f2 fce5 	bl	800086c <__aeabi_ddiv>
 800dea2:	4682      	mov	sl, r0
 800dea4:	468b      	mov	fp, r1
 800dea6:	e028      	b.n	800defa <_dtoa_r+0x3d2>
 800dea8:	2502      	movs	r5, #2
 800deaa:	e7f2      	b.n	800de92 <_dtoa_r+0x36a>
 800deac:	07f9      	lsls	r1, r7, #31
 800deae:	d508      	bpl.n	800dec2 <_dtoa_r+0x39a>
 800deb0:	4640      	mov	r0, r8
 800deb2:	4649      	mov	r1, r9
 800deb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800deb8:	f7f2 fbae 	bl	8000618 <__aeabi_dmul>
 800debc:	3501      	adds	r5, #1
 800debe:	4680      	mov	r8, r0
 800dec0:	4689      	mov	r9, r1
 800dec2:	107f      	asrs	r7, r7, #1
 800dec4:	3608      	adds	r6, #8
 800dec6:	e7e5      	b.n	800de94 <_dtoa_r+0x36c>
 800dec8:	f000 809b 	beq.w	800e002 <_dtoa_r+0x4da>
 800decc:	9b00      	ldr	r3, [sp, #0]
 800dece:	4f9d      	ldr	r7, [pc, #628]	; (800e144 <_dtoa_r+0x61c>)
 800ded0:	425e      	negs	r6, r3
 800ded2:	4b9b      	ldr	r3, [pc, #620]	; (800e140 <_dtoa_r+0x618>)
 800ded4:	f006 020f 	and.w	r2, r6, #15
 800ded8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee0:	ec51 0b19 	vmov	r0, r1, d9
 800dee4:	f7f2 fb98 	bl	8000618 <__aeabi_dmul>
 800dee8:	1136      	asrs	r6, r6, #4
 800deea:	4682      	mov	sl, r0
 800deec:	468b      	mov	fp, r1
 800deee:	2300      	movs	r3, #0
 800def0:	2502      	movs	r5, #2
 800def2:	2e00      	cmp	r6, #0
 800def4:	d17a      	bne.n	800dfec <_dtoa_r+0x4c4>
 800def6:	2b00      	cmp	r3, #0
 800def8:	d1d3      	bne.n	800dea2 <_dtoa_r+0x37a>
 800defa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800defc:	2b00      	cmp	r3, #0
 800defe:	f000 8082 	beq.w	800e006 <_dtoa_r+0x4de>
 800df02:	4b91      	ldr	r3, [pc, #580]	; (800e148 <_dtoa_r+0x620>)
 800df04:	2200      	movs	r2, #0
 800df06:	4650      	mov	r0, sl
 800df08:	4659      	mov	r1, fp
 800df0a:	f7f2 fdf7 	bl	8000afc <__aeabi_dcmplt>
 800df0e:	2800      	cmp	r0, #0
 800df10:	d079      	beq.n	800e006 <_dtoa_r+0x4de>
 800df12:	9b03      	ldr	r3, [sp, #12]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d076      	beq.n	800e006 <_dtoa_r+0x4de>
 800df18:	9b02      	ldr	r3, [sp, #8]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	dd36      	ble.n	800df8c <_dtoa_r+0x464>
 800df1e:	9b00      	ldr	r3, [sp, #0]
 800df20:	4650      	mov	r0, sl
 800df22:	4659      	mov	r1, fp
 800df24:	1e5f      	subs	r7, r3, #1
 800df26:	2200      	movs	r2, #0
 800df28:	4b88      	ldr	r3, [pc, #544]	; (800e14c <_dtoa_r+0x624>)
 800df2a:	f7f2 fb75 	bl	8000618 <__aeabi_dmul>
 800df2e:	9e02      	ldr	r6, [sp, #8]
 800df30:	4682      	mov	sl, r0
 800df32:	468b      	mov	fp, r1
 800df34:	3501      	adds	r5, #1
 800df36:	4628      	mov	r0, r5
 800df38:	f7f2 fb04 	bl	8000544 <__aeabi_i2d>
 800df3c:	4652      	mov	r2, sl
 800df3e:	465b      	mov	r3, fp
 800df40:	f7f2 fb6a 	bl	8000618 <__aeabi_dmul>
 800df44:	4b82      	ldr	r3, [pc, #520]	; (800e150 <_dtoa_r+0x628>)
 800df46:	2200      	movs	r2, #0
 800df48:	f7f2 f9b0 	bl	80002ac <__adddf3>
 800df4c:	46d0      	mov	r8, sl
 800df4e:	46d9      	mov	r9, fp
 800df50:	4682      	mov	sl, r0
 800df52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800df56:	2e00      	cmp	r6, #0
 800df58:	d158      	bne.n	800e00c <_dtoa_r+0x4e4>
 800df5a:	4b7e      	ldr	r3, [pc, #504]	; (800e154 <_dtoa_r+0x62c>)
 800df5c:	2200      	movs	r2, #0
 800df5e:	4640      	mov	r0, r8
 800df60:	4649      	mov	r1, r9
 800df62:	f7f2 f9a1 	bl	80002a8 <__aeabi_dsub>
 800df66:	4652      	mov	r2, sl
 800df68:	465b      	mov	r3, fp
 800df6a:	4680      	mov	r8, r0
 800df6c:	4689      	mov	r9, r1
 800df6e:	f7f2 fde3 	bl	8000b38 <__aeabi_dcmpgt>
 800df72:	2800      	cmp	r0, #0
 800df74:	f040 8295 	bne.w	800e4a2 <_dtoa_r+0x97a>
 800df78:	4652      	mov	r2, sl
 800df7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800df7e:	4640      	mov	r0, r8
 800df80:	4649      	mov	r1, r9
 800df82:	f7f2 fdbb 	bl	8000afc <__aeabi_dcmplt>
 800df86:	2800      	cmp	r0, #0
 800df88:	f040 8289 	bne.w	800e49e <_dtoa_r+0x976>
 800df8c:	ec5b ab19 	vmov	sl, fp, d9
 800df90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800df92:	2b00      	cmp	r3, #0
 800df94:	f2c0 8148 	blt.w	800e228 <_dtoa_r+0x700>
 800df98:	9a00      	ldr	r2, [sp, #0]
 800df9a:	2a0e      	cmp	r2, #14
 800df9c:	f300 8144 	bgt.w	800e228 <_dtoa_r+0x700>
 800dfa0:	4b67      	ldr	r3, [pc, #412]	; (800e140 <_dtoa_r+0x618>)
 800dfa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dfa6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dfaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	f280 80d5 	bge.w	800e15c <_dtoa_r+0x634>
 800dfb2:	9b03      	ldr	r3, [sp, #12]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	f300 80d1 	bgt.w	800e15c <_dtoa_r+0x634>
 800dfba:	f040 826f 	bne.w	800e49c <_dtoa_r+0x974>
 800dfbe:	4b65      	ldr	r3, [pc, #404]	; (800e154 <_dtoa_r+0x62c>)
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	4640      	mov	r0, r8
 800dfc4:	4649      	mov	r1, r9
 800dfc6:	f7f2 fb27 	bl	8000618 <__aeabi_dmul>
 800dfca:	4652      	mov	r2, sl
 800dfcc:	465b      	mov	r3, fp
 800dfce:	f7f2 fda9 	bl	8000b24 <__aeabi_dcmpge>
 800dfd2:	9e03      	ldr	r6, [sp, #12]
 800dfd4:	4637      	mov	r7, r6
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	f040 8245 	bne.w	800e466 <_dtoa_r+0x93e>
 800dfdc:	9d01      	ldr	r5, [sp, #4]
 800dfde:	2331      	movs	r3, #49	; 0x31
 800dfe0:	f805 3b01 	strb.w	r3, [r5], #1
 800dfe4:	9b00      	ldr	r3, [sp, #0]
 800dfe6:	3301      	adds	r3, #1
 800dfe8:	9300      	str	r3, [sp, #0]
 800dfea:	e240      	b.n	800e46e <_dtoa_r+0x946>
 800dfec:	07f2      	lsls	r2, r6, #31
 800dfee:	d505      	bpl.n	800dffc <_dtoa_r+0x4d4>
 800dff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dff4:	f7f2 fb10 	bl	8000618 <__aeabi_dmul>
 800dff8:	3501      	adds	r5, #1
 800dffa:	2301      	movs	r3, #1
 800dffc:	1076      	asrs	r6, r6, #1
 800dffe:	3708      	adds	r7, #8
 800e000:	e777      	b.n	800def2 <_dtoa_r+0x3ca>
 800e002:	2502      	movs	r5, #2
 800e004:	e779      	b.n	800defa <_dtoa_r+0x3d2>
 800e006:	9f00      	ldr	r7, [sp, #0]
 800e008:	9e03      	ldr	r6, [sp, #12]
 800e00a:	e794      	b.n	800df36 <_dtoa_r+0x40e>
 800e00c:	9901      	ldr	r1, [sp, #4]
 800e00e:	4b4c      	ldr	r3, [pc, #304]	; (800e140 <_dtoa_r+0x618>)
 800e010:	4431      	add	r1, r6
 800e012:	910d      	str	r1, [sp, #52]	; 0x34
 800e014:	9908      	ldr	r1, [sp, #32]
 800e016:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e01a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e01e:	2900      	cmp	r1, #0
 800e020:	d043      	beq.n	800e0aa <_dtoa_r+0x582>
 800e022:	494d      	ldr	r1, [pc, #308]	; (800e158 <_dtoa_r+0x630>)
 800e024:	2000      	movs	r0, #0
 800e026:	f7f2 fc21 	bl	800086c <__aeabi_ddiv>
 800e02a:	4652      	mov	r2, sl
 800e02c:	465b      	mov	r3, fp
 800e02e:	f7f2 f93b 	bl	80002a8 <__aeabi_dsub>
 800e032:	9d01      	ldr	r5, [sp, #4]
 800e034:	4682      	mov	sl, r0
 800e036:	468b      	mov	fp, r1
 800e038:	4649      	mov	r1, r9
 800e03a:	4640      	mov	r0, r8
 800e03c:	f7f2 fd9c 	bl	8000b78 <__aeabi_d2iz>
 800e040:	4606      	mov	r6, r0
 800e042:	f7f2 fa7f 	bl	8000544 <__aeabi_i2d>
 800e046:	4602      	mov	r2, r0
 800e048:	460b      	mov	r3, r1
 800e04a:	4640      	mov	r0, r8
 800e04c:	4649      	mov	r1, r9
 800e04e:	f7f2 f92b 	bl	80002a8 <__aeabi_dsub>
 800e052:	3630      	adds	r6, #48	; 0x30
 800e054:	f805 6b01 	strb.w	r6, [r5], #1
 800e058:	4652      	mov	r2, sl
 800e05a:	465b      	mov	r3, fp
 800e05c:	4680      	mov	r8, r0
 800e05e:	4689      	mov	r9, r1
 800e060:	f7f2 fd4c 	bl	8000afc <__aeabi_dcmplt>
 800e064:	2800      	cmp	r0, #0
 800e066:	d163      	bne.n	800e130 <_dtoa_r+0x608>
 800e068:	4642      	mov	r2, r8
 800e06a:	464b      	mov	r3, r9
 800e06c:	4936      	ldr	r1, [pc, #216]	; (800e148 <_dtoa_r+0x620>)
 800e06e:	2000      	movs	r0, #0
 800e070:	f7f2 f91a 	bl	80002a8 <__aeabi_dsub>
 800e074:	4652      	mov	r2, sl
 800e076:	465b      	mov	r3, fp
 800e078:	f7f2 fd40 	bl	8000afc <__aeabi_dcmplt>
 800e07c:	2800      	cmp	r0, #0
 800e07e:	f040 80b5 	bne.w	800e1ec <_dtoa_r+0x6c4>
 800e082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e084:	429d      	cmp	r5, r3
 800e086:	d081      	beq.n	800df8c <_dtoa_r+0x464>
 800e088:	4b30      	ldr	r3, [pc, #192]	; (800e14c <_dtoa_r+0x624>)
 800e08a:	2200      	movs	r2, #0
 800e08c:	4650      	mov	r0, sl
 800e08e:	4659      	mov	r1, fp
 800e090:	f7f2 fac2 	bl	8000618 <__aeabi_dmul>
 800e094:	4b2d      	ldr	r3, [pc, #180]	; (800e14c <_dtoa_r+0x624>)
 800e096:	4682      	mov	sl, r0
 800e098:	468b      	mov	fp, r1
 800e09a:	4640      	mov	r0, r8
 800e09c:	4649      	mov	r1, r9
 800e09e:	2200      	movs	r2, #0
 800e0a0:	f7f2 faba 	bl	8000618 <__aeabi_dmul>
 800e0a4:	4680      	mov	r8, r0
 800e0a6:	4689      	mov	r9, r1
 800e0a8:	e7c6      	b.n	800e038 <_dtoa_r+0x510>
 800e0aa:	4650      	mov	r0, sl
 800e0ac:	4659      	mov	r1, fp
 800e0ae:	f7f2 fab3 	bl	8000618 <__aeabi_dmul>
 800e0b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e0b4:	9d01      	ldr	r5, [sp, #4]
 800e0b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e0b8:	4682      	mov	sl, r0
 800e0ba:	468b      	mov	fp, r1
 800e0bc:	4649      	mov	r1, r9
 800e0be:	4640      	mov	r0, r8
 800e0c0:	f7f2 fd5a 	bl	8000b78 <__aeabi_d2iz>
 800e0c4:	4606      	mov	r6, r0
 800e0c6:	f7f2 fa3d 	bl	8000544 <__aeabi_i2d>
 800e0ca:	3630      	adds	r6, #48	; 0x30
 800e0cc:	4602      	mov	r2, r0
 800e0ce:	460b      	mov	r3, r1
 800e0d0:	4640      	mov	r0, r8
 800e0d2:	4649      	mov	r1, r9
 800e0d4:	f7f2 f8e8 	bl	80002a8 <__aeabi_dsub>
 800e0d8:	f805 6b01 	strb.w	r6, [r5], #1
 800e0dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e0de:	429d      	cmp	r5, r3
 800e0e0:	4680      	mov	r8, r0
 800e0e2:	4689      	mov	r9, r1
 800e0e4:	f04f 0200 	mov.w	r2, #0
 800e0e8:	d124      	bne.n	800e134 <_dtoa_r+0x60c>
 800e0ea:	4b1b      	ldr	r3, [pc, #108]	; (800e158 <_dtoa_r+0x630>)
 800e0ec:	4650      	mov	r0, sl
 800e0ee:	4659      	mov	r1, fp
 800e0f0:	f7f2 f8dc 	bl	80002ac <__adddf3>
 800e0f4:	4602      	mov	r2, r0
 800e0f6:	460b      	mov	r3, r1
 800e0f8:	4640      	mov	r0, r8
 800e0fa:	4649      	mov	r1, r9
 800e0fc:	f7f2 fd1c 	bl	8000b38 <__aeabi_dcmpgt>
 800e100:	2800      	cmp	r0, #0
 800e102:	d173      	bne.n	800e1ec <_dtoa_r+0x6c4>
 800e104:	4652      	mov	r2, sl
 800e106:	465b      	mov	r3, fp
 800e108:	4913      	ldr	r1, [pc, #76]	; (800e158 <_dtoa_r+0x630>)
 800e10a:	2000      	movs	r0, #0
 800e10c:	f7f2 f8cc 	bl	80002a8 <__aeabi_dsub>
 800e110:	4602      	mov	r2, r0
 800e112:	460b      	mov	r3, r1
 800e114:	4640      	mov	r0, r8
 800e116:	4649      	mov	r1, r9
 800e118:	f7f2 fcf0 	bl	8000afc <__aeabi_dcmplt>
 800e11c:	2800      	cmp	r0, #0
 800e11e:	f43f af35 	beq.w	800df8c <_dtoa_r+0x464>
 800e122:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e124:	1e6b      	subs	r3, r5, #1
 800e126:	930f      	str	r3, [sp, #60]	; 0x3c
 800e128:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e12c:	2b30      	cmp	r3, #48	; 0x30
 800e12e:	d0f8      	beq.n	800e122 <_dtoa_r+0x5fa>
 800e130:	9700      	str	r7, [sp, #0]
 800e132:	e049      	b.n	800e1c8 <_dtoa_r+0x6a0>
 800e134:	4b05      	ldr	r3, [pc, #20]	; (800e14c <_dtoa_r+0x624>)
 800e136:	f7f2 fa6f 	bl	8000618 <__aeabi_dmul>
 800e13a:	4680      	mov	r8, r0
 800e13c:	4689      	mov	r9, r1
 800e13e:	e7bd      	b.n	800e0bc <_dtoa_r+0x594>
 800e140:	08012330 	.word	0x08012330
 800e144:	08012308 	.word	0x08012308
 800e148:	3ff00000 	.word	0x3ff00000
 800e14c:	40240000 	.word	0x40240000
 800e150:	401c0000 	.word	0x401c0000
 800e154:	40140000 	.word	0x40140000
 800e158:	3fe00000 	.word	0x3fe00000
 800e15c:	9d01      	ldr	r5, [sp, #4]
 800e15e:	4656      	mov	r6, sl
 800e160:	465f      	mov	r7, fp
 800e162:	4642      	mov	r2, r8
 800e164:	464b      	mov	r3, r9
 800e166:	4630      	mov	r0, r6
 800e168:	4639      	mov	r1, r7
 800e16a:	f7f2 fb7f 	bl	800086c <__aeabi_ddiv>
 800e16e:	f7f2 fd03 	bl	8000b78 <__aeabi_d2iz>
 800e172:	4682      	mov	sl, r0
 800e174:	f7f2 f9e6 	bl	8000544 <__aeabi_i2d>
 800e178:	4642      	mov	r2, r8
 800e17a:	464b      	mov	r3, r9
 800e17c:	f7f2 fa4c 	bl	8000618 <__aeabi_dmul>
 800e180:	4602      	mov	r2, r0
 800e182:	460b      	mov	r3, r1
 800e184:	4630      	mov	r0, r6
 800e186:	4639      	mov	r1, r7
 800e188:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e18c:	f7f2 f88c 	bl	80002a8 <__aeabi_dsub>
 800e190:	f805 6b01 	strb.w	r6, [r5], #1
 800e194:	9e01      	ldr	r6, [sp, #4]
 800e196:	9f03      	ldr	r7, [sp, #12]
 800e198:	1bae      	subs	r6, r5, r6
 800e19a:	42b7      	cmp	r7, r6
 800e19c:	4602      	mov	r2, r0
 800e19e:	460b      	mov	r3, r1
 800e1a0:	d135      	bne.n	800e20e <_dtoa_r+0x6e6>
 800e1a2:	f7f2 f883 	bl	80002ac <__adddf3>
 800e1a6:	4642      	mov	r2, r8
 800e1a8:	464b      	mov	r3, r9
 800e1aa:	4606      	mov	r6, r0
 800e1ac:	460f      	mov	r7, r1
 800e1ae:	f7f2 fcc3 	bl	8000b38 <__aeabi_dcmpgt>
 800e1b2:	b9d0      	cbnz	r0, 800e1ea <_dtoa_r+0x6c2>
 800e1b4:	4642      	mov	r2, r8
 800e1b6:	464b      	mov	r3, r9
 800e1b8:	4630      	mov	r0, r6
 800e1ba:	4639      	mov	r1, r7
 800e1bc:	f7f2 fc94 	bl	8000ae8 <__aeabi_dcmpeq>
 800e1c0:	b110      	cbz	r0, 800e1c8 <_dtoa_r+0x6a0>
 800e1c2:	f01a 0f01 	tst.w	sl, #1
 800e1c6:	d110      	bne.n	800e1ea <_dtoa_r+0x6c2>
 800e1c8:	4620      	mov	r0, r4
 800e1ca:	ee18 1a10 	vmov	r1, s16
 800e1ce:	f000 ff47 	bl	800f060 <_Bfree>
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	9800      	ldr	r0, [sp, #0]
 800e1d6:	702b      	strb	r3, [r5, #0]
 800e1d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e1da:	3001      	adds	r0, #1
 800e1dc:	6018      	str	r0, [r3, #0]
 800e1de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	f43f acf1 	beq.w	800dbc8 <_dtoa_r+0xa0>
 800e1e6:	601d      	str	r5, [r3, #0]
 800e1e8:	e4ee      	b.n	800dbc8 <_dtoa_r+0xa0>
 800e1ea:	9f00      	ldr	r7, [sp, #0]
 800e1ec:	462b      	mov	r3, r5
 800e1ee:	461d      	mov	r5, r3
 800e1f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e1f4:	2a39      	cmp	r2, #57	; 0x39
 800e1f6:	d106      	bne.n	800e206 <_dtoa_r+0x6de>
 800e1f8:	9a01      	ldr	r2, [sp, #4]
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	d1f7      	bne.n	800e1ee <_dtoa_r+0x6c6>
 800e1fe:	9901      	ldr	r1, [sp, #4]
 800e200:	2230      	movs	r2, #48	; 0x30
 800e202:	3701      	adds	r7, #1
 800e204:	700a      	strb	r2, [r1, #0]
 800e206:	781a      	ldrb	r2, [r3, #0]
 800e208:	3201      	adds	r2, #1
 800e20a:	701a      	strb	r2, [r3, #0]
 800e20c:	e790      	b.n	800e130 <_dtoa_r+0x608>
 800e20e:	4ba6      	ldr	r3, [pc, #664]	; (800e4a8 <_dtoa_r+0x980>)
 800e210:	2200      	movs	r2, #0
 800e212:	f7f2 fa01 	bl	8000618 <__aeabi_dmul>
 800e216:	2200      	movs	r2, #0
 800e218:	2300      	movs	r3, #0
 800e21a:	4606      	mov	r6, r0
 800e21c:	460f      	mov	r7, r1
 800e21e:	f7f2 fc63 	bl	8000ae8 <__aeabi_dcmpeq>
 800e222:	2800      	cmp	r0, #0
 800e224:	d09d      	beq.n	800e162 <_dtoa_r+0x63a>
 800e226:	e7cf      	b.n	800e1c8 <_dtoa_r+0x6a0>
 800e228:	9a08      	ldr	r2, [sp, #32]
 800e22a:	2a00      	cmp	r2, #0
 800e22c:	f000 80d7 	beq.w	800e3de <_dtoa_r+0x8b6>
 800e230:	9a06      	ldr	r2, [sp, #24]
 800e232:	2a01      	cmp	r2, #1
 800e234:	f300 80ba 	bgt.w	800e3ac <_dtoa_r+0x884>
 800e238:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e23a:	2a00      	cmp	r2, #0
 800e23c:	f000 80b2 	beq.w	800e3a4 <_dtoa_r+0x87c>
 800e240:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e244:	9e07      	ldr	r6, [sp, #28]
 800e246:	9d04      	ldr	r5, [sp, #16]
 800e248:	9a04      	ldr	r2, [sp, #16]
 800e24a:	441a      	add	r2, r3
 800e24c:	9204      	str	r2, [sp, #16]
 800e24e:	9a05      	ldr	r2, [sp, #20]
 800e250:	2101      	movs	r1, #1
 800e252:	441a      	add	r2, r3
 800e254:	4620      	mov	r0, r4
 800e256:	9205      	str	r2, [sp, #20]
 800e258:	f001 f804 	bl	800f264 <__i2b>
 800e25c:	4607      	mov	r7, r0
 800e25e:	2d00      	cmp	r5, #0
 800e260:	dd0c      	ble.n	800e27c <_dtoa_r+0x754>
 800e262:	9b05      	ldr	r3, [sp, #20]
 800e264:	2b00      	cmp	r3, #0
 800e266:	dd09      	ble.n	800e27c <_dtoa_r+0x754>
 800e268:	42ab      	cmp	r3, r5
 800e26a:	9a04      	ldr	r2, [sp, #16]
 800e26c:	bfa8      	it	ge
 800e26e:	462b      	movge	r3, r5
 800e270:	1ad2      	subs	r2, r2, r3
 800e272:	9204      	str	r2, [sp, #16]
 800e274:	9a05      	ldr	r2, [sp, #20]
 800e276:	1aed      	subs	r5, r5, r3
 800e278:	1ad3      	subs	r3, r2, r3
 800e27a:	9305      	str	r3, [sp, #20]
 800e27c:	9b07      	ldr	r3, [sp, #28]
 800e27e:	b31b      	cbz	r3, 800e2c8 <_dtoa_r+0x7a0>
 800e280:	9b08      	ldr	r3, [sp, #32]
 800e282:	2b00      	cmp	r3, #0
 800e284:	f000 80af 	beq.w	800e3e6 <_dtoa_r+0x8be>
 800e288:	2e00      	cmp	r6, #0
 800e28a:	dd13      	ble.n	800e2b4 <_dtoa_r+0x78c>
 800e28c:	4639      	mov	r1, r7
 800e28e:	4632      	mov	r2, r6
 800e290:	4620      	mov	r0, r4
 800e292:	f001 f8a7 	bl	800f3e4 <__pow5mult>
 800e296:	ee18 2a10 	vmov	r2, s16
 800e29a:	4601      	mov	r1, r0
 800e29c:	4607      	mov	r7, r0
 800e29e:	4620      	mov	r0, r4
 800e2a0:	f000 fff6 	bl	800f290 <__multiply>
 800e2a4:	ee18 1a10 	vmov	r1, s16
 800e2a8:	4680      	mov	r8, r0
 800e2aa:	4620      	mov	r0, r4
 800e2ac:	f000 fed8 	bl	800f060 <_Bfree>
 800e2b0:	ee08 8a10 	vmov	s16, r8
 800e2b4:	9b07      	ldr	r3, [sp, #28]
 800e2b6:	1b9a      	subs	r2, r3, r6
 800e2b8:	d006      	beq.n	800e2c8 <_dtoa_r+0x7a0>
 800e2ba:	ee18 1a10 	vmov	r1, s16
 800e2be:	4620      	mov	r0, r4
 800e2c0:	f001 f890 	bl	800f3e4 <__pow5mult>
 800e2c4:	ee08 0a10 	vmov	s16, r0
 800e2c8:	2101      	movs	r1, #1
 800e2ca:	4620      	mov	r0, r4
 800e2cc:	f000 ffca 	bl	800f264 <__i2b>
 800e2d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	4606      	mov	r6, r0
 800e2d6:	f340 8088 	ble.w	800e3ea <_dtoa_r+0x8c2>
 800e2da:	461a      	mov	r2, r3
 800e2dc:	4601      	mov	r1, r0
 800e2de:	4620      	mov	r0, r4
 800e2e0:	f001 f880 	bl	800f3e4 <__pow5mult>
 800e2e4:	9b06      	ldr	r3, [sp, #24]
 800e2e6:	2b01      	cmp	r3, #1
 800e2e8:	4606      	mov	r6, r0
 800e2ea:	f340 8081 	ble.w	800e3f0 <_dtoa_r+0x8c8>
 800e2ee:	f04f 0800 	mov.w	r8, #0
 800e2f2:	6933      	ldr	r3, [r6, #16]
 800e2f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e2f8:	6918      	ldr	r0, [r3, #16]
 800e2fa:	f000 ff63 	bl	800f1c4 <__hi0bits>
 800e2fe:	f1c0 0020 	rsb	r0, r0, #32
 800e302:	9b05      	ldr	r3, [sp, #20]
 800e304:	4418      	add	r0, r3
 800e306:	f010 001f 	ands.w	r0, r0, #31
 800e30a:	f000 8092 	beq.w	800e432 <_dtoa_r+0x90a>
 800e30e:	f1c0 0320 	rsb	r3, r0, #32
 800e312:	2b04      	cmp	r3, #4
 800e314:	f340 808a 	ble.w	800e42c <_dtoa_r+0x904>
 800e318:	f1c0 001c 	rsb	r0, r0, #28
 800e31c:	9b04      	ldr	r3, [sp, #16]
 800e31e:	4403      	add	r3, r0
 800e320:	9304      	str	r3, [sp, #16]
 800e322:	9b05      	ldr	r3, [sp, #20]
 800e324:	4403      	add	r3, r0
 800e326:	4405      	add	r5, r0
 800e328:	9305      	str	r3, [sp, #20]
 800e32a:	9b04      	ldr	r3, [sp, #16]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	dd07      	ble.n	800e340 <_dtoa_r+0x818>
 800e330:	ee18 1a10 	vmov	r1, s16
 800e334:	461a      	mov	r2, r3
 800e336:	4620      	mov	r0, r4
 800e338:	f001 f8ae 	bl	800f498 <__lshift>
 800e33c:	ee08 0a10 	vmov	s16, r0
 800e340:	9b05      	ldr	r3, [sp, #20]
 800e342:	2b00      	cmp	r3, #0
 800e344:	dd05      	ble.n	800e352 <_dtoa_r+0x82a>
 800e346:	4631      	mov	r1, r6
 800e348:	461a      	mov	r2, r3
 800e34a:	4620      	mov	r0, r4
 800e34c:	f001 f8a4 	bl	800f498 <__lshift>
 800e350:	4606      	mov	r6, r0
 800e352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e354:	2b00      	cmp	r3, #0
 800e356:	d06e      	beq.n	800e436 <_dtoa_r+0x90e>
 800e358:	ee18 0a10 	vmov	r0, s16
 800e35c:	4631      	mov	r1, r6
 800e35e:	f001 f90b 	bl	800f578 <__mcmp>
 800e362:	2800      	cmp	r0, #0
 800e364:	da67      	bge.n	800e436 <_dtoa_r+0x90e>
 800e366:	9b00      	ldr	r3, [sp, #0]
 800e368:	3b01      	subs	r3, #1
 800e36a:	ee18 1a10 	vmov	r1, s16
 800e36e:	9300      	str	r3, [sp, #0]
 800e370:	220a      	movs	r2, #10
 800e372:	2300      	movs	r3, #0
 800e374:	4620      	mov	r0, r4
 800e376:	f000 fe95 	bl	800f0a4 <__multadd>
 800e37a:	9b08      	ldr	r3, [sp, #32]
 800e37c:	ee08 0a10 	vmov	s16, r0
 800e380:	2b00      	cmp	r3, #0
 800e382:	f000 81b1 	beq.w	800e6e8 <_dtoa_r+0xbc0>
 800e386:	2300      	movs	r3, #0
 800e388:	4639      	mov	r1, r7
 800e38a:	220a      	movs	r2, #10
 800e38c:	4620      	mov	r0, r4
 800e38e:	f000 fe89 	bl	800f0a4 <__multadd>
 800e392:	9b02      	ldr	r3, [sp, #8]
 800e394:	2b00      	cmp	r3, #0
 800e396:	4607      	mov	r7, r0
 800e398:	f300 808e 	bgt.w	800e4b8 <_dtoa_r+0x990>
 800e39c:	9b06      	ldr	r3, [sp, #24]
 800e39e:	2b02      	cmp	r3, #2
 800e3a0:	dc51      	bgt.n	800e446 <_dtoa_r+0x91e>
 800e3a2:	e089      	b.n	800e4b8 <_dtoa_r+0x990>
 800e3a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e3a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e3aa:	e74b      	b.n	800e244 <_dtoa_r+0x71c>
 800e3ac:	9b03      	ldr	r3, [sp, #12]
 800e3ae:	1e5e      	subs	r6, r3, #1
 800e3b0:	9b07      	ldr	r3, [sp, #28]
 800e3b2:	42b3      	cmp	r3, r6
 800e3b4:	bfbf      	itttt	lt
 800e3b6:	9b07      	ldrlt	r3, [sp, #28]
 800e3b8:	9607      	strlt	r6, [sp, #28]
 800e3ba:	1af2      	sublt	r2, r6, r3
 800e3bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e3be:	bfb6      	itet	lt
 800e3c0:	189b      	addlt	r3, r3, r2
 800e3c2:	1b9e      	subge	r6, r3, r6
 800e3c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e3c6:	9b03      	ldr	r3, [sp, #12]
 800e3c8:	bfb8      	it	lt
 800e3ca:	2600      	movlt	r6, #0
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	bfb7      	itett	lt
 800e3d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e3d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e3d8:	1a9d      	sublt	r5, r3, r2
 800e3da:	2300      	movlt	r3, #0
 800e3dc:	e734      	b.n	800e248 <_dtoa_r+0x720>
 800e3de:	9e07      	ldr	r6, [sp, #28]
 800e3e0:	9d04      	ldr	r5, [sp, #16]
 800e3e2:	9f08      	ldr	r7, [sp, #32]
 800e3e4:	e73b      	b.n	800e25e <_dtoa_r+0x736>
 800e3e6:	9a07      	ldr	r2, [sp, #28]
 800e3e8:	e767      	b.n	800e2ba <_dtoa_r+0x792>
 800e3ea:	9b06      	ldr	r3, [sp, #24]
 800e3ec:	2b01      	cmp	r3, #1
 800e3ee:	dc18      	bgt.n	800e422 <_dtoa_r+0x8fa>
 800e3f0:	f1ba 0f00 	cmp.w	sl, #0
 800e3f4:	d115      	bne.n	800e422 <_dtoa_r+0x8fa>
 800e3f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e3fa:	b993      	cbnz	r3, 800e422 <_dtoa_r+0x8fa>
 800e3fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e400:	0d1b      	lsrs	r3, r3, #20
 800e402:	051b      	lsls	r3, r3, #20
 800e404:	b183      	cbz	r3, 800e428 <_dtoa_r+0x900>
 800e406:	9b04      	ldr	r3, [sp, #16]
 800e408:	3301      	adds	r3, #1
 800e40a:	9304      	str	r3, [sp, #16]
 800e40c:	9b05      	ldr	r3, [sp, #20]
 800e40e:	3301      	adds	r3, #1
 800e410:	9305      	str	r3, [sp, #20]
 800e412:	f04f 0801 	mov.w	r8, #1
 800e416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e418:	2b00      	cmp	r3, #0
 800e41a:	f47f af6a 	bne.w	800e2f2 <_dtoa_r+0x7ca>
 800e41e:	2001      	movs	r0, #1
 800e420:	e76f      	b.n	800e302 <_dtoa_r+0x7da>
 800e422:	f04f 0800 	mov.w	r8, #0
 800e426:	e7f6      	b.n	800e416 <_dtoa_r+0x8ee>
 800e428:	4698      	mov	r8, r3
 800e42a:	e7f4      	b.n	800e416 <_dtoa_r+0x8ee>
 800e42c:	f43f af7d 	beq.w	800e32a <_dtoa_r+0x802>
 800e430:	4618      	mov	r0, r3
 800e432:	301c      	adds	r0, #28
 800e434:	e772      	b.n	800e31c <_dtoa_r+0x7f4>
 800e436:	9b03      	ldr	r3, [sp, #12]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	dc37      	bgt.n	800e4ac <_dtoa_r+0x984>
 800e43c:	9b06      	ldr	r3, [sp, #24]
 800e43e:	2b02      	cmp	r3, #2
 800e440:	dd34      	ble.n	800e4ac <_dtoa_r+0x984>
 800e442:	9b03      	ldr	r3, [sp, #12]
 800e444:	9302      	str	r3, [sp, #8]
 800e446:	9b02      	ldr	r3, [sp, #8]
 800e448:	b96b      	cbnz	r3, 800e466 <_dtoa_r+0x93e>
 800e44a:	4631      	mov	r1, r6
 800e44c:	2205      	movs	r2, #5
 800e44e:	4620      	mov	r0, r4
 800e450:	f000 fe28 	bl	800f0a4 <__multadd>
 800e454:	4601      	mov	r1, r0
 800e456:	4606      	mov	r6, r0
 800e458:	ee18 0a10 	vmov	r0, s16
 800e45c:	f001 f88c 	bl	800f578 <__mcmp>
 800e460:	2800      	cmp	r0, #0
 800e462:	f73f adbb 	bgt.w	800dfdc <_dtoa_r+0x4b4>
 800e466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e468:	9d01      	ldr	r5, [sp, #4]
 800e46a:	43db      	mvns	r3, r3
 800e46c:	9300      	str	r3, [sp, #0]
 800e46e:	f04f 0800 	mov.w	r8, #0
 800e472:	4631      	mov	r1, r6
 800e474:	4620      	mov	r0, r4
 800e476:	f000 fdf3 	bl	800f060 <_Bfree>
 800e47a:	2f00      	cmp	r7, #0
 800e47c:	f43f aea4 	beq.w	800e1c8 <_dtoa_r+0x6a0>
 800e480:	f1b8 0f00 	cmp.w	r8, #0
 800e484:	d005      	beq.n	800e492 <_dtoa_r+0x96a>
 800e486:	45b8      	cmp	r8, r7
 800e488:	d003      	beq.n	800e492 <_dtoa_r+0x96a>
 800e48a:	4641      	mov	r1, r8
 800e48c:	4620      	mov	r0, r4
 800e48e:	f000 fde7 	bl	800f060 <_Bfree>
 800e492:	4639      	mov	r1, r7
 800e494:	4620      	mov	r0, r4
 800e496:	f000 fde3 	bl	800f060 <_Bfree>
 800e49a:	e695      	b.n	800e1c8 <_dtoa_r+0x6a0>
 800e49c:	2600      	movs	r6, #0
 800e49e:	4637      	mov	r7, r6
 800e4a0:	e7e1      	b.n	800e466 <_dtoa_r+0x93e>
 800e4a2:	9700      	str	r7, [sp, #0]
 800e4a4:	4637      	mov	r7, r6
 800e4a6:	e599      	b.n	800dfdc <_dtoa_r+0x4b4>
 800e4a8:	40240000 	.word	0x40240000
 800e4ac:	9b08      	ldr	r3, [sp, #32]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	f000 80ca 	beq.w	800e648 <_dtoa_r+0xb20>
 800e4b4:	9b03      	ldr	r3, [sp, #12]
 800e4b6:	9302      	str	r3, [sp, #8]
 800e4b8:	2d00      	cmp	r5, #0
 800e4ba:	dd05      	ble.n	800e4c8 <_dtoa_r+0x9a0>
 800e4bc:	4639      	mov	r1, r7
 800e4be:	462a      	mov	r2, r5
 800e4c0:	4620      	mov	r0, r4
 800e4c2:	f000 ffe9 	bl	800f498 <__lshift>
 800e4c6:	4607      	mov	r7, r0
 800e4c8:	f1b8 0f00 	cmp.w	r8, #0
 800e4cc:	d05b      	beq.n	800e586 <_dtoa_r+0xa5e>
 800e4ce:	6879      	ldr	r1, [r7, #4]
 800e4d0:	4620      	mov	r0, r4
 800e4d2:	f000 fd85 	bl	800efe0 <_Balloc>
 800e4d6:	4605      	mov	r5, r0
 800e4d8:	b928      	cbnz	r0, 800e4e6 <_dtoa_r+0x9be>
 800e4da:	4b87      	ldr	r3, [pc, #540]	; (800e6f8 <_dtoa_r+0xbd0>)
 800e4dc:	4602      	mov	r2, r0
 800e4de:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e4e2:	f7ff bb3b 	b.w	800db5c <_dtoa_r+0x34>
 800e4e6:	693a      	ldr	r2, [r7, #16]
 800e4e8:	3202      	adds	r2, #2
 800e4ea:	0092      	lsls	r2, r2, #2
 800e4ec:	f107 010c 	add.w	r1, r7, #12
 800e4f0:	300c      	adds	r0, #12
 800e4f2:	f7fd fbb2 	bl	800bc5a <memcpy>
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	4629      	mov	r1, r5
 800e4fa:	4620      	mov	r0, r4
 800e4fc:	f000 ffcc 	bl	800f498 <__lshift>
 800e500:	9b01      	ldr	r3, [sp, #4]
 800e502:	f103 0901 	add.w	r9, r3, #1
 800e506:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e50a:	4413      	add	r3, r2
 800e50c:	9305      	str	r3, [sp, #20]
 800e50e:	f00a 0301 	and.w	r3, sl, #1
 800e512:	46b8      	mov	r8, r7
 800e514:	9304      	str	r3, [sp, #16]
 800e516:	4607      	mov	r7, r0
 800e518:	4631      	mov	r1, r6
 800e51a:	ee18 0a10 	vmov	r0, s16
 800e51e:	f7ff fa75 	bl	800da0c <quorem>
 800e522:	4641      	mov	r1, r8
 800e524:	9002      	str	r0, [sp, #8]
 800e526:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e52a:	ee18 0a10 	vmov	r0, s16
 800e52e:	f001 f823 	bl	800f578 <__mcmp>
 800e532:	463a      	mov	r2, r7
 800e534:	9003      	str	r0, [sp, #12]
 800e536:	4631      	mov	r1, r6
 800e538:	4620      	mov	r0, r4
 800e53a:	f001 f839 	bl	800f5b0 <__mdiff>
 800e53e:	68c2      	ldr	r2, [r0, #12]
 800e540:	f109 3bff 	add.w	fp, r9, #4294967295
 800e544:	4605      	mov	r5, r0
 800e546:	bb02      	cbnz	r2, 800e58a <_dtoa_r+0xa62>
 800e548:	4601      	mov	r1, r0
 800e54a:	ee18 0a10 	vmov	r0, s16
 800e54e:	f001 f813 	bl	800f578 <__mcmp>
 800e552:	4602      	mov	r2, r0
 800e554:	4629      	mov	r1, r5
 800e556:	4620      	mov	r0, r4
 800e558:	9207      	str	r2, [sp, #28]
 800e55a:	f000 fd81 	bl	800f060 <_Bfree>
 800e55e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e562:	ea43 0102 	orr.w	r1, r3, r2
 800e566:	9b04      	ldr	r3, [sp, #16]
 800e568:	430b      	orrs	r3, r1
 800e56a:	464d      	mov	r5, r9
 800e56c:	d10f      	bne.n	800e58e <_dtoa_r+0xa66>
 800e56e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e572:	d02a      	beq.n	800e5ca <_dtoa_r+0xaa2>
 800e574:	9b03      	ldr	r3, [sp, #12]
 800e576:	2b00      	cmp	r3, #0
 800e578:	dd02      	ble.n	800e580 <_dtoa_r+0xa58>
 800e57a:	9b02      	ldr	r3, [sp, #8]
 800e57c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e580:	f88b a000 	strb.w	sl, [fp]
 800e584:	e775      	b.n	800e472 <_dtoa_r+0x94a>
 800e586:	4638      	mov	r0, r7
 800e588:	e7ba      	b.n	800e500 <_dtoa_r+0x9d8>
 800e58a:	2201      	movs	r2, #1
 800e58c:	e7e2      	b.n	800e554 <_dtoa_r+0xa2c>
 800e58e:	9b03      	ldr	r3, [sp, #12]
 800e590:	2b00      	cmp	r3, #0
 800e592:	db04      	blt.n	800e59e <_dtoa_r+0xa76>
 800e594:	9906      	ldr	r1, [sp, #24]
 800e596:	430b      	orrs	r3, r1
 800e598:	9904      	ldr	r1, [sp, #16]
 800e59a:	430b      	orrs	r3, r1
 800e59c:	d122      	bne.n	800e5e4 <_dtoa_r+0xabc>
 800e59e:	2a00      	cmp	r2, #0
 800e5a0:	ddee      	ble.n	800e580 <_dtoa_r+0xa58>
 800e5a2:	ee18 1a10 	vmov	r1, s16
 800e5a6:	2201      	movs	r2, #1
 800e5a8:	4620      	mov	r0, r4
 800e5aa:	f000 ff75 	bl	800f498 <__lshift>
 800e5ae:	4631      	mov	r1, r6
 800e5b0:	ee08 0a10 	vmov	s16, r0
 800e5b4:	f000 ffe0 	bl	800f578 <__mcmp>
 800e5b8:	2800      	cmp	r0, #0
 800e5ba:	dc03      	bgt.n	800e5c4 <_dtoa_r+0xa9c>
 800e5bc:	d1e0      	bne.n	800e580 <_dtoa_r+0xa58>
 800e5be:	f01a 0f01 	tst.w	sl, #1
 800e5c2:	d0dd      	beq.n	800e580 <_dtoa_r+0xa58>
 800e5c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e5c8:	d1d7      	bne.n	800e57a <_dtoa_r+0xa52>
 800e5ca:	2339      	movs	r3, #57	; 0x39
 800e5cc:	f88b 3000 	strb.w	r3, [fp]
 800e5d0:	462b      	mov	r3, r5
 800e5d2:	461d      	mov	r5, r3
 800e5d4:	3b01      	subs	r3, #1
 800e5d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e5da:	2a39      	cmp	r2, #57	; 0x39
 800e5dc:	d071      	beq.n	800e6c2 <_dtoa_r+0xb9a>
 800e5de:	3201      	adds	r2, #1
 800e5e0:	701a      	strb	r2, [r3, #0]
 800e5e2:	e746      	b.n	800e472 <_dtoa_r+0x94a>
 800e5e4:	2a00      	cmp	r2, #0
 800e5e6:	dd07      	ble.n	800e5f8 <_dtoa_r+0xad0>
 800e5e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e5ec:	d0ed      	beq.n	800e5ca <_dtoa_r+0xaa2>
 800e5ee:	f10a 0301 	add.w	r3, sl, #1
 800e5f2:	f88b 3000 	strb.w	r3, [fp]
 800e5f6:	e73c      	b.n	800e472 <_dtoa_r+0x94a>
 800e5f8:	9b05      	ldr	r3, [sp, #20]
 800e5fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e5fe:	4599      	cmp	r9, r3
 800e600:	d047      	beq.n	800e692 <_dtoa_r+0xb6a>
 800e602:	ee18 1a10 	vmov	r1, s16
 800e606:	2300      	movs	r3, #0
 800e608:	220a      	movs	r2, #10
 800e60a:	4620      	mov	r0, r4
 800e60c:	f000 fd4a 	bl	800f0a4 <__multadd>
 800e610:	45b8      	cmp	r8, r7
 800e612:	ee08 0a10 	vmov	s16, r0
 800e616:	f04f 0300 	mov.w	r3, #0
 800e61a:	f04f 020a 	mov.w	r2, #10
 800e61e:	4641      	mov	r1, r8
 800e620:	4620      	mov	r0, r4
 800e622:	d106      	bne.n	800e632 <_dtoa_r+0xb0a>
 800e624:	f000 fd3e 	bl	800f0a4 <__multadd>
 800e628:	4680      	mov	r8, r0
 800e62a:	4607      	mov	r7, r0
 800e62c:	f109 0901 	add.w	r9, r9, #1
 800e630:	e772      	b.n	800e518 <_dtoa_r+0x9f0>
 800e632:	f000 fd37 	bl	800f0a4 <__multadd>
 800e636:	4639      	mov	r1, r7
 800e638:	4680      	mov	r8, r0
 800e63a:	2300      	movs	r3, #0
 800e63c:	220a      	movs	r2, #10
 800e63e:	4620      	mov	r0, r4
 800e640:	f000 fd30 	bl	800f0a4 <__multadd>
 800e644:	4607      	mov	r7, r0
 800e646:	e7f1      	b.n	800e62c <_dtoa_r+0xb04>
 800e648:	9b03      	ldr	r3, [sp, #12]
 800e64a:	9302      	str	r3, [sp, #8]
 800e64c:	9d01      	ldr	r5, [sp, #4]
 800e64e:	ee18 0a10 	vmov	r0, s16
 800e652:	4631      	mov	r1, r6
 800e654:	f7ff f9da 	bl	800da0c <quorem>
 800e658:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e65c:	9b01      	ldr	r3, [sp, #4]
 800e65e:	f805 ab01 	strb.w	sl, [r5], #1
 800e662:	1aea      	subs	r2, r5, r3
 800e664:	9b02      	ldr	r3, [sp, #8]
 800e666:	4293      	cmp	r3, r2
 800e668:	dd09      	ble.n	800e67e <_dtoa_r+0xb56>
 800e66a:	ee18 1a10 	vmov	r1, s16
 800e66e:	2300      	movs	r3, #0
 800e670:	220a      	movs	r2, #10
 800e672:	4620      	mov	r0, r4
 800e674:	f000 fd16 	bl	800f0a4 <__multadd>
 800e678:	ee08 0a10 	vmov	s16, r0
 800e67c:	e7e7      	b.n	800e64e <_dtoa_r+0xb26>
 800e67e:	9b02      	ldr	r3, [sp, #8]
 800e680:	2b00      	cmp	r3, #0
 800e682:	bfc8      	it	gt
 800e684:	461d      	movgt	r5, r3
 800e686:	9b01      	ldr	r3, [sp, #4]
 800e688:	bfd8      	it	le
 800e68a:	2501      	movle	r5, #1
 800e68c:	441d      	add	r5, r3
 800e68e:	f04f 0800 	mov.w	r8, #0
 800e692:	ee18 1a10 	vmov	r1, s16
 800e696:	2201      	movs	r2, #1
 800e698:	4620      	mov	r0, r4
 800e69a:	f000 fefd 	bl	800f498 <__lshift>
 800e69e:	4631      	mov	r1, r6
 800e6a0:	ee08 0a10 	vmov	s16, r0
 800e6a4:	f000 ff68 	bl	800f578 <__mcmp>
 800e6a8:	2800      	cmp	r0, #0
 800e6aa:	dc91      	bgt.n	800e5d0 <_dtoa_r+0xaa8>
 800e6ac:	d102      	bne.n	800e6b4 <_dtoa_r+0xb8c>
 800e6ae:	f01a 0f01 	tst.w	sl, #1
 800e6b2:	d18d      	bne.n	800e5d0 <_dtoa_r+0xaa8>
 800e6b4:	462b      	mov	r3, r5
 800e6b6:	461d      	mov	r5, r3
 800e6b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e6bc:	2a30      	cmp	r2, #48	; 0x30
 800e6be:	d0fa      	beq.n	800e6b6 <_dtoa_r+0xb8e>
 800e6c0:	e6d7      	b.n	800e472 <_dtoa_r+0x94a>
 800e6c2:	9a01      	ldr	r2, [sp, #4]
 800e6c4:	429a      	cmp	r2, r3
 800e6c6:	d184      	bne.n	800e5d2 <_dtoa_r+0xaaa>
 800e6c8:	9b00      	ldr	r3, [sp, #0]
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	9300      	str	r3, [sp, #0]
 800e6ce:	2331      	movs	r3, #49	; 0x31
 800e6d0:	7013      	strb	r3, [r2, #0]
 800e6d2:	e6ce      	b.n	800e472 <_dtoa_r+0x94a>
 800e6d4:	4b09      	ldr	r3, [pc, #36]	; (800e6fc <_dtoa_r+0xbd4>)
 800e6d6:	f7ff ba95 	b.w	800dc04 <_dtoa_r+0xdc>
 800e6da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	f47f aa6e 	bne.w	800dbbe <_dtoa_r+0x96>
 800e6e2:	4b07      	ldr	r3, [pc, #28]	; (800e700 <_dtoa_r+0xbd8>)
 800e6e4:	f7ff ba8e 	b.w	800dc04 <_dtoa_r+0xdc>
 800e6e8:	9b02      	ldr	r3, [sp, #8]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	dcae      	bgt.n	800e64c <_dtoa_r+0xb24>
 800e6ee:	9b06      	ldr	r3, [sp, #24]
 800e6f0:	2b02      	cmp	r3, #2
 800e6f2:	f73f aea8 	bgt.w	800e446 <_dtoa_r+0x91e>
 800e6f6:	e7a9      	b.n	800e64c <_dtoa_r+0xb24>
 800e6f8:	08012220 	.word	0x08012220
 800e6fc:	08012024 	.word	0x08012024
 800e700:	080121a1 	.word	0x080121a1

0800e704 <__sflush_r>:
 800e704:	898a      	ldrh	r2, [r1, #12]
 800e706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e70a:	4605      	mov	r5, r0
 800e70c:	0710      	lsls	r0, r2, #28
 800e70e:	460c      	mov	r4, r1
 800e710:	d458      	bmi.n	800e7c4 <__sflush_r+0xc0>
 800e712:	684b      	ldr	r3, [r1, #4]
 800e714:	2b00      	cmp	r3, #0
 800e716:	dc05      	bgt.n	800e724 <__sflush_r+0x20>
 800e718:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	dc02      	bgt.n	800e724 <__sflush_r+0x20>
 800e71e:	2000      	movs	r0, #0
 800e720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e724:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e726:	2e00      	cmp	r6, #0
 800e728:	d0f9      	beq.n	800e71e <__sflush_r+0x1a>
 800e72a:	2300      	movs	r3, #0
 800e72c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e730:	682f      	ldr	r7, [r5, #0]
 800e732:	602b      	str	r3, [r5, #0]
 800e734:	d032      	beq.n	800e79c <__sflush_r+0x98>
 800e736:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e738:	89a3      	ldrh	r3, [r4, #12]
 800e73a:	075a      	lsls	r2, r3, #29
 800e73c:	d505      	bpl.n	800e74a <__sflush_r+0x46>
 800e73e:	6863      	ldr	r3, [r4, #4]
 800e740:	1ac0      	subs	r0, r0, r3
 800e742:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e744:	b10b      	cbz	r3, 800e74a <__sflush_r+0x46>
 800e746:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e748:	1ac0      	subs	r0, r0, r3
 800e74a:	2300      	movs	r3, #0
 800e74c:	4602      	mov	r2, r0
 800e74e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e750:	6a21      	ldr	r1, [r4, #32]
 800e752:	4628      	mov	r0, r5
 800e754:	47b0      	blx	r6
 800e756:	1c43      	adds	r3, r0, #1
 800e758:	89a3      	ldrh	r3, [r4, #12]
 800e75a:	d106      	bne.n	800e76a <__sflush_r+0x66>
 800e75c:	6829      	ldr	r1, [r5, #0]
 800e75e:	291d      	cmp	r1, #29
 800e760:	d82c      	bhi.n	800e7bc <__sflush_r+0xb8>
 800e762:	4a2a      	ldr	r2, [pc, #168]	; (800e80c <__sflush_r+0x108>)
 800e764:	40ca      	lsrs	r2, r1
 800e766:	07d6      	lsls	r6, r2, #31
 800e768:	d528      	bpl.n	800e7bc <__sflush_r+0xb8>
 800e76a:	2200      	movs	r2, #0
 800e76c:	6062      	str	r2, [r4, #4]
 800e76e:	04d9      	lsls	r1, r3, #19
 800e770:	6922      	ldr	r2, [r4, #16]
 800e772:	6022      	str	r2, [r4, #0]
 800e774:	d504      	bpl.n	800e780 <__sflush_r+0x7c>
 800e776:	1c42      	adds	r2, r0, #1
 800e778:	d101      	bne.n	800e77e <__sflush_r+0x7a>
 800e77a:	682b      	ldr	r3, [r5, #0]
 800e77c:	b903      	cbnz	r3, 800e780 <__sflush_r+0x7c>
 800e77e:	6560      	str	r0, [r4, #84]	; 0x54
 800e780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e782:	602f      	str	r7, [r5, #0]
 800e784:	2900      	cmp	r1, #0
 800e786:	d0ca      	beq.n	800e71e <__sflush_r+0x1a>
 800e788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e78c:	4299      	cmp	r1, r3
 800e78e:	d002      	beq.n	800e796 <__sflush_r+0x92>
 800e790:	4628      	mov	r0, r5
 800e792:	f001 f8fd 	bl	800f990 <_free_r>
 800e796:	2000      	movs	r0, #0
 800e798:	6360      	str	r0, [r4, #52]	; 0x34
 800e79a:	e7c1      	b.n	800e720 <__sflush_r+0x1c>
 800e79c:	6a21      	ldr	r1, [r4, #32]
 800e79e:	2301      	movs	r3, #1
 800e7a0:	4628      	mov	r0, r5
 800e7a2:	47b0      	blx	r6
 800e7a4:	1c41      	adds	r1, r0, #1
 800e7a6:	d1c7      	bne.n	800e738 <__sflush_r+0x34>
 800e7a8:	682b      	ldr	r3, [r5, #0]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d0c4      	beq.n	800e738 <__sflush_r+0x34>
 800e7ae:	2b1d      	cmp	r3, #29
 800e7b0:	d001      	beq.n	800e7b6 <__sflush_r+0xb2>
 800e7b2:	2b16      	cmp	r3, #22
 800e7b4:	d101      	bne.n	800e7ba <__sflush_r+0xb6>
 800e7b6:	602f      	str	r7, [r5, #0]
 800e7b8:	e7b1      	b.n	800e71e <__sflush_r+0x1a>
 800e7ba:	89a3      	ldrh	r3, [r4, #12]
 800e7bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7c0:	81a3      	strh	r3, [r4, #12]
 800e7c2:	e7ad      	b.n	800e720 <__sflush_r+0x1c>
 800e7c4:	690f      	ldr	r7, [r1, #16]
 800e7c6:	2f00      	cmp	r7, #0
 800e7c8:	d0a9      	beq.n	800e71e <__sflush_r+0x1a>
 800e7ca:	0793      	lsls	r3, r2, #30
 800e7cc:	680e      	ldr	r6, [r1, #0]
 800e7ce:	bf08      	it	eq
 800e7d0:	694b      	ldreq	r3, [r1, #20]
 800e7d2:	600f      	str	r7, [r1, #0]
 800e7d4:	bf18      	it	ne
 800e7d6:	2300      	movne	r3, #0
 800e7d8:	eba6 0807 	sub.w	r8, r6, r7
 800e7dc:	608b      	str	r3, [r1, #8]
 800e7de:	f1b8 0f00 	cmp.w	r8, #0
 800e7e2:	dd9c      	ble.n	800e71e <__sflush_r+0x1a>
 800e7e4:	6a21      	ldr	r1, [r4, #32]
 800e7e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e7e8:	4643      	mov	r3, r8
 800e7ea:	463a      	mov	r2, r7
 800e7ec:	4628      	mov	r0, r5
 800e7ee:	47b0      	blx	r6
 800e7f0:	2800      	cmp	r0, #0
 800e7f2:	dc06      	bgt.n	800e802 <__sflush_r+0xfe>
 800e7f4:	89a3      	ldrh	r3, [r4, #12]
 800e7f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7fa:	81a3      	strh	r3, [r4, #12]
 800e7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e800:	e78e      	b.n	800e720 <__sflush_r+0x1c>
 800e802:	4407      	add	r7, r0
 800e804:	eba8 0800 	sub.w	r8, r8, r0
 800e808:	e7e9      	b.n	800e7de <__sflush_r+0xda>
 800e80a:	bf00      	nop
 800e80c:	20400001 	.word	0x20400001

0800e810 <_fflush_r>:
 800e810:	b538      	push	{r3, r4, r5, lr}
 800e812:	690b      	ldr	r3, [r1, #16]
 800e814:	4605      	mov	r5, r0
 800e816:	460c      	mov	r4, r1
 800e818:	b913      	cbnz	r3, 800e820 <_fflush_r+0x10>
 800e81a:	2500      	movs	r5, #0
 800e81c:	4628      	mov	r0, r5
 800e81e:	bd38      	pop	{r3, r4, r5, pc}
 800e820:	b118      	cbz	r0, 800e82a <_fflush_r+0x1a>
 800e822:	6983      	ldr	r3, [r0, #24]
 800e824:	b90b      	cbnz	r3, 800e82a <_fflush_r+0x1a>
 800e826:	f7fd f953 	bl	800bad0 <__sinit>
 800e82a:	4b14      	ldr	r3, [pc, #80]	; (800e87c <_fflush_r+0x6c>)
 800e82c:	429c      	cmp	r4, r3
 800e82e:	d11b      	bne.n	800e868 <_fflush_r+0x58>
 800e830:	686c      	ldr	r4, [r5, #4]
 800e832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d0ef      	beq.n	800e81a <_fflush_r+0xa>
 800e83a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e83c:	07d0      	lsls	r0, r2, #31
 800e83e:	d404      	bmi.n	800e84a <_fflush_r+0x3a>
 800e840:	0599      	lsls	r1, r3, #22
 800e842:	d402      	bmi.n	800e84a <_fflush_r+0x3a>
 800e844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e846:	f7fd fa06 	bl	800bc56 <__retarget_lock_acquire_recursive>
 800e84a:	4628      	mov	r0, r5
 800e84c:	4621      	mov	r1, r4
 800e84e:	f7ff ff59 	bl	800e704 <__sflush_r>
 800e852:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e854:	07da      	lsls	r2, r3, #31
 800e856:	4605      	mov	r5, r0
 800e858:	d4e0      	bmi.n	800e81c <_fflush_r+0xc>
 800e85a:	89a3      	ldrh	r3, [r4, #12]
 800e85c:	059b      	lsls	r3, r3, #22
 800e85e:	d4dd      	bmi.n	800e81c <_fflush_r+0xc>
 800e860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e862:	f7fd f9f9 	bl	800bc58 <__retarget_lock_release_recursive>
 800e866:	e7d9      	b.n	800e81c <_fflush_r+0xc>
 800e868:	4b05      	ldr	r3, [pc, #20]	; (800e880 <_fflush_r+0x70>)
 800e86a:	429c      	cmp	r4, r3
 800e86c:	d101      	bne.n	800e872 <_fflush_r+0x62>
 800e86e:	68ac      	ldr	r4, [r5, #8]
 800e870:	e7df      	b.n	800e832 <_fflush_r+0x22>
 800e872:	4b04      	ldr	r3, [pc, #16]	; (800e884 <_fflush_r+0x74>)
 800e874:	429c      	cmp	r4, r3
 800e876:	bf08      	it	eq
 800e878:	68ec      	ldreq	r4, [r5, #12]
 800e87a:	e7da      	b.n	800e832 <_fflush_r+0x22>
 800e87c:	08011fd0 	.word	0x08011fd0
 800e880:	08011ff0 	.word	0x08011ff0
 800e884:	08011fb0 	.word	0x08011fb0

0800e888 <rshift>:
 800e888:	6903      	ldr	r3, [r0, #16]
 800e88a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e88e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e892:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e896:	f100 0414 	add.w	r4, r0, #20
 800e89a:	dd45      	ble.n	800e928 <rshift+0xa0>
 800e89c:	f011 011f 	ands.w	r1, r1, #31
 800e8a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e8a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e8a8:	d10c      	bne.n	800e8c4 <rshift+0x3c>
 800e8aa:	f100 0710 	add.w	r7, r0, #16
 800e8ae:	4629      	mov	r1, r5
 800e8b0:	42b1      	cmp	r1, r6
 800e8b2:	d334      	bcc.n	800e91e <rshift+0x96>
 800e8b4:	1a9b      	subs	r3, r3, r2
 800e8b6:	009b      	lsls	r3, r3, #2
 800e8b8:	1eea      	subs	r2, r5, #3
 800e8ba:	4296      	cmp	r6, r2
 800e8bc:	bf38      	it	cc
 800e8be:	2300      	movcc	r3, #0
 800e8c0:	4423      	add	r3, r4
 800e8c2:	e015      	b.n	800e8f0 <rshift+0x68>
 800e8c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e8c8:	f1c1 0820 	rsb	r8, r1, #32
 800e8cc:	40cf      	lsrs	r7, r1
 800e8ce:	f105 0e04 	add.w	lr, r5, #4
 800e8d2:	46a1      	mov	r9, r4
 800e8d4:	4576      	cmp	r6, lr
 800e8d6:	46f4      	mov	ip, lr
 800e8d8:	d815      	bhi.n	800e906 <rshift+0x7e>
 800e8da:	1a9a      	subs	r2, r3, r2
 800e8dc:	0092      	lsls	r2, r2, #2
 800e8de:	3a04      	subs	r2, #4
 800e8e0:	3501      	adds	r5, #1
 800e8e2:	42ae      	cmp	r6, r5
 800e8e4:	bf38      	it	cc
 800e8e6:	2200      	movcc	r2, #0
 800e8e8:	18a3      	adds	r3, r4, r2
 800e8ea:	50a7      	str	r7, [r4, r2]
 800e8ec:	b107      	cbz	r7, 800e8f0 <rshift+0x68>
 800e8ee:	3304      	adds	r3, #4
 800e8f0:	1b1a      	subs	r2, r3, r4
 800e8f2:	42a3      	cmp	r3, r4
 800e8f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e8f8:	bf08      	it	eq
 800e8fa:	2300      	moveq	r3, #0
 800e8fc:	6102      	str	r2, [r0, #16]
 800e8fe:	bf08      	it	eq
 800e900:	6143      	streq	r3, [r0, #20]
 800e902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e906:	f8dc c000 	ldr.w	ip, [ip]
 800e90a:	fa0c fc08 	lsl.w	ip, ip, r8
 800e90e:	ea4c 0707 	orr.w	r7, ip, r7
 800e912:	f849 7b04 	str.w	r7, [r9], #4
 800e916:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e91a:	40cf      	lsrs	r7, r1
 800e91c:	e7da      	b.n	800e8d4 <rshift+0x4c>
 800e91e:	f851 cb04 	ldr.w	ip, [r1], #4
 800e922:	f847 cf04 	str.w	ip, [r7, #4]!
 800e926:	e7c3      	b.n	800e8b0 <rshift+0x28>
 800e928:	4623      	mov	r3, r4
 800e92a:	e7e1      	b.n	800e8f0 <rshift+0x68>

0800e92c <__hexdig_fun>:
 800e92c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e930:	2b09      	cmp	r3, #9
 800e932:	d802      	bhi.n	800e93a <__hexdig_fun+0xe>
 800e934:	3820      	subs	r0, #32
 800e936:	b2c0      	uxtb	r0, r0
 800e938:	4770      	bx	lr
 800e93a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e93e:	2b05      	cmp	r3, #5
 800e940:	d801      	bhi.n	800e946 <__hexdig_fun+0x1a>
 800e942:	3847      	subs	r0, #71	; 0x47
 800e944:	e7f7      	b.n	800e936 <__hexdig_fun+0xa>
 800e946:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e94a:	2b05      	cmp	r3, #5
 800e94c:	d801      	bhi.n	800e952 <__hexdig_fun+0x26>
 800e94e:	3827      	subs	r0, #39	; 0x27
 800e950:	e7f1      	b.n	800e936 <__hexdig_fun+0xa>
 800e952:	2000      	movs	r0, #0
 800e954:	4770      	bx	lr
	...

0800e958 <__gethex>:
 800e958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e95c:	ed2d 8b02 	vpush	{d8}
 800e960:	b089      	sub	sp, #36	; 0x24
 800e962:	ee08 0a10 	vmov	s16, r0
 800e966:	9304      	str	r3, [sp, #16]
 800e968:	4bb4      	ldr	r3, [pc, #720]	; (800ec3c <__gethex+0x2e4>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	9301      	str	r3, [sp, #4]
 800e96e:	4618      	mov	r0, r3
 800e970:	468b      	mov	fp, r1
 800e972:	4690      	mov	r8, r2
 800e974:	f7f1 fc3c 	bl	80001f0 <strlen>
 800e978:	9b01      	ldr	r3, [sp, #4]
 800e97a:	f8db 2000 	ldr.w	r2, [fp]
 800e97e:	4403      	add	r3, r0
 800e980:	4682      	mov	sl, r0
 800e982:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e986:	9305      	str	r3, [sp, #20]
 800e988:	1c93      	adds	r3, r2, #2
 800e98a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e98e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e992:	32fe      	adds	r2, #254	; 0xfe
 800e994:	18d1      	adds	r1, r2, r3
 800e996:	461f      	mov	r7, r3
 800e998:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e99c:	9100      	str	r1, [sp, #0]
 800e99e:	2830      	cmp	r0, #48	; 0x30
 800e9a0:	d0f8      	beq.n	800e994 <__gethex+0x3c>
 800e9a2:	f7ff ffc3 	bl	800e92c <__hexdig_fun>
 800e9a6:	4604      	mov	r4, r0
 800e9a8:	2800      	cmp	r0, #0
 800e9aa:	d13a      	bne.n	800ea22 <__gethex+0xca>
 800e9ac:	9901      	ldr	r1, [sp, #4]
 800e9ae:	4652      	mov	r2, sl
 800e9b0:	4638      	mov	r0, r7
 800e9b2:	f001 f9b1 	bl	800fd18 <strncmp>
 800e9b6:	4605      	mov	r5, r0
 800e9b8:	2800      	cmp	r0, #0
 800e9ba:	d168      	bne.n	800ea8e <__gethex+0x136>
 800e9bc:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e9c0:	eb07 060a 	add.w	r6, r7, sl
 800e9c4:	f7ff ffb2 	bl	800e92c <__hexdig_fun>
 800e9c8:	2800      	cmp	r0, #0
 800e9ca:	d062      	beq.n	800ea92 <__gethex+0x13a>
 800e9cc:	4633      	mov	r3, r6
 800e9ce:	7818      	ldrb	r0, [r3, #0]
 800e9d0:	2830      	cmp	r0, #48	; 0x30
 800e9d2:	461f      	mov	r7, r3
 800e9d4:	f103 0301 	add.w	r3, r3, #1
 800e9d8:	d0f9      	beq.n	800e9ce <__gethex+0x76>
 800e9da:	f7ff ffa7 	bl	800e92c <__hexdig_fun>
 800e9de:	2301      	movs	r3, #1
 800e9e0:	fab0 f480 	clz	r4, r0
 800e9e4:	0964      	lsrs	r4, r4, #5
 800e9e6:	4635      	mov	r5, r6
 800e9e8:	9300      	str	r3, [sp, #0]
 800e9ea:	463a      	mov	r2, r7
 800e9ec:	4616      	mov	r6, r2
 800e9ee:	3201      	adds	r2, #1
 800e9f0:	7830      	ldrb	r0, [r6, #0]
 800e9f2:	f7ff ff9b 	bl	800e92c <__hexdig_fun>
 800e9f6:	2800      	cmp	r0, #0
 800e9f8:	d1f8      	bne.n	800e9ec <__gethex+0x94>
 800e9fa:	9901      	ldr	r1, [sp, #4]
 800e9fc:	4652      	mov	r2, sl
 800e9fe:	4630      	mov	r0, r6
 800ea00:	f001 f98a 	bl	800fd18 <strncmp>
 800ea04:	b980      	cbnz	r0, 800ea28 <__gethex+0xd0>
 800ea06:	b94d      	cbnz	r5, 800ea1c <__gethex+0xc4>
 800ea08:	eb06 050a 	add.w	r5, r6, sl
 800ea0c:	462a      	mov	r2, r5
 800ea0e:	4616      	mov	r6, r2
 800ea10:	3201      	adds	r2, #1
 800ea12:	7830      	ldrb	r0, [r6, #0]
 800ea14:	f7ff ff8a 	bl	800e92c <__hexdig_fun>
 800ea18:	2800      	cmp	r0, #0
 800ea1a:	d1f8      	bne.n	800ea0e <__gethex+0xb6>
 800ea1c:	1bad      	subs	r5, r5, r6
 800ea1e:	00ad      	lsls	r5, r5, #2
 800ea20:	e004      	b.n	800ea2c <__gethex+0xd4>
 800ea22:	2400      	movs	r4, #0
 800ea24:	4625      	mov	r5, r4
 800ea26:	e7e0      	b.n	800e9ea <__gethex+0x92>
 800ea28:	2d00      	cmp	r5, #0
 800ea2a:	d1f7      	bne.n	800ea1c <__gethex+0xc4>
 800ea2c:	7833      	ldrb	r3, [r6, #0]
 800ea2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ea32:	2b50      	cmp	r3, #80	; 0x50
 800ea34:	d13b      	bne.n	800eaae <__gethex+0x156>
 800ea36:	7873      	ldrb	r3, [r6, #1]
 800ea38:	2b2b      	cmp	r3, #43	; 0x2b
 800ea3a:	d02c      	beq.n	800ea96 <__gethex+0x13e>
 800ea3c:	2b2d      	cmp	r3, #45	; 0x2d
 800ea3e:	d02e      	beq.n	800ea9e <__gethex+0x146>
 800ea40:	1c71      	adds	r1, r6, #1
 800ea42:	f04f 0900 	mov.w	r9, #0
 800ea46:	7808      	ldrb	r0, [r1, #0]
 800ea48:	f7ff ff70 	bl	800e92c <__hexdig_fun>
 800ea4c:	1e43      	subs	r3, r0, #1
 800ea4e:	b2db      	uxtb	r3, r3
 800ea50:	2b18      	cmp	r3, #24
 800ea52:	d82c      	bhi.n	800eaae <__gethex+0x156>
 800ea54:	f1a0 0210 	sub.w	r2, r0, #16
 800ea58:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ea5c:	f7ff ff66 	bl	800e92c <__hexdig_fun>
 800ea60:	1e43      	subs	r3, r0, #1
 800ea62:	b2db      	uxtb	r3, r3
 800ea64:	2b18      	cmp	r3, #24
 800ea66:	d91d      	bls.n	800eaa4 <__gethex+0x14c>
 800ea68:	f1b9 0f00 	cmp.w	r9, #0
 800ea6c:	d000      	beq.n	800ea70 <__gethex+0x118>
 800ea6e:	4252      	negs	r2, r2
 800ea70:	4415      	add	r5, r2
 800ea72:	f8cb 1000 	str.w	r1, [fp]
 800ea76:	b1e4      	cbz	r4, 800eab2 <__gethex+0x15a>
 800ea78:	9b00      	ldr	r3, [sp, #0]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	bf14      	ite	ne
 800ea7e:	2700      	movne	r7, #0
 800ea80:	2706      	moveq	r7, #6
 800ea82:	4638      	mov	r0, r7
 800ea84:	b009      	add	sp, #36	; 0x24
 800ea86:	ecbd 8b02 	vpop	{d8}
 800ea8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea8e:	463e      	mov	r6, r7
 800ea90:	4625      	mov	r5, r4
 800ea92:	2401      	movs	r4, #1
 800ea94:	e7ca      	b.n	800ea2c <__gethex+0xd4>
 800ea96:	f04f 0900 	mov.w	r9, #0
 800ea9a:	1cb1      	adds	r1, r6, #2
 800ea9c:	e7d3      	b.n	800ea46 <__gethex+0xee>
 800ea9e:	f04f 0901 	mov.w	r9, #1
 800eaa2:	e7fa      	b.n	800ea9a <__gethex+0x142>
 800eaa4:	230a      	movs	r3, #10
 800eaa6:	fb03 0202 	mla	r2, r3, r2, r0
 800eaaa:	3a10      	subs	r2, #16
 800eaac:	e7d4      	b.n	800ea58 <__gethex+0x100>
 800eaae:	4631      	mov	r1, r6
 800eab0:	e7df      	b.n	800ea72 <__gethex+0x11a>
 800eab2:	1bf3      	subs	r3, r6, r7
 800eab4:	3b01      	subs	r3, #1
 800eab6:	4621      	mov	r1, r4
 800eab8:	2b07      	cmp	r3, #7
 800eaba:	dc0b      	bgt.n	800ead4 <__gethex+0x17c>
 800eabc:	ee18 0a10 	vmov	r0, s16
 800eac0:	f000 fa8e 	bl	800efe0 <_Balloc>
 800eac4:	4604      	mov	r4, r0
 800eac6:	b940      	cbnz	r0, 800eada <__gethex+0x182>
 800eac8:	4b5d      	ldr	r3, [pc, #372]	; (800ec40 <__gethex+0x2e8>)
 800eaca:	4602      	mov	r2, r0
 800eacc:	21de      	movs	r1, #222	; 0xde
 800eace:	485d      	ldr	r0, [pc, #372]	; (800ec44 <__gethex+0x2ec>)
 800ead0:	f001 f944 	bl	800fd5c <__assert_func>
 800ead4:	3101      	adds	r1, #1
 800ead6:	105b      	asrs	r3, r3, #1
 800ead8:	e7ee      	b.n	800eab8 <__gethex+0x160>
 800eada:	f100 0914 	add.w	r9, r0, #20
 800eade:	f04f 0b00 	mov.w	fp, #0
 800eae2:	f1ca 0301 	rsb	r3, sl, #1
 800eae6:	f8cd 9008 	str.w	r9, [sp, #8]
 800eaea:	f8cd b000 	str.w	fp, [sp]
 800eaee:	9306      	str	r3, [sp, #24]
 800eaf0:	42b7      	cmp	r7, r6
 800eaf2:	d340      	bcc.n	800eb76 <__gethex+0x21e>
 800eaf4:	9802      	ldr	r0, [sp, #8]
 800eaf6:	9b00      	ldr	r3, [sp, #0]
 800eaf8:	f840 3b04 	str.w	r3, [r0], #4
 800eafc:	eba0 0009 	sub.w	r0, r0, r9
 800eb00:	1080      	asrs	r0, r0, #2
 800eb02:	0146      	lsls	r6, r0, #5
 800eb04:	6120      	str	r0, [r4, #16]
 800eb06:	4618      	mov	r0, r3
 800eb08:	f000 fb5c 	bl	800f1c4 <__hi0bits>
 800eb0c:	1a30      	subs	r0, r6, r0
 800eb0e:	f8d8 6000 	ldr.w	r6, [r8]
 800eb12:	42b0      	cmp	r0, r6
 800eb14:	dd63      	ble.n	800ebde <__gethex+0x286>
 800eb16:	1b87      	subs	r7, r0, r6
 800eb18:	4639      	mov	r1, r7
 800eb1a:	4620      	mov	r0, r4
 800eb1c:	f000 ff00 	bl	800f920 <__any_on>
 800eb20:	4682      	mov	sl, r0
 800eb22:	b1a8      	cbz	r0, 800eb50 <__gethex+0x1f8>
 800eb24:	1e7b      	subs	r3, r7, #1
 800eb26:	1159      	asrs	r1, r3, #5
 800eb28:	f003 021f 	and.w	r2, r3, #31
 800eb2c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800eb30:	f04f 0a01 	mov.w	sl, #1
 800eb34:	fa0a f202 	lsl.w	r2, sl, r2
 800eb38:	420a      	tst	r2, r1
 800eb3a:	d009      	beq.n	800eb50 <__gethex+0x1f8>
 800eb3c:	4553      	cmp	r3, sl
 800eb3e:	dd05      	ble.n	800eb4c <__gethex+0x1f4>
 800eb40:	1eb9      	subs	r1, r7, #2
 800eb42:	4620      	mov	r0, r4
 800eb44:	f000 feec 	bl	800f920 <__any_on>
 800eb48:	2800      	cmp	r0, #0
 800eb4a:	d145      	bne.n	800ebd8 <__gethex+0x280>
 800eb4c:	f04f 0a02 	mov.w	sl, #2
 800eb50:	4639      	mov	r1, r7
 800eb52:	4620      	mov	r0, r4
 800eb54:	f7ff fe98 	bl	800e888 <rshift>
 800eb58:	443d      	add	r5, r7
 800eb5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eb5e:	42ab      	cmp	r3, r5
 800eb60:	da4c      	bge.n	800ebfc <__gethex+0x2a4>
 800eb62:	ee18 0a10 	vmov	r0, s16
 800eb66:	4621      	mov	r1, r4
 800eb68:	f000 fa7a 	bl	800f060 <_Bfree>
 800eb6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eb6e:	2300      	movs	r3, #0
 800eb70:	6013      	str	r3, [r2, #0]
 800eb72:	27a3      	movs	r7, #163	; 0xa3
 800eb74:	e785      	b.n	800ea82 <__gethex+0x12a>
 800eb76:	1e73      	subs	r3, r6, #1
 800eb78:	9a05      	ldr	r2, [sp, #20]
 800eb7a:	9303      	str	r3, [sp, #12]
 800eb7c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eb80:	4293      	cmp	r3, r2
 800eb82:	d019      	beq.n	800ebb8 <__gethex+0x260>
 800eb84:	f1bb 0f20 	cmp.w	fp, #32
 800eb88:	d107      	bne.n	800eb9a <__gethex+0x242>
 800eb8a:	9b02      	ldr	r3, [sp, #8]
 800eb8c:	9a00      	ldr	r2, [sp, #0]
 800eb8e:	f843 2b04 	str.w	r2, [r3], #4
 800eb92:	9302      	str	r3, [sp, #8]
 800eb94:	2300      	movs	r3, #0
 800eb96:	9300      	str	r3, [sp, #0]
 800eb98:	469b      	mov	fp, r3
 800eb9a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800eb9e:	f7ff fec5 	bl	800e92c <__hexdig_fun>
 800eba2:	9b00      	ldr	r3, [sp, #0]
 800eba4:	f000 000f 	and.w	r0, r0, #15
 800eba8:	fa00 f00b 	lsl.w	r0, r0, fp
 800ebac:	4303      	orrs	r3, r0
 800ebae:	9300      	str	r3, [sp, #0]
 800ebb0:	f10b 0b04 	add.w	fp, fp, #4
 800ebb4:	9b03      	ldr	r3, [sp, #12]
 800ebb6:	e00d      	b.n	800ebd4 <__gethex+0x27c>
 800ebb8:	9b03      	ldr	r3, [sp, #12]
 800ebba:	9a06      	ldr	r2, [sp, #24]
 800ebbc:	4413      	add	r3, r2
 800ebbe:	42bb      	cmp	r3, r7
 800ebc0:	d3e0      	bcc.n	800eb84 <__gethex+0x22c>
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	9901      	ldr	r1, [sp, #4]
 800ebc6:	9307      	str	r3, [sp, #28]
 800ebc8:	4652      	mov	r2, sl
 800ebca:	f001 f8a5 	bl	800fd18 <strncmp>
 800ebce:	9b07      	ldr	r3, [sp, #28]
 800ebd0:	2800      	cmp	r0, #0
 800ebd2:	d1d7      	bne.n	800eb84 <__gethex+0x22c>
 800ebd4:	461e      	mov	r6, r3
 800ebd6:	e78b      	b.n	800eaf0 <__gethex+0x198>
 800ebd8:	f04f 0a03 	mov.w	sl, #3
 800ebdc:	e7b8      	b.n	800eb50 <__gethex+0x1f8>
 800ebde:	da0a      	bge.n	800ebf6 <__gethex+0x29e>
 800ebe0:	1a37      	subs	r7, r6, r0
 800ebe2:	4621      	mov	r1, r4
 800ebe4:	ee18 0a10 	vmov	r0, s16
 800ebe8:	463a      	mov	r2, r7
 800ebea:	f000 fc55 	bl	800f498 <__lshift>
 800ebee:	1bed      	subs	r5, r5, r7
 800ebf0:	4604      	mov	r4, r0
 800ebf2:	f100 0914 	add.w	r9, r0, #20
 800ebf6:	f04f 0a00 	mov.w	sl, #0
 800ebfa:	e7ae      	b.n	800eb5a <__gethex+0x202>
 800ebfc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ec00:	42a8      	cmp	r0, r5
 800ec02:	dd72      	ble.n	800ecea <__gethex+0x392>
 800ec04:	1b45      	subs	r5, r0, r5
 800ec06:	42ae      	cmp	r6, r5
 800ec08:	dc36      	bgt.n	800ec78 <__gethex+0x320>
 800ec0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ec0e:	2b02      	cmp	r3, #2
 800ec10:	d02a      	beq.n	800ec68 <__gethex+0x310>
 800ec12:	2b03      	cmp	r3, #3
 800ec14:	d02c      	beq.n	800ec70 <__gethex+0x318>
 800ec16:	2b01      	cmp	r3, #1
 800ec18:	d11c      	bne.n	800ec54 <__gethex+0x2fc>
 800ec1a:	42ae      	cmp	r6, r5
 800ec1c:	d11a      	bne.n	800ec54 <__gethex+0x2fc>
 800ec1e:	2e01      	cmp	r6, #1
 800ec20:	d112      	bne.n	800ec48 <__gethex+0x2f0>
 800ec22:	9a04      	ldr	r2, [sp, #16]
 800ec24:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ec28:	6013      	str	r3, [r2, #0]
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	6123      	str	r3, [r4, #16]
 800ec2e:	f8c9 3000 	str.w	r3, [r9]
 800ec32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ec34:	2762      	movs	r7, #98	; 0x62
 800ec36:	601c      	str	r4, [r3, #0]
 800ec38:	e723      	b.n	800ea82 <__gethex+0x12a>
 800ec3a:	bf00      	nop
 800ec3c:	08012298 	.word	0x08012298
 800ec40:	08012220 	.word	0x08012220
 800ec44:	08012231 	.word	0x08012231
 800ec48:	1e71      	subs	r1, r6, #1
 800ec4a:	4620      	mov	r0, r4
 800ec4c:	f000 fe68 	bl	800f920 <__any_on>
 800ec50:	2800      	cmp	r0, #0
 800ec52:	d1e6      	bne.n	800ec22 <__gethex+0x2ca>
 800ec54:	ee18 0a10 	vmov	r0, s16
 800ec58:	4621      	mov	r1, r4
 800ec5a:	f000 fa01 	bl	800f060 <_Bfree>
 800ec5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ec60:	2300      	movs	r3, #0
 800ec62:	6013      	str	r3, [r2, #0]
 800ec64:	2750      	movs	r7, #80	; 0x50
 800ec66:	e70c      	b.n	800ea82 <__gethex+0x12a>
 800ec68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d1f2      	bne.n	800ec54 <__gethex+0x2fc>
 800ec6e:	e7d8      	b.n	800ec22 <__gethex+0x2ca>
 800ec70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d1d5      	bne.n	800ec22 <__gethex+0x2ca>
 800ec76:	e7ed      	b.n	800ec54 <__gethex+0x2fc>
 800ec78:	1e6f      	subs	r7, r5, #1
 800ec7a:	f1ba 0f00 	cmp.w	sl, #0
 800ec7e:	d131      	bne.n	800ece4 <__gethex+0x38c>
 800ec80:	b127      	cbz	r7, 800ec8c <__gethex+0x334>
 800ec82:	4639      	mov	r1, r7
 800ec84:	4620      	mov	r0, r4
 800ec86:	f000 fe4b 	bl	800f920 <__any_on>
 800ec8a:	4682      	mov	sl, r0
 800ec8c:	117b      	asrs	r3, r7, #5
 800ec8e:	2101      	movs	r1, #1
 800ec90:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ec94:	f007 071f 	and.w	r7, r7, #31
 800ec98:	fa01 f707 	lsl.w	r7, r1, r7
 800ec9c:	421f      	tst	r7, r3
 800ec9e:	4629      	mov	r1, r5
 800eca0:	4620      	mov	r0, r4
 800eca2:	bf18      	it	ne
 800eca4:	f04a 0a02 	orrne.w	sl, sl, #2
 800eca8:	1b76      	subs	r6, r6, r5
 800ecaa:	f7ff fded 	bl	800e888 <rshift>
 800ecae:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ecb2:	2702      	movs	r7, #2
 800ecb4:	f1ba 0f00 	cmp.w	sl, #0
 800ecb8:	d048      	beq.n	800ed4c <__gethex+0x3f4>
 800ecba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ecbe:	2b02      	cmp	r3, #2
 800ecc0:	d015      	beq.n	800ecee <__gethex+0x396>
 800ecc2:	2b03      	cmp	r3, #3
 800ecc4:	d017      	beq.n	800ecf6 <__gethex+0x39e>
 800ecc6:	2b01      	cmp	r3, #1
 800ecc8:	d109      	bne.n	800ecde <__gethex+0x386>
 800ecca:	f01a 0f02 	tst.w	sl, #2
 800ecce:	d006      	beq.n	800ecde <__gethex+0x386>
 800ecd0:	f8d9 0000 	ldr.w	r0, [r9]
 800ecd4:	ea4a 0a00 	orr.w	sl, sl, r0
 800ecd8:	f01a 0f01 	tst.w	sl, #1
 800ecdc:	d10e      	bne.n	800ecfc <__gethex+0x3a4>
 800ecde:	f047 0710 	orr.w	r7, r7, #16
 800ece2:	e033      	b.n	800ed4c <__gethex+0x3f4>
 800ece4:	f04f 0a01 	mov.w	sl, #1
 800ece8:	e7d0      	b.n	800ec8c <__gethex+0x334>
 800ecea:	2701      	movs	r7, #1
 800ecec:	e7e2      	b.n	800ecb4 <__gethex+0x35c>
 800ecee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ecf0:	f1c3 0301 	rsb	r3, r3, #1
 800ecf4:	9315      	str	r3, [sp, #84]	; 0x54
 800ecf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d0f0      	beq.n	800ecde <__gethex+0x386>
 800ecfc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ed00:	f104 0314 	add.w	r3, r4, #20
 800ed04:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ed08:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ed0c:	f04f 0c00 	mov.w	ip, #0
 800ed10:	4618      	mov	r0, r3
 800ed12:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed16:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ed1a:	d01c      	beq.n	800ed56 <__gethex+0x3fe>
 800ed1c:	3201      	adds	r2, #1
 800ed1e:	6002      	str	r2, [r0, #0]
 800ed20:	2f02      	cmp	r7, #2
 800ed22:	f104 0314 	add.w	r3, r4, #20
 800ed26:	d13f      	bne.n	800eda8 <__gethex+0x450>
 800ed28:	f8d8 2000 	ldr.w	r2, [r8]
 800ed2c:	3a01      	subs	r2, #1
 800ed2e:	42b2      	cmp	r2, r6
 800ed30:	d10a      	bne.n	800ed48 <__gethex+0x3f0>
 800ed32:	1171      	asrs	r1, r6, #5
 800ed34:	2201      	movs	r2, #1
 800ed36:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ed3a:	f006 061f 	and.w	r6, r6, #31
 800ed3e:	fa02 f606 	lsl.w	r6, r2, r6
 800ed42:	421e      	tst	r6, r3
 800ed44:	bf18      	it	ne
 800ed46:	4617      	movne	r7, r2
 800ed48:	f047 0720 	orr.w	r7, r7, #32
 800ed4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ed4e:	601c      	str	r4, [r3, #0]
 800ed50:	9b04      	ldr	r3, [sp, #16]
 800ed52:	601d      	str	r5, [r3, #0]
 800ed54:	e695      	b.n	800ea82 <__gethex+0x12a>
 800ed56:	4299      	cmp	r1, r3
 800ed58:	f843 cc04 	str.w	ip, [r3, #-4]
 800ed5c:	d8d8      	bhi.n	800ed10 <__gethex+0x3b8>
 800ed5e:	68a3      	ldr	r3, [r4, #8]
 800ed60:	459b      	cmp	fp, r3
 800ed62:	db19      	blt.n	800ed98 <__gethex+0x440>
 800ed64:	6861      	ldr	r1, [r4, #4]
 800ed66:	ee18 0a10 	vmov	r0, s16
 800ed6a:	3101      	adds	r1, #1
 800ed6c:	f000 f938 	bl	800efe0 <_Balloc>
 800ed70:	4681      	mov	r9, r0
 800ed72:	b918      	cbnz	r0, 800ed7c <__gethex+0x424>
 800ed74:	4b1a      	ldr	r3, [pc, #104]	; (800ede0 <__gethex+0x488>)
 800ed76:	4602      	mov	r2, r0
 800ed78:	2184      	movs	r1, #132	; 0x84
 800ed7a:	e6a8      	b.n	800eace <__gethex+0x176>
 800ed7c:	6922      	ldr	r2, [r4, #16]
 800ed7e:	3202      	adds	r2, #2
 800ed80:	f104 010c 	add.w	r1, r4, #12
 800ed84:	0092      	lsls	r2, r2, #2
 800ed86:	300c      	adds	r0, #12
 800ed88:	f7fc ff67 	bl	800bc5a <memcpy>
 800ed8c:	4621      	mov	r1, r4
 800ed8e:	ee18 0a10 	vmov	r0, s16
 800ed92:	f000 f965 	bl	800f060 <_Bfree>
 800ed96:	464c      	mov	r4, r9
 800ed98:	6923      	ldr	r3, [r4, #16]
 800ed9a:	1c5a      	adds	r2, r3, #1
 800ed9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800eda0:	6122      	str	r2, [r4, #16]
 800eda2:	2201      	movs	r2, #1
 800eda4:	615a      	str	r2, [r3, #20]
 800eda6:	e7bb      	b.n	800ed20 <__gethex+0x3c8>
 800eda8:	6922      	ldr	r2, [r4, #16]
 800edaa:	455a      	cmp	r2, fp
 800edac:	dd0b      	ble.n	800edc6 <__gethex+0x46e>
 800edae:	2101      	movs	r1, #1
 800edb0:	4620      	mov	r0, r4
 800edb2:	f7ff fd69 	bl	800e888 <rshift>
 800edb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800edba:	3501      	adds	r5, #1
 800edbc:	42ab      	cmp	r3, r5
 800edbe:	f6ff aed0 	blt.w	800eb62 <__gethex+0x20a>
 800edc2:	2701      	movs	r7, #1
 800edc4:	e7c0      	b.n	800ed48 <__gethex+0x3f0>
 800edc6:	f016 061f 	ands.w	r6, r6, #31
 800edca:	d0fa      	beq.n	800edc2 <__gethex+0x46a>
 800edcc:	4453      	add	r3, sl
 800edce:	f1c6 0620 	rsb	r6, r6, #32
 800edd2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800edd6:	f000 f9f5 	bl	800f1c4 <__hi0bits>
 800edda:	42b0      	cmp	r0, r6
 800eddc:	dbe7      	blt.n	800edae <__gethex+0x456>
 800edde:	e7f0      	b.n	800edc2 <__gethex+0x46a>
 800ede0:	08012220 	.word	0x08012220

0800ede4 <L_shift>:
 800ede4:	f1c2 0208 	rsb	r2, r2, #8
 800ede8:	0092      	lsls	r2, r2, #2
 800edea:	b570      	push	{r4, r5, r6, lr}
 800edec:	f1c2 0620 	rsb	r6, r2, #32
 800edf0:	6843      	ldr	r3, [r0, #4]
 800edf2:	6804      	ldr	r4, [r0, #0]
 800edf4:	fa03 f506 	lsl.w	r5, r3, r6
 800edf8:	432c      	orrs	r4, r5
 800edfa:	40d3      	lsrs	r3, r2
 800edfc:	6004      	str	r4, [r0, #0]
 800edfe:	f840 3f04 	str.w	r3, [r0, #4]!
 800ee02:	4288      	cmp	r0, r1
 800ee04:	d3f4      	bcc.n	800edf0 <L_shift+0xc>
 800ee06:	bd70      	pop	{r4, r5, r6, pc}

0800ee08 <__match>:
 800ee08:	b530      	push	{r4, r5, lr}
 800ee0a:	6803      	ldr	r3, [r0, #0]
 800ee0c:	3301      	adds	r3, #1
 800ee0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee12:	b914      	cbnz	r4, 800ee1a <__match+0x12>
 800ee14:	6003      	str	r3, [r0, #0]
 800ee16:	2001      	movs	r0, #1
 800ee18:	bd30      	pop	{r4, r5, pc}
 800ee1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee1e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ee22:	2d19      	cmp	r5, #25
 800ee24:	bf98      	it	ls
 800ee26:	3220      	addls	r2, #32
 800ee28:	42a2      	cmp	r2, r4
 800ee2a:	d0f0      	beq.n	800ee0e <__match+0x6>
 800ee2c:	2000      	movs	r0, #0
 800ee2e:	e7f3      	b.n	800ee18 <__match+0x10>

0800ee30 <__hexnan>:
 800ee30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee34:	680b      	ldr	r3, [r1, #0]
 800ee36:	115e      	asrs	r6, r3, #5
 800ee38:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ee3c:	f013 031f 	ands.w	r3, r3, #31
 800ee40:	b087      	sub	sp, #28
 800ee42:	bf18      	it	ne
 800ee44:	3604      	addne	r6, #4
 800ee46:	2500      	movs	r5, #0
 800ee48:	1f37      	subs	r7, r6, #4
 800ee4a:	4690      	mov	r8, r2
 800ee4c:	6802      	ldr	r2, [r0, #0]
 800ee4e:	9301      	str	r3, [sp, #4]
 800ee50:	4682      	mov	sl, r0
 800ee52:	f846 5c04 	str.w	r5, [r6, #-4]
 800ee56:	46b9      	mov	r9, r7
 800ee58:	463c      	mov	r4, r7
 800ee5a:	9502      	str	r5, [sp, #8]
 800ee5c:	46ab      	mov	fp, r5
 800ee5e:	7851      	ldrb	r1, [r2, #1]
 800ee60:	1c53      	adds	r3, r2, #1
 800ee62:	9303      	str	r3, [sp, #12]
 800ee64:	b341      	cbz	r1, 800eeb8 <__hexnan+0x88>
 800ee66:	4608      	mov	r0, r1
 800ee68:	9205      	str	r2, [sp, #20]
 800ee6a:	9104      	str	r1, [sp, #16]
 800ee6c:	f7ff fd5e 	bl	800e92c <__hexdig_fun>
 800ee70:	2800      	cmp	r0, #0
 800ee72:	d14f      	bne.n	800ef14 <__hexnan+0xe4>
 800ee74:	9904      	ldr	r1, [sp, #16]
 800ee76:	9a05      	ldr	r2, [sp, #20]
 800ee78:	2920      	cmp	r1, #32
 800ee7a:	d818      	bhi.n	800eeae <__hexnan+0x7e>
 800ee7c:	9b02      	ldr	r3, [sp, #8]
 800ee7e:	459b      	cmp	fp, r3
 800ee80:	dd13      	ble.n	800eeaa <__hexnan+0x7a>
 800ee82:	454c      	cmp	r4, r9
 800ee84:	d206      	bcs.n	800ee94 <__hexnan+0x64>
 800ee86:	2d07      	cmp	r5, #7
 800ee88:	dc04      	bgt.n	800ee94 <__hexnan+0x64>
 800ee8a:	462a      	mov	r2, r5
 800ee8c:	4649      	mov	r1, r9
 800ee8e:	4620      	mov	r0, r4
 800ee90:	f7ff ffa8 	bl	800ede4 <L_shift>
 800ee94:	4544      	cmp	r4, r8
 800ee96:	d950      	bls.n	800ef3a <__hexnan+0x10a>
 800ee98:	2300      	movs	r3, #0
 800ee9a:	f1a4 0904 	sub.w	r9, r4, #4
 800ee9e:	f844 3c04 	str.w	r3, [r4, #-4]
 800eea2:	f8cd b008 	str.w	fp, [sp, #8]
 800eea6:	464c      	mov	r4, r9
 800eea8:	461d      	mov	r5, r3
 800eeaa:	9a03      	ldr	r2, [sp, #12]
 800eeac:	e7d7      	b.n	800ee5e <__hexnan+0x2e>
 800eeae:	2929      	cmp	r1, #41	; 0x29
 800eeb0:	d156      	bne.n	800ef60 <__hexnan+0x130>
 800eeb2:	3202      	adds	r2, #2
 800eeb4:	f8ca 2000 	str.w	r2, [sl]
 800eeb8:	f1bb 0f00 	cmp.w	fp, #0
 800eebc:	d050      	beq.n	800ef60 <__hexnan+0x130>
 800eebe:	454c      	cmp	r4, r9
 800eec0:	d206      	bcs.n	800eed0 <__hexnan+0xa0>
 800eec2:	2d07      	cmp	r5, #7
 800eec4:	dc04      	bgt.n	800eed0 <__hexnan+0xa0>
 800eec6:	462a      	mov	r2, r5
 800eec8:	4649      	mov	r1, r9
 800eeca:	4620      	mov	r0, r4
 800eecc:	f7ff ff8a 	bl	800ede4 <L_shift>
 800eed0:	4544      	cmp	r4, r8
 800eed2:	d934      	bls.n	800ef3e <__hexnan+0x10e>
 800eed4:	f1a8 0204 	sub.w	r2, r8, #4
 800eed8:	4623      	mov	r3, r4
 800eeda:	f853 1b04 	ldr.w	r1, [r3], #4
 800eede:	f842 1f04 	str.w	r1, [r2, #4]!
 800eee2:	429f      	cmp	r7, r3
 800eee4:	d2f9      	bcs.n	800eeda <__hexnan+0xaa>
 800eee6:	1b3b      	subs	r3, r7, r4
 800eee8:	f023 0303 	bic.w	r3, r3, #3
 800eeec:	3304      	adds	r3, #4
 800eeee:	3401      	adds	r4, #1
 800eef0:	3e03      	subs	r6, #3
 800eef2:	42b4      	cmp	r4, r6
 800eef4:	bf88      	it	hi
 800eef6:	2304      	movhi	r3, #4
 800eef8:	4443      	add	r3, r8
 800eefa:	2200      	movs	r2, #0
 800eefc:	f843 2b04 	str.w	r2, [r3], #4
 800ef00:	429f      	cmp	r7, r3
 800ef02:	d2fb      	bcs.n	800eefc <__hexnan+0xcc>
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	b91b      	cbnz	r3, 800ef10 <__hexnan+0xe0>
 800ef08:	4547      	cmp	r7, r8
 800ef0a:	d127      	bne.n	800ef5c <__hexnan+0x12c>
 800ef0c:	2301      	movs	r3, #1
 800ef0e:	603b      	str	r3, [r7, #0]
 800ef10:	2005      	movs	r0, #5
 800ef12:	e026      	b.n	800ef62 <__hexnan+0x132>
 800ef14:	3501      	adds	r5, #1
 800ef16:	2d08      	cmp	r5, #8
 800ef18:	f10b 0b01 	add.w	fp, fp, #1
 800ef1c:	dd06      	ble.n	800ef2c <__hexnan+0xfc>
 800ef1e:	4544      	cmp	r4, r8
 800ef20:	d9c3      	bls.n	800eeaa <__hexnan+0x7a>
 800ef22:	2300      	movs	r3, #0
 800ef24:	f844 3c04 	str.w	r3, [r4, #-4]
 800ef28:	2501      	movs	r5, #1
 800ef2a:	3c04      	subs	r4, #4
 800ef2c:	6822      	ldr	r2, [r4, #0]
 800ef2e:	f000 000f 	and.w	r0, r0, #15
 800ef32:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ef36:	6022      	str	r2, [r4, #0]
 800ef38:	e7b7      	b.n	800eeaa <__hexnan+0x7a>
 800ef3a:	2508      	movs	r5, #8
 800ef3c:	e7b5      	b.n	800eeaa <__hexnan+0x7a>
 800ef3e:	9b01      	ldr	r3, [sp, #4]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d0df      	beq.n	800ef04 <__hexnan+0xd4>
 800ef44:	f04f 32ff 	mov.w	r2, #4294967295
 800ef48:	f1c3 0320 	rsb	r3, r3, #32
 800ef4c:	fa22 f303 	lsr.w	r3, r2, r3
 800ef50:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ef54:	401a      	ands	r2, r3
 800ef56:	f846 2c04 	str.w	r2, [r6, #-4]
 800ef5a:	e7d3      	b.n	800ef04 <__hexnan+0xd4>
 800ef5c:	3f04      	subs	r7, #4
 800ef5e:	e7d1      	b.n	800ef04 <__hexnan+0xd4>
 800ef60:	2004      	movs	r0, #4
 800ef62:	b007      	add	sp, #28
 800ef64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ef68 <_localeconv_r>:
 800ef68:	4800      	ldr	r0, [pc, #0]	; (800ef6c <_localeconv_r+0x4>)
 800ef6a:	4770      	bx	lr
 800ef6c:	20000200 	.word	0x20000200

0800ef70 <_lseek_r>:
 800ef70:	b538      	push	{r3, r4, r5, lr}
 800ef72:	4d07      	ldr	r5, [pc, #28]	; (800ef90 <_lseek_r+0x20>)
 800ef74:	4604      	mov	r4, r0
 800ef76:	4608      	mov	r0, r1
 800ef78:	4611      	mov	r1, r2
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	602a      	str	r2, [r5, #0]
 800ef7e:	461a      	mov	r2, r3
 800ef80:	f7f4 f880 	bl	8003084 <_lseek>
 800ef84:	1c43      	adds	r3, r0, #1
 800ef86:	d102      	bne.n	800ef8e <_lseek_r+0x1e>
 800ef88:	682b      	ldr	r3, [r5, #0]
 800ef8a:	b103      	cbz	r3, 800ef8e <_lseek_r+0x1e>
 800ef8c:	6023      	str	r3, [r4, #0]
 800ef8e:	bd38      	pop	{r3, r4, r5, pc}
 800ef90:	20008cd4 	.word	0x20008cd4

0800ef94 <malloc>:
 800ef94:	4b02      	ldr	r3, [pc, #8]	; (800efa0 <malloc+0xc>)
 800ef96:	4601      	mov	r1, r0
 800ef98:	6818      	ldr	r0, [r3, #0]
 800ef9a:	f7fc be95 	b.w	800bcc8 <_malloc_r>
 800ef9e:	bf00      	nop
 800efa0:	200000a8 	.word	0x200000a8

0800efa4 <__ascii_mbtowc>:
 800efa4:	b082      	sub	sp, #8
 800efa6:	b901      	cbnz	r1, 800efaa <__ascii_mbtowc+0x6>
 800efa8:	a901      	add	r1, sp, #4
 800efaa:	b142      	cbz	r2, 800efbe <__ascii_mbtowc+0x1a>
 800efac:	b14b      	cbz	r3, 800efc2 <__ascii_mbtowc+0x1e>
 800efae:	7813      	ldrb	r3, [r2, #0]
 800efb0:	600b      	str	r3, [r1, #0]
 800efb2:	7812      	ldrb	r2, [r2, #0]
 800efb4:	1e10      	subs	r0, r2, #0
 800efb6:	bf18      	it	ne
 800efb8:	2001      	movne	r0, #1
 800efba:	b002      	add	sp, #8
 800efbc:	4770      	bx	lr
 800efbe:	4610      	mov	r0, r2
 800efc0:	e7fb      	b.n	800efba <__ascii_mbtowc+0x16>
 800efc2:	f06f 0001 	mvn.w	r0, #1
 800efc6:	e7f8      	b.n	800efba <__ascii_mbtowc+0x16>

0800efc8 <__malloc_lock>:
 800efc8:	4801      	ldr	r0, [pc, #4]	; (800efd0 <__malloc_lock+0x8>)
 800efca:	f7fc be44 	b.w	800bc56 <__retarget_lock_acquire_recursive>
 800efce:	bf00      	nop
 800efd0:	20008cc8 	.word	0x20008cc8

0800efd4 <__malloc_unlock>:
 800efd4:	4801      	ldr	r0, [pc, #4]	; (800efdc <__malloc_unlock+0x8>)
 800efd6:	f7fc be3f 	b.w	800bc58 <__retarget_lock_release_recursive>
 800efda:	bf00      	nop
 800efdc:	20008cc8 	.word	0x20008cc8

0800efe0 <_Balloc>:
 800efe0:	b570      	push	{r4, r5, r6, lr}
 800efe2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800efe4:	4604      	mov	r4, r0
 800efe6:	460d      	mov	r5, r1
 800efe8:	b976      	cbnz	r6, 800f008 <_Balloc+0x28>
 800efea:	2010      	movs	r0, #16
 800efec:	f7ff ffd2 	bl	800ef94 <malloc>
 800eff0:	4602      	mov	r2, r0
 800eff2:	6260      	str	r0, [r4, #36]	; 0x24
 800eff4:	b920      	cbnz	r0, 800f000 <_Balloc+0x20>
 800eff6:	4b18      	ldr	r3, [pc, #96]	; (800f058 <_Balloc+0x78>)
 800eff8:	4818      	ldr	r0, [pc, #96]	; (800f05c <_Balloc+0x7c>)
 800effa:	2166      	movs	r1, #102	; 0x66
 800effc:	f000 feae 	bl	800fd5c <__assert_func>
 800f000:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f004:	6006      	str	r6, [r0, #0]
 800f006:	60c6      	str	r6, [r0, #12]
 800f008:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f00a:	68f3      	ldr	r3, [r6, #12]
 800f00c:	b183      	cbz	r3, 800f030 <_Balloc+0x50>
 800f00e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f010:	68db      	ldr	r3, [r3, #12]
 800f012:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f016:	b9b8      	cbnz	r0, 800f048 <_Balloc+0x68>
 800f018:	2101      	movs	r1, #1
 800f01a:	fa01 f605 	lsl.w	r6, r1, r5
 800f01e:	1d72      	adds	r2, r6, #5
 800f020:	0092      	lsls	r2, r2, #2
 800f022:	4620      	mov	r0, r4
 800f024:	f000 fc9d 	bl	800f962 <_calloc_r>
 800f028:	b160      	cbz	r0, 800f044 <_Balloc+0x64>
 800f02a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f02e:	e00e      	b.n	800f04e <_Balloc+0x6e>
 800f030:	2221      	movs	r2, #33	; 0x21
 800f032:	2104      	movs	r1, #4
 800f034:	4620      	mov	r0, r4
 800f036:	f000 fc94 	bl	800f962 <_calloc_r>
 800f03a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f03c:	60f0      	str	r0, [r6, #12]
 800f03e:	68db      	ldr	r3, [r3, #12]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d1e4      	bne.n	800f00e <_Balloc+0x2e>
 800f044:	2000      	movs	r0, #0
 800f046:	bd70      	pop	{r4, r5, r6, pc}
 800f048:	6802      	ldr	r2, [r0, #0]
 800f04a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f04e:	2300      	movs	r3, #0
 800f050:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f054:	e7f7      	b.n	800f046 <_Balloc+0x66>
 800f056:	bf00      	nop
 800f058:	080121ae 	.word	0x080121ae
 800f05c:	080122ac 	.word	0x080122ac

0800f060 <_Bfree>:
 800f060:	b570      	push	{r4, r5, r6, lr}
 800f062:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f064:	4605      	mov	r5, r0
 800f066:	460c      	mov	r4, r1
 800f068:	b976      	cbnz	r6, 800f088 <_Bfree+0x28>
 800f06a:	2010      	movs	r0, #16
 800f06c:	f7ff ff92 	bl	800ef94 <malloc>
 800f070:	4602      	mov	r2, r0
 800f072:	6268      	str	r0, [r5, #36]	; 0x24
 800f074:	b920      	cbnz	r0, 800f080 <_Bfree+0x20>
 800f076:	4b09      	ldr	r3, [pc, #36]	; (800f09c <_Bfree+0x3c>)
 800f078:	4809      	ldr	r0, [pc, #36]	; (800f0a0 <_Bfree+0x40>)
 800f07a:	218a      	movs	r1, #138	; 0x8a
 800f07c:	f000 fe6e 	bl	800fd5c <__assert_func>
 800f080:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f084:	6006      	str	r6, [r0, #0]
 800f086:	60c6      	str	r6, [r0, #12]
 800f088:	b13c      	cbz	r4, 800f09a <_Bfree+0x3a>
 800f08a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f08c:	6862      	ldr	r2, [r4, #4]
 800f08e:	68db      	ldr	r3, [r3, #12]
 800f090:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f094:	6021      	str	r1, [r4, #0]
 800f096:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f09a:	bd70      	pop	{r4, r5, r6, pc}
 800f09c:	080121ae 	.word	0x080121ae
 800f0a0:	080122ac 	.word	0x080122ac

0800f0a4 <__multadd>:
 800f0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0a8:	690d      	ldr	r5, [r1, #16]
 800f0aa:	4607      	mov	r7, r0
 800f0ac:	460c      	mov	r4, r1
 800f0ae:	461e      	mov	r6, r3
 800f0b0:	f101 0c14 	add.w	ip, r1, #20
 800f0b4:	2000      	movs	r0, #0
 800f0b6:	f8dc 3000 	ldr.w	r3, [ip]
 800f0ba:	b299      	uxth	r1, r3
 800f0bc:	fb02 6101 	mla	r1, r2, r1, r6
 800f0c0:	0c1e      	lsrs	r6, r3, #16
 800f0c2:	0c0b      	lsrs	r3, r1, #16
 800f0c4:	fb02 3306 	mla	r3, r2, r6, r3
 800f0c8:	b289      	uxth	r1, r1
 800f0ca:	3001      	adds	r0, #1
 800f0cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f0d0:	4285      	cmp	r5, r0
 800f0d2:	f84c 1b04 	str.w	r1, [ip], #4
 800f0d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f0da:	dcec      	bgt.n	800f0b6 <__multadd+0x12>
 800f0dc:	b30e      	cbz	r6, 800f122 <__multadd+0x7e>
 800f0de:	68a3      	ldr	r3, [r4, #8]
 800f0e0:	42ab      	cmp	r3, r5
 800f0e2:	dc19      	bgt.n	800f118 <__multadd+0x74>
 800f0e4:	6861      	ldr	r1, [r4, #4]
 800f0e6:	4638      	mov	r0, r7
 800f0e8:	3101      	adds	r1, #1
 800f0ea:	f7ff ff79 	bl	800efe0 <_Balloc>
 800f0ee:	4680      	mov	r8, r0
 800f0f0:	b928      	cbnz	r0, 800f0fe <__multadd+0x5a>
 800f0f2:	4602      	mov	r2, r0
 800f0f4:	4b0c      	ldr	r3, [pc, #48]	; (800f128 <__multadd+0x84>)
 800f0f6:	480d      	ldr	r0, [pc, #52]	; (800f12c <__multadd+0x88>)
 800f0f8:	21b5      	movs	r1, #181	; 0xb5
 800f0fa:	f000 fe2f 	bl	800fd5c <__assert_func>
 800f0fe:	6922      	ldr	r2, [r4, #16]
 800f100:	3202      	adds	r2, #2
 800f102:	f104 010c 	add.w	r1, r4, #12
 800f106:	0092      	lsls	r2, r2, #2
 800f108:	300c      	adds	r0, #12
 800f10a:	f7fc fda6 	bl	800bc5a <memcpy>
 800f10e:	4621      	mov	r1, r4
 800f110:	4638      	mov	r0, r7
 800f112:	f7ff ffa5 	bl	800f060 <_Bfree>
 800f116:	4644      	mov	r4, r8
 800f118:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f11c:	3501      	adds	r5, #1
 800f11e:	615e      	str	r6, [r3, #20]
 800f120:	6125      	str	r5, [r4, #16]
 800f122:	4620      	mov	r0, r4
 800f124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f128:	08012220 	.word	0x08012220
 800f12c:	080122ac 	.word	0x080122ac

0800f130 <__s2b>:
 800f130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f134:	460c      	mov	r4, r1
 800f136:	4615      	mov	r5, r2
 800f138:	461f      	mov	r7, r3
 800f13a:	2209      	movs	r2, #9
 800f13c:	3308      	adds	r3, #8
 800f13e:	4606      	mov	r6, r0
 800f140:	fb93 f3f2 	sdiv	r3, r3, r2
 800f144:	2100      	movs	r1, #0
 800f146:	2201      	movs	r2, #1
 800f148:	429a      	cmp	r2, r3
 800f14a:	db09      	blt.n	800f160 <__s2b+0x30>
 800f14c:	4630      	mov	r0, r6
 800f14e:	f7ff ff47 	bl	800efe0 <_Balloc>
 800f152:	b940      	cbnz	r0, 800f166 <__s2b+0x36>
 800f154:	4602      	mov	r2, r0
 800f156:	4b19      	ldr	r3, [pc, #100]	; (800f1bc <__s2b+0x8c>)
 800f158:	4819      	ldr	r0, [pc, #100]	; (800f1c0 <__s2b+0x90>)
 800f15a:	21ce      	movs	r1, #206	; 0xce
 800f15c:	f000 fdfe 	bl	800fd5c <__assert_func>
 800f160:	0052      	lsls	r2, r2, #1
 800f162:	3101      	adds	r1, #1
 800f164:	e7f0      	b.n	800f148 <__s2b+0x18>
 800f166:	9b08      	ldr	r3, [sp, #32]
 800f168:	6143      	str	r3, [r0, #20]
 800f16a:	2d09      	cmp	r5, #9
 800f16c:	f04f 0301 	mov.w	r3, #1
 800f170:	6103      	str	r3, [r0, #16]
 800f172:	dd16      	ble.n	800f1a2 <__s2b+0x72>
 800f174:	f104 0909 	add.w	r9, r4, #9
 800f178:	46c8      	mov	r8, r9
 800f17a:	442c      	add	r4, r5
 800f17c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f180:	4601      	mov	r1, r0
 800f182:	3b30      	subs	r3, #48	; 0x30
 800f184:	220a      	movs	r2, #10
 800f186:	4630      	mov	r0, r6
 800f188:	f7ff ff8c 	bl	800f0a4 <__multadd>
 800f18c:	45a0      	cmp	r8, r4
 800f18e:	d1f5      	bne.n	800f17c <__s2b+0x4c>
 800f190:	f1a5 0408 	sub.w	r4, r5, #8
 800f194:	444c      	add	r4, r9
 800f196:	1b2d      	subs	r5, r5, r4
 800f198:	1963      	adds	r3, r4, r5
 800f19a:	42bb      	cmp	r3, r7
 800f19c:	db04      	blt.n	800f1a8 <__s2b+0x78>
 800f19e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1a2:	340a      	adds	r4, #10
 800f1a4:	2509      	movs	r5, #9
 800f1a6:	e7f6      	b.n	800f196 <__s2b+0x66>
 800f1a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f1ac:	4601      	mov	r1, r0
 800f1ae:	3b30      	subs	r3, #48	; 0x30
 800f1b0:	220a      	movs	r2, #10
 800f1b2:	4630      	mov	r0, r6
 800f1b4:	f7ff ff76 	bl	800f0a4 <__multadd>
 800f1b8:	e7ee      	b.n	800f198 <__s2b+0x68>
 800f1ba:	bf00      	nop
 800f1bc:	08012220 	.word	0x08012220
 800f1c0:	080122ac 	.word	0x080122ac

0800f1c4 <__hi0bits>:
 800f1c4:	0c03      	lsrs	r3, r0, #16
 800f1c6:	041b      	lsls	r3, r3, #16
 800f1c8:	b9d3      	cbnz	r3, 800f200 <__hi0bits+0x3c>
 800f1ca:	0400      	lsls	r0, r0, #16
 800f1cc:	2310      	movs	r3, #16
 800f1ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f1d2:	bf04      	itt	eq
 800f1d4:	0200      	lsleq	r0, r0, #8
 800f1d6:	3308      	addeq	r3, #8
 800f1d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f1dc:	bf04      	itt	eq
 800f1de:	0100      	lsleq	r0, r0, #4
 800f1e0:	3304      	addeq	r3, #4
 800f1e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f1e6:	bf04      	itt	eq
 800f1e8:	0080      	lsleq	r0, r0, #2
 800f1ea:	3302      	addeq	r3, #2
 800f1ec:	2800      	cmp	r0, #0
 800f1ee:	db05      	blt.n	800f1fc <__hi0bits+0x38>
 800f1f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f1f4:	f103 0301 	add.w	r3, r3, #1
 800f1f8:	bf08      	it	eq
 800f1fa:	2320      	moveq	r3, #32
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	4770      	bx	lr
 800f200:	2300      	movs	r3, #0
 800f202:	e7e4      	b.n	800f1ce <__hi0bits+0xa>

0800f204 <__lo0bits>:
 800f204:	6803      	ldr	r3, [r0, #0]
 800f206:	f013 0207 	ands.w	r2, r3, #7
 800f20a:	4601      	mov	r1, r0
 800f20c:	d00b      	beq.n	800f226 <__lo0bits+0x22>
 800f20e:	07da      	lsls	r2, r3, #31
 800f210:	d423      	bmi.n	800f25a <__lo0bits+0x56>
 800f212:	0798      	lsls	r0, r3, #30
 800f214:	bf49      	itett	mi
 800f216:	085b      	lsrmi	r3, r3, #1
 800f218:	089b      	lsrpl	r3, r3, #2
 800f21a:	2001      	movmi	r0, #1
 800f21c:	600b      	strmi	r3, [r1, #0]
 800f21e:	bf5c      	itt	pl
 800f220:	600b      	strpl	r3, [r1, #0]
 800f222:	2002      	movpl	r0, #2
 800f224:	4770      	bx	lr
 800f226:	b298      	uxth	r0, r3
 800f228:	b9a8      	cbnz	r0, 800f256 <__lo0bits+0x52>
 800f22a:	0c1b      	lsrs	r3, r3, #16
 800f22c:	2010      	movs	r0, #16
 800f22e:	b2da      	uxtb	r2, r3
 800f230:	b90a      	cbnz	r2, 800f236 <__lo0bits+0x32>
 800f232:	3008      	adds	r0, #8
 800f234:	0a1b      	lsrs	r3, r3, #8
 800f236:	071a      	lsls	r2, r3, #28
 800f238:	bf04      	itt	eq
 800f23a:	091b      	lsreq	r3, r3, #4
 800f23c:	3004      	addeq	r0, #4
 800f23e:	079a      	lsls	r2, r3, #30
 800f240:	bf04      	itt	eq
 800f242:	089b      	lsreq	r3, r3, #2
 800f244:	3002      	addeq	r0, #2
 800f246:	07da      	lsls	r2, r3, #31
 800f248:	d403      	bmi.n	800f252 <__lo0bits+0x4e>
 800f24a:	085b      	lsrs	r3, r3, #1
 800f24c:	f100 0001 	add.w	r0, r0, #1
 800f250:	d005      	beq.n	800f25e <__lo0bits+0x5a>
 800f252:	600b      	str	r3, [r1, #0]
 800f254:	4770      	bx	lr
 800f256:	4610      	mov	r0, r2
 800f258:	e7e9      	b.n	800f22e <__lo0bits+0x2a>
 800f25a:	2000      	movs	r0, #0
 800f25c:	4770      	bx	lr
 800f25e:	2020      	movs	r0, #32
 800f260:	4770      	bx	lr
	...

0800f264 <__i2b>:
 800f264:	b510      	push	{r4, lr}
 800f266:	460c      	mov	r4, r1
 800f268:	2101      	movs	r1, #1
 800f26a:	f7ff feb9 	bl	800efe0 <_Balloc>
 800f26e:	4602      	mov	r2, r0
 800f270:	b928      	cbnz	r0, 800f27e <__i2b+0x1a>
 800f272:	4b05      	ldr	r3, [pc, #20]	; (800f288 <__i2b+0x24>)
 800f274:	4805      	ldr	r0, [pc, #20]	; (800f28c <__i2b+0x28>)
 800f276:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f27a:	f000 fd6f 	bl	800fd5c <__assert_func>
 800f27e:	2301      	movs	r3, #1
 800f280:	6144      	str	r4, [r0, #20]
 800f282:	6103      	str	r3, [r0, #16]
 800f284:	bd10      	pop	{r4, pc}
 800f286:	bf00      	nop
 800f288:	08012220 	.word	0x08012220
 800f28c:	080122ac 	.word	0x080122ac

0800f290 <__multiply>:
 800f290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f294:	4691      	mov	r9, r2
 800f296:	690a      	ldr	r2, [r1, #16]
 800f298:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f29c:	429a      	cmp	r2, r3
 800f29e:	bfb8      	it	lt
 800f2a0:	460b      	movlt	r3, r1
 800f2a2:	460c      	mov	r4, r1
 800f2a4:	bfbc      	itt	lt
 800f2a6:	464c      	movlt	r4, r9
 800f2a8:	4699      	movlt	r9, r3
 800f2aa:	6927      	ldr	r7, [r4, #16]
 800f2ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f2b0:	68a3      	ldr	r3, [r4, #8]
 800f2b2:	6861      	ldr	r1, [r4, #4]
 800f2b4:	eb07 060a 	add.w	r6, r7, sl
 800f2b8:	42b3      	cmp	r3, r6
 800f2ba:	b085      	sub	sp, #20
 800f2bc:	bfb8      	it	lt
 800f2be:	3101      	addlt	r1, #1
 800f2c0:	f7ff fe8e 	bl	800efe0 <_Balloc>
 800f2c4:	b930      	cbnz	r0, 800f2d4 <__multiply+0x44>
 800f2c6:	4602      	mov	r2, r0
 800f2c8:	4b44      	ldr	r3, [pc, #272]	; (800f3dc <__multiply+0x14c>)
 800f2ca:	4845      	ldr	r0, [pc, #276]	; (800f3e0 <__multiply+0x150>)
 800f2cc:	f240 115d 	movw	r1, #349	; 0x15d
 800f2d0:	f000 fd44 	bl	800fd5c <__assert_func>
 800f2d4:	f100 0514 	add.w	r5, r0, #20
 800f2d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f2dc:	462b      	mov	r3, r5
 800f2de:	2200      	movs	r2, #0
 800f2e0:	4543      	cmp	r3, r8
 800f2e2:	d321      	bcc.n	800f328 <__multiply+0x98>
 800f2e4:	f104 0314 	add.w	r3, r4, #20
 800f2e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f2ec:	f109 0314 	add.w	r3, r9, #20
 800f2f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f2f4:	9202      	str	r2, [sp, #8]
 800f2f6:	1b3a      	subs	r2, r7, r4
 800f2f8:	3a15      	subs	r2, #21
 800f2fa:	f022 0203 	bic.w	r2, r2, #3
 800f2fe:	3204      	adds	r2, #4
 800f300:	f104 0115 	add.w	r1, r4, #21
 800f304:	428f      	cmp	r7, r1
 800f306:	bf38      	it	cc
 800f308:	2204      	movcc	r2, #4
 800f30a:	9201      	str	r2, [sp, #4]
 800f30c:	9a02      	ldr	r2, [sp, #8]
 800f30e:	9303      	str	r3, [sp, #12]
 800f310:	429a      	cmp	r2, r3
 800f312:	d80c      	bhi.n	800f32e <__multiply+0x9e>
 800f314:	2e00      	cmp	r6, #0
 800f316:	dd03      	ble.n	800f320 <__multiply+0x90>
 800f318:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d05a      	beq.n	800f3d6 <__multiply+0x146>
 800f320:	6106      	str	r6, [r0, #16]
 800f322:	b005      	add	sp, #20
 800f324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f328:	f843 2b04 	str.w	r2, [r3], #4
 800f32c:	e7d8      	b.n	800f2e0 <__multiply+0x50>
 800f32e:	f8b3 a000 	ldrh.w	sl, [r3]
 800f332:	f1ba 0f00 	cmp.w	sl, #0
 800f336:	d024      	beq.n	800f382 <__multiply+0xf2>
 800f338:	f104 0e14 	add.w	lr, r4, #20
 800f33c:	46a9      	mov	r9, r5
 800f33e:	f04f 0c00 	mov.w	ip, #0
 800f342:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f346:	f8d9 1000 	ldr.w	r1, [r9]
 800f34a:	fa1f fb82 	uxth.w	fp, r2
 800f34e:	b289      	uxth	r1, r1
 800f350:	fb0a 110b 	mla	r1, sl, fp, r1
 800f354:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f358:	f8d9 2000 	ldr.w	r2, [r9]
 800f35c:	4461      	add	r1, ip
 800f35e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f362:	fb0a c20b 	mla	r2, sl, fp, ip
 800f366:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f36a:	b289      	uxth	r1, r1
 800f36c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f370:	4577      	cmp	r7, lr
 800f372:	f849 1b04 	str.w	r1, [r9], #4
 800f376:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f37a:	d8e2      	bhi.n	800f342 <__multiply+0xb2>
 800f37c:	9a01      	ldr	r2, [sp, #4]
 800f37e:	f845 c002 	str.w	ip, [r5, r2]
 800f382:	9a03      	ldr	r2, [sp, #12]
 800f384:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f388:	3304      	adds	r3, #4
 800f38a:	f1b9 0f00 	cmp.w	r9, #0
 800f38e:	d020      	beq.n	800f3d2 <__multiply+0x142>
 800f390:	6829      	ldr	r1, [r5, #0]
 800f392:	f104 0c14 	add.w	ip, r4, #20
 800f396:	46ae      	mov	lr, r5
 800f398:	f04f 0a00 	mov.w	sl, #0
 800f39c:	f8bc b000 	ldrh.w	fp, [ip]
 800f3a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f3a4:	fb09 220b 	mla	r2, r9, fp, r2
 800f3a8:	4492      	add	sl, r2
 800f3aa:	b289      	uxth	r1, r1
 800f3ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f3b0:	f84e 1b04 	str.w	r1, [lr], #4
 800f3b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f3b8:	f8be 1000 	ldrh.w	r1, [lr]
 800f3bc:	0c12      	lsrs	r2, r2, #16
 800f3be:	fb09 1102 	mla	r1, r9, r2, r1
 800f3c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f3c6:	4567      	cmp	r7, ip
 800f3c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f3cc:	d8e6      	bhi.n	800f39c <__multiply+0x10c>
 800f3ce:	9a01      	ldr	r2, [sp, #4]
 800f3d0:	50a9      	str	r1, [r5, r2]
 800f3d2:	3504      	adds	r5, #4
 800f3d4:	e79a      	b.n	800f30c <__multiply+0x7c>
 800f3d6:	3e01      	subs	r6, #1
 800f3d8:	e79c      	b.n	800f314 <__multiply+0x84>
 800f3da:	bf00      	nop
 800f3dc:	08012220 	.word	0x08012220
 800f3e0:	080122ac 	.word	0x080122ac

0800f3e4 <__pow5mult>:
 800f3e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3e8:	4615      	mov	r5, r2
 800f3ea:	f012 0203 	ands.w	r2, r2, #3
 800f3ee:	4606      	mov	r6, r0
 800f3f0:	460f      	mov	r7, r1
 800f3f2:	d007      	beq.n	800f404 <__pow5mult+0x20>
 800f3f4:	4c25      	ldr	r4, [pc, #148]	; (800f48c <__pow5mult+0xa8>)
 800f3f6:	3a01      	subs	r2, #1
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f3fe:	f7ff fe51 	bl	800f0a4 <__multadd>
 800f402:	4607      	mov	r7, r0
 800f404:	10ad      	asrs	r5, r5, #2
 800f406:	d03d      	beq.n	800f484 <__pow5mult+0xa0>
 800f408:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f40a:	b97c      	cbnz	r4, 800f42c <__pow5mult+0x48>
 800f40c:	2010      	movs	r0, #16
 800f40e:	f7ff fdc1 	bl	800ef94 <malloc>
 800f412:	4602      	mov	r2, r0
 800f414:	6270      	str	r0, [r6, #36]	; 0x24
 800f416:	b928      	cbnz	r0, 800f424 <__pow5mult+0x40>
 800f418:	4b1d      	ldr	r3, [pc, #116]	; (800f490 <__pow5mult+0xac>)
 800f41a:	481e      	ldr	r0, [pc, #120]	; (800f494 <__pow5mult+0xb0>)
 800f41c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f420:	f000 fc9c 	bl	800fd5c <__assert_func>
 800f424:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f428:	6004      	str	r4, [r0, #0]
 800f42a:	60c4      	str	r4, [r0, #12]
 800f42c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f430:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f434:	b94c      	cbnz	r4, 800f44a <__pow5mult+0x66>
 800f436:	f240 2171 	movw	r1, #625	; 0x271
 800f43a:	4630      	mov	r0, r6
 800f43c:	f7ff ff12 	bl	800f264 <__i2b>
 800f440:	2300      	movs	r3, #0
 800f442:	f8c8 0008 	str.w	r0, [r8, #8]
 800f446:	4604      	mov	r4, r0
 800f448:	6003      	str	r3, [r0, #0]
 800f44a:	f04f 0900 	mov.w	r9, #0
 800f44e:	07eb      	lsls	r3, r5, #31
 800f450:	d50a      	bpl.n	800f468 <__pow5mult+0x84>
 800f452:	4639      	mov	r1, r7
 800f454:	4622      	mov	r2, r4
 800f456:	4630      	mov	r0, r6
 800f458:	f7ff ff1a 	bl	800f290 <__multiply>
 800f45c:	4639      	mov	r1, r7
 800f45e:	4680      	mov	r8, r0
 800f460:	4630      	mov	r0, r6
 800f462:	f7ff fdfd 	bl	800f060 <_Bfree>
 800f466:	4647      	mov	r7, r8
 800f468:	106d      	asrs	r5, r5, #1
 800f46a:	d00b      	beq.n	800f484 <__pow5mult+0xa0>
 800f46c:	6820      	ldr	r0, [r4, #0]
 800f46e:	b938      	cbnz	r0, 800f480 <__pow5mult+0x9c>
 800f470:	4622      	mov	r2, r4
 800f472:	4621      	mov	r1, r4
 800f474:	4630      	mov	r0, r6
 800f476:	f7ff ff0b 	bl	800f290 <__multiply>
 800f47a:	6020      	str	r0, [r4, #0]
 800f47c:	f8c0 9000 	str.w	r9, [r0]
 800f480:	4604      	mov	r4, r0
 800f482:	e7e4      	b.n	800f44e <__pow5mult+0x6a>
 800f484:	4638      	mov	r0, r7
 800f486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f48a:	bf00      	nop
 800f48c:	080123f8 	.word	0x080123f8
 800f490:	080121ae 	.word	0x080121ae
 800f494:	080122ac 	.word	0x080122ac

0800f498 <__lshift>:
 800f498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f49c:	460c      	mov	r4, r1
 800f49e:	6849      	ldr	r1, [r1, #4]
 800f4a0:	6923      	ldr	r3, [r4, #16]
 800f4a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f4a6:	68a3      	ldr	r3, [r4, #8]
 800f4a8:	4607      	mov	r7, r0
 800f4aa:	4691      	mov	r9, r2
 800f4ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f4b0:	f108 0601 	add.w	r6, r8, #1
 800f4b4:	42b3      	cmp	r3, r6
 800f4b6:	db0b      	blt.n	800f4d0 <__lshift+0x38>
 800f4b8:	4638      	mov	r0, r7
 800f4ba:	f7ff fd91 	bl	800efe0 <_Balloc>
 800f4be:	4605      	mov	r5, r0
 800f4c0:	b948      	cbnz	r0, 800f4d6 <__lshift+0x3e>
 800f4c2:	4602      	mov	r2, r0
 800f4c4:	4b2a      	ldr	r3, [pc, #168]	; (800f570 <__lshift+0xd8>)
 800f4c6:	482b      	ldr	r0, [pc, #172]	; (800f574 <__lshift+0xdc>)
 800f4c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f4cc:	f000 fc46 	bl	800fd5c <__assert_func>
 800f4d0:	3101      	adds	r1, #1
 800f4d2:	005b      	lsls	r3, r3, #1
 800f4d4:	e7ee      	b.n	800f4b4 <__lshift+0x1c>
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	f100 0114 	add.w	r1, r0, #20
 800f4dc:	f100 0210 	add.w	r2, r0, #16
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	4553      	cmp	r3, sl
 800f4e4:	db37      	blt.n	800f556 <__lshift+0xbe>
 800f4e6:	6920      	ldr	r0, [r4, #16]
 800f4e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f4ec:	f104 0314 	add.w	r3, r4, #20
 800f4f0:	f019 091f 	ands.w	r9, r9, #31
 800f4f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f4f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f4fc:	d02f      	beq.n	800f55e <__lshift+0xc6>
 800f4fe:	f1c9 0e20 	rsb	lr, r9, #32
 800f502:	468a      	mov	sl, r1
 800f504:	f04f 0c00 	mov.w	ip, #0
 800f508:	681a      	ldr	r2, [r3, #0]
 800f50a:	fa02 f209 	lsl.w	r2, r2, r9
 800f50e:	ea42 020c 	orr.w	r2, r2, ip
 800f512:	f84a 2b04 	str.w	r2, [sl], #4
 800f516:	f853 2b04 	ldr.w	r2, [r3], #4
 800f51a:	4298      	cmp	r0, r3
 800f51c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f520:	d8f2      	bhi.n	800f508 <__lshift+0x70>
 800f522:	1b03      	subs	r3, r0, r4
 800f524:	3b15      	subs	r3, #21
 800f526:	f023 0303 	bic.w	r3, r3, #3
 800f52a:	3304      	adds	r3, #4
 800f52c:	f104 0215 	add.w	r2, r4, #21
 800f530:	4290      	cmp	r0, r2
 800f532:	bf38      	it	cc
 800f534:	2304      	movcc	r3, #4
 800f536:	f841 c003 	str.w	ip, [r1, r3]
 800f53a:	f1bc 0f00 	cmp.w	ip, #0
 800f53e:	d001      	beq.n	800f544 <__lshift+0xac>
 800f540:	f108 0602 	add.w	r6, r8, #2
 800f544:	3e01      	subs	r6, #1
 800f546:	4638      	mov	r0, r7
 800f548:	612e      	str	r6, [r5, #16]
 800f54a:	4621      	mov	r1, r4
 800f54c:	f7ff fd88 	bl	800f060 <_Bfree>
 800f550:	4628      	mov	r0, r5
 800f552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f556:	f842 0f04 	str.w	r0, [r2, #4]!
 800f55a:	3301      	adds	r3, #1
 800f55c:	e7c1      	b.n	800f4e2 <__lshift+0x4a>
 800f55e:	3904      	subs	r1, #4
 800f560:	f853 2b04 	ldr.w	r2, [r3], #4
 800f564:	f841 2f04 	str.w	r2, [r1, #4]!
 800f568:	4298      	cmp	r0, r3
 800f56a:	d8f9      	bhi.n	800f560 <__lshift+0xc8>
 800f56c:	e7ea      	b.n	800f544 <__lshift+0xac>
 800f56e:	bf00      	nop
 800f570:	08012220 	.word	0x08012220
 800f574:	080122ac 	.word	0x080122ac

0800f578 <__mcmp>:
 800f578:	b530      	push	{r4, r5, lr}
 800f57a:	6902      	ldr	r2, [r0, #16]
 800f57c:	690c      	ldr	r4, [r1, #16]
 800f57e:	1b12      	subs	r2, r2, r4
 800f580:	d10e      	bne.n	800f5a0 <__mcmp+0x28>
 800f582:	f100 0314 	add.w	r3, r0, #20
 800f586:	3114      	adds	r1, #20
 800f588:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f58c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f590:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f594:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f598:	42a5      	cmp	r5, r4
 800f59a:	d003      	beq.n	800f5a4 <__mcmp+0x2c>
 800f59c:	d305      	bcc.n	800f5aa <__mcmp+0x32>
 800f59e:	2201      	movs	r2, #1
 800f5a0:	4610      	mov	r0, r2
 800f5a2:	bd30      	pop	{r4, r5, pc}
 800f5a4:	4283      	cmp	r3, r0
 800f5a6:	d3f3      	bcc.n	800f590 <__mcmp+0x18>
 800f5a8:	e7fa      	b.n	800f5a0 <__mcmp+0x28>
 800f5aa:	f04f 32ff 	mov.w	r2, #4294967295
 800f5ae:	e7f7      	b.n	800f5a0 <__mcmp+0x28>

0800f5b0 <__mdiff>:
 800f5b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5b4:	460c      	mov	r4, r1
 800f5b6:	4606      	mov	r6, r0
 800f5b8:	4611      	mov	r1, r2
 800f5ba:	4620      	mov	r0, r4
 800f5bc:	4690      	mov	r8, r2
 800f5be:	f7ff ffdb 	bl	800f578 <__mcmp>
 800f5c2:	1e05      	subs	r5, r0, #0
 800f5c4:	d110      	bne.n	800f5e8 <__mdiff+0x38>
 800f5c6:	4629      	mov	r1, r5
 800f5c8:	4630      	mov	r0, r6
 800f5ca:	f7ff fd09 	bl	800efe0 <_Balloc>
 800f5ce:	b930      	cbnz	r0, 800f5de <__mdiff+0x2e>
 800f5d0:	4b3a      	ldr	r3, [pc, #232]	; (800f6bc <__mdiff+0x10c>)
 800f5d2:	4602      	mov	r2, r0
 800f5d4:	f240 2132 	movw	r1, #562	; 0x232
 800f5d8:	4839      	ldr	r0, [pc, #228]	; (800f6c0 <__mdiff+0x110>)
 800f5da:	f000 fbbf 	bl	800fd5c <__assert_func>
 800f5de:	2301      	movs	r3, #1
 800f5e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f5e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5e8:	bfa4      	itt	ge
 800f5ea:	4643      	movge	r3, r8
 800f5ec:	46a0      	movge	r8, r4
 800f5ee:	4630      	mov	r0, r6
 800f5f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f5f4:	bfa6      	itte	ge
 800f5f6:	461c      	movge	r4, r3
 800f5f8:	2500      	movge	r5, #0
 800f5fa:	2501      	movlt	r5, #1
 800f5fc:	f7ff fcf0 	bl	800efe0 <_Balloc>
 800f600:	b920      	cbnz	r0, 800f60c <__mdiff+0x5c>
 800f602:	4b2e      	ldr	r3, [pc, #184]	; (800f6bc <__mdiff+0x10c>)
 800f604:	4602      	mov	r2, r0
 800f606:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f60a:	e7e5      	b.n	800f5d8 <__mdiff+0x28>
 800f60c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f610:	6926      	ldr	r6, [r4, #16]
 800f612:	60c5      	str	r5, [r0, #12]
 800f614:	f104 0914 	add.w	r9, r4, #20
 800f618:	f108 0514 	add.w	r5, r8, #20
 800f61c:	f100 0e14 	add.w	lr, r0, #20
 800f620:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f624:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f628:	f108 0210 	add.w	r2, r8, #16
 800f62c:	46f2      	mov	sl, lr
 800f62e:	2100      	movs	r1, #0
 800f630:	f859 3b04 	ldr.w	r3, [r9], #4
 800f634:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f638:	fa1f f883 	uxth.w	r8, r3
 800f63c:	fa11 f18b 	uxtah	r1, r1, fp
 800f640:	0c1b      	lsrs	r3, r3, #16
 800f642:	eba1 0808 	sub.w	r8, r1, r8
 800f646:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f64a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f64e:	fa1f f888 	uxth.w	r8, r8
 800f652:	1419      	asrs	r1, r3, #16
 800f654:	454e      	cmp	r6, r9
 800f656:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f65a:	f84a 3b04 	str.w	r3, [sl], #4
 800f65e:	d8e7      	bhi.n	800f630 <__mdiff+0x80>
 800f660:	1b33      	subs	r3, r6, r4
 800f662:	3b15      	subs	r3, #21
 800f664:	f023 0303 	bic.w	r3, r3, #3
 800f668:	3304      	adds	r3, #4
 800f66a:	3415      	adds	r4, #21
 800f66c:	42a6      	cmp	r6, r4
 800f66e:	bf38      	it	cc
 800f670:	2304      	movcc	r3, #4
 800f672:	441d      	add	r5, r3
 800f674:	4473      	add	r3, lr
 800f676:	469e      	mov	lr, r3
 800f678:	462e      	mov	r6, r5
 800f67a:	4566      	cmp	r6, ip
 800f67c:	d30e      	bcc.n	800f69c <__mdiff+0xec>
 800f67e:	f10c 0203 	add.w	r2, ip, #3
 800f682:	1b52      	subs	r2, r2, r5
 800f684:	f022 0203 	bic.w	r2, r2, #3
 800f688:	3d03      	subs	r5, #3
 800f68a:	45ac      	cmp	ip, r5
 800f68c:	bf38      	it	cc
 800f68e:	2200      	movcc	r2, #0
 800f690:	441a      	add	r2, r3
 800f692:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f696:	b17b      	cbz	r3, 800f6b8 <__mdiff+0x108>
 800f698:	6107      	str	r7, [r0, #16]
 800f69a:	e7a3      	b.n	800f5e4 <__mdiff+0x34>
 800f69c:	f856 8b04 	ldr.w	r8, [r6], #4
 800f6a0:	fa11 f288 	uxtah	r2, r1, r8
 800f6a4:	1414      	asrs	r4, r2, #16
 800f6a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f6aa:	b292      	uxth	r2, r2
 800f6ac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f6b0:	f84e 2b04 	str.w	r2, [lr], #4
 800f6b4:	1421      	asrs	r1, r4, #16
 800f6b6:	e7e0      	b.n	800f67a <__mdiff+0xca>
 800f6b8:	3f01      	subs	r7, #1
 800f6ba:	e7ea      	b.n	800f692 <__mdiff+0xe2>
 800f6bc:	08012220 	.word	0x08012220
 800f6c0:	080122ac 	.word	0x080122ac

0800f6c4 <__ulp>:
 800f6c4:	b082      	sub	sp, #8
 800f6c6:	ed8d 0b00 	vstr	d0, [sp]
 800f6ca:	9b01      	ldr	r3, [sp, #4]
 800f6cc:	4912      	ldr	r1, [pc, #72]	; (800f718 <__ulp+0x54>)
 800f6ce:	4019      	ands	r1, r3
 800f6d0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f6d4:	2900      	cmp	r1, #0
 800f6d6:	dd05      	ble.n	800f6e4 <__ulp+0x20>
 800f6d8:	2200      	movs	r2, #0
 800f6da:	460b      	mov	r3, r1
 800f6dc:	ec43 2b10 	vmov	d0, r2, r3
 800f6e0:	b002      	add	sp, #8
 800f6e2:	4770      	bx	lr
 800f6e4:	4249      	negs	r1, r1
 800f6e6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f6ea:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f6ee:	f04f 0200 	mov.w	r2, #0
 800f6f2:	f04f 0300 	mov.w	r3, #0
 800f6f6:	da04      	bge.n	800f702 <__ulp+0x3e>
 800f6f8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f6fc:	fa41 f300 	asr.w	r3, r1, r0
 800f700:	e7ec      	b.n	800f6dc <__ulp+0x18>
 800f702:	f1a0 0114 	sub.w	r1, r0, #20
 800f706:	291e      	cmp	r1, #30
 800f708:	bfda      	itte	le
 800f70a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f70e:	fa20 f101 	lsrle.w	r1, r0, r1
 800f712:	2101      	movgt	r1, #1
 800f714:	460a      	mov	r2, r1
 800f716:	e7e1      	b.n	800f6dc <__ulp+0x18>
 800f718:	7ff00000 	.word	0x7ff00000

0800f71c <__b2d>:
 800f71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f71e:	6905      	ldr	r5, [r0, #16]
 800f720:	f100 0714 	add.w	r7, r0, #20
 800f724:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f728:	1f2e      	subs	r6, r5, #4
 800f72a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f72e:	4620      	mov	r0, r4
 800f730:	f7ff fd48 	bl	800f1c4 <__hi0bits>
 800f734:	f1c0 0320 	rsb	r3, r0, #32
 800f738:	280a      	cmp	r0, #10
 800f73a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f7b8 <__b2d+0x9c>
 800f73e:	600b      	str	r3, [r1, #0]
 800f740:	dc14      	bgt.n	800f76c <__b2d+0x50>
 800f742:	f1c0 0e0b 	rsb	lr, r0, #11
 800f746:	fa24 f10e 	lsr.w	r1, r4, lr
 800f74a:	42b7      	cmp	r7, r6
 800f74c:	ea41 030c 	orr.w	r3, r1, ip
 800f750:	bf34      	ite	cc
 800f752:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f756:	2100      	movcs	r1, #0
 800f758:	3015      	adds	r0, #21
 800f75a:	fa04 f000 	lsl.w	r0, r4, r0
 800f75e:	fa21 f10e 	lsr.w	r1, r1, lr
 800f762:	ea40 0201 	orr.w	r2, r0, r1
 800f766:	ec43 2b10 	vmov	d0, r2, r3
 800f76a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f76c:	42b7      	cmp	r7, r6
 800f76e:	bf3a      	itte	cc
 800f770:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f774:	f1a5 0608 	subcc.w	r6, r5, #8
 800f778:	2100      	movcs	r1, #0
 800f77a:	380b      	subs	r0, #11
 800f77c:	d017      	beq.n	800f7ae <__b2d+0x92>
 800f77e:	f1c0 0c20 	rsb	ip, r0, #32
 800f782:	fa04 f500 	lsl.w	r5, r4, r0
 800f786:	42be      	cmp	r6, r7
 800f788:	fa21 f40c 	lsr.w	r4, r1, ip
 800f78c:	ea45 0504 	orr.w	r5, r5, r4
 800f790:	bf8c      	ite	hi
 800f792:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f796:	2400      	movls	r4, #0
 800f798:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f79c:	fa01 f000 	lsl.w	r0, r1, r0
 800f7a0:	fa24 f40c 	lsr.w	r4, r4, ip
 800f7a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f7a8:	ea40 0204 	orr.w	r2, r0, r4
 800f7ac:	e7db      	b.n	800f766 <__b2d+0x4a>
 800f7ae:	ea44 030c 	orr.w	r3, r4, ip
 800f7b2:	460a      	mov	r2, r1
 800f7b4:	e7d7      	b.n	800f766 <__b2d+0x4a>
 800f7b6:	bf00      	nop
 800f7b8:	3ff00000 	.word	0x3ff00000

0800f7bc <__d2b>:
 800f7bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f7c0:	4689      	mov	r9, r1
 800f7c2:	2101      	movs	r1, #1
 800f7c4:	ec57 6b10 	vmov	r6, r7, d0
 800f7c8:	4690      	mov	r8, r2
 800f7ca:	f7ff fc09 	bl	800efe0 <_Balloc>
 800f7ce:	4604      	mov	r4, r0
 800f7d0:	b930      	cbnz	r0, 800f7e0 <__d2b+0x24>
 800f7d2:	4602      	mov	r2, r0
 800f7d4:	4b25      	ldr	r3, [pc, #148]	; (800f86c <__d2b+0xb0>)
 800f7d6:	4826      	ldr	r0, [pc, #152]	; (800f870 <__d2b+0xb4>)
 800f7d8:	f240 310a 	movw	r1, #778	; 0x30a
 800f7dc:	f000 fabe 	bl	800fd5c <__assert_func>
 800f7e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f7e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f7e8:	bb35      	cbnz	r5, 800f838 <__d2b+0x7c>
 800f7ea:	2e00      	cmp	r6, #0
 800f7ec:	9301      	str	r3, [sp, #4]
 800f7ee:	d028      	beq.n	800f842 <__d2b+0x86>
 800f7f0:	4668      	mov	r0, sp
 800f7f2:	9600      	str	r6, [sp, #0]
 800f7f4:	f7ff fd06 	bl	800f204 <__lo0bits>
 800f7f8:	9900      	ldr	r1, [sp, #0]
 800f7fa:	b300      	cbz	r0, 800f83e <__d2b+0x82>
 800f7fc:	9a01      	ldr	r2, [sp, #4]
 800f7fe:	f1c0 0320 	rsb	r3, r0, #32
 800f802:	fa02 f303 	lsl.w	r3, r2, r3
 800f806:	430b      	orrs	r3, r1
 800f808:	40c2      	lsrs	r2, r0
 800f80a:	6163      	str	r3, [r4, #20]
 800f80c:	9201      	str	r2, [sp, #4]
 800f80e:	9b01      	ldr	r3, [sp, #4]
 800f810:	61a3      	str	r3, [r4, #24]
 800f812:	2b00      	cmp	r3, #0
 800f814:	bf14      	ite	ne
 800f816:	2202      	movne	r2, #2
 800f818:	2201      	moveq	r2, #1
 800f81a:	6122      	str	r2, [r4, #16]
 800f81c:	b1d5      	cbz	r5, 800f854 <__d2b+0x98>
 800f81e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f822:	4405      	add	r5, r0
 800f824:	f8c9 5000 	str.w	r5, [r9]
 800f828:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f82c:	f8c8 0000 	str.w	r0, [r8]
 800f830:	4620      	mov	r0, r4
 800f832:	b003      	add	sp, #12
 800f834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f83c:	e7d5      	b.n	800f7ea <__d2b+0x2e>
 800f83e:	6161      	str	r1, [r4, #20]
 800f840:	e7e5      	b.n	800f80e <__d2b+0x52>
 800f842:	a801      	add	r0, sp, #4
 800f844:	f7ff fcde 	bl	800f204 <__lo0bits>
 800f848:	9b01      	ldr	r3, [sp, #4]
 800f84a:	6163      	str	r3, [r4, #20]
 800f84c:	2201      	movs	r2, #1
 800f84e:	6122      	str	r2, [r4, #16]
 800f850:	3020      	adds	r0, #32
 800f852:	e7e3      	b.n	800f81c <__d2b+0x60>
 800f854:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f858:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f85c:	f8c9 0000 	str.w	r0, [r9]
 800f860:	6918      	ldr	r0, [r3, #16]
 800f862:	f7ff fcaf 	bl	800f1c4 <__hi0bits>
 800f866:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f86a:	e7df      	b.n	800f82c <__d2b+0x70>
 800f86c:	08012220 	.word	0x08012220
 800f870:	080122ac 	.word	0x080122ac

0800f874 <__ratio>:
 800f874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f878:	4688      	mov	r8, r1
 800f87a:	4669      	mov	r1, sp
 800f87c:	4681      	mov	r9, r0
 800f87e:	f7ff ff4d 	bl	800f71c <__b2d>
 800f882:	a901      	add	r1, sp, #4
 800f884:	4640      	mov	r0, r8
 800f886:	ec55 4b10 	vmov	r4, r5, d0
 800f88a:	f7ff ff47 	bl	800f71c <__b2d>
 800f88e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f892:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f896:	eba3 0c02 	sub.w	ip, r3, r2
 800f89a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f89e:	1a9b      	subs	r3, r3, r2
 800f8a0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f8a4:	ec51 0b10 	vmov	r0, r1, d0
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	bfd6      	itet	le
 800f8ac:	460a      	movle	r2, r1
 800f8ae:	462a      	movgt	r2, r5
 800f8b0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f8b4:	468b      	mov	fp, r1
 800f8b6:	462f      	mov	r7, r5
 800f8b8:	bfd4      	ite	le
 800f8ba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f8be:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f8c2:	4620      	mov	r0, r4
 800f8c4:	ee10 2a10 	vmov	r2, s0
 800f8c8:	465b      	mov	r3, fp
 800f8ca:	4639      	mov	r1, r7
 800f8cc:	f7f0 ffce 	bl	800086c <__aeabi_ddiv>
 800f8d0:	ec41 0b10 	vmov	d0, r0, r1
 800f8d4:	b003      	add	sp, #12
 800f8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f8da <__copybits>:
 800f8da:	3901      	subs	r1, #1
 800f8dc:	b570      	push	{r4, r5, r6, lr}
 800f8de:	1149      	asrs	r1, r1, #5
 800f8e0:	6914      	ldr	r4, [r2, #16]
 800f8e2:	3101      	adds	r1, #1
 800f8e4:	f102 0314 	add.w	r3, r2, #20
 800f8e8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f8ec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f8f0:	1f05      	subs	r5, r0, #4
 800f8f2:	42a3      	cmp	r3, r4
 800f8f4:	d30c      	bcc.n	800f910 <__copybits+0x36>
 800f8f6:	1aa3      	subs	r3, r4, r2
 800f8f8:	3b11      	subs	r3, #17
 800f8fa:	f023 0303 	bic.w	r3, r3, #3
 800f8fe:	3211      	adds	r2, #17
 800f900:	42a2      	cmp	r2, r4
 800f902:	bf88      	it	hi
 800f904:	2300      	movhi	r3, #0
 800f906:	4418      	add	r0, r3
 800f908:	2300      	movs	r3, #0
 800f90a:	4288      	cmp	r0, r1
 800f90c:	d305      	bcc.n	800f91a <__copybits+0x40>
 800f90e:	bd70      	pop	{r4, r5, r6, pc}
 800f910:	f853 6b04 	ldr.w	r6, [r3], #4
 800f914:	f845 6f04 	str.w	r6, [r5, #4]!
 800f918:	e7eb      	b.n	800f8f2 <__copybits+0x18>
 800f91a:	f840 3b04 	str.w	r3, [r0], #4
 800f91e:	e7f4      	b.n	800f90a <__copybits+0x30>

0800f920 <__any_on>:
 800f920:	f100 0214 	add.w	r2, r0, #20
 800f924:	6900      	ldr	r0, [r0, #16]
 800f926:	114b      	asrs	r3, r1, #5
 800f928:	4298      	cmp	r0, r3
 800f92a:	b510      	push	{r4, lr}
 800f92c:	db11      	blt.n	800f952 <__any_on+0x32>
 800f92e:	dd0a      	ble.n	800f946 <__any_on+0x26>
 800f930:	f011 011f 	ands.w	r1, r1, #31
 800f934:	d007      	beq.n	800f946 <__any_on+0x26>
 800f936:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f93a:	fa24 f001 	lsr.w	r0, r4, r1
 800f93e:	fa00 f101 	lsl.w	r1, r0, r1
 800f942:	428c      	cmp	r4, r1
 800f944:	d10b      	bne.n	800f95e <__any_on+0x3e>
 800f946:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f94a:	4293      	cmp	r3, r2
 800f94c:	d803      	bhi.n	800f956 <__any_on+0x36>
 800f94e:	2000      	movs	r0, #0
 800f950:	bd10      	pop	{r4, pc}
 800f952:	4603      	mov	r3, r0
 800f954:	e7f7      	b.n	800f946 <__any_on+0x26>
 800f956:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f95a:	2900      	cmp	r1, #0
 800f95c:	d0f5      	beq.n	800f94a <__any_on+0x2a>
 800f95e:	2001      	movs	r0, #1
 800f960:	e7f6      	b.n	800f950 <__any_on+0x30>

0800f962 <_calloc_r>:
 800f962:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f964:	fba1 2402 	umull	r2, r4, r1, r2
 800f968:	b94c      	cbnz	r4, 800f97e <_calloc_r+0x1c>
 800f96a:	4611      	mov	r1, r2
 800f96c:	9201      	str	r2, [sp, #4]
 800f96e:	f7fc f9ab 	bl	800bcc8 <_malloc_r>
 800f972:	9a01      	ldr	r2, [sp, #4]
 800f974:	4605      	mov	r5, r0
 800f976:	b930      	cbnz	r0, 800f986 <_calloc_r+0x24>
 800f978:	4628      	mov	r0, r5
 800f97a:	b003      	add	sp, #12
 800f97c:	bd30      	pop	{r4, r5, pc}
 800f97e:	220c      	movs	r2, #12
 800f980:	6002      	str	r2, [r0, #0]
 800f982:	2500      	movs	r5, #0
 800f984:	e7f8      	b.n	800f978 <_calloc_r+0x16>
 800f986:	4621      	mov	r1, r4
 800f988:	f7fc f975 	bl	800bc76 <memset>
 800f98c:	e7f4      	b.n	800f978 <_calloc_r+0x16>
	...

0800f990 <_free_r>:
 800f990:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f992:	2900      	cmp	r1, #0
 800f994:	d044      	beq.n	800fa20 <_free_r+0x90>
 800f996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f99a:	9001      	str	r0, [sp, #4]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	f1a1 0404 	sub.w	r4, r1, #4
 800f9a2:	bfb8      	it	lt
 800f9a4:	18e4      	addlt	r4, r4, r3
 800f9a6:	f7ff fb0f 	bl	800efc8 <__malloc_lock>
 800f9aa:	4a1e      	ldr	r2, [pc, #120]	; (800fa24 <_free_r+0x94>)
 800f9ac:	9801      	ldr	r0, [sp, #4]
 800f9ae:	6813      	ldr	r3, [r2, #0]
 800f9b0:	b933      	cbnz	r3, 800f9c0 <_free_r+0x30>
 800f9b2:	6063      	str	r3, [r4, #4]
 800f9b4:	6014      	str	r4, [r2, #0]
 800f9b6:	b003      	add	sp, #12
 800f9b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f9bc:	f7ff bb0a 	b.w	800efd4 <__malloc_unlock>
 800f9c0:	42a3      	cmp	r3, r4
 800f9c2:	d908      	bls.n	800f9d6 <_free_r+0x46>
 800f9c4:	6825      	ldr	r5, [r4, #0]
 800f9c6:	1961      	adds	r1, r4, r5
 800f9c8:	428b      	cmp	r3, r1
 800f9ca:	bf01      	itttt	eq
 800f9cc:	6819      	ldreq	r1, [r3, #0]
 800f9ce:	685b      	ldreq	r3, [r3, #4]
 800f9d0:	1949      	addeq	r1, r1, r5
 800f9d2:	6021      	streq	r1, [r4, #0]
 800f9d4:	e7ed      	b.n	800f9b2 <_free_r+0x22>
 800f9d6:	461a      	mov	r2, r3
 800f9d8:	685b      	ldr	r3, [r3, #4]
 800f9da:	b10b      	cbz	r3, 800f9e0 <_free_r+0x50>
 800f9dc:	42a3      	cmp	r3, r4
 800f9de:	d9fa      	bls.n	800f9d6 <_free_r+0x46>
 800f9e0:	6811      	ldr	r1, [r2, #0]
 800f9e2:	1855      	adds	r5, r2, r1
 800f9e4:	42a5      	cmp	r5, r4
 800f9e6:	d10b      	bne.n	800fa00 <_free_r+0x70>
 800f9e8:	6824      	ldr	r4, [r4, #0]
 800f9ea:	4421      	add	r1, r4
 800f9ec:	1854      	adds	r4, r2, r1
 800f9ee:	42a3      	cmp	r3, r4
 800f9f0:	6011      	str	r1, [r2, #0]
 800f9f2:	d1e0      	bne.n	800f9b6 <_free_r+0x26>
 800f9f4:	681c      	ldr	r4, [r3, #0]
 800f9f6:	685b      	ldr	r3, [r3, #4]
 800f9f8:	6053      	str	r3, [r2, #4]
 800f9fa:	4421      	add	r1, r4
 800f9fc:	6011      	str	r1, [r2, #0]
 800f9fe:	e7da      	b.n	800f9b6 <_free_r+0x26>
 800fa00:	d902      	bls.n	800fa08 <_free_r+0x78>
 800fa02:	230c      	movs	r3, #12
 800fa04:	6003      	str	r3, [r0, #0]
 800fa06:	e7d6      	b.n	800f9b6 <_free_r+0x26>
 800fa08:	6825      	ldr	r5, [r4, #0]
 800fa0a:	1961      	adds	r1, r4, r5
 800fa0c:	428b      	cmp	r3, r1
 800fa0e:	bf04      	itt	eq
 800fa10:	6819      	ldreq	r1, [r3, #0]
 800fa12:	685b      	ldreq	r3, [r3, #4]
 800fa14:	6063      	str	r3, [r4, #4]
 800fa16:	bf04      	itt	eq
 800fa18:	1949      	addeq	r1, r1, r5
 800fa1a:	6021      	streq	r1, [r4, #0]
 800fa1c:	6054      	str	r4, [r2, #4]
 800fa1e:	e7ca      	b.n	800f9b6 <_free_r+0x26>
 800fa20:	b003      	add	sp, #12
 800fa22:	bd30      	pop	{r4, r5, pc}
 800fa24:	20008ccc 	.word	0x20008ccc

0800fa28 <__ssputs_r>:
 800fa28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa2c:	688e      	ldr	r6, [r1, #8]
 800fa2e:	429e      	cmp	r6, r3
 800fa30:	4682      	mov	sl, r0
 800fa32:	460c      	mov	r4, r1
 800fa34:	4690      	mov	r8, r2
 800fa36:	461f      	mov	r7, r3
 800fa38:	d838      	bhi.n	800faac <__ssputs_r+0x84>
 800fa3a:	898a      	ldrh	r2, [r1, #12]
 800fa3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fa40:	d032      	beq.n	800faa8 <__ssputs_r+0x80>
 800fa42:	6825      	ldr	r5, [r4, #0]
 800fa44:	6909      	ldr	r1, [r1, #16]
 800fa46:	eba5 0901 	sub.w	r9, r5, r1
 800fa4a:	6965      	ldr	r5, [r4, #20]
 800fa4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fa50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fa54:	3301      	adds	r3, #1
 800fa56:	444b      	add	r3, r9
 800fa58:	106d      	asrs	r5, r5, #1
 800fa5a:	429d      	cmp	r5, r3
 800fa5c:	bf38      	it	cc
 800fa5e:	461d      	movcc	r5, r3
 800fa60:	0553      	lsls	r3, r2, #21
 800fa62:	d531      	bpl.n	800fac8 <__ssputs_r+0xa0>
 800fa64:	4629      	mov	r1, r5
 800fa66:	f7fc f92f 	bl	800bcc8 <_malloc_r>
 800fa6a:	4606      	mov	r6, r0
 800fa6c:	b950      	cbnz	r0, 800fa84 <__ssputs_r+0x5c>
 800fa6e:	230c      	movs	r3, #12
 800fa70:	f8ca 3000 	str.w	r3, [sl]
 800fa74:	89a3      	ldrh	r3, [r4, #12]
 800fa76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa7a:	81a3      	strh	r3, [r4, #12]
 800fa7c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa84:	6921      	ldr	r1, [r4, #16]
 800fa86:	464a      	mov	r2, r9
 800fa88:	f7fc f8e7 	bl	800bc5a <memcpy>
 800fa8c:	89a3      	ldrh	r3, [r4, #12]
 800fa8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fa92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa96:	81a3      	strh	r3, [r4, #12]
 800fa98:	6126      	str	r6, [r4, #16]
 800fa9a:	6165      	str	r5, [r4, #20]
 800fa9c:	444e      	add	r6, r9
 800fa9e:	eba5 0509 	sub.w	r5, r5, r9
 800faa2:	6026      	str	r6, [r4, #0]
 800faa4:	60a5      	str	r5, [r4, #8]
 800faa6:	463e      	mov	r6, r7
 800faa8:	42be      	cmp	r6, r7
 800faaa:	d900      	bls.n	800faae <__ssputs_r+0x86>
 800faac:	463e      	mov	r6, r7
 800faae:	6820      	ldr	r0, [r4, #0]
 800fab0:	4632      	mov	r2, r6
 800fab2:	4641      	mov	r1, r8
 800fab4:	f000 f982 	bl	800fdbc <memmove>
 800fab8:	68a3      	ldr	r3, [r4, #8]
 800faba:	1b9b      	subs	r3, r3, r6
 800fabc:	60a3      	str	r3, [r4, #8]
 800fabe:	6823      	ldr	r3, [r4, #0]
 800fac0:	4433      	add	r3, r6
 800fac2:	6023      	str	r3, [r4, #0]
 800fac4:	2000      	movs	r0, #0
 800fac6:	e7db      	b.n	800fa80 <__ssputs_r+0x58>
 800fac8:	462a      	mov	r2, r5
 800faca:	f000 f991 	bl	800fdf0 <_realloc_r>
 800face:	4606      	mov	r6, r0
 800fad0:	2800      	cmp	r0, #0
 800fad2:	d1e1      	bne.n	800fa98 <__ssputs_r+0x70>
 800fad4:	6921      	ldr	r1, [r4, #16]
 800fad6:	4650      	mov	r0, sl
 800fad8:	f7ff ff5a 	bl	800f990 <_free_r>
 800fadc:	e7c7      	b.n	800fa6e <__ssputs_r+0x46>
	...

0800fae0 <_svfiprintf_r>:
 800fae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fae4:	4698      	mov	r8, r3
 800fae6:	898b      	ldrh	r3, [r1, #12]
 800fae8:	061b      	lsls	r3, r3, #24
 800faea:	b09d      	sub	sp, #116	; 0x74
 800faec:	4607      	mov	r7, r0
 800faee:	460d      	mov	r5, r1
 800faf0:	4614      	mov	r4, r2
 800faf2:	d50e      	bpl.n	800fb12 <_svfiprintf_r+0x32>
 800faf4:	690b      	ldr	r3, [r1, #16]
 800faf6:	b963      	cbnz	r3, 800fb12 <_svfiprintf_r+0x32>
 800faf8:	2140      	movs	r1, #64	; 0x40
 800fafa:	f7fc f8e5 	bl	800bcc8 <_malloc_r>
 800fafe:	6028      	str	r0, [r5, #0]
 800fb00:	6128      	str	r0, [r5, #16]
 800fb02:	b920      	cbnz	r0, 800fb0e <_svfiprintf_r+0x2e>
 800fb04:	230c      	movs	r3, #12
 800fb06:	603b      	str	r3, [r7, #0]
 800fb08:	f04f 30ff 	mov.w	r0, #4294967295
 800fb0c:	e0d1      	b.n	800fcb2 <_svfiprintf_r+0x1d2>
 800fb0e:	2340      	movs	r3, #64	; 0x40
 800fb10:	616b      	str	r3, [r5, #20]
 800fb12:	2300      	movs	r3, #0
 800fb14:	9309      	str	r3, [sp, #36]	; 0x24
 800fb16:	2320      	movs	r3, #32
 800fb18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fb1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb20:	2330      	movs	r3, #48	; 0x30
 800fb22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fccc <_svfiprintf_r+0x1ec>
 800fb26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fb2a:	f04f 0901 	mov.w	r9, #1
 800fb2e:	4623      	mov	r3, r4
 800fb30:	469a      	mov	sl, r3
 800fb32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb36:	b10a      	cbz	r2, 800fb3c <_svfiprintf_r+0x5c>
 800fb38:	2a25      	cmp	r2, #37	; 0x25
 800fb3a:	d1f9      	bne.n	800fb30 <_svfiprintf_r+0x50>
 800fb3c:	ebba 0b04 	subs.w	fp, sl, r4
 800fb40:	d00b      	beq.n	800fb5a <_svfiprintf_r+0x7a>
 800fb42:	465b      	mov	r3, fp
 800fb44:	4622      	mov	r2, r4
 800fb46:	4629      	mov	r1, r5
 800fb48:	4638      	mov	r0, r7
 800fb4a:	f7ff ff6d 	bl	800fa28 <__ssputs_r>
 800fb4e:	3001      	adds	r0, #1
 800fb50:	f000 80aa 	beq.w	800fca8 <_svfiprintf_r+0x1c8>
 800fb54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb56:	445a      	add	r2, fp
 800fb58:	9209      	str	r2, [sp, #36]	; 0x24
 800fb5a:	f89a 3000 	ldrb.w	r3, [sl]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	f000 80a2 	beq.w	800fca8 <_svfiprintf_r+0x1c8>
 800fb64:	2300      	movs	r3, #0
 800fb66:	f04f 32ff 	mov.w	r2, #4294967295
 800fb6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb6e:	f10a 0a01 	add.w	sl, sl, #1
 800fb72:	9304      	str	r3, [sp, #16]
 800fb74:	9307      	str	r3, [sp, #28]
 800fb76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb7a:	931a      	str	r3, [sp, #104]	; 0x68
 800fb7c:	4654      	mov	r4, sl
 800fb7e:	2205      	movs	r2, #5
 800fb80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb84:	4851      	ldr	r0, [pc, #324]	; (800fccc <_svfiprintf_r+0x1ec>)
 800fb86:	f7f0 fb3b 	bl	8000200 <memchr>
 800fb8a:	9a04      	ldr	r2, [sp, #16]
 800fb8c:	b9d8      	cbnz	r0, 800fbc6 <_svfiprintf_r+0xe6>
 800fb8e:	06d0      	lsls	r0, r2, #27
 800fb90:	bf44      	itt	mi
 800fb92:	2320      	movmi	r3, #32
 800fb94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb98:	0711      	lsls	r1, r2, #28
 800fb9a:	bf44      	itt	mi
 800fb9c:	232b      	movmi	r3, #43	; 0x2b
 800fb9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fba2:	f89a 3000 	ldrb.w	r3, [sl]
 800fba6:	2b2a      	cmp	r3, #42	; 0x2a
 800fba8:	d015      	beq.n	800fbd6 <_svfiprintf_r+0xf6>
 800fbaa:	9a07      	ldr	r2, [sp, #28]
 800fbac:	4654      	mov	r4, sl
 800fbae:	2000      	movs	r0, #0
 800fbb0:	f04f 0c0a 	mov.w	ip, #10
 800fbb4:	4621      	mov	r1, r4
 800fbb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fbba:	3b30      	subs	r3, #48	; 0x30
 800fbbc:	2b09      	cmp	r3, #9
 800fbbe:	d94e      	bls.n	800fc5e <_svfiprintf_r+0x17e>
 800fbc0:	b1b0      	cbz	r0, 800fbf0 <_svfiprintf_r+0x110>
 800fbc2:	9207      	str	r2, [sp, #28]
 800fbc4:	e014      	b.n	800fbf0 <_svfiprintf_r+0x110>
 800fbc6:	eba0 0308 	sub.w	r3, r0, r8
 800fbca:	fa09 f303 	lsl.w	r3, r9, r3
 800fbce:	4313      	orrs	r3, r2
 800fbd0:	9304      	str	r3, [sp, #16]
 800fbd2:	46a2      	mov	sl, r4
 800fbd4:	e7d2      	b.n	800fb7c <_svfiprintf_r+0x9c>
 800fbd6:	9b03      	ldr	r3, [sp, #12]
 800fbd8:	1d19      	adds	r1, r3, #4
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	9103      	str	r1, [sp, #12]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	bfbb      	ittet	lt
 800fbe2:	425b      	neglt	r3, r3
 800fbe4:	f042 0202 	orrlt.w	r2, r2, #2
 800fbe8:	9307      	strge	r3, [sp, #28]
 800fbea:	9307      	strlt	r3, [sp, #28]
 800fbec:	bfb8      	it	lt
 800fbee:	9204      	strlt	r2, [sp, #16]
 800fbf0:	7823      	ldrb	r3, [r4, #0]
 800fbf2:	2b2e      	cmp	r3, #46	; 0x2e
 800fbf4:	d10c      	bne.n	800fc10 <_svfiprintf_r+0x130>
 800fbf6:	7863      	ldrb	r3, [r4, #1]
 800fbf8:	2b2a      	cmp	r3, #42	; 0x2a
 800fbfa:	d135      	bne.n	800fc68 <_svfiprintf_r+0x188>
 800fbfc:	9b03      	ldr	r3, [sp, #12]
 800fbfe:	1d1a      	adds	r2, r3, #4
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	9203      	str	r2, [sp, #12]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	bfb8      	it	lt
 800fc08:	f04f 33ff 	movlt.w	r3, #4294967295
 800fc0c:	3402      	adds	r4, #2
 800fc0e:	9305      	str	r3, [sp, #20]
 800fc10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fcdc <_svfiprintf_r+0x1fc>
 800fc14:	7821      	ldrb	r1, [r4, #0]
 800fc16:	2203      	movs	r2, #3
 800fc18:	4650      	mov	r0, sl
 800fc1a:	f7f0 faf1 	bl	8000200 <memchr>
 800fc1e:	b140      	cbz	r0, 800fc32 <_svfiprintf_r+0x152>
 800fc20:	2340      	movs	r3, #64	; 0x40
 800fc22:	eba0 000a 	sub.w	r0, r0, sl
 800fc26:	fa03 f000 	lsl.w	r0, r3, r0
 800fc2a:	9b04      	ldr	r3, [sp, #16]
 800fc2c:	4303      	orrs	r3, r0
 800fc2e:	3401      	adds	r4, #1
 800fc30:	9304      	str	r3, [sp, #16]
 800fc32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc36:	4826      	ldr	r0, [pc, #152]	; (800fcd0 <_svfiprintf_r+0x1f0>)
 800fc38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fc3c:	2206      	movs	r2, #6
 800fc3e:	f7f0 fadf 	bl	8000200 <memchr>
 800fc42:	2800      	cmp	r0, #0
 800fc44:	d038      	beq.n	800fcb8 <_svfiprintf_r+0x1d8>
 800fc46:	4b23      	ldr	r3, [pc, #140]	; (800fcd4 <_svfiprintf_r+0x1f4>)
 800fc48:	bb1b      	cbnz	r3, 800fc92 <_svfiprintf_r+0x1b2>
 800fc4a:	9b03      	ldr	r3, [sp, #12]
 800fc4c:	3307      	adds	r3, #7
 800fc4e:	f023 0307 	bic.w	r3, r3, #7
 800fc52:	3308      	adds	r3, #8
 800fc54:	9303      	str	r3, [sp, #12]
 800fc56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc58:	4433      	add	r3, r6
 800fc5a:	9309      	str	r3, [sp, #36]	; 0x24
 800fc5c:	e767      	b.n	800fb2e <_svfiprintf_r+0x4e>
 800fc5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc62:	460c      	mov	r4, r1
 800fc64:	2001      	movs	r0, #1
 800fc66:	e7a5      	b.n	800fbb4 <_svfiprintf_r+0xd4>
 800fc68:	2300      	movs	r3, #0
 800fc6a:	3401      	adds	r4, #1
 800fc6c:	9305      	str	r3, [sp, #20]
 800fc6e:	4619      	mov	r1, r3
 800fc70:	f04f 0c0a 	mov.w	ip, #10
 800fc74:	4620      	mov	r0, r4
 800fc76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc7a:	3a30      	subs	r2, #48	; 0x30
 800fc7c:	2a09      	cmp	r2, #9
 800fc7e:	d903      	bls.n	800fc88 <_svfiprintf_r+0x1a8>
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d0c5      	beq.n	800fc10 <_svfiprintf_r+0x130>
 800fc84:	9105      	str	r1, [sp, #20]
 800fc86:	e7c3      	b.n	800fc10 <_svfiprintf_r+0x130>
 800fc88:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc8c:	4604      	mov	r4, r0
 800fc8e:	2301      	movs	r3, #1
 800fc90:	e7f0      	b.n	800fc74 <_svfiprintf_r+0x194>
 800fc92:	ab03      	add	r3, sp, #12
 800fc94:	9300      	str	r3, [sp, #0]
 800fc96:	462a      	mov	r2, r5
 800fc98:	4b0f      	ldr	r3, [pc, #60]	; (800fcd8 <_svfiprintf_r+0x1f8>)
 800fc9a:	a904      	add	r1, sp, #16
 800fc9c:	4638      	mov	r0, r7
 800fc9e:	f7fc f927 	bl	800bef0 <_printf_float>
 800fca2:	1c42      	adds	r2, r0, #1
 800fca4:	4606      	mov	r6, r0
 800fca6:	d1d6      	bne.n	800fc56 <_svfiprintf_r+0x176>
 800fca8:	89ab      	ldrh	r3, [r5, #12]
 800fcaa:	065b      	lsls	r3, r3, #25
 800fcac:	f53f af2c 	bmi.w	800fb08 <_svfiprintf_r+0x28>
 800fcb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fcb2:	b01d      	add	sp, #116	; 0x74
 800fcb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcb8:	ab03      	add	r3, sp, #12
 800fcba:	9300      	str	r3, [sp, #0]
 800fcbc:	462a      	mov	r2, r5
 800fcbe:	4b06      	ldr	r3, [pc, #24]	; (800fcd8 <_svfiprintf_r+0x1f8>)
 800fcc0:	a904      	add	r1, sp, #16
 800fcc2:	4638      	mov	r0, r7
 800fcc4:	f7fc fbb8 	bl	800c438 <_printf_i>
 800fcc8:	e7eb      	b.n	800fca2 <_svfiprintf_r+0x1c2>
 800fcca:	bf00      	nop
 800fccc:	08012404 	.word	0x08012404
 800fcd0:	0801240e 	.word	0x0801240e
 800fcd4:	0800bef1 	.word	0x0800bef1
 800fcd8:	0800fa29 	.word	0x0800fa29
 800fcdc:	0801240a 	.word	0x0801240a

0800fce0 <_read_r>:
 800fce0:	b538      	push	{r3, r4, r5, lr}
 800fce2:	4d07      	ldr	r5, [pc, #28]	; (800fd00 <_read_r+0x20>)
 800fce4:	4604      	mov	r4, r0
 800fce6:	4608      	mov	r0, r1
 800fce8:	4611      	mov	r1, r2
 800fcea:	2200      	movs	r2, #0
 800fcec:	602a      	str	r2, [r5, #0]
 800fcee:	461a      	mov	r2, r3
 800fcf0:	f7f3 f984 	bl	8002ffc <_read>
 800fcf4:	1c43      	adds	r3, r0, #1
 800fcf6:	d102      	bne.n	800fcfe <_read_r+0x1e>
 800fcf8:	682b      	ldr	r3, [r5, #0]
 800fcfa:	b103      	cbz	r3, 800fcfe <_read_r+0x1e>
 800fcfc:	6023      	str	r3, [r4, #0]
 800fcfe:	bd38      	pop	{r3, r4, r5, pc}
 800fd00:	20008cd4 	.word	0x20008cd4
 800fd04:	00000000 	.word	0x00000000

0800fd08 <nan>:
 800fd08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fd10 <nan+0x8>
 800fd0c:	4770      	bx	lr
 800fd0e:	bf00      	nop
 800fd10:	00000000 	.word	0x00000000
 800fd14:	7ff80000 	.word	0x7ff80000

0800fd18 <strncmp>:
 800fd18:	b510      	push	{r4, lr}
 800fd1a:	b17a      	cbz	r2, 800fd3c <strncmp+0x24>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	3901      	subs	r1, #1
 800fd20:	1884      	adds	r4, r0, r2
 800fd22:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fd26:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fd2a:	4290      	cmp	r0, r2
 800fd2c:	d101      	bne.n	800fd32 <strncmp+0x1a>
 800fd2e:	42a3      	cmp	r3, r4
 800fd30:	d101      	bne.n	800fd36 <strncmp+0x1e>
 800fd32:	1a80      	subs	r0, r0, r2
 800fd34:	bd10      	pop	{r4, pc}
 800fd36:	2800      	cmp	r0, #0
 800fd38:	d1f3      	bne.n	800fd22 <strncmp+0xa>
 800fd3a:	e7fa      	b.n	800fd32 <strncmp+0x1a>
 800fd3c:	4610      	mov	r0, r2
 800fd3e:	e7f9      	b.n	800fd34 <strncmp+0x1c>

0800fd40 <__ascii_wctomb>:
 800fd40:	b149      	cbz	r1, 800fd56 <__ascii_wctomb+0x16>
 800fd42:	2aff      	cmp	r2, #255	; 0xff
 800fd44:	bf85      	ittet	hi
 800fd46:	238a      	movhi	r3, #138	; 0x8a
 800fd48:	6003      	strhi	r3, [r0, #0]
 800fd4a:	700a      	strbls	r2, [r1, #0]
 800fd4c:	f04f 30ff 	movhi.w	r0, #4294967295
 800fd50:	bf98      	it	ls
 800fd52:	2001      	movls	r0, #1
 800fd54:	4770      	bx	lr
 800fd56:	4608      	mov	r0, r1
 800fd58:	4770      	bx	lr
	...

0800fd5c <__assert_func>:
 800fd5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd5e:	4614      	mov	r4, r2
 800fd60:	461a      	mov	r2, r3
 800fd62:	4b09      	ldr	r3, [pc, #36]	; (800fd88 <__assert_func+0x2c>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	4605      	mov	r5, r0
 800fd68:	68d8      	ldr	r0, [r3, #12]
 800fd6a:	b14c      	cbz	r4, 800fd80 <__assert_func+0x24>
 800fd6c:	4b07      	ldr	r3, [pc, #28]	; (800fd8c <__assert_func+0x30>)
 800fd6e:	9100      	str	r1, [sp, #0]
 800fd70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd74:	4906      	ldr	r1, [pc, #24]	; (800fd90 <__assert_func+0x34>)
 800fd76:	462b      	mov	r3, r5
 800fd78:	f000 f80e 	bl	800fd98 <fiprintf>
 800fd7c:	f000 fa80 	bl	8010280 <abort>
 800fd80:	4b04      	ldr	r3, [pc, #16]	; (800fd94 <__assert_func+0x38>)
 800fd82:	461c      	mov	r4, r3
 800fd84:	e7f3      	b.n	800fd6e <__assert_func+0x12>
 800fd86:	bf00      	nop
 800fd88:	200000a8 	.word	0x200000a8
 800fd8c:	08012415 	.word	0x08012415
 800fd90:	08012422 	.word	0x08012422
 800fd94:	08012450 	.word	0x08012450

0800fd98 <fiprintf>:
 800fd98:	b40e      	push	{r1, r2, r3}
 800fd9a:	b503      	push	{r0, r1, lr}
 800fd9c:	4601      	mov	r1, r0
 800fd9e:	ab03      	add	r3, sp, #12
 800fda0:	4805      	ldr	r0, [pc, #20]	; (800fdb8 <fiprintf+0x20>)
 800fda2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fda6:	6800      	ldr	r0, [r0, #0]
 800fda8:	9301      	str	r3, [sp, #4]
 800fdaa:	f000 f879 	bl	800fea0 <_vfiprintf_r>
 800fdae:	b002      	add	sp, #8
 800fdb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fdb4:	b003      	add	sp, #12
 800fdb6:	4770      	bx	lr
 800fdb8:	200000a8 	.word	0x200000a8

0800fdbc <memmove>:
 800fdbc:	4288      	cmp	r0, r1
 800fdbe:	b510      	push	{r4, lr}
 800fdc0:	eb01 0402 	add.w	r4, r1, r2
 800fdc4:	d902      	bls.n	800fdcc <memmove+0x10>
 800fdc6:	4284      	cmp	r4, r0
 800fdc8:	4623      	mov	r3, r4
 800fdca:	d807      	bhi.n	800fddc <memmove+0x20>
 800fdcc:	1e43      	subs	r3, r0, #1
 800fdce:	42a1      	cmp	r1, r4
 800fdd0:	d008      	beq.n	800fde4 <memmove+0x28>
 800fdd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fdd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fdda:	e7f8      	b.n	800fdce <memmove+0x12>
 800fddc:	4402      	add	r2, r0
 800fdde:	4601      	mov	r1, r0
 800fde0:	428a      	cmp	r2, r1
 800fde2:	d100      	bne.n	800fde6 <memmove+0x2a>
 800fde4:	bd10      	pop	{r4, pc}
 800fde6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fdea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fdee:	e7f7      	b.n	800fde0 <memmove+0x24>

0800fdf0 <_realloc_r>:
 800fdf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdf4:	4680      	mov	r8, r0
 800fdf6:	4614      	mov	r4, r2
 800fdf8:	460e      	mov	r6, r1
 800fdfa:	b921      	cbnz	r1, 800fe06 <_realloc_r+0x16>
 800fdfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe00:	4611      	mov	r1, r2
 800fe02:	f7fb bf61 	b.w	800bcc8 <_malloc_r>
 800fe06:	b92a      	cbnz	r2, 800fe14 <_realloc_r+0x24>
 800fe08:	f7ff fdc2 	bl	800f990 <_free_r>
 800fe0c:	4625      	mov	r5, r4
 800fe0e:	4628      	mov	r0, r5
 800fe10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe14:	f000 faa0 	bl	8010358 <_malloc_usable_size_r>
 800fe18:	4284      	cmp	r4, r0
 800fe1a:	4607      	mov	r7, r0
 800fe1c:	d802      	bhi.n	800fe24 <_realloc_r+0x34>
 800fe1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fe22:	d812      	bhi.n	800fe4a <_realloc_r+0x5a>
 800fe24:	4621      	mov	r1, r4
 800fe26:	4640      	mov	r0, r8
 800fe28:	f7fb ff4e 	bl	800bcc8 <_malloc_r>
 800fe2c:	4605      	mov	r5, r0
 800fe2e:	2800      	cmp	r0, #0
 800fe30:	d0ed      	beq.n	800fe0e <_realloc_r+0x1e>
 800fe32:	42bc      	cmp	r4, r7
 800fe34:	4622      	mov	r2, r4
 800fe36:	4631      	mov	r1, r6
 800fe38:	bf28      	it	cs
 800fe3a:	463a      	movcs	r2, r7
 800fe3c:	f7fb ff0d 	bl	800bc5a <memcpy>
 800fe40:	4631      	mov	r1, r6
 800fe42:	4640      	mov	r0, r8
 800fe44:	f7ff fda4 	bl	800f990 <_free_r>
 800fe48:	e7e1      	b.n	800fe0e <_realloc_r+0x1e>
 800fe4a:	4635      	mov	r5, r6
 800fe4c:	e7df      	b.n	800fe0e <_realloc_r+0x1e>

0800fe4e <__sfputc_r>:
 800fe4e:	6893      	ldr	r3, [r2, #8]
 800fe50:	3b01      	subs	r3, #1
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	b410      	push	{r4}
 800fe56:	6093      	str	r3, [r2, #8]
 800fe58:	da08      	bge.n	800fe6c <__sfputc_r+0x1e>
 800fe5a:	6994      	ldr	r4, [r2, #24]
 800fe5c:	42a3      	cmp	r3, r4
 800fe5e:	db01      	blt.n	800fe64 <__sfputc_r+0x16>
 800fe60:	290a      	cmp	r1, #10
 800fe62:	d103      	bne.n	800fe6c <__sfputc_r+0x1e>
 800fe64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe68:	f000 b94a 	b.w	8010100 <__swbuf_r>
 800fe6c:	6813      	ldr	r3, [r2, #0]
 800fe6e:	1c58      	adds	r0, r3, #1
 800fe70:	6010      	str	r0, [r2, #0]
 800fe72:	7019      	strb	r1, [r3, #0]
 800fe74:	4608      	mov	r0, r1
 800fe76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe7a:	4770      	bx	lr

0800fe7c <__sfputs_r>:
 800fe7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe7e:	4606      	mov	r6, r0
 800fe80:	460f      	mov	r7, r1
 800fe82:	4614      	mov	r4, r2
 800fe84:	18d5      	adds	r5, r2, r3
 800fe86:	42ac      	cmp	r4, r5
 800fe88:	d101      	bne.n	800fe8e <__sfputs_r+0x12>
 800fe8a:	2000      	movs	r0, #0
 800fe8c:	e007      	b.n	800fe9e <__sfputs_r+0x22>
 800fe8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe92:	463a      	mov	r2, r7
 800fe94:	4630      	mov	r0, r6
 800fe96:	f7ff ffda 	bl	800fe4e <__sfputc_r>
 800fe9a:	1c43      	adds	r3, r0, #1
 800fe9c:	d1f3      	bne.n	800fe86 <__sfputs_r+0xa>
 800fe9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fea0 <_vfiprintf_r>:
 800fea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fea4:	460d      	mov	r5, r1
 800fea6:	b09d      	sub	sp, #116	; 0x74
 800fea8:	4614      	mov	r4, r2
 800feaa:	4698      	mov	r8, r3
 800feac:	4606      	mov	r6, r0
 800feae:	b118      	cbz	r0, 800feb8 <_vfiprintf_r+0x18>
 800feb0:	6983      	ldr	r3, [r0, #24]
 800feb2:	b90b      	cbnz	r3, 800feb8 <_vfiprintf_r+0x18>
 800feb4:	f7fb fe0c 	bl	800bad0 <__sinit>
 800feb8:	4b89      	ldr	r3, [pc, #548]	; (80100e0 <_vfiprintf_r+0x240>)
 800feba:	429d      	cmp	r5, r3
 800febc:	d11b      	bne.n	800fef6 <_vfiprintf_r+0x56>
 800febe:	6875      	ldr	r5, [r6, #4]
 800fec0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fec2:	07d9      	lsls	r1, r3, #31
 800fec4:	d405      	bmi.n	800fed2 <_vfiprintf_r+0x32>
 800fec6:	89ab      	ldrh	r3, [r5, #12]
 800fec8:	059a      	lsls	r2, r3, #22
 800feca:	d402      	bmi.n	800fed2 <_vfiprintf_r+0x32>
 800fecc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fece:	f7fb fec2 	bl	800bc56 <__retarget_lock_acquire_recursive>
 800fed2:	89ab      	ldrh	r3, [r5, #12]
 800fed4:	071b      	lsls	r3, r3, #28
 800fed6:	d501      	bpl.n	800fedc <_vfiprintf_r+0x3c>
 800fed8:	692b      	ldr	r3, [r5, #16]
 800feda:	b9eb      	cbnz	r3, 800ff18 <_vfiprintf_r+0x78>
 800fedc:	4629      	mov	r1, r5
 800fede:	4630      	mov	r0, r6
 800fee0:	f000 f960 	bl	80101a4 <__swsetup_r>
 800fee4:	b1c0      	cbz	r0, 800ff18 <_vfiprintf_r+0x78>
 800fee6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fee8:	07dc      	lsls	r4, r3, #31
 800feea:	d50e      	bpl.n	800ff0a <_vfiprintf_r+0x6a>
 800feec:	f04f 30ff 	mov.w	r0, #4294967295
 800fef0:	b01d      	add	sp, #116	; 0x74
 800fef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fef6:	4b7b      	ldr	r3, [pc, #492]	; (80100e4 <_vfiprintf_r+0x244>)
 800fef8:	429d      	cmp	r5, r3
 800fefa:	d101      	bne.n	800ff00 <_vfiprintf_r+0x60>
 800fefc:	68b5      	ldr	r5, [r6, #8]
 800fefe:	e7df      	b.n	800fec0 <_vfiprintf_r+0x20>
 800ff00:	4b79      	ldr	r3, [pc, #484]	; (80100e8 <_vfiprintf_r+0x248>)
 800ff02:	429d      	cmp	r5, r3
 800ff04:	bf08      	it	eq
 800ff06:	68f5      	ldreq	r5, [r6, #12]
 800ff08:	e7da      	b.n	800fec0 <_vfiprintf_r+0x20>
 800ff0a:	89ab      	ldrh	r3, [r5, #12]
 800ff0c:	0598      	lsls	r0, r3, #22
 800ff0e:	d4ed      	bmi.n	800feec <_vfiprintf_r+0x4c>
 800ff10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff12:	f7fb fea1 	bl	800bc58 <__retarget_lock_release_recursive>
 800ff16:	e7e9      	b.n	800feec <_vfiprintf_r+0x4c>
 800ff18:	2300      	movs	r3, #0
 800ff1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ff1c:	2320      	movs	r3, #32
 800ff1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ff22:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff26:	2330      	movs	r3, #48	; 0x30
 800ff28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80100ec <_vfiprintf_r+0x24c>
 800ff2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ff30:	f04f 0901 	mov.w	r9, #1
 800ff34:	4623      	mov	r3, r4
 800ff36:	469a      	mov	sl, r3
 800ff38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff3c:	b10a      	cbz	r2, 800ff42 <_vfiprintf_r+0xa2>
 800ff3e:	2a25      	cmp	r2, #37	; 0x25
 800ff40:	d1f9      	bne.n	800ff36 <_vfiprintf_r+0x96>
 800ff42:	ebba 0b04 	subs.w	fp, sl, r4
 800ff46:	d00b      	beq.n	800ff60 <_vfiprintf_r+0xc0>
 800ff48:	465b      	mov	r3, fp
 800ff4a:	4622      	mov	r2, r4
 800ff4c:	4629      	mov	r1, r5
 800ff4e:	4630      	mov	r0, r6
 800ff50:	f7ff ff94 	bl	800fe7c <__sfputs_r>
 800ff54:	3001      	adds	r0, #1
 800ff56:	f000 80aa 	beq.w	80100ae <_vfiprintf_r+0x20e>
 800ff5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff5c:	445a      	add	r2, fp
 800ff5e:	9209      	str	r2, [sp, #36]	; 0x24
 800ff60:	f89a 3000 	ldrb.w	r3, [sl]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	f000 80a2 	beq.w	80100ae <_vfiprintf_r+0x20e>
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ff70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff74:	f10a 0a01 	add.w	sl, sl, #1
 800ff78:	9304      	str	r3, [sp, #16]
 800ff7a:	9307      	str	r3, [sp, #28]
 800ff7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff80:	931a      	str	r3, [sp, #104]	; 0x68
 800ff82:	4654      	mov	r4, sl
 800ff84:	2205      	movs	r2, #5
 800ff86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff8a:	4858      	ldr	r0, [pc, #352]	; (80100ec <_vfiprintf_r+0x24c>)
 800ff8c:	f7f0 f938 	bl	8000200 <memchr>
 800ff90:	9a04      	ldr	r2, [sp, #16]
 800ff92:	b9d8      	cbnz	r0, 800ffcc <_vfiprintf_r+0x12c>
 800ff94:	06d1      	lsls	r1, r2, #27
 800ff96:	bf44      	itt	mi
 800ff98:	2320      	movmi	r3, #32
 800ff9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff9e:	0713      	lsls	r3, r2, #28
 800ffa0:	bf44      	itt	mi
 800ffa2:	232b      	movmi	r3, #43	; 0x2b
 800ffa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ffa8:	f89a 3000 	ldrb.w	r3, [sl]
 800ffac:	2b2a      	cmp	r3, #42	; 0x2a
 800ffae:	d015      	beq.n	800ffdc <_vfiprintf_r+0x13c>
 800ffb0:	9a07      	ldr	r2, [sp, #28]
 800ffb2:	4654      	mov	r4, sl
 800ffb4:	2000      	movs	r0, #0
 800ffb6:	f04f 0c0a 	mov.w	ip, #10
 800ffba:	4621      	mov	r1, r4
 800ffbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ffc0:	3b30      	subs	r3, #48	; 0x30
 800ffc2:	2b09      	cmp	r3, #9
 800ffc4:	d94e      	bls.n	8010064 <_vfiprintf_r+0x1c4>
 800ffc6:	b1b0      	cbz	r0, 800fff6 <_vfiprintf_r+0x156>
 800ffc8:	9207      	str	r2, [sp, #28]
 800ffca:	e014      	b.n	800fff6 <_vfiprintf_r+0x156>
 800ffcc:	eba0 0308 	sub.w	r3, r0, r8
 800ffd0:	fa09 f303 	lsl.w	r3, r9, r3
 800ffd4:	4313      	orrs	r3, r2
 800ffd6:	9304      	str	r3, [sp, #16]
 800ffd8:	46a2      	mov	sl, r4
 800ffda:	e7d2      	b.n	800ff82 <_vfiprintf_r+0xe2>
 800ffdc:	9b03      	ldr	r3, [sp, #12]
 800ffde:	1d19      	adds	r1, r3, #4
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	9103      	str	r1, [sp, #12]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	bfbb      	ittet	lt
 800ffe8:	425b      	neglt	r3, r3
 800ffea:	f042 0202 	orrlt.w	r2, r2, #2
 800ffee:	9307      	strge	r3, [sp, #28]
 800fff0:	9307      	strlt	r3, [sp, #28]
 800fff2:	bfb8      	it	lt
 800fff4:	9204      	strlt	r2, [sp, #16]
 800fff6:	7823      	ldrb	r3, [r4, #0]
 800fff8:	2b2e      	cmp	r3, #46	; 0x2e
 800fffa:	d10c      	bne.n	8010016 <_vfiprintf_r+0x176>
 800fffc:	7863      	ldrb	r3, [r4, #1]
 800fffe:	2b2a      	cmp	r3, #42	; 0x2a
 8010000:	d135      	bne.n	801006e <_vfiprintf_r+0x1ce>
 8010002:	9b03      	ldr	r3, [sp, #12]
 8010004:	1d1a      	adds	r2, r3, #4
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	9203      	str	r2, [sp, #12]
 801000a:	2b00      	cmp	r3, #0
 801000c:	bfb8      	it	lt
 801000e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010012:	3402      	adds	r4, #2
 8010014:	9305      	str	r3, [sp, #20]
 8010016:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80100fc <_vfiprintf_r+0x25c>
 801001a:	7821      	ldrb	r1, [r4, #0]
 801001c:	2203      	movs	r2, #3
 801001e:	4650      	mov	r0, sl
 8010020:	f7f0 f8ee 	bl	8000200 <memchr>
 8010024:	b140      	cbz	r0, 8010038 <_vfiprintf_r+0x198>
 8010026:	2340      	movs	r3, #64	; 0x40
 8010028:	eba0 000a 	sub.w	r0, r0, sl
 801002c:	fa03 f000 	lsl.w	r0, r3, r0
 8010030:	9b04      	ldr	r3, [sp, #16]
 8010032:	4303      	orrs	r3, r0
 8010034:	3401      	adds	r4, #1
 8010036:	9304      	str	r3, [sp, #16]
 8010038:	f814 1b01 	ldrb.w	r1, [r4], #1
 801003c:	482c      	ldr	r0, [pc, #176]	; (80100f0 <_vfiprintf_r+0x250>)
 801003e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010042:	2206      	movs	r2, #6
 8010044:	f7f0 f8dc 	bl	8000200 <memchr>
 8010048:	2800      	cmp	r0, #0
 801004a:	d03f      	beq.n	80100cc <_vfiprintf_r+0x22c>
 801004c:	4b29      	ldr	r3, [pc, #164]	; (80100f4 <_vfiprintf_r+0x254>)
 801004e:	bb1b      	cbnz	r3, 8010098 <_vfiprintf_r+0x1f8>
 8010050:	9b03      	ldr	r3, [sp, #12]
 8010052:	3307      	adds	r3, #7
 8010054:	f023 0307 	bic.w	r3, r3, #7
 8010058:	3308      	adds	r3, #8
 801005a:	9303      	str	r3, [sp, #12]
 801005c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801005e:	443b      	add	r3, r7
 8010060:	9309      	str	r3, [sp, #36]	; 0x24
 8010062:	e767      	b.n	800ff34 <_vfiprintf_r+0x94>
 8010064:	fb0c 3202 	mla	r2, ip, r2, r3
 8010068:	460c      	mov	r4, r1
 801006a:	2001      	movs	r0, #1
 801006c:	e7a5      	b.n	800ffba <_vfiprintf_r+0x11a>
 801006e:	2300      	movs	r3, #0
 8010070:	3401      	adds	r4, #1
 8010072:	9305      	str	r3, [sp, #20]
 8010074:	4619      	mov	r1, r3
 8010076:	f04f 0c0a 	mov.w	ip, #10
 801007a:	4620      	mov	r0, r4
 801007c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010080:	3a30      	subs	r2, #48	; 0x30
 8010082:	2a09      	cmp	r2, #9
 8010084:	d903      	bls.n	801008e <_vfiprintf_r+0x1ee>
 8010086:	2b00      	cmp	r3, #0
 8010088:	d0c5      	beq.n	8010016 <_vfiprintf_r+0x176>
 801008a:	9105      	str	r1, [sp, #20]
 801008c:	e7c3      	b.n	8010016 <_vfiprintf_r+0x176>
 801008e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010092:	4604      	mov	r4, r0
 8010094:	2301      	movs	r3, #1
 8010096:	e7f0      	b.n	801007a <_vfiprintf_r+0x1da>
 8010098:	ab03      	add	r3, sp, #12
 801009a:	9300      	str	r3, [sp, #0]
 801009c:	462a      	mov	r2, r5
 801009e:	4b16      	ldr	r3, [pc, #88]	; (80100f8 <_vfiprintf_r+0x258>)
 80100a0:	a904      	add	r1, sp, #16
 80100a2:	4630      	mov	r0, r6
 80100a4:	f7fb ff24 	bl	800bef0 <_printf_float>
 80100a8:	4607      	mov	r7, r0
 80100aa:	1c78      	adds	r0, r7, #1
 80100ac:	d1d6      	bne.n	801005c <_vfiprintf_r+0x1bc>
 80100ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80100b0:	07d9      	lsls	r1, r3, #31
 80100b2:	d405      	bmi.n	80100c0 <_vfiprintf_r+0x220>
 80100b4:	89ab      	ldrh	r3, [r5, #12]
 80100b6:	059a      	lsls	r2, r3, #22
 80100b8:	d402      	bmi.n	80100c0 <_vfiprintf_r+0x220>
 80100ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80100bc:	f7fb fdcc 	bl	800bc58 <__retarget_lock_release_recursive>
 80100c0:	89ab      	ldrh	r3, [r5, #12]
 80100c2:	065b      	lsls	r3, r3, #25
 80100c4:	f53f af12 	bmi.w	800feec <_vfiprintf_r+0x4c>
 80100c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80100ca:	e711      	b.n	800fef0 <_vfiprintf_r+0x50>
 80100cc:	ab03      	add	r3, sp, #12
 80100ce:	9300      	str	r3, [sp, #0]
 80100d0:	462a      	mov	r2, r5
 80100d2:	4b09      	ldr	r3, [pc, #36]	; (80100f8 <_vfiprintf_r+0x258>)
 80100d4:	a904      	add	r1, sp, #16
 80100d6:	4630      	mov	r0, r6
 80100d8:	f7fc f9ae 	bl	800c438 <_printf_i>
 80100dc:	e7e4      	b.n	80100a8 <_vfiprintf_r+0x208>
 80100de:	bf00      	nop
 80100e0:	08011fd0 	.word	0x08011fd0
 80100e4:	08011ff0 	.word	0x08011ff0
 80100e8:	08011fb0 	.word	0x08011fb0
 80100ec:	08012404 	.word	0x08012404
 80100f0:	0801240e 	.word	0x0801240e
 80100f4:	0800bef1 	.word	0x0800bef1
 80100f8:	0800fe7d 	.word	0x0800fe7d
 80100fc:	0801240a 	.word	0x0801240a

08010100 <__swbuf_r>:
 8010100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010102:	460e      	mov	r6, r1
 8010104:	4614      	mov	r4, r2
 8010106:	4605      	mov	r5, r0
 8010108:	b118      	cbz	r0, 8010112 <__swbuf_r+0x12>
 801010a:	6983      	ldr	r3, [r0, #24]
 801010c:	b90b      	cbnz	r3, 8010112 <__swbuf_r+0x12>
 801010e:	f7fb fcdf 	bl	800bad0 <__sinit>
 8010112:	4b21      	ldr	r3, [pc, #132]	; (8010198 <__swbuf_r+0x98>)
 8010114:	429c      	cmp	r4, r3
 8010116:	d12b      	bne.n	8010170 <__swbuf_r+0x70>
 8010118:	686c      	ldr	r4, [r5, #4]
 801011a:	69a3      	ldr	r3, [r4, #24]
 801011c:	60a3      	str	r3, [r4, #8]
 801011e:	89a3      	ldrh	r3, [r4, #12]
 8010120:	071a      	lsls	r2, r3, #28
 8010122:	d52f      	bpl.n	8010184 <__swbuf_r+0x84>
 8010124:	6923      	ldr	r3, [r4, #16]
 8010126:	b36b      	cbz	r3, 8010184 <__swbuf_r+0x84>
 8010128:	6923      	ldr	r3, [r4, #16]
 801012a:	6820      	ldr	r0, [r4, #0]
 801012c:	1ac0      	subs	r0, r0, r3
 801012e:	6963      	ldr	r3, [r4, #20]
 8010130:	b2f6      	uxtb	r6, r6
 8010132:	4283      	cmp	r3, r0
 8010134:	4637      	mov	r7, r6
 8010136:	dc04      	bgt.n	8010142 <__swbuf_r+0x42>
 8010138:	4621      	mov	r1, r4
 801013a:	4628      	mov	r0, r5
 801013c:	f7fe fb68 	bl	800e810 <_fflush_r>
 8010140:	bb30      	cbnz	r0, 8010190 <__swbuf_r+0x90>
 8010142:	68a3      	ldr	r3, [r4, #8]
 8010144:	3b01      	subs	r3, #1
 8010146:	60a3      	str	r3, [r4, #8]
 8010148:	6823      	ldr	r3, [r4, #0]
 801014a:	1c5a      	adds	r2, r3, #1
 801014c:	6022      	str	r2, [r4, #0]
 801014e:	701e      	strb	r6, [r3, #0]
 8010150:	6963      	ldr	r3, [r4, #20]
 8010152:	3001      	adds	r0, #1
 8010154:	4283      	cmp	r3, r0
 8010156:	d004      	beq.n	8010162 <__swbuf_r+0x62>
 8010158:	89a3      	ldrh	r3, [r4, #12]
 801015a:	07db      	lsls	r3, r3, #31
 801015c:	d506      	bpl.n	801016c <__swbuf_r+0x6c>
 801015e:	2e0a      	cmp	r6, #10
 8010160:	d104      	bne.n	801016c <__swbuf_r+0x6c>
 8010162:	4621      	mov	r1, r4
 8010164:	4628      	mov	r0, r5
 8010166:	f7fe fb53 	bl	800e810 <_fflush_r>
 801016a:	b988      	cbnz	r0, 8010190 <__swbuf_r+0x90>
 801016c:	4638      	mov	r0, r7
 801016e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010170:	4b0a      	ldr	r3, [pc, #40]	; (801019c <__swbuf_r+0x9c>)
 8010172:	429c      	cmp	r4, r3
 8010174:	d101      	bne.n	801017a <__swbuf_r+0x7a>
 8010176:	68ac      	ldr	r4, [r5, #8]
 8010178:	e7cf      	b.n	801011a <__swbuf_r+0x1a>
 801017a:	4b09      	ldr	r3, [pc, #36]	; (80101a0 <__swbuf_r+0xa0>)
 801017c:	429c      	cmp	r4, r3
 801017e:	bf08      	it	eq
 8010180:	68ec      	ldreq	r4, [r5, #12]
 8010182:	e7ca      	b.n	801011a <__swbuf_r+0x1a>
 8010184:	4621      	mov	r1, r4
 8010186:	4628      	mov	r0, r5
 8010188:	f000 f80c 	bl	80101a4 <__swsetup_r>
 801018c:	2800      	cmp	r0, #0
 801018e:	d0cb      	beq.n	8010128 <__swbuf_r+0x28>
 8010190:	f04f 37ff 	mov.w	r7, #4294967295
 8010194:	e7ea      	b.n	801016c <__swbuf_r+0x6c>
 8010196:	bf00      	nop
 8010198:	08011fd0 	.word	0x08011fd0
 801019c:	08011ff0 	.word	0x08011ff0
 80101a0:	08011fb0 	.word	0x08011fb0

080101a4 <__swsetup_r>:
 80101a4:	4b32      	ldr	r3, [pc, #200]	; (8010270 <__swsetup_r+0xcc>)
 80101a6:	b570      	push	{r4, r5, r6, lr}
 80101a8:	681d      	ldr	r5, [r3, #0]
 80101aa:	4606      	mov	r6, r0
 80101ac:	460c      	mov	r4, r1
 80101ae:	b125      	cbz	r5, 80101ba <__swsetup_r+0x16>
 80101b0:	69ab      	ldr	r3, [r5, #24]
 80101b2:	b913      	cbnz	r3, 80101ba <__swsetup_r+0x16>
 80101b4:	4628      	mov	r0, r5
 80101b6:	f7fb fc8b 	bl	800bad0 <__sinit>
 80101ba:	4b2e      	ldr	r3, [pc, #184]	; (8010274 <__swsetup_r+0xd0>)
 80101bc:	429c      	cmp	r4, r3
 80101be:	d10f      	bne.n	80101e0 <__swsetup_r+0x3c>
 80101c0:	686c      	ldr	r4, [r5, #4]
 80101c2:	89a3      	ldrh	r3, [r4, #12]
 80101c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80101c8:	0719      	lsls	r1, r3, #28
 80101ca:	d42c      	bmi.n	8010226 <__swsetup_r+0x82>
 80101cc:	06dd      	lsls	r5, r3, #27
 80101ce:	d411      	bmi.n	80101f4 <__swsetup_r+0x50>
 80101d0:	2309      	movs	r3, #9
 80101d2:	6033      	str	r3, [r6, #0]
 80101d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80101d8:	81a3      	strh	r3, [r4, #12]
 80101da:	f04f 30ff 	mov.w	r0, #4294967295
 80101de:	e03e      	b.n	801025e <__swsetup_r+0xba>
 80101e0:	4b25      	ldr	r3, [pc, #148]	; (8010278 <__swsetup_r+0xd4>)
 80101e2:	429c      	cmp	r4, r3
 80101e4:	d101      	bne.n	80101ea <__swsetup_r+0x46>
 80101e6:	68ac      	ldr	r4, [r5, #8]
 80101e8:	e7eb      	b.n	80101c2 <__swsetup_r+0x1e>
 80101ea:	4b24      	ldr	r3, [pc, #144]	; (801027c <__swsetup_r+0xd8>)
 80101ec:	429c      	cmp	r4, r3
 80101ee:	bf08      	it	eq
 80101f0:	68ec      	ldreq	r4, [r5, #12]
 80101f2:	e7e6      	b.n	80101c2 <__swsetup_r+0x1e>
 80101f4:	0758      	lsls	r0, r3, #29
 80101f6:	d512      	bpl.n	801021e <__swsetup_r+0x7a>
 80101f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101fa:	b141      	cbz	r1, 801020e <__swsetup_r+0x6a>
 80101fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010200:	4299      	cmp	r1, r3
 8010202:	d002      	beq.n	801020a <__swsetup_r+0x66>
 8010204:	4630      	mov	r0, r6
 8010206:	f7ff fbc3 	bl	800f990 <_free_r>
 801020a:	2300      	movs	r3, #0
 801020c:	6363      	str	r3, [r4, #52]	; 0x34
 801020e:	89a3      	ldrh	r3, [r4, #12]
 8010210:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010214:	81a3      	strh	r3, [r4, #12]
 8010216:	2300      	movs	r3, #0
 8010218:	6063      	str	r3, [r4, #4]
 801021a:	6923      	ldr	r3, [r4, #16]
 801021c:	6023      	str	r3, [r4, #0]
 801021e:	89a3      	ldrh	r3, [r4, #12]
 8010220:	f043 0308 	orr.w	r3, r3, #8
 8010224:	81a3      	strh	r3, [r4, #12]
 8010226:	6923      	ldr	r3, [r4, #16]
 8010228:	b94b      	cbnz	r3, 801023e <__swsetup_r+0x9a>
 801022a:	89a3      	ldrh	r3, [r4, #12]
 801022c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010234:	d003      	beq.n	801023e <__swsetup_r+0x9a>
 8010236:	4621      	mov	r1, r4
 8010238:	4630      	mov	r0, r6
 801023a:	f000 f84d 	bl	80102d8 <__smakebuf_r>
 801023e:	89a0      	ldrh	r0, [r4, #12]
 8010240:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010244:	f010 0301 	ands.w	r3, r0, #1
 8010248:	d00a      	beq.n	8010260 <__swsetup_r+0xbc>
 801024a:	2300      	movs	r3, #0
 801024c:	60a3      	str	r3, [r4, #8]
 801024e:	6963      	ldr	r3, [r4, #20]
 8010250:	425b      	negs	r3, r3
 8010252:	61a3      	str	r3, [r4, #24]
 8010254:	6923      	ldr	r3, [r4, #16]
 8010256:	b943      	cbnz	r3, 801026a <__swsetup_r+0xc6>
 8010258:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801025c:	d1ba      	bne.n	80101d4 <__swsetup_r+0x30>
 801025e:	bd70      	pop	{r4, r5, r6, pc}
 8010260:	0781      	lsls	r1, r0, #30
 8010262:	bf58      	it	pl
 8010264:	6963      	ldrpl	r3, [r4, #20]
 8010266:	60a3      	str	r3, [r4, #8]
 8010268:	e7f4      	b.n	8010254 <__swsetup_r+0xb0>
 801026a:	2000      	movs	r0, #0
 801026c:	e7f7      	b.n	801025e <__swsetup_r+0xba>
 801026e:	bf00      	nop
 8010270:	200000a8 	.word	0x200000a8
 8010274:	08011fd0 	.word	0x08011fd0
 8010278:	08011ff0 	.word	0x08011ff0
 801027c:	08011fb0 	.word	0x08011fb0

08010280 <abort>:
 8010280:	b508      	push	{r3, lr}
 8010282:	2006      	movs	r0, #6
 8010284:	f000 f898 	bl	80103b8 <raise>
 8010288:	2001      	movs	r0, #1
 801028a:	f7f2 fead 	bl	8002fe8 <_exit>

0801028e <__swhatbuf_r>:
 801028e:	b570      	push	{r4, r5, r6, lr}
 8010290:	460e      	mov	r6, r1
 8010292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010296:	2900      	cmp	r1, #0
 8010298:	b096      	sub	sp, #88	; 0x58
 801029a:	4614      	mov	r4, r2
 801029c:	461d      	mov	r5, r3
 801029e:	da08      	bge.n	80102b2 <__swhatbuf_r+0x24>
 80102a0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80102a4:	2200      	movs	r2, #0
 80102a6:	602a      	str	r2, [r5, #0]
 80102a8:	061a      	lsls	r2, r3, #24
 80102aa:	d410      	bmi.n	80102ce <__swhatbuf_r+0x40>
 80102ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102b0:	e00e      	b.n	80102d0 <__swhatbuf_r+0x42>
 80102b2:	466a      	mov	r2, sp
 80102b4:	f000 f89c 	bl	80103f0 <_fstat_r>
 80102b8:	2800      	cmp	r0, #0
 80102ba:	dbf1      	blt.n	80102a0 <__swhatbuf_r+0x12>
 80102bc:	9a01      	ldr	r2, [sp, #4]
 80102be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80102c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80102c6:	425a      	negs	r2, r3
 80102c8:	415a      	adcs	r2, r3
 80102ca:	602a      	str	r2, [r5, #0]
 80102cc:	e7ee      	b.n	80102ac <__swhatbuf_r+0x1e>
 80102ce:	2340      	movs	r3, #64	; 0x40
 80102d0:	2000      	movs	r0, #0
 80102d2:	6023      	str	r3, [r4, #0]
 80102d4:	b016      	add	sp, #88	; 0x58
 80102d6:	bd70      	pop	{r4, r5, r6, pc}

080102d8 <__smakebuf_r>:
 80102d8:	898b      	ldrh	r3, [r1, #12]
 80102da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80102dc:	079d      	lsls	r5, r3, #30
 80102de:	4606      	mov	r6, r0
 80102e0:	460c      	mov	r4, r1
 80102e2:	d507      	bpl.n	80102f4 <__smakebuf_r+0x1c>
 80102e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80102e8:	6023      	str	r3, [r4, #0]
 80102ea:	6123      	str	r3, [r4, #16]
 80102ec:	2301      	movs	r3, #1
 80102ee:	6163      	str	r3, [r4, #20]
 80102f0:	b002      	add	sp, #8
 80102f2:	bd70      	pop	{r4, r5, r6, pc}
 80102f4:	ab01      	add	r3, sp, #4
 80102f6:	466a      	mov	r2, sp
 80102f8:	f7ff ffc9 	bl	801028e <__swhatbuf_r>
 80102fc:	9900      	ldr	r1, [sp, #0]
 80102fe:	4605      	mov	r5, r0
 8010300:	4630      	mov	r0, r6
 8010302:	f7fb fce1 	bl	800bcc8 <_malloc_r>
 8010306:	b948      	cbnz	r0, 801031c <__smakebuf_r+0x44>
 8010308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801030c:	059a      	lsls	r2, r3, #22
 801030e:	d4ef      	bmi.n	80102f0 <__smakebuf_r+0x18>
 8010310:	f023 0303 	bic.w	r3, r3, #3
 8010314:	f043 0302 	orr.w	r3, r3, #2
 8010318:	81a3      	strh	r3, [r4, #12]
 801031a:	e7e3      	b.n	80102e4 <__smakebuf_r+0xc>
 801031c:	4b0d      	ldr	r3, [pc, #52]	; (8010354 <__smakebuf_r+0x7c>)
 801031e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010320:	89a3      	ldrh	r3, [r4, #12]
 8010322:	6020      	str	r0, [r4, #0]
 8010324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010328:	81a3      	strh	r3, [r4, #12]
 801032a:	9b00      	ldr	r3, [sp, #0]
 801032c:	6163      	str	r3, [r4, #20]
 801032e:	9b01      	ldr	r3, [sp, #4]
 8010330:	6120      	str	r0, [r4, #16]
 8010332:	b15b      	cbz	r3, 801034c <__smakebuf_r+0x74>
 8010334:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010338:	4630      	mov	r0, r6
 801033a:	f000 f86b 	bl	8010414 <_isatty_r>
 801033e:	b128      	cbz	r0, 801034c <__smakebuf_r+0x74>
 8010340:	89a3      	ldrh	r3, [r4, #12]
 8010342:	f023 0303 	bic.w	r3, r3, #3
 8010346:	f043 0301 	orr.w	r3, r3, #1
 801034a:	81a3      	strh	r3, [r4, #12]
 801034c:	89a0      	ldrh	r0, [r4, #12]
 801034e:	4305      	orrs	r5, r0
 8010350:	81a5      	strh	r5, [r4, #12]
 8010352:	e7cd      	b.n	80102f0 <__smakebuf_r+0x18>
 8010354:	0800ba69 	.word	0x0800ba69

08010358 <_malloc_usable_size_r>:
 8010358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801035c:	1f18      	subs	r0, r3, #4
 801035e:	2b00      	cmp	r3, #0
 8010360:	bfbc      	itt	lt
 8010362:	580b      	ldrlt	r3, [r1, r0]
 8010364:	18c0      	addlt	r0, r0, r3
 8010366:	4770      	bx	lr

08010368 <_raise_r>:
 8010368:	291f      	cmp	r1, #31
 801036a:	b538      	push	{r3, r4, r5, lr}
 801036c:	4604      	mov	r4, r0
 801036e:	460d      	mov	r5, r1
 8010370:	d904      	bls.n	801037c <_raise_r+0x14>
 8010372:	2316      	movs	r3, #22
 8010374:	6003      	str	r3, [r0, #0]
 8010376:	f04f 30ff 	mov.w	r0, #4294967295
 801037a:	bd38      	pop	{r3, r4, r5, pc}
 801037c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801037e:	b112      	cbz	r2, 8010386 <_raise_r+0x1e>
 8010380:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010384:	b94b      	cbnz	r3, 801039a <_raise_r+0x32>
 8010386:	4620      	mov	r0, r4
 8010388:	f000 f830 	bl	80103ec <_getpid_r>
 801038c:	462a      	mov	r2, r5
 801038e:	4601      	mov	r1, r0
 8010390:	4620      	mov	r0, r4
 8010392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010396:	f000 b817 	b.w	80103c8 <_kill_r>
 801039a:	2b01      	cmp	r3, #1
 801039c:	d00a      	beq.n	80103b4 <_raise_r+0x4c>
 801039e:	1c59      	adds	r1, r3, #1
 80103a0:	d103      	bne.n	80103aa <_raise_r+0x42>
 80103a2:	2316      	movs	r3, #22
 80103a4:	6003      	str	r3, [r0, #0]
 80103a6:	2001      	movs	r0, #1
 80103a8:	e7e7      	b.n	801037a <_raise_r+0x12>
 80103aa:	2400      	movs	r4, #0
 80103ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80103b0:	4628      	mov	r0, r5
 80103b2:	4798      	blx	r3
 80103b4:	2000      	movs	r0, #0
 80103b6:	e7e0      	b.n	801037a <_raise_r+0x12>

080103b8 <raise>:
 80103b8:	4b02      	ldr	r3, [pc, #8]	; (80103c4 <raise+0xc>)
 80103ba:	4601      	mov	r1, r0
 80103bc:	6818      	ldr	r0, [r3, #0]
 80103be:	f7ff bfd3 	b.w	8010368 <_raise_r>
 80103c2:	bf00      	nop
 80103c4:	200000a8 	.word	0x200000a8

080103c8 <_kill_r>:
 80103c8:	b538      	push	{r3, r4, r5, lr}
 80103ca:	4d07      	ldr	r5, [pc, #28]	; (80103e8 <_kill_r+0x20>)
 80103cc:	2300      	movs	r3, #0
 80103ce:	4604      	mov	r4, r0
 80103d0:	4608      	mov	r0, r1
 80103d2:	4611      	mov	r1, r2
 80103d4:	602b      	str	r3, [r5, #0]
 80103d6:	f7f2 fdf7 	bl	8002fc8 <_kill>
 80103da:	1c43      	adds	r3, r0, #1
 80103dc:	d102      	bne.n	80103e4 <_kill_r+0x1c>
 80103de:	682b      	ldr	r3, [r5, #0]
 80103e0:	b103      	cbz	r3, 80103e4 <_kill_r+0x1c>
 80103e2:	6023      	str	r3, [r4, #0]
 80103e4:	bd38      	pop	{r3, r4, r5, pc}
 80103e6:	bf00      	nop
 80103e8:	20008cd4 	.word	0x20008cd4

080103ec <_getpid_r>:
 80103ec:	f7f2 bde4 	b.w	8002fb8 <_getpid>

080103f0 <_fstat_r>:
 80103f0:	b538      	push	{r3, r4, r5, lr}
 80103f2:	4d07      	ldr	r5, [pc, #28]	; (8010410 <_fstat_r+0x20>)
 80103f4:	2300      	movs	r3, #0
 80103f6:	4604      	mov	r4, r0
 80103f8:	4608      	mov	r0, r1
 80103fa:	4611      	mov	r1, r2
 80103fc:	602b      	str	r3, [r5, #0]
 80103fe:	f7f2 fe26 	bl	800304e <_fstat>
 8010402:	1c43      	adds	r3, r0, #1
 8010404:	d102      	bne.n	801040c <_fstat_r+0x1c>
 8010406:	682b      	ldr	r3, [r5, #0]
 8010408:	b103      	cbz	r3, 801040c <_fstat_r+0x1c>
 801040a:	6023      	str	r3, [r4, #0]
 801040c:	bd38      	pop	{r3, r4, r5, pc}
 801040e:	bf00      	nop
 8010410:	20008cd4 	.word	0x20008cd4

08010414 <_isatty_r>:
 8010414:	b538      	push	{r3, r4, r5, lr}
 8010416:	4d06      	ldr	r5, [pc, #24]	; (8010430 <_isatty_r+0x1c>)
 8010418:	2300      	movs	r3, #0
 801041a:	4604      	mov	r4, r0
 801041c:	4608      	mov	r0, r1
 801041e:	602b      	str	r3, [r5, #0]
 8010420:	f7f2 fe25 	bl	800306e <_isatty>
 8010424:	1c43      	adds	r3, r0, #1
 8010426:	d102      	bne.n	801042e <_isatty_r+0x1a>
 8010428:	682b      	ldr	r3, [r5, #0]
 801042a:	b103      	cbz	r3, 801042e <_isatty_r+0x1a>
 801042c:	6023      	str	r3, [r4, #0]
 801042e:	bd38      	pop	{r3, r4, r5, pc}
 8010430:	20008cd4 	.word	0x20008cd4

08010434 <_init>:
 8010434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010436:	bf00      	nop
 8010438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801043a:	bc08      	pop	{r3}
 801043c:	469e      	mov	lr, r3
 801043e:	4770      	bx	lr

08010440 <_fini>:
 8010440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010442:	bf00      	nop
 8010444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010446:	bc08      	pop	{r3}
 8010448:	469e      	mov	lr, r3
 801044a:	4770      	bx	lr
