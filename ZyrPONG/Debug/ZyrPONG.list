
ZyrPONG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d50  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ba0  08009f00  08009f00  00019f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800baa0  0800baa0  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800baa0  0800baa0  0001baa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800baa8  0800baa8  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800baa8  0800baa8  0001baa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800baac  0800baac  0001baac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800bab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b8  2**0
                  CONTENTS
 10 .bss          00008a14  200000b8  200000b8  000200b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008acc  20008acc  000200b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000266bf  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c0a  00000000  00000000  000467a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f60  00000000  00000000  0004b3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d80  00000000  00000000  0004d318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002994a  00000000  00000000  0004f098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023bdb  00000000  00000000  000789e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3a3d  00000000  00000000  0009c5bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018fffa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000089c8  00000000  00000000  0019004c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009ee8 	.word	0x08009ee8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000bc 	.word	0x200000bc
 80001ec:	08009ee8 	.word	0x08009ee8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b083      	sub	sp, #12
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	4a06      	ldr	r2, [pc, #24]	; (80005f8 <vApplicationGetIdleTaskMemory+0x30>)
 80005de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2280      	movs	r2, #128	; 0x80
 80005e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	200000d4 	.word	0x200000d4
 80005f8:	2000018c 	.word	0x2000018c

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b5b0      	push	{r4, r5, r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000602:	f002 fc3b 	bl	8002e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f843 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060a:	f000 fab7 	bl	8000b7c <MX_GPIO_Init>
  MX_CRC_Init();
 800060e:	f000 f8af 	bl	8000770 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000612:	f000 f8c1 	bl	8000798 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000616:	f000 fa61 	bl	8000adc <MX_FMC_Init>
  MX_LTDC_Init();
 800061a:	f000 f92f 	bl	800087c <MX_LTDC_Init>
  MX_SPI5_Init();
 800061e:	f000 f9ad 	bl	800097c <MX_SPI5_Init>
  MX_TIM1_Init();
 8000622:	f000 f9e1 	bl	80009e8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000626:	f000 fa2f 	bl	8000a88 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 800062a:	f000 f8e7 	bl	80007fc <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  BSP_LCD_Init();
 800062e:	f001 fc0d 	bl	8001e4c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);	//Warstwa spodnia
 8000632:	4914      	ldr	r1, [pc, #80]	; (8000684 <main+0x88>)
 8000634:	2000      	movs	r0, #0
 8000636:	f001 fc8b 	bl	8001f50 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 800063a:	2000      	movs	r0, #0
 800063c:	f001 fcec 	bl	8002018 <BSP_LCD_SelectLayer>
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);	//Warstawa wierzchnia
 8000640:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000644:	2001      	movs	r0, #1
 8000646:	f001 fc83 	bl	8001f50 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 800064a:	2001      	movs	r0, #1
 800064c:	f001 fce4 	bl	8002018 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000650:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000654:	f001 fd52 	bl	80020fc <BSP_LCD_Clear>
  BSP_LCD_DisplayOn();
 8000658:	f002 f85a 	bl	8002710 <BSP_LCD_DisplayOn>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <main+0x8c>)
 800065e:	1d3c      	adds	r4, r7, #4
 8000660:	461d      	mov	r5, r3
 8000662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000666:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f007 fd85 	bl	8008182 <osThreadCreate>
 8000678:	4603      	mov	r3, r0
 800067a:	4a04      	ldr	r2, [pc, #16]	; (800068c <main+0x90>)
 800067c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800067e:	f007 fd79 	bl	8008174 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000682:	e7fe      	b.n	8000682 <main+0x86>
 8000684:	d0130000 	.word	0xd0130000
 8000688:	08009f0c 	.word	0x08009f0c
 800068c:	20000650 	.word	0x20000650

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	; 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	2230      	movs	r2, #48	; 0x30
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f008 ff52 	bl	8009548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <SystemClock_Config+0xd8>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	4a2a      	ldr	r2, [pc, #168]	; (8000768 <SystemClock_Config+0xd8>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	; 0x40
 80006c4:	4b28      	ldr	r3, [pc, #160]	; (8000768 <SystemClock_Config+0xd8>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	4b25      	ldr	r3, [pc, #148]	; (800076c <SystemClock_Config+0xdc>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a24      	ldr	r2, [pc, #144]	; (800076c <SystemClock_Config+0xdc>)
 80006da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b22      	ldr	r3, [pc, #136]	; (800076c <SystemClock_Config+0xdc>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	2301      	movs	r3, #1
 80006f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	2310      	movs	r3, #16
 80006f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f8:	2302      	movs	r3, #2
 80006fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fc:	2300      	movs	r3, #0
 80006fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000700:	2308      	movs	r3, #8
 8000702:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000704:	23b4      	movs	r3, #180	; 0xb4
 8000706:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800070c:	2303      	movs	r3, #3
 800070e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	4618      	mov	r0, r3
 8000716:	f004 fb6b 	bl	8004df0 <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000720:	f000 fba6 	bl	8000e70 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000724:	f004 fb14 	bl	8004d50 <HAL_PWREx_EnableOverDrive>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800072e:	f000 fb9f 	bl	8000e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000732:	230f      	movs	r3, #15
 8000734:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000736:	2302      	movs	r3, #2
 8000738:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800073e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000742:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000748:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	2105      	movs	r1, #5
 8000750:	4618      	mov	r0, r3
 8000752:	f004 fdc5 	bl	80052e0 <HAL_RCC_ClockConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800075c:	f000 fb88 	bl	8000e70 <Error_Handler>
  }
}
 8000760:	bf00      	nop
 8000762:	3750      	adds	r7, #80	; 0x50
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_CRC_Init+0x20>)
 8000776:	4a07      	ldr	r2, [pc, #28]	; (8000794 <MX_CRC_Init+0x24>)
 8000778:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_CRC_Init+0x20>)
 800077c:	f002 fcc6 	bl	800310c <HAL_CRC_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000786:	f000 fb73 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	2000038c 	.word	0x2000038c
 8000794:	40023000 	.word	0x40023000

08000798 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_DMA2D_Init+0x5c>)
 800079e:	4a16      	ldr	r2, [pc, #88]	; (80007f8 <MX_DMA2D_Init+0x60>)
 80007a0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_DMA2D_Init+0x5c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_DMA2D_Init+0x5c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_DMA2D_Init+0x5c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_DMA2D_Init+0x5c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_DMA2D_Init+0x5c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_DMA2D_Init+0x5c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <MX_DMA2D_Init+0x5c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80007cc:	4809      	ldr	r0, [pc, #36]	; (80007f4 <MX_DMA2D_Init+0x5c>)
 80007ce:	f002 ff09 	bl	80035e4 <HAL_DMA2D_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80007d8:	f000 fb4a 	bl	8000e70 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80007dc:	2101      	movs	r1, #1
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_DMA2D_Init+0x5c>)
 80007e0:	f003 f96e 	bl	8003ac0 <HAL_DMA2D_ConfigLayer>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80007ea:	f000 fb41 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000394 	.word	0x20000394
 80007f8:	4002b000 	.word	0x4002b000

080007fc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000800:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <MX_I2C3_Init+0x74>)
 8000802:	4a1c      	ldr	r2, [pc, #112]	; (8000874 <MX_I2C3_Init+0x78>)
 8000804:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000806:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <MX_I2C3_Init+0x74>)
 8000808:	4a1b      	ldr	r2, [pc, #108]	; (8000878 <MX_I2C3_Init+0x7c>)
 800080a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <MX_I2C3_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000812:	4b17      	ldr	r3, [pc, #92]	; (8000870 <MX_I2C3_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <MX_I2C3_Init+0x74>)
 800081a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800081e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000820:	4b13      	ldr	r3, [pc, #76]	; (8000870 <MX_I2C3_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000826:	4b12      	ldr	r3, [pc, #72]	; (8000870 <MX_I2C3_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800082c:	4b10      	ldr	r3, [pc, #64]	; (8000870 <MX_I2C3_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_I2C3_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000838:	480d      	ldr	r0, [pc, #52]	; (8000870 <MX_I2C3_Init+0x74>)
 800083a:	f003 fd41 	bl	80042c0 <HAL_I2C_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000844:	f000 fb14 	bl	8000e70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000848:	2100      	movs	r1, #0
 800084a:	4809      	ldr	r0, [pc, #36]	; (8000870 <MX_I2C3_Init+0x74>)
 800084c:	f003 fe7c 	bl	8004548 <HAL_I2CEx_ConfigAnalogFilter>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000856:	f000 fb0b 	bl	8000e70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800085a:	2100      	movs	r1, #0
 800085c:	4804      	ldr	r0, [pc, #16]	; (8000870 <MX_I2C3_Init+0x74>)
 800085e:	f003 feaf 	bl	80045c0 <HAL_I2CEx_ConfigDigitalFilter>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000868:	f000 fb02 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200003d4 	.word	0x200003d4
 8000874:	40005c00 	.word	0x40005c00
 8000878:	000186a0 	.word	0x000186a0

0800087c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08e      	sub	sp, #56	; 0x38
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2234      	movs	r2, #52	; 0x34
 8000886:	2100      	movs	r1, #0
 8000888:	4618      	mov	r0, r3
 800088a:	f008 fe5d 	bl	8009548 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800088e:	4b39      	ldr	r3, [pc, #228]	; (8000974 <MX_LTDC_Init+0xf8>)
 8000890:	4a39      	ldr	r2, [pc, #228]	; (8000978 <MX_LTDC_Init+0xfc>)
 8000892:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000894:	4b37      	ldr	r3, [pc, #220]	; (8000974 <MX_LTDC_Init+0xf8>)
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800089a:	4b36      	ldr	r3, [pc, #216]	; (8000974 <MX_LTDC_Init+0xf8>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80008a0:	4b34      	ldr	r3, [pc, #208]	; (8000974 <MX_LTDC_Init+0xf8>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008a6:	4b33      	ldr	r3, [pc, #204]	; (8000974 <MX_LTDC_Init+0xf8>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80008ac:	4b31      	ldr	r3, [pc, #196]	; (8000974 <MX_LTDC_Init+0xf8>)
 80008ae:	2209      	movs	r2, #9
 80008b0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80008b2:	4b30      	ldr	r3, [pc, #192]	; (8000974 <MX_LTDC_Init+0xf8>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80008b8:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <MX_LTDC_Init+0xf8>)
 80008ba:	221d      	movs	r2, #29
 80008bc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80008be:	4b2d      	ldr	r3, [pc, #180]	; (8000974 <MX_LTDC_Init+0xf8>)
 80008c0:	2203      	movs	r2, #3
 80008c2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80008c4:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <MX_LTDC_Init+0xf8>)
 80008c6:	f240 120d 	movw	r2, #269	; 0x10d
 80008ca:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80008cc:	4b29      	ldr	r3, [pc, #164]	; (8000974 <MX_LTDC_Init+0xf8>)
 80008ce:	f240 1243 	movw	r2, #323	; 0x143
 80008d2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80008d4:	4b27      	ldr	r3, [pc, #156]	; (8000974 <MX_LTDC_Init+0xf8>)
 80008d6:	f240 1217 	movw	r2, #279	; 0x117
 80008da:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80008dc:	4b25      	ldr	r3, [pc, #148]	; (8000974 <MX_LTDC_Init+0xf8>)
 80008de:	f240 1247 	movw	r2, #327	; 0x147
 80008e2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80008e4:	4b23      	ldr	r3, [pc, #140]	; (8000974 <MX_LTDC_Init+0xf8>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80008ec:	4b21      	ldr	r3, [pc, #132]	; (8000974 <MX_LTDC_Init+0xf8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80008f4:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <MX_LTDC_Init+0xf8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008fc:	481d      	ldr	r0, [pc, #116]	; (8000974 <MX_LTDC_Init+0xf8>)
 80008fe:	f003 fe9f 	bl	8004640 <HAL_LTDC_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000908:	f000 fab2 	bl	8000e70 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000910:	23f0      	movs	r3, #240	; 0xf0
 8000912:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000918:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800091c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800091e:	2302      	movs	r3, #2
 8000920:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000922:	23ff      	movs	r3, #255	; 0xff
 8000924:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800092a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800092e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000930:	2307      	movs	r3, #7
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000934:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800093a:	23f0      	movs	r3, #240	; 0xf0
 800093c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800093e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000942:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2200      	movs	r2, #0
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_LTDC_Init+0xf8>)
 800095e:	f003 fff7 	bl	8004950 <HAL_LTDC_ConfigLayer>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000968:	f000 fa82 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	3738      	adds	r7, #56	; 0x38
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000428 	.word	0x20000428
 8000978:	40016800 	.word	0x40016800

0800097c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_SPI5_Init+0x64>)
 8000982:	4a18      	ldr	r2, [pc, #96]	; (80009e4 <MX_SPI5_Init+0x68>)
 8000984:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_SPI5_Init+0x64>)
 8000988:	f44f 7282 	mov.w	r2, #260	; 0x104
 800098c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_SPI5_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_SPI5_Init+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_SPI5_Init+0x64>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_SPI5_Init+0x64>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_SPI5_Init+0x64>)
 80009a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009ac:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_SPI5_Init+0x64>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <MX_SPI5_Init+0x64>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_SPI5_Init+0x64>)
 80009bc:	2200      	movs	r2, #0
 80009be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <MX_SPI5_Init+0x64>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_SPI5_Init+0x64>)
 80009c8:	220a      	movs	r2, #10
 80009ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_SPI5_Init+0x64>)
 80009ce:	f005 f92a 	bl	8005c26 <HAL_SPI_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80009d8:	f000 fa4a 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000538 	.word	0x20000538
 80009e4:	40015000 	.word	0x40015000

080009e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ee:	f107 0308 	add.w	r3, r7, #8
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fc:	463b      	mov	r3, r7
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a04:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <MX_TIM1_Init+0x98>)
 8000a06:	4a1f      	ldr	r2, [pc, #124]	; (8000a84 <MX_TIM1_Init+0x9c>)
 8000a08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a0a:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <MX_TIM1_Init+0x98>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a10:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <MX_TIM1_Init+0x98>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a16:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <MX_TIM1_Init+0x98>)
 8000a18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a1c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <MX_TIM1_Init+0x98>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a24:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <MX_TIM1_Init+0x98>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <MX_TIM1_Init+0x98>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a30:	4813      	ldr	r0, [pc, #76]	; (8000a80 <MX_TIM1_Init+0x98>)
 8000a32:	f005 fed7 	bl	80067e4 <HAL_TIM_Base_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a3c:	f000 fa18 	bl	8000e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a46:	f107 0308 	add.w	r3, r7, #8
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480c      	ldr	r0, [pc, #48]	; (8000a80 <MX_TIM1_Init+0x98>)
 8000a4e:	f006 f891 	bl	8006b74 <HAL_TIM_ConfigClockSource>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a58:	f000 fa0a 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a64:	463b      	mov	r3, r7
 8000a66:	4619      	mov	r1, r3
 8000a68:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_TIM1_Init+0x98>)
 8000a6a:	f006 faad 	bl	8006fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a74:	f000 f9fc 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000590 	.word	0x20000590
 8000a84:	40010000 	.word	0x40010000

08000a88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <MX_USART1_UART_Init+0x50>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000ac0:	f006 fb12 	bl	80070e8 <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aca:	f000 f9d1 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200005d8 	.word	0x200005d8
 8000ad8:	40011000 	.word	0x40011000

08000adc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
 8000af0:	615a      	str	r2, [r3, #20]
 8000af2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000af4:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <MX_FMC_Init+0x98>)
 8000af6:	4a20      	ldr	r2, [pc, #128]	; (8000b78 <MX_FMC_Init+0x9c>)
 8000af8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000afa:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <MX_FMC_Init+0x98>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b00:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <MX_FMC_Init+0x98>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b06:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <MX_FMC_Init+0x98>)
 8000b08:	2204      	movs	r2, #4
 8000b0a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b0c:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <MX_FMC_Init+0x98>)
 8000b0e:	2210      	movs	r2, #16
 8000b10:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b12:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <MX_FMC_Init+0x98>)
 8000b14:	2240      	movs	r2, #64	; 0x40
 8000b16:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000b18:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <MX_FMC_Init+0x98>)
 8000b1a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000b1e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <MX_FMC_Init+0x98>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b26:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <MX_FMC_Init+0x98>)
 8000b28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b2c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_FMC_Init+0x98>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_FMC_Init+0x98>)
 8000b36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b3a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b40:	2307      	movs	r3, #7
 8000b42:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b44:	2304      	movs	r3, #4
 8000b46:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b48:	2307      	movs	r3, #7
 8000b4a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b54:	2302      	movs	r3, #2
 8000b56:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_FMC_Init+0x98>)
 8000b5e:	f004 ffd1 	bl	8005b04 <HAL_SDRAM_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b68:	f000 f982 	bl	8000e70 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b6c:	bf00      	nop
 8000b6e:	3720      	adds	r7, #32
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	2000061c 	.word	0x2000061c
 8000b78:	a0000140 	.word	0xa0000140

08000b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08e      	sub	sp, #56	; 0x38
 8000b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
 8000b96:	4b8a      	ldr	r3, [pc, #552]	; (8000dc0 <MX_GPIO_Init+0x244>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a89      	ldr	r2, [pc, #548]	; (8000dc0 <MX_GPIO_Init+0x244>)
 8000b9c:	f043 0304 	orr.w	r3, r3, #4
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b87      	ldr	r3, [pc, #540]	; (8000dc0 <MX_GPIO_Init+0x244>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0304 	and.w	r3, r3, #4
 8000baa:	623b      	str	r3, [r7, #32]
 8000bac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
 8000bb2:	4b83      	ldr	r3, [pc, #524]	; (8000dc0 <MX_GPIO_Init+0x244>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a82      	ldr	r2, [pc, #520]	; (8000dc0 <MX_GPIO_Init+0x244>)
 8000bb8:	f043 0320 	orr.w	r3, r3, #32
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b80      	ldr	r3, [pc, #512]	; (8000dc0 <MX_GPIO_Init+0x244>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0320 	and.w	r3, r3, #32
 8000bc6:	61fb      	str	r3, [r7, #28]
 8000bc8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61bb      	str	r3, [r7, #24]
 8000bce:	4b7c      	ldr	r3, [pc, #496]	; (8000dc0 <MX_GPIO_Init+0x244>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a7b      	ldr	r2, [pc, #492]	; (8000dc0 <MX_GPIO_Init+0x244>)
 8000bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b79      	ldr	r3, [pc, #484]	; (8000dc0 <MX_GPIO_Init+0x244>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be2:	61bb      	str	r3, [r7, #24]
 8000be4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	4b75      	ldr	r3, [pc, #468]	; (8000dc0 <MX_GPIO_Init+0x244>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a74      	ldr	r2, [pc, #464]	; (8000dc0 <MX_GPIO_Init+0x244>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b72      	ldr	r3, [pc, #456]	; (8000dc0 <MX_GPIO_Init+0x244>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b6e      	ldr	r3, [pc, #440]	; (8000dc0 <MX_GPIO_Init+0x244>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a6d      	ldr	r2, [pc, #436]	; (8000dc0 <MX_GPIO_Init+0x244>)
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b6b      	ldr	r3, [pc, #428]	; (8000dc0 <MX_GPIO_Init+0x244>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	4b67      	ldr	r3, [pc, #412]	; (8000dc0 <MX_GPIO_Init+0x244>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a66      	ldr	r2, [pc, #408]	; (8000dc0 <MX_GPIO_Init+0x244>)
 8000c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b64      	ldr	r3, [pc, #400]	; (8000dc0 <MX_GPIO_Init+0x244>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	4b60      	ldr	r3, [pc, #384]	; (8000dc0 <MX_GPIO_Init+0x244>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a5f      	ldr	r2, [pc, #380]	; (8000dc0 <MX_GPIO_Init+0x244>)
 8000c44:	f043 0310 	orr.w	r3, r3, #16
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b5d      	ldr	r3, [pc, #372]	; (8000dc0 <MX_GPIO_Init+0x244>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0310 	and.w	r3, r3, #16
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4b59      	ldr	r3, [pc, #356]	; (8000dc0 <MX_GPIO_Init+0x244>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a58      	ldr	r2, [pc, #352]	; (8000dc0 <MX_GPIO_Init+0x244>)
 8000c60:	f043 0308 	orr.w	r3, r3, #8
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b56      	ldr	r3, [pc, #344]	; (8000dc0 <MX_GPIO_Init+0x244>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0308 	and.w	r3, r3, #8
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2116      	movs	r1, #22
 8000c76:	4853      	ldr	r0, [pc, #332]	; (8000dc4 <MX_GPIO_Init+0x248>)
 8000c78:	f003 fb08 	bl	800428c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2180      	movs	r1, #128	; 0x80
 8000c80:	4851      	ldr	r0, [pc, #324]	; (8000dc8 <MX_GPIO_Init+0x24c>)
 8000c82:	f003 fb03 	bl	800428c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000c8c:	484f      	ldr	r0, [pc, #316]	; (8000dcc <MX_GPIO_Init+0x250>)
 8000c8e:	f003 fafd 	bl	800428c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000c98:	484d      	ldr	r0, [pc, #308]	; (8000dd0 <MX_GPIO_Init+0x254>)
 8000c9a:	f003 faf7 	bl	800428c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000c9e:	2316      	movs	r3, #22
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4843      	ldr	r0, [pc, #268]	; (8000dc4 <MX_GPIO_Init+0x248>)
 8000cb6:	f003 f831 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000cba:	f248 0307 	movw	r3, #32775	; 0x8007
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cc0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cce:	4619      	mov	r1, r3
 8000cd0:	483d      	ldr	r0, [pc, #244]	; (8000dc8 <MX_GPIO_Init+0x24c>)
 8000cd2:	f003 f823 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000cd6:	2380      	movs	r3, #128	; 0x80
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	4836      	ldr	r0, [pc, #216]	; (8000dc8 <MX_GPIO_Init+0x24c>)
 8000cee:	f003 f815 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000cf2:	2320      	movs	r3, #32
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cf6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d04:	4619      	mov	r1, r3
 8000d06:	482f      	ldr	r0, [pc, #188]	; (8000dc4 <MX_GPIO_Init+0x248>)
 8000d08:	f003 f808 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	482d      	ldr	r0, [pc, #180]	; (8000dd4 <MX_GPIO_Init+0x258>)
 8000d20:	f002 fffc 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000d24:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000d36:	230c      	movs	r3, #12
 8000d38:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4824      	ldr	r0, [pc, #144]	; (8000dd4 <MX_GPIO_Init+0x258>)
 8000d42:	f002 ffeb 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000d46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d58:	4619      	mov	r1, r3
 8000d5a:	481e      	ldr	r0, [pc, #120]	; (8000dd4 <MX_GPIO_Init+0x258>)
 8000d5c:	f002 ffde 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000d60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d72:	4619      	mov	r1, r3
 8000d74:	4815      	ldr	r0, [pc, #84]	; (8000dcc <MX_GPIO_Init+0x250>)
 8000d76:	f002 ffd1 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000d7a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d90:	4619      	mov	r1, r3
 8000d92:	480e      	ldr	r0, [pc, #56]	; (8000dcc <MX_GPIO_Init+0x250>)
 8000d94:	f002 ffc2 	bl	8003d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000d98:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dae:	4619      	mov	r1, r3
 8000db0:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <MX_GPIO_Init+0x254>)
 8000db2:	f002 ffb3 	bl	8003d1c <HAL_GPIO_Init>

}
 8000db6:	bf00      	nop
 8000db8:	3738      	adds	r7, #56	; 0x38
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020800 	.word	0x40020800
 8000dc8:	40020000 	.word	0x40020000
 8000dcc:	40020c00 	.word	0x40020c00
 8000dd0:	40021800 	.word	0x40021800
 8000dd4:	40020400 	.word	0x40020400

08000dd8 <HAL_LTDC_ReloadEventCallback>:
	HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
	return len;
}

void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  ReloadFlag = 1;
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <HAL_LTDC_ReloadEventCallback+0x1c>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	601a      	str	r2, [r3, #0]
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000654 	.word	0x20000654

08000df8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int test = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
	char teststr[10];
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000e04:	f04f 30ff 	mov.w	r0, #4294967295
 8000e08:	f001 f916 	bl	8002038 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000e0c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000e10:	f001 f92a 	bl	8002068 <BSP_LCD_SetBackColor>

  /* Infinite loop */
  for(;;)
  {
	  HAL_Delay(1000);
 8000e14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e18:	f002 f872 	bl	8002f00 <HAL_Delay>
	  test++;
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	617b      	str	r3, [r7, #20]
	  sprintf(teststr, "%d", test);
 8000e22:	f107 0308 	add.w	r3, r7, #8
 8000e26:	697a      	ldr	r2, [r7, #20]
 8000e28:	4907      	ldr	r1, [pc, #28]	; (8000e48 <StartDefaultTask+0x50>)
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f008 fca2 	bl	8009774 <siprintf>
	  BSP_LCD_DisplayStringAtLine(1, teststr);
 8000e30:	f107 0308 	add.w	r3, r7, #8
 8000e34:	4619      	mov	r1, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	f001 fa8a 	bl	8002350 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_FillCircle(120, 160, 10);
 8000e3c:	220a      	movs	r2, #10
 8000e3e:	21a0      	movs	r1, #160	; 0xa0
 8000e40:	2078      	movs	r0, #120	; 0x78
 8000e42:	f001 fbc5 	bl	80025d0 <BSP_LCD_FillCircle>
	  HAL_Delay(1000);
 8000e46:	e7e5      	b.n	8000e14 <StartDefaultTask+0x1c>
 8000e48:	08009f28 	.word	0x08009f28

08000e4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d101      	bne.n	8000e62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e5e:	f002 f82f 	bl	8002ec0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40001000 	.word	0x40001000

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <Error_Handler+0x8>
	...

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_MspInit+0x54>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	4a11      	ldr	r2, [pc, #68]	; (8000ed0 <HAL_MspInit+0x54>)
 8000e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e90:	6453      	str	r3, [r2, #68]	; 0x44
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HAL_MspInit+0x54>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <HAL_MspInit+0x54>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <HAL_MspInit+0x54>)
 8000ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eac:	6413      	str	r3, [r2, #64]	; 0x40
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <HAL_MspInit+0x54>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	210f      	movs	r1, #15
 8000ebe:	f06f 0001 	mvn.w	r0, #1
 8000ec2:	f002 f8f9 	bl	80030b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023800 	.word	0x40023800

08000ed4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <HAL_CRC_MspInit+0x3c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d10d      	bne.n	8000f02 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <HAL_CRC_MspInit+0x40>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a09      	ldr	r2, [pc, #36]	; (8000f14 <HAL_CRC_MspInit+0x40>)
 8000ef0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <HAL_CRC_MspInit+0x40>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40023000 	.word	0x40023000
 8000f14:	40023800 	.word	0x40023800

08000f18 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <HAL_DMA2D_MspInit+0x48>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d115      	bne.n	8000f56 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <HAL_DMA2D_MspInit+0x4c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a0c      	ldr	r2, [pc, #48]	; (8000f64 <HAL_DMA2D_MspInit+0x4c>)
 8000f34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <HAL_DMA2D_MspInit+0x4c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2105      	movs	r1, #5
 8000f4a:	205a      	movs	r0, #90	; 0x5a
 8000f4c:	f002 f8b4 	bl	80030b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f50:	205a      	movs	r0, #90	; 0x5a
 8000f52:	f002 f8cd 	bl	80030f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	4002b000 	.word	0x4002b000
 8000f64:	40023800 	.word	0x40023800

08000f68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a29      	ldr	r2, [pc, #164]	; (800102c <HAL_I2C_MspInit+0xc4>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d14b      	bne.n	8001022 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	4b28      	ldr	r3, [pc, #160]	; (8001030 <HAL_I2C_MspInit+0xc8>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a27      	ldr	r2, [pc, #156]	; (8001030 <HAL_I2C_MspInit+0xc8>)
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b25      	ldr	r3, [pc, #148]	; (8001030 <HAL_I2C_MspInit+0xc8>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	4b21      	ldr	r3, [pc, #132]	; (8001030 <HAL_I2C_MspInit+0xc8>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a20      	ldr	r2, [pc, #128]	; (8001030 <HAL_I2C_MspInit+0xc8>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <HAL_I2C_MspInit+0xc8>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000fc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc8:	2312      	movs	r3, #18
 8000fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4815      	ldr	r0, [pc, #84]	; (8001034 <HAL_I2C_MspInit+0xcc>)
 8000fe0:	f002 fe9c 	bl	8003d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000fe4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fea:	2312      	movs	r3, #18
 8000fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <HAL_I2C_MspInit+0xd0>)
 8001002:	f002 fe8b 	bl	8003d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <HAL_I2C_MspInit+0xc8>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	4a08      	ldr	r2, [pc, #32]	; (8001030 <HAL_I2C_MspInit+0xc8>)
 8001010:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001014:	6413      	str	r3, [r2, #64]	; 0x40
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_I2C_MspInit+0xc8>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001022:	bf00      	nop
 8001024:	3728      	adds	r7, #40	; 0x28
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40005c00 	.word	0x40005c00
 8001030:	40023800 	.word	0x40023800
 8001034:	40020800 	.word	0x40020800
 8001038:	40020000 	.word	0x40020000

0800103c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b09a      	sub	sp, #104	; 0x68
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001058:	2230      	movs	r2, #48	; 0x30
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f008 fa73 	bl	8009548 <memset>
  if(hltdc->Instance==LTDC)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a85      	ldr	r2, [pc, #532]	; (800127c <HAL_LTDC_MspInit+0x240>)
 8001068:	4293      	cmp	r3, r2
 800106a:	f040 8103 	bne.w	8001274 <HAL_LTDC_MspInit+0x238>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800106e:	2308      	movs	r3, #8
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001072:	23c0      	movs	r3, #192	; 0xc0
 8001074:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001076:	2304      	movs	r3, #4
 8001078:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 800107a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800107e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001084:	4618      	mov	r0, r3
 8001086:	f004 fb7d 	bl	8005784 <HAL_RCCEx_PeriphCLKConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8001090:	f7ff feee 	bl	8000e70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
 8001098:	4b79      	ldr	r3, [pc, #484]	; (8001280 <HAL_LTDC_MspInit+0x244>)
 800109a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109c:	4a78      	ldr	r2, [pc, #480]	; (8001280 <HAL_LTDC_MspInit+0x244>)
 800109e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010a2:	6453      	str	r3, [r2, #68]	; 0x44
 80010a4:	4b76      	ldr	r3, [pc, #472]	; (8001280 <HAL_LTDC_MspInit+0x244>)
 80010a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010ac:	623b      	str	r3, [r7, #32]
 80010ae:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
 80010b4:	4b72      	ldr	r3, [pc, #456]	; (8001280 <HAL_LTDC_MspInit+0x244>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b8:	4a71      	ldr	r2, [pc, #452]	; (8001280 <HAL_LTDC_MspInit+0x244>)
 80010ba:	f043 0320 	orr.w	r3, r3, #32
 80010be:	6313      	str	r3, [r2, #48]	; 0x30
 80010c0:	4b6f      	ldr	r3, [pc, #444]	; (8001280 <HAL_LTDC_MspInit+0x244>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c4:	f003 0320 	and.w	r3, r3, #32
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010cc:	2300      	movs	r3, #0
 80010ce:	61bb      	str	r3, [r7, #24]
 80010d0:	4b6b      	ldr	r3, [pc, #428]	; (8001280 <HAL_LTDC_MspInit+0x244>)
 80010d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d4:	4a6a      	ldr	r2, [pc, #424]	; (8001280 <HAL_LTDC_MspInit+0x244>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	6313      	str	r3, [r2, #48]	; 0x30
 80010dc:	4b68      	ldr	r3, [pc, #416]	; (8001280 <HAL_LTDC_MspInit+0x244>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	61bb      	str	r3, [r7, #24]
 80010e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	4b64      	ldr	r3, [pc, #400]	; (8001280 <HAL_LTDC_MspInit+0x244>)
 80010ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f0:	4a63      	ldr	r2, [pc, #396]	; (8001280 <HAL_LTDC_MspInit+0x244>)
 80010f2:	f043 0302 	orr.w	r3, r3, #2
 80010f6:	6313      	str	r3, [r2, #48]	; 0x30
 80010f8:	4b61      	ldr	r3, [pc, #388]	; (8001280 <HAL_LTDC_MspInit+0x244>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	4b5d      	ldr	r3, [pc, #372]	; (8001280 <HAL_LTDC_MspInit+0x244>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	4a5c      	ldr	r2, [pc, #368]	; (8001280 <HAL_LTDC_MspInit+0x244>)
 800110e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001112:	6313      	str	r3, [r2, #48]	; 0x30
 8001114:	4b5a      	ldr	r3, [pc, #360]	; (8001280 <HAL_LTDC_MspInit+0x244>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	4b56      	ldr	r3, [pc, #344]	; (8001280 <HAL_LTDC_MspInit+0x244>)
 8001126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001128:	4a55      	ldr	r2, [pc, #340]	; (8001280 <HAL_LTDC_MspInit+0x244>)
 800112a:	f043 0304 	orr.w	r3, r3, #4
 800112e:	6313      	str	r3, [r2, #48]	; 0x30
 8001130:	4b53      	ldr	r3, [pc, #332]	; (8001280 <HAL_LTDC_MspInit+0x244>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	4b4f      	ldr	r3, [pc, #316]	; (8001280 <HAL_LTDC_MspInit+0x244>)
 8001142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001144:	4a4e      	ldr	r2, [pc, #312]	; (8001280 <HAL_LTDC_MspInit+0x244>)
 8001146:	f043 0308 	orr.w	r3, r3, #8
 800114a:	6313      	str	r3, [r2, #48]	; 0x30
 800114c:	4b4c      	ldr	r3, [pc, #304]	; (8001280 <HAL_LTDC_MspInit+0x244>)
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800115c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800116a:	230e      	movs	r3, #14
 800116c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800116e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001172:	4619      	mov	r1, r3
 8001174:	4843      	ldr	r0, [pc, #268]	; (8001284 <HAL_LTDC_MspInit+0x248>)
 8001176:	f002 fdd1 	bl	8003d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800117a:	f641 0358 	movw	r3, #6232	; 0x1858
 800117e:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800118c:	230e      	movs	r3, #14
 800118e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001190:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001194:	4619      	mov	r1, r3
 8001196:	483c      	ldr	r0, [pc, #240]	; (8001288 <HAL_LTDC_MspInit+0x24c>)
 8001198:	f002 fdc0 	bl	8003d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800119c:	2303      	movs	r3, #3
 800119e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011ac:	2309      	movs	r3, #9
 80011ae:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011b4:	4619      	mov	r1, r3
 80011b6:	4835      	ldr	r0, [pc, #212]	; (800128c <HAL_LTDC_MspInit+0x250>)
 80011b8:	f002 fdb0 	bl	8003d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80011bc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80011c0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011ce:	230e      	movs	r3, #14
 80011d0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011d6:	4619      	mov	r1, r3
 80011d8:	482c      	ldr	r0, [pc, #176]	; (800128c <HAL_LTDC_MspInit+0x250>)
 80011da:	f002 fd9f 	bl	8003d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80011de:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80011e2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011f0:	230e      	movs	r3, #14
 80011f2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011f8:	4619      	mov	r1, r3
 80011fa:	4825      	ldr	r0, [pc, #148]	; (8001290 <HAL_LTDC_MspInit+0x254>)
 80011fc:	f002 fd8e 	bl	8003d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001200:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001204:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001212:	230e      	movs	r3, #14
 8001214:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001216:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800121a:	4619      	mov	r1, r3
 800121c:	481d      	ldr	r0, [pc, #116]	; (8001294 <HAL_LTDC_MspInit+0x258>)
 800121e:	f002 fd7d 	bl	8003d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001222:	2348      	movs	r3, #72	; 0x48
 8001224:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001232:	230e      	movs	r3, #14
 8001234:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001236:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800123a:	4619      	mov	r1, r3
 800123c:	4816      	ldr	r0, [pc, #88]	; (8001298 <HAL_LTDC_MspInit+0x25c>)
 800123e:	f002 fd6d 	bl	8003d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001242:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001246:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001254:	2309      	movs	r3, #9
 8001256:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001258:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800125c:	4619      	mov	r1, r3
 800125e:	480c      	ldr	r0, [pc, #48]	; (8001290 <HAL_LTDC_MspInit+0x254>)
 8001260:	f002 fd5c 	bl	8003d1c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	2105      	movs	r1, #5
 8001268:	2058      	movs	r0, #88	; 0x58
 800126a:	f001 ff25 	bl	80030b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800126e:	2058      	movs	r0, #88	; 0x58
 8001270:	f001 ff3e 	bl	80030f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001274:	bf00      	nop
 8001276:	3768      	adds	r7, #104	; 0x68
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40016800 	.word	0x40016800
 8001280:	40023800 	.word	0x40023800
 8001284:	40021400 	.word	0x40021400
 8001288:	40020000 	.word	0x40020000
 800128c:	40020400 	.word	0x40020400
 8001290:	40021800 	.word	0x40021800
 8001294:	40020800 	.word	0x40020800
 8001298:	40020c00 	.word	0x40020c00

0800129c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a19      	ldr	r2, [pc, #100]	; (8001320 <HAL_SPI_MspInit+0x84>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d12c      	bne.n	8001318 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	4b18      	ldr	r3, [pc, #96]	; (8001324 <HAL_SPI_MspInit+0x88>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	4a17      	ldr	r2, [pc, #92]	; (8001324 <HAL_SPI_MspInit+0x88>)
 80012c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012cc:	6453      	str	r3, [r2, #68]	; 0x44
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <HAL_SPI_MspInit+0x88>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_SPI_MspInit+0x88>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a10      	ldr	r2, [pc, #64]	; (8001324 <HAL_SPI_MspInit+0x88>)
 80012e4:	f043 0320 	orr.w	r3, r3, #32
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <HAL_SPI_MspInit+0x88>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0320 	and.w	r3, r3, #32
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80012f6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80012fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001308:	2305      	movs	r3, #5
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <HAL_SPI_MspInit+0x8c>)
 8001314:	f002 fd02 	bl	8003d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001318:	bf00      	nop
 800131a:	3728      	adds	r7, #40	; 0x28
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40015000 	.word	0x40015000
 8001324:	40023800 	.word	0x40023800
 8001328:	40021400 	.word	0x40021400

0800132c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a08      	ldr	r2, [pc, #32]	; (800135c <HAL_SPI_MspDeInit+0x30>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d10a      	bne.n	8001354 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <HAL_SPI_MspDeInit+0x34>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001342:	4a07      	ldr	r2, [pc, #28]	; (8001360 <HAL_SPI_MspDeInit+0x34>)
 8001344:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001348:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800134a:	f44f 7160 	mov.w	r1, #896	; 0x380
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <HAL_SPI_MspDeInit+0x38>)
 8001350:	f002 fe90 	bl	8004074 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40015000 	.word	0x40015000
 8001360:	40023800 	.word	0x40023800
 8001364:	40021400 	.word	0x40021400

08001368 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <HAL_TIM_Base_MspInit+0x3c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d10d      	bne.n	8001396 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <HAL_TIM_Base_MspInit+0x40>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	4a09      	ldr	r2, [pc, #36]	; (80013a8 <HAL_TIM_Base_MspInit+0x40>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6453      	str	r3, [r2, #68]	; 0x44
 800138a:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <HAL_TIM_Base_MspInit+0x40>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001396:	bf00      	nop
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40010000 	.word	0x40010000
 80013a8:	40023800 	.word	0x40023800

080013ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a1d      	ldr	r2, [pc, #116]	; (8001440 <HAL_UART_MspInit+0x94>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d134      	bne.n	8001438 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <HAL_UART_MspInit+0x98>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <HAL_UART_MspInit+0x98>)
 80013d8:	f043 0310 	orr.w	r3, r3, #16
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <HAL_UART_MspInit+0x98>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f003 0310 	and.w	r3, r3, #16
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <HAL_UART_MspInit+0x98>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a14      	ldr	r2, [pc, #80]	; (8001444 <HAL_UART_MspInit+0x98>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_UART_MspInit+0x98>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001406:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800140a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001418:	2307      	movs	r3, #7
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	4809      	ldr	r0, [pc, #36]	; (8001448 <HAL_UART_MspInit+0x9c>)
 8001424:	f002 fc7a 	bl	8003d1c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001428:	2200      	movs	r2, #0
 800142a:	2105      	movs	r1, #5
 800142c:	2025      	movs	r0, #37	; 0x25
 800142e:	f001 fe43 	bl	80030b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001432:	2025      	movs	r0, #37	; 0x25
 8001434:	f001 fe5c 	bl	80030f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001438:	bf00      	nop
 800143a:	3728      	adds	r7, #40	; 0x28
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40011000 	.word	0x40011000
 8001444:	40023800 	.word	0x40023800
 8001448:	40020000 	.word	0x40020000

0800144c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001460:	4b3b      	ldr	r3, [pc, #236]	; (8001550 <HAL_FMC_MspInit+0x104>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d16f      	bne.n	8001548 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001468:	4b39      	ldr	r3, [pc, #228]	; (8001550 <HAL_FMC_MspInit+0x104>)
 800146a:	2201      	movs	r2, #1
 800146c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	4b38      	ldr	r3, [pc, #224]	; (8001554 <HAL_FMC_MspInit+0x108>)
 8001474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001476:	4a37      	ldr	r2, [pc, #220]	; (8001554 <HAL_FMC_MspInit+0x108>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6393      	str	r3, [r2, #56]	; 0x38
 800147e:	4b35      	ldr	r3, [pc, #212]	; (8001554 <HAL_FMC_MspInit+0x108>)
 8001480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800148a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800148e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001490:	2302      	movs	r3, #2
 8001492:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001498:	2303      	movs	r3, #3
 800149a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800149c:	230c      	movs	r3, #12
 800149e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	482c      	ldr	r0, [pc, #176]	; (8001558 <HAL_FMC_MspInit+0x10c>)
 80014a6:	f002 fc39 	bl	8003d1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80014aa:	2301      	movs	r3, #1
 80014ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b6:	2303      	movs	r3, #3
 80014b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014ba:	230c      	movs	r3, #12
 80014bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	4619      	mov	r1, r3
 80014c2:	4826      	ldr	r0, [pc, #152]	; (800155c <HAL_FMC_MspInit+0x110>)
 80014c4:	f002 fc2a 	bl	8003d1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80014c8:	f248 1333 	movw	r3, #33075	; 0x8133
 80014cc:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014da:	230c      	movs	r3, #12
 80014dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	4619      	mov	r1, r3
 80014e2:	481f      	ldr	r0, [pc, #124]	; (8001560 <HAL_FMC_MspInit+0x114>)
 80014e4:	f002 fc1a 	bl	8003d1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80014e8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80014ec:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f6:	2303      	movs	r3, #3
 80014f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014fa:	230c      	movs	r3, #12
 80014fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	4619      	mov	r1, r3
 8001502:	4818      	ldr	r0, [pc, #96]	; (8001564 <HAL_FMC_MspInit+0x118>)
 8001504:	f002 fc0a 	bl	8003d1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001508:	f24c 7303 	movw	r3, #50947	; 0xc703
 800150c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001516:	2303      	movs	r3, #3
 8001518:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800151a:	230c      	movs	r3, #12
 800151c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	4619      	mov	r1, r3
 8001522:	4811      	ldr	r0, [pc, #68]	; (8001568 <HAL_FMC_MspInit+0x11c>)
 8001524:	f002 fbfa 	bl	8003d1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001528:	2360      	movs	r3, #96	; 0x60
 800152a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001534:	2303      	movs	r3, #3
 8001536:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001538:	230c      	movs	r3, #12
 800153a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	4619      	mov	r1, r3
 8001540:	480a      	ldr	r0, [pc, #40]	; (800156c <HAL_FMC_MspInit+0x120>)
 8001542:	f002 fbeb 	bl	8003d1c <HAL_GPIO_Init>
 8001546:	e000      	b.n	800154a <HAL_FMC_MspInit+0xfe>
    return;
 8001548:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000658 	.word	0x20000658
 8001554:	40023800 	.word	0x40023800
 8001558:	40021400 	.word	0x40021400
 800155c:	40020800 	.word	0x40020800
 8001560:	40021800 	.word	0x40021800
 8001564:	40021000 	.word	0x40021000
 8001568:	40020c00 	.word	0x40020c00
 800156c:	40020400 	.word	0x40020400

08001570 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001578:	f7ff ff68 	bl	800144c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08c      	sub	sp, #48	; 0x30
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001594:	2200      	movs	r2, #0
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	2036      	movs	r0, #54	; 0x36
 800159a:	f001 fd8d 	bl	80030b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800159e:	2036      	movs	r0, #54	; 0x36
 80015a0:	f001 fda6 	bl	80030f0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	4b1f      	ldr	r3, [pc, #124]	; (8001628 <HAL_InitTick+0xa4>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	4a1e      	ldr	r2, [pc, #120]	; (8001628 <HAL_InitTick+0xa4>)
 80015ae:	f043 0310 	orr.w	r3, r3, #16
 80015b2:	6413      	str	r3, [r2, #64]	; 0x40
 80015b4:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <HAL_InitTick+0xa4>)
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	f003 0310 	and.w	r3, r3, #16
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015c0:	f107 0210 	add.w	r2, r7, #16
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4611      	mov	r1, r2
 80015ca:	4618      	mov	r0, r3
 80015cc:	f004 f8a8 	bl	8005720 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80015d0:	f004 f87e 	bl	80056d0 <HAL_RCC_GetPCLK1Freq>
 80015d4:	4603      	mov	r3, r0
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015dc:	4a13      	ldr	r2, [pc, #76]	; (800162c <HAL_InitTick+0xa8>)
 80015de:	fba2 2303 	umull	r2, r3, r2, r3
 80015e2:	0c9b      	lsrs	r3, r3, #18
 80015e4:	3b01      	subs	r3, #1
 80015e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <HAL_InitTick+0xac>)
 80015ea:	4a12      	ldr	r2, [pc, #72]	; (8001634 <HAL_InitTick+0xb0>)
 80015ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <HAL_InitTick+0xac>)
 80015f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015f4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015f6:	4a0e      	ldr	r2, [pc, #56]	; (8001630 <HAL_InitTick+0xac>)
 80015f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <HAL_InitTick+0xac>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <HAL_InitTick+0xac>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001608:	4809      	ldr	r0, [pc, #36]	; (8001630 <HAL_InitTick+0xac>)
 800160a:	f005 f8eb 	bl	80067e4 <HAL_TIM_Base_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d104      	bne.n	800161e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001614:	4806      	ldr	r0, [pc, #24]	; (8001630 <HAL_InitTick+0xac>)
 8001616:	f005 f935 	bl	8006884 <HAL_TIM_Base_Start_IT>
 800161a:	4603      	mov	r3, r0
 800161c:	e000      	b.n	8001620 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
}
 8001620:	4618      	mov	r0, r3
 8001622:	3730      	adds	r7, #48	; 0x30
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40023800 	.word	0x40023800
 800162c:	431bde83 	.word	0x431bde83
 8001630:	2000065c 	.word	0x2000065c
 8001634:	40001000 	.word	0x40001000

08001638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800163c:	e7fe      	b.n	800163c <NMI_Handler+0x4>

0800163e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001642:	e7fe      	b.n	8001642 <HardFault_Handler+0x4>

08001644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <MemManage_Handler+0x4>

0800164a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800164e:	e7fe      	b.n	800164e <BusFault_Handler+0x4>

08001650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <UsageFault_Handler+0x4>

08001656 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <USART1_IRQHandler+0x10>)
 800166a:	f005 fd8b 	bl	8007184 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200005d8 	.word	0x200005d8

08001678 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <TIM6_DAC_IRQHandler+0x10>)
 800167e:	f005 f971 	bl	8006964 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000065c 	.word	0x2000065c

0800168c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <LTDC_IRQHandler+0x10>)
 8001692:	f003 f8a5 	bl	80047e0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000428 	.word	0x20000428

080016a0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <DMA2D_IRQHandler+0x10>)
 80016a6:	f002 f8fa 	bl	800389e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000394 	.word	0x20000394

080016b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016bc:	4a14      	ldr	r2, [pc, #80]	; (8001710 <_sbrk+0x5c>)
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <_sbrk+0x60>)
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <_sbrk+0x64>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <_sbrk+0x64>)
 80016d2:	4a12      	ldr	r2, [pc, #72]	; (800171c <_sbrk+0x68>)
 80016d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <_sbrk+0x64>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d207      	bcs.n	80016f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e4:	f007 fef6 	bl	80094d4 <__errno>
 80016e8:	4603      	mov	r3, r0
 80016ea:	220c      	movs	r2, #12
 80016ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
 80016f2:	e009      	b.n	8001708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <_sbrk+0x64>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fa:	4b07      	ldr	r3, [pc, #28]	; (8001718 <_sbrk+0x64>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	4a05      	ldr	r2, [pc, #20]	; (8001718 <_sbrk+0x64>)
 8001704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001706:	68fb      	ldr	r3, [r7, #12]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20030000 	.word	0x20030000
 8001714:	00000400 	.word	0x00000400
 8001718:	200006a4 	.word	0x200006a4
 800171c:	20008ad0 	.word	0x20008ad0

08001720 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <SystemInit+0x20>)
 8001726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800172a:	4a05      	ldr	r2, [pc, #20]	; (8001740 <SystemInit+0x20>)
 800172c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001730:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001744:	f8df d034 	ldr.w	sp, [pc, #52]	; 800177c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001748:	480d      	ldr	r0, [pc, #52]	; (8001780 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800174a:	490e      	ldr	r1, [pc, #56]	; (8001784 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800174c:	4a0e      	ldr	r2, [pc, #56]	; (8001788 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001750:	e002      	b.n	8001758 <LoopCopyDataInit>

08001752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001756:	3304      	adds	r3, #4

08001758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800175c:	d3f9      	bcc.n	8001752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175e:	4a0b      	ldr	r2, [pc, #44]	; (800178c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001760:	4c0b      	ldr	r4, [pc, #44]	; (8001790 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001764:	e001      	b.n	800176a <LoopFillZerobss>

08001766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001768:	3204      	adds	r2, #4

0800176a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800176c:	d3fb      	bcc.n	8001766 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800176e:	f7ff ffd7 	bl	8001720 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001772:	f007 feb5 	bl	80094e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001776:	f7fe ff41 	bl	80005fc <main>
  bx  lr    
 800177a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800177c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001784:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8001788:	0800bab0 	.word	0x0800bab0
  ldr r2, =_sbss
 800178c:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8001790:	20008acc 	.word	0x20008acc

08001794 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001794:	e7fe      	b.n	8001794 <ADC_IRQHandler>

08001796 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800179a:	f000 fa5d 	bl	8001c58 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800179e:	20ca      	movs	r0, #202	; 0xca
 80017a0:	f000 f95d 	bl	8001a5e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80017a4:	20c3      	movs	r0, #195	; 0xc3
 80017a6:	f000 f967 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80017aa:	2008      	movs	r0, #8
 80017ac:	f000 f964 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80017b0:	2050      	movs	r0, #80	; 0x50
 80017b2:	f000 f961 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80017b6:	20cf      	movs	r0, #207	; 0xcf
 80017b8:	f000 f951 	bl	8001a5e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80017bc:	2000      	movs	r0, #0
 80017be:	f000 f95b 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80017c2:	20c1      	movs	r0, #193	; 0xc1
 80017c4:	f000 f958 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80017c8:	2030      	movs	r0, #48	; 0x30
 80017ca:	f000 f955 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80017ce:	20ed      	movs	r0, #237	; 0xed
 80017d0:	f000 f945 	bl	8001a5e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80017d4:	2064      	movs	r0, #100	; 0x64
 80017d6:	f000 f94f 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80017da:	2003      	movs	r0, #3
 80017dc:	f000 f94c 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80017e0:	2012      	movs	r0, #18
 80017e2:	f000 f949 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80017e6:	2081      	movs	r0, #129	; 0x81
 80017e8:	f000 f946 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80017ec:	20e8      	movs	r0, #232	; 0xe8
 80017ee:	f000 f936 	bl	8001a5e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80017f2:	2085      	movs	r0, #133	; 0x85
 80017f4:	f000 f940 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80017f8:	2000      	movs	r0, #0
 80017fa:	f000 f93d 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80017fe:	2078      	movs	r0, #120	; 0x78
 8001800:	f000 f93a 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001804:	20cb      	movs	r0, #203	; 0xcb
 8001806:	f000 f92a 	bl	8001a5e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800180a:	2039      	movs	r0, #57	; 0x39
 800180c:	f000 f934 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001810:	202c      	movs	r0, #44	; 0x2c
 8001812:	f000 f931 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001816:	2000      	movs	r0, #0
 8001818:	f000 f92e 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800181c:	2034      	movs	r0, #52	; 0x34
 800181e:	f000 f92b 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001822:	2002      	movs	r0, #2
 8001824:	f000 f928 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001828:	20f7      	movs	r0, #247	; 0xf7
 800182a:	f000 f918 	bl	8001a5e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800182e:	2020      	movs	r0, #32
 8001830:	f000 f922 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001834:	20ea      	movs	r0, #234	; 0xea
 8001836:	f000 f912 	bl	8001a5e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800183a:	2000      	movs	r0, #0
 800183c:	f000 f91c 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001840:	2000      	movs	r0, #0
 8001842:	f000 f919 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001846:	20b1      	movs	r0, #177	; 0xb1
 8001848:	f000 f909 	bl	8001a5e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800184c:	2000      	movs	r0, #0
 800184e:	f000 f913 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001852:	201b      	movs	r0, #27
 8001854:	f000 f910 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001858:	20b6      	movs	r0, #182	; 0xb6
 800185a:	f000 f900 	bl	8001a5e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800185e:	200a      	movs	r0, #10
 8001860:	f000 f90a 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001864:	20a2      	movs	r0, #162	; 0xa2
 8001866:	f000 f907 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800186a:	20c0      	movs	r0, #192	; 0xc0
 800186c:	f000 f8f7 	bl	8001a5e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001870:	2010      	movs	r0, #16
 8001872:	f000 f901 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001876:	20c1      	movs	r0, #193	; 0xc1
 8001878:	f000 f8f1 	bl	8001a5e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800187c:	2010      	movs	r0, #16
 800187e:	f000 f8fb 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001882:	20c5      	movs	r0, #197	; 0xc5
 8001884:	f000 f8eb 	bl	8001a5e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001888:	2045      	movs	r0, #69	; 0x45
 800188a:	f000 f8f5 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800188e:	2015      	movs	r0, #21
 8001890:	f000 f8f2 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001894:	20c7      	movs	r0, #199	; 0xc7
 8001896:	f000 f8e2 	bl	8001a5e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800189a:	2090      	movs	r0, #144	; 0x90
 800189c:	f000 f8ec 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80018a0:	2036      	movs	r0, #54	; 0x36
 80018a2:	f000 f8dc 	bl	8001a5e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80018a6:	20c8      	movs	r0, #200	; 0xc8
 80018a8:	f000 f8e6 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80018ac:	20f2      	movs	r0, #242	; 0xf2
 80018ae:	f000 f8d6 	bl	8001a5e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80018b2:	2000      	movs	r0, #0
 80018b4:	f000 f8e0 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80018b8:	20b0      	movs	r0, #176	; 0xb0
 80018ba:	f000 f8d0 	bl	8001a5e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80018be:	20c2      	movs	r0, #194	; 0xc2
 80018c0:	f000 f8da 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80018c4:	20b6      	movs	r0, #182	; 0xb6
 80018c6:	f000 f8ca 	bl	8001a5e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80018ca:	200a      	movs	r0, #10
 80018cc:	f000 f8d4 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80018d0:	20a7      	movs	r0, #167	; 0xa7
 80018d2:	f000 f8d1 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80018d6:	2027      	movs	r0, #39	; 0x27
 80018d8:	f000 f8ce 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80018dc:	2004      	movs	r0, #4
 80018de:	f000 f8cb 	bl	8001a78 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80018e2:	202a      	movs	r0, #42	; 0x2a
 80018e4:	f000 f8bb 	bl	8001a5e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80018e8:	2000      	movs	r0, #0
 80018ea:	f000 f8c5 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80018ee:	2000      	movs	r0, #0
 80018f0:	f000 f8c2 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80018f4:	2000      	movs	r0, #0
 80018f6:	f000 f8bf 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80018fa:	20ef      	movs	r0, #239	; 0xef
 80018fc:	f000 f8bc 	bl	8001a78 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001900:	202b      	movs	r0, #43	; 0x2b
 8001902:	f000 f8ac 	bl	8001a5e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001906:	2000      	movs	r0, #0
 8001908:	f000 f8b6 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800190c:	2000      	movs	r0, #0
 800190e:	f000 f8b3 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001912:	2001      	movs	r0, #1
 8001914:	f000 f8b0 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001918:	203f      	movs	r0, #63	; 0x3f
 800191a:	f000 f8ad 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800191e:	20f6      	movs	r0, #246	; 0xf6
 8001920:	f000 f89d 	bl	8001a5e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001924:	2001      	movs	r0, #1
 8001926:	f000 f8a7 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800192a:	2000      	movs	r0, #0
 800192c:	f000 f8a4 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001930:	2006      	movs	r0, #6
 8001932:	f000 f8a1 	bl	8001a78 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001936:	202c      	movs	r0, #44	; 0x2c
 8001938:	f000 f891 	bl	8001a5e <ili9341_WriteReg>
  LCD_Delay(200);
 800193c:	20c8      	movs	r0, #200	; 0xc8
 800193e:	f000 fa79 	bl	8001e34 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001942:	2026      	movs	r0, #38	; 0x26
 8001944:	f000 f88b 	bl	8001a5e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001948:	2001      	movs	r0, #1
 800194a:	f000 f895 	bl	8001a78 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800194e:	20e0      	movs	r0, #224	; 0xe0
 8001950:	f000 f885 	bl	8001a5e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001954:	200f      	movs	r0, #15
 8001956:	f000 f88f 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800195a:	2029      	movs	r0, #41	; 0x29
 800195c:	f000 f88c 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001960:	2024      	movs	r0, #36	; 0x24
 8001962:	f000 f889 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001966:	200c      	movs	r0, #12
 8001968:	f000 f886 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800196c:	200e      	movs	r0, #14
 800196e:	f000 f883 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001972:	2009      	movs	r0, #9
 8001974:	f000 f880 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001978:	204e      	movs	r0, #78	; 0x4e
 800197a:	f000 f87d 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800197e:	2078      	movs	r0, #120	; 0x78
 8001980:	f000 f87a 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001984:	203c      	movs	r0, #60	; 0x3c
 8001986:	f000 f877 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800198a:	2009      	movs	r0, #9
 800198c:	f000 f874 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001990:	2013      	movs	r0, #19
 8001992:	f000 f871 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001996:	2005      	movs	r0, #5
 8001998:	f000 f86e 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800199c:	2017      	movs	r0, #23
 800199e:	f000 f86b 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80019a2:	2011      	movs	r0, #17
 80019a4:	f000 f868 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80019a8:	2000      	movs	r0, #0
 80019aa:	f000 f865 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80019ae:	20e1      	movs	r0, #225	; 0xe1
 80019b0:	f000 f855 	bl	8001a5e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80019b4:	2000      	movs	r0, #0
 80019b6:	f000 f85f 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80019ba:	2016      	movs	r0, #22
 80019bc:	f000 f85c 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80019c0:	201b      	movs	r0, #27
 80019c2:	f000 f859 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80019c6:	2004      	movs	r0, #4
 80019c8:	f000 f856 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80019cc:	2011      	movs	r0, #17
 80019ce:	f000 f853 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80019d2:	2007      	movs	r0, #7
 80019d4:	f000 f850 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80019d8:	2031      	movs	r0, #49	; 0x31
 80019da:	f000 f84d 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80019de:	2033      	movs	r0, #51	; 0x33
 80019e0:	f000 f84a 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80019e4:	2042      	movs	r0, #66	; 0x42
 80019e6:	f000 f847 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80019ea:	2005      	movs	r0, #5
 80019ec:	f000 f844 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80019f0:	200c      	movs	r0, #12
 80019f2:	f000 f841 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80019f6:	200a      	movs	r0, #10
 80019f8:	f000 f83e 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80019fc:	2028      	movs	r0, #40	; 0x28
 80019fe:	f000 f83b 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001a02:	202f      	movs	r0, #47	; 0x2f
 8001a04:	f000 f838 	bl	8001a78 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001a08:	200f      	movs	r0, #15
 8001a0a:	f000 f835 	bl	8001a78 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001a0e:	2011      	movs	r0, #17
 8001a10:	f000 f825 	bl	8001a5e <ili9341_WriteReg>
  LCD_Delay(200);
 8001a14:	20c8      	movs	r0, #200	; 0xc8
 8001a16:	f000 fa0d 	bl	8001e34 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001a1a:	2029      	movs	r0, #41	; 0x29
 8001a1c:	f000 f81f 	bl	8001a5e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001a20:	202c      	movs	r0, #44	; 0x2c
 8001a22:	f000 f81c 	bl	8001a5e <ili9341_WriteReg>
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001a2e:	f000 f913 	bl	8001c58 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001a32:	2103      	movs	r1, #3
 8001a34:	20d3      	movs	r0, #211	; 0xd3
 8001a36:	f000 f82c 	bl	8001a92 <ili9341_ReadData>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	b29b      	uxth	r3, r3
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001a46:	2029      	movs	r0, #41	; 0x29
 8001a48:	f000 f809 	bl	8001a5e <ili9341_WriteReg>
}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001a54:	2028      	movs	r0, #40	; 0x28
 8001a56:	f000 f802 	bl	8001a5e <ili9341_WriteReg>
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 f98e 	bl	8001d8c <LCD_IO_WriteReg>
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001a82:	88fb      	ldrh	r3, [r7, #6]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f000 f95f 	bl	8001d48 <LCD_IO_WriteData>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	460a      	mov	r2, r1
 8001a9c:	80fb      	strh	r3, [r7, #6]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001aa2:	797a      	ldrb	r2, [r7, #5]
 8001aa4:	88fb      	ldrh	r3, [r7, #6]
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 f991 	bl	8001dd0 <LCD_IO_ReadData>
 8001aae:	4603      	mov	r3, r0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001abc:	23f0      	movs	r3, #240	; 0xf0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001acc:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001ae0:	4819      	ldr	r0, [pc, #100]	; (8001b48 <SPIx_Init+0x6c>)
 8001ae2:	f004 fd40 	bl	8006566 <HAL_SPI_GetState>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d12b      	bne.n	8001b44 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001aec:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <SPIx_Init+0x6c>)
 8001aee:	4a17      	ldr	r2, [pc, #92]	; (8001b4c <SPIx_Init+0x70>)
 8001af0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <SPIx_Init+0x6c>)
 8001af4:	2218      	movs	r2, #24
 8001af6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001af8:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <SPIx_Init+0x6c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001afe:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <SPIx_Init+0x6c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001b04:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <SPIx_Init+0x6c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <SPIx_Init+0x6c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001b10:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <SPIx_Init+0x6c>)
 8001b12:	2207      	movs	r2, #7
 8001b14:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001b16:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <SPIx_Init+0x6c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <SPIx_Init+0x6c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <SPIx_Init+0x6c>)
 8001b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b28:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <SPIx_Init+0x6c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <SPIx_Init+0x6c>)
 8001b32:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b36:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001b38:	4803      	ldr	r0, [pc, #12]	; (8001b48 <SPIx_Init+0x6c>)
 8001b3a:	f000 f853 	bl	8001be4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001b3e:	4802      	ldr	r0, [pc, #8]	; (8001b48 <SPIx_Init+0x6c>)
 8001b40:	f004 f871 	bl	8005c26 <HAL_SPI_Init>
  } 
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	200006a8 	.word	0x200006a8
 8001b4c:	40015000 	.word	0x40015000

08001b50 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <SPIx_Read+0x38>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f107 0108 	add.w	r1, r7, #8
 8001b6a:	4808      	ldr	r0, [pc, #32]	; (8001b8c <SPIx_Read+0x3c>)
 8001b6c:	f004 fa48 	bl	8006000 <HAL_SPI_Receive>
 8001b70:	4603      	mov	r3, r0
 8001b72:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001b7a:	f000 f827 	bl	8001bcc <SPIx_Error>
  }
  
  return readvalue;
 8001b7e:	68bb      	ldr	r3, [r7, #8]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	2000003c 	.word	0x2000003c
 8001b8c:	200006a8 	.word	0x200006a8

08001b90 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <SPIx_Write+0x34>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	1db9      	adds	r1, r7, #6
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	4808      	ldr	r0, [pc, #32]	; (8001bc8 <SPIx_Write+0x38>)
 8001ba8:	f004 f8ee 	bl	8005d88 <HAL_SPI_Transmit>
 8001bac:	4603      	mov	r3, r0
 8001bae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001bb6:	f000 f809 	bl	8001bcc <SPIx_Error>
  }
}
 8001bba:	bf00      	nop
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	2000003c 	.word	0x2000003c
 8001bc8:	200006a8 	.word	0x200006a8

08001bcc <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001bd0:	4803      	ldr	r0, [pc, #12]	; (8001be0 <SPIx_Error+0x14>)
 8001bd2:	f004 f8b1 	bl	8005d38 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001bd6:	f7ff ff81 	bl	8001adc <SPIx_Init>
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200006a8 	.word	0x200006a8

08001be4 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08a      	sub	sp, #40	; 0x28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001bec:	2300      	movs	r3, #0
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <SPIx_MspInit+0x6c>)
 8001bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf4:	4a16      	ldr	r2, [pc, #88]	; (8001c50 <SPIx_MspInit+0x6c>)
 8001bf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bfa:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfc:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <SPIx_MspInit+0x6c>)
 8001bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <SPIx_MspInit+0x6c>)
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c10:	4a0f      	ldr	r2, [pc, #60]	; (8001c50 <SPIx_MspInit+0x6c>)
 8001c12:	f043 0320 	orr.w	r3, r3, #32
 8001c16:	6313      	str	r3, [r2, #48]	; 0x30
 8001c18:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <SPIx_MspInit+0x6c>)
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	f003 0320 	and.w	r3, r3, #32
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001c24:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001c32:	2301      	movs	r3, #1
 8001c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001c36:	2305      	movs	r3, #5
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4804      	ldr	r0, [pc, #16]	; (8001c54 <SPIx_MspInit+0x70>)
 8001c42:	f002 f86b 	bl	8003d1c <HAL_GPIO_Init>
}
 8001c46:	bf00      	nop
 8001c48:	3728      	adds	r7, #40	; 0x28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40021400 	.word	0x40021400

08001c58 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b088      	sub	sp, #32
 8001c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001c5e:	4b36      	ldr	r3, [pc, #216]	; (8001d38 <LCD_IO_Init+0xe0>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d164      	bne.n	8001d30 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8001c66:	4b34      	ldr	r3, [pc, #208]	; (8001d38 <LCD_IO_Init+0xe0>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	4b32      	ldr	r3, [pc, #200]	; (8001d3c <LCD_IO_Init+0xe4>)
 8001c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c74:	4a31      	ldr	r2, [pc, #196]	; (8001d3c <LCD_IO_Init+0xe4>)
 8001c76:	f043 0308 	orr.w	r3, r3, #8
 8001c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7c:	4b2f      	ldr	r3, [pc, #188]	; (8001d3c <LCD_IO_Init+0xe4>)
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001c88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001c96:	2302      	movs	r3, #2
 8001c98:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4827      	ldr	r0, [pc, #156]	; (8001d40 <LCD_IO_Init+0xe8>)
 8001ca2:	f002 f83b 	bl	8003d1c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <LCD_IO_Init+0xe4>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a23      	ldr	r2, [pc, #140]	; (8001d3c <LCD_IO_Init+0xe4>)
 8001cb0:	f043 0308 	orr.w	r3, r3, #8
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <LCD_IO_Init+0xe4>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	607b      	str	r3, [r7, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001cd4:	f107 030c 	add.w	r3, r7, #12
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4819      	ldr	r0, [pc, #100]	; (8001d40 <LCD_IO_Init+0xe8>)
 8001cdc:	f002 f81e 	bl	8003d1c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <LCD_IO_Init+0xe4>)
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce8:	4a14      	ldr	r2, [pc, #80]	; (8001d3c <LCD_IO_Init+0xe4>)
 8001cea:	f043 0304 	orr.w	r3, r3, #4
 8001cee:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <LCD_IO_Init+0xe4>)
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	603b      	str	r3, [r7, #0]
 8001cfa:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001cfc:	2304      	movs	r3, #4
 8001cfe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001d00:	2301      	movs	r3, #1
 8001d02:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	4619      	mov	r1, r3
 8001d12:	480c      	ldr	r0, [pc, #48]	; (8001d44 <LCD_IO_Init+0xec>)
 8001d14:	f002 f802 	bl	8003d1c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2104      	movs	r1, #4
 8001d1c:	4809      	ldr	r0, [pc, #36]	; (8001d44 <LCD_IO_Init+0xec>)
 8001d1e:	f002 fab5 	bl	800428c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001d22:	2201      	movs	r2, #1
 8001d24:	2104      	movs	r1, #4
 8001d26:	4807      	ldr	r0, [pc, #28]	; (8001d44 <LCD_IO_Init+0xec>)
 8001d28:	f002 fab0 	bl	800428c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001d2c:	f7ff fed6 	bl	8001adc <SPIx_Init>
  }
}
 8001d30:	bf00      	nop
 8001d32:	3720      	adds	r7, #32
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000700 	.word	0x20000700
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40020c00 	.word	0x40020c00
 8001d44:	40020800 	.word	0x40020800

08001d48 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001d52:	2201      	movs	r2, #1
 8001d54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d58:	480a      	ldr	r0, [pc, #40]	; (8001d84 <LCD_IO_WriteData+0x3c>)
 8001d5a:	f002 fa97 	bl	800428c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2104      	movs	r1, #4
 8001d62:	4809      	ldr	r0, [pc, #36]	; (8001d88 <LCD_IO_WriteData+0x40>)
 8001d64:	f002 fa92 	bl	800428c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ff10 	bl	8001b90 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001d70:	2201      	movs	r2, #1
 8001d72:	2104      	movs	r1, #4
 8001d74:	4804      	ldr	r0, [pc, #16]	; (8001d88 <LCD_IO_WriteData+0x40>)
 8001d76:	f002 fa89 	bl	800428c <HAL_GPIO_WritePin>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40020c00 	.word	0x40020c00
 8001d88:	40020800 	.word	0x40020800

08001d8c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001d96:	2200      	movs	r2, #0
 8001d98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d9c:	480a      	ldr	r0, [pc, #40]	; (8001dc8 <LCD_IO_WriteReg+0x3c>)
 8001d9e:	f002 fa75 	bl	800428c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001da2:	2200      	movs	r2, #0
 8001da4:	2104      	movs	r1, #4
 8001da6:	4809      	ldr	r0, [pc, #36]	; (8001dcc <LCD_IO_WriteReg+0x40>)
 8001da8:	f002 fa70 	bl	800428c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff feed 	bl	8001b90 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001db6:	2201      	movs	r2, #1
 8001db8:	2104      	movs	r1, #4
 8001dba:	4804      	ldr	r0, [pc, #16]	; (8001dcc <LCD_IO_WriteReg+0x40>)
 8001dbc:	f002 fa66 	bl	800428c <HAL_GPIO_WritePin>
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40020c00 	.word	0x40020c00
 8001dcc:	40020800 	.word	0x40020800

08001dd0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	460a      	mov	r2, r1
 8001dda:	80fb      	strh	r3, [r7, #6]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001de4:	2200      	movs	r2, #0
 8001de6:	2104      	movs	r1, #4
 8001de8:	4810      	ldr	r0, [pc, #64]	; (8001e2c <LCD_IO_ReadData+0x5c>)
 8001dea:	f002 fa4f 	bl	800428c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001dee:	2200      	movs	r2, #0
 8001df0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001df4:	480e      	ldr	r0, [pc, #56]	; (8001e30 <LCD_IO_ReadData+0x60>)
 8001df6:	f002 fa49 	bl	800428c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fec7 	bl	8001b90 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8001e02:	797b      	ldrb	r3, [r7, #5]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fea3 	bl	8001b50 <SPIx_Read>
 8001e0a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e12:	4807      	ldr	r0, [pc, #28]	; (8001e30 <LCD_IO_ReadData+0x60>)
 8001e14:	f002 fa3a 	bl	800428c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001e18:	2201      	movs	r2, #1
 8001e1a:	2104      	movs	r1, #4
 8001e1c:	4803      	ldr	r0, [pc, #12]	; (8001e2c <LCD_IO_ReadData+0x5c>)
 8001e1e:	f002 fa35 	bl	800428c <HAL_GPIO_WritePin>
  
  return readvalue;
 8001e22:	68fb      	ldr	r3, [r7, #12]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40020800 	.word	0x40020800
 8001e30:	40020c00 	.word	0x40020c00

08001e34 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f001 f85f 	bl	8002f00 <HAL_Delay>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8001e50:	4b2d      	ldr	r3, [pc, #180]	; (8001f08 <BSP_LCD_Init+0xbc>)
 8001e52:	4a2e      	ldr	r2, [pc, #184]	; (8001f0c <BSP_LCD_Init+0xc0>)
 8001e54:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001e56:	4b2c      	ldr	r3, [pc, #176]	; (8001f08 <BSP_LCD_Init+0xbc>)
 8001e58:	2209      	movs	r2, #9
 8001e5a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001e5c:	4b2a      	ldr	r3, [pc, #168]	; (8001f08 <BSP_LCD_Init+0xbc>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001e62:	4b29      	ldr	r3, [pc, #164]	; (8001f08 <BSP_LCD_Init+0xbc>)
 8001e64:	221d      	movs	r2, #29
 8001e66:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001e68:	4b27      	ldr	r3, [pc, #156]	; (8001f08 <BSP_LCD_Init+0xbc>)
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8001e6e:	4b26      	ldr	r3, [pc, #152]	; (8001f08 <BSP_LCD_Init+0xbc>)
 8001e70:	f240 120d 	movw	r2, #269	; 0x10d
 8001e74:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8001e76:	4b24      	ldr	r3, [pc, #144]	; (8001f08 <BSP_LCD_Init+0xbc>)
 8001e78:	f240 1243 	movw	r2, #323	; 0x143
 8001e7c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8001e7e:	4b22      	ldr	r3, [pc, #136]	; (8001f08 <BSP_LCD_Init+0xbc>)
 8001e80:	f240 1217 	movw	r2, #279	; 0x117
 8001e84:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8001e86:	4b20      	ldr	r3, [pc, #128]	; (8001f08 <BSP_LCD_Init+0xbc>)
 8001e88:	f240 1247 	movw	r2, #327	; 0x147
 8001e8c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8001e8e:	4b1e      	ldr	r3, [pc, #120]	; (8001f08 <BSP_LCD_Init+0xbc>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8001e96:	4b1c      	ldr	r3, [pc, #112]	; (8001f08 <BSP_LCD_Init+0xbc>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8001e9e:	4b1a      	ldr	r3, [pc, #104]	; (8001f08 <BSP_LCD_Init+0xbc>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001ea6:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <BSP_LCD_Init+0xc4>)
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001eac:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <BSP_LCD_Init+0xc4>)
 8001eae:	22c0      	movs	r2, #192	; 0xc0
 8001eb0:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001eb2:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <BSP_LCD_Init+0xc4>)
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001eb8:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <BSP_LCD_Init+0xc4>)
 8001eba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ebe:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8001ec0:	4813      	ldr	r0, [pc, #76]	; (8001f10 <BSP_LCD_Init+0xc4>)
 8001ec2:	f003 fc5f 	bl	8005784 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001ec6:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <BSP_LCD_Init+0xbc>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <BSP_LCD_Init+0xbc>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <BSP_LCD_Init+0xbc>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <BSP_LCD_Init+0xbc>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	611a      	str	r2, [r3, #16]
    
    MspInit();
 8001ede:	f000 fc27 	bl	8002730 <MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8001ee2:	4809      	ldr	r0, [pc, #36]	; (8001f08 <BSP_LCD_Init+0xbc>)
 8001ee4:	f002 fbac 	bl	8004640 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <BSP_LCD_Init+0xc8>)
 8001eea:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <BSP_LCD_Init+0xcc>)
 8001eec:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <BSP_LCD_Init+0xc8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8001ef6:	f000 fe09 	bl	8002b0c <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001efa:	4808      	ldr	r0, [pc, #32]	; (8001f1c <BSP_LCD_Init+0xd0>)
 8001efc:	f000 f8ce 	bl	800209c <BSP_LCD_SetFont>

  return LCD_OK;
 8001f00:	2300      	movs	r3, #0
}  
 8001f02:	4618      	mov	r0, r3
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000704 	.word	0x20000704
 8001f0c:	40016800 	.word	0x40016800
 8001f10:	20000854 	.word	0x20000854
 8001f14:	200008a0 	.word	0x200008a0
 8001f18:	20000004 	.word	0x20000004
 8001f1c:	20000040 	.word	0x20000040

08001f20 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001f24:	4b03      	ldr	r3, [pc, #12]	; (8001f34 <BSP_LCD_GetXSize+0x14>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2a:	4798      	blx	r3
 8001f2c:	4603      	mov	r3, r0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	200008a0 	.word	0x200008a0

08001f38 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None    
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001f3c:	4b03      	ldr	r3, [pc, #12]	; (8001f4c <BSP_LCD_GetYSize+0x14>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f42:	4798      	blx	r3
 8001f44:	4603      	mov	r3, r0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200008a0 	.word	0x200008a0

08001f50 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b090      	sub	sp, #64	; 0x40
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	6039      	str	r1, [r7, #0]
 8001f5a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001f60:	f7ff ffde 	bl	8001f20 <BSP_LCD_GetXSize>
 8001f64:	4603      	mov	r3, r0
 8001f66:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001f6c:	f7ff ffe4 	bl	8001f38 <BSP_LCD_GetYSize>
 8001f70:	4603      	mov	r3, r0
 8001f72:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001f7c:	23ff      	movs	r3, #255	; 0xff
 8001f7e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001f96:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001f9c:	2307      	movs	r3, #7
 8001f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001fa0:	f7ff ffbe 	bl	8001f20 <BSP_LCD_GetXSize>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001fa8:	f7ff ffc6 	bl	8001f38 <BSP_LCD_GetYSize>
 8001fac:	4603      	mov	r3, r0
 8001fae:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8001fb0:	88fa      	ldrh	r2, [r7, #6]
 8001fb2:	f107 030c 	add.w	r3, r7, #12
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4814      	ldr	r0, [pc, #80]	; (800200c <BSP_LCD_LayerDefaultInit+0xbc>)
 8001fba:	f002 fcc9 	bl	8004950 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001fbe:	88fa      	ldrh	r2, [r7, #6]
 8001fc0:	4913      	ldr	r1, [pc, #76]	; (8002010 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	4413      	add	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	3304      	adds	r3, #4
 8001fce:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001fd4:	88fa      	ldrh	r2, [r7, #6]
 8001fd6:	490e      	ldr	r1, [pc, #56]	; (8002010 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001fd8:	4613      	mov	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4413      	add	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	3308      	adds	r3, #8
 8001fe4:	4a0b      	ldr	r2, [pc, #44]	; (8002014 <BSP_LCD_LayerDefaultInit+0xc4>)
 8001fe6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001fe8:	88fa      	ldrh	r2, [r7, #6]
 8001fea:	4909      	ldr	r1, [pc, #36]	; (8002010 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001fec:	4613      	mov	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001ffa:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8001ffc:	4803      	ldr	r0, [pc, #12]	; (800200c <BSP_LCD_LayerDefaultInit+0xbc>)
 8001ffe:	f002 fce5 	bl	80049cc <HAL_LTDC_EnableDither>
}
 8002002:	bf00      	nop
 8002004:	3740      	adds	r7, #64	; 0x40
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000704 	.word	0x20000704
 8002010:	20000888 	.word	0x20000888
 8002014:	20000040 	.word	0x20000040

08002018 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002020:	4a04      	ldr	r2, [pc, #16]	; (8002034 <BSP_LCD_SelectLayer+0x1c>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6013      	str	r3, [r2, #0]
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	20000884 	.word	0x20000884

08002038 <BSP_LCD_SetTextColor>:
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <BSP_LCD_SetTextColor+0x28>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4907      	ldr	r1, [pc, #28]	; (8002064 <BSP_LCD_SetTextColor+0x2c>)
 8002046:	4613      	mov	r3, r2
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	440b      	add	r3, r1
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	601a      	str	r2, [r3, #0]
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	20000884 	.word	0x20000884
 8002064:	20000888 	.word	0x20000888

08002068 <BSP_LCD_SetBackColor>:
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <BSP_LCD_SetBackColor+0x2c>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4908      	ldr	r1, [pc, #32]	; (8002098 <BSP_LCD_SetBackColor+0x30>)
 8002076:	4613      	mov	r3, r2
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	440b      	add	r3, r1
 8002080:	3304      	adds	r3, #4
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	601a      	str	r2, [r3, #0]
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	20000884 	.word	0x20000884
 8002098:	20000888 	.word	0x20000888

0800209c <BSP_LCD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80020a4:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <BSP_LCD_SetFont+0x2c>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4908      	ldr	r1, [pc, #32]	; (80020cc <BSP_LCD_SetFont+0x30>)
 80020aa:	4613      	mov	r3, r2
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	4413      	add	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	3308      	adds	r3, #8
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	601a      	str	r2, [r3, #0]
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	20000884 	.word	0x20000884
 80020cc:	20000888 	.word	0x20000888

080020d0 <BSP_LCD_GetFont>:
  * @brief  Gets the Text Font.
  * @param  None
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80020d4:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <BSP_LCD_GetFont+0x24>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4907      	ldr	r1, [pc, #28]	; (80020f8 <BSP_LCD_GetFont+0x28>)
 80020da:	4613      	mov	r3, r2
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	3308      	adds	r3, #8
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000884 	.word	0x20000884
 80020f8:	20000888 	.word	0x20000888

080020fc <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80020fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020fe:	b085      	sub	sp, #20
 8002100:	af02      	add	r7, sp, #8
 8002102:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002104:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <BSP_LCD_Clear+0x48>)
 8002106:	681c      	ldr	r4, [r3, #0]
 8002108:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <BSP_LCD_Clear+0x48>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a0e      	ldr	r2, [pc, #56]	; (8002148 <BSP_LCD_Clear+0x4c>)
 800210e:	2134      	movs	r1, #52	; 0x34
 8002110:	fb01 f303 	mul.w	r3, r1, r3
 8002114:	4413      	add	r3, r2
 8002116:	335c      	adds	r3, #92	; 0x5c
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	461e      	mov	r6, r3
 800211c:	f7ff ff00 	bl	8001f20 <BSP_LCD_GetXSize>
 8002120:	4605      	mov	r5, r0
 8002122:	f7ff ff09 	bl	8001f38 <BSP_LCD_GetYSize>
 8002126:	4602      	mov	r2, r0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	9301      	str	r3, [sp, #4]
 800212c:	2300      	movs	r3, #0
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	4613      	mov	r3, r2
 8002132:	462a      	mov	r2, r5
 8002134:	4631      	mov	r1, r6
 8002136:	4620      	mov	r0, r4
 8002138:	f000 fcb0 	bl	8002a9c <FillBuffer>
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002144:	20000884 	.word	0x20000884
 8002148:	20000704 	.word	0x20000704

0800214c <BSP_LCD_DisplayChar>:
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800214c:	b590      	push	{r4, r7, lr}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	80fb      	strh	r3, [r7, #6]
 8002156:	460b      	mov	r3, r1
 8002158:	80bb      	strh	r3, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800215e:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <BSP_LCD_DisplayChar+0x80>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	491b      	ldr	r1, [pc, #108]	; (80021d0 <BSP_LCD_DisplayChar+0x84>)
 8002164:	4613      	mov	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	3308      	adds	r3, #8
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6819      	ldr	r1, [r3, #0]
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800217a:	4b14      	ldr	r3, [pc, #80]	; (80021cc <BSP_LCD_DisplayChar+0x80>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4c14      	ldr	r4, [pc, #80]	; (80021d0 <BSP_LCD_DisplayChar+0x84>)
 8002180:	4613      	mov	r3, r2
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4423      	add	r3, r4
 800218a:	3308      	adds	r3, #8
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002190:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002194:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <BSP_LCD_DisplayChar+0x80>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4c0d      	ldr	r4, [pc, #52]	; (80021d0 <BSP_LCD_DisplayChar+0x84>)
 800219a:	4613      	mov	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4413      	add	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4423      	add	r3, r4
 80021a4:	3308      	adds	r3, #8
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	889b      	ldrh	r3, [r3, #4]
 80021aa:	3307      	adds	r3, #7
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	da00      	bge.n	80021b2 <BSP_LCD_DisplayChar+0x66>
 80021b0:	3307      	adds	r3, #7
 80021b2:	10db      	asrs	r3, r3, #3
 80021b4:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80021b8:	18ca      	adds	r2, r1, r3
 80021ba:	88b9      	ldrh	r1, [r7, #4]
 80021bc:	88fb      	ldrh	r3, [r7, #6]
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 fbb2 	bl	8002928 <DrawChar>
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd90      	pop	{r4, r7, pc}
 80021cc:	20000884 	.word	0x20000884
 80021d0:	20000888 	.word	0x20000888

080021d4 <BSP_LCD_DisplayStringAt>:
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80021d4:	b5b0      	push	{r4, r5, r7, lr}
 80021d6:	b088      	sub	sp, #32
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60ba      	str	r2, [r7, #8]
 80021dc:	461a      	mov	r2, r3
 80021de:	4603      	mov	r3, r0
 80021e0:	81fb      	strh	r3, [r7, #14]
 80021e2:	460b      	mov	r3, r1
 80021e4:	81bb      	strh	r3, [r7, #12]
 80021e6:	4613      	mov	r3, r2
 80021e8:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80021ea:	2301      	movs	r3, #1
 80021ec:	83fb      	strh	r3, [r7, #30]
 80021ee:	2300      	movs	r3, #0
 80021f0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80021f2:	2300      	movs	r3, #0
 80021f4:	61bb      	str	r3, [r7, #24]
 80021f6:	2300      	movs	r3, #0
 80021f8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80021fe:	e002      	b.n	8002206 <BSP_LCD_DisplayStringAt+0x32>
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	3301      	adds	r3, #1
 8002204:	61bb      	str	r3, [r7, #24]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	617a      	str	r2, [r7, #20]
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f6      	bne.n	8002200 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002212:	f7ff fe85 	bl	8001f20 <BSP_LCD_GetXSize>
 8002216:	4601      	mov	r1, r0
 8002218:	4b4b      	ldr	r3, [pc, #300]	; (8002348 <BSP_LCD_DisplayStringAt+0x174>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	484b      	ldr	r0, [pc, #300]	; (800234c <BSP_LCD_DisplayStringAt+0x178>)
 800221e:	4613      	mov	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4413      	add	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4403      	add	r3, r0
 8002228:	3308      	adds	r3, #8
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	889b      	ldrh	r3, [r3, #4]
 800222e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002232:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	2b03      	cmp	r3, #3
 8002238:	d01c      	beq.n	8002274 <BSP_LCD_DisplayStringAt+0xa0>
 800223a:	2b03      	cmp	r3, #3
 800223c:	dc33      	bgt.n	80022a6 <BSP_LCD_DisplayStringAt+0xd2>
 800223e:	2b01      	cmp	r3, #1
 8002240:	d002      	beq.n	8002248 <BSP_LCD_DisplayStringAt+0x74>
 8002242:	2b02      	cmp	r3, #2
 8002244:	d019      	beq.n	800227a <BSP_LCD_DisplayStringAt+0xa6>
 8002246:	e02e      	b.n	80022a6 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	1ad1      	subs	r1, r2, r3
 800224e:	4b3e      	ldr	r3, [pc, #248]	; (8002348 <BSP_LCD_DisplayStringAt+0x174>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	483e      	ldr	r0, [pc, #248]	; (800234c <BSP_LCD_DisplayStringAt+0x178>)
 8002254:	4613      	mov	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4403      	add	r3, r0
 800225e:	3308      	adds	r3, #8
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	889b      	ldrh	r3, [r3, #4]
 8002264:	fb01 f303 	mul.w	r3, r1, r3
 8002268:	085b      	lsrs	r3, r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	89fb      	ldrh	r3, [r7, #14]
 800226e:	4413      	add	r3, r2
 8002270:	83fb      	strh	r3, [r7, #30]
      break;
 8002272:	e01b      	b.n	80022ac <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8002274:	89fb      	ldrh	r3, [r7, #14]
 8002276:	83fb      	strh	r3, [r7, #30]
      break;
 8002278:	e018      	b.n	80022ac <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	b299      	uxth	r1, r3
 8002282:	4b31      	ldr	r3, [pc, #196]	; (8002348 <BSP_LCD_DisplayStringAt+0x174>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	4831      	ldr	r0, [pc, #196]	; (800234c <BSP_LCD_DisplayStringAt+0x178>)
 8002288:	4613      	mov	r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4413      	add	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4403      	add	r3, r0
 8002292:	3308      	adds	r3, #8
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	889b      	ldrh	r3, [r3, #4]
 8002298:	fb11 f303 	smulbb	r3, r1, r3
 800229c:	b29a      	uxth	r2, r3
 800229e:	89fb      	ldrh	r3, [r7, #14]
 80022a0:	4413      	add	r3, r2
 80022a2:	83fb      	strh	r3, [r7, #30]
      break;
 80022a4:	e002      	b.n	80022ac <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 80022a6:	89fb      	ldrh	r3, [r7, #14]
 80022a8:	83fb      	strh	r3, [r7, #30]
      break;
 80022aa:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80022ac:	e01a      	b.n	80022e4 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	781a      	ldrb	r2, [r3, #0]
 80022b2:	89b9      	ldrh	r1, [r7, #12]
 80022b4:	8bfb      	ldrh	r3, [r7, #30]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff ff48 	bl	800214c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80022bc:	4b22      	ldr	r3, [pc, #136]	; (8002348 <BSP_LCD_DisplayStringAt+0x174>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4922      	ldr	r1, [pc, #136]	; (800234c <BSP_LCD_DisplayStringAt+0x178>)
 80022c2:	4613      	mov	r3, r2
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	4413      	add	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	440b      	add	r3, r1
 80022cc:	3308      	adds	r3, #8
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	889a      	ldrh	r2, [r3, #4]
 80022d2:	8bfb      	ldrh	r3, [r7, #30]
 80022d4:	4413      	add	r3, r2
 80022d6:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	3301      	adds	r3, #1
 80022dc:	60bb      	str	r3, [r7, #8]
    i++;
 80022de:	8bbb      	ldrh	r3, [r7, #28]
 80022e0:	3301      	adds	r3, #1
 80022e2:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	bf14      	ite	ne
 80022ec:	2301      	movne	r3, #1
 80022ee:	2300      	moveq	r3, #0
 80022f0:	b2dc      	uxtb	r4, r3
 80022f2:	f7ff fe15 	bl	8001f20 <BSP_LCD_GetXSize>
 80022f6:	8bb9      	ldrh	r1, [r7, #28]
 80022f8:	4b13      	ldr	r3, [pc, #76]	; (8002348 <BSP_LCD_DisplayStringAt+0x174>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4d13      	ldr	r5, [pc, #76]	; (800234c <BSP_LCD_DisplayStringAt+0x178>)
 80022fe:	4613      	mov	r3, r2
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	442b      	add	r3, r5
 8002308:	3308      	adds	r3, #8
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	889b      	ldrh	r3, [r3, #4]
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	1ac3      	subs	r3, r0, r3
 8002314:	b299      	uxth	r1, r3
 8002316:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <BSP_LCD_DisplayStringAt+0x174>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	480c      	ldr	r0, [pc, #48]	; (800234c <BSP_LCD_DisplayStringAt+0x178>)
 800231c:	4613      	mov	r3, r2
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	4413      	add	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4403      	add	r3, r0
 8002326:	3308      	adds	r3, #8
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	889b      	ldrh	r3, [r3, #4]
 800232c:	4299      	cmp	r1, r3
 800232e:	bf2c      	ite	cs
 8002330:	2301      	movcs	r3, #1
 8002332:	2300      	movcc	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	4023      	ands	r3, r4
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1b7      	bne.n	80022ae <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 800233e:	bf00      	nop
 8002340:	bf00      	nop
 8002342:	3720      	adds	r7, #32
 8002344:	46bd      	mov	sp, r7
 8002346:	bdb0      	pop	{r4, r5, r7, pc}
 8002348:	20000884 	.word	0x20000884
 800234c:	20000888 	.word	0x20000888

08002350 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	6039      	str	r1, [r7, #0]
 800235a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800235c:	f7ff feb8 	bl	80020d0 <BSP_LCD_GetFont>
 8002360:	4603      	mov	r3, r0
 8002362:	88db      	ldrh	r3, [r3, #6]
 8002364:	88fa      	ldrh	r2, [r7, #6]
 8002366:	fb12 f303 	smulbb	r3, r2, r3
 800236a:	b299      	uxth	r1, r3
 800236c:	2303      	movs	r3, #3
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	2000      	movs	r0, #0
 8002372:	f7ff ff2f 	bl	80021d4 <BSP_LCD_DisplayStringAt>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <BSP_LCD_DrawHLine>:
  * @param  Ypos: the Y position
  * @param  Length: line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002380:	b5b0      	push	{r4, r5, r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af02      	add	r7, sp, #8
 8002386:	4603      	mov	r3, r0
 8002388:	80fb      	strh	r3, [r7, #6]
 800238a:	460b      	mov	r3, r1
 800238c:	80bb      	strh	r3, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002396:	4b16      	ldr	r3, [pc, #88]	; (80023f0 <BSP_LCD_DrawHLine+0x70>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a16      	ldr	r2, [pc, #88]	; (80023f4 <BSP_LCD_DrawHLine+0x74>)
 800239c:	2134      	movs	r1, #52	; 0x34
 800239e:	fb01 f303 	mul.w	r3, r1, r3
 80023a2:	4413      	add	r3, r2
 80023a4:	335c      	adds	r3, #92	; 0x5c
 80023a6:	681c      	ldr	r4, [r3, #0]
 80023a8:	f7ff fdba 	bl	8001f20 <BSP_LCD_GetXSize>
 80023ac:	4602      	mov	r2, r0
 80023ae:	88bb      	ldrh	r3, [r7, #4]
 80023b0:	fb03 f202 	mul.w	r2, r3, r2
 80023b4:	88fb      	ldrh	r3, [r7, #6]
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4423      	add	r3, r4
 80023bc:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80023be:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <BSP_LCD_DrawHLine+0x70>)
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	68f9      	ldr	r1, [r7, #12]
 80023c4:	887c      	ldrh	r4, [r7, #2]
 80023c6:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <BSP_LCD_DrawHLine+0x70>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	4d0b      	ldr	r5, [pc, #44]	; (80023f8 <BSP_LCD_DrawHLine+0x78>)
 80023cc:	4613      	mov	r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	4413      	add	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	442b      	add	r3, r5
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	9301      	str	r3, [sp, #4]
 80023da:	2300      	movs	r3, #0
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	2301      	movs	r3, #1
 80023e0:	4622      	mov	r2, r4
 80023e2:	f000 fb5b 	bl	8002a9c <FillBuffer>
}
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bdb0      	pop	{r4, r5, r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000884 	.word	0x20000884
 80023f4:	20000704 	.word	0x20000704
 80023f8:	20000888 	.word	0x20000888

080023fc <BSP_LCD_DrawCircle>:
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80023fc:	b590      	push	{r4, r7, lr}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	80fb      	strh	r3, [r7, #6]
 8002406:	460b      	mov	r3, r1
 8002408:	80bb      	strh	r3, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 800240e:	887b      	ldrh	r3, [r7, #2]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	f1c3 0303 	rsb	r3, r3, #3
 8002416:	617b      	str	r3, [r7, #20]
  curx = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	613b      	str	r3, [r7, #16]
  cury = Radius;
 800241c:	887b      	ldrh	r3, [r7, #2]
 800241e:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8002420:	e0c7      	b.n	80025b2 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	b29a      	uxth	r2, r3
 8002426:	88fb      	ldrh	r3, [r7, #6]
 8002428:	4413      	add	r3, r2
 800242a:	b298      	uxth	r0, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	b29b      	uxth	r3, r3
 8002430:	88ba      	ldrh	r2, [r7, #4]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	b299      	uxth	r1, r3
 8002436:	4b64      	ldr	r3, [pc, #400]	; (80025c8 <BSP_LCD_DrawCircle+0x1cc>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	4c64      	ldr	r4, [pc, #400]	; (80025cc <BSP_LCD_DrawCircle+0x1d0>)
 800243c:	4613      	mov	r3, r2
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4423      	add	r3, r4
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	f000 fa47 	bl	80028dc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	b29b      	uxth	r3, r3
 8002452:	88fa      	ldrh	r2, [r7, #6]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	b298      	uxth	r0, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	b29b      	uxth	r3, r3
 800245c:	88ba      	ldrh	r2, [r7, #4]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	b299      	uxth	r1, r3
 8002462:	4b59      	ldr	r3, [pc, #356]	; (80025c8 <BSP_LCD_DrawCircle+0x1cc>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	4c59      	ldr	r4, [pc, #356]	; (80025cc <BSP_LCD_DrawCircle+0x1d0>)
 8002468:	4613      	mov	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4413      	add	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4423      	add	r3, r4
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	f000 fa31 	bl	80028dc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	b29a      	uxth	r2, r3
 800247e:	88fb      	ldrh	r3, [r7, #6]
 8002480:	4413      	add	r3, r2
 8002482:	b298      	uxth	r0, r3
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	b29b      	uxth	r3, r3
 8002488:	88ba      	ldrh	r2, [r7, #4]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	b299      	uxth	r1, r3
 800248e:	4b4e      	ldr	r3, [pc, #312]	; (80025c8 <BSP_LCD_DrawCircle+0x1cc>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	4c4e      	ldr	r4, [pc, #312]	; (80025cc <BSP_LCD_DrawCircle+0x1d0>)
 8002494:	4613      	mov	r3, r2
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	4413      	add	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4423      	add	r3, r4
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	461a      	mov	r2, r3
 80024a2:	f000 fa1b 	bl	80028dc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	88fa      	ldrh	r2, [r7, #6]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	b298      	uxth	r0, r3
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	88ba      	ldrh	r2, [r7, #4]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	b299      	uxth	r1, r3
 80024ba:	4b43      	ldr	r3, [pc, #268]	; (80025c8 <BSP_LCD_DrawCircle+0x1cc>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	4c43      	ldr	r4, [pc, #268]	; (80025cc <BSP_LCD_DrawCircle+0x1d0>)
 80024c0:	4613      	mov	r3, r2
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	4413      	add	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4423      	add	r3, r4
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	f000 fa05 	bl	80028dc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	88fb      	ldrh	r3, [r7, #6]
 80024d8:	4413      	add	r3, r2
 80024da:	b298      	uxth	r0, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	b29a      	uxth	r2, r3
 80024e0:	88bb      	ldrh	r3, [r7, #4]
 80024e2:	4413      	add	r3, r2
 80024e4:	b299      	uxth	r1, r3
 80024e6:	4b38      	ldr	r3, [pc, #224]	; (80025c8 <BSP_LCD_DrawCircle+0x1cc>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4c38      	ldr	r4, [pc, #224]	; (80025cc <BSP_LCD_DrawCircle+0x1d0>)
 80024ec:	4613      	mov	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	4413      	add	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4423      	add	r3, r4
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	f000 f9ef 	bl	80028dc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	b29b      	uxth	r3, r3
 8002502:	88fa      	ldrh	r2, [r7, #6]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	b298      	uxth	r0, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	b29a      	uxth	r2, r3
 800250c:	88bb      	ldrh	r3, [r7, #4]
 800250e:	4413      	add	r3, r2
 8002510:	b299      	uxth	r1, r3
 8002512:	4b2d      	ldr	r3, [pc, #180]	; (80025c8 <BSP_LCD_DrawCircle+0x1cc>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	4c2d      	ldr	r4, [pc, #180]	; (80025cc <BSP_LCD_DrawCircle+0x1d0>)
 8002518:	4613      	mov	r3, r2
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4423      	add	r3, r4
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	461a      	mov	r2, r3
 8002526:	f000 f9d9 	bl	80028dc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	b29a      	uxth	r2, r3
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	4413      	add	r3, r2
 8002532:	b298      	uxth	r0, r3
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	b29a      	uxth	r2, r3
 8002538:	88bb      	ldrh	r3, [r7, #4]
 800253a:	4413      	add	r3, r2
 800253c:	b299      	uxth	r1, r3
 800253e:	4b22      	ldr	r3, [pc, #136]	; (80025c8 <BSP_LCD_DrawCircle+0x1cc>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4c22      	ldr	r4, [pc, #136]	; (80025cc <BSP_LCD_DrawCircle+0x1d0>)
 8002544:	4613      	mov	r3, r2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4413      	add	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4423      	add	r3, r4
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	f000 f9c3 	bl	80028dc <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	b29b      	uxth	r3, r3
 800255a:	88fa      	ldrh	r2, [r7, #6]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	b298      	uxth	r0, r3
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	b29a      	uxth	r2, r3
 8002564:	88bb      	ldrh	r3, [r7, #4]
 8002566:	4413      	add	r3, r2
 8002568:	b299      	uxth	r1, r3
 800256a:	4b17      	ldr	r3, [pc, #92]	; (80025c8 <BSP_LCD_DrawCircle+0x1cc>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	4c17      	ldr	r4, [pc, #92]	; (80025cc <BSP_LCD_DrawCircle+0x1d0>)
 8002570:	4613      	mov	r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4423      	add	r3, r4
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	f000 f9ad 	bl	80028dc <BSP_LCD_DrawPixel>

    if (d < 0)
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	2b00      	cmp	r3, #0
 8002586:	da06      	bge.n	8002596 <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	009a      	lsls	r2, r3, #2
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	4413      	add	r3, r2
 8002590:	3306      	adds	r3, #6
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	e00a      	b.n	80025ac <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	009a      	lsls	r2, r3, #2
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	4413      	add	r3, r2
 80025a2:	330a      	adds	r3, #10
 80025a4:	617b      	str	r3, [r7, #20]
      cury--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	3b01      	subs	r3, #1
 80025aa:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	3301      	adds	r3, #1
 80025b0:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	f67f af33 	bls.w	8002422 <BSP_LCD_DrawCircle+0x26>
  } 
}
 80025bc:	bf00      	nop
 80025be:	bf00      	nop
 80025c0:	371c      	adds	r7, #28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd90      	pop	{r4, r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000884 	.word	0x20000884
 80025cc:	20000888 	.word	0x20000888

080025d0 <BSP_LCD_FillCircle>:
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	80fb      	strh	r3, [r7, #6]
 80025da:	460b      	mov	r3, r1
 80025dc:	80bb      	strh	r3, [r7, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 80025e2:	887b      	ldrh	r3, [r7, #2]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	f1c3 0303 	rsb	r3, r3, #3
 80025ea:	617b      	str	r3, [r7, #20]

  curx = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	613b      	str	r3, [r7, #16]
  cury = Radius;
 80025f0:	887b      	ldrh	r3, [r7, #2]
 80025f2:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80025f4:	4b44      	ldr	r3, [pc, #272]	; (8002708 <BSP_LCD_FillCircle+0x138>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	4944      	ldr	r1, [pc, #272]	; (800270c <BSP_LCD_FillCircle+0x13c>)
 80025fa:	4613      	mov	r3, r2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fd16 	bl	8002038 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 800260c:	e061      	b.n	80026d2 <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d021      	beq.n	8002658 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	b29b      	uxth	r3, r3
 8002618:	88fa      	ldrh	r2, [r7, #6]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	b298      	uxth	r0, r3
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	b29a      	uxth	r2, r3
 8002622:	88bb      	ldrh	r3, [r7, #4]
 8002624:	4413      	add	r3, r2
 8002626:	b299      	uxth	r1, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	b29b      	uxth	r3, r3
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	b29b      	uxth	r3, r3
 8002630:	461a      	mov	r2, r3
 8002632:	f7ff fea5 	bl	8002380 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	b29b      	uxth	r3, r3
 800263a:	88fa      	ldrh	r2, [r7, #6]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	b298      	uxth	r0, r3
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	b29b      	uxth	r3, r3
 8002644:	88ba      	ldrh	r2, [r7, #4]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	b299      	uxth	r1, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	b29b      	uxth	r3, r3
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	b29b      	uxth	r3, r3
 8002652:	461a      	mov	r2, r3
 8002654:	f7ff fe94 	bl	8002380 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d021      	beq.n	80026a2 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	b29b      	uxth	r3, r3
 8002662:	88fa      	ldrh	r2, [r7, #6]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	b298      	uxth	r0, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	b29b      	uxth	r3, r3
 800266c:	88ba      	ldrh	r2, [r7, #4]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	b299      	uxth	r1, r3
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	b29b      	uxth	r3, r3
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	b29b      	uxth	r3, r3
 800267a:	461a      	mov	r2, r3
 800267c:	f7ff fe80 	bl	8002380 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	b29b      	uxth	r3, r3
 8002684:	88fa      	ldrh	r2, [r7, #6]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	b298      	uxth	r0, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	b29a      	uxth	r2, r3
 800268e:	88bb      	ldrh	r3, [r7, #4]
 8002690:	4413      	add	r3, r2
 8002692:	b299      	uxth	r1, r3
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	b29b      	uxth	r3, r3
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	b29b      	uxth	r3, r3
 800269c:	461a      	mov	r2, r3
 800269e:	f7ff fe6f 	bl	8002380 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	da06      	bge.n	80026b6 <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	009a      	lsls	r2, r3, #2
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	4413      	add	r3, r2
 80026b0:	3306      	adds	r3, #6
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	e00a      	b.n	80026cc <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	009a      	lsls	r2, r3, #2
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	4413      	add	r3, r2
 80026c2:	330a      	adds	r3, #10
 80026c4:	617b      	str	r3, [r7, #20]
      cury--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	3b01      	subs	r3, #1
 80026ca:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	3301      	adds	r3, #1
 80026d0:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d999      	bls.n	800260e <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80026da:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <BSP_LCD_FillCircle+0x138>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	490b      	ldr	r1, [pc, #44]	; (800270c <BSP_LCD_FillCircle+0x13c>)
 80026e0:	4613      	mov	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fca3 	bl	8002038 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80026f2:	887a      	ldrh	r2, [r7, #2]
 80026f4:	88b9      	ldrh	r1, [r7, #4]
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fe7f 	bl	80023fc <BSP_LCD_DrawCircle>
}
 80026fe:	bf00      	nop
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20000884 	.word	0x20000884
 800270c:	20000888 	.word	0x20000888

08002710 <BSP_LCD_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002714:	4b05      	ldr	r3, [pc, #20]	; (800272c <BSP_LCD_DisplayOn+0x1c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800271e:	4b03      	ldr	r3, [pc, #12]	; (800272c <BSP_LCD_DisplayOn+0x1c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	4798      	blx	r3
  }
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	200008a0 	.word	0x200008a0

08002730 <MspInit>:
  * @brief  Initializes the LTDC MSP.
  * @param  None
  * @retval None
  */
static void MspInit(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08e      	sub	sp, #56	; 0x38
 8002734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __LTDC_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	623b      	str	r3, [r7, #32]
 800273a:	4b61      	ldr	r3, [pc, #388]	; (80028c0 <MspInit+0x190>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	4a60      	ldr	r2, [pc, #384]	; (80028c0 <MspInit+0x190>)
 8002740:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002744:	6453      	str	r3, [r2, #68]	; 0x44
 8002746:	4b5e      	ldr	r3, [pc, #376]	; (80028c0 <MspInit+0x190>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800274e:	623b      	str	r3, [r7, #32]
 8002750:	6a3b      	ldr	r3, [r7, #32]
  __DMA2D_CLK_ENABLE(); 
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	4b5a      	ldr	r3, [pc, #360]	; (80028c0 <MspInit+0x190>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	4a59      	ldr	r2, [pc, #356]	; (80028c0 <MspInit+0x190>)
 800275c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002760:	6313      	str	r3, [r2, #48]	; 0x30
 8002762:	4b57      	ldr	r3, [pc, #348]	; (80028c0 <MspInit+0x190>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800276a:	61fb      	str	r3, [r7, #28]
 800276c:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __GPIOA_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	61bb      	str	r3, [r7, #24]
 8002772:	4b53      	ldr	r3, [pc, #332]	; (80028c0 <MspInit+0x190>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	4a52      	ldr	r2, [pc, #328]	; (80028c0 <MspInit+0x190>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6313      	str	r3, [r2, #48]	; 0x30
 800277e:	4b50      	ldr	r3, [pc, #320]	; (80028c0 <MspInit+0x190>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	61bb      	str	r3, [r7, #24]
 8002788:	69bb      	ldr	r3, [r7, #24]
  __GPIOB_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	4b4c      	ldr	r3, [pc, #304]	; (80028c0 <MspInit+0x190>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	4a4b      	ldr	r2, [pc, #300]	; (80028c0 <MspInit+0x190>)
 8002794:	f043 0302 	orr.w	r3, r3, #2
 8002798:	6313      	str	r3, [r2, #48]	; 0x30
 800279a:	4b49      	ldr	r3, [pc, #292]	; (80028c0 <MspInit+0x190>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	697b      	ldr	r3, [r7, #20]
  __GPIOC_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	4b45      	ldr	r3, [pc, #276]	; (80028c0 <MspInit+0x190>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	4a44      	ldr	r2, [pc, #272]	; (80028c0 <MspInit+0x190>)
 80027b0:	f043 0304 	orr.w	r3, r3, #4
 80027b4:	6313      	str	r3, [r2, #48]	; 0x30
 80027b6:	4b42      	ldr	r3, [pc, #264]	; (80028c0 <MspInit+0x190>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	693b      	ldr	r3, [r7, #16]
  __GPIOD_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	4b3e      	ldr	r3, [pc, #248]	; (80028c0 <MspInit+0x190>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a3d      	ldr	r2, [pc, #244]	; (80028c0 <MspInit+0x190>)
 80027cc:	f043 0308 	orr.w	r3, r3, #8
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b3b      	ldr	r3, [pc, #236]	; (80028c0 <MspInit+0x190>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
  __GPIOF_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	4b37      	ldr	r3, [pc, #220]	; (80028c0 <MspInit+0x190>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	4a36      	ldr	r2, [pc, #216]	; (80028c0 <MspInit+0x190>)
 80027e8:	f043 0320 	orr.w	r3, r3, #32
 80027ec:	6313      	str	r3, [r2, #48]	; 0x30
 80027ee:	4b34      	ldr	r3, [pc, #208]	; (80028c0 <MspInit+0x190>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f003 0320 	and.w	r3, r3, #32
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
  __GPIOG_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	607b      	str	r3, [r7, #4]
 80027fe:	4b30      	ldr	r3, [pc, #192]	; (80028c0 <MspInit+0x190>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	4a2f      	ldr	r2, [pc, #188]	; (80028c0 <MspInit+0x190>)
 8002804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002808:	6313      	str	r3, [r2, #48]	; 0x30
 800280a:	4b2d      	ldr	r3, [pc, #180]	; (80028c0 <MspInit+0x190>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002816:	f641 0358 	movw	r3, #6232	; 0x1858
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800281c:	2302      	movs	r3, #2
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002824:	2302      	movs	r3, #2
 8002826:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002828:	230e      	movs	r3, #14
 800282a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800282c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002830:	4619      	mov	r1, r3
 8002832:	4824      	ldr	r0, [pc, #144]	; (80028c4 <MspInit+0x194>)
 8002834:	f001 fa72 	bl	8003d1c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002838:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800283e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002842:	4619      	mov	r1, r3
 8002844:	4820      	ldr	r0, [pc, #128]	; (80028c8 <MspInit+0x198>)
 8002846:	f001 fa69 	bl	8003d1c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800284a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002854:	4619      	mov	r1, r3
 8002856:	481d      	ldr	r0, [pc, #116]	; (80028cc <MspInit+0x19c>)
 8002858:	f001 fa60 	bl	8003d1c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800285c:	2348      	movs	r3, #72	; 0x48
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002864:	4619      	mov	r1, r3
 8002866:	481a      	ldr	r0, [pc, #104]	; (80028d0 <MspInit+0x1a0>)
 8002868:	f001 fa58 	bl	8003d1c <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800286c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002870:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002876:	4619      	mov	r1, r3
 8002878:	4816      	ldr	r0, [pc, #88]	; (80028d4 <MspInit+0x1a4>)
 800287a:	f001 fa4f 	bl	8003d1c <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800287e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002888:	4619      	mov	r1, r3
 800288a:	4813      	ldr	r0, [pc, #76]	; (80028d8 <MspInit+0x1a8>)
 800288c:	f001 fa46 	bl	8003d1c <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002890:	2303      	movs	r3, #3
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002894:	2309      	movs	r3, #9
 8002896:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800289c:	4619      	mov	r1, r3
 800289e:	480a      	ldr	r0, [pc, #40]	; (80028c8 <MspInit+0x198>)
 80028a0:	f001 fa3c 	bl	8003d1c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80028a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80028aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ae:	4619      	mov	r1, r3
 80028b0:	4809      	ldr	r0, [pc, #36]	; (80028d8 <MspInit+0x1a8>)
 80028b2:	f001 fa33 	bl	8003d1c <HAL_GPIO_Init>
}
 80028b6:	bf00      	nop
 80028b8:	3738      	adds	r7, #56	; 0x38
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40020000 	.word	0x40020000
 80028c8:	40020400 	.word	0x40020400
 80028cc:	40020800 	.word	0x40020800
 80028d0:	40020c00 	.word	0x40020c00
 80028d4:	40021400 	.word	0x40021400
 80028d8:	40021800 	.word	0x40021800

080028dc <BSP_LCD_DrawPixel>:
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80028dc:	b5b0      	push	{r4, r5, r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	603a      	str	r2, [r7, #0]
 80028e6:	80fb      	strh	r3, [r7, #6]
 80028e8:	460b      	mov	r3, r1
 80028ea:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <BSP_LCD_DrawPixel+0x44>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a0c      	ldr	r2, [pc, #48]	; (8002924 <BSP_LCD_DrawPixel+0x48>)
 80028f2:	2134      	movs	r1, #52	; 0x34
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	335c      	adds	r3, #92	; 0x5c
 80028fc:	681c      	ldr	r4, [r3, #0]
 80028fe:	88bd      	ldrh	r5, [r7, #4]
 8002900:	f7ff fb0e 	bl	8001f20 <BSP_LCD_GetXSize>
 8002904:	4603      	mov	r3, r0
 8002906:	fb03 f205 	mul.w	r2, r3, r5
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	4413      	add	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4423      	add	r3, r4
 8002912:	461a      	mov	r2, r3
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	6013      	str	r3, [r2, #0]
}
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bdb0      	pop	{r4, r5, r7, pc}
 8002920:	20000884 	.word	0x20000884
 8002924:	20000704 	.word	0x20000704

08002928 <DrawChar>:
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b088      	sub	sp, #32
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	603a      	str	r2, [r7, #0]
 8002932:	80fb      	strh	r3, [r7, #6]
 8002934:	460b      	mov	r3, r1
 8002936:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002938:	2300      	movs	r3, #0
 800293a:	61fb      	str	r3, [r7, #28]
 800293c:	2300      	movs	r3, #0
 800293e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8002944:	4b53      	ldr	r3, [pc, #332]	; (8002a94 <DrawChar+0x16c>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	4953      	ldr	r1, [pc, #332]	; (8002a98 <DrawChar+0x170>)
 800294a:	4613      	mov	r3, r2
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	4413      	add	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	3308      	adds	r3, #8
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	88db      	ldrh	r3, [r3, #6]
 800295a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800295c:	4b4d      	ldr	r3, [pc, #308]	; (8002a94 <DrawChar+0x16c>)
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	494d      	ldr	r1, [pc, #308]	; (8002a98 <DrawChar+0x170>)
 8002962:	4613      	mov	r3, r2
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	4413      	add	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	3308      	adds	r3, #8
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	889b      	ldrh	r3, [r3, #4]
 8002972:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8002974:	8a3b      	ldrh	r3, [r7, #16]
 8002976:	3307      	adds	r3, #7
 8002978:	2b00      	cmp	r3, #0
 800297a:	da00      	bge.n	800297e <DrawChar+0x56>
 800297c:	3307      	adds	r3, #7
 800297e:	10db      	asrs	r3, r3, #3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	b2da      	uxtb	r2, r3
 8002986:	8a3b      	ldrh	r3, [r7, #16]
 8002988:	b2db      	uxtb	r3, r3
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
 8002992:	e076      	b.n	8002a82 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002994:	8a3b      	ldrh	r3, [r7, #16]
 8002996:	3307      	adds	r3, #7
 8002998:	2b00      	cmp	r3, #0
 800299a:	da00      	bge.n	800299e <DrawChar+0x76>
 800299c:	3307      	adds	r3, #7
 800299e:	10db      	asrs	r3, r3, #3
 80029a0:	461a      	mov	r2, r3
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	fb02 f303 	mul.w	r3, r2, r3
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	4413      	add	r3, r2
 80029ac:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80029ae:	8a3b      	ldrh	r3, [r7, #16]
 80029b0:	3307      	adds	r3, #7
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	da00      	bge.n	80029b8 <DrawChar+0x90>
 80029b6:	3307      	adds	r3, #7
 80029b8:	10db      	asrs	r3, r3, #3
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d002      	beq.n	80029c4 <DrawChar+0x9c>
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d004      	beq.n	80029cc <DrawChar+0xa4>
 80029c2:	e00c      	b.n	80029de <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	617b      	str	r3, [r7, #20]
      break;
 80029ca:	e016      	b.n	80029fa <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	021b      	lsls	r3, r3, #8
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	3201      	adds	r2, #1
 80029d6:	7812      	ldrb	r2, [r2, #0]
 80029d8:	4313      	orrs	r3, r2
 80029da:	617b      	str	r3, [r7, #20]
      break;
 80029dc:	e00d      	b.n	80029fa <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	041a      	lsls	r2, r3, #16
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	3301      	adds	r3, #1
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	021b      	lsls	r3, r3, #8
 80029ec:	4313      	orrs	r3, r2
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	3202      	adds	r2, #2
 80029f2:	7812      	ldrb	r2, [r2, #0]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]
      break;
 80029f8:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80029fa:	2300      	movs	r3, #0
 80029fc:	61bb      	str	r3, [r7, #24]
 80029fe:	e036      	b.n	8002a6e <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002a00:	8a3a      	ldrh	r2, [r7, #16]
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	1ad2      	subs	r2, r2, r3
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	4413      	add	r3, r2
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d012      	beq.n	8002a42 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	88fb      	ldrh	r3, [r7, #6]
 8002a22:	4413      	add	r3, r2
 8002a24:	b298      	uxth	r0, r3
 8002a26:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <DrawChar+0x16c>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	491b      	ldr	r1, [pc, #108]	; (8002a98 <DrawChar+0x170>)
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	88bb      	ldrh	r3, [r7, #4]
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	f7ff ff4e 	bl	80028dc <BSP_LCD_DrawPixel>
 8002a40:	e012      	b.n	8002a68 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	88fb      	ldrh	r3, [r7, #6]
 8002a48:	4413      	add	r3, r2
 8002a4a:	b298      	uxth	r0, r3
 8002a4c:	4b11      	ldr	r3, [pc, #68]	; (8002a94 <DrawChar+0x16c>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	4911      	ldr	r1, [pc, #68]	; (8002a98 <DrawChar+0x170>)
 8002a52:	4613      	mov	r3, r2
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	4413      	add	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	88bb      	ldrh	r3, [r7, #4]
 8002a62:	4619      	mov	r1, r3
 8002a64:	f7ff ff3a 	bl	80028dc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	61bb      	str	r3, [r7, #24]
 8002a6e:	8a3b      	ldrh	r3, [r7, #16]
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d3c4      	bcc.n	8002a00 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8002a76:	88bb      	ldrh	r3, [r7, #4]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	8a7b      	ldrh	r3, [r7, #18]
 8002a84:	69fa      	ldr	r2, [r7, #28]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d384      	bcc.n	8002994 <DrawChar+0x6c>
  }
}
 8002a8a:	bf00      	nop
 8002a8c:	bf00      	nop
 8002a8e:	3720      	adds	r7, #32
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20000884 	.word	0x20000884
 8002a98:	20000888 	.word	0x20000888

08002a9c <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  * @retval None
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af02      	add	r7, sp, #8
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002aaa:	4b16      	ldr	r3, [pc, #88]	; (8002b04 <FillBuffer+0x68>)
 8002aac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002ab0:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002ab2:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <FillBuffer+0x68>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002ab8:	4a12      	ldr	r2, [pc, #72]	; (8002b04 <FillBuffer+0x68>)
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002abe:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <FillBuffer+0x68>)
 8002ac0:	4a11      	ldr	r2, [pc, #68]	; (8002b08 <FillBuffer+0x6c>)
 8002ac2:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002ac4:	480f      	ldr	r0, [pc, #60]	; (8002b04 <FillBuffer+0x68>)
 8002ac6:	f000 fd8d 	bl	80035e4 <HAL_DMA2D_Init>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d115      	bne.n	8002afc <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002ad0:	68f9      	ldr	r1, [r7, #12]
 8002ad2:	480c      	ldr	r0, [pc, #48]	; (8002b04 <FillBuffer+0x68>)
 8002ad4:	f000 fff4 	bl	8003ac0 <HAL_DMA2D_ConfigLayer>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10e      	bne.n	8002afc <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	69f9      	ldr	r1, [r7, #28]
 8002ae8:	4806      	ldr	r0, [pc, #24]	; (8002b04 <FillBuffer+0x68>)
 8002aea:	f000 fdc4 	bl	8003676 <HAL_DMA2D_Start>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d103      	bne.n	8002afc <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002af4:	210a      	movs	r1, #10
 8002af6:	4803      	ldr	r0, [pc, #12]	; (8002b04 <FillBuffer+0x68>)
 8002af8:	f000 fde8 	bl	80036cc <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002afc:	bf00      	nop
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20000814 	.word	0x20000814
 8002b08:	4002b000 	.word	0x4002b000

08002b0c <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param  None
  * @retval None
  */
void BSP_SDRAM_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002b10:	4b22      	ldr	r3, [pc, #136]	; (8002b9c <BSP_SDRAM_Init+0x90>)
 8002b12:	4a23      	ldr	r2, [pc, #140]	; (8002ba0 <BSP_SDRAM_Init+0x94>)
 8002b14:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002b16:	4b23      	ldr	r3, [pc, #140]	; (8002ba4 <BSP_SDRAM_Init+0x98>)
 8002b18:	2202      	movs	r2, #2
 8002b1a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002b1c:	4b21      	ldr	r3, [pc, #132]	; (8002ba4 <BSP_SDRAM_Init+0x98>)
 8002b1e:	2207      	movs	r2, #7
 8002b20:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002b22:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <BSP_SDRAM_Init+0x98>)
 8002b24:	2204      	movs	r2, #4
 8002b26:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002b28:	4b1e      	ldr	r3, [pc, #120]	; (8002ba4 <BSP_SDRAM_Init+0x98>)
 8002b2a:	2207      	movs	r2, #7
 8002b2c:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002b2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <BSP_SDRAM_Init+0x98>)
 8002b30:	2202      	movs	r2, #2
 8002b32:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002b34:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <BSP_SDRAM_Init+0x98>)
 8002b36:	2202      	movs	r2, #2
 8002b38:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002b3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ba4 <BSP_SDRAM_Init+0x98>)
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002b40:	4b16      	ldr	r3, [pc, #88]	; (8002b9c <BSP_SDRAM_Init+0x90>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002b46:	4b15      	ldr	r3, [pc, #84]	; (8002b9c <BSP_SDRAM_Init+0x90>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002b4c:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <BSP_SDRAM_Init+0x90>)
 8002b4e:	2204      	movs	r2, #4
 8002b50:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002b52:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <BSP_SDRAM_Init+0x90>)
 8002b54:	2210      	movs	r2, #16
 8002b56:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002b58:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <BSP_SDRAM_Init+0x90>)
 8002b5a:	2240      	movs	r2, #64	; 0x40
 8002b5c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002b5e:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <BSP_SDRAM_Init+0x90>)
 8002b60:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002b64:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002b66:	4b0d      	ldr	r3, [pc, #52]	; (8002b9c <BSP_SDRAM_Init+0x90>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <BSP_SDRAM_Init+0x90>)
 8002b6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b72:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002b74:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <BSP_SDRAM_Init+0x90>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002b7a:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <BSP_SDRAM_Init+0x90>)
 8002b7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b80:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  MspInit();
 8002b82:	f000 f871 	bl	8002c68 <MspInit>
  HAL_SDRAM_Init(&SdramHandle, &Timing);
 8002b86:	4907      	ldr	r1, [pc, #28]	; (8002ba4 <BSP_SDRAM_Init+0x98>)
 8002b88:	4804      	ldr	r0, [pc, #16]	; (8002b9c <BSP_SDRAM_Init+0x90>)
 8002b8a:	f002 ffbb 	bl	8005b04 <HAL_SDRAM_Init>
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002b8e:	f240 506a 	movw	r0, #1386	; 0x56a
 8002b92:	f000 f809 	bl	8002ba8 <BSP_SDRAM_Initialization_sequence>
}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	200008a4 	.word	0x200008a4
 8002ba0:	a0000140 	.word	0xa0000140
 8002ba4:	200008d8 	.word	0x200008d8

08002ba8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002bb4:	4b2a      	ldr	r3, [pc, #168]	; (8002c60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002bba:	4b29      	ldr	r3, [pc, #164]	; (8002c60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bbc:	2208      	movs	r2, #8
 8002bbe:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002bc0:	4b27      	ldr	r3, [pc, #156]	; (8002c60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002bc6:	4b26      	ldr	r3, [pc, #152]	; (8002c60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002bcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bd0:	4923      	ldr	r1, [pc, #140]	; (8002c60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bd2:	4824      	ldr	r0, [pc, #144]	; (8002c64 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002bd4:	f002 ffca 	bl	8005b6c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002bd8:	2001      	movs	r0, #1
 8002bda:	f000 f991 	bl	8002f00 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002bde:	4b20      	ldr	r3, [pc, #128]	; (8002c60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002be0:	2202      	movs	r2, #2
 8002be2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002be4:	4b1e      	ldr	r3, [pc, #120]	; (8002c60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002be6:	2208      	movs	r2, #8
 8002be8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002bea:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002bf0:	4b1b      	ldr	r3, [pc, #108]	; (8002c60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8002bf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bfa:	4919      	ldr	r1, [pc, #100]	; (8002c60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bfc:	4819      	ldr	r0, [pc, #100]	; (8002c64 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002bfe:	f002 ffb5 	bl	8005b6c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002c02:	4b17      	ldr	r3, [pc, #92]	; (8002c60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c04:	2203      	movs	r2, #3
 8002c06:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002c08:	4b15      	ldr	r3, [pc, #84]	; (8002c60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c0a:	2208      	movs	r2, #8
 8002c0c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002c0e:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c10:	2204      	movs	r2, #4
 8002c12:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002c14:	4b12      	ldr	r3, [pc, #72]	; (8002c60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002c1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c1e:	4910      	ldr	r1, [pc, #64]	; (8002c60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c20:	4810      	ldr	r0, [pc, #64]	; (8002c64 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c22:	f002 ffa3 	bl	8005b6c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002c26:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002c2a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c2e:	2204      	movs	r2, #4
 8002c30:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002c32:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c34:	2208      	movs	r2, #8
 8002c36:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002c38:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4a07      	ldr	r2, [pc, #28]	; (8002c60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c42:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002c44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c48:	4905      	ldr	r1, [pc, #20]	; (8002c60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c4a:	4806      	ldr	r0, [pc, #24]	; (8002c64 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c4c:	f002 ff8e 	bl	8005b6c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4804      	ldr	r0, [pc, #16]	; (8002c64 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c54:	f002 ffbf 	bl	8005bd6 <HAL_SDRAM_ProgramRefreshRate>
}
 8002c58:	bf00      	nop
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	200008f4 	.word	0x200008f4
 8002c64:	200008a4 	.word	0x200008a4

08002c68 <MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  None
  * @retval None
  */
static void MspInit(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08e      	sub	sp, #56	; 0x38
 8002c6c:	af00      	add	r7, sp, #0
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;
  SDRAM_HandleTypeDef  *hsdram = &SdramHandle;
 8002c6e:	4b79      	ldr	r3, [pc, #484]	; (8002e54 <MspInit+0x1ec>)
 8002c70:	637b      	str	r3, [r7, #52]	; 0x34

  /* Enable FMC clock */
  __FMC_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
 8002c76:	4b78      	ldr	r3, [pc, #480]	; (8002e58 <MspInit+0x1f0>)
 8002c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7a:	4a77      	ldr	r2, [pc, #476]	; (8002e58 <MspInit+0x1f0>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	6393      	str	r3, [r2, #56]	; 0x38
 8002c82:	4b75      	ldr	r3, [pc, #468]	; (8002e58 <MspInit+0x1f0>)
 8002c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	61fb      	str	r3, [r7, #28]
 8002c8c:	69fb      	ldr	r3, [r7, #28]

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
 8002c92:	4b71      	ldr	r3, [pc, #452]	; (8002e58 <MspInit+0x1f0>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	4a70      	ldr	r2, [pc, #448]	; (8002e58 <MspInit+0x1f0>)
 8002c98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9e:	4b6e      	ldr	r3, [pc, #440]	; (8002e58 <MspInit+0x1f0>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca6:	61bb      	str	r3, [r7, #24]
 8002ca8:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __GPIOB_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	617b      	str	r3, [r7, #20]
 8002cae:	4b6a      	ldr	r3, [pc, #424]	; (8002e58 <MspInit+0x1f0>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	4a69      	ldr	r2, [pc, #420]	; (8002e58 <MspInit+0x1f0>)
 8002cb4:	f043 0302 	orr.w	r3, r3, #2
 8002cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cba:	4b67      	ldr	r3, [pc, #412]	; (8002e58 <MspInit+0x1f0>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	697b      	ldr	r3, [r7, #20]
  __GPIOC_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	4b63      	ldr	r3, [pc, #396]	; (8002e58 <MspInit+0x1f0>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	4a62      	ldr	r2, [pc, #392]	; (8002e58 <MspInit+0x1f0>)
 8002cd0:	f043 0304 	orr.w	r3, r3, #4
 8002cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd6:	4b60      	ldr	r3, [pc, #384]	; (8002e58 <MspInit+0x1f0>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	693b      	ldr	r3, [r7, #16]
  __GPIOD_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	4b5c      	ldr	r3, [pc, #368]	; (8002e58 <MspInit+0x1f0>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	4a5b      	ldr	r2, [pc, #364]	; (8002e58 <MspInit+0x1f0>)
 8002cec:	f043 0308 	orr.w	r3, r3, #8
 8002cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf2:	4b59      	ldr	r3, [pc, #356]	; (8002e58 <MspInit+0x1f0>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	f003 0308 	and.w	r3, r3, #8
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
  __GPIOE_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	4b55      	ldr	r3, [pc, #340]	; (8002e58 <MspInit+0x1f0>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	4a54      	ldr	r2, [pc, #336]	; (8002e58 <MspInit+0x1f0>)
 8002d08:	f043 0310 	orr.w	r3, r3, #16
 8002d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0e:	4b52      	ldr	r3, [pc, #328]	; (8002e58 <MspInit+0x1f0>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	68bb      	ldr	r3, [r7, #8]
  __GPIOF_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	4b4e      	ldr	r3, [pc, #312]	; (8002e58 <MspInit+0x1f0>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	4a4d      	ldr	r2, [pc, #308]	; (8002e58 <MspInit+0x1f0>)
 8002d24:	f043 0320 	orr.w	r3, r3, #32
 8002d28:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2a:	4b4b      	ldr	r3, [pc, #300]	; (8002e58 <MspInit+0x1f0>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	f003 0320 	and.w	r3, r3, #32
 8002d32:	607b      	str	r3, [r7, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
  __GPIOG_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	603b      	str	r3, [r7, #0]
 8002d3a:	4b47      	ldr	r3, [pc, #284]	; (8002e58 <MspInit+0x1f0>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	4a46      	ldr	r2, [pc, #280]	; (8002e58 <MspInit+0x1f0>)
 8002d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d44:	6313      	str	r3, [r2, #48]	; 0x30
 8002d46:	4b44      	ldr	r3, [pc, #272]	; (8002e58 <MspInit+0x1f0>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	683b      	ldr	r3, [r7, #0]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002d52:	2302      	movs	r3, #2
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002d56:	2302      	movs	r3, #2
 8002d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002d5e:	230c      	movs	r3, #12
 8002d60:	633b      	str	r3, [r7, #48]	; 0x30

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002d62:	2360      	movs	r3, #96	; 0x60
 8002d64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002d66:	f107 0320 	add.w	r3, r7, #32
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	483b      	ldr	r0, [pc, #236]	; (8002e5c <MspInit+0x1f4>)
 8002d6e:	f000 ffd5 	bl	8003d1c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002d72:	2301      	movs	r3, #1
 8002d74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002d76:	f107 0320 	add.w	r3, r7, #32
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4838      	ldr	r0, [pc, #224]	; (8002e60 <MspInit+0x1f8>)
 8002d7e:	f000 ffcd 	bl	8003d1c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002d82:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002d86:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002d88:	f107 0320 	add.w	r3, r7, #32
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4835      	ldr	r0, [pc, #212]	; (8002e64 <MspInit+0x1fc>)
 8002d90:	f000 ffc4 	bl	8003d1c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002d94:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002d98:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002d9a:	f107 0320 	add.w	r3, r7, #32
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4831      	ldr	r0, [pc, #196]	; (8002e68 <MspInit+0x200>)
 8002da2:	f000 ffbb 	bl	8003d1c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002da6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002daa:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002dac:	f107 0320 	add.w	r3, r7, #32
 8002db0:	4619      	mov	r1, r3
 8002db2:	482e      	ldr	r0, [pc, #184]	; (8002e6c <MspInit+0x204>)
 8002db4:	f000 ffb2 	bl	8003d1c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002db8:	f248 1333 	movw	r3, #33075	; 0x8133
 8002dbc:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002dbe:	f107 0320 	add.w	r3, r7, #32
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	482a      	ldr	r0, [pc, #168]	; (8002e70 <MspInit+0x208>)
 8002dc6:	f000 ffa9 	bl	8003d1c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002dca:	4b2a      	ldr	r3, [pc, #168]	; (8002e74 <MspInit+0x20c>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002dd0:	4b28      	ldr	r3, [pc, #160]	; (8002e74 <MspInit+0x20c>)
 8002dd2:	2280      	movs	r2, #128	; 0x80
 8002dd4:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002dd6:	4b27      	ldr	r3, [pc, #156]	; (8002e74 <MspInit+0x20c>)
 8002dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ddc:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002dde:	4b25      	ldr	r3, [pc, #148]	; (8002e74 <MspInit+0x20c>)
 8002de0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002de4:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002de6:	4b23      	ldr	r3, [pc, #140]	; (8002e74 <MspInit+0x20c>)
 8002de8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002dec:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002dee:	4b21      	ldr	r3, [pc, #132]	; (8002e74 <MspInit+0x20c>)
 8002df0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002df4:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002df6:	4b1f      	ldr	r3, [pc, #124]	; (8002e74 <MspInit+0x20c>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002dfc:	4b1d      	ldr	r3, [pc, #116]	; (8002e74 <MspInit+0x20c>)
 8002dfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e02:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002e04:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <MspInit+0x20c>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002e0a:	4b1a      	ldr	r3, [pc, #104]	; (8002e74 <MspInit+0x20c>)
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002e10:	4b18      	ldr	r3, [pc, #96]	; (8002e74 <MspInit+0x20c>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002e16:	4b17      	ldr	r3, [pc, #92]	; (8002e74 <MspInit+0x20c>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002e1c:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <MspInit+0x20c>)
 8002e1e:	4a16      	ldr	r2, [pc, #88]	; (8002e78 <MspInit+0x210>)
 8002e20:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e24:	4a13      	ldr	r2, [pc, #76]	; (8002e74 <MspInit+0x20c>)
 8002e26:	631a      	str	r2, [r3, #48]	; 0x30
 8002e28:	4a12      	ldr	r2, [pc, #72]	; (8002e74 <MspInit+0x20c>)
 8002e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002e2e:	4811      	ldr	r0, [pc, #68]	; (8002e74 <MspInit+0x20c>)
 8002e30:	f000 fa36 	bl	80032a0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002e34:	480f      	ldr	r0, [pc, #60]	; (8002e74 <MspInit+0x20c>)
 8002e36:	f000 f985 	bl	8003144 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0, 0);
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	2038      	movs	r0, #56	; 0x38
 8002e40:	f000 f93a 	bl	80030b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002e44:	2038      	movs	r0, #56	; 0x38
 8002e46:	f000 f953 	bl	80030f0 <HAL_NVIC_EnableIRQ>
}
 8002e4a:	bf00      	nop
 8002e4c:	3738      	adds	r7, #56	; 0x38
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	200008a4 	.word	0x200008a4
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	40020400 	.word	0x40020400
 8002e60:	40020800 	.word	0x40020800
 8002e64:	40020c00 	.word	0x40020c00
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	40021400 	.word	0x40021400
 8002e70:	40021800 	.word	0x40021800
 8002e74:	20000904 	.word	0x20000904
 8002e78:	40026410 	.word	0x40026410

08002e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e80:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <HAL_Init+0x40>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a0d      	ldr	r2, [pc, #52]	; (8002ebc <HAL_Init+0x40>)
 8002e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <HAL_Init+0x40>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <HAL_Init+0x40>)
 8002e92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e98:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <HAL_Init+0x40>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a07      	ldr	r2, [pc, #28]	; (8002ebc <HAL_Init+0x40>)
 8002e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ea4:	2003      	movs	r0, #3
 8002ea6:	f000 f8fc 	bl	80030a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eaa:	200f      	movs	r0, #15
 8002eac:	f7fe fb6a 	bl	8001584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002eb0:	f7fd ffe4 	bl	8000e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40023c00 	.word	0x40023c00

08002ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ec4:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <HAL_IncTick+0x20>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <HAL_IncTick+0x24>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4413      	add	r3, r2
 8002ed0:	4a04      	ldr	r2, [pc, #16]	; (8002ee4 <HAL_IncTick+0x24>)
 8002ed2:	6013      	str	r3, [r2, #0]
}
 8002ed4:	bf00      	nop
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	2000004c 	.word	0x2000004c
 8002ee4:	20000964 	.word	0x20000964

08002ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  return uwTick;
 8002eec:	4b03      	ldr	r3, [pc, #12]	; (8002efc <HAL_GetTick+0x14>)
 8002eee:	681b      	ldr	r3, [r3, #0]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	20000964 	.word	0x20000964

08002f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f08:	f7ff ffee 	bl	8002ee8 <HAL_GetTick>
 8002f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f18:	d005      	beq.n	8002f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f1a:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <HAL_Delay+0x44>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4413      	add	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f26:	bf00      	nop
 8002f28:	f7ff ffde 	bl	8002ee8 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d8f7      	bhi.n	8002f28 <HAL_Delay+0x28>
  {
  }
}
 8002f38:	bf00      	nop
 8002f3a:	bf00      	nop
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	2000004c 	.word	0x2000004c

08002f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f58:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <__NVIC_SetPriorityGrouping+0x44>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f64:	4013      	ands	r3, r2
 8002f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f7a:	4a04      	ldr	r2, [pc, #16]	; (8002f8c <__NVIC_SetPriorityGrouping+0x44>)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	60d3      	str	r3, [r2, #12]
}
 8002f80:	bf00      	nop
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	e000ed00 	.word	0xe000ed00

08002f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f94:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	0a1b      	lsrs	r3, r3, #8
 8002f9a:	f003 0307 	and.w	r3, r3, #7
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	e000ed00 	.word	0xe000ed00

08002fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	db0b      	blt.n	8002fd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	f003 021f 	and.w	r2, r3, #31
 8002fc4:	4907      	ldr	r1, [pc, #28]	; (8002fe4 <__NVIC_EnableIRQ+0x38>)
 8002fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	2001      	movs	r0, #1
 8002fce:	fa00 f202 	lsl.w	r2, r0, r2
 8002fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	e000e100 	.word	0xe000e100

08002fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	6039      	str	r1, [r7, #0]
 8002ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	db0a      	blt.n	8003012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	490c      	ldr	r1, [pc, #48]	; (8003034 <__NVIC_SetPriority+0x4c>)
 8003002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003006:	0112      	lsls	r2, r2, #4
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	440b      	add	r3, r1
 800300c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003010:	e00a      	b.n	8003028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	b2da      	uxtb	r2, r3
 8003016:	4908      	ldr	r1, [pc, #32]	; (8003038 <__NVIC_SetPriority+0x50>)
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	3b04      	subs	r3, #4
 8003020:	0112      	lsls	r2, r2, #4
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	440b      	add	r3, r1
 8003026:	761a      	strb	r2, [r3, #24]
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	e000e100 	.word	0xe000e100
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800303c:	b480      	push	{r7}
 800303e:	b089      	sub	sp, #36	; 0x24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f1c3 0307 	rsb	r3, r3, #7
 8003056:	2b04      	cmp	r3, #4
 8003058:	bf28      	it	cs
 800305a:	2304      	movcs	r3, #4
 800305c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	3304      	adds	r3, #4
 8003062:	2b06      	cmp	r3, #6
 8003064:	d902      	bls.n	800306c <NVIC_EncodePriority+0x30>
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	3b03      	subs	r3, #3
 800306a:	e000      	b.n	800306e <NVIC_EncodePriority+0x32>
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003070:	f04f 32ff 	mov.w	r2, #4294967295
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43da      	mvns	r2, r3
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	401a      	ands	r2, r3
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003084:	f04f 31ff 	mov.w	r1, #4294967295
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	fa01 f303 	lsl.w	r3, r1, r3
 800308e:	43d9      	mvns	r1, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003094:	4313      	orrs	r3, r2
         );
}
 8003096:	4618      	mov	r0, r3
 8003098:	3724      	adds	r7, #36	; 0x24
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7ff ff4c 	bl	8002f48 <__NVIC_SetPriorityGrouping>
}
 80030b0:	bf00      	nop
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
 80030c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030ca:	f7ff ff61 	bl	8002f90 <__NVIC_GetPriorityGrouping>
 80030ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	68b9      	ldr	r1, [r7, #8]
 80030d4:	6978      	ldr	r0, [r7, #20]
 80030d6:	f7ff ffb1 	bl	800303c <NVIC_EncodePriority>
 80030da:	4602      	mov	r2, r0
 80030dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030e0:	4611      	mov	r1, r2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff ff80 	bl	8002fe8 <__NVIC_SetPriority>
}
 80030e8:	bf00      	nop
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff ff54 	bl	8002fac <__NVIC_EnableIRQ>
}
 8003104:	bf00      	nop
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e00e      	b.n	800313c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	795b      	ldrb	r3, [r3, #5]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d105      	bne.n	8003134 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7fd fed0 	bl	8000ed4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003150:	f7ff feca 	bl	8002ee8 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e099      	b.n	8003294 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2202      	movs	r2, #2
 8003164:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0201 	bic.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003180:	e00f      	b.n	80031a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003182:	f7ff feb1 	bl	8002ee8 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b05      	cmp	r3, #5
 800318e:	d908      	bls.n	80031a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2220      	movs	r2, #32
 8003194:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2203      	movs	r2, #3
 800319a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e078      	b.n	8003294 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1e8      	bne.n	8003182 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	4b38      	ldr	r3, [pc, #224]	; (800329c <HAL_DMA_Init+0x158>)
 80031bc:	4013      	ands	r3, r2
 80031be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d107      	bne.n	800320c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003204:	4313      	orrs	r3, r2
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4313      	orrs	r3, r2
 800320a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f023 0307 	bic.w	r3, r3, #7
 8003222:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	4313      	orrs	r3, r2
 800322c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	2b04      	cmp	r3, #4
 8003234:	d117      	bne.n	8003266 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4313      	orrs	r3, r2
 800323e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00e      	beq.n	8003266 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f94f 	bl	80034ec <DMA_CheckFifoParam>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d008      	beq.n	8003266 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2240      	movs	r2, #64	; 0x40
 8003258:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003262:	2301      	movs	r3, #1
 8003264:	e016      	b.n	8003294 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f906 	bl	8003480 <DMA_CalcBaseAndBitshift>
 8003274:	4603      	mov	r3, r0
 8003276:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327c:	223f      	movs	r2, #63	; 0x3f
 800327e:	409a      	lsls	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	f010803f 	.word	0xf010803f

080032a0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e050      	b.n	8003354 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d101      	bne.n	80032c2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80032be:	2302      	movs	r3, #2
 80032c0:	e048      	b.n	8003354 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0201 	bic.w	r2, r2, #1
 80032d0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2200      	movs	r2, #0
 80032e0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2200      	movs	r2, #0
 80032e8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2200      	movs	r2, #0
 80032f0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2200      	movs	r2, #0
 80032f8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2221      	movs	r2, #33	; 0x21
 8003300:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f8bc 	bl	8003480 <DMA_CalcBaseAndBitshift>
 8003308:	4603      	mov	r3, r0
 800330a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003334:	223f      	movs	r2, #63	; 0x3f
 8003336:	409a      	lsls	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003368:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800336a:	f7ff fdbd 	bl	8002ee8 <HAL_GetTick>
 800336e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d008      	beq.n	800338e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2280      	movs	r2, #128	; 0x80
 8003380:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e052      	b.n	8003434 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0216 	bic.w	r2, r2, #22
 800339c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695a      	ldr	r2, [r3, #20]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d103      	bne.n	80033be <HAL_DMA_Abort+0x62>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d007      	beq.n	80033ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0208 	bic.w	r2, r2, #8
 80033cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0201 	bic.w	r2, r2, #1
 80033dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033de:	e013      	b.n	8003408 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033e0:	f7ff fd82 	bl	8002ee8 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b05      	cmp	r3, #5
 80033ec:	d90c      	bls.n	8003408 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2220      	movs	r2, #32
 80033f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2203      	movs	r2, #3
 80033f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e015      	b.n	8003434 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1e4      	bne.n	80033e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341a:	223f      	movs	r2, #63	; 0x3f
 800341c:	409a      	lsls	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d004      	beq.n	800345a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2280      	movs	r2, #128	; 0x80
 8003454:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e00c      	b.n	8003474 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2205      	movs	r2, #5
 800345e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0201 	bic.w	r2, r2, #1
 8003470:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	3b10      	subs	r3, #16
 8003490:	4a14      	ldr	r2, [pc, #80]	; (80034e4 <DMA_CalcBaseAndBitshift+0x64>)
 8003492:	fba2 2303 	umull	r2, r3, r2, r3
 8003496:	091b      	lsrs	r3, r3, #4
 8003498:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800349a:	4a13      	ldr	r2, [pc, #76]	; (80034e8 <DMA_CalcBaseAndBitshift+0x68>)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4413      	add	r3, r2
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	d909      	bls.n	80034c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034b6:	f023 0303 	bic.w	r3, r3, #3
 80034ba:	1d1a      	adds	r2, r3, #4
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	659a      	str	r2, [r3, #88]	; 0x58
 80034c0:	e007      	b.n	80034d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034ca:	f023 0303 	bic.w	r3, r3, #3
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	aaaaaaab 	.word	0xaaaaaaab
 80034e8:	0800ba04 	.word	0x0800ba04

080034ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d11f      	bne.n	8003546 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2b03      	cmp	r3, #3
 800350a:	d856      	bhi.n	80035ba <DMA_CheckFifoParam+0xce>
 800350c:	a201      	add	r2, pc, #4	; (adr r2, 8003514 <DMA_CheckFifoParam+0x28>)
 800350e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003512:	bf00      	nop
 8003514:	08003525 	.word	0x08003525
 8003518:	08003537 	.word	0x08003537
 800351c:	08003525 	.word	0x08003525
 8003520:	080035bb 	.word	0x080035bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d046      	beq.n	80035be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003534:	e043      	b.n	80035be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800353e:	d140      	bne.n	80035c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003544:	e03d      	b.n	80035c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800354e:	d121      	bne.n	8003594 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2b03      	cmp	r3, #3
 8003554:	d837      	bhi.n	80035c6 <DMA_CheckFifoParam+0xda>
 8003556:	a201      	add	r2, pc, #4	; (adr r2, 800355c <DMA_CheckFifoParam+0x70>)
 8003558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355c:	0800356d 	.word	0x0800356d
 8003560:	08003573 	.word	0x08003573
 8003564:	0800356d 	.word	0x0800356d
 8003568:	08003585 	.word	0x08003585
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	73fb      	strb	r3, [r7, #15]
      break;
 8003570:	e030      	b.n	80035d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003576:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d025      	beq.n	80035ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003582:	e022      	b.n	80035ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800358c:	d11f      	bne.n	80035ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003592:	e01c      	b.n	80035ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2b02      	cmp	r3, #2
 8003598:	d903      	bls.n	80035a2 <DMA_CheckFifoParam+0xb6>
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b03      	cmp	r3, #3
 800359e:	d003      	beq.n	80035a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035a0:	e018      	b.n	80035d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	73fb      	strb	r3, [r7, #15]
      break;
 80035a6:	e015      	b.n	80035d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00e      	beq.n	80035d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	73fb      	strb	r3, [r7, #15]
      break;
 80035b8:	e00b      	b.n	80035d2 <DMA_CheckFifoParam+0xe6>
      break;
 80035ba:	bf00      	nop
 80035bc:	e00a      	b.n	80035d4 <DMA_CheckFifoParam+0xe8>
      break;
 80035be:	bf00      	nop
 80035c0:	e008      	b.n	80035d4 <DMA_CheckFifoParam+0xe8>
      break;
 80035c2:	bf00      	nop
 80035c4:	e006      	b.n	80035d4 <DMA_CheckFifoParam+0xe8>
      break;
 80035c6:	bf00      	nop
 80035c8:	e004      	b.n	80035d4 <DMA_CheckFifoParam+0xe8>
      break;
 80035ca:	bf00      	nop
 80035cc:	e002      	b.n	80035d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80035ce:	bf00      	nop
 80035d0:	e000      	b.n	80035d4 <DMA_CheckFifoParam+0xe8>
      break;
 80035d2:	bf00      	nop
    }
  } 
  
  return status; 
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop

080035e4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e03b      	b.n	800366e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fd fc84 	bl	8000f18 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003634:	f023 0107 	bic.w	r1, r3, #7
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800364e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68d1      	ldr	r1, [r2, #12]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	430b      	orrs	r3, r1
 800365c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b086      	sub	sp, #24
 800367a:	af02      	add	r7, sp, #8
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	607a      	str	r2, [r7, #4]
 8003682:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800368a:	2b01      	cmp	r3, #1
 800368c:	d101      	bne.n	8003692 <HAL_DMA2D_Start+0x1c>
 800368e:	2302      	movs	r3, #2
 8003690:	e018      	b.n	80036c4 <HAL_DMA2D_Start+0x4e>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2202      	movs	r2, #2
 800369e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	68b9      	ldr	r1, [r7, #8]
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 fa99 	bl	8003be4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0201 	orr.w	r2, r2, #1
 80036c0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d056      	beq.n	8003796 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80036e8:	f7ff fbfe 	bl	8002ee8 <HAL_GetTick>
 80036ec:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80036ee:	e04b      	b.n	8003788 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d023      	beq.n	800374a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003710:	f043 0202 	orr.w	r2, r3, #2
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d005      	beq.n	800372e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003726:	f043 0201 	orr.w	r2, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2221      	movs	r2, #33	; 0x21
 8003734:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2204      	movs	r2, #4
 800373a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e0a5      	b.n	8003896 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003750:	d01a      	beq.n	8003788 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003752:	f7ff fbc9 	bl	8002ee8 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d302      	bcc.n	8003768 <HAL_DMA2D_PollForTransfer+0x9c>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10f      	bne.n	8003788 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376c:	f043 0220 	orr.w	r2, r3, #32
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2203      	movs	r2, #3
 8003778:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e086      	b.n	8003896 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0ac      	beq.n	80036f0 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	f003 0320 	and.w	r3, r3, #32
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d061      	beq.n	800387c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80037b8:	f7ff fb96 	bl	8002ee8 <HAL_GetTick>
 80037bc:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80037be:	e056      	b.n	800386e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d02e      	beq.n	8003830 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f003 0308 	and.w	r3, r3, #8
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e0:	f043 0204 	orr.w	r2, r3, #4
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d005      	beq.n	80037fe <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f6:	f043 0202 	orr.w	r2, r3, #2
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380c:	f043 0201 	orr.w	r2, r3, #1
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2229      	movs	r2, #41	; 0x29
 800381a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2204      	movs	r2, #4
 8003820:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e032      	b.n	8003896 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003836:	d01a      	beq.n	800386e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003838:	f7ff fb56 	bl	8002ee8 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d302      	bcc.n	800384e <HAL_DMA2D_PollForTransfer+0x182>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10f      	bne.n	800386e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003852:	f043 0220 	orr.w	r2, r3, #32
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2203      	movs	r2, #3
 800385e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e013      	b.n	8003896 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f003 0310 	and.w	r3, r3, #16
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0a1      	beq.n	80037c0 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2212      	movs	r2, #18
 8003882:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d026      	beq.n	800390e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d021      	beq.n	800390e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038d8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038de:	f043 0201 	orr.w	r2, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2201      	movs	r2, #1
 80038ec:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2204      	movs	r2, #4
 80038f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b00      	cmp	r3, #0
 8003916:	d026      	beq.n	8003966 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d021      	beq.n	8003966 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003930:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2220      	movs	r2, #32
 8003938:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393e:	f043 0202 	orr.w	r2, r3, #2
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2204      	movs	r2, #4
 800394a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f003 0308 	and.w	r3, r3, #8
 800396c:	2b00      	cmp	r3, #0
 800396e:	d026      	beq.n	80039be <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003976:	2b00      	cmp	r3, #0
 8003978:	d021      	beq.n	80039be <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003988:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2208      	movs	r2, #8
 8003990:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003996:	f043 0204 	orr.w	r2, r3, #4
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2204      	movs	r2, #4
 80039a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d013      	beq.n	80039f0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00e      	beq.n	80039f0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2204      	movs	r2, #4
 80039e8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f853 	bl	8003a96 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d024      	beq.n	8003a44 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d01f      	beq.n	8003a44 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a12:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2202      	movs	r2, #2
 8003a1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f003 0310 	and.w	r3, r3, #16
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d01f      	beq.n	8003a8e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d01a      	beq.n	8003a8e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a66:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2210      	movs	r2, #16
 8003a6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f80e 	bl	8003aaa <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003a8e:	bf00      	nop
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
	...

08003ac0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <HAL_DMA2D_ConfigLayer+0x20>
 8003adc:	2302      	movs	r3, #2
 8003ade:	e079      	b.n	8003bd4 <HAL_DMA2D_ConfigLayer+0x114>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	3318      	adds	r3, #24
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	4413      	add	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	041b      	lsls	r3, r3, #16
 8003b06:	4313      	orrs	r3, r2
 8003b08:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003b0a:	4b35      	ldr	r3, [pc, #212]	; (8003be0 <HAL_DMA2D_ConfigLayer+0x120>)
 8003b0c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b0a      	cmp	r3, #10
 8003b14:	d003      	beq.n	8003b1e <HAL_DMA2D_ConfigLayer+0x5e>
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b09      	cmp	r3, #9
 8003b1c:	d107      	bne.n	8003b2e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	e005      	b.n	8003b3a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	061b      	lsls	r3, r3, #24
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d120      	bne.n	8003b82 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	ea02 0103 	and.w	r1, r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b0a      	cmp	r3, #10
 8003b68:	d003      	beq.n	8003b72 <HAL_DMA2D_ConfigLayer+0xb2>
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b09      	cmp	r3, #9
 8003b70:	d127      	bne.n	8003bc2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	68da      	ldr	r2, [r3, #12]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b7e:	629a      	str	r2, [r3, #40]	; 0x28
 8003b80:	e01f      	b.n	8003bc2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69da      	ldr	r2, [r3, #28]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	ea02 0103 	and.w	r1, r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	6812      	ldr	r2, [r2, #0]
 8003ba2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b0a      	cmp	r3, #10
 8003baa:	d003      	beq.n	8003bb4 <HAL_DMA2D_ConfigLayer+0xf4>
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b09      	cmp	r3, #9
 8003bb2:	d106      	bne.n	8003bc2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003bc0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	371c      	adds	r7, #28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	ff03000f 	.word	0xff03000f

08003be4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b08b      	sub	sp, #44	; 0x2c
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	041a      	lsls	r2, r3, #16
 8003c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c02:	431a      	orrs	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c1c:	d174      	bne.n	8003d08 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003c24:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c2c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003c34:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d108      	bne.n	8003c56 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	627b      	str	r3, [r7, #36]	; 0x24
 8003c54:	e053      	b.n	8003cfe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d106      	bne.n	8003c6c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6a:	e048      	b.n	8003cfe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d111      	bne.n	8003c98 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	0cdb      	lsrs	r3, r3, #19
 8003c78:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	0a9b      	lsrs	r3, r3, #10
 8003c7e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	08db      	lsrs	r3, r3, #3
 8003c84:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	015a      	lsls	r2, r3, #5
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	02db      	lsls	r3, r3, #11
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
 8003c96:	e032      	b.n	8003cfe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	d117      	bne.n	8003cd0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	0fdb      	lsrs	r3, r3, #31
 8003ca4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	0cdb      	lsrs	r3, r3, #19
 8003caa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	0adb      	lsrs	r3, r3, #11
 8003cb0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	08db      	lsrs	r3, r3, #3
 8003cb6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	029b      	lsls	r3, r3, #10
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	03db      	lsls	r3, r3, #15
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cce:	e016      	b.n	8003cfe <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	0f1b      	lsrs	r3, r3, #28
 8003cd4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	0d1b      	lsrs	r3, r3, #20
 8003cda:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	0b1b      	lsrs	r3, r3, #12
 8003ce0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	091b      	lsrs	r3, r3, #4
 8003ce6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	011a      	lsls	r2, r3, #4
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	021b      	lsls	r3, r3, #8
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	031b      	lsls	r3, r3, #12
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d04:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003d06:	e003      	b.n	8003d10 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	60da      	str	r2, [r3, #12]
}
 8003d10:	bf00      	nop
 8003d12:	372c      	adds	r7, #44	; 0x2c
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b089      	sub	sp, #36	; 0x24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d32:	2300      	movs	r3, #0
 8003d34:	61fb      	str	r3, [r7, #28]
 8003d36:	e177      	b.n	8004028 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d38:	2201      	movs	r2, #1
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	f040 8166 	bne.w	8004022 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d005      	beq.n	8003d6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d130      	bne.n	8003dd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	2203      	movs	r2, #3
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4013      	ands	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003da4:	2201      	movs	r2, #1
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	43db      	mvns	r3, r3
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	4013      	ands	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	091b      	lsrs	r3, r3, #4
 8003dba:	f003 0201 	and.w	r2, r3, #1
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 0303 	and.w	r3, r3, #3
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d017      	beq.n	8003e0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	2203      	movs	r2, #3
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4013      	ands	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 0303 	and.w	r3, r3, #3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d123      	bne.n	8003e60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	08da      	lsrs	r2, r3, #3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3208      	adds	r2, #8
 8003e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	220f      	movs	r2, #15
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	43db      	mvns	r3, r3
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	08da      	lsrs	r2, r3, #3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3208      	adds	r2, #8
 8003e5a:	69b9      	ldr	r1, [r7, #24]
 8003e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	2203      	movs	r2, #3
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	43db      	mvns	r3, r3
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	4013      	ands	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f003 0203 	and.w	r2, r3, #3
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 80c0 	beq.w	8004022 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	4b66      	ldr	r3, [pc, #408]	; (8004040 <HAL_GPIO_Init+0x324>)
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eaa:	4a65      	ldr	r2, [pc, #404]	; (8004040 <HAL_GPIO_Init+0x324>)
 8003eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8003eb2:	4b63      	ldr	r3, [pc, #396]	; (8004040 <HAL_GPIO_Init+0x324>)
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ebe:	4a61      	ldr	r2, [pc, #388]	; (8004044 <HAL_GPIO_Init+0x328>)
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	089b      	lsrs	r3, r3, #2
 8003ec4:	3302      	adds	r3, #2
 8003ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	220f      	movs	r2, #15
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	43db      	mvns	r3, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a58      	ldr	r2, [pc, #352]	; (8004048 <HAL_GPIO_Init+0x32c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d037      	beq.n	8003f5a <HAL_GPIO_Init+0x23e>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a57      	ldr	r2, [pc, #348]	; (800404c <HAL_GPIO_Init+0x330>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d031      	beq.n	8003f56 <HAL_GPIO_Init+0x23a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a56      	ldr	r2, [pc, #344]	; (8004050 <HAL_GPIO_Init+0x334>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d02b      	beq.n	8003f52 <HAL_GPIO_Init+0x236>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a55      	ldr	r2, [pc, #340]	; (8004054 <HAL_GPIO_Init+0x338>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d025      	beq.n	8003f4e <HAL_GPIO_Init+0x232>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a54      	ldr	r2, [pc, #336]	; (8004058 <HAL_GPIO_Init+0x33c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d01f      	beq.n	8003f4a <HAL_GPIO_Init+0x22e>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a53      	ldr	r2, [pc, #332]	; (800405c <HAL_GPIO_Init+0x340>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d019      	beq.n	8003f46 <HAL_GPIO_Init+0x22a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a52      	ldr	r2, [pc, #328]	; (8004060 <HAL_GPIO_Init+0x344>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d013      	beq.n	8003f42 <HAL_GPIO_Init+0x226>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a51      	ldr	r2, [pc, #324]	; (8004064 <HAL_GPIO_Init+0x348>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00d      	beq.n	8003f3e <HAL_GPIO_Init+0x222>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a50      	ldr	r2, [pc, #320]	; (8004068 <HAL_GPIO_Init+0x34c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d007      	beq.n	8003f3a <HAL_GPIO_Init+0x21e>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a4f      	ldr	r2, [pc, #316]	; (800406c <HAL_GPIO_Init+0x350>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d101      	bne.n	8003f36 <HAL_GPIO_Init+0x21a>
 8003f32:	2309      	movs	r3, #9
 8003f34:	e012      	b.n	8003f5c <HAL_GPIO_Init+0x240>
 8003f36:	230a      	movs	r3, #10
 8003f38:	e010      	b.n	8003f5c <HAL_GPIO_Init+0x240>
 8003f3a:	2308      	movs	r3, #8
 8003f3c:	e00e      	b.n	8003f5c <HAL_GPIO_Init+0x240>
 8003f3e:	2307      	movs	r3, #7
 8003f40:	e00c      	b.n	8003f5c <HAL_GPIO_Init+0x240>
 8003f42:	2306      	movs	r3, #6
 8003f44:	e00a      	b.n	8003f5c <HAL_GPIO_Init+0x240>
 8003f46:	2305      	movs	r3, #5
 8003f48:	e008      	b.n	8003f5c <HAL_GPIO_Init+0x240>
 8003f4a:	2304      	movs	r3, #4
 8003f4c:	e006      	b.n	8003f5c <HAL_GPIO_Init+0x240>
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e004      	b.n	8003f5c <HAL_GPIO_Init+0x240>
 8003f52:	2302      	movs	r3, #2
 8003f54:	e002      	b.n	8003f5c <HAL_GPIO_Init+0x240>
 8003f56:	2301      	movs	r3, #1
 8003f58:	e000      	b.n	8003f5c <HAL_GPIO_Init+0x240>
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	69fa      	ldr	r2, [r7, #28]
 8003f5e:	f002 0203 	and.w	r2, r2, #3
 8003f62:	0092      	lsls	r2, r2, #2
 8003f64:	4093      	lsls	r3, r2
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f6c:	4935      	ldr	r1, [pc, #212]	; (8004044 <HAL_GPIO_Init+0x328>)
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	089b      	lsrs	r3, r3, #2
 8003f72:	3302      	adds	r3, #2
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f7a:	4b3d      	ldr	r3, [pc, #244]	; (8004070 <HAL_GPIO_Init+0x354>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	43db      	mvns	r3, r3
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	4013      	ands	r3, r2
 8003f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f9e:	4a34      	ldr	r2, [pc, #208]	; (8004070 <HAL_GPIO_Init+0x354>)
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fa4:	4b32      	ldr	r3, [pc, #200]	; (8004070 <HAL_GPIO_Init+0x354>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	43db      	mvns	r3, r3
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d003      	beq.n	8003fc8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fc8:	4a29      	ldr	r2, [pc, #164]	; (8004070 <HAL_GPIO_Init+0x354>)
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fce:	4b28      	ldr	r3, [pc, #160]	; (8004070 <HAL_GPIO_Init+0x354>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ff2:	4a1f      	ldr	r2, [pc, #124]	; (8004070 <HAL_GPIO_Init+0x354>)
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ff8:	4b1d      	ldr	r3, [pc, #116]	; (8004070 <HAL_GPIO_Init+0x354>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	43db      	mvns	r3, r3
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	4013      	ands	r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800401c:	4a14      	ldr	r2, [pc, #80]	; (8004070 <HAL_GPIO_Init+0x354>)
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	3301      	adds	r3, #1
 8004026:	61fb      	str	r3, [r7, #28]
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	2b0f      	cmp	r3, #15
 800402c:	f67f ae84 	bls.w	8003d38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004030:	bf00      	nop
 8004032:	bf00      	nop
 8004034:	3724      	adds	r7, #36	; 0x24
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40023800 	.word	0x40023800
 8004044:	40013800 	.word	0x40013800
 8004048:	40020000 	.word	0x40020000
 800404c:	40020400 	.word	0x40020400
 8004050:	40020800 	.word	0x40020800
 8004054:	40020c00 	.word	0x40020c00
 8004058:	40021000 	.word	0x40021000
 800405c:	40021400 	.word	0x40021400
 8004060:	40021800 	.word	0x40021800
 8004064:	40021c00 	.word	0x40021c00
 8004068:	40022000 	.word	0x40022000
 800406c:	40022400 	.word	0x40022400
 8004070:	40013c00 	.word	0x40013c00

08004074 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800407e:	2300      	movs	r3, #0
 8004080:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004082:	2300      	movs	r3, #0
 8004084:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004086:	2300      	movs	r3, #0
 8004088:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800408a:	2300      	movs	r3, #0
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	e0d9      	b.n	8004244 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004090:	2201      	movs	r2, #1
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	4013      	ands	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	f040 80c9 	bne.w	800423e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80040ac:	4a6b      	ldr	r2, [pc, #428]	; (800425c <HAL_GPIO_DeInit+0x1e8>)
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	089b      	lsrs	r3, r3, #2
 80040b2:	3302      	adds	r3, #2
 80040b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040b8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	220f      	movs	r2, #15
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	4013      	ands	r3, r2
 80040cc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a63      	ldr	r2, [pc, #396]	; (8004260 <HAL_GPIO_DeInit+0x1ec>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d037      	beq.n	8004146 <HAL_GPIO_DeInit+0xd2>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a62      	ldr	r2, [pc, #392]	; (8004264 <HAL_GPIO_DeInit+0x1f0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d031      	beq.n	8004142 <HAL_GPIO_DeInit+0xce>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a61      	ldr	r2, [pc, #388]	; (8004268 <HAL_GPIO_DeInit+0x1f4>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d02b      	beq.n	800413e <HAL_GPIO_DeInit+0xca>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a60      	ldr	r2, [pc, #384]	; (800426c <HAL_GPIO_DeInit+0x1f8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d025      	beq.n	800413a <HAL_GPIO_DeInit+0xc6>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a5f      	ldr	r2, [pc, #380]	; (8004270 <HAL_GPIO_DeInit+0x1fc>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d01f      	beq.n	8004136 <HAL_GPIO_DeInit+0xc2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a5e      	ldr	r2, [pc, #376]	; (8004274 <HAL_GPIO_DeInit+0x200>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d019      	beq.n	8004132 <HAL_GPIO_DeInit+0xbe>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a5d      	ldr	r2, [pc, #372]	; (8004278 <HAL_GPIO_DeInit+0x204>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d013      	beq.n	800412e <HAL_GPIO_DeInit+0xba>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a5c      	ldr	r2, [pc, #368]	; (800427c <HAL_GPIO_DeInit+0x208>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d00d      	beq.n	800412a <HAL_GPIO_DeInit+0xb6>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a5b      	ldr	r2, [pc, #364]	; (8004280 <HAL_GPIO_DeInit+0x20c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d007      	beq.n	8004126 <HAL_GPIO_DeInit+0xb2>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a5a      	ldr	r2, [pc, #360]	; (8004284 <HAL_GPIO_DeInit+0x210>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d101      	bne.n	8004122 <HAL_GPIO_DeInit+0xae>
 800411e:	2309      	movs	r3, #9
 8004120:	e012      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 8004122:	230a      	movs	r3, #10
 8004124:	e010      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 8004126:	2308      	movs	r3, #8
 8004128:	e00e      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 800412a:	2307      	movs	r3, #7
 800412c:	e00c      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 800412e:	2306      	movs	r3, #6
 8004130:	e00a      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 8004132:	2305      	movs	r3, #5
 8004134:	e008      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 8004136:	2304      	movs	r3, #4
 8004138:	e006      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 800413a:	2303      	movs	r3, #3
 800413c:	e004      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 800413e:	2302      	movs	r3, #2
 8004140:	e002      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <HAL_GPIO_DeInit+0xd4>
 8004146:	2300      	movs	r3, #0
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	f002 0203 	and.w	r2, r2, #3
 800414e:	0092      	lsls	r2, r2, #2
 8004150:	4093      	lsls	r3, r2
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	429a      	cmp	r2, r3
 8004156:	d132      	bne.n	80041be <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004158:	4b4b      	ldr	r3, [pc, #300]	; (8004288 <HAL_GPIO_DeInit+0x214>)
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	43db      	mvns	r3, r3
 8004160:	4949      	ldr	r1, [pc, #292]	; (8004288 <HAL_GPIO_DeInit+0x214>)
 8004162:	4013      	ands	r3, r2
 8004164:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004166:	4b48      	ldr	r3, [pc, #288]	; (8004288 <HAL_GPIO_DeInit+0x214>)
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	43db      	mvns	r3, r3
 800416e:	4946      	ldr	r1, [pc, #280]	; (8004288 <HAL_GPIO_DeInit+0x214>)
 8004170:	4013      	ands	r3, r2
 8004172:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004174:	4b44      	ldr	r3, [pc, #272]	; (8004288 <HAL_GPIO_DeInit+0x214>)
 8004176:	68da      	ldr	r2, [r3, #12]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	43db      	mvns	r3, r3
 800417c:	4942      	ldr	r1, [pc, #264]	; (8004288 <HAL_GPIO_DeInit+0x214>)
 800417e:	4013      	ands	r3, r2
 8004180:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004182:	4b41      	ldr	r3, [pc, #260]	; (8004288 <HAL_GPIO_DeInit+0x214>)
 8004184:	689a      	ldr	r2, [r3, #8]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	43db      	mvns	r3, r3
 800418a:	493f      	ldr	r1, [pc, #252]	; (8004288 <HAL_GPIO_DeInit+0x214>)
 800418c:	4013      	ands	r3, r2
 800418e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	220f      	movs	r2, #15
 800419a:	fa02 f303 	lsl.w	r3, r2, r3
 800419e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80041a0:	4a2e      	ldr	r2, [pc, #184]	; (800425c <HAL_GPIO_DeInit+0x1e8>)
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	089b      	lsrs	r3, r3, #2
 80041a6:	3302      	adds	r3, #2
 80041a8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	43da      	mvns	r2, r3
 80041b0:	482a      	ldr	r0, [pc, #168]	; (800425c <HAL_GPIO_DeInit+0x1e8>)
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	089b      	lsrs	r3, r3, #2
 80041b6:	400a      	ands	r2, r1
 80041b8:	3302      	adds	r3, #2
 80041ba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	2103      	movs	r1, #3
 80041c8:	fa01 f303 	lsl.w	r3, r1, r3
 80041cc:	43db      	mvns	r3, r3
 80041ce:	401a      	ands	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	08da      	lsrs	r2, r3, #3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3208      	adds	r2, #8
 80041dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	220f      	movs	r2, #15
 80041ea:	fa02 f303 	lsl.w	r3, r2, r3
 80041ee:	43db      	mvns	r3, r3
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	08d2      	lsrs	r2, r2, #3
 80041f4:	4019      	ands	r1, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3208      	adds	r2, #8
 80041fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	2103      	movs	r1, #3
 8004208:	fa01 f303 	lsl.w	r3, r1, r3
 800420c:	43db      	mvns	r3, r3
 800420e:	401a      	ands	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	2101      	movs	r1, #1
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	fa01 f303 	lsl.w	r3, r1, r3
 8004220:	43db      	mvns	r3, r3
 8004222:	401a      	ands	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	2103      	movs	r1, #3
 8004232:	fa01 f303 	lsl.w	r3, r1, r3
 8004236:	43db      	mvns	r3, r3
 8004238:	401a      	ands	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	3301      	adds	r3, #1
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	2b0f      	cmp	r3, #15
 8004248:	f67f af22 	bls.w	8004090 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800424c:	bf00      	nop
 800424e:	bf00      	nop
 8004250:	371c      	adds	r7, #28
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	40013800 	.word	0x40013800
 8004260:	40020000 	.word	0x40020000
 8004264:	40020400 	.word	0x40020400
 8004268:	40020800 	.word	0x40020800
 800426c:	40020c00 	.word	0x40020c00
 8004270:	40021000 	.word	0x40021000
 8004274:	40021400 	.word	0x40021400
 8004278:	40021800 	.word	0x40021800
 800427c:	40021c00 	.word	0x40021c00
 8004280:	40022000 	.word	0x40022000
 8004284:	40022400 	.word	0x40022400
 8004288:	40013c00 	.word	0x40013c00

0800428c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	807b      	strh	r3, [r7, #2]
 8004298:	4613      	mov	r3, r2
 800429a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800429c:	787b      	ldrb	r3, [r7, #1]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042a2:	887a      	ldrh	r2, [r7, #2]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042a8:	e003      	b.n	80042b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042aa:	887b      	ldrh	r3, [r7, #2]
 80042ac:	041a      	lsls	r2, r3, #16
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	619a      	str	r2, [r3, #24]
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
	...

080042c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e12b      	b.n	800452a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fc fe3e 	bl	8000f68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2224      	movs	r2, #36	; 0x24
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0201 	bic.w	r2, r2, #1
 8004302:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004312:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004322:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004324:	f001 f9d4 	bl	80056d0 <HAL_RCC_GetPCLK1Freq>
 8004328:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	4a81      	ldr	r2, [pc, #516]	; (8004534 <HAL_I2C_Init+0x274>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d807      	bhi.n	8004344 <HAL_I2C_Init+0x84>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4a80      	ldr	r2, [pc, #512]	; (8004538 <HAL_I2C_Init+0x278>)
 8004338:	4293      	cmp	r3, r2
 800433a:	bf94      	ite	ls
 800433c:	2301      	movls	r3, #1
 800433e:	2300      	movhi	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	e006      	b.n	8004352 <HAL_I2C_Init+0x92>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4a7d      	ldr	r2, [pc, #500]	; (800453c <HAL_I2C_Init+0x27c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	bf94      	ite	ls
 800434c:	2301      	movls	r3, #1
 800434e:	2300      	movhi	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e0e7      	b.n	800452a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4a78      	ldr	r2, [pc, #480]	; (8004540 <HAL_I2C_Init+0x280>)
 800435e:	fba2 2303 	umull	r2, r3, r2, r3
 8004362:	0c9b      	lsrs	r3, r3, #18
 8004364:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	430a      	orrs	r2, r1
 8004378:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	4a6a      	ldr	r2, [pc, #424]	; (8004534 <HAL_I2C_Init+0x274>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d802      	bhi.n	8004394 <HAL_I2C_Init+0xd4>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	3301      	adds	r3, #1
 8004392:	e009      	b.n	80043a8 <HAL_I2C_Init+0xe8>
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800439a:	fb02 f303 	mul.w	r3, r2, r3
 800439e:	4a69      	ldr	r2, [pc, #420]	; (8004544 <HAL_I2C_Init+0x284>)
 80043a0:	fba2 2303 	umull	r2, r3, r2, r3
 80043a4:	099b      	lsrs	r3, r3, #6
 80043a6:	3301      	adds	r3, #1
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6812      	ldr	r2, [r2, #0]
 80043ac:	430b      	orrs	r3, r1
 80043ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	495c      	ldr	r1, [pc, #368]	; (8004534 <HAL_I2C_Init+0x274>)
 80043c4:	428b      	cmp	r3, r1
 80043c6:	d819      	bhi.n	80043fc <HAL_I2C_Init+0x13c>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	1e59      	subs	r1, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80043d6:	1c59      	adds	r1, r3, #1
 80043d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043dc:	400b      	ands	r3, r1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00a      	beq.n	80043f8 <HAL_I2C_Init+0x138>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	1e59      	subs	r1, r3, #1
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80043f0:	3301      	adds	r3, #1
 80043f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f6:	e051      	b.n	800449c <HAL_I2C_Init+0x1dc>
 80043f8:	2304      	movs	r3, #4
 80043fa:	e04f      	b.n	800449c <HAL_I2C_Init+0x1dc>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d111      	bne.n	8004428 <HAL_I2C_Init+0x168>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	1e58      	subs	r0, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6859      	ldr	r1, [r3, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	440b      	add	r3, r1
 8004412:	fbb0 f3f3 	udiv	r3, r0, r3
 8004416:	3301      	adds	r3, #1
 8004418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800441c:	2b00      	cmp	r3, #0
 800441e:	bf0c      	ite	eq
 8004420:	2301      	moveq	r3, #1
 8004422:	2300      	movne	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	e012      	b.n	800444e <HAL_I2C_Init+0x18e>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	1e58      	subs	r0, r3, #1
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6859      	ldr	r1, [r3, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	0099      	lsls	r1, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	fbb0 f3f3 	udiv	r3, r0, r3
 800443e:	3301      	adds	r3, #1
 8004440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004444:	2b00      	cmp	r3, #0
 8004446:	bf0c      	ite	eq
 8004448:	2301      	moveq	r3, #1
 800444a:	2300      	movne	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <HAL_I2C_Init+0x196>
 8004452:	2301      	movs	r3, #1
 8004454:	e022      	b.n	800449c <HAL_I2C_Init+0x1dc>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10e      	bne.n	800447c <HAL_I2C_Init+0x1bc>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	1e58      	subs	r0, r3, #1
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6859      	ldr	r1, [r3, #4]
 8004466:	460b      	mov	r3, r1
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	440b      	add	r3, r1
 800446c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004470:	3301      	adds	r3, #1
 8004472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800447a:	e00f      	b.n	800449c <HAL_I2C_Init+0x1dc>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	1e58      	subs	r0, r3, #1
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6859      	ldr	r1, [r3, #4]
 8004484:	460b      	mov	r3, r1
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	0099      	lsls	r1, r3, #2
 800448c:	440b      	add	r3, r1
 800448e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004492:	3301      	adds	r3, #1
 8004494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004498:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800449c:	6879      	ldr	r1, [r7, #4]
 800449e:	6809      	ldr	r1, [r1, #0]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69da      	ldr	r2, [r3, #28]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6911      	ldr	r1, [r2, #16]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	68d2      	ldr	r2, [r2, #12]
 80044d6:	4311      	orrs	r1, r2
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6812      	ldr	r2, [r2, #0]
 80044dc:	430b      	orrs	r3, r1
 80044de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695a      	ldr	r2, [r3, #20]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2220      	movs	r2, #32
 8004516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	000186a0 	.word	0x000186a0
 8004538:	001e847f 	.word	0x001e847f
 800453c:	003d08ff 	.word	0x003d08ff
 8004540:	431bde83 	.word	0x431bde83
 8004544:	10624dd3 	.word	0x10624dd3

08004548 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b20      	cmp	r3, #32
 800455c:	d129      	bne.n	80045b2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2224      	movs	r2, #36	; 0x24
 8004562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0201 	bic.w	r2, r2, #1
 8004574:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0210 	bic.w	r2, r2, #16
 8004584:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 0201 	orr.w	r2, r2, #1
 80045a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2220      	movs	r2, #32
 80045aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	e000      	b.n	80045b4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80045b2:	2302      	movs	r3, #2
  }
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80045ca:	2300      	movs	r3, #0
 80045cc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b20      	cmp	r3, #32
 80045d8:	d12a      	bne.n	8004630 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2224      	movs	r2, #36	; 0x24
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0201 	bic.w	r2, r2, #1
 80045f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80045fa:	89fb      	ldrh	r3, [r7, #14]
 80045fc:	f023 030f 	bic.w	r3, r3, #15
 8004600:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	b29a      	uxth	r2, r3
 8004606:	89fb      	ldrh	r3, [r7, #14]
 8004608:	4313      	orrs	r3, r2
 800460a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	89fa      	ldrh	r2, [r7, #14]
 8004612:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f042 0201 	orr.w	r2, r2, #1
 8004622:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800462c:	2300      	movs	r3, #0
 800462e:	e000      	b.n	8004632 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004630:	2302      	movs	r3, #2
  }
}
 8004632:	4618      	mov	r0, r3
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
	...

08004640 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e0bf      	b.n	80047d2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fc fce8 	bl	800103c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004682:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6999      	ldr	r1, [r3, #24]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004698:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6899      	ldr	r1, [r3, #8]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	4b4a      	ldr	r3, [pc, #296]	; (80047dc <HAL_LTDC_Init+0x19c>)
 80046b4:	400b      	ands	r3, r1
 80046b6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	041b      	lsls	r3, r3, #16
 80046be:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6899      	ldr	r1, [r3, #8]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699a      	ldr	r2, [r3, #24]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	431a      	orrs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68d9      	ldr	r1, [r3, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	4b3e      	ldr	r3, [pc, #248]	; (80047dc <HAL_LTDC_Init+0x19c>)
 80046e2:	400b      	ands	r3, r1
 80046e4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	041b      	lsls	r3, r3, #16
 80046ec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68d9      	ldr	r1, [r3, #12]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a1a      	ldr	r2, [r3, #32]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6919      	ldr	r1, [r3, #16]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	4b33      	ldr	r3, [pc, #204]	; (80047dc <HAL_LTDC_Init+0x19c>)
 8004710:	400b      	ands	r3, r1
 8004712:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	041b      	lsls	r3, r3, #16
 800471a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6919      	ldr	r1, [r3, #16]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6959      	ldr	r1, [r3, #20]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	4b27      	ldr	r3, [pc, #156]	; (80047dc <HAL_LTDC_Init+0x19c>)
 800473e:	400b      	ands	r3, r1
 8004740:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004746:	041b      	lsls	r3, r3, #16
 8004748:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6959      	ldr	r1, [r3, #20]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004766:	021b      	lsls	r3, r3, #8
 8004768:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004770:	041b      	lsls	r3, r3, #16
 8004772:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004782:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4313      	orrs	r3, r2
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0206 	orr.w	r2, r2, #6
 80047ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699a      	ldr	r2, [r3, #24]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	f000f800 	.word	0xf000f800

080047e0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d023      	beq.n	800484a <HAL_LTDC_IRQHandler+0x6a>
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f003 0304 	and.w	r3, r3, #4
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01e      	beq.n	800484a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0204 	bic.w	r2, r2, #4
 800481a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2204      	movs	r2, #4
 8004822:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800482a:	f043 0201 	orr.w	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2204      	movs	r2, #4
 8004838:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f86f 	bl	8004928 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d023      	beq.n	800489c <HAL_LTDC_IRQHandler+0xbc>
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d01e      	beq.n	800489c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 0202 	bic.w	r2, r2, #2
 800486c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2202      	movs	r2, #2
 8004874:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800487c:	f043 0202 	orr.w	r2, r3, #2
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2204      	movs	r2, #4
 800488a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f846 	bl	8004928 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d01b      	beq.n	80048de <HAL_LTDC_IRQHandler+0xfe>
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d016      	beq.n	80048de <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0201 	bic.w	r2, r2, #1
 80048be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2201      	movs	r2, #1
 80048c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f82f 	bl	800493c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f003 0308 	and.w	r3, r3, #8
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d01b      	beq.n	8004920 <HAL_LTDC_IRQHandler+0x140>
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f003 0308 	and.w	r3, r3, #8
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d016      	beq.n	8004920 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 0208 	bic.w	r2, r2, #8
 8004900:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2208      	movs	r2, #8
 8004908:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7fc fa5c 	bl	8000dd8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004920:	bf00      	nop
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1) or LTDC_LAYER_3 (2) or LTDC_LAYER_4 (3)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004950:	b5b0      	push	{r4, r5, r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8004962:	2b01      	cmp	r3, #1
 8004964:	d101      	bne.n	800496a <HAL_LTDC_ConfigLayer+0x1a>
 8004966:	2302      	movs	r3, #2
 8004968:	e02c      	b.n	80049c4 <HAL_LTDC_ConfigLayer+0x74>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2202      	movs	r2, #2
 8004976:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2134      	movs	r1, #52	; 0x34
 8004980:	fb01 f303 	mul.w	r3, r1, r3
 8004984:	4413      	add	r3, r2
 8004986:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	4614      	mov	r4, r2
 800498e:	461d      	mov	r5, r3
 8004990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004994:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004996:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800499a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800499c:	682b      	ldr	r3, [r5, #0]
 800499e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	68b9      	ldr	r1, [r7, #8]
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 f83b 	bl	8004a20 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2201      	movs	r2, #1
 80049b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bdb0      	pop	{r4, r5, r7, pc}

080049cc <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d101      	bne.n	80049e2 <HAL_LTDC_EnableDither+0x16>
 80049de:	2302      	movs	r3, #2
 80049e0:	e016      	b.n	8004a10 <HAL_LTDC_EnableDither+0x44>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2202      	movs	r2, #2
 80049ee:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80049f2:	4b0a      	ldr	r3, [pc, #40]	; (8004a1c <HAL_LTDC_EnableDither+0x50>)
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	4a09      	ldr	r2, [pc, #36]	; (8004a1c <HAL_LTDC_EnableDither+0x50>)
 80049f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049fc:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	40016800 	.word	0x40016800

08004a20 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b089      	sub	sp, #36	; 0x24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	0c1b      	lsrs	r3, r3, #16
 8004a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a3c:	4413      	add	r3, r2
 8004a3e:	041b      	lsls	r3, r3, #16
 8004a40:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	01db      	lsls	r3, r3, #7
 8004a4c:	4413      	add	r3, r2
 8004a4e:	3384      	adds	r3, #132	; 0x84
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	6812      	ldr	r2, [r2, #0]
 8004a56:	4611      	mov	r1, r2
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	01d2      	lsls	r2, r2, #7
 8004a5c:	440a      	add	r2, r1
 8004a5e:	3284      	adds	r2, #132	; 0x84
 8004a60:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004a64:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	0c1b      	lsrs	r3, r3, #16
 8004a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a76:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a78:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4619      	mov	r1, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	01db      	lsls	r3, r3, #7
 8004a84:	440b      	add	r3, r1
 8004a86:	3384      	adds	r3, #132	; 0x84
 8004a88:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a8e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a9e:	4413      	add	r3, r2
 8004aa0:	041b      	lsls	r3, r3, #16
 8004aa2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	01db      	lsls	r3, r3, #7
 8004aae:	4413      	add	r3, r2
 8004ab0:	3384      	adds	r3, #132	; 0x84
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	6812      	ldr	r2, [r2, #0]
 8004ab8:	4611      	mov	r1, r2
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	01d2      	lsls	r2, r2, #7
 8004abe:	440a      	add	r2, r1
 8004ac0:	3284      	adds	r2, #132	; 0x84
 8004ac2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004ac6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ad6:	4413      	add	r3, r2
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4619      	mov	r1, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	01db      	lsls	r3, r3, #7
 8004ae4:	440b      	add	r3, r1
 8004ae6:	3384      	adds	r3, #132	; 0x84
 8004ae8:	4619      	mov	r1, r3
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	461a      	mov	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	01db      	lsls	r3, r3, #7
 8004afa:	4413      	add	r3, r2
 8004afc:	3384      	adds	r3, #132	; 0x84
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	6812      	ldr	r2, [r2, #0]
 8004b04:	4611      	mov	r1, r2
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	01d2      	lsls	r2, r2, #7
 8004b0a:	440a      	add	r2, r1
 8004b0c:	3284      	adds	r2, #132	; 0x84
 8004b0e:	f023 0307 	bic.w	r3, r3, #7
 8004b12:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	01db      	lsls	r3, r3, #7
 8004b1e:	4413      	add	r3, r2
 8004b20:	3384      	adds	r3, #132	; 0x84
 8004b22:	461a      	mov	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004b30:	021b      	lsls	r3, r3, #8
 8004b32:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004b3a:	041b      	lsls	r3, r3, #16
 8004b3c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	061b      	lsls	r3, r3, #24
 8004b44:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	01db      	lsls	r3, r3, #7
 8004b50:	4413      	add	r3, r2
 8004b52:	3384      	adds	r3, #132	; 0x84
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	01db      	lsls	r3, r3, #7
 8004b60:	4413      	add	r3, r2
 8004b62:	3384      	adds	r3, #132	; 0x84
 8004b64:	461a      	mov	r2, r3
 8004b66:	2300      	movs	r3, #0
 8004b68:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b70:	461a      	mov	r2, r3
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	431a      	orrs	r2, r3
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4619      	mov	r1, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	01db      	lsls	r3, r3, #7
 8004b84:	440b      	add	r3, r1
 8004b86:	3384      	adds	r3, #132	; 0x84
 8004b88:	4619      	mov	r1, r3
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	461a      	mov	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	01db      	lsls	r3, r3, #7
 8004b9a:	4413      	add	r3, r2
 8004b9c:	3384      	adds	r3, #132	; 0x84
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	6812      	ldr	r2, [r2, #0]
 8004ba4:	4611      	mov	r1, r2
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	01d2      	lsls	r2, r2, #7
 8004baa:	440a      	add	r2, r1
 8004bac:	3284      	adds	r2, #132	; 0x84
 8004bae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004bb2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	461a      	mov	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	01db      	lsls	r3, r3, #7
 8004bbe:	4413      	add	r3, r2
 8004bc0:	3384      	adds	r3, #132	; 0x84
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	01db      	lsls	r3, r3, #7
 8004bd4:	4413      	add	r3, r2
 8004bd6:	3384      	adds	r3, #132	; 0x84
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	6812      	ldr	r2, [r2, #0]
 8004bde:	4611      	mov	r1, r2
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	01d2      	lsls	r2, r2, #7
 8004be4:	440a      	add	r2, r1
 8004be6:	3284      	adds	r2, #132	; 0x84
 8004be8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004bec:	f023 0307 	bic.w	r3, r3, #7
 8004bf0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	69da      	ldr	r2, [r3, #28]
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	68f9      	ldr	r1, [r7, #12]
 8004bfc:	6809      	ldr	r1, [r1, #0]
 8004bfe:	4608      	mov	r0, r1
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	01c9      	lsls	r1, r1, #7
 8004c04:	4401      	add	r1, r0
 8004c06:	3184      	adds	r1, #132	; 0x84
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	461a      	mov	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	01db      	lsls	r3, r3, #7
 8004c16:	4413      	add	r3, r2
 8004c18:	3384      	adds	r3, #132	; 0x84
 8004c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	461a      	mov	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	01db      	lsls	r3, r3, #7
 8004c26:	4413      	add	r3, r2
 8004c28:	3384      	adds	r3, #132	; 0x84
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	461a      	mov	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	01db      	lsls	r3, r3, #7
 8004c3a:	4413      	add	r3, r2
 8004c3c:	3384      	adds	r3, #132	; 0x84
 8004c3e:	461a      	mov	r2, r3
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c44:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d102      	bne.n	8004c54 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004c4e:	2304      	movs	r3, #4
 8004c50:	61fb      	str	r3, [r7, #28]
 8004c52:	e01b      	b.n	8004c8c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d102      	bne.n	8004c62 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	61fb      	str	r3, [r7, #28]
 8004c60:	e014      	b.n	8004c8c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d00b      	beq.n	8004c82 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d007      	beq.n	8004c82 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d003      	beq.n	8004c82 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004c7e:	2b07      	cmp	r3, #7
 8004c80:	d102      	bne.n	8004c88 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004c82:	2302      	movs	r3, #2
 8004c84:	61fb      	str	r3, [r7, #28]
 8004c86:	e001      	b.n	8004c8c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	461a      	mov	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	01db      	lsls	r3, r3, #7
 8004c96:	4413      	add	r3, r2
 8004c98:	3384      	adds	r3, #132	; 0x84
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	6812      	ldr	r2, [r2, #0]
 8004ca0:	4611      	mov	r1, r2
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	01d2      	lsls	r2, r2, #7
 8004ca6:	440a      	add	r2, r1
 8004ca8:	3284      	adds	r2, #132	; 0x84
 8004caa:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004cae:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb4:	69fa      	ldr	r2, [r7, #28]
 8004cb6:	fb02 f303 	mul.w	r3, r2, r3
 8004cba:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	6859      	ldr	r1, [r3, #4]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	1acb      	subs	r3, r1, r3
 8004cc6:	69f9      	ldr	r1, [r7, #28]
 8004cc8:	fb01 f303 	mul.w	r3, r1, r3
 8004ccc:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004cce:	68f9      	ldr	r1, [r7, #12]
 8004cd0:	6809      	ldr	r1, [r1, #0]
 8004cd2:	4608      	mov	r0, r1
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	01c9      	lsls	r1, r1, #7
 8004cd8:	4401      	add	r1, r0
 8004cda:	3184      	adds	r1, #132	; 0x84
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	01db      	lsls	r3, r3, #7
 8004cea:	4413      	add	r3, r2
 8004cec:	3384      	adds	r3, #132	; 0x84
 8004cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	6812      	ldr	r2, [r2, #0]
 8004cf4:	4611      	mov	r1, r2
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	01d2      	lsls	r2, r2, #7
 8004cfa:	440a      	add	r2, r1
 8004cfc:	3284      	adds	r2, #132	; 0x84
 8004cfe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004d02:	f023 0307 	bic.w	r3, r3, #7
 8004d06:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	01db      	lsls	r3, r3, #7
 8004d12:	4413      	add	r3, r2
 8004d14:	3384      	adds	r3, #132	; 0x84
 8004d16:	461a      	mov	r2, r3
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	461a      	mov	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	01db      	lsls	r3, r3, #7
 8004d28:	4413      	add	r3, r2
 8004d2a:	3384      	adds	r3, #132	; 0x84
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	6812      	ldr	r2, [r2, #0]
 8004d32:	4611      	mov	r1, r2
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	01d2      	lsls	r2, r2, #7
 8004d38:	440a      	add	r2, r1
 8004d3a:	3284      	adds	r2, #132	; 0x84
 8004d3c:	f043 0301 	orr.w	r3, r3, #1
 8004d40:	6013      	str	r3, [r2, #0]
}
 8004d42:	bf00      	nop
 8004d44:	3724      	adds	r7, #36	; 0x24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
	...

08004d50 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	603b      	str	r3, [r7, #0]
 8004d5e:	4b20      	ldr	r3, [pc, #128]	; (8004de0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	4a1f      	ldr	r2, [pc, #124]	; (8004de0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d68:	6413      	str	r3, [r2, #64]	; 0x40
 8004d6a:	4b1d      	ldr	r3, [pc, #116]	; (8004de0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d72:	603b      	str	r3, [r7, #0]
 8004d74:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004d76:	4b1b      	ldr	r3, [pc, #108]	; (8004de4 <HAL_PWREx_EnableOverDrive+0x94>)
 8004d78:	2201      	movs	r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d7c:	f7fe f8b4 	bl	8002ee8 <HAL_GetTick>
 8004d80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d82:	e009      	b.n	8004d98 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d84:	f7fe f8b0 	bl	8002ee8 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d92:	d901      	bls.n	8004d98 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e01f      	b.n	8004dd8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d98:	4b13      	ldr	r3, [pc, #76]	; (8004de8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da4:	d1ee      	bne.n	8004d84 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004da6:	4b11      	ldr	r3, [pc, #68]	; (8004dec <HAL_PWREx_EnableOverDrive+0x9c>)
 8004da8:	2201      	movs	r2, #1
 8004daa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dac:	f7fe f89c 	bl	8002ee8 <HAL_GetTick>
 8004db0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004db2:	e009      	b.n	8004dc8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004db4:	f7fe f898 	bl	8002ee8 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dc2:	d901      	bls.n	8004dc8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e007      	b.n	8004dd8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004dc8:	4b07      	ldr	r3, [pc, #28]	; (8004de8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dd4:	d1ee      	bne.n	8004db4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	40023800 	.word	0x40023800
 8004de4:	420e0040 	.word	0x420e0040
 8004de8:	40007000 	.word	0x40007000
 8004dec:	420e0044 	.word	0x420e0044

08004df0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e267      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d075      	beq.n	8004efa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e0e:	4b88      	ldr	r3, [pc, #544]	; (8005030 <HAL_RCC_OscConfig+0x240>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 030c 	and.w	r3, r3, #12
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d00c      	beq.n	8004e34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e1a:	4b85      	ldr	r3, [pc, #532]	; (8005030 <HAL_RCC_OscConfig+0x240>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e22:	2b08      	cmp	r3, #8
 8004e24:	d112      	bne.n	8004e4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e26:	4b82      	ldr	r3, [pc, #520]	; (8005030 <HAL_RCC_OscConfig+0x240>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e32:	d10b      	bne.n	8004e4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e34:	4b7e      	ldr	r3, [pc, #504]	; (8005030 <HAL_RCC_OscConfig+0x240>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d05b      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x108>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d157      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e242      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e54:	d106      	bne.n	8004e64 <HAL_RCC_OscConfig+0x74>
 8004e56:	4b76      	ldr	r3, [pc, #472]	; (8005030 <HAL_RCC_OscConfig+0x240>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a75      	ldr	r2, [pc, #468]	; (8005030 <HAL_RCC_OscConfig+0x240>)
 8004e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e60:	6013      	str	r3, [r2, #0]
 8004e62:	e01d      	b.n	8004ea0 <HAL_RCC_OscConfig+0xb0>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e6c:	d10c      	bne.n	8004e88 <HAL_RCC_OscConfig+0x98>
 8004e6e:	4b70      	ldr	r3, [pc, #448]	; (8005030 <HAL_RCC_OscConfig+0x240>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a6f      	ldr	r2, [pc, #444]	; (8005030 <HAL_RCC_OscConfig+0x240>)
 8004e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	4b6d      	ldr	r3, [pc, #436]	; (8005030 <HAL_RCC_OscConfig+0x240>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a6c      	ldr	r2, [pc, #432]	; (8005030 <HAL_RCC_OscConfig+0x240>)
 8004e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e84:	6013      	str	r3, [r2, #0]
 8004e86:	e00b      	b.n	8004ea0 <HAL_RCC_OscConfig+0xb0>
 8004e88:	4b69      	ldr	r3, [pc, #420]	; (8005030 <HAL_RCC_OscConfig+0x240>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a68      	ldr	r2, [pc, #416]	; (8005030 <HAL_RCC_OscConfig+0x240>)
 8004e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e92:	6013      	str	r3, [r2, #0]
 8004e94:	4b66      	ldr	r3, [pc, #408]	; (8005030 <HAL_RCC_OscConfig+0x240>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a65      	ldr	r2, [pc, #404]	; (8005030 <HAL_RCC_OscConfig+0x240>)
 8004e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d013      	beq.n	8004ed0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea8:	f7fe f81e 	bl	8002ee8 <HAL_GetTick>
 8004eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eae:	e008      	b.n	8004ec2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004eb0:	f7fe f81a 	bl	8002ee8 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b64      	cmp	r3, #100	; 0x64
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e207      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec2:	4b5b      	ldr	r3, [pc, #364]	; (8005030 <HAL_RCC_OscConfig+0x240>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0f0      	beq.n	8004eb0 <HAL_RCC_OscConfig+0xc0>
 8004ece:	e014      	b.n	8004efa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed0:	f7fe f80a 	bl	8002ee8 <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ed8:	f7fe f806 	bl	8002ee8 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b64      	cmp	r3, #100	; 0x64
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e1f3      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eea:	4b51      	ldr	r3, [pc, #324]	; (8005030 <HAL_RCC_OscConfig+0x240>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1f0      	bne.n	8004ed8 <HAL_RCC_OscConfig+0xe8>
 8004ef6:	e000      	b.n	8004efa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d063      	beq.n	8004fce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f06:	4b4a      	ldr	r3, [pc, #296]	; (8005030 <HAL_RCC_OscConfig+0x240>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 030c 	and.w	r3, r3, #12
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00b      	beq.n	8004f2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f12:	4b47      	ldr	r3, [pc, #284]	; (8005030 <HAL_RCC_OscConfig+0x240>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f1a:	2b08      	cmp	r3, #8
 8004f1c:	d11c      	bne.n	8004f58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f1e:	4b44      	ldr	r3, [pc, #272]	; (8005030 <HAL_RCC_OscConfig+0x240>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d116      	bne.n	8004f58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f2a:	4b41      	ldr	r3, [pc, #260]	; (8005030 <HAL_RCC_OscConfig+0x240>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d005      	beq.n	8004f42 <HAL_RCC_OscConfig+0x152>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d001      	beq.n	8004f42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e1c7      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f42:	4b3b      	ldr	r3, [pc, #236]	; (8005030 <HAL_RCC_OscConfig+0x240>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	4937      	ldr	r1, [pc, #220]	; (8005030 <HAL_RCC_OscConfig+0x240>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f56:	e03a      	b.n	8004fce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d020      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f60:	4b34      	ldr	r3, [pc, #208]	; (8005034 <HAL_RCC_OscConfig+0x244>)
 8004f62:	2201      	movs	r2, #1
 8004f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f66:	f7fd ffbf 	bl	8002ee8 <HAL_GetTick>
 8004f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f6c:	e008      	b.n	8004f80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f6e:	f7fd ffbb 	bl	8002ee8 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e1a8      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f80:	4b2b      	ldr	r3, [pc, #172]	; (8005030 <HAL_RCC_OscConfig+0x240>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0f0      	beq.n	8004f6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f8c:	4b28      	ldr	r3, [pc, #160]	; (8005030 <HAL_RCC_OscConfig+0x240>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	00db      	lsls	r3, r3, #3
 8004f9a:	4925      	ldr	r1, [pc, #148]	; (8005030 <HAL_RCC_OscConfig+0x240>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	600b      	str	r3, [r1, #0]
 8004fa0:	e015      	b.n	8004fce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fa2:	4b24      	ldr	r3, [pc, #144]	; (8005034 <HAL_RCC_OscConfig+0x244>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa8:	f7fd ff9e 	bl	8002ee8 <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fb0:	f7fd ff9a 	bl	8002ee8 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e187      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fc2:	4b1b      	ldr	r3, [pc, #108]	; (8005030 <HAL_RCC_OscConfig+0x240>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1f0      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d036      	beq.n	8005048 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d016      	beq.n	8005010 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fe2:	4b15      	ldr	r3, [pc, #84]	; (8005038 <HAL_RCC_OscConfig+0x248>)
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe8:	f7fd ff7e 	bl	8002ee8 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ff0:	f7fd ff7a 	bl	8002ee8 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e167      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005002:	4b0b      	ldr	r3, [pc, #44]	; (8005030 <HAL_RCC_OscConfig+0x240>)
 8005004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0f0      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x200>
 800500e:	e01b      	b.n	8005048 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005010:	4b09      	ldr	r3, [pc, #36]	; (8005038 <HAL_RCC_OscConfig+0x248>)
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005016:	f7fd ff67 	bl	8002ee8 <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800501c:	e00e      	b.n	800503c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800501e:	f7fd ff63 	bl	8002ee8 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d907      	bls.n	800503c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e150      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
 8005030:	40023800 	.word	0x40023800
 8005034:	42470000 	.word	0x42470000
 8005038:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800503c:	4b88      	ldr	r3, [pc, #544]	; (8005260 <HAL_RCC_OscConfig+0x470>)
 800503e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1ea      	bne.n	800501e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 8097 	beq.w	8005184 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005056:	2300      	movs	r3, #0
 8005058:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800505a:	4b81      	ldr	r3, [pc, #516]	; (8005260 <HAL_RCC_OscConfig+0x470>)
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10f      	bne.n	8005086 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005066:	2300      	movs	r3, #0
 8005068:	60bb      	str	r3, [r7, #8]
 800506a:	4b7d      	ldr	r3, [pc, #500]	; (8005260 <HAL_RCC_OscConfig+0x470>)
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	4a7c      	ldr	r2, [pc, #496]	; (8005260 <HAL_RCC_OscConfig+0x470>)
 8005070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005074:	6413      	str	r3, [r2, #64]	; 0x40
 8005076:	4b7a      	ldr	r3, [pc, #488]	; (8005260 <HAL_RCC_OscConfig+0x470>)
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800507e:	60bb      	str	r3, [r7, #8]
 8005080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005082:	2301      	movs	r3, #1
 8005084:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005086:	4b77      	ldr	r3, [pc, #476]	; (8005264 <HAL_RCC_OscConfig+0x474>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508e:	2b00      	cmp	r3, #0
 8005090:	d118      	bne.n	80050c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005092:	4b74      	ldr	r3, [pc, #464]	; (8005264 <HAL_RCC_OscConfig+0x474>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a73      	ldr	r2, [pc, #460]	; (8005264 <HAL_RCC_OscConfig+0x474>)
 8005098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800509c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800509e:	f7fd ff23 	bl	8002ee8 <HAL_GetTick>
 80050a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a4:	e008      	b.n	80050b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050a6:	f7fd ff1f 	bl	8002ee8 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e10c      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b8:	4b6a      	ldr	r3, [pc, #424]	; (8005264 <HAL_RCC_OscConfig+0x474>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0f0      	beq.n	80050a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d106      	bne.n	80050da <HAL_RCC_OscConfig+0x2ea>
 80050cc:	4b64      	ldr	r3, [pc, #400]	; (8005260 <HAL_RCC_OscConfig+0x470>)
 80050ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d0:	4a63      	ldr	r2, [pc, #396]	; (8005260 <HAL_RCC_OscConfig+0x470>)
 80050d2:	f043 0301 	orr.w	r3, r3, #1
 80050d6:	6713      	str	r3, [r2, #112]	; 0x70
 80050d8:	e01c      	b.n	8005114 <HAL_RCC_OscConfig+0x324>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	2b05      	cmp	r3, #5
 80050e0:	d10c      	bne.n	80050fc <HAL_RCC_OscConfig+0x30c>
 80050e2:	4b5f      	ldr	r3, [pc, #380]	; (8005260 <HAL_RCC_OscConfig+0x470>)
 80050e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e6:	4a5e      	ldr	r2, [pc, #376]	; (8005260 <HAL_RCC_OscConfig+0x470>)
 80050e8:	f043 0304 	orr.w	r3, r3, #4
 80050ec:	6713      	str	r3, [r2, #112]	; 0x70
 80050ee:	4b5c      	ldr	r3, [pc, #368]	; (8005260 <HAL_RCC_OscConfig+0x470>)
 80050f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f2:	4a5b      	ldr	r2, [pc, #364]	; (8005260 <HAL_RCC_OscConfig+0x470>)
 80050f4:	f043 0301 	orr.w	r3, r3, #1
 80050f8:	6713      	str	r3, [r2, #112]	; 0x70
 80050fa:	e00b      	b.n	8005114 <HAL_RCC_OscConfig+0x324>
 80050fc:	4b58      	ldr	r3, [pc, #352]	; (8005260 <HAL_RCC_OscConfig+0x470>)
 80050fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005100:	4a57      	ldr	r2, [pc, #348]	; (8005260 <HAL_RCC_OscConfig+0x470>)
 8005102:	f023 0301 	bic.w	r3, r3, #1
 8005106:	6713      	str	r3, [r2, #112]	; 0x70
 8005108:	4b55      	ldr	r3, [pc, #340]	; (8005260 <HAL_RCC_OscConfig+0x470>)
 800510a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510c:	4a54      	ldr	r2, [pc, #336]	; (8005260 <HAL_RCC_OscConfig+0x470>)
 800510e:	f023 0304 	bic.w	r3, r3, #4
 8005112:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d015      	beq.n	8005148 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800511c:	f7fd fee4 	bl	8002ee8 <HAL_GetTick>
 8005120:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005122:	e00a      	b.n	800513a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005124:	f7fd fee0 	bl	8002ee8 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005132:	4293      	cmp	r3, r2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e0cb      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800513a:	4b49      	ldr	r3, [pc, #292]	; (8005260 <HAL_RCC_OscConfig+0x470>)
 800513c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0ee      	beq.n	8005124 <HAL_RCC_OscConfig+0x334>
 8005146:	e014      	b.n	8005172 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005148:	f7fd fece 	bl	8002ee8 <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800514e:	e00a      	b.n	8005166 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005150:	f7fd feca 	bl	8002ee8 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	f241 3288 	movw	r2, #5000	; 0x1388
 800515e:	4293      	cmp	r3, r2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e0b5      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005166:	4b3e      	ldr	r3, [pc, #248]	; (8005260 <HAL_RCC_OscConfig+0x470>)
 8005168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1ee      	bne.n	8005150 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005172:	7dfb      	ldrb	r3, [r7, #23]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d105      	bne.n	8005184 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005178:	4b39      	ldr	r3, [pc, #228]	; (8005260 <HAL_RCC_OscConfig+0x470>)
 800517a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517c:	4a38      	ldr	r2, [pc, #224]	; (8005260 <HAL_RCC_OscConfig+0x470>)
 800517e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005182:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 80a1 	beq.w	80052d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800518e:	4b34      	ldr	r3, [pc, #208]	; (8005260 <HAL_RCC_OscConfig+0x470>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 030c 	and.w	r3, r3, #12
 8005196:	2b08      	cmp	r3, #8
 8005198:	d05c      	beq.n	8005254 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d141      	bne.n	8005226 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051a2:	4b31      	ldr	r3, [pc, #196]	; (8005268 <HAL_RCC_OscConfig+0x478>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a8:	f7fd fe9e 	bl	8002ee8 <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051b0:	f7fd fe9a 	bl	8002ee8 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e087      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051c2:	4b27      	ldr	r3, [pc, #156]	; (8005260 <HAL_RCC_OscConfig+0x470>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1f0      	bne.n	80051b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69da      	ldr	r2, [r3, #28]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	019b      	lsls	r3, r3, #6
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e4:	085b      	lsrs	r3, r3, #1
 80051e6:	3b01      	subs	r3, #1
 80051e8:	041b      	lsls	r3, r3, #16
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f0:	061b      	lsls	r3, r3, #24
 80051f2:	491b      	ldr	r1, [pc, #108]	; (8005260 <HAL_RCC_OscConfig+0x470>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051f8:	4b1b      	ldr	r3, [pc, #108]	; (8005268 <HAL_RCC_OscConfig+0x478>)
 80051fa:	2201      	movs	r2, #1
 80051fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051fe:	f7fd fe73 	bl	8002ee8 <HAL_GetTick>
 8005202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005204:	e008      	b.n	8005218 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005206:	f7fd fe6f 	bl	8002ee8 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d901      	bls.n	8005218 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e05c      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005218:	4b11      	ldr	r3, [pc, #68]	; (8005260 <HAL_RCC_OscConfig+0x470>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0f0      	beq.n	8005206 <HAL_RCC_OscConfig+0x416>
 8005224:	e054      	b.n	80052d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005226:	4b10      	ldr	r3, [pc, #64]	; (8005268 <HAL_RCC_OscConfig+0x478>)
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800522c:	f7fd fe5c 	bl	8002ee8 <HAL_GetTick>
 8005230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005232:	e008      	b.n	8005246 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005234:	f7fd fe58 	bl	8002ee8 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e045      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005246:	4b06      	ldr	r3, [pc, #24]	; (8005260 <HAL_RCC_OscConfig+0x470>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1f0      	bne.n	8005234 <HAL_RCC_OscConfig+0x444>
 8005252:	e03d      	b.n	80052d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d107      	bne.n	800526c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e038      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
 8005260:	40023800 	.word	0x40023800
 8005264:	40007000 	.word	0x40007000
 8005268:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800526c:	4b1b      	ldr	r3, [pc, #108]	; (80052dc <HAL_RCC_OscConfig+0x4ec>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d028      	beq.n	80052cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005284:	429a      	cmp	r2, r3
 8005286:	d121      	bne.n	80052cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005292:	429a      	cmp	r2, r3
 8005294:	d11a      	bne.n	80052cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800529c:	4013      	ands	r3, r2
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d111      	bne.n	80052cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b2:	085b      	lsrs	r3, r3, #1
 80052b4:	3b01      	subs	r3, #1
 80052b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d107      	bne.n	80052cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d001      	beq.n	80052d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e000      	b.n	80052d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3718      	adds	r7, #24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	40023800 	.word	0x40023800

080052e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e0cc      	b.n	800548e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052f4:	4b68      	ldr	r3, [pc, #416]	; (8005498 <HAL_RCC_ClockConfig+0x1b8>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 030f 	and.w	r3, r3, #15
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d90c      	bls.n	800531c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005302:	4b65      	ldr	r3, [pc, #404]	; (8005498 <HAL_RCC_ClockConfig+0x1b8>)
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800530a:	4b63      	ldr	r3, [pc, #396]	; (8005498 <HAL_RCC_ClockConfig+0x1b8>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	429a      	cmp	r2, r3
 8005316:	d001      	beq.n	800531c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e0b8      	b.n	800548e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d020      	beq.n	800536a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b00      	cmp	r3, #0
 8005332:	d005      	beq.n	8005340 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005334:	4b59      	ldr	r3, [pc, #356]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	4a58      	ldr	r2, [pc, #352]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 800533a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800533e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0308 	and.w	r3, r3, #8
 8005348:	2b00      	cmp	r3, #0
 800534a:	d005      	beq.n	8005358 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800534c:	4b53      	ldr	r3, [pc, #332]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	4a52      	ldr	r2, [pc, #328]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 8005352:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005356:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005358:	4b50      	ldr	r3, [pc, #320]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	494d      	ldr	r1, [pc, #308]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 8005366:	4313      	orrs	r3, r2
 8005368:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d044      	beq.n	8005400 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d107      	bne.n	800538e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800537e:	4b47      	ldr	r3, [pc, #284]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d119      	bne.n	80053be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e07f      	b.n	800548e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2b02      	cmp	r3, #2
 8005394:	d003      	beq.n	800539e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800539a:	2b03      	cmp	r3, #3
 800539c:	d107      	bne.n	80053ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800539e:	4b3f      	ldr	r3, [pc, #252]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d109      	bne.n	80053be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e06f      	b.n	800548e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ae:	4b3b      	ldr	r3, [pc, #236]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e067      	b.n	800548e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053be:	4b37      	ldr	r3, [pc, #220]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f023 0203 	bic.w	r2, r3, #3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	4934      	ldr	r1, [pc, #208]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053d0:	f7fd fd8a 	bl	8002ee8 <HAL_GetTick>
 80053d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d6:	e00a      	b.n	80053ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053d8:	f7fd fd86 	bl	8002ee8 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e04f      	b.n	800548e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ee:	4b2b      	ldr	r3, [pc, #172]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f003 020c 	and.w	r2, r3, #12
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d1eb      	bne.n	80053d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005400:	4b25      	ldr	r3, [pc, #148]	; (8005498 <HAL_RCC_ClockConfig+0x1b8>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 030f 	and.w	r3, r3, #15
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	429a      	cmp	r2, r3
 800540c:	d20c      	bcs.n	8005428 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800540e:	4b22      	ldr	r3, [pc, #136]	; (8005498 <HAL_RCC_ClockConfig+0x1b8>)
 8005410:	683a      	ldr	r2, [r7, #0]
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005416:	4b20      	ldr	r3, [pc, #128]	; (8005498 <HAL_RCC_ClockConfig+0x1b8>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 030f 	and.w	r3, r3, #15
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	429a      	cmp	r2, r3
 8005422:	d001      	beq.n	8005428 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e032      	b.n	800548e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	2b00      	cmp	r3, #0
 8005432:	d008      	beq.n	8005446 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005434:	4b19      	ldr	r3, [pc, #100]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	4916      	ldr	r1, [pc, #88]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 8005442:	4313      	orrs	r3, r2
 8005444:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0308 	and.w	r3, r3, #8
 800544e:	2b00      	cmp	r3, #0
 8005450:	d009      	beq.n	8005466 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005452:	4b12      	ldr	r3, [pc, #72]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	00db      	lsls	r3, r3, #3
 8005460:	490e      	ldr	r1, [pc, #56]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 8005462:	4313      	orrs	r3, r2
 8005464:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005466:	f000 f821 	bl	80054ac <HAL_RCC_GetSysClockFreq>
 800546a:	4602      	mov	r2, r0
 800546c:	4b0b      	ldr	r3, [pc, #44]	; (800549c <HAL_RCC_ClockConfig+0x1bc>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	091b      	lsrs	r3, r3, #4
 8005472:	f003 030f 	and.w	r3, r3, #15
 8005476:	490a      	ldr	r1, [pc, #40]	; (80054a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005478:	5ccb      	ldrb	r3, [r1, r3]
 800547a:	fa22 f303 	lsr.w	r3, r2, r3
 800547e:	4a09      	ldr	r2, [pc, #36]	; (80054a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005482:	4b09      	ldr	r3, [pc, #36]	; (80054a8 <HAL_RCC_ClockConfig+0x1c8>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4618      	mov	r0, r3
 8005488:	f7fc f87c 	bl	8001584 <HAL_InitTick>

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	40023c00 	.word	0x40023c00
 800549c:	40023800 	.word	0x40023800
 80054a0:	08009f34 	.word	0x08009f34
 80054a4:	20000000 	.word	0x20000000
 80054a8:	20000048 	.word	0x20000048

080054ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054b0:	b094      	sub	sp, #80	; 0x50
 80054b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	647b      	str	r3, [r7, #68]	; 0x44
 80054b8:	2300      	movs	r3, #0
 80054ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054bc:	2300      	movs	r3, #0
 80054be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054c4:	4b79      	ldr	r3, [pc, #484]	; (80056ac <HAL_RCC_GetSysClockFreq+0x200>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f003 030c 	and.w	r3, r3, #12
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d00d      	beq.n	80054ec <HAL_RCC_GetSysClockFreq+0x40>
 80054d0:	2b08      	cmp	r3, #8
 80054d2:	f200 80e1 	bhi.w	8005698 <HAL_RCC_GetSysClockFreq+0x1ec>
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d002      	beq.n	80054e0 <HAL_RCC_GetSysClockFreq+0x34>
 80054da:	2b04      	cmp	r3, #4
 80054dc:	d003      	beq.n	80054e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80054de:	e0db      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054e0:	4b73      	ldr	r3, [pc, #460]	; (80056b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80054e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80054e4:	e0db      	b.n	800569e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054e6:	4b73      	ldr	r3, [pc, #460]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80054e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054ea:	e0d8      	b.n	800569e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054ec:	4b6f      	ldr	r3, [pc, #444]	; (80056ac <HAL_RCC_GetSysClockFreq+0x200>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054f6:	4b6d      	ldr	r3, [pc, #436]	; (80056ac <HAL_RCC_GetSysClockFreq+0x200>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d063      	beq.n	80055ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005502:	4b6a      	ldr	r3, [pc, #424]	; (80056ac <HAL_RCC_GetSysClockFreq+0x200>)
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	099b      	lsrs	r3, r3, #6
 8005508:	2200      	movs	r2, #0
 800550a:	63bb      	str	r3, [r7, #56]	; 0x38
 800550c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800550e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005514:	633b      	str	r3, [r7, #48]	; 0x30
 8005516:	2300      	movs	r3, #0
 8005518:	637b      	str	r3, [r7, #52]	; 0x34
 800551a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800551e:	4622      	mov	r2, r4
 8005520:	462b      	mov	r3, r5
 8005522:	f04f 0000 	mov.w	r0, #0
 8005526:	f04f 0100 	mov.w	r1, #0
 800552a:	0159      	lsls	r1, r3, #5
 800552c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005530:	0150      	lsls	r0, r2, #5
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	4621      	mov	r1, r4
 8005538:	1a51      	subs	r1, r2, r1
 800553a:	6139      	str	r1, [r7, #16]
 800553c:	4629      	mov	r1, r5
 800553e:	eb63 0301 	sbc.w	r3, r3, r1
 8005542:	617b      	str	r3, [r7, #20]
 8005544:	f04f 0200 	mov.w	r2, #0
 8005548:	f04f 0300 	mov.w	r3, #0
 800554c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005550:	4659      	mov	r1, fp
 8005552:	018b      	lsls	r3, r1, #6
 8005554:	4651      	mov	r1, sl
 8005556:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800555a:	4651      	mov	r1, sl
 800555c:	018a      	lsls	r2, r1, #6
 800555e:	4651      	mov	r1, sl
 8005560:	ebb2 0801 	subs.w	r8, r2, r1
 8005564:	4659      	mov	r1, fp
 8005566:	eb63 0901 	sbc.w	r9, r3, r1
 800556a:	f04f 0200 	mov.w	r2, #0
 800556e:	f04f 0300 	mov.w	r3, #0
 8005572:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005576:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800557a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800557e:	4690      	mov	r8, r2
 8005580:	4699      	mov	r9, r3
 8005582:	4623      	mov	r3, r4
 8005584:	eb18 0303 	adds.w	r3, r8, r3
 8005588:	60bb      	str	r3, [r7, #8]
 800558a:	462b      	mov	r3, r5
 800558c:	eb49 0303 	adc.w	r3, r9, r3
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	f04f 0200 	mov.w	r2, #0
 8005596:	f04f 0300 	mov.w	r3, #0
 800559a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800559e:	4629      	mov	r1, r5
 80055a0:	024b      	lsls	r3, r1, #9
 80055a2:	4621      	mov	r1, r4
 80055a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80055a8:	4621      	mov	r1, r4
 80055aa:	024a      	lsls	r2, r1, #9
 80055ac:	4610      	mov	r0, r2
 80055ae:	4619      	mov	r1, r3
 80055b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055b2:	2200      	movs	r2, #0
 80055b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80055b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055bc:	f7fa fe68 	bl	8000290 <__aeabi_uldivmod>
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	4613      	mov	r3, r2
 80055c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055c8:	e058      	b.n	800567c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055ca:	4b38      	ldr	r3, [pc, #224]	; (80056ac <HAL_RCC_GetSysClockFreq+0x200>)
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	099b      	lsrs	r3, r3, #6
 80055d0:	2200      	movs	r2, #0
 80055d2:	4618      	mov	r0, r3
 80055d4:	4611      	mov	r1, r2
 80055d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80055da:	623b      	str	r3, [r7, #32]
 80055dc:	2300      	movs	r3, #0
 80055de:	627b      	str	r3, [r7, #36]	; 0x24
 80055e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055e4:	4642      	mov	r2, r8
 80055e6:	464b      	mov	r3, r9
 80055e8:	f04f 0000 	mov.w	r0, #0
 80055ec:	f04f 0100 	mov.w	r1, #0
 80055f0:	0159      	lsls	r1, r3, #5
 80055f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055f6:	0150      	lsls	r0, r2, #5
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4641      	mov	r1, r8
 80055fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8005602:	4649      	mov	r1, r9
 8005604:	eb63 0b01 	sbc.w	fp, r3, r1
 8005608:	f04f 0200 	mov.w	r2, #0
 800560c:	f04f 0300 	mov.w	r3, #0
 8005610:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005614:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005618:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800561c:	ebb2 040a 	subs.w	r4, r2, sl
 8005620:	eb63 050b 	sbc.w	r5, r3, fp
 8005624:	f04f 0200 	mov.w	r2, #0
 8005628:	f04f 0300 	mov.w	r3, #0
 800562c:	00eb      	lsls	r3, r5, #3
 800562e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005632:	00e2      	lsls	r2, r4, #3
 8005634:	4614      	mov	r4, r2
 8005636:	461d      	mov	r5, r3
 8005638:	4643      	mov	r3, r8
 800563a:	18e3      	adds	r3, r4, r3
 800563c:	603b      	str	r3, [r7, #0]
 800563e:	464b      	mov	r3, r9
 8005640:	eb45 0303 	adc.w	r3, r5, r3
 8005644:	607b      	str	r3, [r7, #4]
 8005646:	f04f 0200 	mov.w	r2, #0
 800564a:	f04f 0300 	mov.w	r3, #0
 800564e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005652:	4629      	mov	r1, r5
 8005654:	028b      	lsls	r3, r1, #10
 8005656:	4621      	mov	r1, r4
 8005658:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800565c:	4621      	mov	r1, r4
 800565e:	028a      	lsls	r2, r1, #10
 8005660:	4610      	mov	r0, r2
 8005662:	4619      	mov	r1, r3
 8005664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005666:	2200      	movs	r2, #0
 8005668:	61bb      	str	r3, [r7, #24]
 800566a:	61fa      	str	r2, [r7, #28]
 800566c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005670:	f7fa fe0e 	bl	8000290 <__aeabi_uldivmod>
 8005674:	4602      	mov	r2, r0
 8005676:	460b      	mov	r3, r1
 8005678:	4613      	mov	r3, r2
 800567a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800567c:	4b0b      	ldr	r3, [pc, #44]	; (80056ac <HAL_RCC_GetSysClockFreq+0x200>)
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	0c1b      	lsrs	r3, r3, #16
 8005682:	f003 0303 	and.w	r3, r3, #3
 8005686:	3301      	adds	r3, #1
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800568c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800568e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005690:	fbb2 f3f3 	udiv	r3, r2, r3
 8005694:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005696:	e002      	b.n	800569e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005698:	4b05      	ldr	r3, [pc, #20]	; (80056b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800569a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800569c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800569e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3750      	adds	r7, #80	; 0x50
 80056a4:	46bd      	mov	sp, r7
 80056a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056aa:	bf00      	nop
 80056ac:	40023800 	.word	0x40023800
 80056b0:	00f42400 	.word	0x00f42400
 80056b4:	007a1200 	.word	0x007a1200

080056b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056b8:	b480      	push	{r7}
 80056ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056bc:	4b03      	ldr	r3, [pc, #12]	; (80056cc <HAL_RCC_GetHCLKFreq+0x14>)
 80056be:	681b      	ldr	r3, [r3, #0]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	20000000 	.word	0x20000000

080056d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056d4:	f7ff fff0 	bl	80056b8 <HAL_RCC_GetHCLKFreq>
 80056d8:	4602      	mov	r2, r0
 80056da:	4b05      	ldr	r3, [pc, #20]	; (80056f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	0a9b      	lsrs	r3, r3, #10
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	4903      	ldr	r1, [pc, #12]	; (80056f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056e6:	5ccb      	ldrb	r3, [r1, r3]
 80056e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40023800 	.word	0x40023800
 80056f4:	08009f44 	.word	0x08009f44

080056f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056fc:	f7ff ffdc 	bl	80056b8 <HAL_RCC_GetHCLKFreq>
 8005700:	4602      	mov	r2, r0
 8005702:	4b05      	ldr	r3, [pc, #20]	; (8005718 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	0b5b      	lsrs	r3, r3, #13
 8005708:	f003 0307 	and.w	r3, r3, #7
 800570c:	4903      	ldr	r1, [pc, #12]	; (800571c <HAL_RCC_GetPCLK2Freq+0x24>)
 800570e:	5ccb      	ldrb	r3, [r1, r3]
 8005710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005714:	4618      	mov	r0, r3
 8005716:	bd80      	pop	{r7, pc}
 8005718:	40023800 	.word	0x40023800
 800571c:	08009f44 	.word	0x08009f44

08005720 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	220f      	movs	r2, #15
 800572e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005730:	4b12      	ldr	r3, [pc, #72]	; (800577c <HAL_RCC_GetClockConfig+0x5c>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f003 0203 	and.w	r2, r3, #3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800573c:	4b0f      	ldr	r3, [pc, #60]	; (800577c <HAL_RCC_GetClockConfig+0x5c>)
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005748:	4b0c      	ldr	r3, [pc, #48]	; (800577c <HAL_RCC_GetClockConfig+0x5c>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005754:	4b09      	ldr	r3, [pc, #36]	; (800577c <HAL_RCC_GetClockConfig+0x5c>)
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	08db      	lsrs	r3, r3, #3
 800575a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005762:	4b07      	ldr	r3, [pc, #28]	; (8005780 <HAL_RCC_GetClockConfig+0x60>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 020f 	and.w	r2, r3, #15
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	601a      	str	r2, [r3, #0]
}
 800576e:	bf00      	nop
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	40023800 	.word	0x40023800
 8005780:	40023c00 	.word	0x40023c00

08005784 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800578c:	2300      	movs	r3, #0
 800578e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10b      	bne.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d105      	bne.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d075      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80057b8:	4b91      	ldr	r3, [pc, #580]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057be:	f7fd fb93 	bl	8002ee8 <HAL_GetTick>
 80057c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057c4:	e008      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80057c6:	f7fd fb8f 	bl	8002ee8 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d901      	bls.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e189      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057d8:	4b8a      	ldr	r3, [pc, #552]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1f0      	bne.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d009      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	019a      	lsls	r2, r3, #6
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	071b      	lsls	r3, r3, #28
 80057fc:	4981      	ldr	r1, [pc, #516]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d01f      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005810:	4b7c      	ldr	r3, [pc, #496]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005816:	0f1b      	lsrs	r3, r3, #28
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	019a      	lsls	r2, r3, #6
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	061b      	lsls	r3, r3, #24
 800582a:	431a      	orrs	r2, r3
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	071b      	lsls	r3, r3, #28
 8005830:	4974      	ldr	r1, [pc, #464]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005832:	4313      	orrs	r3, r2
 8005834:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005838:	4b72      	ldr	r3, [pc, #456]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800583a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800583e:	f023 021f 	bic.w	r2, r3, #31
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	3b01      	subs	r3, #1
 8005848:	496e      	ldr	r1, [pc, #440]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800584a:	4313      	orrs	r3, r2
 800584c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00d      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	019a      	lsls	r2, r3, #6
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	061b      	lsls	r3, r3, #24
 8005868:	431a      	orrs	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	071b      	lsls	r3, r3, #28
 8005870:	4964      	ldr	r1, [pc, #400]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005872:	4313      	orrs	r3, r2
 8005874:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005878:	4b61      	ldr	r3, [pc, #388]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800587a:	2201      	movs	r2, #1
 800587c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800587e:	f7fd fb33 	bl	8002ee8 <HAL_GetTick>
 8005882:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005884:	e008      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005886:	f7fd fb2f 	bl	8002ee8 <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	2b02      	cmp	r3, #2
 8005892:	d901      	bls.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e129      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005898:	4b5a      	ldr	r3, [pc, #360]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d0f0      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d105      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d079      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80058bc:	4b52      	ldr	r3, [pc, #328]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80058be:	2200      	movs	r2, #0
 80058c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058c2:	f7fd fb11 	bl	8002ee8 <HAL_GetTick>
 80058c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80058c8:	e008      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80058ca:	f7fd fb0d 	bl	8002ee8 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d901      	bls.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e107      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80058dc:	4b49      	ldr	r3, [pc, #292]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058e8:	d0ef      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0304 	and.w	r3, r3, #4
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d020      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80058f6:	4b43      	ldr	r3, [pc, #268]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058fc:	0f1b      	lsrs	r3, r3, #28
 80058fe:	f003 0307 	and.w	r3, r3, #7
 8005902:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	019a      	lsls	r2, r3, #6
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	061b      	lsls	r3, r3, #24
 8005910:	431a      	orrs	r2, r3
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	071b      	lsls	r3, r3, #28
 8005916:	493b      	ldr	r1, [pc, #236]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005918:	4313      	orrs	r3, r2
 800591a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800591e:	4b39      	ldr	r3, [pc, #228]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005924:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	3b01      	subs	r3, #1
 800592e:	021b      	lsls	r3, r3, #8
 8005930:	4934      	ldr	r1, [pc, #208]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005932:	4313      	orrs	r3, r2
 8005934:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0308 	and.w	r3, r3, #8
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01e      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005944:	4b2f      	ldr	r3, [pc, #188]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594a:	0e1b      	lsrs	r3, r3, #24
 800594c:	f003 030f 	and.w	r3, r3, #15
 8005950:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	019a      	lsls	r2, r3, #6
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	061b      	lsls	r3, r3, #24
 800595c:	431a      	orrs	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	071b      	lsls	r3, r3, #28
 8005964:	4927      	ldr	r1, [pc, #156]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005966:	4313      	orrs	r3, r2
 8005968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800596c:	4b25      	ldr	r3, [pc, #148]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800596e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005972:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	4922      	ldr	r1, [pc, #136]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800597c:	4313      	orrs	r3, r2
 800597e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005982:	4b21      	ldr	r3, [pc, #132]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005984:	2201      	movs	r2, #1
 8005986:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005988:	f7fd faae 	bl	8002ee8 <HAL_GetTick>
 800598c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800598e:	e008      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005990:	f7fd faaa 	bl	8002ee8 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d901      	bls.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e0a4      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80059a2:	4b18      	ldr	r3, [pc, #96]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ae:	d1ef      	bne.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0320 	and.w	r3, r3, #32
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 808b 	beq.w	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80059be:	2300      	movs	r3, #0
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	4b10      	ldr	r3, [pc, #64]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c6:	4a0f      	ldr	r2, [pc, #60]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059cc:	6413      	str	r3, [r2, #64]	; 0x40
 80059ce:	4b0d      	ldr	r3, [pc, #52]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80059da:	4b0c      	ldr	r3, [pc, #48]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a0b      	ldr	r2, [pc, #44]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80059e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059e6:	f7fd fa7f 	bl	8002ee8 <HAL_GetTick>
 80059ea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80059ec:	e010      	b.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80059ee:	f7fd fa7b 	bl	8002ee8 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d909      	bls.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e075      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005a00:	42470068 	.word	0x42470068
 8005a04:	40023800 	.word	0x40023800
 8005a08:	42470070 	.word	0x42470070
 8005a0c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005a10:	4b38      	ldr	r3, [pc, #224]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d0e8      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a1c:	4b36      	ldr	r3, [pc, #216]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a24:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d02f      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d028      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a3a:	4b2f      	ldr	r3, [pc, #188]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a42:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a44:	4b2d      	ldr	r3, [pc, #180]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005a46:	2201      	movs	r2, #1
 8005a48:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a4a:	4b2c      	ldr	r3, [pc, #176]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005a50:	4a29      	ldr	r2, [pc, #164]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a56:	4b28      	ldr	r3, [pc, #160]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d114      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005a62:	f7fd fa41 	bl	8002ee8 <HAL_GetTick>
 8005a66:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a68:	e00a      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a6a:	f7fd fa3d 	bl	8002ee8 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d901      	bls.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e035      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a80:	4b1d      	ldr	r3, [pc, #116]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a84:	f003 0302 	and.w	r3, r3, #2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d0ee      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a98:	d10d      	bne.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005a9a:	4b17      	ldr	r3, [pc, #92]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aae:	4912      	ldr	r1, [pc, #72]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	608b      	str	r3, [r1, #8]
 8005ab4:	e005      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005ab6:	4b10      	ldr	r3, [pc, #64]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	4a0f      	ldr	r2, [pc, #60]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005abc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005ac0:	6093      	str	r3, [r2, #8]
 8005ac2:	4b0d      	ldr	r3, [pc, #52]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ac4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ace:	490a      	ldr	r1, [pc, #40]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0310 	and.w	r3, r3, #16
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d004      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005ae6:	4b06      	ldr	r3, [pc, #24]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005ae8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3718      	adds	r7, #24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	40007000 	.word	0x40007000
 8005af8:	40023800 	.word	0x40023800
 8005afc:	42470e40 	.word	0x42470e40
 8005b00:	424711e0 	.word	0x424711e0

08005b04 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e025      	b.n	8005b64 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d106      	bne.n	8005b32 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7fb fd1f 	bl	8001570 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2202      	movs	r2, #2
 8005b36:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	3304      	adds	r3, #4
 8005b42:	4619      	mov	r1, r3
 8005b44:	4610      	mov	r0, r2
 8005b46:	f002 f9e3 	bl	8007f10 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6818      	ldr	r0, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	461a      	mov	r2, r3
 8005b54:	6839      	ldr	r1, [r7, #0]
 8005b56:	f002 fa38 	bl	8007fca <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005b7e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005b80:	7dfb      	ldrb	r3, [r7, #23]
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d101      	bne.n	8005b8a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8005b86:	2302      	movs	r3, #2
 8005b88:	e021      	b.n	8005bce <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8005b8a:	7dfb      	ldrb	r3, [r7, #23]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d002      	beq.n	8005b96 <HAL_SDRAM_SendCommand+0x2a>
 8005b90:	7dfb      	ldrb	r3, [r7, #23]
 8005b92:	2b05      	cmp	r3, #5
 8005b94:	d118      	bne.n	8005bc8 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	68b9      	ldr	r1, [r7, #8]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f002 fa78 	bl	800809c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d104      	bne.n	8005bbe <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2205      	movs	r2, #5
 8005bb8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005bbc:	e006      	b.n	8005bcc <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005bc6:	e001      	b.n	8005bcc <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e000      	b.n	8005bce <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3718      	adds	r7, #24
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b082      	sub	sp, #8
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d101      	bne.n	8005bf0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005bec:	2302      	movs	r3, #2
 8005bee:	e016      	b.n	8005c1e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d10f      	bne.n	8005c1c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6839      	ldr	r1, [r7, #0]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f002 fa83 	bl	8008116 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	e000      	b.n	8005c1e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b082      	sub	sp, #8
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e07b      	b.n	8005d30 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d108      	bne.n	8005c52 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c48:	d009      	beq.n	8005c5e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	61da      	str	r2, [r3, #28]
 8005c50:	e005      	b.n	8005c5e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d106      	bne.n	8005c7e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f7fb fb0f 	bl	800129c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2202      	movs	r2, #2
 8005c82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c94:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cb0:	431a      	orrs	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cd8:	431a      	orrs	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce2:	ea42 0103 	orr.w	r1, r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	0c1b      	lsrs	r3, r3, #16
 8005cfc:	f003 0104 	and.w	r1, r3, #4
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	f003 0210 	and.w	r2, r3, #16
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	69da      	ldr	r2, [r3, #28]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d1e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e01a      	b.n	8005d80 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d60:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7fb fae2 	bl	800132c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3708      	adds	r7, #8
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b088      	sub	sp, #32
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	603b      	str	r3, [r7, #0]
 8005d94:	4613      	mov	r3, r2
 8005d96:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d101      	bne.n	8005daa <HAL_SPI_Transmit+0x22>
 8005da6:	2302      	movs	r3, #2
 8005da8:	e126      	b.n	8005ff8 <HAL_SPI_Transmit+0x270>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005db2:	f7fd f899 	bl	8002ee8 <HAL_GetTick>
 8005db6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005db8:	88fb      	ldrh	r3, [r7, #6]
 8005dba:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d002      	beq.n	8005dce <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005dc8:	2302      	movs	r3, #2
 8005dca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005dcc:	e10b      	b.n	8005fe6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <HAL_SPI_Transmit+0x52>
 8005dd4:	88fb      	ldrh	r3, [r7, #6]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d102      	bne.n	8005de0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005dde:	e102      	b.n	8005fe6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2203      	movs	r2, #3
 8005de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	88fa      	ldrh	r2, [r7, #6]
 8005df8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	88fa      	ldrh	r2, [r7, #6]
 8005dfe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e26:	d10f      	bne.n	8005e48 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e36:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e46:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e52:	2b40      	cmp	r3, #64	; 0x40
 8005e54:	d007      	beq.n	8005e66 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e6e:	d14b      	bne.n	8005f08 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d002      	beq.n	8005e7e <HAL_SPI_Transmit+0xf6>
 8005e78:	8afb      	ldrh	r3, [r7, #22]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d13e      	bne.n	8005efc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e82:	881a      	ldrh	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8e:	1c9a      	adds	r2, r3, #2
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ea2:	e02b      	b.n	8005efc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d112      	bne.n	8005ed8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb6:	881a      	ldrh	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec2:	1c9a      	adds	r2, r3, #2
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ed6:	e011      	b.n	8005efc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ed8:	f7fd f806 	bl	8002ee8 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d803      	bhi.n	8005ef0 <HAL_SPI_Transmit+0x168>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eee:	d102      	bne.n	8005ef6 <HAL_SPI_Transmit+0x16e>
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d102      	bne.n	8005efc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005efa:	e074      	b.n	8005fe6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1ce      	bne.n	8005ea4 <HAL_SPI_Transmit+0x11c>
 8005f06:	e04c      	b.n	8005fa2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d002      	beq.n	8005f16 <HAL_SPI_Transmit+0x18e>
 8005f10:	8afb      	ldrh	r3, [r7, #22]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d140      	bne.n	8005f98 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	330c      	adds	r3, #12
 8005f20:	7812      	ldrb	r2, [r2, #0]
 8005f22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f28:	1c5a      	adds	r2, r3, #1
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	3b01      	subs	r3, #1
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f3c:	e02c      	b.n	8005f98 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f003 0302 	and.w	r3, r3, #2
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d113      	bne.n	8005f74 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	330c      	adds	r3, #12
 8005f56:	7812      	ldrb	r2, [r2, #0]
 8005f58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5e:	1c5a      	adds	r2, r3, #1
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f72:	e011      	b.n	8005f98 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f74:	f7fc ffb8 	bl	8002ee8 <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d803      	bhi.n	8005f8c <HAL_SPI_Transmit+0x204>
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f8a:	d102      	bne.n	8005f92 <HAL_SPI_Transmit+0x20a>
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d102      	bne.n	8005f98 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f96:	e026      	b.n	8005fe6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1cd      	bne.n	8005f3e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fa2:	69ba      	ldr	r2, [r7, #24]
 8005fa4:	6839      	ldr	r1, [r7, #0]
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 fbda 	bl	8006760 <SPI_EndRxTxTransaction>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10a      	bne.n	8005fd6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	613b      	str	r3, [r7, #16]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	613b      	str	r3, [r7, #16]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	613b      	str	r3, [r7, #16]
 8005fd4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d002      	beq.n	8005fe4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	77fb      	strb	r3, [r7, #31]
 8005fe2:	e000      	b.n	8005fe6 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005fe4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ff6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3720      	adds	r7, #32
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b088      	sub	sp, #32
 8006004:	af02      	add	r7, sp, #8
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	603b      	str	r3, [r7, #0]
 800600c:	4613      	mov	r3, r2
 800600e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006010:	2300      	movs	r3, #0
 8006012:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800601c:	d112      	bne.n	8006044 <HAL_SPI_Receive+0x44>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10e      	bne.n	8006044 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2204      	movs	r2, #4
 800602a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800602e:	88fa      	ldrh	r2, [r7, #6]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	4613      	mov	r3, r2
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	68b9      	ldr	r1, [r7, #8]
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f000 f8f1 	bl	8006222 <HAL_SPI_TransmitReceive>
 8006040:	4603      	mov	r3, r0
 8006042:	e0ea      	b.n	800621a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800604a:	2b01      	cmp	r3, #1
 800604c:	d101      	bne.n	8006052 <HAL_SPI_Receive+0x52>
 800604e:	2302      	movs	r3, #2
 8006050:	e0e3      	b.n	800621a <HAL_SPI_Receive+0x21a>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800605a:	f7fc ff45 	bl	8002ee8 <HAL_GetTick>
 800605e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b01      	cmp	r3, #1
 800606a:	d002      	beq.n	8006072 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800606c:	2302      	movs	r3, #2
 800606e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006070:	e0ca      	b.n	8006208 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d002      	beq.n	800607e <HAL_SPI_Receive+0x7e>
 8006078:	88fb      	ldrh	r3, [r7, #6]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d102      	bne.n	8006084 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006082:	e0c1      	b.n	8006208 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2204      	movs	r2, #4
 8006088:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	88fa      	ldrh	r2, [r7, #6]
 800609c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	88fa      	ldrh	r2, [r7, #6]
 80060a2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ca:	d10f      	bne.n	80060ec <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80060ea:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f6:	2b40      	cmp	r3, #64	; 0x40
 80060f8:	d007      	beq.n	800610a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006108:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d162      	bne.n	80061d8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006112:	e02e      	b.n	8006172 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	2b01      	cmp	r3, #1
 8006120:	d115      	bne.n	800614e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f103 020c 	add.w	r2, r3, #12
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612e:	7812      	ldrb	r2, [r2, #0]
 8006130:	b2d2      	uxtb	r2, r2
 8006132:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006138:	1c5a      	adds	r2, r3, #1
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006142:	b29b      	uxth	r3, r3
 8006144:	3b01      	subs	r3, #1
 8006146:	b29a      	uxth	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800614c:	e011      	b.n	8006172 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800614e:	f7fc fecb 	bl	8002ee8 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	429a      	cmp	r2, r3
 800615c:	d803      	bhi.n	8006166 <HAL_SPI_Receive+0x166>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006164:	d102      	bne.n	800616c <HAL_SPI_Receive+0x16c>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d102      	bne.n	8006172 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006170:	e04a      	b.n	8006208 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006176:	b29b      	uxth	r3, r3
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1cb      	bne.n	8006114 <HAL_SPI_Receive+0x114>
 800617c:	e031      	b.n	80061e2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	2b01      	cmp	r3, #1
 800618a:	d113      	bne.n	80061b4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68da      	ldr	r2, [r3, #12]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006196:	b292      	uxth	r2, r2
 8006198:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619e:	1c9a      	adds	r2, r3, #2
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	3b01      	subs	r3, #1
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061b2:	e011      	b.n	80061d8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061b4:	f7fc fe98 	bl	8002ee8 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d803      	bhi.n	80061cc <HAL_SPI_Receive+0x1cc>
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ca:	d102      	bne.n	80061d2 <HAL_SPI_Receive+0x1d2>
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d102      	bne.n	80061d8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80061d6:	e017      	b.n	8006208 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1cd      	bne.n	800617e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	6839      	ldr	r1, [r7, #0]
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f000 fa54 	bl	8006694 <SPI_EndRxTransaction>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d002      	beq.n	80061f8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2220      	movs	r2, #32
 80061f6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	75fb      	strb	r3, [r7, #23]
 8006204:	e000      	b.n	8006208 <HAL_SPI_Receive+0x208>
  }

error :
 8006206:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006218:	7dfb      	ldrb	r3, [r7, #23]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3718      	adds	r7, #24
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b08c      	sub	sp, #48	; 0x30
 8006226:	af00      	add	r7, sp, #0
 8006228:	60f8      	str	r0, [r7, #12]
 800622a:	60b9      	str	r1, [r7, #8]
 800622c:	607a      	str	r2, [r7, #4]
 800622e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006230:	2301      	movs	r3, #1
 8006232:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006234:	2300      	movs	r3, #0
 8006236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006240:	2b01      	cmp	r3, #1
 8006242:	d101      	bne.n	8006248 <HAL_SPI_TransmitReceive+0x26>
 8006244:	2302      	movs	r3, #2
 8006246:	e18a      	b.n	800655e <HAL_SPI_TransmitReceive+0x33c>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006250:	f7fc fe4a 	bl	8002ee8 <HAL_GetTick>
 8006254:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800625c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006266:	887b      	ldrh	r3, [r7, #2]
 8006268:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800626a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800626e:	2b01      	cmp	r3, #1
 8006270:	d00f      	beq.n	8006292 <HAL_SPI_TransmitReceive+0x70>
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006278:	d107      	bne.n	800628a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d103      	bne.n	800628a <HAL_SPI_TransmitReceive+0x68>
 8006282:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006286:	2b04      	cmp	r3, #4
 8006288:	d003      	beq.n	8006292 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800628a:	2302      	movs	r3, #2
 800628c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006290:	e15b      	b.n	800654a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d005      	beq.n	80062a4 <HAL_SPI_TransmitReceive+0x82>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d002      	beq.n	80062a4 <HAL_SPI_TransmitReceive+0x82>
 800629e:	887b      	ldrh	r3, [r7, #2]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d103      	bne.n	80062ac <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062aa:	e14e      	b.n	800654a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b04      	cmp	r3, #4
 80062b6:	d003      	beq.n	80062c0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2205      	movs	r2, #5
 80062bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	887a      	ldrh	r2, [r7, #2]
 80062d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	887a      	ldrh	r2, [r7, #2]
 80062d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	887a      	ldrh	r2, [r7, #2]
 80062e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	887a      	ldrh	r2, [r7, #2]
 80062e8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006300:	2b40      	cmp	r3, #64	; 0x40
 8006302:	d007      	beq.n	8006314 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006312:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800631c:	d178      	bne.n	8006410 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d002      	beq.n	800632c <HAL_SPI_TransmitReceive+0x10a>
 8006326:	8b7b      	ldrh	r3, [r7, #26]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d166      	bne.n	80063fa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006330:	881a      	ldrh	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633c:	1c9a      	adds	r2, r3, #2
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006346:	b29b      	uxth	r3, r3
 8006348:	3b01      	subs	r3, #1
 800634a:	b29a      	uxth	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006350:	e053      	b.n	80063fa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	2b02      	cmp	r3, #2
 800635e:	d11b      	bne.n	8006398 <HAL_SPI_TransmitReceive+0x176>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006364:	b29b      	uxth	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d016      	beq.n	8006398 <HAL_SPI_TransmitReceive+0x176>
 800636a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636c:	2b01      	cmp	r3, #1
 800636e:	d113      	bne.n	8006398 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006374:	881a      	ldrh	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006380:	1c9a      	adds	r2, r3, #2
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800638a:	b29b      	uxth	r3, r3
 800638c:	3b01      	subs	r3, #1
 800638e:	b29a      	uxth	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006394:	2300      	movs	r3, #0
 8006396:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d119      	bne.n	80063da <HAL_SPI_TransmitReceive+0x1b8>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d014      	beq.n	80063da <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ba:	b292      	uxth	r2, r2
 80063bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c2:	1c9a      	adds	r2, r3, #2
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	3b01      	subs	r3, #1
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063d6:	2301      	movs	r3, #1
 80063d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80063da:	f7fc fd85 	bl	8002ee8 <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d807      	bhi.n	80063fa <HAL_SPI_TransmitReceive+0x1d8>
 80063ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f0:	d003      	beq.n	80063fa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80063f8:	e0a7      	b.n	800654a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063fe:	b29b      	uxth	r3, r3
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1a6      	bne.n	8006352 <HAL_SPI_TransmitReceive+0x130>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006408:	b29b      	uxth	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1a1      	bne.n	8006352 <HAL_SPI_TransmitReceive+0x130>
 800640e:	e07c      	b.n	800650a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d002      	beq.n	800641e <HAL_SPI_TransmitReceive+0x1fc>
 8006418:	8b7b      	ldrh	r3, [r7, #26]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d16b      	bne.n	80064f6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	330c      	adds	r3, #12
 8006428:	7812      	ldrb	r2, [r2, #0]
 800642a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006430:	1c5a      	adds	r2, r3, #1
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800643a:	b29b      	uxth	r3, r3
 800643c:	3b01      	subs	r3, #1
 800643e:	b29a      	uxth	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006444:	e057      	b.n	80064f6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	2b02      	cmp	r3, #2
 8006452:	d11c      	bne.n	800648e <HAL_SPI_TransmitReceive+0x26c>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006458:	b29b      	uxth	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d017      	beq.n	800648e <HAL_SPI_TransmitReceive+0x26c>
 800645e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006460:	2b01      	cmp	r3, #1
 8006462:	d114      	bne.n	800648e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	330c      	adds	r3, #12
 800646e:	7812      	ldrb	r2, [r2, #0]
 8006470:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006476:	1c5a      	adds	r2, r3, #1
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006480:	b29b      	uxth	r3, r3
 8006482:	3b01      	subs	r3, #1
 8006484:	b29a      	uxth	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800648a:	2300      	movs	r3, #0
 800648c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f003 0301 	and.w	r3, r3, #1
 8006498:	2b01      	cmp	r3, #1
 800649a:	d119      	bne.n	80064d0 <HAL_SPI_TransmitReceive+0x2ae>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d014      	beq.n	80064d0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68da      	ldr	r2, [r3, #12]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b0:	b2d2      	uxtb	r2, r2
 80064b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b8:	1c5a      	adds	r2, r3, #1
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	3b01      	subs	r3, #1
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064cc:	2301      	movs	r3, #1
 80064ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80064d0:	f7fc fd0a 	bl	8002ee8 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064dc:	429a      	cmp	r2, r3
 80064de:	d803      	bhi.n	80064e8 <HAL_SPI_TransmitReceive+0x2c6>
 80064e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e6:	d102      	bne.n	80064ee <HAL_SPI_TransmitReceive+0x2cc>
 80064e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d103      	bne.n	80064f6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80064f4:	e029      	b.n	800654a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1a2      	bne.n	8006446 <HAL_SPI_TransmitReceive+0x224>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006504:	b29b      	uxth	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d19d      	bne.n	8006446 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800650a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800650c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f000 f926 	bl	8006760 <SPI_EndRxTxTransaction>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d006      	beq.n	8006528 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2220      	movs	r2, #32
 8006524:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006526:	e010      	b.n	800654a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10b      	bne.n	8006548 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006530:	2300      	movs	r3, #0
 8006532:	617b      	str	r3, [r7, #20]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	617b      	str	r3, [r7, #20]
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	e000      	b.n	800654a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006548:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800655a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800655e:	4618      	mov	r0, r3
 8006560:	3730      	adds	r7, #48	; 0x30
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006566:	b480      	push	{r7}
 8006568:	b083      	sub	sp, #12
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006574:	b2db      	uxtb	r3, r3
}
 8006576:	4618      	mov	r0, r3
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
	...

08006584 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b088      	sub	sp, #32
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	603b      	str	r3, [r7, #0]
 8006590:	4613      	mov	r3, r2
 8006592:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006594:	f7fc fca8 	bl	8002ee8 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659c:	1a9b      	subs	r3, r3, r2
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	4413      	add	r3, r2
 80065a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065a4:	f7fc fca0 	bl	8002ee8 <HAL_GetTick>
 80065a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065aa:	4b39      	ldr	r3, [pc, #228]	; (8006690 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	015b      	lsls	r3, r3, #5
 80065b0:	0d1b      	lsrs	r3, r3, #20
 80065b2:	69fa      	ldr	r2, [r7, #28]
 80065b4:	fb02 f303 	mul.w	r3, r2, r3
 80065b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065ba:	e054      	b.n	8006666 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c2:	d050      	beq.n	8006666 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065c4:	f7fc fc90 	bl	8002ee8 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	69fa      	ldr	r2, [r7, #28]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d902      	bls.n	80065da <SPI_WaitFlagStateUntilTimeout+0x56>
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d13d      	bne.n	8006656 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065f2:	d111      	bne.n	8006618 <SPI_WaitFlagStateUntilTimeout+0x94>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065fc:	d004      	beq.n	8006608 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006606:	d107      	bne.n	8006618 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006616:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006620:	d10f      	bne.n	8006642 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006630:	601a      	str	r2, [r3, #0]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006640:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e017      	b.n	8006686 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d101      	bne.n	8006660 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800665c:	2300      	movs	r3, #0
 800665e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	3b01      	subs	r3, #1
 8006664:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689a      	ldr	r2, [r3, #8]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	4013      	ands	r3, r2
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	429a      	cmp	r2, r3
 8006674:	bf0c      	ite	eq
 8006676:	2301      	moveq	r3, #1
 8006678:	2300      	movne	r3, #0
 800667a:	b2db      	uxtb	r3, r3
 800667c:	461a      	mov	r2, r3
 800667e:	79fb      	ldrb	r3, [r7, #7]
 8006680:	429a      	cmp	r2, r3
 8006682:	d19b      	bne.n	80065bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3720      	adds	r7, #32
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20000000 	.word	0x20000000

08006694 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af02      	add	r7, sp, #8
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066a8:	d111      	bne.n	80066ce <SPI_EndRxTransaction+0x3a>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066b2:	d004      	beq.n	80066be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066bc:	d107      	bne.n	80066ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066cc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066d6:	d12a      	bne.n	800672e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066e0:	d012      	beq.n	8006708 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	2200      	movs	r2, #0
 80066ea:	2180      	movs	r1, #128	; 0x80
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f7ff ff49 	bl	8006584 <SPI_WaitFlagStateUntilTimeout>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d02d      	beq.n	8006754 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fc:	f043 0220 	orr.w	r2, r3, #32
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e026      	b.n	8006756 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2200      	movs	r2, #0
 8006710:	2101      	movs	r1, #1
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f7ff ff36 	bl	8006584 <SPI_WaitFlagStateUntilTimeout>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d01a      	beq.n	8006754 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006722:	f043 0220 	orr.w	r2, r3, #32
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e013      	b.n	8006756 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	9300      	str	r3, [sp, #0]
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	2200      	movs	r2, #0
 8006736:	2101      	movs	r1, #1
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f7ff ff23 	bl	8006584 <SPI_WaitFlagStateUntilTimeout>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d007      	beq.n	8006754 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006748:	f043 0220 	orr.w	r2, r3, #32
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e000      	b.n	8006756 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
	...

08006760 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b088      	sub	sp, #32
 8006764:	af02      	add	r7, sp, #8
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800676c:	4b1b      	ldr	r3, [pc, #108]	; (80067dc <SPI_EndRxTxTransaction+0x7c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a1b      	ldr	r2, [pc, #108]	; (80067e0 <SPI_EndRxTxTransaction+0x80>)
 8006772:	fba2 2303 	umull	r2, r3, r2, r3
 8006776:	0d5b      	lsrs	r3, r3, #21
 8006778:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800677c:	fb02 f303 	mul.w	r3, r2, r3
 8006780:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800678a:	d112      	bne.n	80067b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	2200      	movs	r2, #0
 8006794:	2180      	movs	r1, #128	; 0x80
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f7ff fef4 	bl	8006584 <SPI_WaitFlagStateUntilTimeout>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d016      	beq.n	80067d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a6:	f043 0220 	orr.w	r2, r3, #32
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e00f      	b.n	80067d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00a      	beq.n	80067ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	3b01      	subs	r3, #1
 80067bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c8:	2b80      	cmp	r3, #128	; 0x80
 80067ca:	d0f2      	beq.n	80067b2 <SPI_EndRxTxTransaction+0x52>
 80067cc:	e000      	b.n	80067d0 <SPI_EndRxTxTransaction+0x70>
        break;
 80067ce:	bf00      	nop
  }

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3718      	adds	r7, #24
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20000000 	.word	0x20000000
 80067e0:	165e9f81 	.word	0x165e9f81

080067e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e041      	b.n	800687a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d106      	bne.n	8006810 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7fa fdac 	bl	8001368 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	3304      	adds	r3, #4
 8006820:	4619      	mov	r1, r3
 8006822:	4610      	mov	r0, r2
 8006824:	f000 fa96 	bl	8006d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
	...

08006884 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b01      	cmp	r3, #1
 8006896:	d001      	beq.n	800689c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e04e      	b.n	800693a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68da      	ldr	r2, [r3, #12]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f042 0201 	orr.w	r2, r2, #1
 80068b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a23      	ldr	r2, [pc, #140]	; (8006948 <HAL_TIM_Base_Start_IT+0xc4>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d022      	beq.n	8006904 <HAL_TIM_Base_Start_IT+0x80>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068c6:	d01d      	beq.n	8006904 <HAL_TIM_Base_Start_IT+0x80>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a1f      	ldr	r2, [pc, #124]	; (800694c <HAL_TIM_Base_Start_IT+0xc8>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d018      	beq.n	8006904 <HAL_TIM_Base_Start_IT+0x80>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a1e      	ldr	r2, [pc, #120]	; (8006950 <HAL_TIM_Base_Start_IT+0xcc>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d013      	beq.n	8006904 <HAL_TIM_Base_Start_IT+0x80>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a1c      	ldr	r2, [pc, #112]	; (8006954 <HAL_TIM_Base_Start_IT+0xd0>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d00e      	beq.n	8006904 <HAL_TIM_Base_Start_IT+0x80>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a1b      	ldr	r2, [pc, #108]	; (8006958 <HAL_TIM_Base_Start_IT+0xd4>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d009      	beq.n	8006904 <HAL_TIM_Base_Start_IT+0x80>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a19      	ldr	r2, [pc, #100]	; (800695c <HAL_TIM_Base_Start_IT+0xd8>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d004      	beq.n	8006904 <HAL_TIM_Base_Start_IT+0x80>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a18      	ldr	r2, [pc, #96]	; (8006960 <HAL_TIM_Base_Start_IT+0xdc>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d111      	bne.n	8006928 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f003 0307 	and.w	r3, r3, #7
 800690e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2b06      	cmp	r3, #6
 8006914:	d010      	beq.n	8006938 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f042 0201 	orr.w	r2, r2, #1
 8006924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006926:	e007      	b.n	8006938 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f042 0201 	orr.w	r2, r2, #1
 8006936:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	40010000 	.word	0x40010000
 800694c:	40000400 	.word	0x40000400
 8006950:	40000800 	.word	0x40000800
 8006954:	40000c00 	.word	0x40000c00
 8006958:	40010400 	.word	0x40010400
 800695c:	40014000 	.word	0x40014000
 8006960:	40001800 	.word	0x40001800

08006964 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b02      	cmp	r3, #2
 8006978:	d122      	bne.n	80069c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	f003 0302 	and.w	r3, r3, #2
 8006984:	2b02      	cmp	r3, #2
 8006986:	d11b      	bne.n	80069c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f06f 0202 	mvn.w	r2, #2
 8006990:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2201      	movs	r2, #1
 8006996:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	f003 0303 	and.w	r3, r3, #3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f9b5 	bl	8006d16 <HAL_TIM_IC_CaptureCallback>
 80069ac:	e005      	b.n	80069ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f9a7 	bl	8006d02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 f9b8 	bl	8006d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	f003 0304 	and.w	r3, r3, #4
 80069ca:	2b04      	cmp	r3, #4
 80069cc:	d122      	bne.n	8006a14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	f003 0304 	and.w	r3, r3, #4
 80069d8:	2b04      	cmp	r3, #4
 80069da:	d11b      	bne.n	8006a14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f06f 0204 	mvn.w	r2, #4
 80069e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2202      	movs	r2, #2
 80069ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f98b 	bl	8006d16 <HAL_TIM_IC_CaptureCallback>
 8006a00:	e005      	b.n	8006a0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f97d 	bl	8006d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f98e 	bl	8006d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	f003 0308 	and.w	r3, r3, #8
 8006a1e:	2b08      	cmp	r3, #8
 8006a20:	d122      	bne.n	8006a68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	f003 0308 	and.w	r3, r3, #8
 8006a2c:	2b08      	cmp	r3, #8
 8006a2e:	d11b      	bne.n	8006a68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f06f 0208 	mvn.w	r2, #8
 8006a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2204      	movs	r2, #4
 8006a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	f003 0303 	and.w	r3, r3, #3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f961 	bl	8006d16 <HAL_TIM_IC_CaptureCallback>
 8006a54:	e005      	b.n	8006a62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f953 	bl	8006d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f964 	bl	8006d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	f003 0310 	and.w	r3, r3, #16
 8006a72:	2b10      	cmp	r3, #16
 8006a74:	d122      	bne.n	8006abc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	f003 0310 	and.w	r3, r3, #16
 8006a80:	2b10      	cmp	r3, #16
 8006a82:	d11b      	bne.n	8006abc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f06f 0210 	mvn.w	r2, #16
 8006a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2208      	movs	r2, #8
 8006a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f937 	bl	8006d16 <HAL_TIM_IC_CaptureCallback>
 8006aa8:	e005      	b.n	8006ab6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f929 	bl	8006d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f93a 	bl	8006d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d10e      	bne.n	8006ae8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d107      	bne.n	8006ae8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f06f 0201 	mvn.w	r2, #1
 8006ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7fa f9b2 	bl	8000e4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af2:	2b80      	cmp	r3, #128	; 0x80
 8006af4:	d10e      	bne.n	8006b14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b00:	2b80      	cmp	r3, #128	; 0x80
 8006b02:	d107      	bne.n	8006b14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fae0 	bl	80070d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1e:	2b40      	cmp	r3, #64	; 0x40
 8006b20:	d10e      	bne.n	8006b40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2c:	2b40      	cmp	r3, #64	; 0x40
 8006b2e:	d107      	bne.n	8006b40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f8ff 	bl	8006d3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	f003 0320 	and.w	r3, r3, #32
 8006b4a:	2b20      	cmp	r3, #32
 8006b4c:	d10e      	bne.n	8006b6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	f003 0320 	and.w	r3, r3, #32
 8006b58:	2b20      	cmp	r3, #32
 8006b5a:	d107      	bne.n	8006b6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f06f 0220 	mvn.w	r2, #32
 8006b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 faaa 	bl	80070c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b6c:	bf00      	nop
 8006b6e:	3708      	adds	r7, #8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d101      	bne.n	8006b90 <HAL_TIM_ConfigClockSource+0x1c>
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	e0b4      	b.n	8006cfa <HAL_TIM_ConfigClockSource+0x186>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006bae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bc8:	d03e      	beq.n	8006c48 <HAL_TIM_ConfigClockSource+0xd4>
 8006bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bce:	f200 8087 	bhi.w	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bd6:	f000 8086 	beq.w	8006ce6 <HAL_TIM_ConfigClockSource+0x172>
 8006bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bde:	d87f      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006be0:	2b70      	cmp	r3, #112	; 0x70
 8006be2:	d01a      	beq.n	8006c1a <HAL_TIM_ConfigClockSource+0xa6>
 8006be4:	2b70      	cmp	r3, #112	; 0x70
 8006be6:	d87b      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006be8:	2b60      	cmp	r3, #96	; 0x60
 8006bea:	d050      	beq.n	8006c8e <HAL_TIM_ConfigClockSource+0x11a>
 8006bec:	2b60      	cmp	r3, #96	; 0x60
 8006bee:	d877      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bf0:	2b50      	cmp	r3, #80	; 0x50
 8006bf2:	d03c      	beq.n	8006c6e <HAL_TIM_ConfigClockSource+0xfa>
 8006bf4:	2b50      	cmp	r3, #80	; 0x50
 8006bf6:	d873      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bf8:	2b40      	cmp	r3, #64	; 0x40
 8006bfa:	d058      	beq.n	8006cae <HAL_TIM_ConfigClockSource+0x13a>
 8006bfc:	2b40      	cmp	r3, #64	; 0x40
 8006bfe:	d86f      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006c00:	2b30      	cmp	r3, #48	; 0x30
 8006c02:	d064      	beq.n	8006cce <HAL_TIM_ConfigClockSource+0x15a>
 8006c04:	2b30      	cmp	r3, #48	; 0x30
 8006c06:	d86b      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006c08:	2b20      	cmp	r3, #32
 8006c0a:	d060      	beq.n	8006cce <HAL_TIM_ConfigClockSource+0x15a>
 8006c0c:	2b20      	cmp	r3, #32
 8006c0e:	d867      	bhi.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d05c      	beq.n	8006cce <HAL_TIM_ConfigClockSource+0x15a>
 8006c14:	2b10      	cmp	r3, #16
 8006c16:	d05a      	beq.n	8006cce <HAL_TIM_ConfigClockSource+0x15a>
 8006c18:	e062      	b.n	8006ce0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6818      	ldr	r0, [r3, #0]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	6899      	ldr	r1, [r3, #8]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	f000 f9ad 	bl	8006f88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	609a      	str	r2, [r3, #8]
      break;
 8006c46:	e04f      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6818      	ldr	r0, [r3, #0]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	6899      	ldr	r1, [r3, #8]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f000 f996 	bl	8006f88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689a      	ldr	r2, [r3, #8]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c6a:	609a      	str	r2, [r3, #8]
      break;
 8006c6c:	e03c      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6818      	ldr	r0, [r3, #0]
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	6859      	ldr	r1, [r3, #4]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f000 f90a 	bl	8006e94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2150      	movs	r1, #80	; 0x50
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 f963 	bl	8006f52 <TIM_ITRx_SetConfig>
      break;
 8006c8c:	e02c      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6818      	ldr	r0, [r3, #0]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	6859      	ldr	r1, [r3, #4]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	f000 f929 	bl	8006ef2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2160      	movs	r1, #96	; 0x60
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 f953 	bl	8006f52 <TIM_ITRx_SetConfig>
      break;
 8006cac:	e01c      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6818      	ldr	r0, [r3, #0]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	6859      	ldr	r1, [r3, #4]
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	f000 f8ea 	bl	8006e94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2140      	movs	r1, #64	; 0x40
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 f943 	bl	8006f52 <TIM_ITRx_SetConfig>
      break;
 8006ccc:	e00c      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	4610      	mov	r0, r2
 8006cda:	f000 f93a 	bl	8006f52 <TIM_ITRx_SetConfig>
      break;
 8006cde:	e003      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ce4:	e000      	b.n	8006ce8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ce6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b083      	sub	sp, #12
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d0a:	bf00      	nop
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d1e:	bf00      	nop
 8006d20:	370c      	adds	r7, #12
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d32:	bf00      	nop
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b083      	sub	sp, #12
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d46:	bf00      	nop
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
	...

08006d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a40      	ldr	r2, [pc, #256]	; (8006e68 <TIM_Base_SetConfig+0x114>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d013      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d72:	d00f      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a3d      	ldr	r2, [pc, #244]	; (8006e6c <TIM_Base_SetConfig+0x118>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d00b      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a3c      	ldr	r2, [pc, #240]	; (8006e70 <TIM_Base_SetConfig+0x11c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d007      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a3b      	ldr	r2, [pc, #236]	; (8006e74 <TIM_Base_SetConfig+0x120>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d003      	beq.n	8006d94 <TIM_Base_SetConfig+0x40>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a3a      	ldr	r2, [pc, #232]	; (8006e78 <TIM_Base_SetConfig+0x124>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d108      	bne.n	8006da6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a2f      	ldr	r2, [pc, #188]	; (8006e68 <TIM_Base_SetConfig+0x114>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d02b      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db4:	d027      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a2c      	ldr	r2, [pc, #176]	; (8006e6c <TIM_Base_SetConfig+0x118>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d023      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a2b      	ldr	r2, [pc, #172]	; (8006e70 <TIM_Base_SetConfig+0x11c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d01f      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a2a      	ldr	r2, [pc, #168]	; (8006e74 <TIM_Base_SetConfig+0x120>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d01b      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a29      	ldr	r2, [pc, #164]	; (8006e78 <TIM_Base_SetConfig+0x124>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d017      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a28      	ldr	r2, [pc, #160]	; (8006e7c <TIM_Base_SetConfig+0x128>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d013      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a27      	ldr	r2, [pc, #156]	; (8006e80 <TIM_Base_SetConfig+0x12c>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d00f      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a26      	ldr	r2, [pc, #152]	; (8006e84 <TIM_Base_SetConfig+0x130>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d00b      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a25      	ldr	r2, [pc, #148]	; (8006e88 <TIM_Base_SetConfig+0x134>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d007      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a24      	ldr	r2, [pc, #144]	; (8006e8c <TIM_Base_SetConfig+0x138>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d003      	beq.n	8006e06 <TIM_Base_SetConfig+0xb2>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a23      	ldr	r2, [pc, #140]	; (8006e90 <TIM_Base_SetConfig+0x13c>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d108      	bne.n	8006e18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a0a      	ldr	r2, [pc, #40]	; (8006e68 <TIM_Base_SetConfig+0x114>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d003      	beq.n	8006e4c <TIM_Base_SetConfig+0xf8>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a0c      	ldr	r2, [pc, #48]	; (8006e78 <TIM_Base_SetConfig+0x124>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d103      	bne.n	8006e54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	691a      	ldr	r2, [r3, #16]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	615a      	str	r2, [r3, #20]
}
 8006e5a:	bf00      	nop
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	40010000 	.word	0x40010000
 8006e6c:	40000400 	.word	0x40000400
 8006e70:	40000800 	.word	0x40000800
 8006e74:	40000c00 	.word	0x40000c00
 8006e78:	40010400 	.word	0x40010400
 8006e7c:	40014000 	.word	0x40014000
 8006e80:	40014400 	.word	0x40014400
 8006e84:	40014800 	.word	0x40014800
 8006e88:	40001800 	.word	0x40001800
 8006e8c:	40001c00 	.word	0x40001c00
 8006e90:	40002000 	.word	0x40002000

08006e94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	f023 0201 	bic.w	r2, r3, #1
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ebe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	011b      	lsls	r3, r3, #4
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f023 030a 	bic.w	r3, r3, #10
 8006ed0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	621a      	str	r2, [r3, #32]
}
 8006ee6:	bf00      	nop
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b087      	sub	sp, #28
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	60f8      	str	r0, [r7, #12]
 8006efa:	60b9      	str	r1, [r7, #8]
 8006efc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	f023 0210 	bic.w	r2, r3, #16
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6a1b      	ldr	r3, [r3, #32]
 8006f14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	031b      	lsls	r3, r3, #12
 8006f22:	697a      	ldr	r2, [r7, #20]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	011b      	lsls	r3, r3, #4
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	621a      	str	r2, [r3, #32]
}
 8006f46:	bf00      	nop
 8006f48:	371c      	adds	r7, #28
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b085      	sub	sp, #20
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	f043 0307 	orr.w	r3, r3, #7
 8006f74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	609a      	str	r2, [r3, #8]
}
 8006f7c:	bf00      	nop
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b087      	sub	sp, #28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
 8006f94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	021a      	lsls	r2, r3, #8
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	431a      	orrs	r2, r3
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	609a      	str	r2, [r3, #8]
}
 8006fbc:	bf00      	nop
 8006fbe:	371c      	adds	r7, #28
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d101      	bne.n	8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fdc:	2302      	movs	r3, #2
 8006fde:	e05a      	b.n	8007096 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2202      	movs	r2, #2
 8006fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007006:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	4313      	orrs	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a21      	ldr	r2, [pc, #132]	; (80070a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d022      	beq.n	800706a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800702c:	d01d      	beq.n	800706a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a1d      	ldr	r2, [pc, #116]	; (80070a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d018      	beq.n	800706a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a1b      	ldr	r2, [pc, #108]	; (80070ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d013      	beq.n	800706a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a1a      	ldr	r2, [pc, #104]	; (80070b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d00e      	beq.n	800706a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a18      	ldr	r2, [pc, #96]	; (80070b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d009      	beq.n	800706a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a17      	ldr	r2, [pc, #92]	; (80070b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d004      	beq.n	800706a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a15      	ldr	r2, [pc, #84]	; (80070bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d10c      	bne.n	8007084 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007070:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	68ba      	ldr	r2, [r7, #8]
 8007078:	4313      	orrs	r3, r2
 800707a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3714      	adds	r7, #20
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	40010000 	.word	0x40010000
 80070a8:	40000400 	.word	0x40000400
 80070ac:	40000800 	.word	0x40000800
 80070b0:	40000c00 	.word	0x40000c00
 80070b4:	40010400 	.word	0x40010400
 80070b8:	40014000 	.word	0x40014000
 80070bc:	40001800 	.word	0x40001800

080070c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e03f      	b.n	800717a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	d106      	bne.n	8007114 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7fa f94c 	bl	80013ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2224      	movs	r2, #36	; 0x24
 8007118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68da      	ldr	r2, [r3, #12]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800712a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 fc7b 	bl	8007a28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	691a      	ldr	r2, [r3, #16]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007140:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	695a      	ldr	r2, [r3, #20]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007150:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68da      	ldr	r2, [r3, #12]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007160:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2220      	movs	r2, #32
 800716c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2220      	movs	r2, #32
 8007174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b0ba      	sub	sp, #232	; 0xe8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80071aa:	2300      	movs	r3, #0
 80071ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80071b0:	2300      	movs	r3, #0
 80071b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80071b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ba:	f003 030f 	and.w	r3, r3, #15
 80071be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80071c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10f      	bne.n	80071ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ce:	f003 0320 	and.w	r3, r3, #32
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d009      	beq.n	80071ea <HAL_UART_IRQHandler+0x66>
 80071d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071da:	f003 0320 	and.w	r3, r3, #32
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d003      	beq.n	80071ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fb65 	bl	80078b2 <UART_Receive_IT>
      return;
 80071e8:	e256      	b.n	8007698 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80071ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 80de 	beq.w	80073b0 <HAL_UART_IRQHandler+0x22c>
 80071f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d106      	bne.n	800720e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007204:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007208:	2b00      	cmp	r3, #0
 800720a:	f000 80d1 	beq.w	80073b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800720e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00b      	beq.n	8007232 <HAL_UART_IRQHandler+0xae>
 800721a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800721e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007222:	2b00      	cmp	r3, #0
 8007224:	d005      	beq.n	8007232 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722a:	f043 0201 	orr.w	r2, r3, #1
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007236:	f003 0304 	and.w	r3, r3, #4
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00b      	beq.n	8007256 <HAL_UART_IRQHandler+0xd2>
 800723e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	2b00      	cmp	r3, #0
 8007248:	d005      	beq.n	8007256 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724e:	f043 0202 	orr.w	r2, r3, #2
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800725a:	f003 0302 	and.w	r3, r3, #2
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00b      	beq.n	800727a <HAL_UART_IRQHandler+0xf6>
 8007262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b00      	cmp	r3, #0
 800726c:	d005      	beq.n	800727a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	f043 0204 	orr.w	r2, r3, #4
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800727a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800727e:	f003 0308 	and.w	r3, r3, #8
 8007282:	2b00      	cmp	r3, #0
 8007284:	d011      	beq.n	80072aa <HAL_UART_IRQHandler+0x126>
 8007286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800728a:	f003 0320 	and.w	r3, r3, #32
 800728e:	2b00      	cmp	r3, #0
 8007290:	d105      	bne.n	800729e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007296:	f003 0301 	and.w	r3, r3, #1
 800729a:	2b00      	cmp	r3, #0
 800729c:	d005      	beq.n	80072aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a2:	f043 0208 	orr.w	r2, r3, #8
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f000 81ed 	beq.w	800768e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072b8:	f003 0320 	and.w	r3, r3, #32
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d008      	beq.n	80072d2 <HAL_UART_IRQHandler+0x14e>
 80072c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072c4:	f003 0320 	and.w	r3, r3, #32
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d002      	beq.n	80072d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 faf0 	bl	80078b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	695b      	ldr	r3, [r3, #20]
 80072d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072dc:	2b40      	cmp	r3, #64	; 0x40
 80072de:	bf0c      	ite	eq
 80072e0:	2301      	moveq	r3, #1
 80072e2:	2300      	movne	r3, #0
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ee:	f003 0308 	and.w	r3, r3, #8
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d103      	bne.n	80072fe <HAL_UART_IRQHandler+0x17a>
 80072f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d04f      	beq.n	800739e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f9f8 	bl	80076f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800730e:	2b40      	cmp	r3, #64	; 0x40
 8007310:	d141      	bne.n	8007396 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3314      	adds	r3, #20
 8007318:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007320:	e853 3f00 	ldrex	r3, [r3]
 8007324:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007328:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800732c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007330:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3314      	adds	r3, #20
 800733a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800733e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007342:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007346:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800734a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800734e:	e841 2300 	strex	r3, r2, [r1]
 8007352:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007356:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1d9      	bne.n	8007312 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007362:	2b00      	cmp	r3, #0
 8007364:	d013      	beq.n	800738e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736a:	4a7d      	ldr	r2, [pc, #500]	; (8007560 <HAL_UART_IRQHandler+0x3dc>)
 800736c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007372:	4618      	mov	r0, r3
 8007374:	f7fc f862 	bl	800343c <HAL_DMA_Abort_IT>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d016      	beq.n	80073ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007388:	4610      	mov	r0, r2
 800738a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800738c:	e00e      	b.n	80073ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f99a 	bl	80076c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007394:	e00a      	b.n	80073ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f996 	bl	80076c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800739c:	e006      	b.n	80073ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f992 	bl	80076c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80073aa:	e170      	b.n	800768e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073ac:	bf00      	nop
    return;
 80073ae:	e16e      	b.n	800768e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	f040 814a 	bne.w	800764e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80073ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073be:	f003 0310 	and.w	r3, r3, #16
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f000 8143 	beq.w	800764e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80073c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073cc:	f003 0310 	and.w	r3, r3, #16
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f000 813c 	beq.w	800764e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073d6:	2300      	movs	r3, #0
 80073d8:	60bb      	str	r3, [r7, #8]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	60bb      	str	r3, [r7, #8]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	60bb      	str	r3, [r7, #8]
 80073ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f6:	2b40      	cmp	r3, #64	; 0x40
 80073f8:	f040 80b4 	bne.w	8007564 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007408:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800740c:	2b00      	cmp	r3, #0
 800740e:	f000 8140 	beq.w	8007692 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007416:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800741a:	429a      	cmp	r2, r3
 800741c:	f080 8139 	bcs.w	8007692 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007426:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742c:	69db      	ldr	r3, [r3, #28]
 800742e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007432:	f000 8088 	beq.w	8007546 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	330c      	adds	r3, #12
 800743c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007440:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007444:	e853 3f00 	ldrex	r3, [r3]
 8007448:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800744c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007454:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	330c      	adds	r3, #12
 800745e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007462:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007466:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800746e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007472:	e841 2300 	strex	r3, r2, [r1]
 8007476:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800747a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1d9      	bne.n	8007436 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	3314      	adds	r3, #20
 8007488:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800748c:	e853 3f00 	ldrex	r3, [r3]
 8007490:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007492:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007494:	f023 0301 	bic.w	r3, r3, #1
 8007498:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	3314      	adds	r3, #20
 80074a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80074a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80074aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80074ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80074b2:	e841 2300 	strex	r3, r2, [r1]
 80074b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80074b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1e1      	bne.n	8007482 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3314      	adds	r3, #20
 80074c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074c8:	e853 3f00 	ldrex	r3, [r3]
 80074cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80074ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	3314      	adds	r3, #20
 80074de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80074e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80074e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80074e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80074ea:	e841 2300 	strex	r3, r2, [r1]
 80074ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80074f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1e3      	bne.n	80074be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2220      	movs	r2, #32
 80074fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	330c      	adds	r3, #12
 800750a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800750e:	e853 3f00 	ldrex	r3, [r3]
 8007512:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007516:	f023 0310 	bic.w	r3, r3, #16
 800751a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	330c      	adds	r3, #12
 8007524:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007528:	65ba      	str	r2, [r7, #88]	; 0x58
 800752a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800752e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007530:	e841 2300 	strex	r3, r2, [r1]
 8007534:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1e3      	bne.n	8007504 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007540:	4618      	mov	r0, r3
 8007542:	f7fb ff0b 	bl	800335c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800754e:	b29b      	uxth	r3, r3
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	b29b      	uxth	r3, r3
 8007554:	4619      	mov	r1, r3
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f8c0 	bl	80076dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800755c:	e099      	b.n	8007692 <HAL_UART_IRQHandler+0x50e>
 800755e:	bf00      	nop
 8007560:	080077bb 	.word	0x080077bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800756c:	b29b      	uxth	r3, r3
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007578:	b29b      	uxth	r3, r3
 800757a:	2b00      	cmp	r3, #0
 800757c:	f000 808b 	beq.w	8007696 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007580:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 8086 	beq.w	8007696 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	330c      	adds	r3, #12
 8007590:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007594:	e853 3f00 	ldrex	r3, [r3]
 8007598:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800759a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800759c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	330c      	adds	r3, #12
 80075aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80075ae:	647a      	str	r2, [r7, #68]	; 0x44
 80075b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075b6:	e841 2300 	strex	r3, r2, [r1]
 80075ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1e3      	bne.n	800758a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	3314      	adds	r3, #20
 80075c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075cc:	e853 3f00 	ldrex	r3, [r3]
 80075d0:	623b      	str	r3, [r7, #32]
   return(result);
 80075d2:	6a3b      	ldr	r3, [r7, #32]
 80075d4:	f023 0301 	bic.w	r3, r3, #1
 80075d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3314      	adds	r3, #20
 80075e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80075e6:	633a      	str	r2, [r7, #48]	; 0x30
 80075e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ee:	e841 2300 	strex	r3, r2, [r1]
 80075f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1e3      	bne.n	80075c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2220      	movs	r2, #32
 80075fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	330c      	adds	r3, #12
 800760e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	e853 3f00 	ldrex	r3, [r3]
 8007616:	60fb      	str	r3, [r7, #12]
   return(result);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f023 0310 	bic.w	r3, r3, #16
 800761e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	330c      	adds	r3, #12
 8007628:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800762c:	61fa      	str	r2, [r7, #28]
 800762e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007630:	69b9      	ldr	r1, [r7, #24]
 8007632:	69fa      	ldr	r2, [r7, #28]
 8007634:	e841 2300 	strex	r3, r2, [r1]
 8007638:	617b      	str	r3, [r7, #20]
   return(result);
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1e3      	bne.n	8007608 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007640:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007644:	4619      	mov	r1, r3
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f848 	bl	80076dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800764c:	e023      	b.n	8007696 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800764e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007656:	2b00      	cmp	r3, #0
 8007658:	d009      	beq.n	800766e <HAL_UART_IRQHandler+0x4ea>
 800765a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800765e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 f8bb 	bl	80077e2 <UART_Transmit_IT>
    return;
 800766c:	e014      	b.n	8007698 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800766e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00e      	beq.n	8007698 <HAL_UART_IRQHandler+0x514>
 800767a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800767e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007682:	2b00      	cmp	r3, #0
 8007684:	d008      	beq.n	8007698 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f8fb 	bl	8007882 <UART_EndTransmit_IT>
    return;
 800768c:	e004      	b.n	8007698 <HAL_UART_IRQHandler+0x514>
    return;
 800768e:	bf00      	nop
 8007690:	e002      	b.n	8007698 <HAL_UART_IRQHandler+0x514>
      return;
 8007692:	bf00      	nop
 8007694:	e000      	b.n	8007698 <HAL_UART_IRQHandler+0x514>
      return;
 8007696:	bf00      	nop
  }
}
 8007698:	37e8      	adds	r7, #232	; 0xe8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop

080076a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	460b      	mov	r3, r1
 80076e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b095      	sub	sp, #84	; 0x54
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	330c      	adds	r3, #12
 8007702:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007706:	e853 3f00 	ldrex	r3, [r3]
 800770a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800770c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	330c      	adds	r3, #12
 800771a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800771c:	643a      	str	r2, [r7, #64]	; 0x40
 800771e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007720:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007722:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007724:	e841 2300 	strex	r3, r2, [r1]
 8007728:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800772a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1e5      	bne.n	80076fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	3314      	adds	r3, #20
 8007736:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007738:	6a3b      	ldr	r3, [r7, #32]
 800773a:	e853 3f00 	ldrex	r3, [r3]
 800773e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	f023 0301 	bic.w	r3, r3, #1
 8007746:	64bb      	str	r3, [r7, #72]	; 0x48
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	3314      	adds	r3, #20
 800774e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007750:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007752:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007758:	e841 2300 	strex	r3, r2, [r1]
 800775c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800775e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1e5      	bne.n	8007730 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007768:	2b01      	cmp	r3, #1
 800776a:	d119      	bne.n	80077a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	330c      	adds	r3, #12
 8007772:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	e853 3f00 	ldrex	r3, [r3]
 800777a:	60bb      	str	r3, [r7, #8]
   return(result);
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	f023 0310 	bic.w	r3, r3, #16
 8007782:	647b      	str	r3, [r7, #68]	; 0x44
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	330c      	adds	r3, #12
 800778a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800778c:	61ba      	str	r2, [r7, #24]
 800778e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007790:	6979      	ldr	r1, [r7, #20]
 8007792:	69ba      	ldr	r2, [r7, #24]
 8007794:	e841 2300 	strex	r3, r2, [r1]
 8007798:	613b      	str	r3, [r7, #16]
   return(result);
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1e5      	bne.n	800776c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2220      	movs	r2, #32
 80077a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80077ae:	bf00      	nop
 80077b0:	3754      	adds	r7, #84	; 0x54
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b084      	sub	sp, #16
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f7ff ff77 	bl	80076c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077da:	bf00      	nop
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80077e2:	b480      	push	{r7}
 80077e4:	b085      	sub	sp, #20
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b21      	cmp	r3, #33	; 0x21
 80077f4:	d13e      	bne.n	8007874 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077fe:	d114      	bne.n	800782a <UART_Transmit_IT+0x48>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d110      	bne.n	800782a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6a1b      	ldr	r3, [r3, #32]
 800780c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	881b      	ldrh	r3, [r3, #0]
 8007812:	461a      	mov	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800781c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a1b      	ldr	r3, [r3, #32]
 8007822:	1c9a      	adds	r2, r3, #2
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	621a      	str	r2, [r3, #32]
 8007828:	e008      	b.n	800783c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	1c59      	adds	r1, r3, #1
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	6211      	str	r1, [r2, #32]
 8007834:	781a      	ldrb	r2, [r3, #0]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007840:	b29b      	uxth	r3, r3
 8007842:	3b01      	subs	r3, #1
 8007844:	b29b      	uxth	r3, r3
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	4619      	mov	r1, r3
 800784a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10f      	bne.n	8007870 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68da      	ldr	r2, [r3, #12]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800785e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68da      	ldr	r2, [r3, #12]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800786e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007870:	2300      	movs	r3, #0
 8007872:	e000      	b.n	8007876 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007874:	2302      	movs	r3, #2
  }
}
 8007876:	4618      	mov	r0, r3
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b082      	sub	sp, #8
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68da      	ldr	r2, [r3, #12]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007898:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2220      	movs	r2, #32
 800789e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f7ff fefc 	bl	80076a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3708      	adds	r7, #8
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b08c      	sub	sp, #48	; 0x30
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b22      	cmp	r3, #34	; 0x22
 80078c4:	f040 80ab 	bne.w	8007a1e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078d0:	d117      	bne.n	8007902 <UART_Receive_IT+0x50>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d113      	bne.n	8007902 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80078da:	2300      	movs	r3, #0
 80078dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078fa:	1c9a      	adds	r2, r3, #2
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	629a      	str	r2, [r3, #40]	; 0x28
 8007900:	e026      	b.n	8007950 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007906:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007908:	2300      	movs	r3, #0
 800790a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007914:	d007      	beq.n	8007926 <UART_Receive_IT+0x74>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10a      	bne.n	8007934 <UART_Receive_IT+0x82>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d106      	bne.n	8007934 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	b2da      	uxtb	r2, r3
 800792e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007930:	701a      	strb	r2, [r3, #0]
 8007932:	e008      	b.n	8007946 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	b2db      	uxtb	r3, r3
 800793c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007940:	b2da      	uxtb	r2, r3
 8007942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007944:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794a:	1c5a      	adds	r2, r3, #1
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007954:	b29b      	uxth	r3, r3
 8007956:	3b01      	subs	r3, #1
 8007958:	b29b      	uxth	r3, r3
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	4619      	mov	r1, r3
 800795e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007960:	2b00      	cmp	r3, #0
 8007962:	d15a      	bne.n	8007a1a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68da      	ldr	r2, [r3, #12]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f022 0220 	bic.w	r2, r2, #32
 8007972:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68da      	ldr	r2, [r3, #12]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007982:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	695a      	ldr	r2, [r3, #20]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f022 0201 	bic.w	r2, r2, #1
 8007992:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2220      	movs	r2, #32
 8007998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d135      	bne.n	8007a10 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	330c      	adds	r3, #12
 80079b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	e853 3f00 	ldrex	r3, [r3]
 80079b8:	613b      	str	r3, [r7, #16]
   return(result);
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	f023 0310 	bic.w	r3, r3, #16
 80079c0:	627b      	str	r3, [r7, #36]	; 0x24
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	330c      	adds	r3, #12
 80079c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ca:	623a      	str	r2, [r7, #32]
 80079cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ce:	69f9      	ldr	r1, [r7, #28]
 80079d0:	6a3a      	ldr	r2, [r7, #32]
 80079d2:	e841 2300 	strex	r3, r2, [r1]
 80079d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1e5      	bne.n	80079aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 0310 	and.w	r3, r3, #16
 80079e8:	2b10      	cmp	r3, #16
 80079ea:	d10a      	bne.n	8007a02 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079ec:	2300      	movs	r3, #0
 80079ee:	60fb      	str	r3, [r7, #12]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	60fb      	str	r3, [r7, #12]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	60fb      	str	r3, [r7, #12]
 8007a00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a06:	4619      	mov	r1, r3
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f7ff fe67 	bl	80076dc <HAL_UARTEx_RxEventCallback>
 8007a0e:	e002      	b.n	8007a16 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7ff fe4f 	bl	80076b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a16:	2300      	movs	r3, #0
 8007a18:	e002      	b.n	8007a20 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	e000      	b.n	8007a20 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007a1e:	2302      	movs	r3, #2
  }
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3730      	adds	r7, #48	; 0x30
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a2c:	b0c0      	sub	sp, #256	; 0x100
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a44:	68d9      	ldr	r1, [r3, #12]
 8007a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	ea40 0301 	orr.w	r3, r0, r1
 8007a50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a56:	689a      	ldr	r2, [r3, #8]
 8007a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	431a      	orrs	r2, r3
 8007a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	431a      	orrs	r2, r3
 8007a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a6c:	69db      	ldr	r3, [r3, #28]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007a80:	f021 010c 	bic.w	r1, r1, #12
 8007a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a8e:	430b      	orrs	r3, r1
 8007a90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa2:	6999      	ldr	r1, [r3, #24]
 8007aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	ea40 0301 	orr.w	r3, r0, r1
 8007aae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	4b8f      	ldr	r3, [pc, #572]	; (8007cf4 <UART_SetConfig+0x2cc>)
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d005      	beq.n	8007ac8 <UART_SetConfig+0xa0>
 8007abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	4b8d      	ldr	r3, [pc, #564]	; (8007cf8 <UART_SetConfig+0x2d0>)
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d104      	bne.n	8007ad2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ac8:	f7fd fe16 	bl	80056f8 <HAL_RCC_GetPCLK2Freq>
 8007acc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007ad0:	e003      	b.n	8007ada <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ad2:	f7fd fdfd 	bl	80056d0 <HAL_RCC_GetPCLK1Freq>
 8007ad6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ade:	69db      	ldr	r3, [r3, #28]
 8007ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ae4:	f040 810c 	bne.w	8007d00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007aec:	2200      	movs	r2, #0
 8007aee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007af2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007af6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007afa:	4622      	mov	r2, r4
 8007afc:	462b      	mov	r3, r5
 8007afe:	1891      	adds	r1, r2, r2
 8007b00:	65b9      	str	r1, [r7, #88]	; 0x58
 8007b02:	415b      	adcs	r3, r3
 8007b04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007b0a:	4621      	mov	r1, r4
 8007b0c:	eb12 0801 	adds.w	r8, r2, r1
 8007b10:	4629      	mov	r1, r5
 8007b12:	eb43 0901 	adc.w	r9, r3, r1
 8007b16:	f04f 0200 	mov.w	r2, #0
 8007b1a:	f04f 0300 	mov.w	r3, #0
 8007b1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b2a:	4690      	mov	r8, r2
 8007b2c:	4699      	mov	r9, r3
 8007b2e:	4623      	mov	r3, r4
 8007b30:	eb18 0303 	adds.w	r3, r8, r3
 8007b34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b38:	462b      	mov	r3, r5
 8007b3a:	eb49 0303 	adc.w	r3, r9, r3
 8007b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007b52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007b56:	460b      	mov	r3, r1
 8007b58:	18db      	adds	r3, r3, r3
 8007b5a:	653b      	str	r3, [r7, #80]	; 0x50
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	eb42 0303 	adc.w	r3, r2, r3
 8007b62:	657b      	str	r3, [r7, #84]	; 0x54
 8007b64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007b68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007b6c:	f7f8 fb90 	bl	8000290 <__aeabi_uldivmod>
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	4b61      	ldr	r3, [pc, #388]	; (8007cfc <UART_SetConfig+0x2d4>)
 8007b76:	fba3 2302 	umull	r2, r3, r3, r2
 8007b7a:	095b      	lsrs	r3, r3, #5
 8007b7c:	011c      	lsls	r4, r3, #4
 8007b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b82:	2200      	movs	r2, #0
 8007b84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b88:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007b8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007b90:	4642      	mov	r2, r8
 8007b92:	464b      	mov	r3, r9
 8007b94:	1891      	adds	r1, r2, r2
 8007b96:	64b9      	str	r1, [r7, #72]	; 0x48
 8007b98:	415b      	adcs	r3, r3
 8007b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007ba0:	4641      	mov	r1, r8
 8007ba2:	eb12 0a01 	adds.w	sl, r2, r1
 8007ba6:	4649      	mov	r1, r9
 8007ba8:	eb43 0b01 	adc.w	fp, r3, r1
 8007bac:	f04f 0200 	mov.w	r2, #0
 8007bb0:	f04f 0300 	mov.w	r3, #0
 8007bb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007bb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007bbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bc0:	4692      	mov	sl, r2
 8007bc2:	469b      	mov	fp, r3
 8007bc4:	4643      	mov	r3, r8
 8007bc6:	eb1a 0303 	adds.w	r3, sl, r3
 8007bca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bce:	464b      	mov	r3, r9
 8007bd0:	eb4b 0303 	adc.w	r3, fp, r3
 8007bd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007be4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007be8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007bec:	460b      	mov	r3, r1
 8007bee:	18db      	adds	r3, r3, r3
 8007bf0:	643b      	str	r3, [r7, #64]	; 0x40
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	eb42 0303 	adc.w	r3, r2, r3
 8007bf8:	647b      	str	r3, [r7, #68]	; 0x44
 8007bfa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007bfe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007c02:	f7f8 fb45 	bl	8000290 <__aeabi_uldivmod>
 8007c06:	4602      	mov	r2, r0
 8007c08:	460b      	mov	r3, r1
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	4b3b      	ldr	r3, [pc, #236]	; (8007cfc <UART_SetConfig+0x2d4>)
 8007c0e:	fba3 2301 	umull	r2, r3, r3, r1
 8007c12:	095b      	lsrs	r3, r3, #5
 8007c14:	2264      	movs	r2, #100	; 0x64
 8007c16:	fb02 f303 	mul.w	r3, r2, r3
 8007c1a:	1acb      	subs	r3, r1, r3
 8007c1c:	00db      	lsls	r3, r3, #3
 8007c1e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007c22:	4b36      	ldr	r3, [pc, #216]	; (8007cfc <UART_SetConfig+0x2d4>)
 8007c24:	fba3 2302 	umull	r2, r3, r3, r2
 8007c28:	095b      	lsrs	r3, r3, #5
 8007c2a:	005b      	lsls	r3, r3, #1
 8007c2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c30:	441c      	add	r4, r3
 8007c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c36:	2200      	movs	r2, #0
 8007c38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007c40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007c44:	4642      	mov	r2, r8
 8007c46:	464b      	mov	r3, r9
 8007c48:	1891      	adds	r1, r2, r2
 8007c4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c4c:	415b      	adcs	r3, r3
 8007c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c54:	4641      	mov	r1, r8
 8007c56:	1851      	adds	r1, r2, r1
 8007c58:	6339      	str	r1, [r7, #48]	; 0x30
 8007c5a:	4649      	mov	r1, r9
 8007c5c:	414b      	adcs	r3, r1
 8007c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c60:	f04f 0200 	mov.w	r2, #0
 8007c64:	f04f 0300 	mov.w	r3, #0
 8007c68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007c6c:	4659      	mov	r1, fp
 8007c6e:	00cb      	lsls	r3, r1, #3
 8007c70:	4651      	mov	r1, sl
 8007c72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c76:	4651      	mov	r1, sl
 8007c78:	00ca      	lsls	r2, r1, #3
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	4603      	mov	r3, r0
 8007c80:	4642      	mov	r2, r8
 8007c82:	189b      	adds	r3, r3, r2
 8007c84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c88:	464b      	mov	r3, r9
 8007c8a:	460a      	mov	r2, r1
 8007c8c:	eb42 0303 	adc.w	r3, r2, r3
 8007c90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007ca0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007ca4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007ca8:	460b      	mov	r3, r1
 8007caa:	18db      	adds	r3, r3, r3
 8007cac:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cae:	4613      	mov	r3, r2
 8007cb0:	eb42 0303 	adc.w	r3, r2, r3
 8007cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007cba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007cbe:	f7f8 fae7 	bl	8000290 <__aeabi_uldivmod>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	4b0d      	ldr	r3, [pc, #52]	; (8007cfc <UART_SetConfig+0x2d4>)
 8007cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8007ccc:	095b      	lsrs	r3, r3, #5
 8007cce:	2164      	movs	r1, #100	; 0x64
 8007cd0:	fb01 f303 	mul.w	r3, r1, r3
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	00db      	lsls	r3, r3, #3
 8007cd8:	3332      	adds	r3, #50	; 0x32
 8007cda:	4a08      	ldr	r2, [pc, #32]	; (8007cfc <UART_SetConfig+0x2d4>)
 8007cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce0:	095b      	lsrs	r3, r3, #5
 8007ce2:	f003 0207 	and.w	r2, r3, #7
 8007ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4422      	add	r2, r4
 8007cee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007cf0:	e105      	b.n	8007efe <UART_SetConfig+0x4d6>
 8007cf2:	bf00      	nop
 8007cf4:	40011000 	.word	0x40011000
 8007cf8:	40011400 	.word	0x40011400
 8007cfc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d04:	2200      	movs	r2, #0
 8007d06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007d0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007d0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007d12:	4642      	mov	r2, r8
 8007d14:	464b      	mov	r3, r9
 8007d16:	1891      	adds	r1, r2, r2
 8007d18:	6239      	str	r1, [r7, #32]
 8007d1a:	415b      	adcs	r3, r3
 8007d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d22:	4641      	mov	r1, r8
 8007d24:	1854      	adds	r4, r2, r1
 8007d26:	4649      	mov	r1, r9
 8007d28:	eb43 0501 	adc.w	r5, r3, r1
 8007d2c:	f04f 0200 	mov.w	r2, #0
 8007d30:	f04f 0300 	mov.w	r3, #0
 8007d34:	00eb      	lsls	r3, r5, #3
 8007d36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d3a:	00e2      	lsls	r2, r4, #3
 8007d3c:	4614      	mov	r4, r2
 8007d3e:	461d      	mov	r5, r3
 8007d40:	4643      	mov	r3, r8
 8007d42:	18e3      	adds	r3, r4, r3
 8007d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d48:	464b      	mov	r3, r9
 8007d4a:	eb45 0303 	adc.w	r3, r5, r3
 8007d4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d62:	f04f 0200 	mov.w	r2, #0
 8007d66:	f04f 0300 	mov.w	r3, #0
 8007d6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007d6e:	4629      	mov	r1, r5
 8007d70:	008b      	lsls	r3, r1, #2
 8007d72:	4621      	mov	r1, r4
 8007d74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d78:	4621      	mov	r1, r4
 8007d7a:	008a      	lsls	r2, r1, #2
 8007d7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007d80:	f7f8 fa86 	bl	8000290 <__aeabi_uldivmod>
 8007d84:	4602      	mov	r2, r0
 8007d86:	460b      	mov	r3, r1
 8007d88:	4b60      	ldr	r3, [pc, #384]	; (8007f0c <UART_SetConfig+0x4e4>)
 8007d8a:	fba3 2302 	umull	r2, r3, r3, r2
 8007d8e:	095b      	lsrs	r3, r3, #5
 8007d90:	011c      	lsls	r4, r3, #4
 8007d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d96:	2200      	movs	r2, #0
 8007d98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007da0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007da4:	4642      	mov	r2, r8
 8007da6:	464b      	mov	r3, r9
 8007da8:	1891      	adds	r1, r2, r2
 8007daa:	61b9      	str	r1, [r7, #24]
 8007dac:	415b      	adcs	r3, r3
 8007dae:	61fb      	str	r3, [r7, #28]
 8007db0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007db4:	4641      	mov	r1, r8
 8007db6:	1851      	adds	r1, r2, r1
 8007db8:	6139      	str	r1, [r7, #16]
 8007dba:	4649      	mov	r1, r9
 8007dbc:	414b      	adcs	r3, r1
 8007dbe:	617b      	str	r3, [r7, #20]
 8007dc0:	f04f 0200 	mov.w	r2, #0
 8007dc4:	f04f 0300 	mov.w	r3, #0
 8007dc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007dcc:	4659      	mov	r1, fp
 8007dce:	00cb      	lsls	r3, r1, #3
 8007dd0:	4651      	mov	r1, sl
 8007dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dd6:	4651      	mov	r1, sl
 8007dd8:	00ca      	lsls	r2, r1, #3
 8007dda:	4610      	mov	r0, r2
 8007ddc:	4619      	mov	r1, r3
 8007dde:	4603      	mov	r3, r0
 8007de0:	4642      	mov	r2, r8
 8007de2:	189b      	adds	r3, r3, r2
 8007de4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007de8:	464b      	mov	r3, r9
 8007dea:	460a      	mov	r2, r1
 8007dec:	eb42 0303 	adc.w	r3, r2, r3
 8007df0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	67bb      	str	r3, [r7, #120]	; 0x78
 8007dfe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007e00:	f04f 0200 	mov.w	r2, #0
 8007e04:	f04f 0300 	mov.w	r3, #0
 8007e08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007e0c:	4649      	mov	r1, r9
 8007e0e:	008b      	lsls	r3, r1, #2
 8007e10:	4641      	mov	r1, r8
 8007e12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e16:	4641      	mov	r1, r8
 8007e18:	008a      	lsls	r2, r1, #2
 8007e1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007e1e:	f7f8 fa37 	bl	8000290 <__aeabi_uldivmod>
 8007e22:	4602      	mov	r2, r0
 8007e24:	460b      	mov	r3, r1
 8007e26:	4b39      	ldr	r3, [pc, #228]	; (8007f0c <UART_SetConfig+0x4e4>)
 8007e28:	fba3 1302 	umull	r1, r3, r3, r2
 8007e2c:	095b      	lsrs	r3, r3, #5
 8007e2e:	2164      	movs	r1, #100	; 0x64
 8007e30:	fb01 f303 	mul.w	r3, r1, r3
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	011b      	lsls	r3, r3, #4
 8007e38:	3332      	adds	r3, #50	; 0x32
 8007e3a:	4a34      	ldr	r2, [pc, #208]	; (8007f0c <UART_SetConfig+0x4e4>)
 8007e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e40:	095b      	lsrs	r3, r3, #5
 8007e42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e46:	441c      	add	r4, r3
 8007e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	673b      	str	r3, [r7, #112]	; 0x70
 8007e50:	677a      	str	r2, [r7, #116]	; 0x74
 8007e52:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007e56:	4642      	mov	r2, r8
 8007e58:	464b      	mov	r3, r9
 8007e5a:	1891      	adds	r1, r2, r2
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	415b      	adcs	r3, r3
 8007e60:	60fb      	str	r3, [r7, #12]
 8007e62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e66:	4641      	mov	r1, r8
 8007e68:	1851      	adds	r1, r2, r1
 8007e6a:	6039      	str	r1, [r7, #0]
 8007e6c:	4649      	mov	r1, r9
 8007e6e:	414b      	adcs	r3, r1
 8007e70:	607b      	str	r3, [r7, #4]
 8007e72:	f04f 0200 	mov.w	r2, #0
 8007e76:	f04f 0300 	mov.w	r3, #0
 8007e7a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007e7e:	4659      	mov	r1, fp
 8007e80:	00cb      	lsls	r3, r1, #3
 8007e82:	4651      	mov	r1, sl
 8007e84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e88:	4651      	mov	r1, sl
 8007e8a:	00ca      	lsls	r2, r1, #3
 8007e8c:	4610      	mov	r0, r2
 8007e8e:	4619      	mov	r1, r3
 8007e90:	4603      	mov	r3, r0
 8007e92:	4642      	mov	r2, r8
 8007e94:	189b      	adds	r3, r3, r2
 8007e96:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e98:	464b      	mov	r3, r9
 8007e9a:	460a      	mov	r2, r1
 8007e9c:	eb42 0303 	adc.w	r3, r2, r3
 8007ea0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	663b      	str	r3, [r7, #96]	; 0x60
 8007eac:	667a      	str	r2, [r7, #100]	; 0x64
 8007eae:	f04f 0200 	mov.w	r2, #0
 8007eb2:	f04f 0300 	mov.w	r3, #0
 8007eb6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007eba:	4649      	mov	r1, r9
 8007ebc:	008b      	lsls	r3, r1, #2
 8007ebe:	4641      	mov	r1, r8
 8007ec0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ec4:	4641      	mov	r1, r8
 8007ec6:	008a      	lsls	r2, r1, #2
 8007ec8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007ecc:	f7f8 f9e0 	bl	8000290 <__aeabi_uldivmod>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	4b0d      	ldr	r3, [pc, #52]	; (8007f0c <UART_SetConfig+0x4e4>)
 8007ed6:	fba3 1302 	umull	r1, r3, r3, r2
 8007eda:	095b      	lsrs	r3, r3, #5
 8007edc:	2164      	movs	r1, #100	; 0x64
 8007ede:	fb01 f303 	mul.w	r3, r1, r3
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	011b      	lsls	r3, r3, #4
 8007ee6:	3332      	adds	r3, #50	; 0x32
 8007ee8:	4a08      	ldr	r2, [pc, #32]	; (8007f0c <UART_SetConfig+0x4e4>)
 8007eea:	fba2 2303 	umull	r2, r3, r2, r3
 8007eee:	095b      	lsrs	r3, r3, #5
 8007ef0:	f003 020f 	and.w	r2, r3, #15
 8007ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4422      	add	r2, r4
 8007efc:	609a      	str	r2, [r3, #8]
}
 8007efe:	bf00      	nop
 8007f00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007f04:	46bd      	mov	sp, r7
 8007f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f0a:	bf00      	nop
 8007f0c:	51eb851f 	.word	0x51eb851f

08007f10 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d123      	bne.n	8007f6a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007f2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	6851      	ldr	r1, [r2, #4]
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	6892      	ldr	r2, [r2, #8]
 8007f36:	4311      	orrs	r1, r2
 8007f38:	683a      	ldr	r2, [r7, #0]
 8007f3a:	68d2      	ldr	r2, [r2, #12]
 8007f3c:	4311      	orrs	r1, r2
 8007f3e:	683a      	ldr	r2, [r7, #0]
 8007f40:	6912      	ldr	r2, [r2, #16]
 8007f42:	4311      	orrs	r1, r2
 8007f44:	683a      	ldr	r2, [r7, #0]
 8007f46:	6952      	ldr	r2, [r2, #20]
 8007f48:	4311      	orrs	r1, r2
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	6992      	ldr	r2, [r2, #24]
 8007f4e:	4311      	orrs	r1, r2
 8007f50:	683a      	ldr	r2, [r7, #0]
 8007f52:	69d2      	ldr	r2, [r2, #28]
 8007f54:	4311      	orrs	r1, r2
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	6a12      	ldr	r2, [r2, #32]
 8007f5a:	4311      	orrs	r1, r2
 8007f5c:	683a      	ldr	r2, [r7, #0]
 8007f5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007f60:	430a      	orrs	r2, r1
 8007f62:	431a      	orrs	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	601a      	str	r2, [r3, #0]
 8007f68:	e028      	b.n	8007fbc <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	69d9      	ldr	r1, [r3, #28]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	6a1b      	ldr	r3, [r3, #32]
 8007f7a:	4319      	orrs	r1, r3
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f80:	430b      	orrs	r3, r1
 8007f82:	431a      	orrs	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007f90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	6851      	ldr	r1, [r2, #4]
 8007f98:	683a      	ldr	r2, [r7, #0]
 8007f9a:	6892      	ldr	r2, [r2, #8]
 8007f9c:	4311      	orrs	r1, r2
 8007f9e:	683a      	ldr	r2, [r7, #0]
 8007fa0:	68d2      	ldr	r2, [r2, #12]
 8007fa2:	4311      	orrs	r1, r2
 8007fa4:	683a      	ldr	r2, [r7, #0]
 8007fa6:	6912      	ldr	r2, [r2, #16]
 8007fa8:	4311      	orrs	r1, r2
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	6952      	ldr	r2, [r2, #20]
 8007fae:	4311      	orrs	r1, r2
 8007fb0:	683a      	ldr	r2, [r7, #0]
 8007fb2:	6992      	ldr	r2, [r2, #24]
 8007fb4:	430a      	orrs	r2, r1
 8007fb6:	431a      	orrs	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b085      	sub	sp, #20
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	60f8      	str	r0, [r7, #12]
 8007fd2:	60b9      	str	r1, [r7, #8]
 8007fd4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d128      	bne.n	800802e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	1e59      	subs	r1, r3, #1
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	011b      	lsls	r3, r3, #4
 8007ff2:	4319      	orrs	r1, r3
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	021b      	lsls	r3, r3, #8
 8007ffc:	4319      	orrs	r1, r3
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	3b01      	subs	r3, #1
 8008004:	031b      	lsls	r3, r3, #12
 8008006:	4319      	orrs	r1, r3
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	3b01      	subs	r3, #1
 800800e:	041b      	lsls	r3, r3, #16
 8008010:	4319      	orrs	r1, r3
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	3b01      	subs	r3, #1
 8008018:	051b      	lsls	r3, r3, #20
 800801a:	4319      	orrs	r1, r3
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	699b      	ldr	r3, [r3, #24]
 8008020:	3b01      	subs	r3, #1
 8008022:	061b      	lsls	r3, r3, #24
 8008024:	430b      	orrs	r3, r1
 8008026:	431a      	orrs	r2, r3
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	609a      	str	r2, [r3, #8]
 800802c:	e02f      	b.n	800808e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008036:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	68d2      	ldr	r2, [r2, #12]
 800803e:	3a01      	subs	r2, #1
 8008040:	0311      	lsls	r1, r2, #12
 8008042:	68ba      	ldr	r2, [r7, #8]
 8008044:	6952      	ldr	r2, [r2, #20]
 8008046:	3a01      	subs	r2, #1
 8008048:	0512      	lsls	r2, r2, #20
 800804a:	430a      	orrs	r2, r1
 800804c:	431a      	orrs	r2, r3
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	1e59      	subs	r1, r3, #1
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	3b01      	subs	r3, #1
 8008066:	011b      	lsls	r3, r3, #4
 8008068:	4319      	orrs	r1, r3
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	3b01      	subs	r3, #1
 8008070:	021b      	lsls	r3, r3, #8
 8008072:	4319      	orrs	r1, r3
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	3b01      	subs	r3, #1
 800807a:	041b      	lsls	r3, r3, #16
 800807c:	4319      	orrs	r1, r3
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	3b01      	subs	r3, #1
 8008084:	061b      	lsls	r3, r3, #24
 8008086:	430b      	orrs	r3, r1
 8008088:	431a      	orrs	r2, r3
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3714      	adds	r7, #20
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80080a8:	2300      	movs	r3, #0
 80080aa:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	0d9b      	lsrs	r3, r3, #22
 80080b2:	059b      	lsls	r3, r3, #22
 80080b4:	68ba      	ldr	r2, [r7, #8]
 80080b6:	6811      	ldr	r1, [r2, #0]
 80080b8:	68ba      	ldr	r2, [r7, #8]
 80080ba:	6852      	ldr	r2, [r2, #4]
 80080bc:	4311      	orrs	r1, r2
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	6892      	ldr	r2, [r2, #8]
 80080c2:	3a01      	subs	r2, #1
 80080c4:	0152      	lsls	r2, r2, #5
 80080c6:	4311      	orrs	r1, r2
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	68d2      	ldr	r2, [r2, #12]
 80080cc:	0252      	lsls	r2, r2, #9
 80080ce:	430a      	orrs	r2, r1
 80080d0:	431a      	orrs	r2, r3
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80080d6:	f7fa ff07 	bl	8002ee8 <HAL_GetTick>
 80080da:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80080dc:	e010      	b.n	8008100 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e4:	d00c      	beq.n	8008100 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d007      	beq.n	80080fc <FMC_SDRAM_SendCommand+0x60>
 80080ec:	f7fa fefc 	bl	8002ee8 <HAL_GetTick>
 80080f0:	4602      	mov	r2, r0
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d201      	bcs.n	8008100 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e006      	b.n	800810e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	f003 0320 	and.w	r3, r3, #32
 8008108:	2b20      	cmp	r3, #32
 800810a:	d0e8      	beq.n	80080de <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3718      	adds	r7, #24
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008116:	b480      	push	{r7}
 8008118:	b083      	sub	sp, #12
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	695b      	ldr	r3, [r3, #20]
 8008124:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008128:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800812c:	683a      	ldr	r2, [r7, #0]
 800812e:	0052      	lsls	r2, r2, #1
 8008130:	431a      	orrs	r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
 800814a:	4603      	mov	r3, r0
 800814c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800814e:	2300      	movs	r3, #0
 8008150:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008156:	2b84      	cmp	r3, #132	; 0x84
 8008158:	d005      	beq.n	8008166 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800815a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	4413      	add	r3, r2
 8008162:	3303      	adds	r3, #3
 8008164:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008166:	68fb      	ldr	r3, [r7, #12]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3714      	adds	r7, #20
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008178:	f000 fa80 	bl	800867c <vTaskStartScheduler>
  
  return osOK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	bd80      	pop	{r7, pc}

08008182 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008182:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008184:	b089      	sub	sp, #36	; 0x24
 8008186:	af04      	add	r7, sp, #16
 8008188:	6078      	str	r0, [r7, #4]
 800818a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	695b      	ldr	r3, [r3, #20]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d020      	beq.n	80081d6 <osThreadCreate+0x54>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d01c      	beq.n	80081d6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685c      	ldr	r4, [r3, #4]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681d      	ldr	r5, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	691e      	ldr	r6, [r3, #16]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7ff ffc8 	bl	8008144 <makeFreeRtosPriority>
 80081b4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081be:	9202      	str	r2, [sp, #8]
 80081c0:	9301      	str	r3, [sp, #4]
 80081c2:	9100      	str	r1, [sp, #0]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	4632      	mov	r2, r6
 80081c8:	4629      	mov	r1, r5
 80081ca:	4620      	mov	r0, r4
 80081cc:	f000 f8a0 	bl	8008310 <xTaskCreateStatic>
 80081d0:	4603      	mov	r3, r0
 80081d2:	60fb      	str	r3, [r7, #12]
 80081d4:	e01c      	b.n	8008210 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685c      	ldr	r4, [r3, #4]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081e2:	b29e      	uxth	r6, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7ff ffaa 	bl	8008144 <makeFreeRtosPriority>
 80081f0:	4602      	mov	r2, r0
 80081f2:	f107 030c 	add.w	r3, r7, #12
 80081f6:	9301      	str	r3, [sp, #4]
 80081f8:	9200      	str	r2, [sp, #0]
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	4632      	mov	r2, r6
 80081fe:	4629      	mov	r1, r5
 8008200:	4620      	mov	r0, r4
 8008202:	f000 f8e2 	bl	80083ca <xTaskCreate>
 8008206:	4603      	mov	r3, r0
 8008208:	2b01      	cmp	r3, #1
 800820a:	d001      	beq.n	8008210 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800820c:	2300      	movs	r3, #0
 800820e:	e000      	b.n	8008212 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008210:	68fb      	ldr	r3, [r7, #12]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3714      	adds	r7, #20
 8008216:	46bd      	mov	sp, r7
 8008218:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800821a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800821a:	b480      	push	{r7}
 800821c:	b083      	sub	sp, #12
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f103 0208 	add.w	r2, r3, #8
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f04f 32ff 	mov.w	r2, #4294967295
 8008232:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f103 0208 	add.w	r2, r3, #8
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f103 0208 	add.w	r2, r3, #8
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800824e:	bf00      	nop
 8008250:	370c      	adds	r7, #12
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr

0800825a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800825a:	b480      	push	{r7}
 800825c:	b083      	sub	sp, #12
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	689a      	ldr	r2, [r3, #8]
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	683a      	ldr	r2, [r7, #0]
 8008298:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	683a      	ldr	r2, [r7, #0]
 800829e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	1c5a      	adds	r2, r3, #1
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	601a      	str	r2, [r3, #0]
}
 80082b0:	bf00      	nop
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	6892      	ldr	r2, [r2, #8]
 80082d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	6852      	ldr	r2, [r2, #4]
 80082dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d103      	bne.n	80082f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	689a      	ldr	r2, [r3, #8]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	1e5a      	subs	r2, r3, #1
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
}
 8008304:	4618      	mov	r0, r3
 8008306:	3714      	adds	r7, #20
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008310:	b580      	push	{r7, lr}
 8008312:	b08e      	sub	sp, #56	; 0x38
 8008314:	af04      	add	r7, sp, #16
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	607a      	str	r2, [r7, #4]
 800831c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800831e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10a      	bne.n	800833a <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008328:	f383 8811 	msr	BASEPRI, r3
 800832c:	f3bf 8f6f 	isb	sy
 8008330:	f3bf 8f4f 	dsb	sy
 8008334:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008336:	bf00      	nop
 8008338:	e7fe      	b.n	8008338 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800833a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10a      	bne.n	8008356 <xTaskCreateStatic+0x46>
	__asm volatile
 8008340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	61fb      	str	r3, [r7, #28]
}
 8008352:	bf00      	nop
 8008354:	e7fe      	b.n	8008354 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008356:	23b8      	movs	r3, #184	; 0xb8
 8008358:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	2bb8      	cmp	r3, #184	; 0xb8
 800835e:	d00a      	beq.n	8008376 <xTaskCreateStatic+0x66>
	__asm volatile
 8008360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008364:	f383 8811 	msr	BASEPRI, r3
 8008368:	f3bf 8f6f 	isb	sy
 800836c:	f3bf 8f4f 	dsb	sy
 8008370:	61bb      	str	r3, [r7, #24]
}
 8008372:	bf00      	nop
 8008374:	e7fe      	b.n	8008374 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008376:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837a:	2b00      	cmp	r3, #0
 800837c:	d01e      	beq.n	80083bc <xTaskCreateStatic+0xac>
 800837e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008380:	2b00      	cmp	r3, #0
 8008382:	d01b      	beq.n	80083bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008386:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800838c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008390:	2202      	movs	r2, #2
 8008392:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008396:	2300      	movs	r3, #0
 8008398:	9303      	str	r3, [sp, #12]
 800839a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839c:	9302      	str	r3, [sp, #8]
 800839e:	f107 0314 	add.w	r3, r7, #20
 80083a2:	9301      	str	r3, [sp, #4]
 80083a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a6:	9300      	str	r3, [sp, #0]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	68b9      	ldr	r1, [r7, #8]
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	f000 f850 	bl	8008454 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083b6:	f000 f8f7 	bl	80085a8 <prvAddNewTaskToReadyList>
 80083ba:	e001      	b.n	80083c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80083bc:	2300      	movs	r3, #0
 80083be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80083c0:	697b      	ldr	r3, [r7, #20]
	}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3728      	adds	r7, #40	; 0x28
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b08c      	sub	sp, #48	; 0x30
 80083ce:	af04      	add	r7, sp, #16
 80083d0:	60f8      	str	r0, [r7, #12]
 80083d2:	60b9      	str	r1, [r7, #8]
 80083d4:	603b      	str	r3, [r7, #0]
 80083d6:	4613      	mov	r3, r2
 80083d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80083da:	88fb      	ldrh	r3, [r7, #6]
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4618      	mov	r0, r3
 80083e0:	f000 fe8a 	bl	80090f8 <pvPortMalloc>
 80083e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00e      	beq.n	800840a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80083ec:	20b8      	movs	r0, #184	; 0xb8
 80083ee:	f000 fe83 	bl	80090f8 <pvPortMalloc>
 80083f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d003      	beq.n	8008402 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	697a      	ldr	r2, [r7, #20]
 80083fe:	631a      	str	r2, [r3, #48]	; 0x30
 8008400:	e005      	b.n	800840e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008402:	6978      	ldr	r0, [r7, #20]
 8008404:	f000 ff48 	bl	8009298 <vPortFree>
 8008408:	e001      	b.n	800840e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800840a:	2300      	movs	r3, #0
 800840c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d017      	beq.n	8008444 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	2200      	movs	r2, #0
 8008418:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800841c:	88fa      	ldrh	r2, [r7, #6]
 800841e:	2300      	movs	r3, #0
 8008420:	9303      	str	r3, [sp, #12]
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	9302      	str	r3, [sp, #8]
 8008426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008428:	9301      	str	r3, [sp, #4]
 800842a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	68b9      	ldr	r1, [r7, #8]
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f000 f80e 	bl	8008454 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008438:	69f8      	ldr	r0, [r7, #28]
 800843a:	f000 f8b5 	bl	80085a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800843e:	2301      	movs	r3, #1
 8008440:	61bb      	str	r3, [r7, #24]
 8008442:	e002      	b.n	800844a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008444:	f04f 33ff 	mov.w	r3, #4294967295
 8008448:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800844a:	69bb      	ldr	r3, [r7, #24]
	}
 800844c:	4618      	mov	r0, r3
 800844e:	3720      	adds	r7, #32
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b088      	sub	sp, #32
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
 8008460:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008464:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	461a      	mov	r2, r3
 800846c:	21a5      	movs	r1, #165	; 0xa5
 800846e:	f001 f86b 	bl	8009548 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800847c:	3b01      	subs	r3, #1
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	4413      	add	r3, r2
 8008482:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	f023 0307 	bic.w	r3, r3, #7
 800848a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	f003 0307 	and.w	r3, r3, #7
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00a      	beq.n	80084ac <prvInitialiseNewTask+0x58>
	__asm volatile
 8008496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849a:	f383 8811 	msr	BASEPRI, r3
 800849e:	f3bf 8f6f 	isb	sy
 80084a2:	f3bf 8f4f 	dsb	sy
 80084a6:	617b      	str	r3, [r7, #20]
}
 80084a8:	bf00      	nop
 80084aa:	e7fe      	b.n	80084aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d01f      	beq.n	80084f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084b2:	2300      	movs	r3, #0
 80084b4:	61fb      	str	r3, [r7, #28]
 80084b6:	e012      	b.n	80084de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	4413      	add	r3, r2
 80084be:	7819      	ldrb	r1, [r3, #0]
 80084c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	4413      	add	r3, r2
 80084c6:	3334      	adds	r3, #52	; 0x34
 80084c8:	460a      	mov	r2, r1
 80084ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80084cc:	68ba      	ldr	r2, [r7, #8]
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	4413      	add	r3, r2
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d006      	beq.n	80084e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	3301      	adds	r3, #1
 80084dc:	61fb      	str	r3, [r7, #28]
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	2b0f      	cmp	r3, #15
 80084e2:	d9e9      	bls.n	80084b8 <prvInitialiseNewTask+0x64>
 80084e4:	e000      	b.n	80084e8 <prvInitialiseNewTask+0x94>
			{
				break;
 80084e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80084e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084f0:	e003      	b.n	80084fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80084f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80084fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fc:	2b06      	cmp	r3, #6
 80084fe:	d901      	bls.n	8008504 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008500:	2306      	movs	r3, #6
 8008502:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008506:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008508:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800850a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800850e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008512:	2200      	movs	r2, #0
 8008514:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008518:	3304      	adds	r3, #4
 800851a:	4618      	mov	r0, r3
 800851c:	f7ff fe9d 	bl	800825a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008522:	3318      	adds	r3, #24
 8008524:	4618      	mov	r0, r3
 8008526:	f7ff fe98 	bl	800825a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800852a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800852e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008532:	f1c3 0207 	rsb	r2, r3, #7
 8008536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008538:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800853a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800853e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8008540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008542:	2200      	movs	r2, #0
 8008544:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008548:	2200      	movs	r2, #0
 800854a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800854e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008550:	2200      	movs	r2, #0
 8008552:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008558:	3350      	adds	r3, #80	; 0x50
 800855a:	2260      	movs	r2, #96	; 0x60
 800855c:	2100      	movs	r1, #0
 800855e:	4618      	mov	r0, r3
 8008560:	f000 fff2 	bl	8009548 <memset>
 8008564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008566:	4a0d      	ldr	r2, [pc, #52]	; (800859c <prvInitialiseNewTask+0x148>)
 8008568:	655a      	str	r2, [r3, #84]	; 0x54
 800856a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856c:	4a0c      	ldr	r2, [pc, #48]	; (80085a0 <prvInitialiseNewTask+0x14c>)
 800856e:	659a      	str	r2, [r3, #88]	; 0x58
 8008570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008572:	4a0c      	ldr	r2, [pc, #48]	; (80085a4 <prvInitialiseNewTask+0x150>)
 8008574:	65da      	str	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008576:	683a      	ldr	r2, [r7, #0]
 8008578:	68f9      	ldr	r1, [r7, #12]
 800857a:	69b8      	ldr	r0, [r7, #24]
 800857c:	f000 fbae 	bl	8008cdc <pxPortInitialiseStack>
 8008580:	4602      	mov	r2, r0
 8008582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008584:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008588:	2b00      	cmp	r3, #0
 800858a:	d002      	beq.n	8008592 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800858c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008590:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008592:	bf00      	nop
 8008594:	3720      	adds	r7, #32
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	0800ba2c 	.word	0x0800ba2c
 80085a0:	0800ba4c 	.word	0x0800ba4c
 80085a4:	0800ba0c 	.word	0x0800ba0c

080085a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80085b0:	f000 fcc0 	bl	8008f34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80085b4:	4b2a      	ldr	r3, [pc, #168]	; (8008660 <prvAddNewTaskToReadyList+0xb8>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	3301      	adds	r3, #1
 80085ba:	4a29      	ldr	r2, [pc, #164]	; (8008660 <prvAddNewTaskToReadyList+0xb8>)
 80085bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80085be:	4b29      	ldr	r3, [pc, #164]	; (8008664 <prvAddNewTaskToReadyList+0xbc>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d109      	bne.n	80085da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80085c6:	4a27      	ldr	r2, [pc, #156]	; (8008664 <prvAddNewTaskToReadyList+0xbc>)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80085cc:	4b24      	ldr	r3, [pc, #144]	; (8008660 <prvAddNewTaskToReadyList+0xb8>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d110      	bne.n	80085f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80085d4:	f000 fac0 	bl	8008b58 <prvInitialiseTaskLists>
 80085d8:	e00d      	b.n	80085f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80085da:	4b23      	ldr	r3, [pc, #140]	; (8008668 <prvAddNewTaskToReadyList+0xc0>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d109      	bne.n	80085f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80085e2:	4b20      	ldr	r3, [pc, #128]	; (8008664 <prvAddNewTaskToReadyList+0xbc>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d802      	bhi.n	80085f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80085f0:	4a1c      	ldr	r2, [pc, #112]	; (8008664 <prvAddNewTaskToReadyList+0xbc>)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80085f6:	4b1d      	ldr	r3, [pc, #116]	; (800866c <prvAddNewTaskToReadyList+0xc4>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	3301      	adds	r3, #1
 80085fc:	4a1b      	ldr	r2, [pc, #108]	; (800866c <prvAddNewTaskToReadyList+0xc4>)
 80085fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008604:	2201      	movs	r2, #1
 8008606:	409a      	lsls	r2, r3
 8008608:	4b19      	ldr	r3, [pc, #100]	; (8008670 <prvAddNewTaskToReadyList+0xc8>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4313      	orrs	r3, r2
 800860e:	4a18      	ldr	r2, [pc, #96]	; (8008670 <prvAddNewTaskToReadyList+0xc8>)
 8008610:	6013      	str	r3, [r2, #0]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008616:	4613      	mov	r3, r2
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4413      	add	r3, r2
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	4a15      	ldr	r2, [pc, #84]	; (8008674 <prvAddNewTaskToReadyList+0xcc>)
 8008620:	441a      	add	r2, r3
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	3304      	adds	r3, #4
 8008626:	4619      	mov	r1, r3
 8008628:	4610      	mov	r0, r2
 800862a:	f7ff fe23 	bl	8008274 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800862e:	f000 fcb1 	bl	8008f94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008632:	4b0d      	ldr	r3, [pc, #52]	; (8008668 <prvAddNewTaskToReadyList+0xc0>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00e      	beq.n	8008658 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800863a:	4b0a      	ldr	r3, [pc, #40]	; (8008664 <prvAddNewTaskToReadyList+0xbc>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008644:	429a      	cmp	r2, r3
 8008646:	d207      	bcs.n	8008658 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008648:	4b0b      	ldr	r3, [pc, #44]	; (8008678 <prvAddNewTaskToReadyList+0xd0>)
 800864a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800864e:	601a      	str	r2, [r3, #0]
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008658:	bf00      	nop
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	20000a68 	.word	0x20000a68
 8008664:	20000968 	.word	0x20000968
 8008668:	20000a74 	.word	0x20000a74
 800866c:	20000a84 	.word	0x20000a84
 8008670:	20000a70 	.word	0x20000a70
 8008674:	2000096c 	.word	0x2000096c
 8008678:	e000ed04 	.word	0xe000ed04

0800867c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b08a      	sub	sp, #40	; 0x28
 8008680:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008682:	2300      	movs	r3, #0
 8008684:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008686:	2300      	movs	r3, #0
 8008688:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800868a:	463a      	mov	r2, r7
 800868c:	1d39      	adds	r1, r7, #4
 800868e:	f107 0308 	add.w	r3, r7, #8
 8008692:	4618      	mov	r0, r3
 8008694:	f7f7 ff98 	bl	80005c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008698:	6839      	ldr	r1, [r7, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	9202      	str	r2, [sp, #8]
 80086a0:	9301      	str	r3, [sp, #4]
 80086a2:	2300      	movs	r3, #0
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	2300      	movs	r3, #0
 80086a8:	460a      	mov	r2, r1
 80086aa:	4921      	ldr	r1, [pc, #132]	; (8008730 <vTaskStartScheduler+0xb4>)
 80086ac:	4821      	ldr	r0, [pc, #132]	; (8008734 <vTaskStartScheduler+0xb8>)
 80086ae:	f7ff fe2f 	bl	8008310 <xTaskCreateStatic>
 80086b2:	4603      	mov	r3, r0
 80086b4:	4a20      	ldr	r2, [pc, #128]	; (8008738 <vTaskStartScheduler+0xbc>)
 80086b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80086b8:	4b1f      	ldr	r3, [pc, #124]	; (8008738 <vTaskStartScheduler+0xbc>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d002      	beq.n	80086c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80086c0:	2301      	movs	r3, #1
 80086c2:	617b      	str	r3, [r7, #20]
 80086c4:	e001      	b.n	80086ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80086c6:	2300      	movs	r3, #0
 80086c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d11b      	bne.n	8008708 <vTaskStartScheduler+0x8c>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	613b      	str	r3, [r7, #16]
}
 80086e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80086e4:	4b15      	ldr	r3, [pc, #84]	; (800873c <vTaskStartScheduler+0xc0>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	3350      	adds	r3, #80	; 0x50
 80086ea:	4a15      	ldr	r2, [pc, #84]	; (8008740 <vTaskStartScheduler+0xc4>)
 80086ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80086ee:	4b15      	ldr	r3, [pc, #84]	; (8008744 <vTaskStartScheduler+0xc8>)
 80086f0:	f04f 32ff 	mov.w	r2, #4294967295
 80086f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80086f6:	4b14      	ldr	r3, [pc, #80]	; (8008748 <vTaskStartScheduler+0xcc>)
 80086f8:	2201      	movs	r2, #1
 80086fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80086fc:	4b13      	ldr	r3, [pc, #76]	; (800874c <vTaskStartScheduler+0xd0>)
 80086fe:	2200      	movs	r2, #0
 8008700:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008702:	f000 fb75 	bl	8008df0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008706:	e00e      	b.n	8008726 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800870e:	d10a      	bne.n	8008726 <vTaskStartScheduler+0xaa>
	__asm volatile
 8008710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008714:	f383 8811 	msr	BASEPRI, r3
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	f3bf 8f4f 	dsb	sy
 8008720:	60fb      	str	r3, [r7, #12]
}
 8008722:	bf00      	nop
 8008724:	e7fe      	b.n	8008724 <vTaskStartScheduler+0xa8>
}
 8008726:	bf00      	nop
 8008728:	3718      	adds	r7, #24
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	08009f2c 	.word	0x08009f2c
 8008734:	08008b25 	.word	0x08008b25
 8008738:	20000a8c 	.word	0x20000a8c
 800873c:	20000968 	.word	0x20000968
 8008740:	20000054 	.word	0x20000054
 8008744:	20000a88 	.word	0x20000a88
 8008748:	20000a74 	.word	0x20000a74
 800874c:	20000a6c 	.word	0x20000a6c

08008750 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008750:	b480      	push	{r7}
 8008752:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008754:	4b04      	ldr	r3, [pc, #16]	; (8008768 <vTaskSuspendAll+0x18>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	3301      	adds	r3, #1
 800875a:	4a03      	ldr	r2, [pc, #12]	; (8008768 <vTaskSuspendAll+0x18>)
 800875c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800875e:	bf00      	nop
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr
 8008768:	20000a90 	.word	0x20000a90

0800876c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008772:	2300      	movs	r3, #0
 8008774:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008776:	2300      	movs	r3, #0
 8008778:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800877a:	4b41      	ldr	r3, [pc, #260]	; (8008880 <xTaskResumeAll+0x114>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d10a      	bne.n	8008798 <xTaskResumeAll+0x2c>
	__asm volatile
 8008782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008786:	f383 8811 	msr	BASEPRI, r3
 800878a:	f3bf 8f6f 	isb	sy
 800878e:	f3bf 8f4f 	dsb	sy
 8008792:	603b      	str	r3, [r7, #0]
}
 8008794:	bf00      	nop
 8008796:	e7fe      	b.n	8008796 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008798:	f000 fbcc 	bl	8008f34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800879c:	4b38      	ldr	r3, [pc, #224]	; (8008880 <xTaskResumeAll+0x114>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	3b01      	subs	r3, #1
 80087a2:	4a37      	ldr	r2, [pc, #220]	; (8008880 <xTaskResumeAll+0x114>)
 80087a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087a6:	4b36      	ldr	r3, [pc, #216]	; (8008880 <xTaskResumeAll+0x114>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d161      	bne.n	8008872 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80087ae:	4b35      	ldr	r3, [pc, #212]	; (8008884 <xTaskResumeAll+0x118>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d05d      	beq.n	8008872 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087b6:	e02e      	b.n	8008816 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087b8:	4b33      	ldr	r3, [pc, #204]	; (8008888 <xTaskResumeAll+0x11c>)
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	3318      	adds	r3, #24
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7ff fd79 	bl	80082bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	3304      	adds	r3, #4
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7ff fd74 	bl	80082bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d8:	2201      	movs	r2, #1
 80087da:	409a      	lsls	r2, r3
 80087dc:	4b2b      	ldr	r3, [pc, #172]	; (800888c <xTaskResumeAll+0x120>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4313      	orrs	r3, r2
 80087e2:	4a2a      	ldr	r2, [pc, #168]	; (800888c <xTaskResumeAll+0x120>)
 80087e4:	6013      	str	r3, [r2, #0]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ea:	4613      	mov	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4a27      	ldr	r2, [pc, #156]	; (8008890 <xTaskResumeAll+0x124>)
 80087f4:	441a      	add	r2, r3
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	3304      	adds	r3, #4
 80087fa:	4619      	mov	r1, r3
 80087fc:	4610      	mov	r0, r2
 80087fe:	f7ff fd39 	bl	8008274 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008806:	4b23      	ldr	r3, [pc, #140]	; (8008894 <xTaskResumeAll+0x128>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880c:	429a      	cmp	r2, r3
 800880e:	d302      	bcc.n	8008816 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008810:	4b21      	ldr	r3, [pc, #132]	; (8008898 <xTaskResumeAll+0x12c>)
 8008812:	2201      	movs	r2, #1
 8008814:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008816:	4b1c      	ldr	r3, [pc, #112]	; (8008888 <xTaskResumeAll+0x11c>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1cc      	bne.n	80087b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d001      	beq.n	8008828 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008824:	f000 fa3a 	bl	8008c9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008828:	4b1c      	ldr	r3, [pc, #112]	; (800889c <xTaskResumeAll+0x130>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d010      	beq.n	8008856 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008834:	f000 f836 	bl	80088a4 <xTaskIncrementTick>
 8008838:	4603      	mov	r3, r0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d002      	beq.n	8008844 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800883e:	4b16      	ldr	r3, [pc, #88]	; (8008898 <xTaskResumeAll+0x12c>)
 8008840:	2201      	movs	r2, #1
 8008842:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	3b01      	subs	r3, #1
 8008848:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1f1      	bne.n	8008834 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008850:	4b12      	ldr	r3, [pc, #72]	; (800889c <xTaskResumeAll+0x130>)
 8008852:	2200      	movs	r2, #0
 8008854:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008856:	4b10      	ldr	r3, [pc, #64]	; (8008898 <xTaskResumeAll+0x12c>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d009      	beq.n	8008872 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800885e:	2301      	movs	r3, #1
 8008860:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008862:	4b0f      	ldr	r3, [pc, #60]	; (80088a0 <xTaskResumeAll+0x134>)
 8008864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008868:	601a      	str	r2, [r3, #0]
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008872:	f000 fb8f 	bl	8008f94 <vPortExitCritical>

	return xAlreadyYielded;
 8008876:	68bb      	ldr	r3, [r7, #8]
}
 8008878:	4618      	mov	r0, r3
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	20000a90 	.word	0x20000a90
 8008884:	20000a68 	.word	0x20000a68
 8008888:	20000a28 	.word	0x20000a28
 800888c:	20000a70 	.word	0x20000a70
 8008890:	2000096c 	.word	0x2000096c
 8008894:	20000968 	.word	0x20000968
 8008898:	20000a7c 	.word	0x20000a7c
 800889c:	20000a78 	.word	0x20000a78
 80088a0:	e000ed04 	.word	0xe000ed04

080088a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b086      	sub	sp, #24
 80088a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80088aa:	2300      	movs	r3, #0
 80088ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088ae:	4b4e      	ldr	r3, [pc, #312]	; (80089e8 <xTaskIncrementTick+0x144>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f040 808e 	bne.w	80089d4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80088b8:	4b4c      	ldr	r3, [pc, #304]	; (80089ec <xTaskIncrementTick+0x148>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	3301      	adds	r3, #1
 80088be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80088c0:	4a4a      	ldr	r2, [pc, #296]	; (80089ec <xTaskIncrementTick+0x148>)
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d120      	bne.n	800890e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80088cc:	4b48      	ldr	r3, [pc, #288]	; (80089f0 <xTaskIncrementTick+0x14c>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00a      	beq.n	80088ec <xTaskIncrementTick+0x48>
	__asm volatile
 80088d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088da:	f383 8811 	msr	BASEPRI, r3
 80088de:	f3bf 8f6f 	isb	sy
 80088e2:	f3bf 8f4f 	dsb	sy
 80088e6:	603b      	str	r3, [r7, #0]
}
 80088e8:	bf00      	nop
 80088ea:	e7fe      	b.n	80088ea <xTaskIncrementTick+0x46>
 80088ec:	4b40      	ldr	r3, [pc, #256]	; (80089f0 <xTaskIncrementTick+0x14c>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	60fb      	str	r3, [r7, #12]
 80088f2:	4b40      	ldr	r3, [pc, #256]	; (80089f4 <xTaskIncrementTick+0x150>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a3e      	ldr	r2, [pc, #248]	; (80089f0 <xTaskIncrementTick+0x14c>)
 80088f8:	6013      	str	r3, [r2, #0]
 80088fa:	4a3e      	ldr	r2, [pc, #248]	; (80089f4 <xTaskIncrementTick+0x150>)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6013      	str	r3, [r2, #0]
 8008900:	4b3d      	ldr	r3, [pc, #244]	; (80089f8 <xTaskIncrementTick+0x154>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	3301      	adds	r3, #1
 8008906:	4a3c      	ldr	r2, [pc, #240]	; (80089f8 <xTaskIncrementTick+0x154>)
 8008908:	6013      	str	r3, [r2, #0]
 800890a:	f000 f9c7 	bl	8008c9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800890e:	4b3b      	ldr	r3, [pc, #236]	; (80089fc <xTaskIncrementTick+0x158>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	693a      	ldr	r2, [r7, #16]
 8008914:	429a      	cmp	r2, r3
 8008916:	d348      	bcc.n	80089aa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008918:	4b35      	ldr	r3, [pc, #212]	; (80089f0 <xTaskIncrementTick+0x14c>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d104      	bne.n	800892c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008922:	4b36      	ldr	r3, [pc, #216]	; (80089fc <xTaskIncrementTick+0x158>)
 8008924:	f04f 32ff 	mov.w	r2, #4294967295
 8008928:	601a      	str	r2, [r3, #0]
					break;
 800892a:	e03e      	b.n	80089aa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800892c:	4b30      	ldr	r3, [pc, #192]	; (80089f0 <xTaskIncrementTick+0x14c>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800893c:	693a      	ldr	r2, [r7, #16]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	429a      	cmp	r2, r3
 8008942:	d203      	bcs.n	800894c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008944:	4a2d      	ldr	r2, [pc, #180]	; (80089fc <xTaskIncrementTick+0x158>)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800894a:	e02e      	b.n	80089aa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	3304      	adds	r3, #4
 8008950:	4618      	mov	r0, r3
 8008952:	f7ff fcb3 	bl	80082bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895a:	2b00      	cmp	r3, #0
 800895c:	d004      	beq.n	8008968 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	3318      	adds	r3, #24
 8008962:	4618      	mov	r0, r3
 8008964:	f7ff fcaa 	bl	80082bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896c:	2201      	movs	r2, #1
 800896e:	409a      	lsls	r2, r3
 8008970:	4b23      	ldr	r3, [pc, #140]	; (8008a00 <xTaskIncrementTick+0x15c>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4313      	orrs	r3, r2
 8008976:	4a22      	ldr	r2, [pc, #136]	; (8008a00 <xTaskIncrementTick+0x15c>)
 8008978:	6013      	str	r3, [r2, #0]
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800897e:	4613      	mov	r3, r2
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	4413      	add	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	4a1f      	ldr	r2, [pc, #124]	; (8008a04 <xTaskIncrementTick+0x160>)
 8008988:	441a      	add	r2, r3
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	3304      	adds	r3, #4
 800898e:	4619      	mov	r1, r3
 8008990:	4610      	mov	r0, r2
 8008992:	f7ff fc6f 	bl	8008274 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800899a:	4b1b      	ldr	r3, [pc, #108]	; (8008a08 <xTaskIncrementTick+0x164>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d3b9      	bcc.n	8008918 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80089a4:	2301      	movs	r3, #1
 80089a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089a8:	e7b6      	b.n	8008918 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80089aa:	4b17      	ldr	r3, [pc, #92]	; (8008a08 <xTaskIncrementTick+0x164>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b0:	4914      	ldr	r1, [pc, #80]	; (8008a04 <xTaskIncrementTick+0x160>)
 80089b2:	4613      	mov	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4413      	add	r3, r2
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	440b      	add	r3, r1
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d901      	bls.n	80089c6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80089c2:	2301      	movs	r3, #1
 80089c4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80089c6:	4b11      	ldr	r3, [pc, #68]	; (8008a0c <xTaskIncrementTick+0x168>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d007      	beq.n	80089de <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80089ce:	2301      	movs	r3, #1
 80089d0:	617b      	str	r3, [r7, #20]
 80089d2:	e004      	b.n	80089de <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80089d4:	4b0e      	ldr	r3, [pc, #56]	; (8008a10 <xTaskIncrementTick+0x16c>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	3301      	adds	r3, #1
 80089da:	4a0d      	ldr	r2, [pc, #52]	; (8008a10 <xTaskIncrementTick+0x16c>)
 80089dc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80089de:	697b      	ldr	r3, [r7, #20]
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3718      	adds	r7, #24
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	20000a90 	.word	0x20000a90
 80089ec:	20000a6c 	.word	0x20000a6c
 80089f0:	20000a20 	.word	0x20000a20
 80089f4:	20000a24 	.word	0x20000a24
 80089f8:	20000a80 	.word	0x20000a80
 80089fc:	20000a88 	.word	0x20000a88
 8008a00:	20000a70 	.word	0x20000a70
 8008a04:	2000096c 	.word	0x2000096c
 8008a08:	20000968 	.word	0x20000968
 8008a0c:	20000a7c 	.word	0x20000a7c
 8008a10:	20000a78 	.word	0x20000a78

08008a14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b088      	sub	sp, #32
 8008a18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a1a:	4b3c      	ldr	r3, [pc, #240]	; (8008b0c <vTaskSwitchContext+0xf8>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d003      	beq.n	8008a2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a22:	4b3b      	ldr	r3, [pc, #236]	; (8008b10 <vTaskSwitchContext+0xfc>)
 8008a24:	2201      	movs	r2, #1
 8008a26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a28:	e06b      	b.n	8008b02 <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 8008a2a:	4b39      	ldr	r3, [pc, #228]	; (8008b10 <vTaskSwitchContext+0xfc>)
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008a30:	4b38      	ldr	r3, [pc, #224]	; (8008b14 <vTaskSwitchContext+0x100>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a36:	61fb      	str	r3, [r7, #28]
 8008a38:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8008a3c:	61bb      	str	r3, [r7, #24]
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	69ba      	ldr	r2, [r7, #24]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d111      	bne.n	8008a6c <vTaskSwitchContext+0x58>
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	3304      	adds	r3, #4
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	69ba      	ldr	r2, [r7, #24]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d10b      	bne.n	8008a6c <vTaskSwitchContext+0x58>
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	3308      	adds	r3, #8
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	69ba      	ldr	r2, [r7, #24]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d105      	bne.n	8008a6c <vTaskSwitchContext+0x58>
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	330c      	adds	r3, #12
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	69ba      	ldr	r2, [r7, #24]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d008      	beq.n	8008a7e <vTaskSwitchContext+0x6a>
 8008a6c:	4b29      	ldr	r3, [pc, #164]	; (8008b14 <vTaskSwitchContext+0x100>)
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	4b28      	ldr	r3, [pc, #160]	; (8008b14 <vTaskSwitchContext+0x100>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	3334      	adds	r3, #52	; 0x34
 8008a76:	4619      	mov	r1, r3
 8008a78:	4610      	mov	r0, r2
 8008a7a:	f7f7 fd92 	bl	80005a2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a7e:	4b26      	ldr	r3, [pc, #152]	; (8008b18 <vTaskSwitchContext+0x104>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	fab3 f383 	clz	r3, r3
 8008a8a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008a8c:	7afb      	ldrb	r3, [r7, #11]
 8008a8e:	f1c3 031f 	rsb	r3, r3, #31
 8008a92:	617b      	str	r3, [r7, #20]
 8008a94:	4921      	ldr	r1, [pc, #132]	; (8008b1c <vTaskSwitchContext+0x108>)
 8008a96:	697a      	ldr	r2, [r7, #20]
 8008a98:	4613      	mov	r3, r2
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	4413      	add	r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	440b      	add	r3, r1
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d10a      	bne.n	8008abe <vTaskSwitchContext+0xaa>
	__asm volatile
 8008aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aac:	f383 8811 	msr	BASEPRI, r3
 8008ab0:	f3bf 8f6f 	isb	sy
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	607b      	str	r3, [r7, #4]
}
 8008aba:	bf00      	nop
 8008abc:	e7fe      	b.n	8008abc <vTaskSwitchContext+0xa8>
 8008abe:	697a      	ldr	r2, [r7, #20]
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	4413      	add	r3, r2
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	4a14      	ldr	r2, [pc, #80]	; (8008b1c <vTaskSwitchContext+0x108>)
 8008aca:	4413      	add	r3, r2
 8008acc:	613b      	str	r3, [r7, #16]
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	685a      	ldr	r2, [r3, #4]
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	605a      	str	r2, [r3, #4]
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	685a      	ldr	r2, [r3, #4]
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	3308      	adds	r3, #8
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d104      	bne.n	8008aee <vTaskSwitchContext+0xda>
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	685a      	ldr	r2, [r3, #4]
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	605a      	str	r2, [r3, #4]
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	4a07      	ldr	r2, [pc, #28]	; (8008b14 <vTaskSwitchContext+0x100>)
 8008af6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008af8:	4b06      	ldr	r3, [pc, #24]	; (8008b14 <vTaskSwitchContext+0x100>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	3350      	adds	r3, #80	; 0x50
 8008afe:	4a08      	ldr	r2, [pc, #32]	; (8008b20 <vTaskSwitchContext+0x10c>)
 8008b00:	6013      	str	r3, [r2, #0]
}
 8008b02:	bf00      	nop
 8008b04:	3720      	adds	r7, #32
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	20000a90 	.word	0x20000a90
 8008b10:	20000a7c 	.word	0x20000a7c
 8008b14:	20000968 	.word	0x20000968
 8008b18:	20000a70 	.word	0x20000a70
 8008b1c:	2000096c 	.word	0x2000096c
 8008b20:	20000054 	.word	0x20000054

08008b24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008b2c:	f000 f854 	bl	8008bd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008b30:	4b07      	ldr	r3, [pc, #28]	; (8008b50 <prvIdleTask+0x2c>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d907      	bls.n	8008b48 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008b38:	4b06      	ldr	r3, [pc, #24]	; (8008b54 <prvIdleTask+0x30>)
 8008b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b3e:	601a      	str	r2, [r3, #0]
 8008b40:	f3bf 8f4f 	dsb	sy
 8008b44:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8008b48:	f7f7 fd24 	bl	8000594 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008b4c:	e7ee      	b.n	8008b2c <prvIdleTask+0x8>
 8008b4e:	bf00      	nop
 8008b50:	2000096c 	.word	0x2000096c
 8008b54:	e000ed04 	.word	0xe000ed04

08008b58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b5e:	2300      	movs	r3, #0
 8008b60:	607b      	str	r3, [r7, #4]
 8008b62:	e00c      	b.n	8008b7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	4613      	mov	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	4413      	add	r3, r2
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	4a12      	ldr	r2, [pc, #72]	; (8008bb8 <prvInitialiseTaskLists+0x60>)
 8008b70:	4413      	add	r3, r2
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7ff fb51 	bl	800821a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	607b      	str	r3, [r7, #4]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2b06      	cmp	r3, #6
 8008b82:	d9ef      	bls.n	8008b64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008b84:	480d      	ldr	r0, [pc, #52]	; (8008bbc <prvInitialiseTaskLists+0x64>)
 8008b86:	f7ff fb48 	bl	800821a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008b8a:	480d      	ldr	r0, [pc, #52]	; (8008bc0 <prvInitialiseTaskLists+0x68>)
 8008b8c:	f7ff fb45 	bl	800821a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008b90:	480c      	ldr	r0, [pc, #48]	; (8008bc4 <prvInitialiseTaskLists+0x6c>)
 8008b92:	f7ff fb42 	bl	800821a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008b96:	480c      	ldr	r0, [pc, #48]	; (8008bc8 <prvInitialiseTaskLists+0x70>)
 8008b98:	f7ff fb3f 	bl	800821a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008b9c:	480b      	ldr	r0, [pc, #44]	; (8008bcc <prvInitialiseTaskLists+0x74>)
 8008b9e:	f7ff fb3c 	bl	800821a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008ba2:	4b0b      	ldr	r3, [pc, #44]	; (8008bd0 <prvInitialiseTaskLists+0x78>)
 8008ba4:	4a05      	ldr	r2, [pc, #20]	; (8008bbc <prvInitialiseTaskLists+0x64>)
 8008ba6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ba8:	4b0a      	ldr	r3, [pc, #40]	; (8008bd4 <prvInitialiseTaskLists+0x7c>)
 8008baa:	4a05      	ldr	r2, [pc, #20]	; (8008bc0 <prvInitialiseTaskLists+0x68>)
 8008bac:	601a      	str	r2, [r3, #0]
}
 8008bae:	bf00      	nop
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	2000096c 	.word	0x2000096c
 8008bbc:	200009f8 	.word	0x200009f8
 8008bc0:	20000a0c 	.word	0x20000a0c
 8008bc4:	20000a28 	.word	0x20000a28
 8008bc8:	20000a3c 	.word	0x20000a3c
 8008bcc:	20000a54 	.word	0x20000a54
 8008bd0:	20000a20 	.word	0x20000a20
 8008bd4:	20000a24 	.word	0x20000a24

08008bd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008bde:	e019      	b.n	8008c14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008be0:	f000 f9a8 	bl	8008f34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008be4:	4b10      	ldr	r3, [pc, #64]	; (8008c28 <prvCheckTasksWaitingTermination+0x50>)
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	3304      	adds	r3, #4
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7ff fb63 	bl	80082bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008bf6:	4b0d      	ldr	r3, [pc, #52]	; (8008c2c <prvCheckTasksWaitingTermination+0x54>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	4a0b      	ldr	r2, [pc, #44]	; (8008c2c <prvCheckTasksWaitingTermination+0x54>)
 8008bfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c00:	4b0b      	ldr	r3, [pc, #44]	; (8008c30 <prvCheckTasksWaitingTermination+0x58>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	3b01      	subs	r3, #1
 8008c06:	4a0a      	ldr	r2, [pc, #40]	; (8008c30 <prvCheckTasksWaitingTermination+0x58>)
 8008c08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c0a:	f000 f9c3 	bl	8008f94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f810 	bl	8008c34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c14:	4b06      	ldr	r3, [pc, #24]	; (8008c30 <prvCheckTasksWaitingTermination+0x58>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1e1      	bne.n	8008be0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008c1c:	bf00      	nop
 8008c1e:	bf00      	nop
 8008c20:	3708      	adds	r7, #8
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	20000a3c 	.word	0x20000a3c
 8008c2c:	20000a68 	.word	0x20000a68
 8008c30:	20000a50 	.word	0x20000a50

08008c34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	3350      	adds	r3, #80	; 0x50
 8008c40:	4618      	mov	r0, r3
 8008c42:	f000 fd2b 	bl	800969c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d108      	bne.n	8008c62 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c54:	4618      	mov	r0, r3
 8008c56:	f000 fb1f 	bl	8009298 <vPortFree>
				vPortFree( pxTCB );
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 fb1c 	bl	8009298 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008c60:	e018      	b.n	8008c94 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d103      	bne.n	8008c74 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fb13 	bl	8009298 <vPortFree>
	}
 8008c72:	e00f      	b.n	8008c94 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d00a      	beq.n	8008c94 <prvDeleteTCB+0x60>
	__asm volatile
 8008c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	60fb      	str	r3, [r7, #12]
}
 8008c90:	bf00      	nop
 8008c92:	e7fe      	b.n	8008c92 <prvDeleteTCB+0x5e>
	}
 8008c94:	bf00      	nop
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ca2:	4b0c      	ldr	r3, [pc, #48]	; (8008cd4 <prvResetNextTaskUnblockTime+0x38>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d104      	bne.n	8008cb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008cac:	4b0a      	ldr	r3, [pc, #40]	; (8008cd8 <prvResetNextTaskUnblockTime+0x3c>)
 8008cae:	f04f 32ff 	mov.w	r2, #4294967295
 8008cb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008cb4:	e008      	b.n	8008cc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cb6:	4b07      	ldr	r3, [pc, #28]	; (8008cd4 <prvResetNextTaskUnblockTime+0x38>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	4a04      	ldr	r2, [pc, #16]	; (8008cd8 <prvResetNextTaskUnblockTime+0x3c>)
 8008cc6:	6013      	str	r3, [r2, #0]
}
 8008cc8:	bf00      	nop
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr
 8008cd4:	20000a20 	.word	0x20000a20
 8008cd8:	20000a88 	.word	0x20000a88

08008cdc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b085      	sub	sp, #20
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	3b04      	subs	r3, #4
 8008cec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008cf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	3b04      	subs	r3, #4
 8008cfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	f023 0201 	bic.w	r2, r3, #1
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	3b04      	subs	r3, #4
 8008d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008d0c:	4a0c      	ldr	r2, [pc, #48]	; (8008d40 <pxPortInitialiseStack+0x64>)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	3b14      	subs	r3, #20
 8008d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	3b04      	subs	r3, #4
 8008d22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f06f 0202 	mvn.w	r2, #2
 8008d2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	3b20      	subs	r3, #32
 8008d30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d32:	68fb      	ldr	r3, [r7, #12]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3714      	adds	r7, #20
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr
 8008d40:	08008d45 	.word	0x08008d45

08008d44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d4e:	4b12      	ldr	r3, [pc, #72]	; (8008d98 <prvTaskExitError+0x54>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d56:	d00a      	beq.n	8008d6e <prvTaskExitError+0x2a>
	__asm volatile
 8008d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5c:	f383 8811 	msr	BASEPRI, r3
 8008d60:	f3bf 8f6f 	isb	sy
 8008d64:	f3bf 8f4f 	dsb	sy
 8008d68:	60fb      	str	r3, [r7, #12]
}
 8008d6a:	bf00      	nop
 8008d6c:	e7fe      	b.n	8008d6c <prvTaskExitError+0x28>
	__asm volatile
 8008d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d72:	f383 8811 	msr	BASEPRI, r3
 8008d76:	f3bf 8f6f 	isb	sy
 8008d7a:	f3bf 8f4f 	dsb	sy
 8008d7e:	60bb      	str	r3, [r7, #8]
}
 8008d80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d82:	bf00      	nop
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d0fc      	beq.n	8008d84 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d8a:	bf00      	nop
 8008d8c:	bf00      	nop
 8008d8e:	3714      	adds	r7, #20
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr
 8008d98:	20000050 	.word	0x20000050
 8008d9c:	00000000 	.word	0x00000000

08008da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008da0:	4b07      	ldr	r3, [pc, #28]	; (8008dc0 <pxCurrentTCBConst2>)
 8008da2:	6819      	ldr	r1, [r3, #0]
 8008da4:	6808      	ldr	r0, [r1, #0]
 8008da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008daa:	f380 8809 	msr	PSP, r0
 8008dae:	f3bf 8f6f 	isb	sy
 8008db2:	f04f 0000 	mov.w	r0, #0
 8008db6:	f380 8811 	msr	BASEPRI, r0
 8008dba:	4770      	bx	lr
 8008dbc:	f3af 8000 	nop.w

08008dc0 <pxCurrentTCBConst2>:
 8008dc0:	20000968 	.word	0x20000968
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008dc4:	bf00      	nop
 8008dc6:	bf00      	nop

08008dc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008dc8:	4808      	ldr	r0, [pc, #32]	; (8008dec <prvPortStartFirstTask+0x24>)
 8008dca:	6800      	ldr	r0, [r0, #0]
 8008dcc:	6800      	ldr	r0, [r0, #0]
 8008dce:	f380 8808 	msr	MSP, r0
 8008dd2:	f04f 0000 	mov.w	r0, #0
 8008dd6:	f380 8814 	msr	CONTROL, r0
 8008dda:	b662      	cpsie	i
 8008ddc:	b661      	cpsie	f
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	f3bf 8f6f 	isb	sy
 8008de6:	df00      	svc	0
 8008de8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008dea:	bf00      	nop
 8008dec:	e000ed08 	.word	0xe000ed08

08008df0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b086      	sub	sp, #24
 8008df4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008df6:	4b46      	ldr	r3, [pc, #280]	; (8008f10 <xPortStartScheduler+0x120>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a46      	ldr	r2, [pc, #280]	; (8008f14 <xPortStartScheduler+0x124>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d10a      	bne.n	8008e16 <xPortStartScheduler+0x26>
	__asm volatile
 8008e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e04:	f383 8811 	msr	BASEPRI, r3
 8008e08:	f3bf 8f6f 	isb	sy
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	613b      	str	r3, [r7, #16]
}
 8008e12:	bf00      	nop
 8008e14:	e7fe      	b.n	8008e14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008e16:	4b3e      	ldr	r3, [pc, #248]	; (8008f10 <xPortStartScheduler+0x120>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a3f      	ldr	r2, [pc, #252]	; (8008f18 <xPortStartScheduler+0x128>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d10a      	bne.n	8008e36 <xPortStartScheduler+0x46>
	__asm volatile
 8008e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e24:	f383 8811 	msr	BASEPRI, r3
 8008e28:	f3bf 8f6f 	isb	sy
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	60fb      	str	r3, [r7, #12]
}
 8008e32:	bf00      	nop
 8008e34:	e7fe      	b.n	8008e34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008e36:	4b39      	ldr	r3, [pc, #228]	; (8008f1c <xPortStartScheduler+0x12c>)
 8008e38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	22ff      	movs	r2, #255	; 0xff
 8008e46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e50:	78fb      	ldrb	r3, [r7, #3]
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008e58:	b2da      	uxtb	r2, r3
 8008e5a:	4b31      	ldr	r3, [pc, #196]	; (8008f20 <xPortStartScheduler+0x130>)
 8008e5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e5e:	4b31      	ldr	r3, [pc, #196]	; (8008f24 <xPortStartScheduler+0x134>)
 8008e60:	2207      	movs	r2, #7
 8008e62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e64:	e009      	b.n	8008e7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008e66:	4b2f      	ldr	r3, [pc, #188]	; (8008f24 <xPortStartScheduler+0x134>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	4a2d      	ldr	r2, [pc, #180]	; (8008f24 <xPortStartScheduler+0x134>)
 8008e6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e70:	78fb      	ldrb	r3, [r7, #3]
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	005b      	lsls	r3, r3, #1
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e7a:	78fb      	ldrb	r3, [r7, #3]
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e82:	2b80      	cmp	r3, #128	; 0x80
 8008e84:	d0ef      	beq.n	8008e66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e86:	4b27      	ldr	r3, [pc, #156]	; (8008f24 <xPortStartScheduler+0x134>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f1c3 0307 	rsb	r3, r3, #7
 8008e8e:	2b04      	cmp	r3, #4
 8008e90:	d00a      	beq.n	8008ea8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e96:	f383 8811 	msr	BASEPRI, r3
 8008e9a:	f3bf 8f6f 	isb	sy
 8008e9e:	f3bf 8f4f 	dsb	sy
 8008ea2:	60bb      	str	r3, [r7, #8]
}
 8008ea4:	bf00      	nop
 8008ea6:	e7fe      	b.n	8008ea6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ea8:	4b1e      	ldr	r3, [pc, #120]	; (8008f24 <xPortStartScheduler+0x134>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	021b      	lsls	r3, r3, #8
 8008eae:	4a1d      	ldr	r2, [pc, #116]	; (8008f24 <xPortStartScheduler+0x134>)
 8008eb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008eb2:	4b1c      	ldr	r3, [pc, #112]	; (8008f24 <xPortStartScheduler+0x134>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008eba:	4a1a      	ldr	r2, [pc, #104]	; (8008f24 <xPortStartScheduler+0x134>)
 8008ebc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	b2da      	uxtb	r2, r3
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ec6:	4b18      	ldr	r3, [pc, #96]	; (8008f28 <xPortStartScheduler+0x138>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a17      	ldr	r2, [pc, #92]	; (8008f28 <xPortStartScheduler+0x138>)
 8008ecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ed0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008ed2:	4b15      	ldr	r3, [pc, #84]	; (8008f28 <xPortStartScheduler+0x138>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a14      	ldr	r2, [pc, #80]	; (8008f28 <xPortStartScheduler+0x138>)
 8008ed8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008edc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ede:	f000 f8dd 	bl	800909c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ee2:	4b12      	ldr	r3, [pc, #72]	; (8008f2c <xPortStartScheduler+0x13c>)
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ee8:	f000 f8fc 	bl	80090e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008eec:	4b10      	ldr	r3, [pc, #64]	; (8008f30 <xPortStartScheduler+0x140>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a0f      	ldr	r2, [pc, #60]	; (8008f30 <xPortStartScheduler+0x140>)
 8008ef2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008ef6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ef8:	f7ff ff66 	bl	8008dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008efc:	f7ff fd8a 	bl	8008a14 <vTaskSwitchContext>
	prvTaskExitError();
 8008f00:	f7ff ff20 	bl	8008d44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3718      	adds	r7, #24
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	e000ed00 	.word	0xe000ed00
 8008f14:	410fc271 	.word	0x410fc271
 8008f18:	410fc270 	.word	0x410fc270
 8008f1c:	e000e400 	.word	0xe000e400
 8008f20:	20000a94 	.word	0x20000a94
 8008f24:	20000a98 	.word	0x20000a98
 8008f28:	e000ed20 	.word	0xe000ed20
 8008f2c:	20000050 	.word	0x20000050
 8008f30:	e000ef34 	.word	0xe000ef34

08008f34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
	__asm volatile
 8008f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3e:	f383 8811 	msr	BASEPRI, r3
 8008f42:	f3bf 8f6f 	isb	sy
 8008f46:	f3bf 8f4f 	dsb	sy
 8008f4a:	607b      	str	r3, [r7, #4]
}
 8008f4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008f4e:	4b0f      	ldr	r3, [pc, #60]	; (8008f8c <vPortEnterCritical+0x58>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	3301      	adds	r3, #1
 8008f54:	4a0d      	ldr	r2, [pc, #52]	; (8008f8c <vPortEnterCritical+0x58>)
 8008f56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008f58:	4b0c      	ldr	r3, [pc, #48]	; (8008f8c <vPortEnterCritical+0x58>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d10f      	bne.n	8008f80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f60:	4b0b      	ldr	r3, [pc, #44]	; (8008f90 <vPortEnterCritical+0x5c>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00a      	beq.n	8008f80 <vPortEnterCritical+0x4c>
	__asm volatile
 8008f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6e:	f383 8811 	msr	BASEPRI, r3
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	603b      	str	r3, [r7, #0]
}
 8008f7c:	bf00      	nop
 8008f7e:	e7fe      	b.n	8008f7e <vPortEnterCritical+0x4a>
	}
}
 8008f80:	bf00      	nop
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr
 8008f8c:	20000050 	.word	0x20000050
 8008f90:	e000ed04 	.word	0xe000ed04

08008f94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f9a:	4b12      	ldr	r3, [pc, #72]	; (8008fe4 <vPortExitCritical+0x50>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10a      	bne.n	8008fb8 <vPortExitCritical+0x24>
	__asm volatile
 8008fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa6:	f383 8811 	msr	BASEPRI, r3
 8008faa:	f3bf 8f6f 	isb	sy
 8008fae:	f3bf 8f4f 	dsb	sy
 8008fb2:	607b      	str	r3, [r7, #4]
}
 8008fb4:	bf00      	nop
 8008fb6:	e7fe      	b.n	8008fb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008fb8:	4b0a      	ldr	r3, [pc, #40]	; (8008fe4 <vPortExitCritical+0x50>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	4a09      	ldr	r2, [pc, #36]	; (8008fe4 <vPortExitCritical+0x50>)
 8008fc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008fc2:	4b08      	ldr	r3, [pc, #32]	; (8008fe4 <vPortExitCritical+0x50>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d105      	bne.n	8008fd6 <vPortExitCritical+0x42>
 8008fca:	2300      	movs	r3, #0
 8008fcc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008fd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008fd6:	bf00      	nop
 8008fd8:	370c      	adds	r7, #12
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	20000050 	.word	0x20000050
	...

08008ff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ff0:	f3ef 8009 	mrs	r0, PSP
 8008ff4:	f3bf 8f6f 	isb	sy
 8008ff8:	4b15      	ldr	r3, [pc, #84]	; (8009050 <pxCurrentTCBConst>)
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	f01e 0f10 	tst.w	lr, #16
 8009000:	bf08      	it	eq
 8009002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800900a:	6010      	str	r0, [r2, #0]
 800900c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009010:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009014:	f380 8811 	msr	BASEPRI, r0
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	f3bf 8f6f 	isb	sy
 8009020:	f7ff fcf8 	bl	8008a14 <vTaskSwitchContext>
 8009024:	f04f 0000 	mov.w	r0, #0
 8009028:	f380 8811 	msr	BASEPRI, r0
 800902c:	bc09      	pop	{r0, r3}
 800902e:	6819      	ldr	r1, [r3, #0]
 8009030:	6808      	ldr	r0, [r1, #0]
 8009032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009036:	f01e 0f10 	tst.w	lr, #16
 800903a:	bf08      	it	eq
 800903c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009040:	f380 8809 	msr	PSP, r0
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	f3af 8000 	nop.w

08009050 <pxCurrentTCBConst>:
 8009050:	20000968 	.word	0x20000968
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009054:	bf00      	nop
 8009056:	bf00      	nop

08009058 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
	__asm volatile
 800905e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009062:	f383 8811 	msr	BASEPRI, r3
 8009066:	f3bf 8f6f 	isb	sy
 800906a:	f3bf 8f4f 	dsb	sy
 800906e:	607b      	str	r3, [r7, #4]
}
 8009070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009072:	f7ff fc17 	bl	80088a4 <xTaskIncrementTick>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d003      	beq.n	8009084 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800907c:	4b06      	ldr	r3, [pc, #24]	; (8009098 <SysTick_Handler+0x40>)
 800907e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009082:	601a      	str	r2, [r3, #0]
 8009084:	2300      	movs	r3, #0
 8009086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	f383 8811 	msr	BASEPRI, r3
}
 800908e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009090:	bf00      	nop
 8009092:	3708      	adds	r7, #8
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	e000ed04 	.word	0xe000ed04

0800909c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800909c:	b480      	push	{r7}
 800909e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80090a0:	4b0b      	ldr	r3, [pc, #44]	; (80090d0 <vPortSetupTimerInterrupt+0x34>)
 80090a2:	2200      	movs	r2, #0
 80090a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80090a6:	4b0b      	ldr	r3, [pc, #44]	; (80090d4 <vPortSetupTimerInterrupt+0x38>)
 80090a8:	2200      	movs	r2, #0
 80090aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80090ac:	4b0a      	ldr	r3, [pc, #40]	; (80090d8 <vPortSetupTimerInterrupt+0x3c>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a0a      	ldr	r2, [pc, #40]	; (80090dc <vPortSetupTimerInterrupt+0x40>)
 80090b2:	fba2 2303 	umull	r2, r3, r2, r3
 80090b6:	099b      	lsrs	r3, r3, #6
 80090b8:	4a09      	ldr	r2, [pc, #36]	; (80090e0 <vPortSetupTimerInterrupt+0x44>)
 80090ba:	3b01      	subs	r3, #1
 80090bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80090be:	4b04      	ldr	r3, [pc, #16]	; (80090d0 <vPortSetupTimerInterrupt+0x34>)
 80090c0:	2207      	movs	r2, #7
 80090c2:	601a      	str	r2, [r3, #0]
}
 80090c4:	bf00      	nop
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	e000e010 	.word	0xe000e010
 80090d4:	e000e018 	.word	0xe000e018
 80090d8:	20000000 	.word	0x20000000
 80090dc:	10624dd3 	.word	0x10624dd3
 80090e0:	e000e014 	.word	0xe000e014

080090e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80090e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80090f4 <vPortEnableVFP+0x10>
 80090e8:	6801      	ldr	r1, [r0, #0]
 80090ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80090ee:	6001      	str	r1, [r0, #0]
 80090f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80090f2:	bf00      	nop
 80090f4:	e000ed88 	.word	0xe000ed88

080090f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b08a      	sub	sp, #40	; 0x28
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009100:	2300      	movs	r3, #0
 8009102:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009104:	f7ff fb24 	bl	8008750 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009108:	4b5d      	ldr	r3, [pc, #372]	; (8009280 <pvPortMalloc+0x188>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d101      	bne.n	8009114 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009110:	f000 f924 	bl	800935c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009114:	4b5b      	ldr	r3, [pc, #364]	; (8009284 <pvPortMalloc+0x18c>)
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4013      	ands	r3, r2
 800911c:	2b00      	cmp	r3, #0
 800911e:	f040 8093 	bne.w	8009248 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d01d      	beq.n	8009164 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009128:	2208      	movs	r2, #8
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4413      	add	r3, r2
 800912e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f003 0307 	and.w	r3, r3, #7
 8009136:	2b00      	cmp	r3, #0
 8009138:	d014      	beq.n	8009164 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f023 0307 	bic.w	r3, r3, #7
 8009140:	3308      	adds	r3, #8
 8009142:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f003 0307 	and.w	r3, r3, #7
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00a      	beq.n	8009164 <pvPortMalloc+0x6c>
	__asm volatile
 800914e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	617b      	str	r3, [r7, #20]
}
 8009160:	bf00      	nop
 8009162:	e7fe      	b.n	8009162 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d06e      	beq.n	8009248 <pvPortMalloc+0x150>
 800916a:	4b47      	ldr	r3, [pc, #284]	; (8009288 <pvPortMalloc+0x190>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	429a      	cmp	r2, r3
 8009172:	d869      	bhi.n	8009248 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009174:	4b45      	ldr	r3, [pc, #276]	; (800928c <pvPortMalloc+0x194>)
 8009176:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009178:	4b44      	ldr	r3, [pc, #272]	; (800928c <pvPortMalloc+0x194>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800917e:	e004      	b.n	800918a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009182:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800918a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	429a      	cmp	r2, r3
 8009192:	d903      	bls.n	800919c <pvPortMalloc+0xa4>
 8009194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d1f1      	bne.n	8009180 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800919c:	4b38      	ldr	r3, [pc, #224]	; (8009280 <pvPortMalloc+0x188>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d050      	beq.n	8009248 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80091a6:	6a3b      	ldr	r3, [r7, #32]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2208      	movs	r2, #8
 80091ac:	4413      	add	r3, r2
 80091ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80091b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	6a3b      	ldr	r3, [r7, #32]
 80091b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80091b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ba:	685a      	ldr	r2, [r3, #4]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	1ad2      	subs	r2, r2, r3
 80091c0:	2308      	movs	r3, #8
 80091c2:	005b      	lsls	r3, r3, #1
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d91f      	bls.n	8009208 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80091c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4413      	add	r3, r2
 80091ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	f003 0307 	and.w	r3, r3, #7
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00a      	beq.n	80091f0 <pvPortMalloc+0xf8>
	__asm volatile
 80091da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091de:	f383 8811 	msr	BASEPRI, r3
 80091e2:	f3bf 8f6f 	isb	sy
 80091e6:	f3bf 8f4f 	dsb	sy
 80091ea:	613b      	str	r3, [r7, #16]
}
 80091ec:	bf00      	nop
 80091ee:	e7fe      	b.n	80091ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80091f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f2:	685a      	ldr	r2, [r3, #4]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	1ad2      	subs	r2, r2, r3
 80091f8:	69bb      	ldr	r3, [r7, #24]
 80091fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80091fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009202:	69b8      	ldr	r0, [r7, #24]
 8009204:	f000 f90c 	bl	8009420 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009208:	4b1f      	ldr	r3, [pc, #124]	; (8009288 <pvPortMalloc+0x190>)
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	1ad3      	subs	r3, r2, r3
 8009212:	4a1d      	ldr	r2, [pc, #116]	; (8009288 <pvPortMalloc+0x190>)
 8009214:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009216:	4b1c      	ldr	r3, [pc, #112]	; (8009288 <pvPortMalloc+0x190>)
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	4b1d      	ldr	r3, [pc, #116]	; (8009290 <pvPortMalloc+0x198>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	429a      	cmp	r2, r3
 8009220:	d203      	bcs.n	800922a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009222:	4b19      	ldr	r3, [pc, #100]	; (8009288 <pvPortMalloc+0x190>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a1a      	ldr	r2, [pc, #104]	; (8009290 <pvPortMalloc+0x198>)
 8009228:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800922a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922c:	685a      	ldr	r2, [r3, #4]
 800922e:	4b15      	ldr	r3, [pc, #84]	; (8009284 <pvPortMalloc+0x18c>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	431a      	orrs	r2, r3
 8009234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009236:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923a:	2200      	movs	r2, #0
 800923c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800923e:	4b15      	ldr	r3, [pc, #84]	; (8009294 <pvPortMalloc+0x19c>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	3301      	adds	r3, #1
 8009244:	4a13      	ldr	r2, [pc, #76]	; (8009294 <pvPortMalloc+0x19c>)
 8009246:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009248:	f7ff fa90 	bl	800876c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d101      	bne.n	8009256 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8009252:	f7f7 f9b1 	bl	80005b8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	f003 0307 	and.w	r3, r3, #7
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00a      	beq.n	8009276 <pvPortMalloc+0x17e>
	__asm volatile
 8009260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	60fb      	str	r3, [r7, #12]
}
 8009272:	bf00      	nop
 8009274:	e7fe      	b.n	8009274 <pvPortMalloc+0x17c>
	return pvReturn;
 8009276:	69fb      	ldr	r3, [r7, #28]
}
 8009278:	4618      	mov	r0, r3
 800927a:	3728      	adds	r7, #40	; 0x28
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	20008aa4 	.word	0x20008aa4
 8009284:	20008ab8 	.word	0x20008ab8
 8009288:	20008aa8 	.word	0x20008aa8
 800928c:	20008a9c 	.word	0x20008a9c
 8009290:	20008aac 	.word	0x20008aac
 8009294:	20008ab0 	.word	0x20008ab0

08009298 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b086      	sub	sp, #24
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d04d      	beq.n	8009346 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80092aa:	2308      	movs	r3, #8
 80092ac:	425b      	negs	r3, r3
 80092ae:	697a      	ldr	r2, [r7, #20]
 80092b0:	4413      	add	r3, r2
 80092b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	685a      	ldr	r2, [r3, #4]
 80092bc:	4b24      	ldr	r3, [pc, #144]	; (8009350 <vPortFree+0xb8>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4013      	ands	r3, r2
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10a      	bne.n	80092dc <vPortFree+0x44>
	__asm volatile
 80092c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ca:	f383 8811 	msr	BASEPRI, r3
 80092ce:	f3bf 8f6f 	isb	sy
 80092d2:	f3bf 8f4f 	dsb	sy
 80092d6:	60fb      	str	r3, [r7, #12]
}
 80092d8:	bf00      	nop
 80092da:	e7fe      	b.n	80092da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d00a      	beq.n	80092fa <vPortFree+0x62>
	__asm volatile
 80092e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e8:	f383 8811 	msr	BASEPRI, r3
 80092ec:	f3bf 8f6f 	isb	sy
 80092f0:	f3bf 8f4f 	dsb	sy
 80092f4:	60bb      	str	r3, [r7, #8]
}
 80092f6:	bf00      	nop
 80092f8:	e7fe      	b.n	80092f8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	685a      	ldr	r2, [r3, #4]
 80092fe:	4b14      	ldr	r3, [pc, #80]	; (8009350 <vPortFree+0xb8>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4013      	ands	r3, r2
 8009304:	2b00      	cmp	r3, #0
 8009306:	d01e      	beq.n	8009346 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d11a      	bne.n	8009346 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	685a      	ldr	r2, [r3, #4]
 8009314:	4b0e      	ldr	r3, [pc, #56]	; (8009350 <vPortFree+0xb8>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	43db      	mvns	r3, r3
 800931a:	401a      	ands	r2, r3
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009320:	f7ff fa16 	bl	8008750 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	685a      	ldr	r2, [r3, #4]
 8009328:	4b0a      	ldr	r3, [pc, #40]	; (8009354 <vPortFree+0xbc>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4413      	add	r3, r2
 800932e:	4a09      	ldr	r2, [pc, #36]	; (8009354 <vPortFree+0xbc>)
 8009330:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009332:	6938      	ldr	r0, [r7, #16]
 8009334:	f000 f874 	bl	8009420 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009338:	4b07      	ldr	r3, [pc, #28]	; (8009358 <vPortFree+0xc0>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	3301      	adds	r3, #1
 800933e:	4a06      	ldr	r2, [pc, #24]	; (8009358 <vPortFree+0xc0>)
 8009340:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009342:	f7ff fa13 	bl	800876c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009346:	bf00      	nop
 8009348:	3718      	adds	r7, #24
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	20008ab8 	.word	0x20008ab8
 8009354:	20008aa8 	.word	0x20008aa8
 8009358:	20008ab4 	.word	0x20008ab4

0800935c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009366:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009368:	4b27      	ldr	r3, [pc, #156]	; (8009408 <prvHeapInit+0xac>)
 800936a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f003 0307 	and.w	r3, r3, #7
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00c      	beq.n	8009390 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	3307      	adds	r3, #7
 800937a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f023 0307 	bic.w	r3, r3, #7
 8009382:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009384:	68ba      	ldr	r2, [r7, #8]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	1ad3      	subs	r3, r2, r3
 800938a:	4a1f      	ldr	r2, [pc, #124]	; (8009408 <prvHeapInit+0xac>)
 800938c:	4413      	add	r3, r2
 800938e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009394:	4a1d      	ldr	r2, [pc, #116]	; (800940c <prvHeapInit+0xb0>)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800939a:	4b1c      	ldr	r3, [pc, #112]	; (800940c <prvHeapInit+0xb0>)
 800939c:	2200      	movs	r2, #0
 800939e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	68ba      	ldr	r2, [r7, #8]
 80093a4:	4413      	add	r3, r2
 80093a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80093a8:	2208      	movs	r2, #8
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	1a9b      	subs	r3, r3, r2
 80093ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f023 0307 	bic.w	r3, r3, #7
 80093b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	4a15      	ldr	r2, [pc, #84]	; (8009410 <prvHeapInit+0xb4>)
 80093bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80093be:	4b14      	ldr	r3, [pc, #80]	; (8009410 <prvHeapInit+0xb4>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2200      	movs	r2, #0
 80093c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80093c6:	4b12      	ldr	r3, [pc, #72]	; (8009410 <prvHeapInit+0xb4>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2200      	movs	r2, #0
 80093cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	1ad2      	subs	r2, r2, r3
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80093dc:	4b0c      	ldr	r3, [pc, #48]	; (8009410 <prvHeapInit+0xb4>)
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	4a0a      	ldr	r2, [pc, #40]	; (8009414 <prvHeapInit+0xb8>)
 80093ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	4a09      	ldr	r2, [pc, #36]	; (8009418 <prvHeapInit+0xbc>)
 80093f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80093f4:	4b09      	ldr	r3, [pc, #36]	; (800941c <prvHeapInit+0xc0>)
 80093f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80093fa:	601a      	str	r2, [r3, #0]
}
 80093fc:	bf00      	nop
 80093fe:	3714      	adds	r7, #20
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr
 8009408:	20000a9c 	.word	0x20000a9c
 800940c:	20008a9c 	.word	0x20008a9c
 8009410:	20008aa4 	.word	0x20008aa4
 8009414:	20008aac 	.word	0x20008aac
 8009418:	20008aa8 	.word	0x20008aa8
 800941c:	20008ab8 	.word	0x20008ab8

08009420 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009428:	4b28      	ldr	r3, [pc, #160]	; (80094cc <prvInsertBlockIntoFreeList+0xac>)
 800942a:	60fb      	str	r3, [r7, #12]
 800942c:	e002      	b.n	8009434 <prvInsertBlockIntoFreeList+0x14>
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	60fb      	str	r3, [r7, #12]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	429a      	cmp	r2, r3
 800943c:	d8f7      	bhi.n	800942e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	68ba      	ldr	r2, [r7, #8]
 8009448:	4413      	add	r3, r2
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	429a      	cmp	r2, r3
 800944e:	d108      	bne.n	8009462 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	685a      	ldr	r2, [r3, #4]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	441a      	add	r2, r3
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	441a      	add	r2, r3
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	429a      	cmp	r2, r3
 8009474:	d118      	bne.n	80094a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	4b15      	ldr	r3, [pc, #84]	; (80094d0 <prvInsertBlockIntoFreeList+0xb0>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	429a      	cmp	r2, r3
 8009480:	d00d      	beq.n	800949e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	685a      	ldr	r2, [r3, #4]
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	441a      	add	r2, r3
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	601a      	str	r2, [r3, #0]
 800949c:	e008      	b.n	80094b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800949e:	4b0c      	ldr	r3, [pc, #48]	; (80094d0 <prvInsertBlockIntoFreeList+0xb0>)
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	601a      	str	r2, [r3, #0]
 80094a6:	e003      	b.n	80094b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d002      	beq.n	80094be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094be:	bf00      	nop
 80094c0:	3714      	adds	r7, #20
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr
 80094ca:	bf00      	nop
 80094cc:	20008a9c 	.word	0x20008a9c
 80094d0:	20008aa4 	.word	0x20008aa4

080094d4 <__errno>:
 80094d4:	4b01      	ldr	r3, [pc, #4]	; (80094dc <__errno+0x8>)
 80094d6:	6818      	ldr	r0, [r3, #0]
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop
 80094dc:	20000054 	.word	0x20000054

080094e0 <__libc_init_array>:
 80094e0:	b570      	push	{r4, r5, r6, lr}
 80094e2:	4d0d      	ldr	r5, [pc, #52]	; (8009518 <__libc_init_array+0x38>)
 80094e4:	4c0d      	ldr	r4, [pc, #52]	; (800951c <__libc_init_array+0x3c>)
 80094e6:	1b64      	subs	r4, r4, r5
 80094e8:	10a4      	asrs	r4, r4, #2
 80094ea:	2600      	movs	r6, #0
 80094ec:	42a6      	cmp	r6, r4
 80094ee:	d109      	bne.n	8009504 <__libc_init_array+0x24>
 80094f0:	4d0b      	ldr	r5, [pc, #44]	; (8009520 <__libc_init_array+0x40>)
 80094f2:	4c0c      	ldr	r4, [pc, #48]	; (8009524 <__libc_init_array+0x44>)
 80094f4:	f000 fcf8 	bl	8009ee8 <_init>
 80094f8:	1b64      	subs	r4, r4, r5
 80094fa:	10a4      	asrs	r4, r4, #2
 80094fc:	2600      	movs	r6, #0
 80094fe:	42a6      	cmp	r6, r4
 8009500:	d105      	bne.n	800950e <__libc_init_array+0x2e>
 8009502:	bd70      	pop	{r4, r5, r6, pc}
 8009504:	f855 3b04 	ldr.w	r3, [r5], #4
 8009508:	4798      	blx	r3
 800950a:	3601      	adds	r6, #1
 800950c:	e7ee      	b.n	80094ec <__libc_init_array+0xc>
 800950e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009512:	4798      	blx	r3
 8009514:	3601      	adds	r6, #1
 8009516:	e7f2      	b.n	80094fe <__libc_init_array+0x1e>
 8009518:	0800baa8 	.word	0x0800baa8
 800951c:	0800baa8 	.word	0x0800baa8
 8009520:	0800baa8 	.word	0x0800baa8
 8009524:	0800baac 	.word	0x0800baac

08009528 <__retarget_lock_acquire_recursive>:
 8009528:	4770      	bx	lr

0800952a <__retarget_lock_release_recursive>:
 800952a:	4770      	bx	lr

0800952c <memcpy>:
 800952c:	440a      	add	r2, r1
 800952e:	4291      	cmp	r1, r2
 8009530:	f100 33ff 	add.w	r3, r0, #4294967295
 8009534:	d100      	bne.n	8009538 <memcpy+0xc>
 8009536:	4770      	bx	lr
 8009538:	b510      	push	{r4, lr}
 800953a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800953e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009542:	4291      	cmp	r1, r2
 8009544:	d1f9      	bne.n	800953a <memcpy+0xe>
 8009546:	bd10      	pop	{r4, pc}

08009548 <memset>:
 8009548:	4402      	add	r2, r0
 800954a:	4603      	mov	r3, r0
 800954c:	4293      	cmp	r3, r2
 800954e:	d100      	bne.n	8009552 <memset+0xa>
 8009550:	4770      	bx	lr
 8009552:	f803 1b01 	strb.w	r1, [r3], #1
 8009556:	e7f9      	b.n	800954c <memset+0x4>

08009558 <sbrk_aligned>:
 8009558:	b570      	push	{r4, r5, r6, lr}
 800955a:	4e0e      	ldr	r6, [pc, #56]	; (8009594 <sbrk_aligned+0x3c>)
 800955c:	460c      	mov	r4, r1
 800955e:	6831      	ldr	r1, [r6, #0]
 8009560:	4605      	mov	r5, r0
 8009562:	b911      	cbnz	r1, 800956a <sbrk_aligned+0x12>
 8009564:	f000 f8f6 	bl	8009754 <_sbrk_r>
 8009568:	6030      	str	r0, [r6, #0]
 800956a:	4621      	mov	r1, r4
 800956c:	4628      	mov	r0, r5
 800956e:	f000 f8f1 	bl	8009754 <_sbrk_r>
 8009572:	1c43      	adds	r3, r0, #1
 8009574:	d00a      	beq.n	800958c <sbrk_aligned+0x34>
 8009576:	1cc4      	adds	r4, r0, #3
 8009578:	f024 0403 	bic.w	r4, r4, #3
 800957c:	42a0      	cmp	r0, r4
 800957e:	d007      	beq.n	8009590 <sbrk_aligned+0x38>
 8009580:	1a21      	subs	r1, r4, r0
 8009582:	4628      	mov	r0, r5
 8009584:	f000 f8e6 	bl	8009754 <_sbrk_r>
 8009588:	3001      	adds	r0, #1
 800958a:	d101      	bne.n	8009590 <sbrk_aligned+0x38>
 800958c:	f04f 34ff 	mov.w	r4, #4294967295
 8009590:	4620      	mov	r0, r4
 8009592:	bd70      	pop	{r4, r5, r6, pc}
 8009594:	20008ac4 	.word	0x20008ac4

08009598 <_malloc_r>:
 8009598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800959c:	1ccd      	adds	r5, r1, #3
 800959e:	f025 0503 	bic.w	r5, r5, #3
 80095a2:	3508      	adds	r5, #8
 80095a4:	2d0c      	cmp	r5, #12
 80095a6:	bf38      	it	cc
 80095a8:	250c      	movcc	r5, #12
 80095aa:	2d00      	cmp	r5, #0
 80095ac:	4607      	mov	r7, r0
 80095ae:	db01      	blt.n	80095b4 <_malloc_r+0x1c>
 80095b0:	42a9      	cmp	r1, r5
 80095b2:	d905      	bls.n	80095c0 <_malloc_r+0x28>
 80095b4:	230c      	movs	r3, #12
 80095b6:	603b      	str	r3, [r7, #0]
 80095b8:	2600      	movs	r6, #0
 80095ba:	4630      	mov	r0, r6
 80095bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095c0:	4e2e      	ldr	r6, [pc, #184]	; (800967c <_malloc_r+0xe4>)
 80095c2:	f000 f8f7 	bl	80097b4 <__malloc_lock>
 80095c6:	6833      	ldr	r3, [r6, #0]
 80095c8:	461c      	mov	r4, r3
 80095ca:	bb34      	cbnz	r4, 800961a <_malloc_r+0x82>
 80095cc:	4629      	mov	r1, r5
 80095ce:	4638      	mov	r0, r7
 80095d0:	f7ff ffc2 	bl	8009558 <sbrk_aligned>
 80095d4:	1c43      	adds	r3, r0, #1
 80095d6:	4604      	mov	r4, r0
 80095d8:	d14d      	bne.n	8009676 <_malloc_r+0xde>
 80095da:	6834      	ldr	r4, [r6, #0]
 80095dc:	4626      	mov	r6, r4
 80095de:	2e00      	cmp	r6, #0
 80095e0:	d140      	bne.n	8009664 <_malloc_r+0xcc>
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	4631      	mov	r1, r6
 80095e6:	4638      	mov	r0, r7
 80095e8:	eb04 0803 	add.w	r8, r4, r3
 80095ec:	f000 f8b2 	bl	8009754 <_sbrk_r>
 80095f0:	4580      	cmp	r8, r0
 80095f2:	d13a      	bne.n	800966a <_malloc_r+0xd2>
 80095f4:	6821      	ldr	r1, [r4, #0]
 80095f6:	3503      	adds	r5, #3
 80095f8:	1a6d      	subs	r5, r5, r1
 80095fa:	f025 0503 	bic.w	r5, r5, #3
 80095fe:	3508      	adds	r5, #8
 8009600:	2d0c      	cmp	r5, #12
 8009602:	bf38      	it	cc
 8009604:	250c      	movcc	r5, #12
 8009606:	4629      	mov	r1, r5
 8009608:	4638      	mov	r0, r7
 800960a:	f7ff ffa5 	bl	8009558 <sbrk_aligned>
 800960e:	3001      	adds	r0, #1
 8009610:	d02b      	beq.n	800966a <_malloc_r+0xd2>
 8009612:	6823      	ldr	r3, [r4, #0]
 8009614:	442b      	add	r3, r5
 8009616:	6023      	str	r3, [r4, #0]
 8009618:	e00e      	b.n	8009638 <_malloc_r+0xa0>
 800961a:	6822      	ldr	r2, [r4, #0]
 800961c:	1b52      	subs	r2, r2, r5
 800961e:	d41e      	bmi.n	800965e <_malloc_r+0xc6>
 8009620:	2a0b      	cmp	r2, #11
 8009622:	d916      	bls.n	8009652 <_malloc_r+0xba>
 8009624:	1961      	adds	r1, r4, r5
 8009626:	42a3      	cmp	r3, r4
 8009628:	6025      	str	r5, [r4, #0]
 800962a:	bf18      	it	ne
 800962c:	6059      	strne	r1, [r3, #4]
 800962e:	6863      	ldr	r3, [r4, #4]
 8009630:	bf08      	it	eq
 8009632:	6031      	streq	r1, [r6, #0]
 8009634:	5162      	str	r2, [r4, r5]
 8009636:	604b      	str	r3, [r1, #4]
 8009638:	4638      	mov	r0, r7
 800963a:	f104 060b 	add.w	r6, r4, #11
 800963e:	f000 f8bf 	bl	80097c0 <__malloc_unlock>
 8009642:	f026 0607 	bic.w	r6, r6, #7
 8009646:	1d23      	adds	r3, r4, #4
 8009648:	1af2      	subs	r2, r6, r3
 800964a:	d0b6      	beq.n	80095ba <_malloc_r+0x22>
 800964c:	1b9b      	subs	r3, r3, r6
 800964e:	50a3      	str	r3, [r4, r2]
 8009650:	e7b3      	b.n	80095ba <_malloc_r+0x22>
 8009652:	6862      	ldr	r2, [r4, #4]
 8009654:	42a3      	cmp	r3, r4
 8009656:	bf0c      	ite	eq
 8009658:	6032      	streq	r2, [r6, #0]
 800965a:	605a      	strne	r2, [r3, #4]
 800965c:	e7ec      	b.n	8009638 <_malloc_r+0xa0>
 800965e:	4623      	mov	r3, r4
 8009660:	6864      	ldr	r4, [r4, #4]
 8009662:	e7b2      	b.n	80095ca <_malloc_r+0x32>
 8009664:	4634      	mov	r4, r6
 8009666:	6876      	ldr	r6, [r6, #4]
 8009668:	e7b9      	b.n	80095de <_malloc_r+0x46>
 800966a:	230c      	movs	r3, #12
 800966c:	603b      	str	r3, [r7, #0]
 800966e:	4638      	mov	r0, r7
 8009670:	f000 f8a6 	bl	80097c0 <__malloc_unlock>
 8009674:	e7a1      	b.n	80095ba <_malloc_r+0x22>
 8009676:	6025      	str	r5, [r4, #0]
 8009678:	e7de      	b.n	8009638 <_malloc_r+0xa0>
 800967a:	bf00      	nop
 800967c:	20008ac0 	.word	0x20008ac0

08009680 <cleanup_glue>:
 8009680:	b538      	push	{r3, r4, r5, lr}
 8009682:	460c      	mov	r4, r1
 8009684:	6809      	ldr	r1, [r1, #0]
 8009686:	4605      	mov	r5, r0
 8009688:	b109      	cbz	r1, 800968e <cleanup_glue+0xe>
 800968a:	f7ff fff9 	bl	8009680 <cleanup_glue>
 800968e:	4621      	mov	r1, r4
 8009690:	4628      	mov	r0, r5
 8009692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009696:	f000 b899 	b.w	80097cc <_free_r>
	...

0800969c <_reclaim_reent>:
 800969c:	4b2c      	ldr	r3, [pc, #176]	; (8009750 <_reclaim_reent+0xb4>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4283      	cmp	r3, r0
 80096a2:	b570      	push	{r4, r5, r6, lr}
 80096a4:	4604      	mov	r4, r0
 80096a6:	d051      	beq.n	800974c <_reclaim_reent+0xb0>
 80096a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80096aa:	b143      	cbz	r3, 80096be <_reclaim_reent+0x22>
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d14a      	bne.n	8009748 <_reclaim_reent+0xac>
 80096b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096b4:	6819      	ldr	r1, [r3, #0]
 80096b6:	b111      	cbz	r1, 80096be <_reclaim_reent+0x22>
 80096b8:	4620      	mov	r0, r4
 80096ba:	f000 f887 	bl	80097cc <_free_r>
 80096be:	6961      	ldr	r1, [r4, #20]
 80096c0:	b111      	cbz	r1, 80096c8 <_reclaim_reent+0x2c>
 80096c2:	4620      	mov	r0, r4
 80096c4:	f000 f882 	bl	80097cc <_free_r>
 80096c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80096ca:	b111      	cbz	r1, 80096d2 <_reclaim_reent+0x36>
 80096cc:	4620      	mov	r0, r4
 80096ce:	f000 f87d 	bl	80097cc <_free_r>
 80096d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80096d4:	b111      	cbz	r1, 80096dc <_reclaim_reent+0x40>
 80096d6:	4620      	mov	r0, r4
 80096d8:	f000 f878 	bl	80097cc <_free_r>
 80096dc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80096de:	b111      	cbz	r1, 80096e6 <_reclaim_reent+0x4a>
 80096e0:	4620      	mov	r0, r4
 80096e2:	f000 f873 	bl	80097cc <_free_r>
 80096e6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80096e8:	b111      	cbz	r1, 80096f0 <_reclaim_reent+0x54>
 80096ea:	4620      	mov	r0, r4
 80096ec:	f000 f86e 	bl	80097cc <_free_r>
 80096f0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80096f2:	b111      	cbz	r1, 80096fa <_reclaim_reent+0x5e>
 80096f4:	4620      	mov	r0, r4
 80096f6:	f000 f869 	bl	80097cc <_free_r>
 80096fa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80096fc:	b111      	cbz	r1, 8009704 <_reclaim_reent+0x68>
 80096fe:	4620      	mov	r0, r4
 8009700:	f000 f864 	bl	80097cc <_free_r>
 8009704:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009706:	b111      	cbz	r1, 800970e <_reclaim_reent+0x72>
 8009708:	4620      	mov	r0, r4
 800970a:	f000 f85f 	bl	80097cc <_free_r>
 800970e:	69a3      	ldr	r3, [r4, #24]
 8009710:	b1e3      	cbz	r3, 800974c <_reclaim_reent+0xb0>
 8009712:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009714:	4620      	mov	r0, r4
 8009716:	4798      	blx	r3
 8009718:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800971a:	b1b9      	cbz	r1, 800974c <_reclaim_reent+0xb0>
 800971c:	4620      	mov	r0, r4
 800971e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009722:	f7ff bfad 	b.w	8009680 <cleanup_glue>
 8009726:	5949      	ldr	r1, [r1, r5]
 8009728:	b941      	cbnz	r1, 800973c <_reclaim_reent+0xa0>
 800972a:	3504      	adds	r5, #4
 800972c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800972e:	2d80      	cmp	r5, #128	; 0x80
 8009730:	68d9      	ldr	r1, [r3, #12]
 8009732:	d1f8      	bne.n	8009726 <_reclaim_reent+0x8a>
 8009734:	4620      	mov	r0, r4
 8009736:	f000 f849 	bl	80097cc <_free_r>
 800973a:	e7ba      	b.n	80096b2 <_reclaim_reent+0x16>
 800973c:	680e      	ldr	r6, [r1, #0]
 800973e:	4620      	mov	r0, r4
 8009740:	f000 f844 	bl	80097cc <_free_r>
 8009744:	4631      	mov	r1, r6
 8009746:	e7ef      	b.n	8009728 <_reclaim_reent+0x8c>
 8009748:	2500      	movs	r5, #0
 800974a:	e7ef      	b.n	800972c <_reclaim_reent+0x90>
 800974c:	bd70      	pop	{r4, r5, r6, pc}
 800974e:	bf00      	nop
 8009750:	20000054 	.word	0x20000054

08009754 <_sbrk_r>:
 8009754:	b538      	push	{r3, r4, r5, lr}
 8009756:	4d06      	ldr	r5, [pc, #24]	; (8009770 <_sbrk_r+0x1c>)
 8009758:	2300      	movs	r3, #0
 800975a:	4604      	mov	r4, r0
 800975c:	4608      	mov	r0, r1
 800975e:	602b      	str	r3, [r5, #0]
 8009760:	f7f7 ffa8 	bl	80016b4 <_sbrk>
 8009764:	1c43      	adds	r3, r0, #1
 8009766:	d102      	bne.n	800976e <_sbrk_r+0x1a>
 8009768:	682b      	ldr	r3, [r5, #0]
 800976a:	b103      	cbz	r3, 800976e <_sbrk_r+0x1a>
 800976c:	6023      	str	r3, [r4, #0]
 800976e:	bd38      	pop	{r3, r4, r5, pc}
 8009770:	20008ac8 	.word	0x20008ac8

08009774 <siprintf>:
 8009774:	b40e      	push	{r1, r2, r3}
 8009776:	b500      	push	{lr}
 8009778:	b09c      	sub	sp, #112	; 0x70
 800977a:	ab1d      	add	r3, sp, #116	; 0x74
 800977c:	9002      	str	r0, [sp, #8]
 800977e:	9006      	str	r0, [sp, #24]
 8009780:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009784:	4809      	ldr	r0, [pc, #36]	; (80097ac <siprintf+0x38>)
 8009786:	9107      	str	r1, [sp, #28]
 8009788:	9104      	str	r1, [sp, #16]
 800978a:	4909      	ldr	r1, [pc, #36]	; (80097b0 <siprintf+0x3c>)
 800978c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009790:	9105      	str	r1, [sp, #20]
 8009792:	6800      	ldr	r0, [r0, #0]
 8009794:	9301      	str	r3, [sp, #4]
 8009796:	a902      	add	r1, sp, #8
 8009798:	f000 f8c0 	bl	800991c <_svfiprintf_r>
 800979c:	9b02      	ldr	r3, [sp, #8]
 800979e:	2200      	movs	r2, #0
 80097a0:	701a      	strb	r2, [r3, #0]
 80097a2:	b01c      	add	sp, #112	; 0x70
 80097a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80097a8:	b003      	add	sp, #12
 80097aa:	4770      	bx	lr
 80097ac:	20000054 	.word	0x20000054
 80097b0:	ffff0208 	.word	0xffff0208

080097b4 <__malloc_lock>:
 80097b4:	4801      	ldr	r0, [pc, #4]	; (80097bc <__malloc_lock+0x8>)
 80097b6:	f7ff beb7 	b.w	8009528 <__retarget_lock_acquire_recursive>
 80097ba:	bf00      	nop
 80097bc:	20008abc 	.word	0x20008abc

080097c0 <__malloc_unlock>:
 80097c0:	4801      	ldr	r0, [pc, #4]	; (80097c8 <__malloc_unlock+0x8>)
 80097c2:	f7ff beb2 	b.w	800952a <__retarget_lock_release_recursive>
 80097c6:	bf00      	nop
 80097c8:	20008abc 	.word	0x20008abc

080097cc <_free_r>:
 80097cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097ce:	2900      	cmp	r1, #0
 80097d0:	d044      	beq.n	800985c <_free_r+0x90>
 80097d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097d6:	9001      	str	r0, [sp, #4]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	f1a1 0404 	sub.w	r4, r1, #4
 80097de:	bfb8      	it	lt
 80097e0:	18e4      	addlt	r4, r4, r3
 80097e2:	f7ff ffe7 	bl	80097b4 <__malloc_lock>
 80097e6:	4a1e      	ldr	r2, [pc, #120]	; (8009860 <_free_r+0x94>)
 80097e8:	9801      	ldr	r0, [sp, #4]
 80097ea:	6813      	ldr	r3, [r2, #0]
 80097ec:	b933      	cbnz	r3, 80097fc <_free_r+0x30>
 80097ee:	6063      	str	r3, [r4, #4]
 80097f0:	6014      	str	r4, [r2, #0]
 80097f2:	b003      	add	sp, #12
 80097f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097f8:	f7ff bfe2 	b.w	80097c0 <__malloc_unlock>
 80097fc:	42a3      	cmp	r3, r4
 80097fe:	d908      	bls.n	8009812 <_free_r+0x46>
 8009800:	6825      	ldr	r5, [r4, #0]
 8009802:	1961      	adds	r1, r4, r5
 8009804:	428b      	cmp	r3, r1
 8009806:	bf01      	itttt	eq
 8009808:	6819      	ldreq	r1, [r3, #0]
 800980a:	685b      	ldreq	r3, [r3, #4]
 800980c:	1949      	addeq	r1, r1, r5
 800980e:	6021      	streq	r1, [r4, #0]
 8009810:	e7ed      	b.n	80097ee <_free_r+0x22>
 8009812:	461a      	mov	r2, r3
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	b10b      	cbz	r3, 800981c <_free_r+0x50>
 8009818:	42a3      	cmp	r3, r4
 800981a:	d9fa      	bls.n	8009812 <_free_r+0x46>
 800981c:	6811      	ldr	r1, [r2, #0]
 800981e:	1855      	adds	r5, r2, r1
 8009820:	42a5      	cmp	r5, r4
 8009822:	d10b      	bne.n	800983c <_free_r+0x70>
 8009824:	6824      	ldr	r4, [r4, #0]
 8009826:	4421      	add	r1, r4
 8009828:	1854      	adds	r4, r2, r1
 800982a:	42a3      	cmp	r3, r4
 800982c:	6011      	str	r1, [r2, #0]
 800982e:	d1e0      	bne.n	80097f2 <_free_r+0x26>
 8009830:	681c      	ldr	r4, [r3, #0]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	6053      	str	r3, [r2, #4]
 8009836:	4421      	add	r1, r4
 8009838:	6011      	str	r1, [r2, #0]
 800983a:	e7da      	b.n	80097f2 <_free_r+0x26>
 800983c:	d902      	bls.n	8009844 <_free_r+0x78>
 800983e:	230c      	movs	r3, #12
 8009840:	6003      	str	r3, [r0, #0]
 8009842:	e7d6      	b.n	80097f2 <_free_r+0x26>
 8009844:	6825      	ldr	r5, [r4, #0]
 8009846:	1961      	adds	r1, r4, r5
 8009848:	428b      	cmp	r3, r1
 800984a:	bf04      	itt	eq
 800984c:	6819      	ldreq	r1, [r3, #0]
 800984e:	685b      	ldreq	r3, [r3, #4]
 8009850:	6063      	str	r3, [r4, #4]
 8009852:	bf04      	itt	eq
 8009854:	1949      	addeq	r1, r1, r5
 8009856:	6021      	streq	r1, [r4, #0]
 8009858:	6054      	str	r4, [r2, #4]
 800985a:	e7ca      	b.n	80097f2 <_free_r+0x26>
 800985c:	b003      	add	sp, #12
 800985e:	bd30      	pop	{r4, r5, pc}
 8009860:	20008ac0 	.word	0x20008ac0

08009864 <__ssputs_r>:
 8009864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009868:	688e      	ldr	r6, [r1, #8]
 800986a:	429e      	cmp	r6, r3
 800986c:	4682      	mov	sl, r0
 800986e:	460c      	mov	r4, r1
 8009870:	4690      	mov	r8, r2
 8009872:	461f      	mov	r7, r3
 8009874:	d838      	bhi.n	80098e8 <__ssputs_r+0x84>
 8009876:	898a      	ldrh	r2, [r1, #12]
 8009878:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800987c:	d032      	beq.n	80098e4 <__ssputs_r+0x80>
 800987e:	6825      	ldr	r5, [r4, #0]
 8009880:	6909      	ldr	r1, [r1, #16]
 8009882:	eba5 0901 	sub.w	r9, r5, r1
 8009886:	6965      	ldr	r5, [r4, #20]
 8009888:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800988c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009890:	3301      	adds	r3, #1
 8009892:	444b      	add	r3, r9
 8009894:	106d      	asrs	r5, r5, #1
 8009896:	429d      	cmp	r5, r3
 8009898:	bf38      	it	cc
 800989a:	461d      	movcc	r5, r3
 800989c:	0553      	lsls	r3, r2, #21
 800989e:	d531      	bpl.n	8009904 <__ssputs_r+0xa0>
 80098a0:	4629      	mov	r1, r5
 80098a2:	f7ff fe79 	bl	8009598 <_malloc_r>
 80098a6:	4606      	mov	r6, r0
 80098a8:	b950      	cbnz	r0, 80098c0 <__ssputs_r+0x5c>
 80098aa:	230c      	movs	r3, #12
 80098ac:	f8ca 3000 	str.w	r3, [sl]
 80098b0:	89a3      	ldrh	r3, [r4, #12]
 80098b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098b6:	81a3      	strh	r3, [r4, #12]
 80098b8:	f04f 30ff 	mov.w	r0, #4294967295
 80098bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098c0:	6921      	ldr	r1, [r4, #16]
 80098c2:	464a      	mov	r2, r9
 80098c4:	f7ff fe32 	bl	800952c <memcpy>
 80098c8:	89a3      	ldrh	r3, [r4, #12]
 80098ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098d2:	81a3      	strh	r3, [r4, #12]
 80098d4:	6126      	str	r6, [r4, #16]
 80098d6:	6165      	str	r5, [r4, #20]
 80098d8:	444e      	add	r6, r9
 80098da:	eba5 0509 	sub.w	r5, r5, r9
 80098de:	6026      	str	r6, [r4, #0]
 80098e0:	60a5      	str	r5, [r4, #8]
 80098e2:	463e      	mov	r6, r7
 80098e4:	42be      	cmp	r6, r7
 80098e6:	d900      	bls.n	80098ea <__ssputs_r+0x86>
 80098e8:	463e      	mov	r6, r7
 80098ea:	6820      	ldr	r0, [r4, #0]
 80098ec:	4632      	mov	r2, r6
 80098ee:	4641      	mov	r1, r8
 80098f0:	f000 faa8 	bl	8009e44 <memmove>
 80098f4:	68a3      	ldr	r3, [r4, #8]
 80098f6:	1b9b      	subs	r3, r3, r6
 80098f8:	60a3      	str	r3, [r4, #8]
 80098fa:	6823      	ldr	r3, [r4, #0]
 80098fc:	4433      	add	r3, r6
 80098fe:	6023      	str	r3, [r4, #0]
 8009900:	2000      	movs	r0, #0
 8009902:	e7db      	b.n	80098bc <__ssputs_r+0x58>
 8009904:	462a      	mov	r2, r5
 8009906:	f000 fab7 	bl	8009e78 <_realloc_r>
 800990a:	4606      	mov	r6, r0
 800990c:	2800      	cmp	r0, #0
 800990e:	d1e1      	bne.n	80098d4 <__ssputs_r+0x70>
 8009910:	6921      	ldr	r1, [r4, #16]
 8009912:	4650      	mov	r0, sl
 8009914:	f7ff ff5a 	bl	80097cc <_free_r>
 8009918:	e7c7      	b.n	80098aa <__ssputs_r+0x46>
	...

0800991c <_svfiprintf_r>:
 800991c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009920:	4698      	mov	r8, r3
 8009922:	898b      	ldrh	r3, [r1, #12]
 8009924:	061b      	lsls	r3, r3, #24
 8009926:	b09d      	sub	sp, #116	; 0x74
 8009928:	4607      	mov	r7, r0
 800992a:	460d      	mov	r5, r1
 800992c:	4614      	mov	r4, r2
 800992e:	d50e      	bpl.n	800994e <_svfiprintf_r+0x32>
 8009930:	690b      	ldr	r3, [r1, #16]
 8009932:	b963      	cbnz	r3, 800994e <_svfiprintf_r+0x32>
 8009934:	2140      	movs	r1, #64	; 0x40
 8009936:	f7ff fe2f 	bl	8009598 <_malloc_r>
 800993a:	6028      	str	r0, [r5, #0]
 800993c:	6128      	str	r0, [r5, #16]
 800993e:	b920      	cbnz	r0, 800994a <_svfiprintf_r+0x2e>
 8009940:	230c      	movs	r3, #12
 8009942:	603b      	str	r3, [r7, #0]
 8009944:	f04f 30ff 	mov.w	r0, #4294967295
 8009948:	e0d1      	b.n	8009aee <_svfiprintf_r+0x1d2>
 800994a:	2340      	movs	r3, #64	; 0x40
 800994c:	616b      	str	r3, [r5, #20]
 800994e:	2300      	movs	r3, #0
 8009950:	9309      	str	r3, [sp, #36]	; 0x24
 8009952:	2320      	movs	r3, #32
 8009954:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009958:	f8cd 800c 	str.w	r8, [sp, #12]
 800995c:	2330      	movs	r3, #48	; 0x30
 800995e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009b08 <_svfiprintf_r+0x1ec>
 8009962:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009966:	f04f 0901 	mov.w	r9, #1
 800996a:	4623      	mov	r3, r4
 800996c:	469a      	mov	sl, r3
 800996e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009972:	b10a      	cbz	r2, 8009978 <_svfiprintf_r+0x5c>
 8009974:	2a25      	cmp	r2, #37	; 0x25
 8009976:	d1f9      	bne.n	800996c <_svfiprintf_r+0x50>
 8009978:	ebba 0b04 	subs.w	fp, sl, r4
 800997c:	d00b      	beq.n	8009996 <_svfiprintf_r+0x7a>
 800997e:	465b      	mov	r3, fp
 8009980:	4622      	mov	r2, r4
 8009982:	4629      	mov	r1, r5
 8009984:	4638      	mov	r0, r7
 8009986:	f7ff ff6d 	bl	8009864 <__ssputs_r>
 800998a:	3001      	adds	r0, #1
 800998c:	f000 80aa 	beq.w	8009ae4 <_svfiprintf_r+0x1c8>
 8009990:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009992:	445a      	add	r2, fp
 8009994:	9209      	str	r2, [sp, #36]	; 0x24
 8009996:	f89a 3000 	ldrb.w	r3, [sl]
 800999a:	2b00      	cmp	r3, #0
 800999c:	f000 80a2 	beq.w	8009ae4 <_svfiprintf_r+0x1c8>
 80099a0:	2300      	movs	r3, #0
 80099a2:	f04f 32ff 	mov.w	r2, #4294967295
 80099a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099aa:	f10a 0a01 	add.w	sl, sl, #1
 80099ae:	9304      	str	r3, [sp, #16]
 80099b0:	9307      	str	r3, [sp, #28]
 80099b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099b6:	931a      	str	r3, [sp, #104]	; 0x68
 80099b8:	4654      	mov	r4, sl
 80099ba:	2205      	movs	r2, #5
 80099bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099c0:	4851      	ldr	r0, [pc, #324]	; (8009b08 <_svfiprintf_r+0x1ec>)
 80099c2:	f7f6 fc15 	bl	80001f0 <memchr>
 80099c6:	9a04      	ldr	r2, [sp, #16]
 80099c8:	b9d8      	cbnz	r0, 8009a02 <_svfiprintf_r+0xe6>
 80099ca:	06d0      	lsls	r0, r2, #27
 80099cc:	bf44      	itt	mi
 80099ce:	2320      	movmi	r3, #32
 80099d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099d4:	0711      	lsls	r1, r2, #28
 80099d6:	bf44      	itt	mi
 80099d8:	232b      	movmi	r3, #43	; 0x2b
 80099da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099de:	f89a 3000 	ldrb.w	r3, [sl]
 80099e2:	2b2a      	cmp	r3, #42	; 0x2a
 80099e4:	d015      	beq.n	8009a12 <_svfiprintf_r+0xf6>
 80099e6:	9a07      	ldr	r2, [sp, #28]
 80099e8:	4654      	mov	r4, sl
 80099ea:	2000      	movs	r0, #0
 80099ec:	f04f 0c0a 	mov.w	ip, #10
 80099f0:	4621      	mov	r1, r4
 80099f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099f6:	3b30      	subs	r3, #48	; 0x30
 80099f8:	2b09      	cmp	r3, #9
 80099fa:	d94e      	bls.n	8009a9a <_svfiprintf_r+0x17e>
 80099fc:	b1b0      	cbz	r0, 8009a2c <_svfiprintf_r+0x110>
 80099fe:	9207      	str	r2, [sp, #28]
 8009a00:	e014      	b.n	8009a2c <_svfiprintf_r+0x110>
 8009a02:	eba0 0308 	sub.w	r3, r0, r8
 8009a06:	fa09 f303 	lsl.w	r3, r9, r3
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	9304      	str	r3, [sp, #16]
 8009a0e:	46a2      	mov	sl, r4
 8009a10:	e7d2      	b.n	80099b8 <_svfiprintf_r+0x9c>
 8009a12:	9b03      	ldr	r3, [sp, #12]
 8009a14:	1d19      	adds	r1, r3, #4
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	9103      	str	r1, [sp, #12]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	bfbb      	ittet	lt
 8009a1e:	425b      	neglt	r3, r3
 8009a20:	f042 0202 	orrlt.w	r2, r2, #2
 8009a24:	9307      	strge	r3, [sp, #28]
 8009a26:	9307      	strlt	r3, [sp, #28]
 8009a28:	bfb8      	it	lt
 8009a2a:	9204      	strlt	r2, [sp, #16]
 8009a2c:	7823      	ldrb	r3, [r4, #0]
 8009a2e:	2b2e      	cmp	r3, #46	; 0x2e
 8009a30:	d10c      	bne.n	8009a4c <_svfiprintf_r+0x130>
 8009a32:	7863      	ldrb	r3, [r4, #1]
 8009a34:	2b2a      	cmp	r3, #42	; 0x2a
 8009a36:	d135      	bne.n	8009aa4 <_svfiprintf_r+0x188>
 8009a38:	9b03      	ldr	r3, [sp, #12]
 8009a3a:	1d1a      	adds	r2, r3, #4
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	9203      	str	r2, [sp, #12]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	bfb8      	it	lt
 8009a44:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a48:	3402      	adds	r4, #2
 8009a4a:	9305      	str	r3, [sp, #20]
 8009a4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009b18 <_svfiprintf_r+0x1fc>
 8009a50:	7821      	ldrb	r1, [r4, #0]
 8009a52:	2203      	movs	r2, #3
 8009a54:	4650      	mov	r0, sl
 8009a56:	f7f6 fbcb 	bl	80001f0 <memchr>
 8009a5a:	b140      	cbz	r0, 8009a6e <_svfiprintf_r+0x152>
 8009a5c:	2340      	movs	r3, #64	; 0x40
 8009a5e:	eba0 000a 	sub.w	r0, r0, sl
 8009a62:	fa03 f000 	lsl.w	r0, r3, r0
 8009a66:	9b04      	ldr	r3, [sp, #16]
 8009a68:	4303      	orrs	r3, r0
 8009a6a:	3401      	adds	r4, #1
 8009a6c:	9304      	str	r3, [sp, #16]
 8009a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a72:	4826      	ldr	r0, [pc, #152]	; (8009b0c <_svfiprintf_r+0x1f0>)
 8009a74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a78:	2206      	movs	r2, #6
 8009a7a:	f7f6 fbb9 	bl	80001f0 <memchr>
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	d038      	beq.n	8009af4 <_svfiprintf_r+0x1d8>
 8009a82:	4b23      	ldr	r3, [pc, #140]	; (8009b10 <_svfiprintf_r+0x1f4>)
 8009a84:	bb1b      	cbnz	r3, 8009ace <_svfiprintf_r+0x1b2>
 8009a86:	9b03      	ldr	r3, [sp, #12]
 8009a88:	3307      	adds	r3, #7
 8009a8a:	f023 0307 	bic.w	r3, r3, #7
 8009a8e:	3308      	adds	r3, #8
 8009a90:	9303      	str	r3, [sp, #12]
 8009a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a94:	4433      	add	r3, r6
 8009a96:	9309      	str	r3, [sp, #36]	; 0x24
 8009a98:	e767      	b.n	800996a <_svfiprintf_r+0x4e>
 8009a9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a9e:	460c      	mov	r4, r1
 8009aa0:	2001      	movs	r0, #1
 8009aa2:	e7a5      	b.n	80099f0 <_svfiprintf_r+0xd4>
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	3401      	adds	r4, #1
 8009aa8:	9305      	str	r3, [sp, #20]
 8009aaa:	4619      	mov	r1, r3
 8009aac:	f04f 0c0a 	mov.w	ip, #10
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ab6:	3a30      	subs	r2, #48	; 0x30
 8009ab8:	2a09      	cmp	r2, #9
 8009aba:	d903      	bls.n	8009ac4 <_svfiprintf_r+0x1a8>
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d0c5      	beq.n	8009a4c <_svfiprintf_r+0x130>
 8009ac0:	9105      	str	r1, [sp, #20]
 8009ac2:	e7c3      	b.n	8009a4c <_svfiprintf_r+0x130>
 8009ac4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ac8:	4604      	mov	r4, r0
 8009aca:	2301      	movs	r3, #1
 8009acc:	e7f0      	b.n	8009ab0 <_svfiprintf_r+0x194>
 8009ace:	ab03      	add	r3, sp, #12
 8009ad0:	9300      	str	r3, [sp, #0]
 8009ad2:	462a      	mov	r2, r5
 8009ad4:	4b0f      	ldr	r3, [pc, #60]	; (8009b14 <_svfiprintf_r+0x1f8>)
 8009ad6:	a904      	add	r1, sp, #16
 8009ad8:	4638      	mov	r0, r7
 8009ada:	f3af 8000 	nop.w
 8009ade:	1c42      	adds	r2, r0, #1
 8009ae0:	4606      	mov	r6, r0
 8009ae2:	d1d6      	bne.n	8009a92 <_svfiprintf_r+0x176>
 8009ae4:	89ab      	ldrh	r3, [r5, #12]
 8009ae6:	065b      	lsls	r3, r3, #25
 8009ae8:	f53f af2c 	bmi.w	8009944 <_svfiprintf_r+0x28>
 8009aec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009aee:	b01d      	add	sp, #116	; 0x74
 8009af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af4:	ab03      	add	r3, sp, #12
 8009af6:	9300      	str	r3, [sp, #0]
 8009af8:	462a      	mov	r2, r5
 8009afa:	4b06      	ldr	r3, [pc, #24]	; (8009b14 <_svfiprintf_r+0x1f8>)
 8009afc:	a904      	add	r1, sp, #16
 8009afe:	4638      	mov	r0, r7
 8009b00:	f000 f87a 	bl	8009bf8 <_printf_i>
 8009b04:	e7eb      	b.n	8009ade <_svfiprintf_r+0x1c2>
 8009b06:	bf00      	nop
 8009b08:	0800ba6c 	.word	0x0800ba6c
 8009b0c:	0800ba76 	.word	0x0800ba76
 8009b10:	00000000 	.word	0x00000000
 8009b14:	08009865 	.word	0x08009865
 8009b18:	0800ba72 	.word	0x0800ba72

08009b1c <_printf_common>:
 8009b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b20:	4616      	mov	r6, r2
 8009b22:	4699      	mov	r9, r3
 8009b24:	688a      	ldr	r2, [r1, #8]
 8009b26:	690b      	ldr	r3, [r1, #16]
 8009b28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	bfb8      	it	lt
 8009b30:	4613      	movlt	r3, r2
 8009b32:	6033      	str	r3, [r6, #0]
 8009b34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b38:	4607      	mov	r7, r0
 8009b3a:	460c      	mov	r4, r1
 8009b3c:	b10a      	cbz	r2, 8009b42 <_printf_common+0x26>
 8009b3e:	3301      	adds	r3, #1
 8009b40:	6033      	str	r3, [r6, #0]
 8009b42:	6823      	ldr	r3, [r4, #0]
 8009b44:	0699      	lsls	r1, r3, #26
 8009b46:	bf42      	ittt	mi
 8009b48:	6833      	ldrmi	r3, [r6, #0]
 8009b4a:	3302      	addmi	r3, #2
 8009b4c:	6033      	strmi	r3, [r6, #0]
 8009b4e:	6825      	ldr	r5, [r4, #0]
 8009b50:	f015 0506 	ands.w	r5, r5, #6
 8009b54:	d106      	bne.n	8009b64 <_printf_common+0x48>
 8009b56:	f104 0a19 	add.w	sl, r4, #25
 8009b5a:	68e3      	ldr	r3, [r4, #12]
 8009b5c:	6832      	ldr	r2, [r6, #0]
 8009b5e:	1a9b      	subs	r3, r3, r2
 8009b60:	42ab      	cmp	r3, r5
 8009b62:	dc26      	bgt.n	8009bb2 <_printf_common+0x96>
 8009b64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b68:	1e13      	subs	r3, r2, #0
 8009b6a:	6822      	ldr	r2, [r4, #0]
 8009b6c:	bf18      	it	ne
 8009b6e:	2301      	movne	r3, #1
 8009b70:	0692      	lsls	r2, r2, #26
 8009b72:	d42b      	bmi.n	8009bcc <_printf_common+0xb0>
 8009b74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b78:	4649      	mov	r1, r9
 8009b7a:	4638      	mov	r0, r7
 8009b7c:	47c0      	blx	r8
 8009b7e:	3001      	adds	r0, #1
 8009b80:	d01e      	beq.n	8009bc0 <_printf_common+0xa4>
 8009b82:	6823      	ldr	r3, [r4, #0]
 8009b84:	68e5      	ldr	r5, [r4, #12]
 8009b86:	6832      	ldr	r2, [r6, #0]
 8009b88:	f003 0306 	and.w	r3, r3, #6
 8009b8c:	2b04      	cmp	r3, #4
 8009b8e:	bf08      	it	eq
 8009b90:	1aad      	subeq	r5, r5, r2
 8009b92:	68a3      	ldr	r3, [r4, #8]
 8009b94:	6922      	ldr	r2, [r4, #16]
 8009b96:	bf0c      	ite	eq
 8009b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b9c:	2500      	movne	r5, #0
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	bfc4      	itt	gt
 8009ba2:	1a9b      	subgt	r3, r3, r2
 8009ba4:	18ed      	addgt	r5, r5, r3
 8009ba6:	2600      	movs	r6, #0
 8009ba8:	341a      	adds	r4, #26
 8009baa:	42b5      	cmp	r5, r6
 8009bac:	d11a      	bne.n	8009be4 <_printf_common+0xc8>
 8009bae:	2000      	movs	r0, #0
 8009bb0:	e008      	b.n	8009bc4 <_printf_common+0xa8>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	4652      	mov	r2, sl
 8009bb6:	4649      	mov	r1, r9
 8009bb8:	4638      	mov	r0, r7
 8009bba:	47c0      	blx	r8
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	d103      	bne.n	8009bc8 <_printf_common+0xac>
 8009bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bc8:	3501      	adds	r5, #1
 8009bca:	e7c6      	b.n	8009b5a <_printf_common+0x3e>
 8009bcc:	18e1      	adds	r1, r4, r3
 8009bce:	1c5a      	adds	r2, r3, #1
 8009bd0:	2030      	movs	r0, #48	; 0x30
 8009bd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009bd6:	4422      	add	r2, r4
 8009bd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009bdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009be0:	3302      	adds	r3, #2
 8009be2:	e7c7      	b.n	8009b74 <_printf_common+0x58>
 8009be4:	2301      	movs	r3, #1
 8009be6:	4622      	mov	r2, r4
 8009be8:	4649      	mov	r1, r9
 8009bea:	4638      	mov	r0, r7
 8009bec:	47c0      	blx	r8
 8009bee:	3001      	adds	r0, #1
 8009bf0:	d0e6      	beq.n	8009bc0 <_printf_common+0xa4>
 8009bf2:	3601      	adds	r6, #1
 8009bf4:	e7d9      	b.n	8009baa <_printf_common+0x8e>
	...

08009bf8 <_printf_i>:
 8009bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bfc:	7e0f      	ldrb	r7, [r1, #24]
 8009bfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c00:	2f78      	cmp	r7, #120	; 0x78
 8009c02:	4691      	mov	r9, r2
 8009c04:	4680      	mov	r8, r0
 8009c06:	460c      	mov	r4, r1
 8009c08:	469a      	mov	sl, r3
 8009c0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c0e:	d807      	bhi.n	8009c20 <_printf_i+0x28>
 8009c10:	2f62      	cmp	r7, #98	; 0x62
 8009c12:	d80a      	bhi.n	8009c2a <_printf_i+0x32>
 8009c14:	2f00      	cmp	r7, #0
 8009c16:	f000 80d8 	beq.w	8009dca <_printf_i+0x1d2>
 8009c1a:	2f58      	cmp	r7, #88	; 0x58
 8009c1c:	f000 80a3 	beq.w	8009d66 <_printf_i+0x16e>
 8009c20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c28:	e03a      	b.n	8009ca0 <_printf_i+0xa8>
 8009c2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c2e:	2b15      	cmp	r3, #21
 8009c30:	d8f6      	bhi.n	8009c20 <_printf_i+0x28>
 8009c32:	a101      	add	r1, pc, #4	; (adr r1, 8009c38 <_printf_i+0x40>)
 8009c34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c38:	08009c91 	.word	0x08009c91
 8009c3c:	08009ca5 	.word	0x08009ca5
 8009c40:	08009c21 	.word	0x08009c21
 8009c44:	08009c21 	.word	0x08009c21
 8009c48:	08009c21 	.word	0x08009c21
 8009c4c:	08009c21 	.word	0x08009c21
 8009c50:	08009ca5 	.word	0x08009ca5
 8009c54:	08009c21 	.word	0x08009c21
 8009c58:	08009c21 	.word	0x08009c21
 8009c5c:	08009c21 	.word	0x08009c21
 8009c60:	08009c21 	.word	0x08009c21
 8009c64:	08009db1 	.word	0x08009db1
 8009c68:	08009cd5 	.word	0x08009cd5
 8009c6c:	08009d93 	.word	0x08009d93
 8009c70:	08009c21 	.word	0x08009c21
 8009c74:	08009c21 	.word	0x08009c21
 8009c78:	08009dd3 	.word	0x08009dd3
 8009c7c:	08009c21 	.word	0x08009c21
 8009c80:	08009cd5 	.word	0x08009cd5
 8009c84:	08009c21 	.word	0x08009c21
 8009c88:	08009c21 	.word	0x08009c21
 8009c8c:	08009d9b 	.word	0x08009d9b
 8009c90:	682b      	ldr	r3, [r5, #0]
 8009c92:	1d1a      	adds	r2, r3, #4
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	602a      	str	r2, [r5, #0]
 8009c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e0a3      	b.n	8009dec <_printf_i+0x1f4>
 8009ca4:	6820      	ldr	r0, [r4, #0]
 8009ca6:	6829      	ldr	r1, [r5, #0]
 8009ca8:	0606      	lsls	r6, r0, #24
 8009caa:	f101 0304 	add.w	r3, r1, #4
 8009cae:	d50a      	bpl.n	8009cc6 <_printf_i+0xce>
 8009cb0:	680e      	ldr	r6, [r1, #0]
 8009cb2:	602b      	str	r3, [r5, #0]
 8009cb4:	2e00      	cmp	r6, #0
 8009cb6:	da03      	bge.n	8009cc0 <_printf_i+0xc8>
 8009cb8:	232d      	movs	r3, #45	; 0x2d
 8009cba:	4276      	negs	r6, r6
 8009cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cc0:	485e      	ldr	r0, [pc, #376]	; (8009e3c <_printf_i+0x244>)
 8009cc2:	230a      	movs	r3, #10
 8009cc4:	e019      	b.n	8009cfa <_printf_i+0x102>
 8009cc6:	680e      	ldr	r6, [r1, #0]
 8009cc8:	602b      	str	r3, [r5, #0]
 8009cca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009cce:	bf18      	it	ne
 8009cd0:	b236      	sxthne	r6, r6
 8009cd2:	e7ef      	b.n	8009cb4 <_printf_i+0xbc>
 8009cd4:	682b      	ldr	r3, [r5, #0]
 8009cd6:	6820      	ldr	r0, [r4, #0]
 8009cd8:	1d19      	adds	r1, r3, #4
 8009cda:	6029      	str	r1, [r5, #0]
 8009cdc:	0601      	lsls	r1, r0, #24
 8009cde:	d501      	bpl.n	8009ce4 <_printf_i+0xec>
 8009ce0:	681e      	ldr	r6, [r3, #0]
 8009ce2:	e002      	b.n	8009cea <_printf_i+0xf2>
 8009ce4:	0646      	lsls	r6, r0, #25
 8009ce6:	d5fb      	bpl.n	8009ce0 <_printf_i+0xe8>
 8009ce8:	881e      	ldrh	r6, [r3, #0]
 8009cea:	4854      	ldr	r0, [pc, #336]	; (8009e3c <_printf_i+0x244>)
 8009cec:	2f6f      	cmp	r7, #111	; 0x6f
 8009cee:	bf0c      	ite	eq
 8009cf0:	2308      	moveq	r3, #8
 8009cf2:	230a      	movne	r3, #10
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009cfa:	6865      	ldr	r5, [r4, #4]
 8009cfc:	60a5      	str	r5, [r4, #8]
 8009cfe:	2d00      	cmp	r5, #0
 8009d00:	bfa2      	ittt	ge
 8009d02:	6821      	ldrge	r1, [r4, #0]
 8009d04:	f021 0104 	bicge.w	r1, r1, #4
 8009d08:	6021      	strge	r1, [r4, #0]
 8009d0a:	b90e      	cbnz	r6, 8009d10 <_printf_i+0x118>
 8009d0c:	2d00      	cmp	r5, #0
 8009d0e:	d04d      	beq.n	8009dac <_printf_i+0x1b4>
 8009d10:	4615      	mov	r5, r2
 8009d12:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d16:	fb03 6711 	mls	r7, r3, r1, r6
 8009d1a:	5dc7      	ldrb	r7, [r0, r7]
 8009d1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d20:	4637      	mov	r7, r6
 8009d22:	42bb      	cmp	r3, r7
 8009d24:	460e      	mov	r6, r1
 8009d26:	d9f4      	bls.n	8009d12 <_printf_i+0x11a>
 8009d28:	2b08      	cmp	r3, #8
 8009d2a:	d10b      	bne.n	8009d44 <_printf_i+0x14c>
 8009d2c:	6823      	ldr	r3, [r4, #0]
 8009d2e:	07de      	lsls	r6, r3, #31
 8009d30:	d508      	bpl.n	8009d44 <_printf_i+0x14c>
 8009d32:	6923      	ldr	r3, [r4, #16]
 8009d34:	6861      	ldr	r1, [r4, #4]
 8009d36:	4299      	cmp	r1, r3
 8009d38:	bfde      	ittt	le
 8009d3a:	2330      	movle	r3, #48	; 0x30
 8009d3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009d44:	1b52      	subs	r2, r2, r5
 8009d46:	6122      	str	r2, [r4, #16]
 8009d48:	f8cd a000 	str.w	sl, [sp]
 8009d4c:	464b      	mov	r3, r9
 8009d4e:	aa03      	add	r2, sp, #12
 8009d50:	4621      	mov	r1, r4
 8009d52:	4640      	mov	r0, r8
 8009d54:	f7ff fee2 	bl	8009b1c <_printf_common>
 8009d58:	3001      	adds	r0, #1
 8009d5a:	d14c      	bne.n	8009df6 <_printf_i+0x1fe>
 8009d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d60:	b004      	add	sp, #16
 8009d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d66:	4835      	ldr	r0, [pc, #212]	; (8009e3c <_printf_i+0x244>)
 8009d68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009d6c:	6829      	ldr	r1, [r5, #0]
 8009d6e:	6823      	ldr	r3, [r4, #0]
 8009d70:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d74:	6029      	str	r1, [r5, #0]
 8009d76:	061d      	lsls	r5, r3, #24
 8009d78:	d514      	bpl.n	8009da4 <_printf_i+0x1ac>
 8009d7a:	07df      	lsls	r7, r3, #31
 8009d7c:	bf44      	itt	mi
 8009d7e:	f043 0320 	orrmi.w	r3, r3, #32
 8009d82:	6023      	strmi	r3, [r4, #0]
 8009d84:	b91e      	cbnz	r6, 8009d8e <_printf_i+0x196>
 8009d86:	6823      	ldr	r3, [r4, #0]
 8009d88:	f023 0320 	bic.w	r3, r3, #32
 8009d8c:	6023      	str	r3, [r4, #0]
 8009d8e:	2310      	movs	r3, #16
 8009d90:	e7b0      	b.n	8009cf4 <_printf_i+0xfc>
 8009d92:	6823      	ldr	r3, [r4, #0]
 8009d94:	f043 0320 	orr.w	r3, r3, #32
 8009d98:	6023      	str	r3, [r4, #0]
 8009d9a:	2378      	movs	r3, #120	; 0x78
 8009d9c:	4828      	ldr	r0, [pc, #160]	; (8009e40 <_printf_i+0x248>)
 8009d9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009da2:	e7e3      	b.n	8009d6c <_printf_i+0x174>
 8009da4:	0659      	lsls	r1, r3, #25
 8009da6:	bf48      	it	mi
 8009da8:	b2b6      	uxthmi	r6, r6
 8009daa:	e7e6      	b.n	8009d7a <_printf_i+0x182>
 8009dac:	4615      	mov	r5, r2
 8009dae:	e7bb      	b.n	8009d28 <_printf_i+0x130>
 8009db0:	682b      	ldr	r3, [r5, #0]
 8009db2:	6826      	ldr	r6, [r4, #0]
 8009db4:	6961      	ldr	r1, [r4, #20]
 8009db6:	1d18      	adds	r0, r3, #4
 8009db8:	6028      	str	r0, [r5, #0]
 8009dba:	0635      	lsls	r5, r6, #24
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	d501      	bpl.n	8009dc4 <_printf_i+0x1cc>
 8009dc0:	6019      	str	r1, [r3, #0]
 8009dc2:	e002      	b.n	8009dca <_printf_i+0x1d2>
 8009dc4:	0670      	lsls	r0, r6, #25
 8009dc6:	d5fb      	bpl.n	8009dc0 <_printf_i+0x1c8>
 8009dc8:	8019      	strh	r1, [r3, #0]
 8009dca:	2300      	movs	r3, #0
 8009dcc:	6123      	str	r3, [r4, #16]
 8009dce:	4615      	mov	r5, r2
 8009dd0:	e7ba      	b.n	8009d48 <_printf_i+0x150>
 8009dd2:	682b      	ldr	r3, [r5, #0]
 8009dd4:	1d1a      	adds	r2, r3, #4
 8009dd6:	602a      	str	r2, [r5, #0]
 8009dd8:	681d      	ldr	r5, [r3, #0]
 8009dda:	6862      	ldr	r2, [r4, #4]
 8009ddc:	2100      	movs	r1, #0
 8009dde:	4628      	mov	r0, r5
 8009de0:	f7f6 fa06 	bl	80001f0 <memchr>
 8009de4:	b108      	cbz	r0, 8009dea <_printf_i+0x1f2>
 8009de6:	1b40      	subs	r0, r0, r5
 8009de8:	6060      	str	r0, [r4, #4]
 8009dea:	6863      	ldr	r3, [r4, #4]
 8009dec:	6123      	str	r3, [r4, #16]
 8009dee:	2300      	movs	r3, #0
 8009df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009df4:	e7a8      	b.n	8009d48 <_printf_i+0x150>
 8009df6:	6923      	ldr	r3, [r4, #16]
 8009df8:	462a      	mov	r2, r5
 8009dfa:	4649      	mov	r1, r9
 8009dfc:	4640      	mov	r0, r8
 8009dfe:	47d0      	blx	sl
 8009e00:	3001      	adds	r0, #1
 8009e02:	d0ab      	beq.n	8009d5c <_printf_i+0x164>
 8009e04:	6823      	ldr	r3, [r4, #0]
 8009e06:	079b      	lsls	r3, r3, #30
 8009e08:	d413      	bmi.n	8009e32 <_printf_i+0x23a>
 8009e0a:	68e0      	ldr	r0, [r4, #12]
 8009e0c:	9b03      	ldr	r3, [sp, #12]
 8009e0e:	4298      	cmp	r0, r3
 8009e10:	bfb8      	it	lt
 8009e12:	4618      	movlt	r0, r3
 8009e14:	e7a4      	b.n	8009d60 <_printf_i+0x168>
 8009e16:	2301      	movs	r3, #1
 8009e18:	4632      	mov	r2, r6
 8009e1a:	4649      	mov	r1, r9
 8009e1c:	4640      	mov	r0, r8
 8009e1e:	47d0      	blx	sl
 8009e20:	3001      	adds	r0, #1
 8009e22:	d09b      	beq.n	8009d5c <_printf_i+0x164>
 8009e24:	3501      	adds	r5, #1
 8009e26:	68e3      	ldr	r3, [r4, #12]
 8009e28:	9903      	ldr	r1, [sp, #12]
 8009e2a:	1a5b      	subs	r3, r3, r1
 8009e2c:	42ab      	cmp	r3, r5
 8009e2e:	dcf2      	bgt.n	8009e16 <_printf_i+0x21e>
 8009e30:	e7eb      	b.n	8009e0a <_printf_i+0x212>
 8009e32:	2500      	movs	r5, #0
 8009e34:	f104 0619 	add.w	r6, r4, #25
 8009e38:	e7f5      	b.n	8009e26 <_printf_i+0x22e>
 8009e3a:	bf00      	nop
 8009e3c:	0800ba7d 	.word	0x0800ba7d
 8009e40:	0800ba8e 	.word	0x0800ba8e

08009e44 <memmove>:
 8009e44:	4288      	cmp	r0, r1
 8009e46:	b510      	push	{r4, lr}
 8009e48:	eb01 0402 	add.w	r4, r1, r2
 8009e4c:	d902      	bls.n	8009e54 <memmove+0x10>
 8009e4e:	4284      	cmp	r4, r0
 8009e50:	4623      	mov	r3, r4
 8009e52:	d807      	bhi.n	8009e64 <memmove+0x20>
 8009e54:	1e43      	subs	r3, r0, #1
 8009e56:	42a1      	cmp	r1, r4
 8009e58:	d008      	beq.n	8009e6c <memmove+0x28>
 8009e5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e62:	e7f8      	b.n	8009e56 <memmove+0x12>
 8009e64:	4402      	add	r2, r0
 8009e66:	4601      	mov	r1, r0
 8009e68:	428a      	cmp	r2, r1
 8009e6a:	d100      	bne.n	8009e6e <memmove+0x2a>
 8009e6c:	bd10      	pop	{r4, pc}
 8009e6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e76:	e7f7      	b.n	8009e68 <memmove+0x24>

08009e78 <_realloc_r>:
 8009e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e7c:	4680      	mov	r8, r0
 8009e7e:	4614      	mov	r4, r2
 8009e80:	460e      	mov	r6, r1
 8009e82:	b921      	cbnz	r1, 8009e8e <_realloc_r+0x16>
 8009e84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e88:	4611      	mov	r1, r2
 8009e8a:	f7ff bb85 	b.w	8009598 <_malloc_r>
 8009e8e:	b92a      	cbnz	r2, 8009e9c <_realloc_r+0x24>
 8009e90:	f7ff fc9c 	bl	80097cc <_free_r>
 8009e94:	4625      	mov	r5, r4
 8009e96:	4628      	mov	r0, r5
 8009e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e9c:	f000 f81b 	bl	8009ed6 <_malloc_usable_size_r>
 8009ea0:	4284      	cmp	r4, r0
 8009ea2:	4607      	mov	r7, r0
 8009ea4:	d802      	bhi.n	8009eac <_realloc_r+0x34>
 8009ea6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009eaa:	d812      	bhi.n	8009ed2 <_realloc_r+0x5a>
 8009eac:	4621      	mov	r1, r4
 8009eae:	4640      	mov	r0, r8
 8009eb0:	f7ff fb72 	bl	8009598 <_malloc_r>
 8009eb4:	4605      	mov	r5, r0
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	d0ed      	beq.n	8009e96 <_realloc_r+0x1e>
 8009eba:	42bc      	cmp	r4, r7
 8009ebc:	4622      	mov	r2, r4
 8009ebe:	4631      	mov	r1, r6
 8009ec0:	bf28      	it	cs
 8009ec2:	463a      	movcs	r2, r7
 8009ec4:	f7ff fb32 	bl	800952c <memcpy>
 8009ec8:	4631      	mov	r1, r6
 8009eca:	4640      	mov	r0, r8
 8009ecc:	f7ff fc7e 	bl	80097cc <_free_r>
 8009ed0:	e7e1      	b.n	8009e96 <_realloc_r+0x1e>
 8009ed2:	4635      	mov	r5, r6
 8009ed4:	e7df      	b.n	8009e96 <_realloc_r+0x1e>

08009ed6 <_malloc_usable_size_r>:
 8009ed6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eda:	1f18      	subs	r0, r3, #4
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	bfbc      	itt	lt
 8009ee0:	580b      	ldrlt	r3, [r1, r0]
 8009ee2:	18c0      	addlt	r0, r0, r3
 8009ee4:	4770      	bx	lr
	...

08009ee8 <_init>:
 8009ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eea:	bf00      	nop
 8009eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eee:	bc08      	pop	{r3}
 8009ef0:	469e      	mov	lr, r3
 8009ef2:	4770      	bx	lr

08009ef4 <_fini>:
 8009ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ef6:	bf00      	nop
 8009ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009efa:	bc08      	pop	{r3}
 8009efc:	469e      	mov	lr, r3
 8009efe:	4770      	bx	lr
